
Sine_Model.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011004  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009ec  080111d8  080111d8  000211d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011bc4  08011bc4  000307b4  2**0
                  CONTENTS
  4 .ARM          00000008  08011bc4  08011bc4  00021bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011bcc  08011bcc  000307b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011bcc  08011bcc  00021bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011bd0  08011bd0  00021bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007b4  20000000  08011bd4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f68  200007b4  08012388  000307b4  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  2000171c  08012388  0003171c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000307b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032394  00000000  00000000  000307e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d0a  00000000  00000000  00062b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002450  00000000  00000000  00068888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002200  00000000  00000000  0006acd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032dd3  00000000  00000000  0006ced8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e5a6  00000000  00000000  0009fcab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012c020  00000000  00000000  000ce251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  001fa271  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000adf0  00000000  00000000  001fa340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00205130  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  002051fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200007b4 	.word	0x200007b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080111bc 	.word	0x080111bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200007b8 	.word	0x200007b8
 800020c:	080111bc 	.word	0x080111bc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f84:	f3bf 8f4f 	dsb	sy
}
 8000f88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f8a:	f3bf 8f6f 	isb	sy
}
 8000f8e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <SCB_EnableICache+0x48>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f98:	f3bf 8f4f 	dsb	sy
}
 8000f9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f9e:	f3bf 8f6f 	isb	sy
}
 8000fa2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <SCB_EnableICache+0x48>)
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <SCB_EnableICache+0x48>)
 8000faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fae:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fb0:	f3bf 8f4f 	dsb	sy
}
 8000fb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fb6:	f3bf 8f6f 	isb	sy
}
 8000fba:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <SCB_EnableDCache+0x84>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000fda:	f3bf 8f4f 	dsb	sy
}
 8000fde:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <SCB_EnableDCache+0x84>)
 8000fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fe6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	0b5b      	lsrs	r3, r3, #13
 8000fec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ff0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	08db      	lsrs	r3, r3, #3
 8000ff6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ffa:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	015a      	lsls	r2, r3, #5
 8001000:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001004:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800100a:	4911      	ldr	r1, [pc, #68]	; (8001050 <SCB_EnableDCache+0x84>)
 800100c:	4313      	orrs	r3, r2
 800100e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	1e5a      	subs	r2, r3, #1
 8001016:	60ba      	str	r2, [r7, #8]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1ef      	bne.n	8000ffc <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	60fa      	str	r2, [r7, #12]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1e5      	bne.n	8000ff2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001026:	f3bf 8f4f 	dsb	sy
}
 800102a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <SCB_EnableDCache+0x84>)
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	4a07      	ldr	r2, [pc, #28]	; (8001050 <SCB_EnableDCache+0x84>)
 8001032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001036:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001038:	f3bf 8f4f 	dsb	sy
}
 800103c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800103e:	f3bf 8f6f 	isb	sy
}
 8001042:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00
 8001054:	00000000 	.word	0x00000000

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b5b0      	push	{r4, r5, r7, lr}
 800105a:	b0d2      	sub	sp, #328	; 0x148
 800105c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  char buf[50];
  int buf_len = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  ai_error ai_err;
  ai_i32 nbatch;
  uint32_t timestamp;
  float test = 0.0f;
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  // Buffers used to store input and output tensors
  AI_ALIGNED(4) ai_i8 in_data[AI_SINE_MODEL_IN_1_SIZE_BYTES];
  AI_ALIGNED(4) ai_i8 out_data[AI_SINE_MODEL_OUT_1_SIZE_BYTES];

  // Pointer to our model
  ai_handle sine_model = AI_HANDLE_NULL;
 800106c:	2300      	movs	r3, #0
 800106e:	667b      	str	r3, [r7, #100]	; 0x64

  // Initialize wrapper structs that hold pointers to data and info about the
  // data (tensor height, width, channels)
  ai_buffer ai_input[AI_SINE_MODEL_IN_NUM] = AI_SINE_MODEL_IN;
 8001070:	4bab      	ldr	r3, [pc, #684]	; (8001320 <main+0x2c8>)
 8001072:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001076:	461d      	mov	r5, r3
 8001078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800107a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800107c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001080:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_buffer ai_output[AI_SINE_MODEL_OUT_NUM] = AI_SINE_MODEL_OUT;
 8001084:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001088:	4aa5      	ldr	r2, [pc, #660]	; (8001320 <main+0x2c8>)
 800108a:	461c      	mov	r4, r3
 800108c:	4615      	mov	r5, r2
 800108e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001092:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001096:	e884 0003 	stmia.w	r4, {r0, r1}

  // Set working memory and get weights/biases from model
  ai_network_params ai_params = {
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	4aa1      	ldr	r2, [pc, #644]	; (8001324 <main+0x2cc>)
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2201      	movs	r2, #1
 80010a4:	809a      	strh	r2, [r3, #4]
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	2201      	movs	r2, #1
 80010aa:	80da      	strh	r2, [r3, #6]
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2201      	movs	r2, #1
 80010b0:	811a      	strh	r2, [r3, #8]
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	f240 5204 	movw	r2, #1284	; 0x504
 80010b8:	60da      	str	r2, [r3, #12]
    AI_SINE_MODEL_DATA_WEIGHTS(ai_sine_model_data_weights_get()),
 80010ba:	f00b fdab 	bl	800cc14 <ai_sine_model_data_weights_get>
 80010be:	4602      	mov	r2, r0
  ai_network_params ai_params = {
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	611a      	str	r2, [r3, #16]
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	615a      	str	r2, [r3, #20]
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	4a96      	ldr	r2, [pc, #600]	; (8001328 <main+0x2d0>)
 80010ce:	619a      	str	r2, [r3, #24]
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	2201      	movs	r2, #1
 80010d4:	839a      	strh	r2, [r3, #28]
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2201      	movs	r2, #1
 80010da:	83da      	strh	r2, [r3, #30]
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2201      	movs	r2, #1
 80010e0:	841a      	strh	r2, [r3, #32]
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2280      	movs	r2, #128	; 0x80
 80010e6:	625a      	str	r2, [r3, #36]	; 0x24
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2200      	movs	r2, #0
 80010f4:	62da      	str	r2, [r3, #44]	; 0x2c
    AI_SINE_MODEL_DATA_ACTIVATIONS(activations)
  };


  // Set pointers wrapper structs to our data buffers
  ai_input[0].n_batches = 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 80010fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001100:	65fb      	str	r3, [r7, #92]	; 0x5c
  ai_output[0].n_batches = 1;
 8001102:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001106:	2201      	movs	r2, #1
 8001108:	809a      	strh	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 800110a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800110e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001112:	611a      	str	r2, [r3, #16]

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001114:	f7ff ff34 	bl	8000f80 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001118:	f7ff ff58 	bl	8000fcc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800111c:	f002 fa13 	bl	8003546 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001120:	f000 f912 	bl	8001348 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001124:	f001 f8d2 	bl	80022cc <MX_GPIO_Init>
  MX_ADC3_Init();
 8001128:	f000 f9ce 	bl	80014c8 <MX_ADC3_Init>
  MX_CRC_Init();
 800112c:	f000 fa1e 	bl	800156c <MX_CRC_Init>
  MX_DCMI_Init();
 8001130:	f000 fa3e 	bl	80015b0 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001134:	f000 fa70 	bl	8001618 <MX_DMA2D_Init>
//  MX_ETH_Init();
  MX_FMC_Init();
 8001138:	f001 f878 	bl	800222c <MX_FMC_Init>
  MX_I2C1_Init();
 800113c:	f000 fa9e 	bl	800167c <MX_I2C1_Init>
  MX_I2C3_Init();
 8001140:	f000 fadc 	bl	80016fc <MX_I2C3_Init>
  MX_LTDC_Init();
 8001144:	f000 fb1a 	bl	800177c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001148:	f000 fb9a 	bl	8001880 <MX_QUADSPI_Init>
  MX_RTC_Init();
 800114c:	f000 fbc4 	bl	80018d8 <MX_RTC_Init>
  MX_SAI2_Init();
 8001150:	f000 fc68 	bl	8001a24 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001154:	f000 fd0e 	bl	8001b74 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8001158:	f000 fd2c 	bl	8001bb4 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 800115c:	f000 fd5a 	bl	8001c14 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001160:	f000 fe04 	bl	8001d6c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001164:	f000 fe78 	bl	8001e58 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001168:	f000 feee 	bl	8001f48 <MX_TIM5_Init>
  MX_TIM8_Init();
 800116c:	f000 ff64 	bl	8002038 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001170:	f000 ffb6 	bl	80020e0 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001174:	f000 fffa 	bl	800216c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001178:	f001 f828 	bl	80021cc <MX_USART6_UART_Init>
//  MX_FATFS_Init();
//  MX_USB_HOST_Init();
  /* USER CODE BEGIN 2 */

  // Start timer/counter
  HAL_TIM_Base_Start(&htim12);
 800117c:	486b      	ldr	r0, [pc, #428]	; (800132c <main+0x2d4>)
 800117e:	f007 fdc1 	bl	8008d04 <HAL_TIM_Base_Start>

  // Greetings!
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 8001182:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001186:	496a      	ldr	r1, [pc, #424]	; (8001330 <main+0x2d8>)
 8001188:	4618      	mov	r0, r3
 800118a:	f00d fe7b 	bl	800ee84 <siprintf>
 800118e:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
  HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 8001192:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001196:	b29a      	uxth	r2, r3
 8001198:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 800119c:	2364      	movs	r3, #100	; 0x64
 800119e:	4865      	ldr	r0, [pc, #404]	; (8001334 <main+0x2dc>)
 80011a0:	f008 fd40 	bl	8009c24 <HAL_UART_Transmit>

  // Create instance of neural network
  ai_err = ai_sine_model_create(&sine_model, AI_SINE_MODEL_DATA_CONFIG);
 80011a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f00b fccc 	bl	800cb48 <ai_sine_model_create>
 80011b0:	4603      	mov	r3, r0
 80011b2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (ai_err.type != AI_ERROR_NONE)
 80011b6:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d011      	beq.n	80011e2 <main+0x18a>
  {
    buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 80011be:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80011c2:	495d      	ldr	r1, [pc, #372]	; (8001338 <main+0x2e0>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00d fe5d 	bl	800ee84 <siprintf>
 80011ca:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
    HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 80011ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 80011d8:	2364      	movs	r3, #100	; 0x64
 80011da:	4856      	ldr	r0, [pc, #344]	; (8001334 <main+0x2dc>)
 80011dc:	f008 fd22 	bl	8009c24 <HAL_UART_Transmit>
    while(1);
 80011e0:	e7fe      	b.n	80011e0 <main+0x188>
  }

  // Initialize neural network
  if (!ai_sine_model_init(sine_model, &ai_params))
 80011e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011e4:	1d3a      	adds	r2, r7, #4
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f00b fcc3 	bl	800cb74 <ai_sine_model_init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f083 0301 	eor.w	r3, r3, #1
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d011      	beq.n	800121e <main+0x1c6>
  {
    buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 80011fa:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80011fe:	494f      	ldr	r1, [pc, #316]	; (800133c <main+0x2e4>)
 8001200:	4618      	mov	r0, r3
 8001202:	f00d fe3f 	bl	800ee84 <siprintf>
 8001206:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
    HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 800120a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800120e:	b29a      	uxth	r2, r3
 8001210:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 8001214:	2364      	movs	r3, #100	; 0x64
 8001216:	4847      	ldr	r0, [pc, #284]	; (8001334 <main+0x2dc>)
 8001218:	f008 fd04 	bl	8009c24 <HAL_UART_Transmit>
    while(1);
 800121c:	e7fe      	b.n	800121c <main+0x1c4>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800121e:	f00b fa27 	bl	800c670 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    LED_Toggle();
 8001222:	f001 fa25 	bl	8002670 <LED_Toggle>
    HAL_Delay(500);
 8001226:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800122a:	f002 f9e9 	bl	8003600 <HAL_Delay>

    // Fill input buffer (use test value)
	for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 800122e:	2300      	movs	r3, #0
 8001230:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001234:	e01f      	b.n	8001276 <main+0x21e>
	{
	  ((ai_float *)in_data)[i] = (ai_float)test;
 8001236:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001240:	4413      	add	r3, r2
 8001242:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001246:	601a      	str	r2, [r3, #0]
	  test += 0.1;
 8001248:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800124c:	f7ff f99c 	bl	8000588 <__aeabi_f2d>
 8001250:	a331      	add	r3, pc, #196	; (adr r3, 8001318 <main+0x2c0>)
 8001252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001256:	f7ff f839 	bl	80002cc <__adddf3>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	f7ff fcc1 	bl	8000be8 <__aeabi_d2f>
 8001266:	4603      	mov	r3, r0
 8001268:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 800126c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001270:	3301      	adds	r3, #1
 8001272:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001276:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0db      	beq.n	8001236 <main+0x1de>
	}

	// Get current timestamp
	timestamp = htim12.Instance->CNT;
 800127e:	4b2b      	ldr	r3, [pc, #172]	; (800132c <main+0x2d4>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001284:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	// Perform inference
	nbatch = ai_sine_model_run(sine_model, &ai_input[0], &ai_output[0]);
 8001288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800128a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800128e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001292:	4618      	mov	r0, r3
 8001294:	f00b fcad 	bl	800cbf2 <ai_sine_model_run>
 8001298:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
	if (nbatch != 1) {
 800129c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d010      	beq.n	80012c6 <main+0x26e>
	  buf_len = sprintf(buf, "Error: could not run inference\r\n");
 80012a4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80012a8:	4925      	ldr	r1, [pc, #148]	; (8001340 <main+0x2e8>)
 80012aa:	4618      	mov	r0, r3
 80012ac:	f00d fdea 	bl	800ee84 <siprintf>
 80012b0:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
	  HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 80012b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 80012be:	2364      	movs	r3, #100	; 0x64
 80012c0:	481c      	ldr	r0, [pc, #112]	; (8001334 <main+0x2dc>)
 80012c2:	f008 fcaf 	bl	8009c24 <HAL_UART_Transmit>
	}

	// Read output (predicted y) of neural network
	y_val = ((float *)out_data)[0];
 80012c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	// Print output of neural network along with inference time (microseconds)
	buf_len = sprintf(buf, "Output: %f | Duration: %lu\r\n", y_val, htim12.Instance->CNT - timestamp);
 80012d0:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80012d4:	f7ff f958 	bl	8000588 <__aeabi_f2d>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4913      	ldr	r1, [pc, #76]	; (800132c <main+0x2d4>)
 80012de:	6809      	ldr	r1, [r1, #0]
 80012e0:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80012e2:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80012e6:	1a41      	subs	r1, r0, r1
 80012e8:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 80012ec:	9100      	str	r1, [sp, #0]
 80012ee:	4915      	ldr	r1, [pc, #84]	; (8001344 <main+0x2ec>)
 80012f0:	f00d fdc8 	bl	800ee84 <siprintf>
 80012f4:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
	HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 80012f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 8001302:	2364      	movs	r3, #100	; 0x64
 8001304:	480b      	ldr	r0, [pc, #44]	; (8001334 <main+0x2dc>)
 8001306:	f008 fc8d 	bl	8009c24 <HAL_UART_Transmit>

	// Wait before doing it again
	HAL_Delay(500);
 800130a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800130e:	f002 f977 	bl	8003600 <HAL_Delay>
    MX_USB_HOST_Process();
 8001312:	e784      	b.n	800121e <main+0x1c6>
 8001314:	f3af 8000 	nop.w
 8001318:	9999999a 	.word	0x9999999a
 800131c:	3fb99999 	.word	0x3fb99999
 8001320:	08011284 	.word	0x08011284
 8001324:	40040440 	.word	0x40040440
 8001328:	00040440 	.word	0x00040440
 800132c:	20000f18 	.word	0x20000f18
 8001330:	080111d8 	.word	0x080111d8
 8001334:	20000e08 	.word	0x20000e08
 8001338:	080111f4 	.word	0x080111f4
 800133c:	0801121c 	.word	0x0801121c
 8001340:	08011240 	.word	0x08011240
 8001344:	08011264 	.word	0x08011264

08001348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b0b4      	sub	sp, #208	; 0xd0
 800134c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001352:	2230      	movs	r2, #48	; 0x30
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f00d f868 	bl	800e42c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800135c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800136c:	f107 0308 	add.w	r3, r7, #8
 8001370:	2284      	movs	r2, #132	; 0x84
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f00d f859 	bl	800e42c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800137a:	f005 fb7d 	bl	8006a78 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	4b4f      	ldr	r3, [pc, #316]	; (80014bc <SystemClock_Config+0x174>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a4e      	ldr	r2, [pc, #312]	; (80014bc <SystemClock_Config+0x174>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b4c      	ldr	r3, [pc, #304]	; (80014bc <SystemClock_Config+0x174>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001396:	4b4a      	ldr	r3, [pc, #296]	; (80014c0 <SystemClock_Config+0x178>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a49      	ldr	r2, [pc, #292]	; (80014c0 <SystemClock_Config+0x178>)
 800139c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	4b47      	ldr	r3, [pc, #284]	; (80014c0 <SystemClock_Config+0x178>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80013ae:	2309      	movs	r3, #9
 80013b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013bc:	2301      	movs	r3, #1
 80013be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c2:	2302      	movs	r3, #2
 80013c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80013d0:	2319      	movs	r3, #25
 80013d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80013d6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80013da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013de:	2302      	movs	r3, #2
 80013e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80013e4:	2309      	movs	r3, #9
 80013e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f005 fc64 	bl	8006cbc <HAL_RCC_OscConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80013fa:	f001 f943 	bl	8002684 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013fe:	f005 fb4b 	bl	8006a98 <HAL_PWREx_EnableOverDrive>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001408:	f001 f93c 	bl	8002684 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800140c:	230f      	movs	r3, #15
 800140e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001412:	2302      	movs	r3, #2
 8001414:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800141e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001422:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800142a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800142e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001432:	2106      	movs	r1, #6
 8001434:	4618      	mov	r0, r3
 8001436:	f005 fee5 	bl	8007204 <HAL_RCC_ClockConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001440:	f001 f920 	bl	8002684 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001444:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <SystemClock_Config+0x17c>)
 8001446:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001448:	2364      	movs	r3, #100	; 0x64
 800144a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800144c:	2302      	movs	r3, #2
 800144e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001450:	2302      	movs	r3, #2
 8001452:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001454:	2302      	movs	r3, #2
 8001456:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001458:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800145c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800145e:	2305      	movs	r3, #5
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001462:	2302      	movs	r3, #2
 8001464:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001466:	2303      	movs	r3, #3
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800146a:	2301      	movs	r3, #1
 800146c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800146e:	2301      	movs	r3, #1
 8001470:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001472:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001476:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001478:	f44f 7300 	mov.w	r3, #512	; 0x200
 800147c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800147e:	2300      	movs	r3, #0
 8001480:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001482:	2300      	movs	r3, #0
 8001484:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001486:	2300      	movs	r3, #0
 8001488:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800148a:	2300      	movs	r3, #0
 800148c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800148e:	2300      	movs	r3, #0
 8001490:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001492:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001496:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a0:	f107 0308 	add.w	r3, r7, #8
 80014a4:	4618      	mov	r0, r3
 80014a6:	f006 f883 	bl	80075b0 <HAL_RCCEx_PeriphCLKConfig>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 80014b0:	f001 f8e8 	bl	8002684 <Error_Handler>
  }
}
 80014b4:	bf00      	nop
 80014b6:	37d0      	adds	r7, #208	; 0xd0
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40007000 	.word	0x40007000
 80014c4:	01b14868 	.word	0x01b14868

080014c8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ce:	463b      	mov	r3, r7
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80014da:	4b21      	ldr	r3, [pc, #132]	; (8001560 <MX_ADC3_Init+0x98>)
 80014dc:	4a21      	ldr	r2, [pc, #132]	; (8001564 <MX_ADC3_Init+0x9c>)
 80014de:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014e0:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <MX_ADC3_Init+0x98>)
 80014e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014e6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014e8:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <MX_ADC3_Init+0x98>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014ee:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <MX_ADC3_Init+0x98>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80014f4:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <MX_ADC3_Init+0x98>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014fa:	4b19      	ldr	r3, [pc, #100]	; (8001560 <MX_ADC3_Init+0x98>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <MX_ADC3_Init+0x98>)
 8001504:	2200      	movs	r2, #0
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001508:	4b15      	ldr	r3, [pc, #84]	; (8001560 <MX_ADC3_Init+0x98>)
 800150a:	4a17      	ldr	r2, [pc, #92]	; (8001568 <MX_ADC3_Init+0xa0>)
 800150c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <MX_ADC3_Init+0x98>)
 8001510:	2200      	movs	r2, #0
 8001512:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <MX_ADC3_Init+0x98>)
 8001516:	2201      	movs	r2, #1
 8001518:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800151a:	4b11      	ldr	r3, [pc, #68]	; (8001560 <MX_ADC3_Init+0x98>)
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <MX_ADC3_Init+0x98>)
 8001524:	2201      	movs	r2, #1
 8001526:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001528:	480d      	ldr	r0, [pc, #52]	; (8001560 <MX_ADC3_Init+0x98>)
 800152a:	f002 f88d 	bl	8003648 <HAL_ADC_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001534:	f001 f8a6 	bl	8002684 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001538:	2304      	movs	r3, #4
 800153a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800153c:	2301      	movs	r3, #1
 800153e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001540:	2300      	movs	r3, #0
 8001542:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001544:	463b      	mov	r3, r7
 8001546:	4619      	mov	r1, r3
 8001548:	4805      	ldr	r0, [pc, #20]	; (8001560 <MX_ADC3_Init+0x98>)
 800154a:	f002 f8c1 	bl	80036d0 <HAL_ADC_ConfigChannel>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001554:	f001 f896 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000c80 	.word	0x20000c80
 8001564:	40012200 	.word	0x40012200
 8001568:	0f000001 	.word	0x0f000001

0800156c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001570:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <MX_CRC_Init+0x3c>)
 8001572:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <MX_CRC_Init+0x40>)
 8001574:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_CRC_Init+0x3c>)
 8001578:	2200      	movs	r2, #0
 800157a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <MX_CRC_Init+0x3c>)
 800157e:	2200      	movs	r2, #0
 8001580:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_CRC_Init+0x3c>)
 8001584:	2200      	movs	r2, #0
 8001586:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001588:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <MX_CRC_Init+0x3c>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_CRC_Init+0x3c>)
 8001590:	2201      	movs	r2, #1
 8001592:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001594:	4804      	ldr	r0, [pc, #16]	; (80015a8 <MX_CRC_Init+0x3c>)
 8001596:	f002 fbf1 	bl	8003d7c <HAL_CRC_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80015a0:	f001 f870 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000a98 	.word	0x20000a98
 80015ac:	40023000 	.word	0x40023000

080015b0 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80015b4:	4b16      	ldr	r3, [pc, #88]	; (8001610 <MX_DCMI_Init+0x60>)
 80015b6:	4a17      	ldr	r2, [pc, #92]	; (8001614 <MX_DCMI_Init+0x64>)
 80015b8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <MX_DCMI_Init+0x60>)
 80015bc:	2200      	movs	r2, #0
 80015be:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80015c0:	4b13      	ldr	r3, [pc, #76]	; (8001610 <MX_DCMI_Init+0x60>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <MX_DCMI_Init+0x60>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80015cc:	4b10      	ldr	r3, [pc, #64]	; (8001610 <MX_DCMI_Init+0x60>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <MX_DCMI_Init+0x60>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80015d8:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <MX_DCMI_Init+0x60>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <MX_DCMI_Init+0x60>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80015e4:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <MX_DCMI_Init+0x60>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <MX_DCMI_Init+0x60>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <MX_DCMI_Init+0x60>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <MX_DCMI_Init+0x60>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80015fc:	4804      	ldr	r0, [pc, #16]	; (8001610 <MX_DCMI_Init+0x60>)
 80015fe:	f002 fca7 	bl	8003f50 <HAL_DCMI_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001608:	f001 f83c 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000cc8 	.word	0x20000cc8
 8001614:	50050000 	.word	0x50050000

08001618 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800161c:	4b15      	ldr	r3, [pc, #84]	; (8001674 <MX_DMA2D_Init+0x5c>)
 800161e:	4a16      	ldr	r2, [pc, #88]	; (8001678 <MX_DMA2D_Init+0x60>)
 8001620:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <MX_DMA2D_Init+0x5c>)
 8001624:	2200      	movs	r2, #0
 8001626:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <MX_DMA2D_Init+0x5c>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <MX_DMA2D_Init+0x5c>)
 8001630:	2200      	movs	r2, #0
 8001632:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <MX_DMA2D_Init+0x5c>)
 8001636:	2200      	movs	r2, #0
 8001638:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <MX_DMA2D_Init+0x5c>)
 800163c:	2200      	movs	r2, #0
 800163e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <MX_DMA2D_Init+0x5c>)
 8001642:	2200      	movs	r2, #0
 8001644:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <MX_DMA2D_Init+0x5c>)
 8001648:	2200      	movs	r2, #0
 800164a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800164c:	4809      	ldr	r0, [pc, #36]	; (8001674 <MX_DMA2D_Init+0x5c>)
 800164e:	f002 fcf9 	bl	8004044 <HAL_DMA2D_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001658:	f001 f814 	bl	8002684 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800165c:	2101      	movs	r1, #1
 800165e:	4805      	ldr	r0, [pc, #20]	; (8001674 <MX_DMA2D_Init+0x5c>)
 8001660:	f002 fe4a 	bl	80042f8 <HAL_DMA2D_ConfigLayer>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800166a:	f001 f80b 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000e8c 	.word	0x20000e8c
 8001678:	4002b000 	.word	0x4002b000

0800167c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <MX_I2C1_Init+0x74>)
 8001682:	4a1c      	ldr	r2, [pc, #112]	; (80016f4 <MX_I2C1_Init+0x78>)
 8001684:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001686:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <MX_I2C1_Init+0x74>)
 8001688:	4a1b      	ldr	r2, [pc, #108]	; (80016f8 <MX_I2C1_Init+0x7c>)
 800168a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <MX_I2C1_Init+0x74>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001692:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <MX_I2C1_Init+0x74>)
 8001694:	2201      	movs	r2, #1
 8001696:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <MX_I2C1_Init+0x74>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800169e:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016b6:	480e      	ldr	r0, [pc, #56]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016b8:	f004 fd4c 	bl	8006154 <HAL_I2C_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016c2:	f000 ffdf 	bl	8002684 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016c6:	2100      	movs	r1, #0
 80016c8:	4809      	ldr	r0, [pc, #36]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016ca:	f004 fdd3 	bl	8006274 <HAL_I2CEx_ConfigAnalogFilter>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016d4:	f000 ffd6 	bl	8002684 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016d8:	2100      	movs	r1, #0
 80016da:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016dc:	f004 fe15 	bl	800630a <HAL_I2CEx_ConfigDigitalFilter>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016e6:	f000 ffcd 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000a4c 	.word	0x20000a4c
 80016f4:	40005400 	.word	0x40005400
 80016f8:	00c0eaff 	.word	0x00c0eaff

080016fc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <MX_I2C3_Init+0x74>)
 8001702:	4a1c      	ldr	r2, [pc, #112]	; (8001774 <MX_I2C3_Init+0x78>)
 8001704:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001706:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <MX_I2C3_Init+0x74>)
 8001708:	4a1b      	ldr	r2, [pc, #108]	; (8001778 <MX_I2C3_Init+0x7c>)
 800170a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800170c:	4b18      	ldr	r3, [pc, #96]	; (8001770 <MX_I2C3_Init+0x74>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <MX_I2C3_Init+0x74>)
 8001714:	2201      	movs	r2, #1
 8001716:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001718:	4b15      	ldr	r3, [pc, #84]	; (8001770 <MX_I2C3_Init+0x74>)
 800171a:	2200      	movs	r2, #0
 800171c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <MX_I2C3_Init+0x74>)
 8001720:	2200      	movs	r2, #0
 8001722:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <MX_I2C3_Init+0x74>)
 8001726:	2200      	movs	r2, #0
 8001728:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <MX_I2C3_Init+0x74>)
 800172c:	2200      	movs	r2, #0
 800172e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001730:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <MX_I2C3_Init+0x74>)
 8001732:	2200      	movs	r2, #0
 8001734:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001736:	480e      	ldr	r0, [pc, #56]	; (8001770 <MX_I2C3_Init+0x74>)
 8001738:	f004 fd0c 	bl	8006154 <HAL_I2C_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001742:	f000 ff9f 	bl	8002684 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001746:	2100      	movs	r1, #0
 8001748:	4809      	ldr	r0, [pc, #36]	; (8001770 <MX_I2C3_Init+0x74>)
 800174a:	f004 fd93 	bl	8006274 <HAL_I2CEx_ConfigAnalogFilter>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001754:	f000 ff96 	bl	8002684 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001758:	2100      	movs	r1, #0
 800175a:	4805      	ldr	r0, [pc, #20]	; (8001770 <MX_I2C3_Init+0x74>)
 800175c:	f004 fdd5 	bl	800630a <HAL_I2CEx_ConfigDigitalFilter>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001766:	f000 ff8d 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200008e4 	.word	0x200008e4
 8001774:	40005c00 	.word	0x40005c00
 8001778:	00c0eaff 	.word	0x00c0eaff

0800177c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08e      	sub	sp, #56	; 0x38
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	2234      	movs	r2, #52	; 0x34
 8001786:	2100      	movs	r1, #0
 8001788:	4618      	mov	r0, r3
 800178a:	f00c fe4f 	bl	800e42c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800178e:	4b3a      	ldr	r3, [pc, #232]	; (8001878 <MX_LTDC_Init+0xfc>)
 8001790:	4a3a      	ldr	r2, [pc, #232]	; (800187c <MX_LTDC_Init+0x100>)
 8001792:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001794:	4b38      	ldr	r3, [pc, #224]	; (8001878 <MX_LTDC_Init+0xfc>)
 8001796:	2200      	movs	r2, #0
 8001798:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800179a:	4b37      	ldr	r3, [pc, #220]	; (8001878 <MX_LTDC_Init+0xfc>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80017a0:	4b35      	ldr	r3, [pc, #212]	; (8001878 <MX_LTDC_Init+0xfc>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80017a6:	4b34      	ldr	r3, [pc, #208]	; (8001878 <MX_LTDC_Init+0xfc>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80017ac:	4b32      	ldr	r3, [pc, #200]	; (8001878 <MX_LTDC_Init+0xfc>)
 80017ae:	2228      	movs	r2, #40	; 0x28
 80017b0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80017b2:	4b31      	ldr	r3, [pc, #196]	; (8001878 <MX_LTDC_Init+0xfc>)
 80017b4:	2209      	movs	r2, #9
 80017b6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80017b8:	4b2f      	ldr	r3, [pc, #188]	; (8001878 <MX_LTDC_Init+0xfc>)
 80017ba:	2235      	movs	r2, #53	; 0x35
 80017bc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80017be:	4b2e      	ldr	r3, [pc, #184]	; (8001878 <MX_LTDC_Init+0xfc>)
 80017c0:	220b      	movs	r2, #11
 80017c2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80017c4:	4b2c      	ldr	r3, [pc, #176]	; (8001878 <MX_LTDC_Init+0xfc>)
 80017c6:	f240 2215 	movw	r2, #533	; 0x215
 80017ca:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80017cc:	4b2a      	ldr	r3, [pc, #168]	; (8001878 <MX_LTDC_Init+0xfc>)
 80017ce:	f240 121b 	movw	r2, #283	; 0x11b
 80017d2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80017d4:	4b28      	ldr	r3, [pc, #160]	; (8001878 <MX_LTDC_Init+0xfc>)
 80017d6:	f240 2235 	movw	r2, #565	; 0x235
 80017da:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80017dc:	4b26      	ldr	r3, [pc, #152]	; (8001878 <MX_LTDC_Init+0xfc>)
 80017de:	f240 121d 	movw	r2, #285	; 0x11d
 80017e2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80017e4:	4b24      	ldr	r3, [pc, #144]	; (8001878 <MX_LTDC_Init+0xfc>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80017ec:	4b22      	ldr	r3, [pc, #136]	; (8001878 <MX_LTDC_Init+0xfc>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80017f4:	4b20      	ldr	r3, [pc, #128]	; (8001878 <MX_LTDC_Init+0xfc>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80017fc:	481e      	ldr	r0, [pc, #120]	; (8001878 <MX_LTDC_Init+0xfc>)
 80017fe:	f004 fdd1 	bl	80063a4 <HAL_LTDC_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001808:	f000 ff3c 	bl	8002684 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001810:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001814:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800181a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800181e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001820:	2302      	movs	r3, #2
 8001822:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001824:	23ff      	movs	r3, #255	; 0xff
 8001826:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800182c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001830:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001832:	2307      	movs	r3, #7
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001836:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800183c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001840:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001842:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001846:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	2200      	movs	r2, #0
 800185e:	4619      	mov	r1, r3
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <MX_LTDC_Init+0xfc>)
 8001862:	f004 ff31 	bl	80066c8 <HAL_LTDC_ConfigLayer>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800186c:	f000 ff0a 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	3738      	adds	r7, #56	; 0x38
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000bd8 	.word	0x20000bd8
 800187c:	40016800 	.word	0x40016800

08001880 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <MX_QUADSPI_Init+0x50>)
 8001886:	4a13      	ldr	r2, [pc, #76]	; (80018d4 <MX_QUADSPI_Init+0x54>)
 8001888:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <MX_QUADSPI_Init+0x50>)
 800188c:	2201      	movs	r2, #1
 800188e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <MX_QUADSPI_Init+0x50>)
 8001892:	2204      	movs	r2, #4
 8001894:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <MX_QUADSPI_Init+0x50>)
 8001898:	2210      	movs	r2, #16
 800189a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <MX_QUADSPI_Init+0x50>)
 800189e:	2218      	movs	r2, #24
 80018a0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <MX_QUADSPI_Init+0x50>)
 80018a4:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80018a8:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <MX_QUADSPI_Init+0x50>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80018b0:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <MX_QUADSPI_Init+0x50>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <MX_QUADSPI_Init+0x50>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80018bc:	4804      	ldr	r0, [pc, #16]	; (80018d0 <MX_QUADSPI_Init+0x50>)
 80018be:	f005 f93b 	bl	8006b38 <HAL_QSPI_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80018c8:	f000 fedc 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000fe0 	.word	0x20000fe0
 80018d4:	a0001000 	.word	0xa0001000

080018d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b092      	sub	sp, #72	; 0x48
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80018de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	60da      	str	r2, [r3, #12]
 80018ec:	611a      	str	r2, [r3, #16]
 80018ee:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80018f0:	2300      	movs	r3, #0
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80018f4:	463b      	mov	r3, r7
 80018f6:	222c      	movs	r2, #44	; 0x2c
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f00c fd96 	bl	800e42c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001900:	4b46      	ldr	r3, [pc, #280]	; (8001a1c <MX_RTC_Init+0x144>)
 8001902:	4a47      	ldr	r2, [pc, #284]	; (8001a20 <MX_RTC_Init+0x148>)
 8001904:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001906:	4b45      	ldr	r3, [pc, #276]	; (8001a1c <MX_RTC_Init+0x144>)
 8001908:	2200      	movs	r2, #0
 800190a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800190c:	4b43      	ldr	r3, [pc, #268]	; (8001a1c <MX_RTC_Init+0x144>)
 800190e:	227f      	movs	r2, #127	; 0x7f
 8001910:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001912:	4b42      	ldr	r3, [pc, #264]	; (8001a1c <MX_RTC_Init+0x144>)
 8001914:	22ff      	movs	r2, #255	; 0xff
 8001916:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001918:	4b40      	ldr	r3, [pc, #256]	; (8001a1c <MX_RTC_Init+0x144>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800191e:	4b3f      	ldr	r3, [pc, #252]	; (8001a1c <MX_RTC_Init+0x144>)
 8001920:	2200      	movs	r2, #0
 8001922:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001924:	4b3d      	ldr	r3, [pc, #244]	; (8001a1c <MX_RTC_Init+0x144>)
 8001926:	2200      	movs	r2, #0
 8001928:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800192a:	483c      	ldr	r0, [pc, #240]	; (8001a1c <MX_RTC_Init+0x144>)
 800192c:	f006 fb74 	bl	8008018 <HAL_RTC_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001936:	f000 fea5 	bl	8002684 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800193a:	2300      	movs	r3, #0
 800193c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001940:	2300      	movs	r3, #0
 8001942:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001946:	2300      	movs	r3, #0
 8001948:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800194c:	2300      	movs	r3, #0
 800194e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001950:	2300      	movs	r3, #0
 8001952:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001954:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001958:	2201      	movs	r2, #1
 800195a:	4619      	mov	r1, r3
 800195c:	482f      	ldr	r0, [pc, #188]	; (8001a1c <MX_RTC_Init+0x144>)
 800195e:	f006 fbed 	bl	800813c <HAL_RTC_SetTime>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001968:	f000 fe8c 	bl	8002684 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800196c:	2301      	movs	r3, #1
 800196e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001972:	2301      	movs	r3, #1
 8001974:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001978:	2301      	movs	r3, #1
 800197a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 800197e:	2300      	movs	r3, #0
 8001980:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001988:	2201      	movs	r2, #1
 800198a:	4619      	mov	r1, r3
 800198c:	4823      	ldr	r0, [pc, #140]	; (8001a1c <MX_RTC_Init+0x144>)
 800198e:	f006 fc93 	bl	80082b8 <HAL_RTC_SetDate>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001998:	f000 fe74 	bl	8002684 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800199c:	2300      	movs	r3, #0
 800199e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80019bc:	2300      	movs	r3, #0
 80019be:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 80019c0:	2301      	movs	r3, #1
 80019c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 80019c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80019cc:	463b      	mov	r3, r7
 80019ce:	2201      	movs	r2, #1
 80019d0:	4619      	mov	r1, r3
 80019d2:	4812      	ldr	r0, [pc, #72]	; (8001a1c <MX_RTC_Init+0x144>)
 80019d4:	f006 fd18 	bl	8008408 <HAL_RTC_SetAlarm>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80019de:	f000 fe51 	bl	8002684 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80019e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80019e8:	463b      	mov	r3, r7
 80019ea:	2201      	movs	r2, #1
 80019ec:	4619      	mov	r1, r3
 80019ee:	480b      	ldr	r0, [pc, #44]	; (8001a1c <MX_RTC_Init+0x144>)
 80019f0:	f006 fd0a 	bl	8008408 <HAL_RTC_SetAlarm>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_RTC_Init+0x126>
  {
    Error_Handler();
 80019fa:	f000 fe43 	bl	8002684 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80019fe:	2202      	movs	r2, #2
 8001a00:	2100      	movs	r1, #0
 8001a02:	4806      	ldr	r0, [pc, #24]	; (8001a1c <MX_RTC_Init+0x144>)
 8001a04:	f006 fe8a 	bl	800871c <HAL_RTCEx_SetTimeStamp>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001a0e:	f000 fe39 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	3748      	adds	r7, #72	; 0x48
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000d9c 	.word	0x20000d9c
 8001a20:	40002800 	.word	0x40002800

08001a24 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001a28:	4b4d      	ldr	r3, [pc, #308]	; (8001b60 <MX_SAI2_Init+0x13c>)
 8001a2a:	4a4e      	ldr	r2, [pc, #312]	; (8001b64 <MX_SAI2_Init+0x140>)
 8001a2c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001a2e:	4b4c      	ldr	r3, [pc, #304]	; (8001b60 <MX_SAI2_Init+0x13c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001a34:	4b4a      	ldr	r3, [pc, #296]	; (8001b60 <MX_SAI2_Init+0x13c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001a3a:	4b49      	ldr	r3, [pc, #292]	; (8001b60 <MX_SAI2_Init+0x13c>)
 8001a3c:	2240      	movs	r2, #64	; 0x40
 8001a3e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001a40:	4b47      	ldr	r3, [pc, #284]	; (8001b60 <MX_SAI2_Init+0x13c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001a46:	4b46      	ldr	r3, [pc, #280]	; (8001b60 <MX_SAI2_Init+0x13c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001a4c:	4b44      	ldr	r3, [pc, #272]	; (8001b60 <MX_SAI2_Init+0x13c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001a52:	4b43      	ldr	r3, [pc, #268]	; (8001b60 <MX_SAI2_Init+0x13c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001a58:	4b41      	ldr	r3, [pc, #260]	; (8001b60 <MX_SAI2_Init+0x13c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001a5e:	4b40      	ldr	r3, [pc, #256]	; (8001b60 <MX_SAI2_Init+0x13c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001a64:	4b3e      	ldr	r3, [pc, #248]	; (8001b60 <MX_SAI2_Init+0x13c>)
 8001a66:	4a40      	ldr	r2, [pc, #256]	; (8001b68 <MX_SAI2_Init+0x144>)
 8001a68:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001a6a:	4b3d      	ldr	r3, [pc, #244]	; (8001b60 <MX_SAI2_Init+0x13c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001a70:	4b3b      	ldr	r3, [pc, #236]	; (8001b60 <MX_SAI2_Init+0x13c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001a76:	4b3a      	ldr	r3, [pc, #232]	; (8001b60 <MX_SAI2_Init+0x13c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001a7c:	4b38      	ldr	r3, [pc, #224]	; (8001b60 <MX_SAI2_Init+0x13c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001a82:	4b37      	ldr	r3, [pc, #220]	; (8001b60 <MX_SAI2_Init+0x13c>)
 8001a84:	2208      	movs	r2, #8
 8001a86:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001a88:	4b35      	ldr	r3, [pc, #212]	; (8001b60 <MX_SAI2_Init+0x13c>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001a8e:	4b34      	ldr	r3, [pc, #208]	; (8001b60 <MX_SAI2_Init+0x13c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001a94:	4b32      	ldr	r3, [pc, #200]	; (8001b60 <MX_SAI2_Init+0x13c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001a9a:	4b31      	ldr	r3, [pc, #196]	; (8001b60 <MX_SAI2_Init+0x13c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001aa0:	4b2f      	ldr	r3, [pc, #188]	; (8001b60 <MX_SAI2_Init+0x13c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001aa6:	4b2e      	ldr	r3, [pc, #184]	; (8001b60 <MX_SAI2_Init+0x13c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001aac:	4b2c      	ldr	r3, [pc, #176]	; (8001b60 <MX_SAI2_Init+0x13c>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001ab2:	4b2b      	ldr	r3, [pc, #172]	; (8001b60 <MX_SAI2_Init+0x13c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001ab8:	4829      	ldr	r0, [pc, #164]	; (8001b60 <MX_SAI2_Init+0x13c>)
 8001aba:	f006 fe85 	bl	80087c8 <HAL_SAI_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001ac4:	f000 fdde 	bl	8002684 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001ac8:	4b28      	ldr	r3, [pc, #160]	; (8001b6c <MX_SAI2_Init+0x148>)
 8001aca:	4a29      	ldr	r2, [pc, #164]	; (8001b70 <MX_SAI2_Init+0x14c>)
 8001acc:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001ace:	4b27      	ldr	r3, [pc, #156]	; (8001b6c <MX_SAI2_Init+0x148>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001ad4:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <MX_SAI2_Init+0x148>)
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001ada:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <MX_SAI2_Init+0x148>)
 8001adc:	2240      	movs	r2, #64	; 0x40
 8001ade:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001ae0:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <MX_SAI2_Init+0x148>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001ae6:	4b21      	ldr	r3, [pc, #132]	; (8001b6c <MX_SAI2_Init+0x148>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001aec:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <MX_SAI2_Init+0x148>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001af2:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <MX_SAI2_Init+0x148>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001af8:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <MX_SAI2_Init+0x148>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001afe:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <MX_SAI2_Init+0x148>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b04:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <MX_SAI2_Init+0x148>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b0a:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <MX_SAI2_Init+0x148>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b10:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <MX_SAI2_Init+0x148>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <MX_SAI2_Init+0x148>)
 8001b18:	2208      	movs	r2, #8
 8001b1a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <MX_SAI2_Init+0x148>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <MX_SAI2_Init+0x148>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001b28:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <MX_SAI2_Init+0x148>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <MX_SAI2_Init+0x148>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001b34:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <MX_SAI2_Init+0x148>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <MX_SAI2_Init+0x148>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001b40:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <MX_SAI2_Init+0x148>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <MX_SAI2_Init+0x148>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001b4c:	4807      	ldr	r0, [pc, #28]	; (8001b6c <MX_SAI2_Init+0x148>)
 8001b4e:	f006 fe3b 	bl	80087c8 <HAL_SAI_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001b58:	f000 fd94 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	200009c8 	.word	0x200009c8
 8001b64:	40015c04 	.word	0x40015c04
 8001b68:	0002ee00 	.word	0x0002ee00
 8001b6c:	20000860 	.word	0x20000860
 8001b70:	40015c24 	.word	0x40015c24

08001b74 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <MX_SDMMC1_SD_Init+0x38>)
 8001b7a:	4a0d      	ldr	r2, [pc, #52]	; (8001bb0 <MX_SDMMC1_SD_Init+0x3c>)
 8001b7c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <MX_SDMMC1_SD_Init+0x38>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <MX_SDMMC1_SD_Init+0x38>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <MX_SDMMC1_SD_Init+0x38>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <MX_SDMMC1_SD_Init+0x38>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <MX_SDMMC1_SD_Init+0x38>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <MX_SDMMC1_SD_Init+0x38>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	20000abc 	.word	0x20000abc
 8001bb0:	40012c00 	.word	0x40012c00

08001bb4 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001bb8:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <MX_SPDIFRX_Init+0x5c>)
 8001bba:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001bbe:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001bc0:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <MX_SPDIFRX_Init+0x5c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <MX_SPDIFRX_Init+0x5c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001bcc:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <MX_SPDIFRX_Init+0x5c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <MX_SPDIFRX_Init+0x5c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001bd8:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <MX_SPDIFRX_Init+0x5c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001bde:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <MX_SPDIFRX_Init+0x5c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001be4:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <MX_SPDIFRX_Init+0x5c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <MX_SPDIFRX_Init+0x5c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001bf0:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <MX_SPDIFRX_Init+0x5c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <MX_SPDIFRX_Init+0x5c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001bfc:	4804      	ldr	r0, [pc, #16]	; (8001c10 <MX_SPDIFRX_Init+0x5c>)
 8001bfe:	f006 ffcd 	bl	8008b9c <HAL_SPDIFRX_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001c08:	f000 fd3c 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	2000097c 	.word	0x2000097c

08001c14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b09a      	sub	sp, #104	; 0x68
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
 8001c44:	615a      	str	r2, [r3, #20]
 8001c46:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	222c      	movs	r2, #44	; 0x2c
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f00c fbec 	bl	800e42c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c54:	4b43      	ldr	r3, [pc, #268]	; (8001d64 <MX_TIM1_Init+0x150>)
 8001c56:	4a44      	ldr	r2, [pc, #272]	; (8001d68 <MX_TIM1_Init+0x154>)
 8001c58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c5a:	4b42      	ldr	r3, [pc, #264]	; (8001d64 <MX_TIM1_Init+0x150>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c60:	4b40      	ldr	r3, [pc, #256]	; (8001d64 <MX_TIM1_Init+0x150>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c66:	4b3f      	ldr	r3, [pc, #252]	; (8001d64 <MX_TIM1_Init+0x150>)
 8001c68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6e:	4b3d      	ldr	r3, [pc, #244]	; (8001d64 <MX_TIM1_Init+0x150>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c74:	4b3b      	ldr	r3, [pc, #236]	; (8001d64 <MX_TIM1_Init+0x150>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7a:	4b3a      	ldr	r3, [pc, #232]	; (8001d64 <MX_TIM1_Init+0x150>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c80:	4838      	ldr	r0, [pc, #224]	; (8001d64 <MX_TIM1_Init+0x150>)
 8001c82:	f006 ffe7 	bl	8008c54 <HAL_TIM_Base_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001c8c:	f000 fcfa 	bl	8002684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c94:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4831      	ldr	r0, [pc, #196]	; (8001d64 <MX_TIM1_Init+0x150>)
 8001c9e:	f007 fa09 	bl	80090b4 <HAL_TIM_ConfigClockSource>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001ca8:	f000 fcec 	bl	8002684 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cac:	482d      	ldr	r0, [pc, #180]	; (8001d64 <MX_TIM1_Init+0x150>)
 8001cae:	f007 f899 	bl	8008de4 <HAL_TIM_PWM_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001cb8:	f000 fce4 	bl	8002684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cc8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4825      	ldr	r0, [pc, #148]	; (8001d64 <MX_TIM1_Init+0x150>)
 8001cd0:	f007 fe4e 	bl	8009970 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001cda:	f000 fcd3 	bl	8002684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cde:	2360      	movs	r3, #96	; 0x60
 8001ce0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cea:	2300      	movs	r3, #0
 8001cec:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cfe:	2200      	movs	r2, #0
 8001d00:	4619      	mov	r1, r3
 8001d02:	4818      	ldr	r0, [pc, #96]	; (8001d64 <MX_TIM1_Init+0x150>)
 8001d04:	f007 f8c6 	bl	8008e94 <HAL_TIM_PWM_ConfigChannel>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001d0e:	f000 fcb9 	bl	8002684 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d2a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	4619      	mov	r1, r3
 8001d46:	4807      	ldr	r0, [pc, #28]	; (8001d64 <MX_TIM1_Init+0x150>)
 8001d48:	f007 fea0 	bl	8009a8c <HAL_TIMEx_ConfigBreakDeadTime>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001d52:	f000 fc97 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d56:	4803      	ldr	r0, [pc, #12]	; (8001d64 <MX_TIM1_Init+0x150>)
 8001d58:	f001 f8d6 	bl	8002f08 <HAL_TIM_MspPostInit>

}
 8001d5c:	bf00      	nop
 8001d5e:	3768      	adds	r7, #104	; 0x68
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000dbc 	.word	0x20000dbc
 8001d68:	40010000 	.word	0x40010000

08001d6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08e      	sub	sp, #56	; 0x38
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d80:	f107 031c 	add.w	r3, r7, #28
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d8c:	463b      	mov	r3, r7
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	60da      	str	r2, [r3, #12]
 8001d98:	611a      	str	r2, [r3, #16]
 8001d9a:	615a      	str	r2, [r3, #20]
 8001d9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d9e:	4b2d      	ldr	r3, [pc, #180]	; (8001e54 <MX_TIM2_Init+0xe8>)
 8001da0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001da4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001da6:	4b2b      	ldr	r3, [pc, #172]	; (8001e54 <MX_TIM2_Init+0xe8>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dac:	4b29      	ldr	r3, [pc, #164]	; (8001e54 <MX_TIM2_Init+0xe8>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001db2:	4b28      	ldr	r3, [pc, #160]	; (8001e54 <MX_TIM2_Init+0xe8>)
 8001db4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001db8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dba:	4b26      	ldr	r3, [pc, #152]	; (8001e54 <MX_TIM2_Init+0xe8>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc0:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <MX_TIM2_Init+0xe8>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dc6:	4823      	ldr	r0, [pc, #140]	; (8001e54 <MX_TIM2_Init+0xe8>)
 8001dc8:	f006 ff44 	bl	8008c54 <HAL_TIM_Base_Init>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001dd2:	f000 fc57 	bl	8002684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ddc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001de0:	4619      	mov	r1, r3
 8001de2:	481c      	ldr	r0, [pc, #112]	; (8001e54 <MX_TIM2_Init+0xe8>)
 8001de4:	f007 f966 	bl	80090b4 <HAL_TIM_ConfigClockSource>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001dee:	f000 fc49 	bl	8002684 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001df2:	4818      	ldr	r0, [pc, #96]	; (8001e54 <MX_TIM2_Init+0xe8>)
 8001df4:	f006 fff6 	bl	8008de4 <HAL_TIM_PWM_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001dfe:	f000 fc41 	bl	8002684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e0a:	f107 031c 	add.w	r3, r7, #28
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4810      	ldr	r0, [pc, #64]	; (8001e54 <MX_TIM2_Init+0xe8>)
 8001e12:	f007 fdad 	bl	8009970 <HAL_TIMEx_MasterConfigSynchronization>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001e1c:	f000 fc32 	bl	8002684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e20:	2360      	movs	r3, #96	; 0x60
 8001e22:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e30:	463b      	mov	r3, r7
 8001e32:	2200      	movs	r2, #0
 8001e34:	4619      	mov	r1, r3
 8001e36:	4807      	ldr	r0, [pc, #28]	; (8001e54 <MX_TIM2_Init+0xe8>)
 8001e38:	f007 f82c 	bl	8008e94 <HAL_TIM_PWM_ConfigChannel>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001e42:	f000 fc1f 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e46:	4803      	ldr	r0, [pc, #12]	; (8001e54 <MX_TIM2_Init+0xe8>)
 8001e48:	f001 f85e 	bl	8002f08 <HAL_TIM_MspPostInit>

}
 8001e4c:	bf00      	nop
 8001e4e:	3738      	adds	r7, #56	; 0x38
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000ecc 	.word	0x20000ecc

08001e58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08e      	sub	sp, #56	; 0x38
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	605a      	str	r2, [r3, #4]
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e6c:	f107 031c 	add.w	r3, r7, #28
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e78:	463b      	mov	r3, r7
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]
 8001e84:	611a      	str	r2, [r3, #16]
 8001e86:	615a      	str	r2, [r3, #20]
 8001e88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e8a:	4b2d      	ldr	r3, [pc, #180]	; (8001f40 <MX_TIM3_Init+0xe8>)
 8001e8c:	4a2d      	ldr	r2, [pc, #180]	; (8001f44 <MX_TIM3_Init+0xec>)
 8001e8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e90:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <MX_TIM3_Init+0xe8>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e96:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <MX_TIM3_Init+0xe8>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e9c:	4b28      	ldr	r3, [pc, #160]	; (8001f40 <MX_TIM3_Init+0xe8>)
 8001e9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ea2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea4:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <MX_TIM3_Init+0xe8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eaa:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <MX_TIM3_Init+0xe8>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001eb0:	4823      	ldr	r0, [pc, #140]	; (8001f40 <MX_TIM3_Init+0xe8>)
 8001eb2:	f006 fecf 	bl	8008c54 <HAL_TIM_Base_Init>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001ebc:	f000 fbe2 	bl	8002684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ec6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eca:	4619      	mov	r1, r3
 8001ecc:	481c      	ldr	r0, [pc, #112]	; (8001f40 <MX_TIM3_Init+0xe8>)
 8001ece:	f007 f8f1 	bl	80090b4 <HAL_TIM_ConfigClockSource>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001ed8:	f000 fbd4 	bl	8002684 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001edc:	4818      	ldr	r0, [pc, #96]	; (8001f40 <MX_TIM3_Init+0xe8>)
 8001ede:	f006 ff81 	bl	8008de4 <HAL_TIM_PWM_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001ee8:	f000 fbcc 	bl	8002684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ef4:	f107 031c 	add.w	r3, r7, #28
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4811      	ldr	r0, [pc, #68]	; (8001f40 <MX_TIM3_Init+0xe8>)
 8001efc:	f007 fd38 	bl	8009970 <HAL_TIMEx_MasterConfigSynchronization>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001f06:	f000 fbbd 	bl	8002684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f0a:	2360      	movs	r3, #96	; 0x60
 8001f0c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f1a:	463b      	mov	r3, r7
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4807      	ldr	r0, [pc, #28]	; (8001f40 <MX_TIM3_Init+0xe8>)
 8001f22:	f006 ffb7 	bl	8008e94 <HAL_TIM_PWM_ConfigChannel>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001f2c:	f000 fbaa 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f30:	4803      	ldr	r0, [pc, #12]	; (8001f40 <MX_TIM3_Init+0xe8>)
 8001f32:	f000 ffe9 	bl	8002f08 <HAL_TIM_MspPostInit>

}
 8001f36:	bf00      	nop
 8001f38:	3738      	adds	r7, #56	; 0x38
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000b8c 	.word	0x20000b8c
 8001f44:	40000400 	.word	0x40000400

08001f48 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08e      	sub	sp, #56	; 0x38
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f5c:	f107 031c 	add.w	r3, r7, #28
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f68:	463b      	mov	r3, r7
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	609a      	str	r2, [r3, #8]
 8001f72:	60da      	str	r2, [r3, #12]
 8001f74:	611a      	str	r2, [r3, #16]
 8001f76:	615a      	str	r2, [r3, #20]
 8001f78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f7a:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <MX_TIM5_Init+0xe8>)
 8001f7c:	4a2d      	ldr	r2, [pc, #180]	; (8002034 <MX_TIM5_Init+0xec>)
 8001f7e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001f80:	4b2b      	ldr	r3, [pc, #172]	; (8002030 <MX_TIM5_Init+0xe8>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f86:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <MX_TIM5_Init+0xe8>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001f8c:	4b28      	ldr	r3, [pc, #160]	; (8002030 <MX_TIM5_Init+0xe8>)
 8001f8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f92:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f94:	4b26      	ldr	r3, [pc, #152]	; (8002030 <MX_TIM5_Init+0xe8>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f9a:	4b25      	ldr	r3, [pc, #148]	; (8002030 <MX_TIM5_Init+0xe8>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001fa0:	4823      	ldr	r0, [pc, #140]	; (8002030 <MX_TIM5_Init+0xe8>)
 8001fa2:	f006 fe57 	bl	8008c54 <HAL_TIM_Base_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001fac:	f000 fb6a 	bl	8002684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001fb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fba:	4619      	mov	r1, r3
 8001fbc:	481c      	ldr	r0, [pc, #112]	; (8002030 <MX_TIM5_Init+0xe8>)
 8001fbe:	f007 f879 	bl	80090b4 <HAL_TIM_ConfigClockSource>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001fc8:	f000 fb5c 	bl	8002684 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001fcc:	4818      	ldr	r0, [pc, #96]	; (8002030 <MX_TIM5_Init+0xe8>)
 8001fce:	f006 ff09 	bl	8008de4 <HAL_TIM_PWM_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001fd8:	f000 fb54 	bl	8002684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001fe4:	f107 031c 	add.w	r3, r7, #28
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4811      	ldr	r0, [pc, #68]	; (8002030 <MX_TIM5_Init+0xe8>)
 8001fec:	f007 fcc0 	bl	8009970 <HAL_TIMEx_MasterConfigSynchronization>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001ff6:	f000 fb45 	bl	8002684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ffa:	2360      	movs	r3, #96	; 0x60
 8001ffc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002002:	2300      	movs	r3, #0
 8002004:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800200a:	463b      	mov	r3, r7
 800200c:	220c      	movs	r2, #12
 800200e:	4619      	mov	r1, r3
 8002010:	4807      	ldr	r0, [pc, #28]	; (8002030 <MX_TIM5_Init+0xe8>)
 8002012:	f006 ff3f 	bl	8008e94 <HAL_TIM_PWM_ConfigChannel>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800201c:	f000 fb32 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002020:	4803      	ldr	r0, [pc, #12]	; (8002030 <MX_TIM5_Init+0xe8>)
 8002022:	f000 ff71 	bl	8002f08 <HAL_TIM_MspPostInit>

}
 8002026:	bf00      	nop
 8002028:	3738      	adds	r7, #56	; 0x38
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000b40 	.word	0x20000b40
 8002034:	40000c00 	.word	0x40000c00

08002038 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800203e:	f107 0310 	add.w	r3, r7, #16
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	609a      	str	r2, [r3, #8]
 800204a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002056:	4b20      	ldr	r3, [pc, #128]	; (80020d8 <MX_TIM8_Init+0xa0>)
 8002058:	4a20      	ldr	r2, [pc, #128]	; (80020dc <MX_TIM8_Init+0xa4>)
 800205a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800205c:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <MX_TIM8_Init+0xa0>)
 800205e:	2200      	movs	r2, #0
 8002060:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002062:	4b1d      	ldr	r3, [pc, #116]	; (80020d8 <MX_TIM8_Init+0xa0>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002068:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <MX_TIM8_Init+0xa0>)
 800206a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800206e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002070:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <MX_TIM8_Init+0xa0>)
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002076:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <MX_TIM8_Init+0xa0>)
 8002078:	2200      	movs	r2, #0
 800207a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800207c:	4b16      	ldr	r3, [pc, #88]	; (80020d8 <MX_TIM8_Init+0xa0>)
 800207e:	2200      	movs	r2, #0
 8002080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002082:	4815      	ldr	r0, [pc, #84]	; (80020d8 <MX_TIM8_Init+0xa0>)
 8002084:	f006 fde6 	bl	8008c54 <HAL_TIM_Base_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800208e:	f000 faf9 	bl	8002684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002096:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002098:	f107 0310 	add.w	r3, r7, #16
 800209c:	4619      	mov	r1, r3
 800209e:	480e      	ldr	r0, [pc, #56]	; (80020d8 <MX_TIM8_Init+0xa0>)
 80020a0:	f007 f808 	bl	80090b4 <HAL_TIM_ConfigClockSource>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80020aa:	f000 faeb 	bl	8002684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ae:	2300      	movs	r3, #0
 80020b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80020ba:	1d3b      	adds	r3, r7, #4
 80020bc:	4619      	mov	r1, r3
 80020be:	4806      	ldr	r0, [pc, #24]	; (80020d8 <MX_TIM8_Init+0xa0>)
 80020c0:	f007 fc56 	bl	8009970 <HAL_TIMEx_MasterConfigSynchronization>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80020ca:	f000 fadb 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80020ce:	bf00      	nop
 80020d0:	3720      	adds	r7, #32
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000930 	.word	0x20000930
 80020dc:	40010400 	.word	0x40010400

080020e0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80020e6:	1d3b      	adds	r3, r7, #4
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
 80020f4:	615a      	str	r2, [r3, #20]
 80020f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80020f8:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <MX_TIM12_Init+0x84>)
 80020fa:	4a1b      	ldr	r2, [pc, #108]	; (8002168 <MX_TIM12_Init+0x88>)
 80020fc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80020fe:	4b19      	ldr	r3, [pc, #100]	; (8002164 <MX_TIM12_Init+0x84>)
 8002100:	2200      	movs	r2, #0
 8002102:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002104:	4b17      	ldr	r3, [pc, #92]	; (8002164 <MX_TIM12_Init+0x84>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800210a:	4b16      	ldr	r3, [pc, #88]	; (8002164 <MX_TIM12_Init+0x84>)
 800210c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002110:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002112:	4b14      	ldr	r3, [pc, #80]	; (8002164 <MX_TIM12_Init+0x84>)
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002118:	4b12      	ldr	r3, [pc, #72]	; (8002164 <MX_TIM12_Init+0x84>)
 800211a:	2200      	movs	r2, #0
 800211c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800211e:	4811      	ldr	r0, [pc, #68]	; (8002164 <MX_TIM12_Init+0x84>)
 8002120:	f006 fe60 	bl	8008de4 <HAL_TIM_PWM_Init>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800212a:	f000 faab 	bl	8002684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800212e:	2360      	movs	r3, #96	; 0x60
 8002130:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	2200      	movs	r2, #0
 8002142:	4619      	mov	r1, r3
 8002144:	4807      	ldr	r0, [pc, #28]	; (8002164 <MX_TIM12_Init+0x84>)
 8002146:	f006 fea5 	bl	8008e94 <HAL_TIM_PWM_ConfigChannel>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002150:	f000 fa98 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002154:	4803      	ldr	r0, [pc, #12]	; (8002164 <MX_TIM12_Init+0x84>)
 8002156:	f000 fed7 	bl	8002f08 <HAL_TIM_MspPostInit>

}
 800215a:	bf00      	nop
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000f18 	.word	0x20000f18
 8002168:	40001800 	.word	0x40001800

0800216c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002170:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <MX_USART1_UART_Init+0x58>)
 8002172:	4a15      	ldr	r2, [pc, #84]	; (80021c8 <MX_USART1_UART_Init+0x5c>)
 8002174:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002176:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <MX_USART1_UART_Init+0x58>)
 8002178:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800217c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800217e:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <MX_USART1_UART_Init+0x58>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002184:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <MX_USART1_UART_Init+0x58>)
 8002186:	2200      	movs	r2, #0
 8002188:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800218a:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <MX_USART1_UART_Init+0x58>)
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002190:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <MX_USART1_UART_Init+0x58>)
 8002192:	220c      	movs	r2, #12
 8002194:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002196:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <MX_USART1_UART_Init+0x58>)
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800219c:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <MX_USART1_UART_Init+0x58>)
 800219e:	2200      	movs	r2, #0
 80021a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <MX_USART1_UART_Init+0x58>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <MX_USART1_UART_Init+0x58>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021ae:	4805      	ldr	r0, [pc, #20]	; (80021c4 <MX_USART1_UART_Init+0x58>)
 80021b0:	f007 fcea 	bl	8009b88 <HAL_UART_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80021ba:	f000 fa63 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000d18 	.word	0x20000d18
 80021c8:	40011000 	.word	0x40011000

080021cc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80021d0:	4b14      	ldr	r3, [pc, #80]	; (8002224 <MX_USART6_UART_Init+0x58>)
 80021d2:	4a15      	ldr	r2, [pc, #84]	; (8002228 <MX_USART6_UART_Init+0x5c>)
 80021d4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80021d6:	4b13      	ldr	r3, [pc, #76]	; (8002224 <MX_USART6_UART_Init+0x58>)
 80021d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021dc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80021de:	4b11      	ldr	r3, [pc, #68]	; (8002224 <MX_USART6_UART_Init+0x58>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80021e4:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <MX_USART6_UART_Init+0x58>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80021ea:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <MX_USART6_UART_Init+0x58>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <MX_USART6_UART_Init+0x58>)
 80021f2:	220c      	movs	r2, #12
 80021f4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <MX_USART6_UART_Init+0x58>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <MX_USART6_UART_Init+0x58>)
 80021fe:	2200      	movs	r2, #0
 8002200:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002202:	4b08      	ldr	r3, [pc, #32]	; (8002224 <MX_USART6_UART_Init+0x58>)
 8002204:	2200      	movs	r2, #0
 8002206:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <MX_USART6_UART_Init+0x58>)
 800220a:	2200      	movs	r2, #0
 800220c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800220e:	4805      	ldr	r0, [pc, #20]	; (8002224 <MX_USART6_UART_Init+0x58>)
 8002210:	f007 fcba 	bl	8009b88 <HAL_UART_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800221a:	f000 fa33 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000e08 	.word	0x20000e08
 8002228:	40011400 	.word	0x40011400

0800222c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002232:	1d3b      	adds	r3, r7, #4
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	611a      	str	r2, [r3, #16]
 8002240:	615a      	str	r2, [r3, #20]
 8002242:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002244:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <MX_FMC_Init+0x98>)
 8002246:	4a20      	ldr	r2, [pc, #128]	; (80022c8 <MX_FMC_Init+0x9c>)
 8002248:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800224a:	4b1e      	ldr	r3, [pc, #120]	; (80022c4 <MX_FMC_Init+0x98>)
 800224c:	2200      	movs	r2, #0
 800224e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002250:	4b1c      	ldr	r3, [pc, #112]	; (80022c4 <MX_FMC_Init+0x98>)
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002256:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <MX_FMC_Init+0x98>)
 8002258:	2204      	movs	r2, #4
 800225a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800225c:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <MX_FMC_Init+0x98>)
 800225e:	2210      	movs	r2, #16
 8002260:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002262:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <MX_FMC_Init+0x98>)
 8002264:	2240      	movs	r2, #64	; 0x40
 8002266:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002268:	4b16      	ldr	r3, [pc, #88]	; (80022c4 <MX_FMC_Init+0x98>)
 800226a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800226e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002270:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <MX_FMC_Init+0x98>)
 8002272:	2200      	movs	r2, #0
 8002274:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002276:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <MX_FMC_Init+0x98>)
 8002278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800227c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800227e:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <MX_FMC_Init+0x98>)
 8002280:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002284:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <MX_FMC_Init+0x98>)
 8002288:	2200      	movs	r2, #0
 800228a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800228c:	2302      	movs	r3, #2
 800228e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002290:	2307      	movs	r3, #7
 8002292:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002294:	2304      	movs	r3, #4
 8002296:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002298:	2307      	movs	r3, #7
 800229a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800229c:	2303      	movs	r3, #3
 800229e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80022a0:	2302      	movs	r3, #2
 80022a2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80022a4:	2302      	movs	r3, #2
 80022a6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80022a8:	1d3b      	adds	r3, r7, #4
 80022aa:	4619      	mov	r1, r3
 80022ac:	4805      	ldr	r0, [pc, #20]	; (80022c4 <MX_FMC_Init+0x98>)
 80022ae:	f006 fc41 	bl	8008b34 <HAL_SDRAM_Init>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80022b8:	f000 f9e4 	bl	8002684 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80022bc:	bf00      	nop
 80022be:	3720      	adds	r7, #32
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20000f64 	.word	0x20000f64
 80022c8:	a0000140 	.word	0xa0000140

080022cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b090      	sub	sp, #64	; 0x40
 80022d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	609a      	str	r2, [r3, #8]
 80022de:	60da      	str	r2, [r3, #12]
 80022e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022e2:	4baf      	ldr	r3, [pc, #700]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4aae      	ldr	r2, [pc, #696]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 80022e8:	f043 0310 	orr.w	r3, r3, #16
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4bac      	ldr	r3, [pc, #688]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0310 	and.w	r3, r3, #16
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80022f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022fa:	4ba9      	ldr	r3, [pc, #676]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4aa8      	ldr	r2, [pc, #672]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 8002300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4ba6      	ldr	r3, [pc, #664]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002312:	4ba3      	ldr	r3, [pc, #652]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4aa2      	ldr	r2, [pc, #648]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 8002318:	f043 0302 	orr.w	r3, r3, #2
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4ba0      	ldr	r3, [pc, #640]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	623b      	str	r3, [r7, #32]
 8002328:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800232a:	4b9d      	ldr	r3, [pc, #628]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4a9c      	ldr	r2, [pc, #624]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 8002330:	f043 0308 	orr.w	r3, r3, #8
 8002334:	6313      	str	r3, [r2, #48]	; 0x30
 8002336:	4b9a      	ldr	r3, [pc, #616]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	61fb      	str	r3, [r7, #28]
 8002340:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002342:	4b97      	ldr	r3, [pc, #604]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a96      	ldr	r2, [pc, #600]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 8002348:	f043 0304 	orr.w	r3, r3, #4
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b94      	ldr	r3, [pc, #592]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	61bb      	str	r3, [r7, #24]
 8002358:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800235a:	4b91      	ldr	r3, [pc, #580]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a90      	ldr	r2, [pc, #576]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b8e      	ldr	r3, [pc, #568]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002372:	4b8b      	ldr	r3, [pc, #556]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a8a      	ldr	r2, [pc, #552]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 8002378:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b88      	ldr	r3, [pc, #544]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800238a:	4b85      	ldr	r3, [pc, #532]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	4a84      	ldr	r2, [pc, #528]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 8002390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002394:	6313      	str	r3, [r2, #48]	; 0x30
 8002396:	4b82      	ldr	r3, [pc, #520]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80023a2:	4b7f      	ldr	r3, [pc, #508]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a7e      	ldr	r2, [pc, #504]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 80023a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b7c      	ldr	r3, [pc, #496]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023ba:	4b79      	ldr	r3, [pc, #484]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a78      	ldr	r2, [pc, #480]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 80023c0:	f043 0320 	orr.w	r3, r3, #32
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b76      	ldr	r3, [pc, #472]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0320 	and.w	r3, r3, #32
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023d2:	4b73      	ldr	r3, [pc, #460]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a72      	ldr	r2, [pc, #456]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 80023d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b70      	ldr	r3, [pc, #448]	; (80025a0 <MX_GPIO_Init+0x2d4>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80023ea:	2201      	movs	r2, #1
 80023ec:	2120      	movs	r1, #32
 80023ee:	486d      	ldr	r0, [pc, #436]	; (80025a4 <MX_GPIO_Init+0x2d8>)
 80023f0:	f002 f9c0 	bl	8004774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 80023f4:	2200      	movs	r2, #0
 80023f6:	210e      	movs	r1, #14
 80023f8:	486b      	ldr	r0, [pc, #428]	; (80025a8 <MX_GPIO_Init+0x2dc>)
 80023fa:	f002 f9bb 	bl	8004774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80023fe:	2201      	movs	r2, #1
 8002400:	2108      	movs	r1, #8
 8002402:	486a      	ldr	r0, [pc, #424]	; (80025ac <MX_GPIO_Init+0x2e0>)
 8002404:	f002 f9b6 	bl	8004774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002408:	2201      	movs	r2, #1
 800240a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800240e:	4866      	ldr	r0, [pc, #408]	; (80025a8 <MX_GPIO_Init+0x2dc>)
 8002410:	f002 f9b0 	bl	8004774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002414:	2200      	movs	r2, #0
 8002416:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800241a:	4865      	ldr	r0, [pc, #404]	; (80025b0 <MX_GPIO_Init+0x2e4>)
 800241c:	f002 f9aa 	bl	8004774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002420:	2200      	movs	r2, #0
 8002422:	21c8      	movs	r1, #200	; 0xc8
 8002424:	4863      	ldr	r0, [pc, #396]	; (80025b4 <MX_GPIO_Init+0x2e8>)
 8002426:	f002 f9a5 	bl	8004774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800242a:	2308      	movs	r3, #8
 800242c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800242e:	2300      	movs	r3, #0
 8002430:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002436:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800243a:	4619      	mov	r1, r3
 800243c:	485e      	ldr	r0, [pc, #376]	; (80025b8 <MX_GPIO_Init+0x2ec>)
 800243e:	f001 ffed 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002442:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002448:	2302      	movs	r3, #2
 800244a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002450:	2303      	movs	r3, #3
 8002452:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002454:	230a      	movs	r3, #10
 8002456:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002458:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800245c:	4619      	mov	r1, r3
 800245e:	4857      	ldr	r0, [pc, #348]	; (80025bc <MX_GPIO_Init+0x2f0>)
 8002460:	f001 ffdc 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002468:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800246a:	2300      	movs	r3, #0
 800246c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002472:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002476:	4619      	mov	r1, r3
 8002478:	4851      	ldr	r0, [pc, #324]	; (80025c0 <MX_GPIO_Init+0x2f4>)
 800247a:	f001 ffcf 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800247e:	2340      	movs	r3, #64	; 0x40
 8002480:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002482:	4b50      	ldr	r3, [pc, #320]	; (80025c4 <MX_GPIO_Init+0x2f8>)
 8002484:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800248a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800248e:	4619      	mov	r1, r3
 8002490:	4844      	ldr	r0, [pc, #272]	; (80025a4 <MX_GPIO_Init+0x2d8>)
 8002492:	f001 ffc3 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002496:	2320      	movs	r3, #32
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800249a:	2301      	movs	r3, #1
 800249c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a2:	2300      	movs	r3, #0
 80024a4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80024a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024aa:	4619      	mov	r1, r3
 80024ac:	483d      	ldr	r0, [pc, #244]	; (80025a4 <MX_GPIO_Init+0x2d8>)
 80024ae:	f001 ffb5 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 80024b2:	f241 030e 	movw	r3, #4110	; 0x100e
 80024b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b8:	2301      	movs	r3, #1
 80024ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c0:	2300      	movs	r3, #0
 80024c2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80024c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024c8:	4619      	mov	r1, r3
 80024ca:	4837      	ldr	r0, [pc, #220]	; (80025a8 <MX_GPIO_Init+0x2dc>)
 80024cc:	f001 ffa6 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80024d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d6:	2300      	movs	r3, #0
 80024d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80024de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024e2:	4619      	mov	r1, r3
 80024e4:	4838      	ldr	r0, [pc, #224]	; (80025c8 <MX_GPIO_Init+0x2fc>)
 80024e6:	f001 ff99 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80024ea:	2308      	movs	r3, #8
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ee:	2301      	movs	r3, #1
 80024f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f6:	2300      	movs	r3, #0
 80024f8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80024fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024fe:	4619      	mov	r1, r3
 8002500:	482a      	ldr	r0, [pc, #168]	; (80025ac <MX_GPIO_Init+0x2e0>)
 8002502:	f001 ff8b 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002506:	2310      	movs	r3, #16
 8002508:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800250a:	2300      	movs	r3, #0
 800250c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002512:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002516:	4619      	mov	r1, r3
 8002518:	4822      	ldr	r0, [pc, #136]	; (80025a4 <MX_GPIO_Init+0x2d8>)
 800251a:	f001 ff7f 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800251e:	f248 0304 	movw	r3, #32772	; 0x8004
 8002522:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002524:	2300      	movs	r3, #0
 8002526:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800252c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002530:	4619      	mov	r1, r3
 8002532:	481f      	ldr	r0, [pc, #124]	; (80025b0 <MX_GPIO_Init+0x2e4>)
 8002534:	f001 ff72 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800253c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800253e:	2301      	movs	r3, #1
 8002540:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002546:	2300      	movs	r3, #0
 8002548:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800254a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800254e:	4619      	mov	r1, r3
 8002550:	4817      	ldr	r0, [pc, #92]	; (80025b0 <MX_GPIO_Init+0x2e4>)
 8002552:	f001 ff63 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002556:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800255c:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <MX_GPIO_Init+0x2f8>)
 800255e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002564:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002568:	4619      	mov	r1, r3
 800256a:	480f      	ldr	r0, [pc, #60]	; (80025a8 <MX_GPIO_Init+0x2dc>)
 800256c:	f001 ff56 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002570:	2310      	movs	r3, #16
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257c:	2303      	movs	r3, #3
 800257e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002580:	230a      	movs	r3, #10
 8002582:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002584:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002588:	4619      	mov	r1, r3
 800258a:	4809      	ldr	r0, [pc, #36]	; (80025b0 <MX_GPIO_Init+0x2e4>)
 800258c:	f001 ff46 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002590:	23c8      	movs	r3, #200	; 0xc8
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002594:	2301      	movs	r3, #1
 8002596:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	637b      	str	r3, [r7, #52]	; 0x34
 800259c:	e016      	b.n	80025cc <MX_GPIO_Init+0x300>
 800259e:	bf00      	nop
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40020c00 	.word	0x40020c00
 80025a8:	40022000 	.word	0x40022000
 80025ac:	40022800 	.word	0x40022800
 80025b0:	40021c00 	.word	0x40021c00
 80025b4:	40021800 	.word	0x40021800
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40020400 	.word	0x40020400
 80025c0:	40022400 	.word	0x40022400
 80025c4:	10120000 	.word	0x10120000
 80025c8:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025cc:	2300      	movs	r3, #0
 80025ce:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025d4:	4619      	mov	r1, r3
 80025d6:	4822      	ldr	r0, [pc, #136]	; (8002660 <MX_GPIO_Init+0x394>)
 80025d8:	f001 ff20 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80025dc:	2305      	movs	r3, #5
 80025de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e0:	2302      	movs	r3, #2
 80025e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e8:	2303      	movs	r3, #3
 80025ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80025ec:	230a      	movs	r3, #10
 80025ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025f4:	4619      	mov	r1, r3
 80025f6:	481b      	ldr	r0, [pc, #108]	; (8002664 <MX_GPIO_Init+0x398>)
 80025f8:	f001 ff10 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80025fc:	2304      	movs	r3, #4
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002600:	2300      	movs	r3, #0
 8002602:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002608:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800260c:	4619      	mov	r1, r3
 800260e:	4814      	ldr	r0, [pc, #80]	; (8002660 <MX_GPIO_Init+0x394>)
 8002610:	f001 ff04 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002614:	2328      	movs	r3, #40	; 0x28
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002620:	2303      	movs	r3, #3
 8002622:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002624:	230a      	movs	r3, #10
 8002626:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800262c:	4619      	mov	r1, r3
 800262e:	480e      	ldr	r0, [pc, #56]	; (8002668 <MX_GPIO_Init+0x39c>)
 8002630:	f001 fef4 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002634:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002638:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263a:	2302      	movs	r3, #2
 800263c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002642:	2300      	movs	r3, #0
 8002644:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002646:	2305      	movs	r3, #5
 8002648:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800264a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800264e:	4619      	mov	r1, r3
 8002650:	4806      	ldr	r0, [pc, #24]	; (800266c <MX_GPIO_Init+0x3a0>)
 8002652:	f001 fee3 	bl	800441c <HAL_GPIO_Init>

}
 8002656:	bf00      	nop
 8002658:	3740      	adds	r7, #64	; 0x40
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40021800 	.word	0x40021800
 8002664:	40020800 	.word	0x40020800
 8002668:	40020000 	.word	0x40020000
 800266c:	40020400 	.word	0x40020400

08002670 <LED_Toggle>:
void LED_Off(){

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
}

void LED_Toggle(){
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 8002674:	2102      	movs	r1, #2
 8002676:	4802      	ldr	r0, [pc, #8]	; (8002680 <LED_Toggle+0x10>)
 8002678:	f002 f895 	bl	80047a6 <HAL_GPIO_TogglePin>
}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40022000 	.word	0x40022000

08002684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002688:	b672      	cpsid	i
}
 800268a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800268c:	e7fe      	b.n	800268c <Error_Handler+0x8>
	...

08002690 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002696:	4b0f      	ldr	r3, [pc, #60]	; (80026d4 <HAL_MspInit+0x44>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	4a0e      	ldr	r2, [pc, #56]	; (80026d4 <HAL_MspInit+0x44>)
 800269c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a0:	6413      	str	r3, [r2, #64]	; 0x40
 80026a2:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <HAL_MspInit+0x44>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026aa:	607b      	str	r3, [r7, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ae:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <HAL_MspInit+0x44>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	4a08      	ldr	r2, [pc, #32]	; (80026d4 <HAL_MspInit+0x44>)
 80026b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ba:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <HAL_MspInit+0x44>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c2:	603b      	str	r3, [r7, #0]
 80026c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800

080026d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08a      	sub	sp, #40	; 0x28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e0:	f107 0314 	add.w	r3, r7, #20
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a21      	ldr	r2, [pc, #132]	; (800277c <HAL_ADC_MspInit+0xa4>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d13c      	bne.n	8002774 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80026fa:	4b21      	ldr	r3, [pc, #132]	; (8002780 <HAL_ADC_MspInit+0xa8>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	4a20      	ldr	r2, [pc, #128]	; (8002780 <HAL_ADC_MspInit+0xa8>)
 8002700:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002704:	6453      	str	r3, [r2, #68]	; 0x44
 8002706:	4b1e      	ldr	r3, [pc, #120]	; (8002780 <HAL_ADC_MspInit+0xa8>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002712:	4b1b      	ldr	r3, [pc, #108]	; (8002780 <HAL_ADC_MspInit+0xa8>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	4a1a      	ldr	r2, [pc, #104]	; (8002780 <HAL_ADC_MspInit+0xa8>)
 8002718:	f043 0320 	orr.w	r3, r3, #32
 800271c:	6313      	str	r3, [r2, #48]	; 0x30
 800271e:	4b18      	ldr	r3, [pc, #96]	; (8002780 <HAL_ADC_MspInit+0xa8>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	f003 0320 	and.w	r3, r3, #32
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800272a:	4b15      	ldr	r3, [pc, #84]	; (8002780 <HAL_ADC_MspInit+0xa8>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	4a14      	ldr	r2, [pc, #80]	; (8002780 <HAL_ADC_MspInit+0xa8>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	6313      	str	r3, [r2, #48]	; 0x30
 8002736:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_ADC_MspInit+0xa8>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	60bb      	str	r3, [r7, #8]
 8002740:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002742:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002746:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002748:	2303      	movs	r3, #3
 800274a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	4619      	mov	r1, r3
 8002756:	480b      	ldr	r0, [pc, #44]	; (8002784 <HAL_ADC_MspInit+0xac>)
 8002758:	f001 fe60 	bl	800441c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800275c:	2301      	movs	r3, #1
 800275e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002760:	2303      	movs	r3, #3
 8002762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	4619      	mov	r1, r3
 800276e:	4806      	ldr	r0, [pc, #24]	; (8002788 <HAL_ADC_MspInit+0xb0>)
 8002770:	f001 fe54 	bl	800441c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002774:	bf00      	nop
 8002776:	3728      	adds	r7, #40	; 0x28
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40012200 	.word	0x40012200
 8002780:	40023800 	.word	0x40023800
 8002784:	40021400 	.word	0x40021400
 8002788:	40020000 	.word	0x40020000

0800278c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0a      	ldr	r2, [pc, #40]	; (80027c4 <HAL_CRC_MspInit+0x38>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d10b      	bne.n	80027b6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800279e:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <HAL_CRC_MspInit+0x3c>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	4a09      	ldr	r2, [pc, #36]	; (80027c8 <HAL_CRC_MspInit+0x3c>)
 80027a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <HAL_CRC_MspInit+0x3c>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80027b6:	bf00      	nop
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40023000 	.word	0x40023000
 80027c8:	40023800 	.word	0x40023800

080027cc <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08e      	sub	sp, #56	; 0x38
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a50      	ldr	r2, [pc, #320]	; (800292c <HAL_DCMI_MspInit+0x160>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	f040 809a 	bne.w	8002924 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80027f0:	4b4f      	ldr	r3, [pc, #316]	; (8002930 <HAL_DCMI_MspInit+0x164>)
 80027f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f4:	4a4e      	ldr	r2, [pc, #312]	; (8002930 <HAL_DCMI_MspInit+0x164>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6353      	str	r3, [r2, #52]	; 0x34
 80027fc:	4b4c      	ldr	r3, [pc, #304]	; (8002930 <HAL_DCMI_MspInit+0x164>)
 80027fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	623b      	str	r3, [r7, #32]
 8002806:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002808:	4b49      	ldr	r3, [pc, #292]	; (8002930 <HAL_DCMI_MspInit+0x164>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	4a48      	ldr	r2, [pc, #288]	; (8002930 <HAL_DCMI_MspInit+0x164>)
 800280e:	f043 0310 	orr.w	r3, r3, #16
 8002812:	6313      	str	r3, [r2, #48]	; 0x30
 8002814:	4b46      	ldr	r3, [pc, #280]	; (8002930 <HAL_DCMI_MspInit+0x164>)
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	f003 0310 	and.w	r3, r3, #16
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002820:	4b43      	ldr	r3, [pc, #268]	; (8002930 <HAL_DCMI_MspInit+0x164>)
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	4a42      	ldr	r2, [pc, #264]	; (8002930 <HAL_DCMI_MspInit+0x164>)
 8002826:	f043 0308 	orr.w	r3, r3, #8
 800282a:	6313      	str	r3, [r2, #48]	; 0x30
 800282c:	4b40      	ldr	r3, [pc, #256]	; (8002930 <HAL_DCMI_MspInit+0x164>)
 800282e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	61bb      	str	r3, [r7, #24]
 8002836:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002838:	4b3d      	ldr	r3, [pc, #244]	; (8002930 <HAL_DCMI_MspInit+0x164>)
 800283a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283c:	4a3c      	ldr	r2, [pc, #240]	; (8002930 <HAL_DCMI_MspInit+0x164>)
 800283e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002842:	6313      	str	r3, [r2, #48]	; 0x30
 8002844:	4b3a      	ldr	r3, [pc, #232]	; (8002930 <HAL_DCMI_MspInit+0x164>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002850:	4b37      	ldr	r3, [pc, #220]	; (8002930 <HAL_DCMI_MspInit+0x164>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	4a36      	ldr	r2, [pc, #216]	; (8002930 <HAL_DCMI_MspInit+0x164>)
 8002856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800285a:	6313      	str	r3, [r2, #48]	; 0x30
 800285c:	4b34      	ldr	r3, [pc, #208]	; (8002930 <HAL_DCMI_MspInit+0x164>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002868:	4b31      	ldr	r3, [pc, #196]	; (8002930 <HAL_DCMI_MspInit+0x164>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	4a30      	ldr	r2, [pc, #192]	; (8002930 <HAL_DCMI_MspInit+0x164>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	6313      	str	r3, [r2, #48]	; 0x30
 8002874:	4b2e      	ldr	r3, [pc, #184]	; (8002930 <HAL_DCMI_MspInit+0x164>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002880:	2360      	movs	r3, #96	; 0x60
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002884:	2302      	movs	r3, #2
 8002886:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002888:	2300      	movs	r3, #0
 800288a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288c:	2300      	movs	r3, #0
 800288e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002890:	230d      	movs	r3, #13
 8002892:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002898:	4619      	mov	r1, r3
 800289a:	4826      	ldr	r0, [pc, #152]	; (8002934 <HAL_DCMI_MspInit+0x168>)
 800289c:	f001 fdbe 	bl	800441c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80028a0:	2308      	movs	r3, #8
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a4:	2302      	movs	r3, #2
 80028a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ac:	2300      	movs	r3, #0
 80028ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028b0:	230d      	movs	r3, #13
 80028b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80028b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b8:	4619      	mov	r1, r3
 80028ba:	481f      	ldr	r0, [pc, #124]	; (8002938 <HAL_DCMI_MspInit+0x16c>)
 80028bc:	f001 fdae 	bl	800441c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80028c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c6:	2302      	movs	r3, #2
 80028c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ce:	2300      	movs	r3, #0
 80028d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028d2:	230d      	movs	r3, #13
 80028d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80028d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028da:	4619      	mov	r1, r3
 80028dc:	4817      	ldr	r0, [pc, #92]	; (800293c <HAL_DCMI_MspInit+0x170>)
 80028de:	f001 fd9d 	bl	800441c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80028e2:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e8:	2302      	movs	r3, #2
 80028ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f0:	2300      	movs	r3, #0
 80028f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028f4:	230d      	movs	r3, #13
 80028f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80028f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028fc:	4619      	mov	r1, r3
 80028fe:	4810      	ldr	r0, [pc, #64]	; (8002940 <HAL_DCMI_MspInit+0x174>)
 8002900:	f001 fd8c 	bl	800441c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002904:	2350      	movs	r3, #80	; 0x50
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002908:	2302      	movs	r3, #2
 800290a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002910:	2300      	movs	r3, #0
 8002912:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002914:	230d      	movs	r3, #13
 8002916:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800291c:	4619      	mov	r1, r3
 800291e:	4809      	ldr	r0, [pc, #36]	; (8002944 <HAL_DCMI_MspInit+0x178>)
 8002920:	f001 fd7c 	bl	800441c <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002924:	bf00      	nop
 8002926:	3738      	adds	r7, #56	; 0x38
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	50050000 	.word	0x50050000
 8002930:	40023800 	.word	0x40023800
 8002934:	40021000 	.word	0x40021000
 8002938:	40020c00 	.word	0x40020c00
 800293c:	40021800 	.word	0x40021800
 8002940:	40021c00 	.word	0x40021c00
 8002944:	40020000 	.word	0x40020000

08002948 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a0d      	ldr	r2, [pc, #52]	; (800298c <HAL_DMA2D_MspInit+0x44>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d113      	bne.n	8002982 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800295a:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <HAL_DMA2D_MspInit+0x48>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	4a0c      	ldr	r2, [pc, #48]	; (8002990 <HAL_DMA2D_MspInit+0x48>)
 8002960:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002964:	6313      	str	r3, [r2, #48]	; 0x30
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <HAL_DMA2D_MspInit+0x48>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8002972:	2200      	movs	r2, #0
 8002974:	2100      	movs	r1, #0
 8002976:	205a      	movs	r0, #90	; 0x5a
 8002978:	f001 f9c9 	bl	8003d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800297c:	205a      	movs	r0, #90	; 0x5a
 800297e:	f001 f9e2 	bl	8003d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	4002b000 	.word	0x4002b000
 8002990:	40023800 	.word	0x40023800

08002994 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08c      	sub	sp, #48	; 0x30
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299c:	f107 031c 	add.w	r3, r7, #28
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	60da      	str	r2, [r3, #12]
 80029aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a2f      	ldr	r2, [pc, #188]	; (8002a70 <HAL_I2C_MspInit+0xdc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d129      	bne.n	8002a0a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b6:	4b2f      	ldr	r3, [pc, #188]	; (8002a74 <HAL_I2C_MspInit+0xe0>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	4a2e      	ldr	r2, [pc, #184]	; (8002a74 <HAL_I2C_MspInit+0xe0>)
 80029bc:	f043 0302 	orr.w	r3, r3, #2
 80029c0:	6313      	str	r3, [r2, #48]	; 0x30
 80029c2:	4b2c      	ldr	r3, [pc, #176]	; (8002a74 <HAL_I2C_MspInit+0xe0>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	61bb      	str	r3, [r7, #24]
 80029cc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80029ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029d4:	2312      	movs	r3, #18
 80029d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029d8:	2301      	movs	r3, #1
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029dc:	2300      	movs	r3, #0
 80029de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029e0:	2304      	movs	r3, #4
 80029e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e4:	f107 031c 	add.w	r3, r7, #28
 80029e8:	4619      	mov	r1, r3
 80029ea:	4823      	ldr	r0, [pc, #140]	; (8002a78 <HAL_I2C_MspInit+0xe4>)
 80029ec:	f001 fd16 	bl	800441c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029f0:	4b20      	ldr	r3, [pc, #128]	; (8002a74 <HAL_I2C_MspInit+0xe0>)
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	4a1f      	ldr	r2, [pc, #124]	; (8002a74 <HAL_I2C_MspInit+0xe0>)
 80029f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029fa:	6413      	str	r3, [r2, #64]	; 0x40
 80029fc:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <HAL_I2C_MspInit+0xe0>)
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002a08:	e02d      	b.n	8002a66 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a1b      	ldr	r2, [pc, #108]	; (8002a7c <HAL_I2C_MspInit+0xe8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d128      	bne.n	8002a66 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a14:	4b17      	ldr	r3, [pc, #92]	; (8002a74 <HAL_I2C_MspInit+0xe0>)
 8002a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a18:	4a16      	ldr	r2, [pc, #88]	; (8002a74 <HAL_I2C_MspInit+0xe0>)
 8002a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a20:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <HAL_I2C_MspInit+0xe0>)
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002a2c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a32:	2312      	movs	r3, #18
 8002a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a36:	2301      	movs	r3, #1
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a3e:	2304      	movs	r3, #4
 8002a40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a42:	f107 031c 	add.w	r3, r7, #28
 8002a46:	4619      	mov	r1, r3
 8002a48:	480d      	ldr	r0, [pc, #52]	; (8002a80 <HAL_I2C_MspInit+0xec>)
 8002a4a:	f001 fce7 	bl	800441c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a4e:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <HAL_I2C_MspInit+0xe0>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	4a08      	ldr	r2, [pc, #32]	; (8002a74 <HAL_I2C_MspInit+0xe0>)
 8002a54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a58:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5a:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <HAL_I2C_MspInit+0xe0>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
}
 8002a66:	bf00      	nop
 8002a68:	3730      	adds	r7, #48	; 0x30
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40005400 	.word	0x40005400
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40020400 	.word	0x40020400
 8002a7c:	40005c00 	.word	0x40005c00
 8002a80:	40021c00 	.word	0x40021c00

08002a84 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08e      	sub	sp, #56	; 0x38
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a55      	ldr	r2, [pc, #340]	; (8002bf8 <HAL_LTDC_MspInit+0x174>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	f040 80a3 	bne.w	8002bee <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002aa8:	4b54      	ldr	r3, [pc, #336]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aac:	4a53      	ldr	r2, [pc, #332]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002aae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ab2:	6453      	str	r3, [r2, #68]	; 0x44
 8002ab4:	4b51      	ldr	r3, [pc, #324]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002abc:	623b      	str	r3, [r7, #32]
 8002abe:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ac0:	4b4e      	ldr	r3, [pc, #312]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	4a4d      	ldr	r2, [pc, #308]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002ac6:	f043 0310 	orr.w	r3, r3, #16
 8002aca:	6313      	str	r3, [r2, #48]	; 0x30
 8002acc:	4b4b      	ldr	r3, [pc, #300]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	61fb      	str	r3, [r7, #28]
 8002ad6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002ad8:	4b48      	ldr	r3, [pc, #288]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	4a47      	ldr	r2, [pc, #284]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002ade:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae4:	4b45      	ldr	r3, [pc, #276]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aec:	61bb      	str	r3, [r7, #24]
 8002aee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002af0:	4b42      	ldr	r3, [pc, #264]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	4a41      	ldr	r2, [pc, #260]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002afa:	6313      	str	r3, [r2, #48]	; 0x30
 8002afc:	4b3f      	ldr	r3, [pc, #252]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b08:	4b3c      	ldr	r3, [pc, #240]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	4a3b      	ldr	r2, [pc, #236]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b12:	6313      	str	r3, [r2, #48]	; 0x30
 8002b14:	4b39      	ldr	r3, [pc, #228]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b20:	4b36      	ldr	r3, [pc, #216]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	4a35      	ldr	r2, [pc, #212]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2c:	4b33      	ldr	r3, [pc, #204]	; (8002bfc <HAL_LTDC_MspInit+0x178>)
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002b38:	2310      	movs	r3, #16
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b44:	2300      	movs	r3, #0
 8002b46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b48:	230e      	movs	r3, #14
 8002b4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b50:	4619      	mov	r1, r3
 8002b52:	482b      	ldr	r0, [pc, #172]	; (8002c00 <HAL_LTDC_MspInit+0x17c>)
 8002b54:	f001 fc62 	bl	800441c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002b58:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b66:	2300      	movs	r3, #0
 8002b68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b6a:	230e      	movs	r3, #14
 8002b6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b72:	4619      	mov	r1, r3
 8002b74:	4823      	ldr	r0, [pc, #140]	; (8002c04 <HAL_LTDC_MspInit+0x180>)
 8002b76:	f001 fc51 	bl	800441c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002b7a:	23f7      	movs	r3, #247	; 0xf7
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b86:	2300      	movs	r3, #0
 8002b88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b8a:	230e      	movs	r3, #14
 8002b8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b92:	4619      	mov	r1, r3
 8002b94:	481c      	ldr	r0, [pc, #112]	; (8002c08 <HAL_LTDC_MspInit+0x184>)
 8002b96:	f001 fc41 	bl	800441c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002b9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002bac:	2309      	movs	r3, #9
 8002bae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4815      	ldr	r0, [pc, #84]	; (8002c0c <HAL_LTDC_MspInit+0x188>)
 8002bb8:	f001 fc30 	bl	800441c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002bbc:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bce:	230e      	movs	r3, #14
 8002bd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	480d      	ldr	r0, [pc, #52]	; (8002c10 <HAL_LTDC_MspInit+0x18c>)
 8002bda:	f001 fc1f 	bl	800441c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002bde:	2200      	movs	r2, #0
 8002be0:	2100      	movs	r1, #0
 8002be2:	2058      	movs	r0, #88	; 0x58
 8002be4:	f001 f893 	bl	8003d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002be8:	2058      	movs	r0, #88	; 0x58
 8002bea:	f001 f8ac 	bl	8003d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002bee:	bf00      	nop
 8002bf0:	3738      	adds	r7, #56	; 0x38
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40016800 	.word	0x40016800
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40022400 	.word	0x40022400
 8002c08:	40022800 	.word	0x40022800
 8002c0c:	40021800 	.word	0x40021800
 8002c10:	40022000 	.word	0x40022000

08002c14 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08c      	sub	sp, #48	; 0x30
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1c:	f107 031c 	add.w	r3, r7, #28
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a3b      	ldr	r2, [pc, #236]	; (8002d20 <HAL_QSPI_MspInit+0x10c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d170      	bne.n	8002d18 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002c36:	4b3b      	ldr	r3, [pc, #236]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3a:	4a3a      	ldr	r2, [pc, #232]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c3c:	f043 0302 	orr.w	r3, r3, #2
 8002c40:	6393      	str	r3, [r2, #56]	; 0x38
 8002c42:	4b38      	ldr	r3, [pc, #224]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	61bb      	str	r3, [r7, #24]
 8002c4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c4e:	4b35      	ldr	r3, [pc, #212]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	4a34      	ldr	r2, [pc, #208]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c54:	f043 0310 	orr.w	r3, r3, #16
 8002c58:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5a:	4b32      	ldr	r3, [pc, #200]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c66:	4b2f      	ldr	r3, [pc, #188]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	4a2e      	ldr	r2, [pc, #184]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c6c:	f043 0302 	orr.w	r3, r3, #2
 8002c70:	6313      	str	r3, [r2, #48]	; 0x30
 8002c72:	4b2c      	ldr	r3, [pc, #176]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c7e:	4b29      	ldr	r3, [pc, #164]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	4a28      	ldr	r2, [pc, #160]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c84:	f043 0308 	orr.w	r3, r3, #8
 8002c88:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8a:	4b26      	ldr	r3, [pc, #152]	; (8002d24 <HAL_QSPI_MspInit+0x110>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002c96:	2304      	movs	r3, #4
 8002c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002ca6:	2309      	movs	r3, #9
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002caa:	f107 031c 	add.w	r3, r7, #28
 8002cae:	4619      	mov	r1, r3
 8002cb0:	481d      	ldr	r0, [pc, #116]	; (8002d28 <HAL_QSPI_MspInit+0x114>)
 8002cb2:	f001 fbb3 	bl	800441c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002cb6:	2340      	movs	r3, #64	; 0x40
 8002cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002cc6:	230a      	movs	r3, #10
 8002cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002cca:	f107 031c 	add.w	r3, r7, #28
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4816      	ldr	r0, [pc, #88]	; (8002d2c <HAL_QSPI_MspInit+0x118>)
 8002cd2:	f001 fba3 	bl	800441c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002ce6:	2309      	movs	r3, #9
 8002ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cea:	f107 031c 	add.w	r3, r7, #28
 8002cee:	4619      	mov	r1, r3
 8002cf0:	480e      	ldr	r0, [pc, #56]	; (8002d2c <HAL_QSPI_MspInit+0x118>)
 8002cf2:	f001 fb93 	bl	800441c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002cf6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d04:	2303      	movs	r3, #3
 8002d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002d08:	2309      	movs	r3, #9
 8002d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d0c:	f107 031c 	add.w	r3, r7, #28
 8002d10:	4619      	mov	r1, r3
 8002d12:	4807      	ldr	r0, [pc, #28]	; (8002d30 <HAL_QSPI_MspInit+0x11c>)
 8002d14:	f001 fb82 	bl	800441c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002d18:	bf00      	nop
 8002d1a:	3730      	adds	r7, #48	; 0x30
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	a0001000 	.word	0xa0001000
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40020400 	.word	0x40020400
 8002d30:	40020c00 	.word	0x40020c00

08002d34 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a07      	ldr	r2, [pc, #28]	; (8002d60 <HAL_RTC_MspInit+0x2c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d105      	bne.n	8002d52 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d46:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <HAL_RTC_MspInit+0x30>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	4a06      	ldr	r2, [pc, #24]	; (8002d64 <HAL_RTC_MspInit+0x30>)
 8002d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d50:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40002800 	.word	0x40002800
 8002d64:	40023800 	.word	0x40023800

08002d68 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08a      	sub	sp, #40	; 0x28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d70:	f107 0314 	add.w	r3, r7, #20
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002d88:	d127      	bne.n	8002dda <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002d8a:	4b16      	ldr	r3, [pc, #88]	; (8002de4 <HAL_SPDIFRX_MspInit+0x7c>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	4a15      	ldr	r2, [pc, #84]	; (8002de4 <HAL_SPDIFRX_MspInit+0x7c>)
 8002d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d94:	6413      	str	r3, [r2, #64]	; 0x40
 8002d96:	4b13      	ldr	r3, [pc, #76]	; (8002de4 <HAL_SPDIFRX_MspInit+0x7c>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002da2:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <HAL_SPDIFRX_MspInit+0x7c>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	4a0f      	ldr	r2, [pc, #60]	; (8002de4 <HAL_SPDIFRX_MspInit+0x7c>)
 8002da8:	f043 0308 	orr.w	r3, r3, #8
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <HAL_SPDIFRX_MspInit+0x7c>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002dca:	2308      	movs	r3, #8
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002dce:	f107 0314 	add.w	r3, r7, #20
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4804      	ldr	r0, [pc, #16]	; (8002de8 <HAL_SPDIFRX_MspInit+0x80>)
 8002dd6:	f001 fb21 	bl	800441c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002dda:	bf00      	nop
 8002ddc:	3728      	adds	r7, #40	; 0x28
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40020c00 	.word	0x40020c00

08002dec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b089      	sub	sp, #36	; 0x24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a2e      	ldr	r2, [pc, #184]	; (8002eb4 <HAL_TIM_Base_MspInit+0xc8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d10c      	bne.n	8002e18 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002dfe:	4b2e      	ldr	r3, [pc, #184]	; (8002eb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	4a2d      	ldr	r2, [pc, #180]	; (8002eb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	6453      	str	r3, [r2, #68]	; 0x44
 8002e0a:	4b2b      	ldr	r3, [pc, #172]	; (8002eb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	61fb      	str	r3, [r7, #28]
 8002e14:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002e16:	e046      	b.n	8002ea6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e20:	d10c      	bne.n	8002e3c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e22:	4b25      	ldr	r3, [pc, #148]	; (8002eb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	4a24      	ldr	r2, [pc, #144]	; (8002eb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2e:	4b22      	ldr	r3, [pc, #136]	; (8002eb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	61bb      	str	r3, [r7, #24]
 8002e38:	69bb      	ldr	r3, [r7, #24]
}
 8002e3a:	e034      	b.n	8002ea6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a1e      	ldr	r2, [pc, #120]	; (8002ebc <HAL_TIM_Base_MspInit+0xd0>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d10c      	bne.n	8002e60 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e46:	4b1c      	ldr	r3, [pc, #112]	; (8002eb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	4a1b      	ldr	r2, [pc, #108]	; (8002eb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002e4c:	f043 0302 	orr.w	r3, r3, #2
 8002e50:	6413      	str	r3, [r2, #64]	; 0x40
 8002e52:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	697b      	ldr	r3, [r7, #20]
}
 8002e5e:	e022      	b.n	8002ea6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a16      	ldr	r2, [pc, #88]	; (8002ec0 <HAL_TIM_Base_MspInit+0xd4>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d10c      	bne.n	8002e84 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002e6a:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	4a12      	ldr	r2, [pc, #72]	; (8002eb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002e70:	f043 0308 	orr.w	r3, r3, #8
 8002e74:	6413      	str	r3, [r2, #64]	; 0x40
 8002e76:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	693b      	ldr	r3, [r7, #16]
}
 8002e82:	e010      	b.n	8002ea6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a0e      	ldr	r2, [pc, #56]	; (8002ec4 <HAL_TIM_Base_MspInit+0xd8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d10b      	bne.n	8002ea6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	4a09      	ldr	r2, [pc, #36]	; (8002eb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002e94:	f043 0302 	orr.w	r3, r3, #2
 8002e98:	6453      	str	r3, [r2, #68]	; 0x44
 8002e9a:	4b07      	ldr	r3, [pc, #28]	; (8002eb8 <HAL_TIM_Base_MspInit+0xcc>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
}
 8002ea6:	bf00      	nop
 8002ea8:	3724      	adds	r7, #36	; 0x24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40010000 	.word	0x40010000
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	40000400 	.word	0x40000400
 8002ec0:	40000c00 	.word	0x40000c00
 8002ec4:	40010400 	.word	0x40010400

08002ec8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a0a      	ldr	r2, [pc, #40]	; (8002f00 <HAL_TIM_PWM_MspInit+0x38>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d10b      	bne.n	8002ef2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002eda:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <HAL_TIM_PWM_MspInit+0x3c>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	4a09      	ldr	r2, [pc, #36]	; (8002f04 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee6:	4b07      	ldr	r3, [pc, #28]	; (8002f04 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002ef2:	bf00      	nop
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40001800 	.word	0x40001800
 8002f04:	40023800 	.word	0x40023800

08002f08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08c      	sub	sp, #48	; 0x30
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f10:	f107 031c 	add.w	r3, r7, #28
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	605a      	str	r2, [r3, #4]
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	60da      	str	r2, [r3, #12]
 8002f1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a56      	ldr	r2, [pc, #344]	; (8003080 <HAL_TIM_MspPostInit+0x178>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d11d      	bne.n	8002f66 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f2a:	4b56      	ldr	r3, [pc, #344]	; (8003084 <HAL_TIM_MspPostInit+0x17c>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	4a55      	ldr	r2, [pc, #340]	; (8003084 <HAL_TIM_MspPostInit+0x17c>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	6313      	str	r3, [r2, #48]	; 0x30
 8002f36:	4b53      	ldr	r3, [pc, #332]	; (8003084 <HAL_TIM_MspPostInit+0x17c>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	61bb      	str	r3, [r7, #24]
 8002f40:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002f42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f50:	2300      	movs	r3, #0
 8002f52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f54:	2301      	movs	r3, #1
 8002f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002f58:	f107 031c 	add.w	r3, r7, #28
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	484a      	ldr	r0, [pc, #296]	; (8003088 <HAL_TIM_MspPostInit+0x180>)
 8002f60:	f001 fa5c 	bl	800441c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002f64:	e087      	b.n	8003076 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f6e:	d11d      	bne.n	8002fac <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f70:	4b44      	ldr	r3, [pc, #272]	; (8003084 <HAL_TIM_MspPostInit+0x17c>)
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	4a43      	ldr	r2, [pc, #268]	; (8003084 <HAL_TIM_MspPostInit+0x17c>)
 8002f76:	f043 0301 	orr.w	r3, r3, #1
 8002f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7c:	4b41      	ldr	r3, [pc, #260]	; (8003084 <HAL_TIM_MspPostInit+0x17c>)
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002f88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f96:	2300      	movs	r3, #0
 8002f98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002f9e:	f107 031c 	add.w	r3, r7, #28
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4838      	ldr	r0, [pc, #224]	; (8003088 <HAL_TIM_MspPostInit+0x180>)
 8002fa6:	f001 fa39 	bl	800441c <HAL_GPIO_Init>
}
 8002faa:	e064      	b.n	8003076 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a36      	ldr	r2, [pc, #216]	; (800308c <HAL_TIM_MspPostInit+0x184>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d11c      	bne.n	8002ff0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fb6:	4b33      	ldr	r3, [pc, #204]	; (8003084 <HAL_TIM_MspPostInit+0x17c>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	4a32      	ldr	r2, [pc, #200]	; (8003084 <HAL_TIM_MspPostInit+0x17c>)
 8002fbc:	f043 0302 	orr.w	r3, r3, #2
 8002fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc2:	4b30      	ldr	r3, [pc, #192]	; (8003084 <HAL_TIM_MspPostInit+0x17c>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	613b      	str	r3, [r7, #16]
 8002fcc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002fce:	2310      	movs	r3, #16
 8002fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002fde:	2302      	movs	r3, #2
 8002fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002fe2:	f107 031c 	add.w	r3, r7, #28
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4829      	ldr	r0, [pc, #164]	; (8003090 <HAL_TIM_MspPostInit+0x188>)
 8002fea:	f001 fa17 	bl	800441c <HAL_GPIO_Init>
}
 8002fee:	e042      	b.n	8003076 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a27      	ldr	r2, [pc, #156]	; (8003094 <HAL_TIM_MspPostInit+0x18c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d11c      	bne.n	8003034 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002ffa:	4b22      	ldr	r3, [pc, #136]	; (8003084 <HAL_TIM_MspPostInit+0x17c>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	4a21      	ldr	r2, [pc, #132]	; (8003084 <HAL_TIM_MspPostInit+0x17c>)
 8003000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003004:	6313      	str	r3, [r2, #48]	; 0x30
 8003006:	4b1f      	ldr	r3, [pc, #124]	; (8003084 <HAL_TIM_MspPostInit+0x17c>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003012:	2301      	movs	r3, #1
 8003014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003016:	2302      	movs	r3, #2
 8003018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301a:	2300      	movs	r3, #0
 800301c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301e:	2300      	movs	r3, #0
 8003020:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003022:	2302      	movs	r3, #2
 8003024:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003026:	f107 031c 	add.w	r3, r7, #28
 800302a:	4619      	mov	r1, r3
 800302c:	481a      	ldr	r0, [pc, #104]	; (8003098 <HAL_TIM_MspPostInit+0x190>)
 800302e:	f001 f9f5 	bl	800441c <HAL_GPIO_Init>
}
 8003032:	e020      	b.n	8003076 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a18      	ldr	r2, [pc, #96]	; (800309c <HAL_TIM_MspPostInit+0x194>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d11b      	bne.n	8003076 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800303e:	4b11      	ldr	r3, [pc, #68]	; (8003084 <HAL_TIM_MspPostInit+0x17c>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	4a10      	ldr	r2, [pc, #64]	; (8003084 <HAL_TIM_MspPostInit+0x17c>)
 8003044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003048:	6313      	str	r3, [r2, #48]	; 0x30
 800304a:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <HAL_TIM_MspPostInit+0x17c>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003052:	60bb      	str	r3, [r7, #8]
 8003054:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003056:	2340      	movs	r3, #64	; 0x40
 8003058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305a:	2302      	movs	r3, #2
 800305c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003062:	2300      	movs	r3, #0
 8003064:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003066:	2309      	movs	r3, #9
 8003068:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800306a:	f107 031c 	add.w	r3, r7, #28
 800306e:	4619      	mov	r1, r3
 8003070:	480b      	ldr	r0, [pc, #44]	; (80030a0 <HAL_TIM_MspPostInit+0x198>)
 8003072:	f001 f9d3 	bl	800441c <HAL_GPIO_Init>
}
 8003076:	bf00      	nop
 8003078:	3730      	adds	r7, #48	; 0x30
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40010000 	.word	0x40010000
 8003084:	40023800 	.word	0x40023800
 8003088:	40020000 	.word	0x40020000
 800308c:	40000400 	.word	0x40000400
 8003090:	40020400 	.word	0x40020400
 8003094:	40000c00 	.word	0x40000c00
 8003098:	40022000 	.word	0x40022000
 800309c:	40001800 	.word	0x40001800
 80030a0:	40021c00 	.word	0x40021c00

080030a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08c      	sub	sp, #48	; 0x30
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ac:	f107 031c 	add.w	r3, r7, #28
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	605a      	str	r2, [r3, #4]
 80030b6:	609a      	str	r2, [r3, #8]
 80030b8:	60da      	str	r2, [r3, #12]
 80030ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a3c      	ldr	r2, [pc, #240]	; (80031b4 <HAL_UART_MspInit+0x110>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d145      	bne.n	8003152 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030c6:	4b3c      	ldr	r3, [pc, #240]	; (80031b8 <HAL_UART_MspInit+0x114>)
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	4a3b      	ldr	r2, [pc, #236]	; (80031b8 <HAL_UART_MspInit+0x114>)
 80030cc:	f043 0310 	orr.w	r3, r3, #16
 80030d0:	6453      	str	r3, [r2, #68]	; 0x44
 80030d2:	4b39      	ldr	r3, [pc, #228]	; (80031b8 <HAL_UART_MspInit+0x114>)
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	61bb      	str	r3, [r7, #24]
 80030dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030de:	4b36      	ldr	r3, [pc, #216]	; (80031b8 <HAL_UART_MspInit+0x114>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	4a35      	ldr	r2, [pc, #212]	; (80031b8 <HAL_UART_MspInit+0x114>)
 80030e4:	f043 0302 	orr.w	r3, r3, #2
 80030e8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ea:	4b33      	ldr	r3, [pc, #204]	; (80031b8 <HAL_UART_MspInit+0x114>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f6:	4b30      	ldr	r3, [pc, #192]	; (80031b8 <HAL_UART_MspInit+0x114>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	4a2f      	ldr	r2, [pc, #188]	; (80031b8 <HAL_UART_MspInit+0x114>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	6313      	str	r3, [r2, #48]	; 0x30
 8003102:	4b2d      	ldr	r3, [pc, #180]	; (80031b8 <HAL_UART_MspInit+0x114>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003112:	2302      	movs	r3, #2
 8003114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003116:	2300      	movs	r3, #0
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311a:	2300      	movs	r3, #0
 800311c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800311e:	2307      	movs	r3, #7
 8003120:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003122:	f107 031c 	add.w	r3, r7, #28
 8003126:	4619      	mov	r1, r3
 8003128:	4824      	ldr	r0, [pc, #144]	; (80031bc <HAL_UART_MspInit+0x118>)
 800312a:	f001 f977 	bl	800441c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800312e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003134:	2302      	movs	r3, #2
 8003136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003138:	2300      	movs	r3, #0
 800313a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313c:	2300      	movs	r3, #0
 800313e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003140:	2307      	movs	r3, #7
 8003142:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003144:	f107 031c 	add.w	r3, r7, #28
 8003148:	4619      	mov	r1, r3
 800314a:	481d      	ldr	r0, [pc, #116]	; (80031c0 <HAL_UART_MspInit+0x11c>)
 800314c:	f001 f966 	bl	800441c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003150:	e02c      	b.n	80031ac <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a1b      	ldr	r2, [pc, #108]	; (80031c4 <HAL_UART_MspInit+0x120>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d127      	bne.n	80031ac <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 800315c:	4b16      	ldr	r3, [pc, #88]	; (80031b8 <HAL_UART_MspInit+0x114>)
 800315e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003160:	4a15      	ldr	r2, [pc, #84]	; (80031b8 <HAL_UART_MspInit+0x114>)
 8003162:	f043 0320 	orr.w	r3, r3, #32
 8003166:	6453      	str	r3, [r2, #68]	; 0x44
 8003168:	4b13      	ldr	r3, [pc, #76]	; (80031b8 <HAL_UART_MspInit+0x114>)
 800316a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316c:	f003 0320 	and.w	r3, r3, #32
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003174:	4b10      	ldr	r3, [pc, #64]	; (80031b8 <HAL_UART_MspInit+0x114>)
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	4a0f      	ldr	r2, [pc, #60]	; (80031b8 <HAL_UART_MspInit+0x114>)
 800317a:	f043 0304 	orr.w	r3, r3, #4
 800317e:	6313      	str	r3, [r2, #48]	; 0x30
 8003180:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <HAL_UART_MspInit+0x114>)
 8003182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800318c:	23c0      	movs	r3, #192	; 0xc0
 800318e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003190:	2302      	movs	r3, #2
 8003192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003194:	2300      	movs	r3, #0
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003198:	2303      	movs	r3, #3
 800319a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800319c:	2308      	movs	r3, #8
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031a0:	f107 031c 	add.w	r3, r7, #28
 80031a4:	4619      	mov	r1, r3
 80031a6:	4808      	ldr	r0, [pc, #32]	; (80031c8 <HAL_UART_MspInit+0x124>)
 80031a8:	f001 f938 	bl	800441c <HAL_GPIO_Init>
}
 80031ac:	bf00      	nop
 80031ae:	3730      	adds	r7, #48	; 0x30
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40011000 	.word	0x40011000
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40020400 	.word	0x40020400
 80031c0:	40020000 	.word	0x40020000
 80031c4:	40011400 	.word	0x40011400
 80031c8:	40020800 	.word	0x40020800

080031cc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80031d2:	1d3b      	adds	r3, r7, #4
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80031e0:	4b3a      	ldr	r3, [pc, #232]	; (80032cc <HAL_FMC_MspInit+0x100>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d16d      	bne.n	80032c4 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80031e8:	4b38      	ldr	r3, [pc, #224]	; (80032cc <HAL_FMC_MspInit+0x100>)
 80031ea:	2201      	movs	r2, #1
 80031ec:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80031ee:	4b38      	ldr	r3, [pc, #224]	; (80032d0 <HAL_FMC_MspInit+0x104>)
 80031f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f2:	4a37      	ldr	r2, [pc, #220]	; (80032d0 <HAL_FMC_MspInit+0x104>)
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	6393      	str	r3, [r2, #56]	; 0x38
 80031fa:	4b35      	ldr	r3, [pc, #212]	; (80032d0 <HAL_FMC_MspInit+0x104>)
 80031fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8003206:	f64f 7383 	movw	r3, #65411	; 0xff83
 800320a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320c:	2302      	movs	r3, #2
 800320e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003214:	2303      	movs	r3, #3
 8003216:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003218:	230c      	movs	r3, #12
 800321a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800321c:	1d3b      	adds	r3, r7, #4
 800321e:	4619      	mov	r1, r3
 8003220:	482c      	ldr	r0, [pc, #176]	; (80032d4 <HAL_FMC_MspInit+0x108>)
 8003222:	f001 f8fb 	bl	800441c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8003226:	f248 1333 	movw	r3, #33075	; 0x8133
 800322a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322c:	2302      	movs	r3, #2
 800322e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003230:	2300      	movs	r3, #0
 8003232:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003234:	2303      	movs	r3, #3
 8003236:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003238:	230c      	movs	r3, #12
 800323a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800323c:	1d3b      	adds	r3, r7, #4
 800323e:	4619      	mov	r1, r3
 8003240:	4825      	ldr	r0, [pc, #148]	; (80032d8 <HAL_FMC_MspInit+0x10c>)
 8003242:	f001 f8eb 	bl	800441c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003246:	f24c 7303 	movw	r3, #50947	; 0xc703
 800324a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324c:	2302      	movs	r3, #2
 800324e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003254:	2303      	movs	r3, #3
 8003256:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003258:	230c      	movs	r3, #12
 800325a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800325c:	1d3b      	adds	r3, r7, #4
 800325e:	4619      	mov	r1, r3
 8003260:	481e      	ldr	r0, [pc, #120]	; (80032dc <HAL_FMC_MspInit+0x110>)
 8003262:	f001 f8db 	bl	800441c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003266:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800326a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326c:	2302      	movs	r3, #2
 800326e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003270:	2300      	movs	r3, #0
 8003272:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003274:	2303      	movs	r3, #3
 8003276:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003278:	230c      	movs	r3, #12
 800327a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800327c:	1d3b      	adds	r3, r7, #4
 800327e:	4619      	mov	r1, r3
 8003280:	4817      	ldr	r0, [pc, #92]	; (80032e0 <HAL_FMC_MspInit+0x114>)
 8003282:	f001 f8cb 	bl	800441c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003286:	2328      	movs	r3, #40	; 0x28
 8003288:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328a:	2302      	movs	r3, #2
 800328c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003292:	2303      	movs	r3, #3
 8003294:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003296:	230c      	movs	r3, #12
 8003298:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800329a:	1d3b      	adds	r3, r7, #4
 800329c:	4619      	mov	r1, r3
 800329e:	4811      	ldr	r0, [pc, #68]	; (80032e4 <HAL_FMC_MspInit+0x118>)
 80032a0:	f001 f8bc 	bl	800441c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80032a4:	2308      	movs	r3, #8
 80032a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a8:	2302      	movs	r3, #2
 80032aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ac:	2300      	movs	r3, #0
 80032ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b0:	2303      	movs	r3, #3
 80032b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80032b4:	230c      	movs	r3, #12
 80032b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80032b8:	1d3b      	adds	r3, r7, #4
 80032ba:	4619      	mov	r1, r3
 80032bc:	480a      	ldr	r0, [pc, #40]	; (80032e8 <HAL_FMC_MspInit+0x11c>)
 80032be:	f001 f8ad 	bl	800441c <HAL_GPIO_Init>
 80032c2:	e000      	b.n	80032c6 <HAL_FMC_MspInit+0xfa>
    return;
 80032c4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	200007d0 	.word	0x200007d0
 80032d0:	40023800 	.word	0x40023800
 80032d4:	40021000 	.word	0x40021000
 80032d8:	40021800 	.word	0x40021800
 80032dc:	40020c00 	.word	0x40020c00
 80032e0:	40021400 	.word	0x40021400
 80032e4:	40021c00 	.word	0x40021c00
 80032e8:	40020800 	.word	0x40020800

080032ec <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80032f4:	f7ff ff6a 	bl	80031cc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80032f8:	bf00      	nop
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08a      	sub	sp, #40	; 0x28
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a2b      	ldr	r2, [pc, #172]	; (80033bc <HAL_SAI_MspInit+0xbc>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d124      	bne.n	800335c <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003312:	4b2b      	ldr	r3, [pc, #172]	; (80033c0 <HAL_SAI_MspInit+0xc0>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10b      	bne.n	8003332 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800331a:	4b2a      	ldr	r3, [pc, #168]	; (80033c4 <HAL_SAI_MspInit+0xc4>)
 800331c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331e:	4a29      	ldr	r2, [pc, #164]	; (80033c4 <HAL_SAI_MspInit+0xc4>)
 8003320:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003324:	6453      	str	r3, [r2, #68]	; 0x44
 8003326:	4b27      	ldr	r3, [pc, #156]	; (80033c4 <HAL_SAI_MspInit+0xc4>)
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003332:	4b23      	ldr	r3, [pc, #140]	; (80033c0 <HAL_SAI_MspInit+0xc0>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	3301      	adds	r3, #1
 8003338:	4a21      	ldr	r2, [pc, #132]	; (80033c0 <HAL_SAI_MspInit+0xc0>)
 800333a:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800333c:	23f0      	movs	r3, #240	; 0xf0
 800333e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003340:	2302      	movs	r3, #2
 8003342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003344:	2300      	movs	r3, #0
 8003346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003348:	2300      	movs	r3, #0
 800334a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800334c:	230a      	movs	r3, #10
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003350:	f107 0314 	add.w	r3, r7, #20
 8003354:	4619      	mov	r1, r3
 8003356:	481c      	ldr	r0, [pc, #112]	; (80033c8 <HAL_SAI_MspInit+0xc8>)
 8003358:	f001 f860 	bl	800441c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1a      	ldr	r2, [pc, #104]	; (80033cc <HAL_SAI_MspInit+0xcc>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d125      	bne.n	80033b2 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003366:	4b16      	ldr	r3, [pc, #88]	; (80033c0 <HAL_SAI_MspInit+0xc0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10b      	bne.n	8003386 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800336e:	4b15      	ldr	r3, [pc, #84]	; (80033c4 <HAL_SAI_MspInit+0xc4>)
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	4a14      	ldr	r2, [pc, #80]	; (80033c4 <HAL_SAI_MspInit+0xc4>)
 8003374:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003378:	6453      	str	r3, [r2, #68]	; 0x44
 800337a:	4b12      	ldr	r3, [pc, #72]	; (80033c4 <HAL_SAI_MspInit+0xc4>)
 800337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003386:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <HAL_SAI_MspInit+0xc0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	3301      	adds	r3, #1
 800338c:	4a0c      	ldr	r2, [pc, #48]	; (80033c0 <HAL_SAI_MspInit+0xc0>)
 800338e:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003396:	2302      	movs	r3, #2
 8003398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339a:	2300      	movs	r3, #0
 800339c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339e:	2300      	movs	r3, #0
 80033a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80033a2:	230a      	movs	r3, #10
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80033a6:	f107 0314 	add.w	r3, r7, #20
 80033aa:	4619      	mov	r1, r3
 80033ac:	4808      	ldr	r0, [pc, #32]	; (80033d0 <HAL_SAI_MspInit+0xd0>)
 80033ae:	f001 f835 	bl	800441c <HAL_GPIO_Init>

    }
}
 80033b2:	bf00      	nop
 80033b4:	3728      	adds	r7, #40	; 0x28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40015c04 	.word	0x40015c04
 80033c0:	200007d4 	.word	0x200007d4
 80033c4:	40023800 	.word	0x40023800
 80033c8:	40022000 	.word	0x40022000
 80033cc:	40015c24 	.word	0x40015c24
 80033d0:	40021800 	.word	0x40021800

080033d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033d8:	e7fe      	b.n	80033d8 <NMI_Handler+0x4>

080033da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033da:	b480      	push	{r7}
 80033dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033de:	e7fe      	b.n	80033de <HardFault_Handler+0x4>

080033e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033e4:	e7fe      	b.n	80033e4 <MemManage_Handler+0x4>

080033e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033e6:	b480      	push	{r7}
 80033e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033ea:	e7fe      	b.n	80033ea <BusFault_Handler+0x4>

080033ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033f0:	e7fe      	b.n	80033f0 <UsageFault_Handler+0x4>

080033f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033f2:	b480      	push	{r7}
 80033f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033f6:	bf00      	nop
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003404:	bf00      	nop
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800340e:	b480      	push	{r7}
 8003410:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003412:	bf00      	nop
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003420:	f000 f8ce 	bl	80035c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003424:	bf00      	nop
 8003426:	bd80      	pop	{r7, pc}

08003428 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800342c:	4802      	ldr	r0, [pc, #8]	; (8003438 <OTG_FS_IRQHandler+0x10>)
 800342e:	f001 fbb9 	bl	8004ba4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003432:	bf00      	nop
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20001408 	.word	0x20001408

0800343c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003440:	4802      	ldr	r0, [pc, #8]	; (800344c <LTDC_IRQHandler+0x10>)
 8003442:	f003 f87f 	bl	8006544 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003446:	bf00      	nop
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000bd8 	.word	0x20000bd8

08003450 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003454:	4802      	ldr	r0, [pc, #8]	; (8003460 <DMA2D_IRQHandler+0x10>)
 8003456:	f000 fe3f 	bl	80040d8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800345a:	bf00      	nop
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000e8c 	.word	0x20000e8c

08003464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800346c:	4a14      	ldr	r2, [pc, #80]	; (80034c0 <_sbrk+0x5c>)
 800346e:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <_sbrk+0x60>)
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003478:	4b13      	ldr	r3, [pc, #76]	; (80034c8 <_sbrk+0x64>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d102      	bne.n	8003486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003480:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <_sbrk+0x64>)
 8003482:	4a12      	ldr	r2, [pc, #72]	; (80034cc <_sbrk+0x68>)
 8003484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <_sbrk+0x64>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4413      	add	r3, r2
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	429a      	cmp	r2, r3
 8003492:	d207      	bcs.n	80034a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003494:	f00a ff8a 	bl	800e3ac <__errno>
 8003498:	4603      	mov	r3, r0
 800349a:	220c      	movs	r2, #12
 800349c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800349e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034a2:	e009      	b.n	80034b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034a4:	4b08      	ldr	r3, [pc, #32]	; (80034c8 <_sbrk+0x64>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034aa:	4b07      	ldr	r3, [pc, #28]	; (80034c8 <_sbrk+0x64>)
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	4a05      	ldr	r2, [pc, #20]	; (80034c8 <_sbrk+0x64>)
 80034b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034b6:	68fb      	ldr	r3, [r7, #12]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20050000 	.word	0x20050000
 80034c4:	00000800 	.word	0x00000800
 80034c8:	200007d8 	.word	0x200007d8
 80034cc:	20001720 	.word	0x20001720

080034d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034d4:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <SystemInit+0x20>)
 80034d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034da:	4a05      	ldr	r2, [pc, #20]	; (80034f0 <SystemInit+0x20>)
 80034dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	e000ed00 	.word	0xe000ed00

080034f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80034f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800352c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034f8:	480d      	ldr	r0, [pc, #52]	; (8003530 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80034fa:	490e      	ldr	r1, [pc, #56]	; (8003534 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80034fc:	4a0e      	ldr	r2, [pc, #56]	; (8003538 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003500:	e002      	b.n	8003508 <LoopCopyDataInit>

08003502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003506:	3304      	adds	r3, #4

08003508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800350a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800350c:	d3f9      	bcc.n	8003502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800350e:	4a0b      	ldr	r2, [pc, #44]	; (800353c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003510:	4c0b      	ldr	r4, [pc, #44]	; (8003540 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003514:	e001      	b.n	800351a <LoopFillZerobss>

08003516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003518:	3204      	adds	r2, #4

0800351a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800351a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800351c:	d3fb      	bcc.n	8003516 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800351e:	f7ff ffd7 	bl	80034d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003522:	f00a ff49 	bl	800e3b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003526:	f7fd fd97 	bl	8001058 <main>
  bx  lr    
 800352a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800352c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003534:	200007b4 	.word	0x200007b4
  ldr r2, =_sidata
 8003538:	08011bd4 	.word	0x08011bd4
  ldr r2, =_sbss
 800353c:	200007b4 	.word	0x200007b4
  ldr r4, =_ebss
 8003540:	2000171c 	.word	0x2000171c

08003544 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003544:	e7fe      	b.n	8003544 <ADC_IRQHandler>

08003546 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800354a:	2003      	movs	r0, #3
 800354c:	f000 fbd4 	bl	8003cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003550:	200f      	movs	r0, #15
 8003552:	f000 f805 	bl	8003560 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003556:	f7ff f89b 	bl	8002690 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003568:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <HAL_InitTick+0x54>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	4b12      	ldr	r3, [pc, #72]	; (80035b8 <HAL_InitTick+0x58>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	4619      	mov	r1, r3
 8003572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003576:	fbb3 f3f1 	udiv	r3, r3, r1
 800357a:	fbb2 f3f3 	udiv	r3, r2, r3
 800357e:	4618      	mov	r0, r3
 8003580:	f000 fbef 	bl	8003d62 <HAL_SYSTICK_Config>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e00e      	b.n	80035ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b0f      	cmp	r3, #15
 8003592:	d80a      	bhi.n	80035aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003594:	2200      	movs	r2, #0
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800359c:	f000 fbb7 	bl	8003d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035a0:	4a06      	ldr	r2, [pc, #24]	; (80035bc <HAL_InitTick+0x5c>)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	e000      	b.n	80035ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	20000000 	.word	0x20000000
 80035b8:	20000008 	.word	0x20000008
 80035bc:	20000004 	.word	0x20000004

080035c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035c4:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <HAL_IncTick+0x20>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	461a      	mov	r2, r3
 80035ca:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <HAL_IncTick+0x24>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4413      	add	r3, r2
 80035d0:	4a04      	ldr	r2, [pc, #16]	; (80035e4 <HAL_IncTick+0x24>)
 80035d2:	6013      	str	r3, [r2, #0]
}
 80035d4:	bf00      	nop
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	20000008 	.word	0x20000008
 80035e4:	2000102c 	.word	0x2000102c

080035e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  return uwTick;
 80035ec:	4b03      	ldr	r3, [pc, #12]	; (80035fc <HAL_GetTick+0x14>)
 80035ee:	681b      	ldr	r3, [r3, #0]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	2000102c 	.word	0x2000102c

08003600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003608:	f7ff ffee 	bl	80035e8 <HAL_GetTick>
 800360c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003618:	d005      	beq.n	8003626 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800361a:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <HAL_Delay+0x44>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4413      	add	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003626:	bf00      	nop
 8003628:	f7ff ffde 	bl	80035e8 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	429a      	cmp	r2, r3
 8003636:	d8f7      	bhi.n	8003628 <HAL_Delay+0x28>
  {
  }
}
 8003638:	bf00      	nop
 800363a:	bf00      	nop
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	20000008 	.word	0x20000008

08003648 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e031      	b.n	80036c2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	2b00      	cmp	r3, #0
 8003664:	d109      	bne.n	800367a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff f836 	bl	80026d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f003 0310 	and.w	r3, r3, #16
 8003682:	2b00      	cmp	r3, #0
 8003684:	d116      	bne.n	80036b4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800368a:	4b10      	ldr	r3, [pc, #64]	; (80036cc <HAL_ADC_Init+0x84>)
 800368c:	4013      	ands	r3, r2
 800368e:	f043 0202 	orr.w	r2, r3, #2
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f964 	bl	8003964 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f023 0303 	bic.w	r3, r3, #3
 80036aa:	f043 0201 	orr.w	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	641a      	str	r2, [r3, #64]	; 0x40
 80036b2:	e001      	b.n	80036b8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	ffffeefd 	.word	0xffffeefd

080036d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x1c>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e12a      	b.n	8003942 <HAL_ADC_ConfigChannel+0x272>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b09      	cmp	r3, #9
 80036fa:	d93a      	bls.n	8003772 <HAL_ADC_ConfigChannel+0xa2>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003704:	d035      	beq.n	8003772 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68d9      	ldr	r1, [r3, #12]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	b29b      	uxth	r3, r3
 8003712:	461a      	mov	r2, r3
 8003714:	4613      	mov	r3, r2
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	4413      	add	r3, r2
 800371a:	3b1e      	subs	r3, #30
 800371c:	2207      	movs	r2, #7
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	43da      	mvns	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	400a      	ands	r2, r1
 800372a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a87      	ldr	r2, [pc, #540]	; (8003950 <HAL_ADC_ConfigChannel+0x280>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d10a      	bne.n	800374c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68d9      	ldr	r1, [r3, #12]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	061a      	lsls	r2, r3, #24
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800374a:	e035      	b.n	80037b8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68d9      	ldr	r1, [r3, #12]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	b29b      	uxth	r3, r3
 800375c:	4618      	mov	r0, r3
 800375e:	4603      	mov	r3, r0
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	4403      	add	r3, r0
 8003764:	3b1e      	subs	r3, #30
 8003766:	409a      	lsls	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003770:	e022      	b.n	80037b8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6919      	ldr	r1, [r3, #16]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	b29b      	uxth	r3, r3
 800377e:	461a      	mov	r2, r3
 8003780:	4613      	mov	r3, r2
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4413      	add	r3, r2
 8003786:	2207      	movs	r2, #7
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	43da      	mvns	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	400a      	ands	r2, r1
 8003794:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6919      	ldr	r1, [r3, #16]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	4618      	mov	r0, r3
 80037a8:	4603      	mov	r3, r0
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	4403      	add	r3, r0
 80037ae:	409a      	lsls	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b06      	cmp	r3, #6
 80037be:	d824      	bhi.n	800380a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	3b05      	subs	r3, #5
 80037d2:	221f      	movs	r2, #31
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	43da      	mvns	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	400a      	ands	r2, r1
 80037e0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	4618      	mov	r0, r3
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	3b05      	subs	r3, #5
 80037fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	635a      	str	r2, [r3, #52]	; 0x34
 8003808:	e04c      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b0c      	cmp	r3, #12
 8003810:	d824      	bhi.n	800385c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	3b23      	subs	r3, #35	; 0x23
 8003824:	221f      	movs	r2, #31
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	43da      	mvns	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	400a      	ands	r2, r1
 8003832:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	b29b      	uxth	r3, r3
 8003840:	4618      	mov	r0, r3
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	3b23      	subs	r3, #35	; 0x23
 800384e:	fa00 f203 	lsl.w	r2, r0, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	631a      	str	r2, [r3, #48]	; 0x30
 800385a:	e023      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	3b41      	subs	r3, #65	; 0x41
 800386e:	221f      	movs	r2, #31
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	43da      	mvns	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	400a      	ands	r2, r1
 800387c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	b29b      	uxth	r3, r3
 800388a:	4618      	mov	r0, r3
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	4613      	mov	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	3b41      	subs	r3, #65	; 0x41
 8003898:	fa00 f203 	lsl.w	r2, r0, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a2a      	ldr	r2, [pc, #168]	; (8003954 <HAL_ADC_ConfigChannel+0x284>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d10a      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x1f4>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038b6:	d105      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80038b8:	4b27      	ldr	r3, [pc, #156]	; (8003958 <HAL_ADC_ConfigChannel+0x288>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	4a26      	ldr	r2, [pc, #152]	; (8003958 <HAL_ADC_ConfigChannel+0x288>)
 80038be:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80038c2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a22      	ldr	r2, [pc, #136]	; (8003954 <HAL_ADC_ConfigChannel+0x284>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d109      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x212>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b12      	cmp	r3, #18
 80038d4:	d105      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80038d6:	4b20      	ldr	r3, [pc, #128]	; (8003958 <HAL_ADC_ConfigChannel+0x288>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	4a1f      	ldr	r2, [pc, #124]	; (8003958 <HAL_ADC_ConfigChannel+0x288>)
 80038dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038e0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a1b      	ldr	r2, [pc, #108]	; (8003954 <HAL_ADC_ConfigChannel+0x284>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d125      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x268>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a17      	ldr	r2, [pc, #92]	; (8003950 <HAL_ADC_ConfigChannel+0x280>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d003      	beq.n	80038fe <HAL_ADC_ConfigChannel+0x22e>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b11      	cmp	r3, #17
 80038fc:	d11c      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80038fe:	4b16      	ldr	r3, [pc, #88]	; (8003958 <HAL_ADC_ConfigChannel+0x288>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	4a15      	ldr	r2, [pc, #84]	; (8003958 <HAL_ADC_ConfigChannel+0x288>)
 8003904:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003908:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a10      	ldr	r2, [pc, #64]	; (8003950 <HAL_ADC_ConfigChannel+0x280>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d111      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003914:	4b11      	ldr	r3, [pc, #68]	; (800395c <HAL_ADC_ConfigChannel+0x28c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a11      	ldr	r2, [pc, #68]	; (8003960 <HAL_ADC_ConfigChannel+0x290>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	0c9a      	lsrs	r2, r3, #18
 8003920:	4613      	mov	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800392a:	e002      	b.n	8003932 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	3b01      	subs	r3, #1
 8003930:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1f9      	bne.n	800392c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	10000012 	.word	0x10000012
 8003954:	40012000 	.word	0x40012000
 8003958:	40012300 	.word	0x40012300
 800395c:	20000000 	.word	0x20000000
 8003960:	431bde83 	.word	0x431bde83

08003964 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800396c:	4b78      	ldr	r3, [pc, #480]	; (8003b50 <ADC_Init+0x1ec>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	4a77      	ldr	r2, [pc, #476]	; (8003b50 <ADC_Init+0x1ec>)
 8003972:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003976:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003978:	4b75      	ldr	r3, [pc, #468]	; (8003b50 <ADC_Init+0x1ec>)
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	4973      	ldr	r1, [pc, #460]	; (8003b50 <ADC_Init+0x1ec>)
 8003982:	4313      	orrs	r3, r2
 8003984:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003994:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6859      	ldr	r1, [r3, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	021a      	lsls	r2, r3, #8
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80039b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6859      	ldr	r1, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6899      	ldr	r1, [r3, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f2:	4a58      	ldr	r2, [pc, #352]	; (8003b54 <ADC_Init+0x1f0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d022      	beq.n	8003a3e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6899      	ldr	r1, [r3, #8]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6899      	ldr	r1, [r3, #8]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	609a      	str	r2, [r3, #8]
 8003a3c:	e00f      	b.n	8003a5e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a5c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0202 	bic.w	r2, r2, #2
 8003a6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6899      	ldr	r1, [r3, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	005a      	lsls	r2, r3, #1
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d01b      	beq.n	8003ac4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a9a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003aaa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6859      	ldr	r1, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	035a      	lsls	r2, r3, #13
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	605a      	str	r2, [r3, #4]
 8003ac2:	e007      	b.n	8003ad4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ad2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	051a      	lsls	r2, r3, #20
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6899      	ldr	r1, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b16:	025a      	lsls	r2, r3, #9
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689a      	ldr	r2, [r3, #8]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6899      	ldr	r1, [r3, #8]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	029a      	lsls	r2, r3, #10
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	609a      	str	r2, [r3, #8]
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	40012300 	.word	0x40012300
 8003b54:	0f000001 	.word	0x0f000001

08003b58 <__NVIC_SetPriorityGrouping>:
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b68:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <__NVIC_SetPriorityGrouping+0x40>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b74:	4013      	ands	r3, r2
 8003b76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b80:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <__NVIC_SetPriorityGrouping+0x44>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b86:	4a04      	ldr	r2, [pc, #16]	; (8003b98 <__NVIC_SetPriorityGrouping+0x40>)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	60d3      	str	r3, [r2, #12]
}
 8003b8c:	bf00      	nop
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	e000ed00 	.word	0xe000ed00
 8003b9c:	05fa0000 	.word	0x05fa0000

08003ba0 <__NVIC_GetPriorityGrouping>:
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ba4:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	0a1b      	lsrs	r3, r3, #8
 8003baa:	f003 0307 	and.w	r3, r3, #7
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	e000ed00 	.word	0xe000ed00

08003bbc <__NVIC_EnableIRQ>:
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	db0b      	blt.n	8003be6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	f003 021f 	and.w	r2, r3, #31
 8003bd4:	4907      	ldr	r1, [pc, #28]	; (8003bf4 <__NVIC_EnableIRQ+0x38>)
 8003bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	2001      	movs	r0, #1
 8003bde:	fa00 f202 	lsl.w	r2, r0, r2
 8003be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	e000e100 	.word	0xe000e100

08003bf8 <__NVIC_SetPriority>:
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	6039      	str	r1, [r7, #0]
 8003c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	db0a      	blt.n	8003c22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	490c      	ldr	r1, [pc, #48]	; (8003c44 <__NVIC_SetPriority+0x4c>)
 8003c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c16:	0112      	lsls	r2, r2, #4
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003c20:	e00a      	b.n	8003c38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	4908      	ldr	r1, [pc, #32]	; (8003c48 <__NVIC_SetPriority+0x50>)
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	3b04      	subs	r3, #4
 8003c30:	0112      	lsls	r2, r2, #4
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	440b      	add	r3, r1
 8003c36:	761a      	strb	r2, [r3, #24]
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	e000e100 	.word	0xe000e100
 8003c48:	e000ed00 	.word	0xe000ed00

08003c4c <NVIC_EncodePriority>:
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b089      	sub	sp, #36	; 0x24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f1c3 0307 	rsb	r3, r3, #7
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	bf28      	it	cs
 8003c6a:	2304      	movcs	r3, #4
 8003c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	3304      	adds	r3, #4
 8003c72:	2b06      	cmp	r3, #6
 8003c74:	d902      	bls.n	8003c7c <NVIC_EncodePriority+0x30>
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	3b03      	subs	r3, #3
 8003c7a:	e000      	b.n	8003c7e <NVIC_EncodePriority+0x32>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	43da      	mvns	r2, r3
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	401a      	ands	r2, r3
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9e:	43d9      	mvns	r1, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ca4:	4313      	orrs	r3, r2
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3724      	adds	r7, #36	; 0x24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
	...

08003cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cc4:	d301      	bcc.n	8003cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e00f      	b.n	8003cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cca:	4a0a      	ldr	r2, [pc, #40]	; (8003cf4 <SysTick_Config+0x40>)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cd2:	210f      	movs	r1, #15
 8003cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cd8:	f7ff ff8e 	bl	8003bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cdc:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <SysTick_Config+0x40>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ce2:	4b04      	ldr	r3, [pc, #16]	; (8003cf4 <SysTick_Config+0x40>)
 8003ce4:	2207      	movs	r2, #7
 8003ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	e000e010 	.word	0xe000e010

08003cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff ff29 	bl	8003b58 <__NVIC_SetPriorityGrouping>
}
 8003d06:	bf00      	nop
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b086      	sub	sp, #24
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	4603      	mov	r3, r0
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	607a      	str	r2, [r7, #4]
 8003d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d20:	f7ff ff3e 	bl	8003ba0 <__NVIC_GetPriorityGrouping>
 8003d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	6978      	ldr	r0, [r7, #20]
 8003d2c:	f7ff ff8e 	bl	8003c4c <NVIC_EncodePriority>
 8003d30:	4602      	mov	r2, r0
 8003d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d36:	4611      	mov	r1, r2
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff ff5d 	bl	8003bf8 <__NVIC_SetPriority>
}
 8003d3e:	bf00      	nop
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff ff31 	bl	8003bbc <__NVIC_EnableIRQ>
}
 8003d5a:	bf00      	nop
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff ffa2 	bl	8003cb4 <SysTick_Config>
 8003d70:	4603      	mov	r3, r0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
	...

08003d7c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e054      	b.n	8003e38 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	7f5b      	ldrb	r3, [r3, #29]
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d105      	bne.n	8003da4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7fe fcf4 	bl	800278c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	791b      	ldrb	r3, [r3, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10c      	bne.n	8003dcc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a22      	ldr	r2, [pc, #136]	; (8003e40 <HAL_CRC_Init+0xc4>)
 8003db8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0218 	bic.w	r2, r2, #24
 8003dc8:	609a      	str	r2, [r3, #8]
 8003dca:	e00c      	b.n	8003de6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6899      	ldr	r1, [r3, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f834 	bl	8003e44 <HAL_CRCEx_Polynomial_Set>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e028      	b.n	8003e38 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	795b      	ldrb	r3, [r3, #5]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d105      	bne.n	8003dfa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003df6:	611a      	str	r2, [r3, #16]
 8003df8:	e004      	b.n	8003e04 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6912      	ldr	r2, [r2, #16]
 8003e02:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695a      	ldr	r2, [r3, #20]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	699a      	ldr	r2, [r3, #24]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	04c11db7 	.word	0x04c11db7

08003e44 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e50:	2300      	movs	r3, #0
 8003e52:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003e54:	231f      	movs	r3, #31
 8003e56:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003e58:	bf00      	nop
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1e5a      	subs	r2, r3, #1
 8003e5e:	613a      	str	r2, [r7, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d009      	beq.n	8003e78 <HAL_CRCEx_Polynomial_Set+0x34>
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	f003 031f 	and.w	r3, r3, #31
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0f0      	beq.n	8003e5a <HAL_CRCEx_Polynomial_Set+0x16>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b18      	cmp	r3, #24
 8003e7c:	d846      	bhi.n	8003f0c <HAL_CRCEx_Polynomial_Set+0xc8>
 8003e7e:	a201      	add	r2, pc, #4	; (adr r2, 8003e84 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e84:	08003f13 	.word	0x08003f13
 8003e88:	08003f0d 	.word	0x08003f0d
 8003e8c:	08003f0d 	.word	0x08003f0d
 8003e90:	08003f0d 	.word	0x08003f0d
 8003e94:	08003f0d 	.word	0x08003f0d
 8003e98:	08003f0d 	.word	0x08003f0d
 8003e9c:	08003f0d 	.word	0x08003f0d
 8003ea0:	08003f0d 	.word	0x08003f0d
 8003ea4:	08003f01 	.word	0x08003f01
 8003ea8:	08003f0d 	.word	0x08003f0d
 8003eac:	08003f0d 	.word	0x08003f0d
 8003eb0:	08003f0d 	.word	0x08003f0d
 8003eb4:	08003f0d 	.word	0x08003f0d
 8003eb8:	08003f0d 	.word	0x08003f0d
 8003ebc:	08003f0d 	.word	0x08003f0d
 8003ec0:	08003f0d 	.word	0x08003f0d
 8003ec4:	08003ef5 	.word	0x08003ef5
 8003ec8:	08003f0d 	.word	0x08003f0d
 8003ecc:	08003f0d 	.word	0x08003f0d
 8003ed0:	08003f0d 	.word	0x08003f0d
 8003ed4:	08003f0d 	.word	0x08003f0d
 8003ed8:	08003f0d 	.word	0x08003f0d
 8003edc:	08003f0d 	.word	0x08003f0d
 8003ee0:	08003f0d 	.word	0x08003f0d
 8003ee4:	08003ee9 	.word	0x08003ee9
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	2b06      	cmp	r3, #6
 8003eec:	d913      	bls.n	8003f16 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003ef2:	e010      	b.n	8003f16 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	2b07      	cmp	r3, #7
 8003ef8:	d90f      	bls.n	8003f1a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003efe:	e00c      	b.n	8003f1a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	2b0f      	cmp	r3, #15
 8003f04:	d90b      	bls.n	8003f1e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003f0a:	e008      	b.n	8003f1e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f10:	e006      	b.n	8003f20 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003f12:	bf00      	nop
 8003f14:	e004      	b.n	8003f20 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003f16:	bf00      	nop
 8003f18:	e002      	b.n	8003f20 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003f1a:	bf00      	nop
 8003f1c:	e000      	b.n	8003f20 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003f1e:	bf00      	nop
  }
  if (status == HAL_OK)
 8003f20:	7dfb      	ldrb	r3, [r7, #23]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10d      	bne.n	8003f42 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f023 0118 	bic.w	r1, r3, #24
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	371c      	adds	r7, #28
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e069      	b.n	8004036 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d102      	bne.n	8003f74 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7fe fc2c 	bl	80027cc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6819      	ldr	r1, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	4b2a      	ldr	r3, [pc, #168]	; (8004040 <HAL_DCMI_Init+0xf0>)
 8003f96:	400b      	ands	r3, r1
 8003f98:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6819      	ldr	r1, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003fae:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003fba:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003fc6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003fd2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003fde:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	2b10      	cmp	r3, #16
 8003fee:	d112      	bne.n	8004016 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	7f1b      	ldrb	r3, [r3, #28]
 8003ff4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	7f5b      	ldrb	r3, [r3, #29]
 8003ffa:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003ffc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	7f9b      	ldrb	r3, [r3, #30]
 8004002:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004004:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	7fdb      	ldrb	r3, [r3, #31]
 800400c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004012:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004014:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f042 021e 	orr.w	r2, r2, #30
 8004024:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	ffe0f007 	.word	0xffe0f007

08004044 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e039      	b.n	80040ca <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d106      	bne.n	8004070 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fe fc6c 	bl	8002948 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004094:	f023 0107 	bic.w	r1, r3, #7
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040aa:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <HAL_DMA2D_Init+0x90>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	68d1      	ldr	r1, [r2, #12]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6812      	ldr	r2, [r2, #0]
 80040b6:	430b      	orrs	r3, r1
 80040b8:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	ffffc000 	.word	0xffffc000

080040d8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d026      	beq.n	8004148 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004100:	2b00      	cmp	r3, #0
 8004102:	d021      	beq.n	8004148 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004112:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004118:	f043 0201 	orr.w	r2, r3, #1
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2201      	movs	r2, #1
 8004126:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2204      	movs	r2, #4
 800412c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b00      	cmp	r3, #0
 8004150:	d026      	beq.n	80041a0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d021      	beq.n	80041a0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800416a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2220      	movs	r2, #32
 8004172:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004178:	f043 0202 	orr.w	r2, r3, #2
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2204      	movs	r2, #4
 8004184:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d026      	beq.n	80041f8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d021      	beq.n	80041f8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041c2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2208      	movs	r2, #8
 80041ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d0:	f043 0204 	orr.w	r2, r3, #4
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2204      	movs	r2, #4
 80041dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d013      	beq.n	800422a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00e      	beq.n	800422a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800421a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2204      	movs	r2, #4
 8004222:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f853 	bl	80042d0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d024      	beq.n	800427e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800423a:	2b00      	cmp	r3, #0
 800423c:	d01f      	beq.n	800427e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800424c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2202      	movs	r2, #2
 8004254:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2b00      	cmp	r3, #0
 8004286:	d01f      	beq.n	80042c8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d01a      	beq.n	80042c8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042a0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2210      	movs	r2, #16
 80042a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f80e 	bl	80042e4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80042c8:	bf00      	nop
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004310:	2b01      	cmp	r3, #1
 8004312:	d101      	bne.n	8004318 <HAL_DMA2D_ConfigLayer+0x20>
 8004314:	2302      	movs	r3, #2
 8004316:	e079      	b.n	800440c <HAL_DMA2D_ConfigLayer+0x114>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	3318      	adds	r3, #24
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	4413      	add	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	041b      	lsls	r3, r3, #16
 800433e:	4313      	orrs	r3, r2
 8004340:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004342:	4b35      	ldr	r3, [pc, #212]	; (8004418 <HAL_DMA2D_ConfigLayer+0x120>)
 8004344:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b0a      	cmp	r3, #10
 800434c:	d003      	beq.n	8004356 <HAL_DMA2D_ConfigLayer+0x5e>
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b09      	cmp	r3, #9
 8004354:	d107      	bne.n	8004366 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	4313      	orrs	r3, r2
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	e005      	b.n	8004372 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	061b      	lsls	r3, r3, #24
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d120      	bne.n	80043ba <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	43db      	mvns	r3, r3
 8004382:	ea02 0103 	and.w	r1, r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	430a      	orrs	r2, r1
 800438e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	6812      	ldr	r2, [r2, #0]
 8004398:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b0a      	cmp	r3, #10
 80043a0:	d003      	beq.n	80043aa <HAL_DMA2D_ConfigLayer+0xb2>
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b09      	cmp	r3, #9
 80043a8:	d127      	bne.n	80043fa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80043b6:	629a      	str	r2, [r3, #40]	; 0x28
 80043b8:	e01f      	b.n	80043fa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69da      	ldr	r2, [r3, #28]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	43db      	mvns	r3, r3
 80043c4:	ea02 0103 	and.w	r1, r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	6812      	ldr	r2, [r2, #0]
 80043da:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b0a      	cmp	r3, #10
 80043e2:	d003      	beq.n	80043ec <HAL_DMA2D_ConfigLayer+0xf4>
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b09      	cmp	r3, #9
 80043ea:	d106      	bne.n	80043fa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80043f8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	371c      	adds	r7, #28
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	ff03000f 	.word	0xff03000f

0800441c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800441c:	b480      	push	{r7}
 800441e:	b089      	sub	sp, #36	; 0x24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004426:	2300      	movs	r3, #0
 8004428:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800442e:	2300      	movs	r3, #0
 8004430:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004432:	2300      	movs	r3, #0
 8004434:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004436:	2300      	movs	r3, #0
 8004438:	61fb      	str	r3, [r7, #28]
 800443a:	e175      	b.n	8004728 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800443c:	2201      	movs	r2, #1
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4013      	ands	r3, r2
 800444e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	429a      	cmp	r2, r3
 8004456:	f040 8164 	bne.w	8004722 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d00b      	beq.n	800447a <HAL_GPIO_Init+0x5e>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b02      	cmp	r3, #2
 8004468:	d007      	beq.n	800447a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800446e:	2b11      	cmp	r3, #17
 8004470:	d003      	beq.n	800447a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b12      	cmp	r3, #18
 8004478:	d130      	bne.n	80044dc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	2203      	movs	r2, #3
 8004486:	fa02 f303 	lsl.w	r3, r2, r3
 800448a:	43db      	mvns	r3, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4013      	ands	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044b0:	2201      	movs	r2, #1
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	43db      	mvns	r3, r3
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	4013      	ands	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	091b      	lsrs	r3, r3, #4
 80044c6:	f003 0201 	and.w	r2, r3, #1
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	2203      	movs	r2, #3
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	43db      	mvns	r3, r3
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	4013      	ands	r3, r2
 80044f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	4313      	orrs	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b02      	cmp	r3, #2
 8004512:	d003      	beq.n	800451c <HAL_GPIO_Init+0x100>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b12      	cmp	r3, #18
 800451a:	d123      	bne.n	8004564 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	08da      	lsrs	r2, r3, #3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3208      	adds	r2, #8
 8004524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	220f      	movs	r2, #15
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	43db      	mvns	r3, r3
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	4013      	ands	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	f003 0307 	and.w	r3, r3, #7
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	4313      	orrs	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	08da      	lsrs	r2, r3, #3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	3208      	adds	r2, #8
 800455e:	69b9      	ldr	r1, [r7, #24]
 8004560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	2203      	movs	r2, #3
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	4013      	ands	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f003 0203 	and.w	r2, r3, #3
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	4313      	orrs	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 80be 	beq.w	8004722 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045a6:	4b66      	ldr	r3, [pc, #408]	; (8004740 <HAL_GPIO_Init+0x324>)
 80045a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045aa:	4a65      	ldr	r2, [pc, #404]	; (8004740 <HAL_GPIO_Init+0x324>)
 80045ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045b0:	6453      	str	r3, [r2, #68]	; 0x44
 80045b2:	4b63      	ldr	r3, [pc, #396]	; (8004740 <HAL_GPIO_Init+0x324>)
 80045b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80045be:	4a61      	ldr	r2, [pc, #388]	; (8004744 <HAL_GPIO_Init+0x328>)
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	089b      	lsrs	r3, r3, #2
 80045c4:	3302      	adds	r3, #2
 80045c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	f003 0303 	and.w	r3, r3, #3
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	220f      	movs	r2, #15
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	43db      	mvns	r3, r3
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	4013      	ands	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a58      	ldr	r2, [pc, #352]	; (8004748 <HAL_GPIO_Init+0x32c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d037      	beq.n	800465a <HAL_GPIO_Init+0x23e>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a57      	ldr	r2, [pc, #348]	; (800474c <HAL_GPIO_Init+0x330>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d031      	beq.n	8004656 <HAL_GPIO_Init+0x23a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a56      	ldr	r2, [pc, #344]	; (8004750 <HAL_GPIO_Init+0x334>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d02b      	beq.n	8004652 <HAL_GPIO_Init+0x236>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a55      	ldr	r2, [pc, #340]	; (8004754 <HAL_GPIO_Init+0x338>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d025      	beq.n	800464e <HAL_GPIO_Init+0x232>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a54      	ldr	r2, [pc, #336]	; (8004758 <HAL_GPIO_Init+0x33c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d01f      	beq.n	800464a <HAL_GPIO_Init+0x22e>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a53      	ldr	r2, [pc, #332]	; (800475c <HAL_GPIO_Init+0x340>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d019      	beq.n	8004646 <HAL_GPIO_Init+0x22a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a52      	ldr	r2, [pc, #328]	; (8004760 <HAL_GPIO_Init+0x344>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d013      	beq.n	8004642 <HAL_GPIO_Init+0x226>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a51      	ldr	r2, [pc, #324]	; (8004764 <HAL_GPIO_Init+0x348>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00d      	beq.n	800463e <HAL_GPIO_Init+0x222>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a50      	ldr	r2, [pc, #320]	; (8004768 <HAL_GPIO_Init+0x34c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d007      	beq.n	800463a <HAL_GPIO_Init+0x21e>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a4f      	ldr	r2, [pc, #316]	; (800476c <HAL_GPIO_Init+0x350>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d101      	bne.n	8004636 <HAL_GPIO_Init+0x21a>
 8004632:	2309      	movs	r3, #9
 8004634:	e012      	b.n	800465c <HAL_GPIO_Init+0x240>
 8004636:	230a      	movs	r3, #10
 8004638:	e010      	b.n	800465c <HAL_GPIO_Init+0x240>
 800463a:	2308      	movs	r3, #8
 800463c:	e00e      	b.n	800465c <HAL_GPIO_Init+0x240>
 800463e:	2307      	movs	r3, #7
 8004640:	e00c      	b.n	800465c <HAL_GPIO_Init+0x240>
 8004642:	2306      	movs	r3, #6
 8004644:	e00a      	b.n	800465c <HAL_GPIO_Init+0x240>
 8004646:	2305      	movs	r3, #5
 8004648:	e008      	b.n	800465c <HAL_GPIO_Init+0x240>
 800464a:	2304      	movs	r3, #4
 800464c:	e006      	b.n	800465c <HAL_GPIO_Init+0x240>
 800464e:	2303      	movs	r3, #3
 8004650:	e004      	b.n	800465c <HAL_GPIO_Init+0x240>
 8004652:	2302      	movs	r3, #2
 8004654:	e002      	b.n	800465c <HAL_GPIO_Init+0x240>
 8004656:	2301      	movs	r3, #1
 8004658:	e000      	b.n	800465c <HAL_GPIO_Init+0x240>
 800465a:	2300      	movs	r3, #0
 800465c:	69fa      	ldr	r2, [r7, #28]
 800465e:	f002 0203 	and.w	r2, r2, #3
 8004662:	0092      	lsls	r2, r2, #2
 8004664:	4093      	lsls	r3, r2
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	4313      	orrs	r3, r2
 800466a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800466c:	4935      	ldr	r1, [pc, #212]	; (8004744 <HAL_GPIO_Init+0x328>)
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	089b      	lsrs	r3, r3, #2
 8004672:	3302      	adds	r3, #2
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800467a:	4b3d      	ldr	r3, [pc, #244]	; (8004770 <HAL_GPIO_Init+0x354>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	43db      	mvns	r3, r3
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	4013      	ands	r3, r2
 8004688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	4313      	orrs	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800469e:	4a34      	ldr	r2, [pc, #208]	; (8004770 <HAL_GPIO_Init+0x354>)
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80046a4:	4b32      	ldr	r3, [pc, #200]	; (8004770 <HAL_GPIO_Init+0x354>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	43db      	mvns	r3, r3
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	4013      	ands	r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046c8:	4a29      	ldr	r2, [pc, #164]	; (8004770 <HAL_GPIO_Init+0x354>)
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046ce:	4b28      	ldr	r3, [pc, #160]	; (8004770 <HAL_GPIO_Init+0x354>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	43db      	mvns	r3, r3
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	4013      	ands	r3, r2
 80046dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046f2:	4a1f      	ldr	r2, [pc, #124]	; (8004770 <HAL_GPIO_Init+0x354>)
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046f8:	4b1d      	ldr	r3, [pc, #116]	; (8004770 <HAL_GPIO_Init+0x354>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	43db      	mvns	r3, r3
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	4013      	ands	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800471c:	4a14      	ldr	r2, [pc, #80]	; (8004770 <HAL_GPIO_Init+0x354>)
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	3301      	adds	r3, #1
 8004726:	61fb      	str	r3, [r7, #28]
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	2b0f      	cmp	r3, #15
 800472c:	f67f ae86 	bls.w	800443c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004730:	bf00      	nop
 8004732:	bf00      	nop
 8004734:	3724      	adds	r7, #36	; 0x24
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	40023800 	.word	0x40023800
 8004744:	40013800 	.word	0x40013800
 8004748:	40020000 	.word	0x40020000
 800474c:	40020400 	.word	0x40020400
 8004750:	40020800 	.word	0x40020800
 8004754:	40020c00 	.word	0x40020c00
 8004758:	40021000 	.word	0x40021000
 800475c:	40021400 	.word	0x40021400
 8004760:	40021800 	.word	0x40021800
 8004764:	40021c00 	.word	0x40021c00
 8004768:	40022000 	.word	0x40022000
 800476c:	40022400 	.word	0x40022400
 8004770:	40013c00 	.word	0x40013c00

08004774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	460b      	mov	r3, r1
 800477e:	807b      	strh	r3, [r7, #2]
 8004780:	4613      	mov	r3, r2
 8004782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004784:	787b      	ldrb	r3, [r7, #1]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800478a:	887a      	ldrh	r2, [r7, #2]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004790:	e003      	b.n	800479a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004792:	887b      	ldrh	r3, [r7, #2]
 8004794:	041a      	lsls	r2, r3, #16
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	619a      	str	r2, [r3, #24]
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b085      	sub	sp, #20
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
 80047ae:	460b      	mov	r3, r1
 80047b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80047b8:	887a      	ldrh	r2, [r7, #2]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4013      	ands	r3, r2
 80047be:	041a      	lsls	r2, r3, #16
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	43d9      	mvns	r1, r3
 80047c4:	887b      	ldrh	r3, [r7, #2]
 80047c6:	400b      	ands	r3, r1
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	619a      	str	r2, [r3, #24]
}
 80047ce:	bf00      	nop
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80047da:	b590      	push	{r4, r7, lr}
 80047dc:	b089      	sub	sp, #36	; 0x24
 80047de:	af04      	add	r7, sp, #16
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	4608      	mov	r0, r1
 80047e4:	4611      	mov	r1, r2
 80047e6:	461a      	mov	r2, r3
 80047e8:	4603      	mov	r3, r0
 80047ea:	70fb      	strb	r3, [r7, #3]
 80047ec:	460b      	mov	r3, r1
 80047ee:	70bb      	strb	r3, [r7, #2]
 80047f0:	4613      	mov	r3, r2
 80047f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d101      	bne.n	8004802 <HAL_HCD_HC_Init+0x28>
 80047fe:	2302      	movs	r3, #2
 8004800:	e076      	b.n	80048f0 <HAL_HCD_HC_Init+0x116>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800480a:	78fb      	ldrb	r3, [r7, #3]
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	212c      	movs	r1, #44	; 0x2c
 8004810:	fb01 f303 	mul.w	r3, r1, r3
 8004814:	4413      	add	r3, r2
 8004816:	333d      	adds	r3, #61	; 0x3d
 8004818:	2200      	movs	r2, #0
 800481a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800481c:	78fb      	ldrb	r3, [r7, #3]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	212c      	movs	r1, #44	; 0x2c
 8004822:	fb01 f303 	mul.w	r3, r1, r3
 8004826:	4413      	add	r3, r2
 8004828:	3338      	adds	r3, #56	; 0x38
 800482a:	787a      	ldrb	r2, [r7, #1]
 800482c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800482e:	78fb      	ldrb	r3, [r7, #3]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	212c      	movs	r1, #44	; 0x2c
 8004834:	fb01 f303 	mul.w	r3, r1, r3
 8004838:	4413      	add	r3, r2
 800483a:	3340      	adds	r3, #64	; 0x40
 800483c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800483e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004840:	78fb      	ldrb	r3, [r7, #3]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	212c      	movs	r1, #44	; 0x2c
 8004846:	fb01 f303 	mul.w	r3, r1, r3
 800484a:	4413      	add	r3, r2
 800484c:	3339      	adds	r3, #57	; 0x39
 800484e:	78fa      	ldrb	r2, [r7, #3]
 8004850:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004852:	78fb      	ldrb	r3, [r7, #3]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	212c      	movs	r1, #44	; 0x2c
 8004858:	fb01 f303 	mul.w	r3, r1, r3
 800485c:	4413      	add	r3, r2
 800485e:	333f      	adds	r3, #63	; 0x3f
 8004860:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004864:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	78ba      	ldrb	r2, [r7, #2]
 800486a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800486e:	b2d0      	uxtb	r0, r2
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	212c      	movs	r1, #44	; 0x2c
 8004874:	fb01 f303 	mul.w	r3, r1, r3
 8004878:	4413      	add	r3, r2
 800487a:	333a      	adds	r3, #58	; 0x3a
 800487c:	4602      	mov	r2, r0
 800487e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004880:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004884:	2b00      	cmp	r3, #0
 8004886:	da09      	bge.n	800489c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004888:	78fb      	ldrb	r3, [r7, #3]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	212c      	movs	r1, #44	; 0x2c
 800488e:	fb01 f303 	mul.w	r3, r1, r3
 8004892:	4413      	add	r3, r2
 8004894:	333b      	adds	r3, #59	; 0x3b
 8004896:	2201      	movs	r2, #1
 8004898:	701a      	strb	r2, [r3, #0]
 800489a:	e008      	b.n	80048ae <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800489c:	78fb      	ldrb	r3, [r7, #3]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	212c      	movs	r1, #44	; 0x2c
 80048a2:	fb01 f303 	mul.w	r3, r1, r3
 80048a6:	4413      	add	r3, r2
 80048a8:	333b      	adds	r3, #59	; 0x3b
 80048aa:	2200      	movs	r2, #0
 80048ac:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80048ae:	78fb      	ldrb	r3, [r7, #3]
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	212c      	movs	r1, #44	; 0x2c
 80048b4:	fb01 f303 	mul.w	r3, r1, r3
 80048b8:	4413      	add	r3, r2
 80048ba:	333c      	adds	r3, #60	; 0x3c
 80048bc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80048c0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6818      	ldr	r0, [r3, #0]
 80048c6:	787c      	ldrb	r4, [r7, #1]
 80048c8:	78ba      	ldrb	r2, [r7, #2]
 80048ca:	78f9      	ldrb	r1, [r7, #3]
 80048cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80048ce:	9302      	str	r3, [sp, #8]
 80048d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80048d4:	9301      	str	r3, [sp, #4]
 80048d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	4623      	mov	r3, r4
 80048de:	f006 f879 	bl	800a9d4 <USB_HC_Init>
 80048e2:	4603      	mov	r3, r0
 80048e4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80048ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd90      	pop	{r4, r7, pc}

080048f8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	4608      	mov	r0, r1
 8004902:	4611      	mov	r1, r2
 8004904:	461a      	mov	r2, r3
 8004906:	4603      	mov	r3, r0
 8004908:	70fb      	strb	r3, [r7, #3]
 800490a:	460b      	mov	r3, r1
 800490c:	70bb      	strb	r3, [r7, #2]
 800490e:	4613      	mov	r3, r2
 8004910:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004912:	78fb      	ldrb	r3, [r7, #3]
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	212c      	movs	r1, #44	; 0x2c
 8004918:	fb01 f303 	mul.w	r3, r1, r3
 800491c:	4413      	add	r3, r2
 800491e:	333b      	adds	r3, #59	; 0x3b
 8004920:	78ba      	ldrb	r2, [r7, #2]
 8004922:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004924:	78fb      	ldrb	r3, [r7, #3]
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	212c      	movs	r1, #44	; 0x2c
 800492a:	fb01 f303 	mul.w	r3, r1, r3
 800492e:	4413      	add	r3, r2
 8004930:	333f      	adds	r3, #63	; 0x3f
 8004932:	787a      	ldrb	r2, [r7, #1]
 8004934:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004936:	7c3b      	ldrb	r3, [r7, #16]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d112      	bne.n	8004962 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800493c:	78fb      	ldrb	r3, [r7, #3]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	212c      	movs	r1, #44	; 0x2c
 8004942:	fb01 f303 	mul.w	r3, r1, r3
 8004946:	4413      	add	r3, r2
 8004948:	3342      	adds	r3, #66	; 0x42
 800494a:	2203      	movs	r2, #3
 800494c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800494e:	78fb      	ldrb	r3, [r7, #3]
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	212c      	movs	r1, #44	; 0x2c
 8004954:	fb01 f303 	mul.w	r3, r1, r3
 8004958:	4413      	add	r3, r2
 800495a:	333d      	adds	r3, #61	; 0x3d
 800495c:	7f3a      	ldrb	r2, [r7, #28]
 800495e:	701a      	strb	r2, [r3, #0]
 8004960:	e008      	b.n	8004974 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	212c      	movs	r1, #44	; 0x2c
 8004968:	fb01 f303 	mul.w	r3, r1, r3
 800496c:	4413      	add	r3, r2
 800496e:	3342      	adds	r3, #66	; 0x42
 8004970:	2202      	movs	r2, #2
 8004972:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004974:	787b      	ldrb	r3, [r7, #1]
 8004976:	2b03      	cmp	r3, #3
 8004978:	f200 80c6 	bhi.w	8004b08 <HAL_HCD_HC_SubmitRequest+0x210>
 800497c:	a201      	add	r2, pc, #4	; (adr r2, 8004984 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800497e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004982:	bf00      	nop
 8004984:	08004995 	.word	0x08004995
 8004988:	08004af5 	.word	0x08004af5
 800498c:	080049f9 	.word	0x080049f9
 8004990:	08004a77 	.word	0x08004a77
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004994:	7c3b      	ldrb	r3, [r7, #16]
 8004996:	2b01      	cmp	r3, #1
 8004998:	f040 80b8 	bne.w	8004b0c <HAL_HCD_HC_SubmitRequest+0x214>
 800499c:	78bb      	ldrb	r3, [r7, #2]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f040 80b4 	bne.w	8004b0c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80049a4:	8b3b      	ldrh	r3, [r7, #24]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d108      	bne.n	80049bc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80049aa:	78fb      	ldrb	r3, [r7, #3]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	212c      	movs	r1, #44	; 0x2c
 80049b0:	fb01 f303 	mul.w	r3, r1, r3
 80049b4:	4413      	add	r3, r2
 80049b6:	3355      	adds	r3, #85	; 0x55
 80049b8:	2201      	movs	r2, #1
 80049ba:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80049bc:	78fb      	ldrb	r3, [r7, #3]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	212c      	movs	r1, #44	; 0x2c
 80049c2:	fb01 f303 	mul.w	r3, r1, r3
 80049c6:	4413      	add	r3, r2
 80049c8:	3355      	adds	r3, #85	; 0x55
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d109      	bne.n	80049e4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80049d0:	78fb      	ldrb	r3, [r7, #3]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	212c      	movs	r1, #44	; 0x2c
 80049d6:	fb01 f303 	mul.w	r3, r1, r3
 80049da:	4413      	add	r3, r2
 80049dc:	3342      	adds	r3, #66	; 0x42
 80049de:	2200      	movs	r2, #0
 80049e0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80049e2:	e093      	b.n	8004b0c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	212c      	movs	r1, #44	; 0x2c
 80049ea:	fb01 f303 	mul.w	r3, r1, r3
 80049ee:	4413      	add	r3, r2
 80049f0:	3342      	adds	r3, #66	; 0x42
 80049f2:	2202      	movs	r2, #2
 80049f4:	701a      	strb	r2, [r3, #0]
      break;
 80049f6:	e089      	b.n	8004b0c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80049f8:	78bb      	ldrb	r3, [r7, #2]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d11d      	bne.n	8004a3a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80049fe:	78fb      	ldrb	r3, [r7, #3]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	212c      	movs	r1, #44	; 0x2c
 8004a04:	fb01 f303 	mul.w	r3, r1, r3
 8004a08:	4413      	add	r3, r2
 8004a0a:	3355      	adds	r3, #85	; 0x55
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d109      	bne.n	8004a26 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a12:	78fb      	ldrb	r3, [r7, #3]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	212c      	movs	r1, #44	; 0x2c
 8004a18:	fb01 f303 	mul.w	r3, r1, r3
 8004a1c:	4413      	add	r3, r2
 8004a1e:	3342      	adds	r3, #66	; 0x42
 8004a20:	2200      	movs	r2, #0
 8004a22:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004a24:	e073      	b.n	8004b0e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004a26:	78fb      	ldrb	r3, [r7, #3]
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	212c      	movs	r1, #44	; 0x2c
 8004a2c:	fb01 f303 	mul.w	r3, r1, r3
 8004a30:	4413      	add	r3, r2
 8004a32:	3342      	adds	r3, #66	; 0x42
 8004a34:	2202      	movs	r2, #2
 8004a36:	701a      	strb	r2, [r3, #0]
      break;
 8004a38:	e069      	b.n	8004b0e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	212c      	movs	r1, #44	; 0x2c
 8004a40:	fb01 f303 	mul.w	r3, r1, r3
 8004a44:	4413      	add	r3, r2
 8004a46:	3354      	adds	r3, #84	; 0x54
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d109      	bne.n	8004a62 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a4e:	78fb      	ldrb	r3, [r7, #3]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	212c      	movs	r1, #44	; 0x2c
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	4413      	add	r3, r2
 8004a5a:	3342      	adds	r3, #66	; 0x42
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	701a      	strb	r2, [r3, #0]
      break;
 8004a60:	e055      	b.n	8004b0e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004a62:	78fb      	ldrb	r3, [r7, #3]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	212c      	movs	r1, #44	; 0x2c
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	3342      	adds	r3, #66	; 0x42
 8004a70:	2202      	movs	r2, #2
 8004a72:	701a      	strb	r2, [r3, #0]
      break;
 8004a74:	e04b      	b.n	8004b0e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004a76:	78bb      	ldrb	r3, [r7, #2]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d11d      	bne.n	8004ab8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004a7c:	78fb      	ldrb	r3, [r7, #3]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	212c      	movs	r1, #44	; 0x2c
 8004a82:	fb01 f303 	mul.w	r3, r1, r3
 8004a86:	4413      	add	r3, r2
 8004a88:	3355      	adds	r3, #85	; 0x55
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d109      	bne.n	8004aa4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a90:	78fb      	ldrb	r3, [r7, #3]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	212c      	movs	r1, #44	; 0x2c
 8004a96:	fb01 f303 	mul.w	r3, r1, r3
 8004a9a:	4413      	add	r3, r2
 8004a9c:	3342      	adds	r3, #66	; 0x42
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004aa2:	e034      	b.n	8004b0e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004aa4:	78fb      	ldrb	r3, [r7, #3]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	212c      	movs	r1, #44	; 0x2c
 8004aaa:	fb01 f303 	mul.w	r3, r1, r3
 8004aae:	4413      	add	r3, r2
 8004ab0:	3342      	adds	r3, #66	; 0x42
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	701a      	strb	r2, [r3, #0]
      break;
 8004ab6:	e02a      	b.n	8004b0e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	212c      	movs	r1, #44	; 0x2c
 8004abe:	fb01 f303 	mul.w	r3, r1, r3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3354      	adds	r3, #84	; 0x54
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d109      	bne.n	8004ae0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004acc:	78fb      	ldrb	r3, [r7, #3]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	212c      	movs	r1, #44	; 0x2c
 8004ad2:	fb01 f303 	mul.w	r3, r1, r3
 8004ad6:	4413      	add	r3, r2
 8004ad8:	3342      	adds	r3, #66	; 0x42
 8004ada:	2200      	movs	r2, #0
 8004adc:	701a      	strb	r2, [r3, #0]
      break;
 8004ade:	e016      	b.n	8004b0e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	212c      	movs	r1, #44	; 0x2c
 8004ae6:	fb01 f303 	mul.w	r3, r1, r3
 8004aea:	4413      	add	r3, r2
 8004aec:	3342      	adds	r3, #66	; 0x42
 8004aee:	2202      	movs	r2, #2
 8004af0:	701a      	strb	r2, [r3, #0]
      break;
 8004af2:	e00c      	b.n	8004b0e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004af4:	78fb      	ldrb	r3, [r7, #3]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	212c      	movs	r1, #44	; 0x2c
 8004afa:	fb01 f303 	mul.w	r3, r1, r3
 8004afe:	4413      	add	r3, r2
 8004b00:	3342      	adds	r3, #66	; 0x42
 8004b02:	2200      	movs	r2, #0
 8004b04:	701a      	strb	r2, [r3, #0]
      break;
 8004b06:	e002      	b.n	8004b0e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004b08:	bf00      	nop
 8004b0a:	e000      	b.n	8004b0e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004b0c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004b0e:	78fb      	ldrb	r3, [r7, #3]
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	212c      	movs	r1, #44	; 0x2c
 8004b14:	fb01 f303 	mul.w	r3, r1, r3
 8004b18:	4413      	add	r3, r2
 8004b1a:	3344      	adds	r3, #68	; 0x44
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004b20:	78fb      	ldrb	r3, [r7, #3]
 8004b22:	8b3a      	ldrh	r2, [r7, #24]
 8004b24:	6879      	ldr	r1, [r7, #4]
 8004b26:	202c      	movs	r0, #44	; 0x2c
 8004b28:	fb00 f303 	mul.w	r3, r0, r3
 8004b2c:	440b      	add	r3, r1
 8004b2e:	334c      	adds	r3, #76	; 0x4c
 8004b30:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004b32:	78fb      	ldrb	r3, [r7, #3]
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	212c      	movs	r1, #44	; 0x2c
 8004b38:	fb01 f303 	mul.w	r3, r1, r3
 8004b3c:	4413      	add	r3, r2
 8004b3e:	3360      	adds	r3, #96	; 0x60
 8004b40:	2200      	movs	r2, #0
 8004b42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004b44:	78fb      	ldrb	r3, [r7, #3]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	212c      	movs	r1, #44	; 0x2c
 8004b4a:	fb01 f303 	mul.w	r3, r1, r3
 8004b4e:	4413      	add	r3, r2
 8004b50:	3350      	adds	r3, #80	; 0x50
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004b56:	78fb      	ldrb	r3, [r7, #3]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	212c      	movs	r1, #44	; 0x2c
 8004b5c:	fb01 f303 	mul.w	r3, r1, r3
 8004b60:	4413      	add	r3, r2
 8004b62:	3339      	adds	r3, #57	; 0x39
 8004b64:	78fa      	ldrb	r2, [r7, #3]
 8004b66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	212c      	movs	r1, #44	; 0x2c
 8004b6e:	fb01 f303 	mul.w	r3, r1, r3
 8004b72:	4413      	add	r3, r2
 8004b74:	3361      	adds	r3, #97	; 0x61
 8004b76:	2200      	movs	r2, #0
 8004b78:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6818      	ldr	r0, [r3, #0]
 8004b7e:	78fb      	ldrb	r3, [r7, #3]
 8004b80:	222c      	movs	r2, #44	; 0x2c
 8004b82:	fb02 f303 	mul.w	r3, r2, r3
 8004b86:	3338      	adds	r3, #56	; 0x38
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	18d1      	adds	r1, r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	461a      	mov	r2, r3
 8004b94:	f006 f82c 	bl	800abf0 <USB_HC_StartXfer>
 8004b98:	4603      	mov	r3, r0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop

08004ba4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f005 fe47 	bl	800a84e <USB_GetMode>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	f040 80ef 	bne.w	8004da6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f005 fe2b 	bl	800a828 <USB_ReadInterrupts>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 80e5 	beq.w	8004da4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f005 fe22 	bl	800a828 <USB_ReadInterrupts>
 8004be4:	4603      	mov	r3, r0
 8004be6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bee:	d104      	bne.n	8004bfa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004bf8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f005 fe12 	bl	800a828 <USB_ReadInterrupts>
 8004c04:	4603      	mov	r3, r0
 8004c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c0e:	d104      	bne.n	8004c1a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f005 fe02 	bl	800a828 <USB_ReadInterrupts>
 8004c24:	4603      	mov	r3, r0
 8004c26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c2e:	d104      	bne.n	8004c3a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004c38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f005 fdf2 	bl	800a828 <USB_ReadInterrupts>
 8004c44:	4603      	mov	r3, r0
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d103      	bne.n	8004c56 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2202      	movs	r2, #2
 8004c54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f005 fde4 	bl	800a828 <USB_ReadInterrupts>
 8004c60:	4603      	mov	r3, r0
 8004c62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c6a:	d115      	bne.n	8004c98 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004c74:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d108      	bne.n	8004c98 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f007 fd18 	bl	800c6bc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2101      	movs	r1, #1
 8004c92:	4618      	mov	r0, r3
 8004c94:	f005 fde9 	bl	800a86a <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f005 fdc3 	bl	800a828 <USB_ReadInterrupts>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cac:	d102      	bne.n	8004cb4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f001 f9dd 	bl	800606e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f005 fdb5 	bl	800a828 <USB_ReadInterrupts>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	f003 0308 	and.w	r3, r3, #8
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d106      	bne.n	8004cd6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f007 fcdb 	bl	800c684 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2208      	movs	r2, #8
 8004cd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f005 fda4 	bl	800a828 <USB_ReadInterrupts>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	f003 0310 	and.w	r3, r3, #16
 8004ce6:	2b10      	cmp	r3, #16
 8004ce8:	d101      	bne.n	8004cee <HAL_HCD_IRQHandler+0x14a>
 8004cea:	2301      	movs	r3, #1
 8004cec:	e000      	b.n	8004cf0 <HAL_HCD_IRQHandler+0x14c>
 8004cee:	2300      	movs	r3, #0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d012      	beq.n	8004d1a <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699a      	ldr	r2, [r3, #24]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 0210 	bic.w	r2, r2, #16
 8004d02:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f001 f8e0 	bl	8005eca <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	699a      	ldr	r2, [r3, #24]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f042 0210 	orr.w	r2, r2, #16
 8004d18:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f005 fd82 	bl	800a828 <USB_ReadInterrupts>
 8004d24:	4603      	mov	r3, r0
 8004d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d2e:	d13a      	bne.n	8004da6 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f006 f89d 	bl	800ae74 <USB_HC_ReadInterrupt>
 8004d3a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	e025      	b.n	8004d8e <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f003 030f 	and.w	r3, r3, #15
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d018      	beq.n	8004d88 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d6c:	d106      	bne.n	8004d7c <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	4619      	mov	r1, r3
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f889 	bl	8004e8c <HCD_HC_IN_IRQHandler>
 8004d7a:	e005      	b.n	8004d88 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	4619      	mov	r1, r3
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fca4 	bl	80056d0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d3d4      	bcc.n	8004d42 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004da0:	615a      	str	r2, [r3, #20]
 8004da2:	e000      	b.n	8004da6 <HAL_HCD_IRQHandler+0x202>
      return;
 8004da4:	bf00      	nop
    }
  }
}
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d101      	bne.n	8004dc2 <HAL_HCD_Start+0x16>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e013      	b.n	8004dea <HAL_HCD_Start+0x3e>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f005 fc62 	bl	800a698 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2101      	movs	r1, #1
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f005 fda9 	bl	800a932 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b082      	sub	sp, #8
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d101      	bne.n	8004e08 <HAL_HCD_Stop+0x16>
 8004e04:	2302      	movs	r3, #2
 8004e06:	e00d      	b.n	8004e24 <HAL_HCD_Stop+0x32>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f006 f997 	bl	800b148 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f005 fd50 	bl	800a8de <USB_ResetPort>
 8004e3e:	4603      	mov	r3, r0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	460b      	mov	r3, r1
 8004e52:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004e54:	78fb      	ldrb	r3, [r7, #3]
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	212c      	movs	r1, #44	; 0x2c
 8004e5a:	fb01 f303 	mul.w	r3, r1, r3
 8004e5e:	4413      	add	r3, r2
 8004e60:	3360      	adds	r3, #96	; 0x60
 8004e62:	781b      	ldrb	r3, [r3, #0]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f005 fd91 	bl	800a9a4 <USB_GetHostSpeed>
 8004e82:	4603      	mov	r3, r0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	460b      	mov	r3, r1
 8004e96:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004ea2:	78fb      	ldrb	r3, [r7, #3]
 8004ea4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	d119      	bne.n	8004ef0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec8:	461a      	mov	r2, r3
 8004eca:	2304      	movs	r3, #4
 8004ecc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	0151      	lsls	r1, r2, #5
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	440a      	add	r2, r1
 8004ee4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ee8:	f043 0302 	orr.w	r3, r3, #2
 8004eec:	60d3      	str	r3, [r2, #12]
 8004eee:	e101      	b.n	80050f4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f06:	d12b      	bne.n	8004f60 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f14:	461a      	mov	r2, r3
 8004f16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	212c      	movs	r1, #44	; 0x2c
 8004f22:	fb01 f303 	mul.w	r3, r1, r3
 8004f26:	4413      	add	r3, r2
 8004f28:	3361      	adds	r3, #97	; 0x61
 8004f2a:	2207      	movs	r2, #7
 8004f2c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	0151      	lsls	r1, r2, #5
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	440a      	add	r2, r1
 8004f44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f48:	f043 0302 	orr.w	r3, r3, #2
 8004f4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	b2d2      	uxtb	r2, r2
 8004f56:	4611      	mov	r1, r2
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f005 ff9c 	bl	800ae96 <USB_HC_Halt>
 8004f5e:	e0c9      	b.n	80050f4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 0320 	and.w	r3, r3, #32
 8004f72:	2b20      	cmp	r3, #32
 8004f74:	d109      	bne.n	8004f8a <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f82:	461a      	mov	r2, r3
 8004f84:	2320      	movs	r3, #32
 8004f86:	6093      	str	r3, [r2, #8]
 8004f88:	e0b4      	b.n	80050f4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d133      	bne.n	8005008 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	0151      	lsls	r1, r2, #5
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	440a      	add	r2, r1
 8004fb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fba:	f043 0302 	orr.w	r3, r3, #2
 8004fbe:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	212c      	movs	r1, #44	; 0x2c
 8004fc6:	fb01 f303 	mul.w	r3, r1, r3
 8004fca:	4413      	add	r3, r2
 8004fcc:	3361      	adds	r3, #97	; 0x61
 8004fce:	2205      	movs	r2, #5
 8004fd0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fde:	461a      	mov	r2, r3
 8004fe0:	2310      	movs	r3, #16
 8004fe2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	2308      	movs	r3, #8
 8004ff4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	b2d2      	uxtb	r2, r2
 8004ffe:	4611      	mov	r1, r2
 8005000:	4618      	mov	r0, r3
 8005002:	f005 ff48 	bl	800ae96 <USB_HC_Halt>
 8005006:	e075      	b.n	80050f4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	4413      	add	r3, r2
 8005010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800501a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800501e:	d134      	bne.n	800508a <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	4413      	add	r3, r2
 8005028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	0151      	lsls	r1, r2, #5
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	440a      	add	r2, r1
 8005036:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800503a:	f043 0302 	orr.w	r3, r3, #2
 800503e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	212c      	movs	r1, #44	; 0x2c
 8005046:	fb01 f303 	mul.w	r3, r1, r3
 800504a:	4413      	add	r3, r2
 800504c:	3361      	adds	r3, #97	; 0x61
 800504e:	2208      	movs	r2, #8
 8005050:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	015a      	lsls	r2, r3, #5
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	4413      	add	r3, r2
 800505a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800505e:	461a      	mov	r2, r3
 8005060:	2310      	movs	r3, #16
 8005062:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	4413      	add	r3, r2
 800506c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005070:	461a      	mov	r2, r3
 8005072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005076:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	4611      	mov	r1, r2
 8005082:	4618      	mov	r0, r3
 8005084:	f005 ff07 	bl	800ae96 <USB_HC_Halt>
 8005088:	e034      	b.n	80050f4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	4413      	add	r3, r2
 8005092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509c:	2b80      	cmp	r3, #128	; 0x80
 800509e:	d129      	bne.n	80050f4 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	0151      	lsls	r1, r2, #5
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	440a      	add	r2, r1
 80050b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050ba:	f043 0302 	orr.w	r3, r3, #2
 80050be:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	212c      	movs	r1, #44	; 0x2c
 80050c6:	fb01 f303 	mul.w	r3, r1, r3
 80050ca:	4413      	add	r3, r2
 80050cc:	3361      	adds	r3, #97	; 0x61
 80050ce:	2206      	movs	r2, #6
 80050d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	4611      	mov	r1, r2
 80050dc:	4618      	mov	r0, r3
 80050de:	f005 feda 	bl	800ae96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ee:	461a      	mov	r2, r3
 80050f0:	2380      	movs	r3, #128	; 0x80
 80050f2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800510a:	d122      	bne.n	8005152 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	4413      	add	r3, r2
 8005114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	0151      	lsls	r1, r2, #5
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	440a      	add	r2, r1
 8005122:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005126:	f043 0302 	orr.w	r3, r3, #2
 800512a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	4611      	mov	r1, r2
 8005136:	4618      	mov	r0, r3
 8005138:	f005 fead 	bl	800ae96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	4413      	add	r3, r2
 8005144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005148:	461a      	mov	r2, r3
 800514a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800514e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005150:	e2ba      	b.n	80056c8 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	4413      	add	r3, r2
 800515a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b01      	cmp	r3, #1
 8005166:	f040 811b 	bne.w	80053a0 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d019      	beq.n	80051a6 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	212c      	movs	r1, #44	; 0x2c
 8005178:	fb01 f303 	mul.w	r3, r1, r3
 800517c:	4413      	add	r3, r2
 800517e:	3348      	adds	r3, #72	; 0x48
 8005180:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	0159      	lsls	r1, r3, #5
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	440b      	add	r3, r1
 800518a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005194:	1ad2      	subs	r2, r2, r3
 8005196:	6879      	ldr	r1, [r7, #4]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	202c      	movs	r0, #44	; 0x2c
 800519c:	fb00 f303 	mul.w	r3, r0, r3
 80051a0:	440b      	add	r3, r1
 80051a2:	3350      	adds	r3, #80	; 0x50
 80051a4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	212c      	movs	r1, #44	; 0x2c
 80051ac:	fb01 f303 	mul.w	r3, r1, r3
 80051b0:	4413      	add	r3, r2
 80051b2:	3361      	adds	r3, #97	; 0x61
 80051b4:	2201      	movs	r2, #1
 80051b6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	212c      	movs	r1, #44	; 0x2c
 80051be:	fb01 f303 	mul.w	r3, r1, r3
 80051c2:	4413      	add	r3, r2
 80051c4:	335c      	adds	r3, #92	; 0x5c
 80051c6:	2200      	movs	r2, #0
 80051c8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d6:	461a      	mov	r2, r3
 80051d8:	2301      	movs	r3, #1
 80051da:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	212c      	movs	r1, #44	; 0x2c
 80051e2:	fb01 f303 	mul.w	r3, r1, r3
 80051e6:	4413      	add	r3, r2
 80051e8:	333f      	adds	r3, #63	; 0x3f
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d009      	beq.n	8005204 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	212c      	movs	r1, #44	; 0x2c
 80051f6:	fb01 f303 	mul.w	r3, r1, r3
 80051fa:	4413      	add	r3, r2
 80051fc:	333f      	adds	r3, #63	; 0x3f
 80051fe:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005200:	2b02      	cmp	r3, #2
 8005202:	d121      	bne.n	8005248 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	4413      	add	r3, r2
 800520c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	0151      	lsls	r1, r2, #5
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	440a      	add	r2, r1
 800521a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800521e:	f043 0302 	orr.w	r3, r3, #2
 8005222:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	4611      	mov	r1, r2
 800522e:	4618      	mov	r0, r3
 8005230:	f005 fe31 	bl	800ae96 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	4413      	add	r3, r2
 800523c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005240:	461a      	mov	r2, r3
 8005242:	2310      	movs	r3, #16
 8005244:	6093      	str	r3, [r2, #8]
 8005246:	e066      	b.n	8005316 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	212c      	movs	r1, #44	; 0x2c
 800524e:	fb01 f303 	mul.w	r3, r1, r3
 8005252:	4413      	add	r3, r2
 8005254:	333f      	adds	r3, #63	; 0x3f
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2b03      	cmp	r3, #3
 800525a:	d127      	bne.n	80052ac <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	4413      	add	r3, r2
 8005264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	0151      	lsls	r1, r2, #5
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	440a      	add	r2, r1
 8005272:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005276:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800527a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	212c      	movs	r1, #44	; 0x2c
 8005282:	fb01 f303 	mul.w	r3, r1, r3
 8005286:	4413      	add	r3, r2
 8005288:	3360      	adds	r3, #96	; 0x60
 800528a:	2201      	movs	r2, #1
 800528c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	b2d9      	uxtb	r1, r3
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	202c      	movs	r0, #44	; 0x2c
 8005298:	fb00 f303 	mul.w	r3, r0, r3
 800529c:	4413      	add	r3, r2
 800529e:	3360      	adds	r3, #96	; 0x60
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	461a      	mov	r2, r3
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f007 fa17 	bl	800c6d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80052aa:	e034      	b.n	8005316 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	212c      	movs	r1, #44	; 0x2c
 80052b2:	fb01 f303 	mul.w	r3, r1, r3
 80052b6:	4413      	add	r3, r2
 80052b8:	333f      	adds	r3, #63	; 0x3f
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d12a      	bne.n	8005316 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	212c      	movs	r1, #44	; 0x2c
 80052c6:	fb01 f303 	mul.w	r3, r1, r3
 80052ca:	4413      	add	r3, r2
 80052cc:	3360      	adds	r3, #96	; 0x60
 80052ce:	2201      	movs	r2, #1
 80052d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	212c      	movs	r1, #44	; 0x2c
 80052d8:	fb01 f303 	mul.w	r3, r1, r3
 80052dc:	4413      	add	r3, r2
 80052de:	3354      	adds	r3, #84	; 0x54
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	f083 0301 	eor.w	r3, r3, #1
 80052e6:	b2d8      	uxtb	r0, r3
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	212c      	movs	r1, #44	; 0x2c
 80052ee:	fb01 f303 	mul.w	r3, r1, r3
 80052f2:	4413      	add	r3, r2
 80052f4:	3354      	adds	r3, #84	; 0x54
 80052f6:	4602      	mov	r2, r0
 80052f8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	b2d9      	uxtb	r1, r3
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	202c      	movs	r0, #44	; 0x2c
 8005304:	fb00 f303 	mul.w	r3, r0, r3
 8005308:	4413      	add	r3, r2
 800530a:	3360      	adds	r3, #96	; 0x60
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f007 f9e1 	bl	800c6d8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d12b      	bne.n	8005376 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	212c      	movs	r1, #44	; 0x2c
 8005324:	fb01 f303 	mul.w	r3, r1, r3
 8005328:	4413      	add	r3, r2
 800532a:	3348      	adds	r3, #72	; 0x48
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6879      	ldr	r1, [r7, #4]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	202c      	movs	r0, #44	; 0x2c
 8005334:	fb00 f202 	mul.w	r2, r0, r2
 8005338:	440a      	add	r2, r1
 800533a:	3240      	adds	r2, #64	; 0x40
 800533c:	8812      	ldrh	r2, [r2, #0]
 800533e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 81be 	beq.w	80056c8 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	212c      	movs	r1, #44	; 0x2c
 8005352:	fb01 f303 	mul.w	r3, r1, r3
 8005356:	4413      	add	r3, r2
 8005358:	3354      	adds	r3, #84	; 0x54
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	f083 0301 	eor.w	r3, r3, #1
 8005360:	b2d8      	uxtb	r0, r3
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	212c      	movs	r1, #44	; 0x2c
 8005368:	fb01 f303 	mul.w	r3, r1, r3
 800536c:	4413      	add	r3, r2
 800536e:	3354      	adds	r3, #84	; 0x54
 8005370:	4602      	mov	r2, r0
 8005372:	701a      	strb	r2, [r3, #0]
}
 8005374:	e1a8      	b.n	80056c8 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	212c      	movs	r1, #44	; 0x2c
 800537c:	fb01 f303 	mul.w	r3, r1, r3
 8005380:	4413      	add	r3, r2
 8005382:	3354      	adds	r3, #84	; 0x54
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	f083 0301 	eor.w	r3, r3, #1
 800538a:	b2d8      	uxtb	r0, r3
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	212c      	movs	r1, #44	; 0x2c
 8005392:	fb01 f303 	mul.w	r3, r1, r3
 8005396:	4413      	add	r3, r2
 8005398:	3354      	adds	r3, #84	; 0x54
 800539a:	4602      	mov	r2, r0
 800539c:	701a      	strb	r2, [r3, #0]
}
 800539e:	e193      	b.n	80056c8 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	f040 8106 	bne.w	80055c4 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	0151      	lsls	r1, r2, #5
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	440a      	add	r2, r1
 80053ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053d2:	f023 0302 	bic.w	r3, r3, #2
 80053d6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	212c      	movs	r1, #44	; 0x2c
 80053de:	fb01 f303 	mul.w	r3, r1, r3
 80053e2:	4413      	add	r3, r2
 80053e4:	3361      	adds	r3, #97	; 0x61
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d109      	bne.n	8005400 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	212c      	movs	r1, #44	; 0x2c
 80053f2:	fb01 f303 	mul.w	r3, r1, r3
 80053f6:	4413      	add	r3, r2
 80053f8:	3360      	adds	r3, #96	; 0x60
 80053fa:	2201      	movs	r2, #1
 80053fc:	701a      	strb	r2, [r3, #0]
 80053fe:	e0c9      	b.n	8005594 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	212c      	movs	r1, #44	; 0x2c
 8005406:	fb01 f303 	mul.w	r3, r1, r3
 800540a:	4413      	add	r3, r2
 800540c:	3361      	adds	r3, #97	; 0x61
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	2b05      	cmp	r3, #5
 8005412:	d109      	bne.n	8005428 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	212c      	movs	r1, #44	; 0x2c
 800541a:	fb01 f303 	mul.w	r3, r1, r3
 800541e:	4413      	add	r3, r2
 8005420:	3360      	adds	r3, #96	; 0x60
 8005422:	2205      	movs	r2, #5
 8005424:	701a      	strb	r2, [r3, #0]
 8005426:	e0b5      	b.n	8005594 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	212c      	movs	r1, #44	; 0x2c
 800542e:	fb01 f303 	mul.w	r3, r1, r3
 8005432:	4413      	add	r3, r2
 8005434:	3361      	adds	r3, #97	; 0x61
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	2b06      	cmp	r3, #6
 800543a:	d009      	beq.n	8005450 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	212c      	movs	r1, #44	; 0x2c
 8005442:	fb01 f303 	mul.w	r3, r1, r3
 8005446:	4413      	add	r3, r2
 8005448:	3361      	adds	r3, #97	; 0x61
 800544a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800544c:	2b08      	cmp	r3, #8
 800544e:	d150      	bne.n	80054f2 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	212c      	movs	r1, #44	; 0x2c
 8005456:	fb01 f303 	mul.w	r3, r1, r3
 800545a:	4413      	add	r3, r2
 800545c:	335c      	adds	r3, #92	; 0x5c
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	6879      	ldr	r1, [r7, #4]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	202c      	movs	r0, #44	; 0x2c
 8005468:	fb00 f303 	mul.w	r3, r0, r3
 800546c:	440b      	add	r3, r1
 800546e:	335c      	adds	r3, #92	; 0x5c
 8005470:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	212c      	movs	r1, #44	; 0x2c
 8005478:	fb01 f303 	mul.w	r3, r1, r3
 800547c:	4413      	add	r3, r2
 800547e:	335c      	adds	r3, #92	; 0x5c
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2b02      	cmp	r3, #2
 8005484:	d912      	bls.n	80054ac <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	212c      	movs	r1, #44	; 0x2c
 800548c:	fb01 f303 	mul.w	r3, r1, r3
 8005490:	4413      	add	r3, r2
 8005492:	335c      	adds	r3, #92	; 0x5c
 8005494:	2200      	movs	r2, #0
 8005496:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	212c      	movs	r1, #44	; 0x2c
 800549e:	fb01 f303 	mul.w	r3, r1, r3
 80054a2:	4413      	add	r3, r2
 80054a4:	3360      	adds	r3, #96	; 0x60
 80054a6:	2204      	movs	r2, #4
 80054a8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80054aa:	e073      	b.n	8005594 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	212c      	movs	r1, #44	; 0x2c
 80054b2:	fb01 f303 	mul.w	r3, r1, r3
 80054b6:	4413      	add	r3, r2
 80054b8:	3360      	adds	r3, #96	; 0x60
 80054ba:	2202      	movs	r2, #2
 80054bc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054d4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054dc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ea:	461a      	mov	r2, r3
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80054f0:	e050      	b.n	8005594 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	212c      	movs	r1, #44	; 0x2c
 80054f8:	fb01 f303 	mul.w	r3, r1, r3
 80054fc:	4413      	add	r3, r2
 80054fe:	3361      	adds	r3, #97	; 0x61
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b03      	cmp	r3, #3
 8005504:	d122      	bne.n	800554c <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	212c      	movs	r1, #44	; 0x2c
 800550c:	fb01 f303 	mul.w	r3, r1, r3
 8005510:	4413      	add	r3, r2
 8005512:	3360      	adds	r3, #96	; 0x60
 8005514:	2202      	movs	r2, #2
 8005516:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	4413      	add	r3, r2
 8005520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800552e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005536:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	4413      	add	r3, r2
 8005540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005544:	461a      	mov	r2, r3
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	e023      	b.n	8005594 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	212c      	movs	r1, #44	; 0x2c
 8005552:	fb01 f303 	mul.w	r3, r1, r3
 8005556:	4413      	add	r3, r2
 8005558:	3361      	adds	r3, #97	; 0x61
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b07      	cmp	r3, #7
 800555e:	d119      	bne.n	8005594 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	212c      	movs	r1, #44	; 0x2c
 8005566:	fb01 f303 	mul.w	r3, r1, r3
 800556a:	4413      	add	r3, r2
 800556c:	335c      	adds	r3, #92	; 0x5c
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	6879      	ldr	r1, [r7, #4]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	202c      	movs	r0, #44	; 0x2c
 8005578:	fb00 f303 	mul.w	r3, r0, r3
 800557c:	440b      	add	r3, r1
 800557e:	335c      	adds	r3, #92	; 0x5c
 8005580:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	212c      	movs	r1, #44	; 0x2c
 8005588:	fb01 f303 	mul.w	r3, r1, r3
 800558c:	4413      	add	r3, r2
 800558e:	3360      	adds	r3, #96	; 0x60
 8005590:	2204      	movs	r2, #4
 8005592:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	4413      	add	r3, r2
 800559c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a0:	461a      	mov	r2, r3
 80055a2:	2302      	movs	r3, #2
 80055a4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	b2d9      	uxtb	r1, r3
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	202c      	movs	r0, #44	; 0x2c
 80055b0:	fb00 f303 	mul.w	r3, r0, r3
 80055b4:	4413      	add	r3, r2
 80055b6:	3360      	adds	r3, #96	; 0x60
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	461a      	mov	r2, r3
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f007 f88b 	bl	800c6d8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80055c2:	e081      	b.n	80056c8 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 0310 	and.w	r3, r3, #16
 80055d6:	2b10      	cmp	r3, #16
 80055d8:	d176      	bne.n	80056c8 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	212c      	movs	r1, #44	; 0x2c
 80055e0:	fb01 f303 	mul.w	r3, r1, r3
 80055e4:	4413      	add	r3, r2
 80055e6:	333f      	adds	r3, #63	; 0x3f
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	2b03      	cmp	r3, #3
 80055ec:	d121      	bne.n	8005632 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	212c      	movs	r1, #44	; 0x2c
 80055f4:	fb01 f303 	mul.w	r3, r1, r3
 80055f8:	4413      	add	r3, r2
 80055fa:	335c      	adds	r3, #92	; 0x5c
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	4413      	add	r3, r2
 8005608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	0151      	lsls	r1, r2, #5
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	440a      	add	r2, r1
 8005616:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800561a:	f043 0302 	orr.w	r3, r3, #2
 800561e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	4611      	mov	r1, r2
 800562a:	4618      	mov	r0, r3
 800562c:	f005 fc33 	bl	800ae96 <USB_HC_Halt>
 8005630:	e041      	b.n	80056b6 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	212c      	movs	r1, #44	; 0x2c
 8005638:	fb01 f303 	mul.w	r3, r1, r3
 800563c:	4413      	add	r3, r2
 800563e:	333f      	adds	r3, #63	; 0x3f
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d009      	beq.n	800565a <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	212c      	movs	r1, #44	; 0x2c
 800564c:	fb01 f303 	mul.w	r3, r1, r3
 8005650:	4413      	add	r3, r2
 8005652:	333f      	adds	r3, #63	; 0x3f
 8005654:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005656:	2b02      	cmp	r3, #2
 8005658:	d12d      	bne.n	80056b6 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	212c      	movs	r1, #44	; 0x2c
 8005660:	fb01 f303 	mul.w	r3, r1, r3
 8005664:	4413      	add	r3, r2
 8005666:	335c      	adds	r3, #92	; 0x5c
 8005668:	2200      	movs	r2, #0
 800566a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d120      	bne.n	80056b6 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	212c      	movs	r1, #44	; 0x2c
 800567a:	fb01 f303 	mul.w	r3, r1, r3
 800567e:	4413      	add	r3, r2
 8005680:	3361      	adds	r3, #97	; 0x61
 8005682:	2203      	movs	r2, #3
 8005684:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	4413      	add	r3, r2
 800568e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	0151      	lsls	r1, r2, #5
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	440a      	add	r2, r1
 800569c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056a0:	f043 0302 	orr.w	r3, r3, #2
 80056a4:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	b2d2      	uxtb	r2, r2
 80056ae:	4611      	mov	r1, r2
 80056b0:	4618      	mov	r0, r3
 80056b2:	f005 fbf0 	bl	800ae96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c2:	461a      	mov	r2, r3
 80056c4:	2310      	movs	r3, #16
 80056c6:	6093      	str	r3, [r2, #8]
}
 80056c8:	bf00      	nop
 80056ca:	3718      	adds	r7, #24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b088      	sub	sp, #32
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	460b      	mov	r3, r1
 80056da:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80056e6:	78fb      	ldrb	r3, [r7, #3]
 80056e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	d119      	bne.n	8005734 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	4413      	add	r3, r2
 8005708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800570c:	461a      	mov	r2, r3
 800570e:	2304      	movs	r3, #4
 8005710:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	4413      	add	r3, r2
 800571a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	0151      	lsls	r1, r2, #5
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	440a      	add	r2, r1
 8005728:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800572c:	f043 0302 	orr.w	r3, r3, #2
 8005730:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005732:	e3c6      	b.n	8005ec2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	4413      	add	r3, r2
 800573c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f003 0320 	and.w	r3, r3, #32
 8005746:	2b20      	cmp	r3, #32
 8005748:	d13e      	bne.n	80057c8 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	4413      	add	r3, r2
 8005752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005756:	461a      	mov	r2, r3
 8005758:	2320      	movs	r3, #32
 800575a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	212c      	movs	r1, #44	; 0x2c
 8005762:	fb01 f303 	mul.w	r3, r1, r3
 8005766:	4413      	add	r3, r2
 8005768:	333d      	adds	r3, #61	; 0x3d
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b01      	cmp	r3, #1
 800576e:	f040 83a8 	bne.w	8005ec2 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	212c      	movs	r1, #44	; 0x2c
 8005778:	fb01 f303 	mul.w	r3, r1, r3
 800577c:	4413      	add	r3, r2
 800577e:	333d      	adds	r3, #61	; 0x3d
 8005780:	2200      	movs	r2, #0
 8005782:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	212c      	movs	r1, #44	; 0x2c
 800578a:	fb01 f303 	mul.w	r3, r1, r3
 800578e:	4413      	add	r3, r2
 8005790:	3360      	adds	r3, #96	; 0x60
 8005792:	2202      	movs	r2, #2
 8005794:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	4413      	add	r3, r2
 800579e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	0151      	lsls	r1, r2, #5
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	440a      	add	r2, r1
 80057ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057b0:	f043 0302 	orr.w	r3, r3, #2
 80057b4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	4611      	mov	r1, r2
 80057c0:	4618      	mov	r0, r3
 80057c2:	f005 fb68 	bl	800ae96 <USB_HC_Halt>
}
 80057c6:	e37c      	b.n	8005ec2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057de:	d122      	bne.n	8005826 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	0151      	lsls	r1, r2, #5
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	440a      	add	r2, r1
 80057f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057fa:	f043 0302 	orr.w	r3, r3, #2
 80057fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	b2d2      	uxtb	r2, r2
 8005808:	4611      	mov	r1, r2
 800580a:	4618      	mov	r0, r3
 800580c:	f005 fb43 	bl	800ae96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	4413      	add	r3, r2
 8005818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800581c:	461a      	mov	r2, r3
 800581e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005822:	6093      	str	r3, [r2, #8]
}
 8005824:	e34d      	b.n	8005ec2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	4413      	add	r3, r2
 800582e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	2b01      	cmp	r3, #1
 800583a:	d150      	bne.n	80058de <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	212c      	movs	r1, #44	; 0x2c
 8005842:	fb01 f303 	mul.w	r3, r1, r3
 8005846:	4413      	add	r3, r2
 8005848:	335c      	adds	r3, #92	; 0x5c
 800584a:	2200      	movs	r2, #0
 800584c:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	4413      	add	r3, r2
 8005856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005860:	2b40      	cmp	r3, #64	; 0x40
 8005862:	d111      	bne.n	8005888 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	212c      	movs	r1, #44	; 0x2c
 800586a:	fb01 f303 	mul.w	r3, r1, r3
 800586e:	4413      	add	r3, r2
 8005870:	333d      	adds	r3, #61	; 0x3d
 8005872:	2201      	movs	r2, #1
 8005874:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	4413      	add	r3, r2
 800587e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005882:	461a      	mov	r2, r3
 8005884:	2340      	movs	r3, #64	; 0x40
 8005886:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	4413      	add	r3, r2
 8005890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	0151      	lsls	r1, r2, #5
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	440a      	add	r2, r1
 800589e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058a2:	f043 0302 	orr.w	r3, r3, #2
 80058a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	4611      	mov	r1, r2
 80058b2:	4618      	mov	r0, r3
 80058b4:	f005 faef 	bl	800ae96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c4:	461a      	mov	r2, r3
 80058c6:	2301      	movs	r3, #1
 80058c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	212c      	movs	r1, #44	; 0x2c
 80058d0:	fb01 f303 	mul.w	r3, r1, r3
 80058d4:	4413      	add	r3, r2
 80058d6:	3361      	adds	r3, #97	; 0x61
 80058d8:	2201      	movs	r2, #1
 80058da:	701a      	strb	r2, [r3, #0]
}
 80058dc:	e2f1      	b.n	8005ec2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f0:	2b40      	cmp	r3, #64	; 0x40
 80058f2:	d13c      	bne.n	800596e <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	212c      	movs	r1, #44	; 0x2c
 80058fa:	fb01 f303 	mul.w	r3, r1, r3
 80058fe:	4413      	add	r3, r2
 8005900:	3361      	adds	r3, #97	; 0x61
 8005902:	2204      	movs	r2, #4
 8005904:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	212c      	movs	r1, #44	; 0x2c
 800590c:	fb01 f303 	mul.w	r3, r1, r3
 8005910:	4413      	add	r3, r2
 8005912:	333d      	adds	r3, #61	; 0x3d
 8005914:	2201      	movs	r2, #1
 8005916:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	212c      	movs	r1, #44	; 0x2c
 800591e:	fb01 f303 	mul.w	r3, r1, r3
 8005922:	4413      	add	r3, r2
 8005924:	335c      	adds	r3, #92	; 0x5c
 8005926:	2200      	movs	r2, #0
 8005928:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	4413      	add	r3, r2
 8005932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	0151      	lsls	r1, r2, #5
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	440a      	add	r2, r1
 8005940:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005944:	f043 0302 	orr.w	r3, r3, #2
 8005948:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	b2d2      	uxtb	r2, r2
 8005952:	4611      	mov	r1, r2
 8005954:	4618      	mov	r0, r3
 8005956:	f005 fa9e 	bl	800ae96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	4413      	add	r3, r2
 8005962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005966:	461a      	mov	r2, r3
 8005968:	2340      	movs	r3, #64	; 0x40
 800596a:	6093      	str	r3, [r2, #8]
}
 800596c:	e2a9      	b.n	8005ec2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	4413      	add	r3, r2
 8005976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f003 0308 	and.w	r3, r3, #8
 8005980:	2b08      	cmp	r3, #8
 8005982:	d12a      	bne.n	80059da <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	4413      	add	r3, r2
 800598c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005990:	461a      	mov	r2, r3
 8005992:	2308      	movs	r3, #8
 8005994:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	4413      	add	r3, r2
 800599e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	0151      	lsls	r1, r2, #5
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	440a      	add	r2, r1
 80059ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059b0:	f043 0302 	orr.w	r3, r3, #2
 80059b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	4611      	mov	r1, r2
 80059c0:	4618      	mov	r0, r3
 80059c2:	f005 fa68 	bl	800ae96 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	212c      	movs	r1, #44	; 0x2c
 80059cc:	fb01 f303 	mul.w	r3, r1, r3
 80059d0:	4413      	add	r3, r2
 80059d2:	3361      	adds	r3, #97	; 0x61
 80059d4:	2205      	movs	r2, #5
 80059d6:	701a      	strb	r2, [r3, #0]
}
 80059d8:	e273      	b.n	8005ec2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f003 0310 	and.w	r3, r3, #16
 80059ec:	2b10      	cmp	r3, #16
 80059ee:	d150      	bne.n	8005a92 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	212c      	movs	r1, #44	; 0x2c
 80059f6:	fb01 f303 	mul.w	r3, r1, r3
 80059fa:	4413      	add	r3, r2
 80059fc:	335c      	adds	r3, #92	; 0x5c
 80059fe:	2200      	movs	r2, #0
 8005a00:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	212c      	movs	r1, #44	; 0x2c
 8005a08:	fb01 f303 	mul.w	r3, r1, r3
 8005a0c:	4413      	add	r3, r2
 8005a0e:	3361      	adds	r3, #97	; 0x61
 8005a10:	2203      	movs	r2, #3
 8005a12:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	212c      	movs	r1, #44	; 0x2c
 8005a1a:	fb01 f303 	mul.w	r3, r1, r3
 8005a1e:	4413      	add	r3, r2
 8005a20:	333d      	adds	r3, #61	; 0x3d
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d112      	bne.n	8005a4e <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	212c      	movs	r1, #44	; 0x2c
 8005a2e:	fb01 f303 	mul.w	r3, r1, r3
 8005a32:	4413      	add	r3, r2
 8005a34:	333c      	adds	r3, #60	; 0x3c
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d108      	bne.n	8005a4e <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	212c      	movs	r1, #44	; 0x2c
 8005a42:	fb01 f303 	mul.w	r3, r1, r3
 8005a46:	4413      	add	r3, r2
 8005a48:	333d      	adds	r3, #61	; 0x3d
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	0151      	lsls	r1, r2, #5
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	440a      	add	r2, r1
 8005a64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a68:	f043 0302 	orr.w	r3, r3, #2
 8005a6c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	4611      	mov	r1, r2
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f005 fa0c 	bl	800ae96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	2310      	movs	r3, #16
 8005a8e:	6093      	str	r3, [r2, #8]
}
 8005a90:	e217      	b.n	8005ec2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa4:	2b80      	cmp	r3, #128	; 0x80
 8005aa6:	d174      	bne.n	8005b92 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d121      	bne.n	8005af4 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	212c      	movs	r1, #44	; 0x2c
 8005ab6:	fb01 f303 	mul.w	r3, r1, r3
 8005aba:	4413      	add	r3, r2
 8005abc:	3361      	adds	r3, #97	; 0x61
 8005abe:	2206      	movs	r2, #6
 8005ac0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	0151      	lsls	r1, r2, #5
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	440a      	add	r2, r1
 8005ad8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005adc:	f043 0302 	orr.w	r3, r3, #2
 8005ae0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	b2d2      	uxtb	r2, r2
 8005aea:	4611      	mov	r1, r2
 8005aec:	4618      	mov	r0, r3
 8005aee:	f005 f9d2 	bl	800ae96 <USB_HC_Halt>
 8005af2:	e044      	b.n	8005b7e <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	212c      	movs	r1, #44	; 0x2c
 8005afa:	fb01 f303 	mul.w	r3, r1, r3
 8005afe:	4413      	add	r3, r2
 8005b00:	335c      	adds	r3, #92	; 0x5c
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	6879      	ldr	r1, [r7, #4]
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	202c      	movs	r0, #44	; 0x2c
 8005b0c:	fb00 f303 	mul.w	r3, r0, r3
 8005b10:	440b      	add	r3, r1
 8005b12:	335c      	adds	r3, #92	; 0x5c
 8005b14:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	212c      	movs	r1, #44	; 0x2c
 8005b1c:	fb01 f303 	mul.w	r3, r1, r3
 8005b20:	4413      	add	r3, r2
 8005b22:	335c      	adds	r3, #92	; 0x5c
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d920      	bls.n	8005b6c <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	212c      	movs	r1, #44	; 0x2c
 8005b30:	fb01 f303 	mul.w	r3, r1, r3
 8005b34:	4413      	add	r3, r2
 8005b36:	335c      	adds	r3, #92	; 0x5c
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	212c      	movs	r1, #44	; 0x2c
 8005b42:	fb01 f303 	mul.w	r3, r1, r3
 8005b46:	4413      	add	r3, r2
 8005b48:	3360      	adds	r3, #96	; 0x60
 8005b4a:	2204      	movs	r2, #4
 8005b4c:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	b2d9      	uxtb	r1, r3
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	202c      	movs	r0, #44	; 0x2c
 8005b58:	fb00 f303 	mul.w	r3, r0, r3
 8005b5c:	4413      	add	r3, r2
 8005b5e:	3360      	adds	r3, #96	; 0x60
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	461a      	mov	r2, r3
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f006 fdb7 	bl	800c6d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005b6a:	e008      	b.n	8005b7e <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	212c      	movs	r1, #44	; 0x2c
 8005b72:	fb01 f303 	mul.w	r3, r1, r3
 8005b76:	4413      	add	r3, r2
 8005b78:	3360      	adds	r3, #96	; 0x60
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	2380      	movs	r3, #128	; 0x80
 8005b8e:	6093      	str	r3, [r2, #8]
}
 8005b90:	e197      	b.n	8005ec2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba8:	d134      	bne.n	8005c14 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	0151      	lsls	r1, r2, #5
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	440a      	add	r2, r1
 8005bc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bc4:	f043 0302 	orr.w	r3, r3, #2
 8005bc8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	4611      	mov	r1, r2
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f005 f95e 	bl	800ae96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be6:	461a      	mov	r2, r3
 8005be8:	2310      	movs	r3, #16
 8005bea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bfe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	212c      	movs	r1, #44	; 0x2c
 8005c06:	fb01 f303 	mul.w	r3, r1, r3
 8005c0a:	4413      	add	r3, r2
 8005c0c:	3361      	adds	r3, #97	; 0x61
 8005c0e:	2208      	movs	r2, #8
 8005c10:	701a      	strb	r2, [r3, #0]
}
 8005c12:	e156      	b.n	8005ec2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	f040 814b 	bne.w	8005ec2 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	0151      	lsls	r1, r2, #5
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	440a      	add	r2, r1
 8005c42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c46:	f023 0302 	bic.w	r3, r3, #2
 8005c4a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	212c      	movs	r1, #44	; 0x2c
 8005c52:	fb01 f303 	mul.w	r3, r1, r3
 8005c56:	4413      	add	r3, r2
 8005c58:	3361      	adds	r3, #97	; 0x61
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d179      	bne.n	8005d54 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	212c      	movs	r1, #44	; 0x2c
 8005c66:	fb01 f303 	mul.w	r3, r1, r3
 8005c6a:	4413      	add	r3, r2
 8005c6c:	3360      	adds	r3, #96	; 0x60
 8005c6e:	2201      	movs	r2, #1
 8005c70:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	212c      	movs	r1, #44	; 0x2c
 8005c78:	fb01 f303 	mul.w	r3, r1, r3
 8005c7c:	4413      	add	r3, r2
 8005c7e:	333f      	adds	r3, #63	; 0x3f
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d00a      	beq.n	8005c9c <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	212c      	movs	r1, #44	; 0x2c
 8005c8c:	fb01 f303 	mul.w	r3, r1, r3
 8005c90:	4413      	add	r3, r2
 8005c92:	333f      	adds	r3, #63	; 0x3f
 8005c94:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	f040 80fc 	bne.w	8005e94 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d142      	bne.n	8005d2a <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	212c      	movs	r1, #44	; 0x2c
 8005caa:	fb01 f303 	mul.w	r3, r1, r3
 8005cae:	4413      	add	r3, r2
 8005cb0:	334c      	adds	r3, #76	; 0x4c
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 80ed 	beq.w	8005e94 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	212c      	movs	r1, #44	; 0x2c
 8005cc0:	fb01 f303 	mul.w	r3, r1, r3
 8005cc4:	4413      	add	r3, r2
 8005cc6:	334c      	adds	r3, #76	; 0x4c
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6879      	ldr	r1, [r7, #4]
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	202c      	movs	r0, #44	; 0x2c
 8005cd0:	fb00 f202 	mul.w	r2, r0, r2
 8005cd4:	440a      	add	r2, r1
 8005cd6:	3240      	adds	r2, #64	; 0x40
 8005cd8:	8812      	ldrh	r2, [r2, #0]
 8005cda:	4413      	add	r3, r2
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	6879      	ldr	r1, [r7, #4]
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	202c      	movs	r0, #44	; 0x2c
 8005ce4:	fb00 f202 	mul.w	r2, r0, r2
 8005ce8:	440a      	add	r2, r1
 8005cea:	3240      	adds	r2, #64	; 0x40
 8005cec:	8812      	ldrh	r2, [r2, #0]
 8005cee:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 80ca 	beq.w	8005e94 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	212c      	movs	r1, #44	; 0x2c
 8005d06:	fb01 f303 	mul.w	r3, r1, r3
 8005d0a:	4413      	add	r3, r2
 8005d0c:	3355      	adds	r3, #85	; 0x55
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	f083 0301 	eor.w	r3, r3, #1
 8005d14:	b2d8      	uxtb	r0, r3
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	212c      	movs	r1, #44	; 0x2c
 8005d1c:	fb01 f303 	mul.w	r3, r1, r3
 8005d20:	4413      	add	r3, r2
 8005d22:	3355      	adds	r3, #85	; 0x55
 8005d24:	4602      	mov	r2, r0
 8005d26:	701a      	strb	r2, [r3, #0]
 8005d28:	e0b4      	b.n	8005e94 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	212c      	movs	r1, #44	; 0x2c
 8005d30:	fb01 f303 	mul.w	r3, r1, r3
 8005d34:	4413      	add	r3, r2
 8005d36:	3355      	adds	r3, #85	; 0x55
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	f083 0301 	eor.w	r3, r3, #1
 8005d3e:	b2d8      	uxtb	r0, r3
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	212c      	movs	r1, #44	; 0x2c
 8005d46:	fb01 f303 	mul.w	r3, r1, r3
 8005d4a:	4413      	add	r3, r2
 8005d4c:	3355      	adds	r3, #85	; 0x55
 8005d4e:	4602      	mov	r2, r0
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	e09f      	b.n	8005e94 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	212c      	movs	r1, #44	; 0x2c
 8005d5a:	fb01 f303 	mul.w	r3, r1, r3
 8005d5e:	4413      	add	r3, r2
 8005d60:	3361      	adds	r3, #97	; 0x61
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d109      	bne.n	8005d7c <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	212c      	movs	r1, #44	; 0x2c
 8005d6e:	fb01 f303 	mul.w	r3, r1, r3
 8005d72:	4413      	add	r3, r2
 8005d74:	3360      	adds	r3, #96	; 0x60
 8005d76:	2202      	movs	r2, #2
 8005d78:	701a      	strb	r2, [r3, #0]
 8005d7a:	e08b      	b.n	8005e94 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	212c      	movs	r1, #44	; 0x2c
 8005d82:	fb01 f303 	mul.w	r3, r1, r3
 8005d86:	4413      	add	r3, r2
 8005d88:	3361      	adds	r3, #97	; 0x61
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b04      	cmp	r3, #4
 8005d8e:	d109      	bne.n	8005da4 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	212c      	movs	r1, #44	; 0x2c
 8005d96:	fb01 f303 	mul.w	r3, r1, r3
 8005d9a:	4413      	add	r3, r2
 8005d9c:	3360      	adds	r3, #96	; 0x60
 8005d9e:	2202      	movs	r2, #2
 8005da0:	701a      	strb	r2, [r3, #0]
 8005da2:	e077      	b.n	8005e94 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	212c      	movs	r1, #44	; 0x2c
 8005daa:	fb01 f303 	mul.w	r3, r1, r3
 8005dae:	4413      	add	r3, r2
 8005db0:	3361      	adds	r3, #97	; 0x61
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	2b05      	cmp	r3, #5
 8005db6:	d109      	bne.n	8005dcc <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	212c      	movs	r1, #44	; 0x2c
 8005dbe:	fb01 f303 	mul.w	r3, r1, r3
 8005dc2:	4413      	add	r3, r2
 8005dc4:	3360      	adds	r3, #96	; 0x60
 8005dc6:	2205      	movs	r2, #5
 8005dc8:	701a      	strb	r2, [r3, #0]
 8005dca:	e063      	b.n	8005e94 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	212c      	movs	r1, #44	; 0x2c
 8005dd2:	fb01 f303 	mul.w	r3, r1, r3
 8005dd6:	4413      	add	r3, r2
 8005dd8:	3361      	adds	r3, #97	; 0x61
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	2b06      	cmp	r3, #6
 8005dde:	d009      	beq.n	8005df4 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	212c      	movs	r1, #44	; 0x2c
 8005de6:	fb01 f303 	mul.w	r3, r1, r3
 8005dea:	4413      	add	r3, r2
 8005dec:	3361      	adds	r3, #97	; 0x61
 8005dee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005df0:	2b08      	cmp	r3, #8
 8005df2:	d14f      	bne.n	8005e94 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	212c      	movs	r1, #44	; 0x2c
 8005dfa:	fb01 f303 	mul.w	r3, r1, r3
 8005dfe:	4413      	add	r3, r2
 8005e00:	335c      	adds	r3, #92	; 0x5c
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	202c      	movs	r0, #44	; 0x2c
 8005e0c:	fb00 f303 	mul.w	r3, r0, r3
 8005e10:	440b      	add	r3, r1
 8005e12:	335c      	adds	r3, #92	; 0x5c
 8005e14:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	212c      	movs	r1, #44	; 0x2c
 8005e1c:	fb01 f303 	mul.w	r3, r1, r3
 8005e20:	4413      	add	r3, r2
 8005e22:	335c      	adds	r3, #92	; 0x5c
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d912      	bls.n	8005e50 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	212c      	movs	r1, #44	; 0x2c
 8005e30:	fb01 f303 	mul.w	r3, r1, r3
 8005e34:	4413      	add	r3, r2
 8005e36:	335c      	adds	r3, #92	; 0x5c
 8005e38:	2200      	movs	r2, #0
 8005e3a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	212c      	movs	r1, #44	; 0x2c
 8005e42:	fb01 f303 	mul.w	r3, r1, r3
 8005e46:	4413      	add	r3, r2
 8005e48:	3360      	adds	r3, #96	; 0x60
 8005e4a:	2204      	movs	r2, #4
 8005e4c:	701a      	strb	r2, [r3, #0]
 8005e4e:	e021      	b.n	8005e94 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	212c      	movs	r1, #44	; 0x2c
 8005e56:	fb01 f303 	mul.w	r3, r1, r3
 8005e5a:	4413      	add	r3, r2
 8005e5c:	3360      	adds	r3, #96	; 0x60
 8005e5e:	2202      	movs	r2, #2
 8005e60:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e78:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e80:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e8e:	461a      	mov	r2, r3
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	b2d9      	uxtb	r1, r3
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	202c      	movs	r0, #44	; 0x2c
 8005eb0:	fb00 f303 	mul.w	r3, r0, r3
 8005eb4:	4413      	add	r3, r2
 8005eb6:	3360      	adds	r3, #96	; 0x60
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f006 fc0b 	bl	800c6d8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005ec2:	bf00      	nop
 8005ec4:	3720      	adds	r7, #32
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b08a      	sub	sp, #40	; 0x28
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	f003 030f 	and.w	r3, r3, #15
 8005eea:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	0c5b      	lsrs	r3, r3, #17
 8005ef0:	f003 030f 	and.w	r3, r3, #15
 8005ef4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	091b      	lsrs	r3, r3, #4
 8005efa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005efe:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d004      	beq.n	8005f10 <HCD_RXQLVL_IRQHandler+0x46>
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2b05      	cmp	r3, #5
 8005f0a:	f000 80a9 	beq.w	8006060 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005f0e:	e0aa      	b.n	8006066 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 80a6 	beq.w	8006064 <HCD_RXQLVL_IRQHandler+0x19a>
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	212c      	movs	r1, #44	; 0x2c
 8005f1e:	fb01 f303 	mul.w	r3, r1, r3
 8005f22:	4413      	add	r3, r2
 8005f24:	3344      	adds	r3, #68	; 0x44
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 809b 	beq.w	8006064 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	212c      	movs	r1, #44	; 0x2c
 8005f34:	fb01 f303 	mul.w	r3, r1, r3
 8005f38:	4413      	add	r3, r2
 8005f3a:	3350      	adds	r3, #80	; 0x50
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	441a      	add	r2, r3
 8005f42:	6879      	ldr	r1, [r7, #4]
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	202c      	movs	r0, #44	; 0x2c
 8005f48:	fb00 f303 	mul.w	r3, r0, r3
 8005f4c:	440b      	add	r3, r1
 8005f4e:	334c      	adds	r3, #76	; 0x4c
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d87a      	bhi.n	800604c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6818      	ldr	r0, [r3, #0]
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	212c      	movs	r1, #44	; 0x2c
 8005f60:	fb01 f303 	mul.w	r3, r1, r3
 8005f64:	4413      	add	r3, r2
 8005f66:	3344      	adds	r3, #68	; 0x44
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	b292      	uxth	r2, r2
 8005f6e:	4619      	mov	r1, r3
 8005f70:	f004 fc31 	bl	800a7d6 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	212c      	movs	r1, #44	; 0x2c
 8005f7a:	fb01 f303 	mul.w	r3, r1, r3
 8005f7e:	4413      	add	r3, r2
 8005f80:	3344      	adds	r3, #68	; 0x44
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	441a      	add	r2, r3
 8005f88:	6879      	ldr	r1, [r7, #4]
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	202c      	movs	r0, #44	; 0x2c
 8005f8e:	fb00 f303 	mul.w	r3, r0, r3
 8005f92:	440b      	add	r3, r1
 8005f94:	3344      	adds	r3, #68	; 0x44
 8005f96:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	212c      	movs	r1, #44	; 0x2c
 8005f9e:	fb01 f303 	mul.w	r3, r1, r3
 8005fa2:	4413      	add	r3, r2
 8005fa4:	3350      	adds	r3, #80	; 0x50
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	441a      	add	r2, r3
 8005fac:	6879      	ldr	r1, [r7, #4]
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	202c      	movs	r0, #44	; 0x2c
 8005fb2:	fb00 f303 	mul.w	r3, r0, r3
 8005fb6:	440b      	add	r3, r1
 8005fb8:	3350      	adds	r3, #80	; 0x50
 8005fba:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	0cdb      	lsrs	r3, r3, #19
 8005fcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fd0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	212c      	movs	r1, #44	; 0x2c
 8005fd8:	fb01 f303 	mul.w	r3, r1, r3
 8005fdc:	4413      	add	r3, r2
 8005fde:	3340      	adds	r3, #64	; 0x40
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d13c      	bne.n	8006064 <HCD_RXQLVL_IRQHandler+0x19a>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d039      	beq.n	8006064 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006006:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800600e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	4413      	add	r3, r2
 8006018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800601c:	461a      	mov	r2, r3
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	212c      	movs	r1, #44	; 0x2c
 8006028:	fb01 f303 	mul.w	r3, r1, r3
 800602c:	4413      	add	r3, r2
 800602e:	3354      	adds	r3, #84	; 0x54
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	f083 0301 	eor.w	r3, r3, #1
 8006036:	b2d8      	uxtb	r0, r3
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	212c      	movs	r1, #44	; 0x2c
 800603e:	fb01 f303 	mul.w	r3, r1, r3
 8006042:	4413      	add	r3, r2
 8006044:	3354      	adds	r3, #84	; 0x54
 8006046:	4602      	mov	r2, r0
 8006048:	701a      	strb	r2, [r3, #0]
      break;
 800604a:	e00b      	b.n	8006064 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	212c      	movs	r1, #44	; 0x2c
 8006052:	fb01 f303 	mul.w	r3, r1, r3
 8006056:	4413      	add	r3, r2
 8006058:	3360      	adds	r3, #96	; 0x60
 800605a:	2204      	movs	r2, #4
 800605c:	701a      	strb	r2, [r3, #0]
      break;
 800605e:	e001      	b.n	8006064 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006060:	bf00      	nop
 8006062:	e000      	b.n	8006066 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006064:	bf00      	nop
  }
}
 8006066:	bf00      	nop
 8006068:	3728      	adds	r7, #40	; 0x28
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b086      	sub	sp, #24
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800609a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d10b      	bne.n	80060be <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d102      	bne.n	80060b6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f006 faf5 	bl	800c6a0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	f043 0302 	orr.w	r3, r3, #2
 80060bc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f003 0308 	and.w	r3, r3, #8
 80060c4:	2b08      	cmp	r3, #8
 80060c6:	d132      	bne.n	800612e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f043 0308 	orr.w	r3, r3, #8
 80060ce:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f003 0304 	and.w	r3, r3, #4
 80060d6:	2b04      	cmp	r3, #4
 80060d8:	d126      	bne.n	8006128 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d113      	bne.n	800610a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80060e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060ec:	d106      	bne.n	80060fc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2102      	movs	r1, #2
 80060f4:	4618      	mov	r0, r3
 80060f6:	f004 fbb8 	bl	800a86a <USB_InitFSLSPClkSel>
 80060fa:	e011      	b.n	8006120 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2101      	movs	r1, #1
 8006102:	4618      	mov	r0, r3
 8006104:	f004 fbb1 	bl	800a86a <USB_InitFSLSPClkSel>
 8006108:	e00a      	b.n	8006120 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d106      	bne.n	8006120 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006118:	461a      	mov	r2, r3
 800611a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800611e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f006 fae7 	bl	800c6f4 <HAL_HCD_PortEnabled_Callback>
 8006126:	e002      	b.n	800612e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f006 faf1 	bl	800c710 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f003 0320 	and.w	r3, r3, #32
 8006134:	2b20      	cmp	r3, #32
 8006136:	d103      	bne.n	8006140 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f043 0320 	orr.w	r3, r3, #32
 800613e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006146:	461a      	mov	r2, r3
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	6013      	str	r3, [r2, #0]
}
 800614c:	bf00      	nop
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e07f      	b.n	8006266 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d106      	bne.n	8006180 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7fc fc0a 	bl	8002994 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2224      	movs	r2, #36	; 0x24
 8006184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f022 0201 	bic.w	r2, r2, #1
 8006196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80061a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d107      	bne.n	80061ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	689a      	ldr	r2, [r3, #8]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061ca:	609a      	str	r2, [r3, #8]
 80061cc:	e006      	b.n	80061dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689a      	ldr	r2, [r3, #8]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80061da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d104      	bne.n	80061ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	6859      	ldr	r1, [r3, #4]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	4b1d      	ldr	r3, [pc, #116]	; (8006270 <HAL_I2C_Init+0x11c>)
 80061fa:	430b      	orrs	r3, r1
 80061fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68da      	ldr	r2, [r3, #12]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800620c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	691a      	ldr	r2, [r3, #16]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	ea42 0103 	orr.w	r1, r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	021a      	lsls	r2, r3, #8
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	430a      	orrs	r2, r1
 8006226:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	69d9      	ldr	r1, [r3, #28]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a1a      	ldr	r2, [r3, #32]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f042 0201 	orr.w	r2, r2, #1
 8006246:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2220      	movs	r2, #32
 8006252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3708      	adds	r7, #8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	02008000 	.word	0x02008000

08006274 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b20      	cmp	r3, #32
 8006288:	d138      	bne.n	80062fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006290:	2b01      	cmp	r3, #1
 8006292:	d101      	bne.n	8006298 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006294:	2302      	movs	r3, #2
 8006296:	e032      	b.n	80062fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2224      	movs	r2, #36	; 0x24
 80062a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 0201 	bic.w	r2, r2, #1
 80062b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6819      	ldr	r1, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0201 	orr.w	r2, r2, #1
 80062e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062f8:	2300      	movs	r3, #0
 80062fa:	e000      	b.n	80062fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80062fc:	2302      	movs	r3, #2
  }
}
 80062fe:	4618      	mov	r0, r3
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800630a:	b480      	push	{r7}
 800630c:	b085      	sub	sp, #20
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
 8006312:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b20      	cmp	r3, #32
 800631e:	d139      	bne.n	8006394 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006326:	2b01      	cmp	r3, #1
 8006328:	d101      	bne.n	800632e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800632a:	2302      	movs	r3, #2
 800632c:	e033      	b.n	8006396 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2224      	movs	r2, #36	; 0x24
 800633a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 0201 	bic.w	r2, r2, #1
 800634c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800635c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	021b      	lsls	r3, r3, #8
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	4313      	orrs	r3, r2
 8006366:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f042 0201 	orr.w	r2, r2, #1
 800637e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2220      	movs	r2, #32
 8006384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	e000      	b.n	8006396 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006394:	2302      	movs	r3, #2
  }
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
	...

080063a4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e0bf      	b.n	8006536 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d106      	bne.n	80063d0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7fc fb5a 	bl	8002a84 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2202      	movs	r2, #2
 80063d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	699a      	ldr	r2, [r3, #24]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80063e6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6999      	ldr	r1, [r3, #24]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80063fc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6899      	ldr	r1, [r3, #8]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	4b4a      	ldr	r3, [pc, #296]	; (8006540 <HAL_LTDC_Init+0x19c>)
 8006418:	400b      	ands	r3, r1
 800641a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	041b      	lsls	r3, r3, #16
 8006422:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6899      	ldr	r1, [r3, #8]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	699a      	ldr	r2, [r3, #24]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	431a      	orrs	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68d9      	ldr	r1, [r3, #12]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	4b3e      	ldr	r3, [pc, #248]	; (8006540 <HAL_LTDC_Init+0x19c>)
 8006446:	400b      	ands	r3, r1
 8006448:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	041b      	lsls	r3, r3, #16
 8006450:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68d9      	ldr	r1, [r3, #12]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a1a      	ldr	r2, [r3, #32]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	431a      	orrs	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	430a      	orrs	r2, r1
 8006466:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6919      	ldr	r1, [r3, #16]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	4b33      	ldr	r3, [pc, #204]	; (8006540 <HAL_LTDC_Init+0x19c>)
 8006474:	400b      	ands	r3, r1
 8006476:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647c:	041b      	lsls	r3, r3, #16
 800647e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6919      	ldr	r1, [r3, #16]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	431a      	orrs	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	430a      	orrs	r2, r1
 8006494:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6959      	ldr	r1, [r3, #20]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	4b27      	ldr	r3, [pc, #156]	; (8006540 <HAL_LTDC_Init+0x19c>)
 80064a2:	400b      	ands	r3, r1
 80064a4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064aa:	041b      	lsls	r3, r3, #16
 80064ac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6959      	ldr	r1, [r3, #20]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	431a      	orrs	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064ca:	021b      	lsls	r3, r3, #8
 80064cc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80064d4:	041b      	lsls	r3, r3, #16
 80064d6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80064e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80064ee:	68ba      	ldr	r2, [r7, #8]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80064fa:	431a      	orrs	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f042 0206 	orr.w	r2, r2, #6
 8006512:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699a      	ldr	r2, [r3, #24]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0201 	orr.w	r2, r2, #1
 8006522:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	f000f800 	.word	0xf000f800

08006544 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006552:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800655a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f003 0304 	and.w	r3, r3, #4
 8006562:	2b00      	cmp	r3, #0
 8006564:	d023      	beq.n	80065ae <HAL_LTDC_IRQHandler+0x6a>
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f003 0304 	and.w	r3, r3, #4
 800656c:	2b00      	cmp	r3, #0
 800656e:	d01e      	beq.n	80065ae <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0204 	bic.w	r2, r2, #4
 800657e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2204      	movs	r2, #4
 8006586:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800658e:	f043 0201 	orr.w	r2, r3, #1
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2204      	movs	r2, #4
 800659c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 f86f 	bl	800668c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f003 0302 	and.w	r3, r3, #2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d023      	beq.n	8006600 <HAL_LTDC_IRQHandler+0xbc>
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d01e      	beq.n	8006600 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 0202 	bic.w	r2, r2, #2
 80065d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2202      	movs	r2, #2
 80065d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80065e0:	f043 0202 	orr.w	r2, r3, #2
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2204      	movs	r2, #4
 80065ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f846 	bl	800668c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d01b      	beq.n	8006642 <HAL_LTDC_IRQHandler+0xfe>
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b00      	cmp	r3, #0
 8006612:	d016      	beq.n	8006642 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f022 0201 	bic.w	r2, r2, #1
 8006622:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2201      	movs	r2, #1
 800662a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f82f 	bl	80066a0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f003 0308 	and.w	r3, r3, #8
 8006648:	2b00      	cmp	r3, #0
 800664a:	d01b      	beq.n	8006684 <HAL_LTDC_IRQHandler+0x140>
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	f003 0308 	and.w	r3, r3, #8
 8006652:	2b00      	cmp	r3, #0
 8006654:	d016      	beq.n	8006684 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f022 0208 	bic.w	r2, r2, #8
 8006664:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2208      	movs	r2, #8
 800666c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f818 	bl	80066b4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006684:	bf00      	nop
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80066c8:	b5b0      	push	{r4, r5, r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d101      	bne.n	80066e2 <HAL_LTDC_ConfigLayer+0x1a>
 80066de:	2302      	movs	r3, #2
 80066e0:	e02c      	b.n	800673c <HAL_LTDC_ConfigLayer+0x74>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2202      	movs	r2, #2
 80066ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2134      	movs	r1, #52	; 0x34
 80066f8:	fb01 f303 	mul.w	r3, r1, r3
 80066fc:	4413      	add	r3, r2
 80066fe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	4614      	mov	r4, r2
 8006706:	461d      	mov	r5, r3
 8006708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800670a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800670c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800670e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006714:	682b      	ldr	r3, [r5, #0]
 8006716:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	68b9      	ldr	r1, [r7, #8]
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f000 f811 	bl	8006744 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2201      	movs	r2, #1
 8006728:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bdb0      	pop	{r4, r5, r7, pc}

08006744 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006744:	b480      	push	{r7}
 8006746:	b089      	sub	sp, #36	; 0x24
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	0c1b      	lsrs	r3, r3, #16
 800675c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006760:	4413      	add	r3, r2
 8006762:	041b      	lsls	r3, r3, #16
 8006764:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	461a      	mov	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	01db      	lsls	r3, r3, #7
 8006770:	4413      	add	r3, r2
 8006772:	3384      	adds	r3, #132	; 0x84
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	6812      	ldr	r2, [r2, #0]
 800677a:	4611      	mov	r1, r2
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	01d2      	lsls	r2, r2, #7
 8006780:	440a      	add	r2, r1
 8006782:	3284      	adds	r2, #132	; 0x84
 8006784:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006788:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	0c1b      	lsrs	r3, r3, #16
 8006796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800679a:	4413      	add	r3, r2
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4619      	mov	r1, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	01db      	lsls	r3, r3, #7
 80067a8:	440b      	add	r3, r1
 80067aa:	3384      	adds	r3, #132	; 0x84
 80067ac:	4619      	mov	r1, r3
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	68da      	ldr	r2, [r3, #12]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067c2:	4413      	add	r3, r2
 80067c4:	041b      	lsls	r3, r3, #16
 80067c6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	461a      	mov	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	01db      	lsls	r3, r3, #7
 80067d2:	4413      	add	r3, r2
 80067d4:	3384      	adds	r3, #132	; 0x84
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	6812      	ldr	r2, [r2, #0]
 80067dc:	4611      	mov	r1, r2
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	01d2      	lsls	r2, r2, #7
 80067e2:	440a      	add	r2, r1
 80067e4:	3284      	adds	r2, #132	; 0x84
 80067e6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80067ea:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067fa:	4413      	add	r3, r2
 80067fc:	1c5a      	adds	r2, r3, #1
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4619      	mov	r1, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	01db      	lsls	r3, r3, #7
 8006808:	440b      	add	r3, r1
 800680a:	3384      	adds	r3, #132	; 0x84
 800680c:	4619      	mov	r1, r3
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	4313      	orrs	r3, r2
 8006812:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	461a      	mov	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	01db      	lsls	r3, r3, #7
 800681e:	4413      	add	r3, r2
 8006820:	3384      	adds	r3, #132	; 0x84
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	6812      	ldr	r2, [r2, #0]
 8006828:	4611      	mov	r1, r2
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	01d2      	lsls	r2, r2, #7
 800682e:	440a      	add	r2, r1
 8006830:	3284      	adds	r2, #132	; 0x84
 8006832:	f023 0307 	bic.w	r3, r3, #7
 8006836:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	461a      	mov	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	01db      	lsls	r3, r3, #7
 8006842:	4413      	add	r3, r2
 8006844:	3384      	adds	r3, #132	; 0x84
 8006846:	461a      	mov	r2, r3
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006854:	021b      	lsls	r3, r3, #8
 8006856:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800685e:	041b      	lsls	r3, r3, #16
 8006860:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	061b      	lsls	r3, r3, #24
 8006868:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	461a      	mov	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	01db      	lsls	r3, r3, #7
 8006874:	4413      	add	r3, r2
 8006876:	3384      	adds	r3, #132	; 0x84
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	01db      	lsls	r3, r3, #7
 8006884:	4413      	add	r3, r2
 8006886:	3384      	adds	r3, #132	; 0x84
 8006888:	461a      	mov	r2, r3
 800688a:	2300      	movs	r3, #0
 800688c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006894:	461a      	mov	r2, r3
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	431a      	orrs	r2, r3
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	431a      	orrs	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4619      	mov	r1, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	01db      	lsls	r3, r3, #7
 80068a8:	440b      	add	r3, r1
 80068aa:	3384      	adds	r3, #132	; 0x84
 80068ac:	4619      	mov	r1, r3
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	461a      	mov	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	01db      	lsls	r3, r3, #7
 80068be:	4413      	add	r3, r2
 80068c0:	3384      	adds	r3, #132	; 0x84
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	6812      	ldr	r2, [r2, #0]
 80068c8:	4611      	mov	r1, r2
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	01d2      	lsls	r2, r2, #7
 80068ce:	440a      	add	r2, r1
 80068d0:	3284      	adds	r2, #132	; 0x84
 80068d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80068d6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	461a      	mov	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	01db      	lsls	r3, r3, #7
 80068e2:	4413      	add	r3, r2
 80068e4:	3384      	adds	r3, #132	; 0x84
 80068e6:	461a      	mov	r2, r3
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	461a      	mov	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	01db      	lsls	r3, r3, #7
 80068f8:	4413      	add	r3, r2
 80068fa:	3384      	adds	r3, #132	; 0x84
 80068fc:	69da      	ldr	r2, [r3, #28]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4619      	mov	r1, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	01db      	lsls	r3, r3, #7
 8006908:	440b      	add	r3, r1
 800690a:	3384      	adds	r3, #132	; 0x84
 800690c:	4619      	mov	r1, r3
 800690e:	4b58      	ldr	r3, [pc, #352]	; (8006a70 <LTDC_SetConfig+0x32c>)
 8006910:	4013      	ands	r3, r2
 8006912:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	69da      	ldr	r2, [r3, #28]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	68f9      	ldr	r1, [r7, #12]
 800691e:	6809      	ldr	r1, [r1, #0]
 8006920:	4608      	mov	r0, r1
 8006922:	6879      	ldr	r1, [r7, #4]
 8006924:	01c9      	lsls	r1, r1, #7
 8006926:	4401      	add	r1, r0
 8006928:	3184      	adds	r1, #132	; 0x84
 800692a:	4313      	orrs	r3, r2
 800692c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	461a      	mov	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	01db      	lsls	r3, r3, #7
 8006938:	4413      	add	r3, r2
 800693a:	3384      	adds	r3, #132	; 0x84
 800693c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	461a      	mov	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	01db      	lsls	r3, r3, #7
 8006948:	4413      	add	r3, r2
 800694a:	3384      	adds	r3, #132	; 0x84
 800694c:	461a      	mov	r2, r3
 800694e:	2300      	movs	r3, #0
 8006950:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	461a      	mov	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	01db      	lsls	r3, r3, #7
 800695c:	4413      	add	r3, r2
 800695e:	3384      	adds	r3, #132	; 0x84
 8006960:	461a      	mov	r2, r3
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006966:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d102      	bne.n	8006976 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006970:	2304      	movs	r3, #4
 8006972:	61fb      	str	r3, [r7, #28]
 8006974:	e01b      	b.n	80069ae <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	2b01      	cmp	r3, #1
 800697c:	d102      	bne.n	8006984 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800697e:	2303      	movs	r3, #3
 8006980:	61fb      	str	r3, [r7, #28]
 8006982:	e014      	b.n	80069ae <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	2b04      	cmp	r3, #4
 800698a:	d00b      	beq.n	80069a4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006990:	2b02      	cmp	r3, #2
 8006992:	d007      	beq.n	80069a4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006998:	2b03      	cmp	r3, #3
 800699a:	d003      	beq.n	80069a4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80069a0:	2b07      	cmp	r3, #7
 80069a2:	d102      	bne.n	80069aa <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80069a4:	2302      	movs	r3, #2
 80069a6:	61fb      	str	r3, [r7, #28]
 80069a8:	e001      	b.n	80069ae <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80069aa:	2301      	movs	r3, #1
 80069ac:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	461a      	mov	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	01db      	lsls	r3, r3, #7
 80069b8:	4413      	add	r3, r2
 80069ba:	3384      	adds	r3, #132	; 0x84
 80069bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	6812      	ldr	r2, [r2, #0]
 80069c2:	4611      	mov	r1, r2
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	01d2      	lsls	r2, r2, #7
 80069c8:	440a      	add	r2, r1
 80069ca:	3284      	adds	r2, #132	; 0x84
 80069cc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80069d0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d6:	69fa      	ldr	r2, [r7, #28]
 80069d8:	fb02 f303 	mul.w	r3, r2, r3
 80069dc:	041a      	lsls	r2, r3, #16
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	6859      	ldr	r1, [r3, #4]
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	1acb      	subs	r3, r1, r3
 80069e8:	69f9      	ldr	r1, [r7, #28]
 80069ea:	fb01 f303 	mul.w	r3, r1, r3
 80069ee:	3303      	adds	r3, #3
 80069f0:	68f9      	ldr	r1, [r7, #12]
 80069f2:	6809      	ldr	r1, [r1, #0]
 80069f4:	4608      	mov	r0, r1
 80069f6:	6879      	ldr	r1, [r7, #4]
 80069f8:	01c9      	lsls	r1, r1, #7
 80069fa:	4401      	add	r1, r0
 80069fc:	3184      	adds	r1, #132	; 0x84
 80069fe:	4313      	orrs	r3, r2
 8006a00:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	461a      	mov	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	01db      	lsls	r3, r3, #7
 8006a0c:	4413      	add	r3, r2
 8006a0e:	3384      	adds	r3, #132	; 0x84
 8006a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4619      	mov	r1, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	01db      	lsls	r3, r3, #7
 8006a1c:	440b      	add	r3, r1
 8006a1e:	3384      	adds	r3, #132	; 0x84
 8006a20:	4619      	mov	r1, r3
 8006a22:	4b14      	ldr	r3, [pc, #80]	; (8006a74 <LTDC_SetConfig+0x330>)
 8006a24:	4013      	ands	r3, r2
 8006a26:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	01db      	lsls	r3, r3, #7
 8006a32:	4413      	add	r3, r2
 8006a34:	3384      	adds	r3, #132	; 0x84
 8006a36:	461a      	mov	r2, r3
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	461a      	mov	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	01db      	lsls	r3, r3, #7
 8006a48:	4413      	add	r3, r2
 8006a4a:	3384      	adds	r3, #132	; 0x84
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	6812      	ldr	r2, [r2, #0]
 8006a52:	4611      	mov	r1, r2
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	01d2      	lsls	r2, r2, #7
 8006a58:	440a      	add	r2, r1
 8006a5a:	3284      	adds	r2, #132	; 0x84
 8006a5c:	f043 0301 	orr.w	r3, r3, #1
 8006a60:	6013      	str	r3, [r2, #0]
}
 8006a62:	bf00      	nop
 8006a64:	3724      	adds	r7, #36	; 0x24
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	fffff8f8 	.word	0xfffff8f8
 8006a74:	fffff800 	.word	0xfffff800

08006a78 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a7c:	4b05      	ldr	r3, [pc, #20]	; (8006a94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a04      	ldr	r2, [pc, #16]	; (8006a94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a86:	6013      	str	r3, [r2, #0]
}
 8006a88:	bf00      	nop
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	40007000 	.word	0x40007000

08006a98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006aa2:	4b23      	ldr	r3, [pc, #140]	; (8006b30 <HAL_PWREx_EnableOverDrive+0x98>)
 8006aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa6:	4a22      	ldr	r2, [pc, #136]	; (8006b30 <HAL_PWREx_EnableOverDrive+0x98>)
 8006aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aac:	6413      	str	r3, [r2, #64]	; 0x40
 8006aae:	4b20      	ldr	r3, [pc, #128]	; (8006b30 <HAL_PWREx_EnableOverDrive+0x98>)
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ab6:	603b      	str	r3, [r7, #0]
 8006ab8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006aba:	4b1e      	ldr	r3, [pc, #120]	; (8006b34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a1d      	ldr	r2, [pc, #116]	; (8006b34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ac4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ac6:	f7fc fd8f 	bl	80035e8 <HAL_GetTick>
 8006aca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006acc:	e009      	b.n	8006ae2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006ace:	f7fc fd8b 	bl	80035e8 <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006adc:	d901      	bls.n	8006ae2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e022      	b.n	8006b28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006ae2:	4b14      	ldr	r3, [pc, #80]	; (8006b34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aee:	d1ee      	bne.n	8006ace <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006af0:	4b10      	ldr	r3, [pc, #64]	; (8006b34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a0f      	ldr	r2, [pc, #60]	; (8006b34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006afa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006afc:	f7fc fd74 	bl	80035e8 <HAL_GetTick>
 8006b00:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b02:	e009      	b.n	8006b18 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b04:	f7fc fd70 	bl	80035e8 <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b12:	d901      	bls.n	8006b18 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e007      	b.n	8006b28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b18:	4b06      	ldr	r3, [pc, #24]	; (8006b34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b24:	d1ee      	bne.n	8006b04 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	40023800 	.word	0x40023800
 8006b34:	40007000 	.word	0x40007000

08006b38 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af02      	add	r7, sp, #8
 8006b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006b40:	f7fc fd52 	bl	80035e8 <HAL_GetTick>
 8006b44:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e067      	b.n	8006c20 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10b      	bne.n	8006b74 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f7fc f855 	bl	8002c14 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006b6a:	f241 3188 	movw	r1, #5000	; 0x1388
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f85e 	bl	8006c30 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	3b01      	subs	r3, #1
 8006b84:	021a      	lsls	r2, r3, #8
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	2120      	movs	r1, #32
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f856 	bl	8006c4c <QSPI_WaitFlagStateUntilTimeout>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006ba4:	7afb      	ldrb	r3, [r7, #11]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d135      	bne.n	8006c16 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	4b1d      	ldr	r3, [pc, #116]	; (8006c28 <HAL_QSPI_Init+0xf0>)
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	6852      	ldr	r2, [r2, #4]
 8006bb8:	0611      	lsls	r1, r2, #24
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	68d2      	ldr	r2, [r2, #12]
 8006bbe:	4311      	orrs	r1, r2
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	69d2      	ldr	r2, [r2, #28]
 8006bc4:	4311      	orrs	r1, r2
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	6a12      	ldr	r2, [r2, #32]
 8006bca:	4311      	orrs	r1, r2
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	6812      	ldr	r2, [r2, #0]
 8006bd0:	430b      	orrs	r3, r1
 8006bd2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685a      	ldr	r2, [r3, #4]
 8006bda:	4b14      	ldr	r3, [pc, #80]	; (8006c2c <HAL_QSPI_Init+0xf4>)
 8006bdc:	4013      	ands	r3, r2
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	6912      	ldr	r2, [r2, #16]
 8006be2:	0411      	lsls	r1, r2, #16
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	6952      	ldr	r2, [r2, #20]
 8006be8:	4311      	orrs	r1, r2
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	6992      	ldr	r2, [r2, #24]
 8006bee:	4311      	orrs	r1, r2
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	6812      	ldr	r2, [r2, #0]
 8006bf4:	430b      	orrs	r3, r1
 8006bf6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f042 0201 	orr.w	r2, r2, #1
 8006c06:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006c1e:	7afb      	ldrb	r3, [r7, #11]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	00ffff2f 	.word	0x00ffff2f
 8006c2c:	ffe0f8fe 	.word	0xffe0f8fe

08006c30 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	603b      	str	r3, [r7, #0]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006c5c:	e01a      	b.n	8006c94 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c64:	d016      	beq.n	8006c94 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c66:	f7fc fcbf 	bl	80035e8 <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d302      	bcc.n	8006c7c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10b      	bne.n	8006c94 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2204      	movs	r2, #4
 8006c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c88:	f043 0201 	orr.w	r2, r3, #1
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e00e      	b.n	8006cb2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	689a      	ldr	r2, [r3, #8]
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	bf14      	ite	ne
 8006ca2:	2301      	movne	r3, #1
 8006ca4:	2300      	moveq	r3, #0
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	461a      	mov	r2, r3
 8006caa:	79fb      	ldrb	r3, [r7, #7]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d1d6      	bne.n	8006c5e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
	...

08006cbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b086      	sub	sp, #24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e291      	b.n	80071f6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f000 8087 	beq.w	8006dee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ce0:	4b96      	ldr	r3, [pc, #600]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	f003 030c 	and.w	r3, r3, #12
 8006ce8:	2b04      	cmp	r3, #4
 8006cea:	d00c      	beq.n	8006d06 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cec:	4b93      	ldr	r3, [pc, #588]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f003 030c 	and.w	r3, r3, #12
 8006cf4:	2b08      	cmp	r3, #8
 8006cf6:	d112      	bne.n	8006d1e <HAL_RCC_OscConfig+0x62>
 8006cf8:	4b90      	ldr	r3, [pc, #576]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d04:	d10b      	bne.n	8006d1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d06:	4b8d      	ldr	r3, [pc, #564]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d06c      	beq.n	8006dec <HAL_RCC_OscConfig+0x130>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d168      	bne.n	8006dec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e26b      	b.n	80071f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d26:	d106      	bne.n	8006d36 <HAL_RCC_OscConfig+0x7a>
 8006d28:	4b84      	ldr	r3, [pc, #528]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a83      	ldr	r2, [pc, #524]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d32:	6013      	str	r3, [r2, #0]
 8006d34:	e02e      	b.n	8006d94 <HAL_RCC_OscConfig+0xd8>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10c      	bne.n	8006d58 <HAL_RCC_OscConfig+0x9c>
 8006d3e:	4b7f      	ldr	r3, [pc, #508]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a7e      	ldr	r2, [pc, #504]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d48:	6013      	str	r3, [r2, #0]
 8006d4a:	4b7c      	ldr	r3, [pc, #496]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a7b      	ldr	r2, [pc, #492]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006d50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d54:	6013      	str	r3, [r2, #0]
 8006d56:	e01d      	b.n	8006d94 <HAL_RCC_OscConfig+0xd8>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d60:	d10c      	bne.n	8006d7c <HAL_RCC_OscConfig+0xc0>
 8006d62:	4b76      	ldr	r3, [pc, #472]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a75      	ldr	r2, [pc, #468]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d6c:	6013      	str	r3, [r2, #0]
 8006d6e:	4b73      	ldr	r3, [pc, #460]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a72      	ldr	r2, [pc, #456]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d78:	6013      	str	r3, [r2, #0]
 8006d7a:	e00b      	b.n	8006d94 <HAL_RCC_OscConfig+0xd8>
 8006d7c:	4b6f      	ldr	r3, [pc, #444]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a6e      	ldr	r2, [pc, #440]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d86:	6013      	str	r3, [r2, #0]
 8006d88:	4b6c      	ldr	r3, [pc, #432]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a6b      	ldr	r2, [pc, #428]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d013      	beq.n	8006dc4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d9c:	f7fc fc24 	bl	80035e8 <HAL_GetTick>
 8006da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006da2:	e008      	b.n	8006db6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006da4:	f7fc fc20 	bl	80035e8 <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	2b64      	cmp	r3, #100	; 0x64
 8006db0:	d901      	bls.n	8006db6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e21f      	b.n	80071f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006db6:	4b61      	ldr	r3, [pc, #388]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d0f0      	beq.n	8006da4 <HAL_RCC_OscConfig+0xe8>
 8006dc2:	e014      	b.n	8006dee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc4:	f7fc fc10 	bl	80035e8 <HAL_GetTick>
 8006dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dca:	e008      	b.n	8006dde <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dcc:	f7fc fc0c 	bl	80035e8 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	2b64      	cmp	r3, #100	; 0x64
 8006dd8:	d901      	bls.n	8006dde <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e20b      	b.n	80071f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dde:	4b57      	ldr	r3, [pc, #348]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1f0      	bne.n	8006dcc <HAL_RCC_OscConfig+0x110>
 8006dea:	e000      	b.n	8006dee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0302 	and.w	r3, r3, #2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d069      	beq.n	8006ece <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006dfa:	4b50      	ldr	r3, [pc, #320]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f003 030c 	and.w	r3, r3, #12
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00b      	beq.n	8006e1e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e06:	4b4d      	ldr	r3, [pc, #308]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f003 030c 	and.w	r3, r3, #12
 8006e0e:	2b08      	cmp	r3, #8
 8006e10:	d11c      	bne.n	8006e4c <HAL_RCC_OscConfig+0x190>
 8006e12:	4b4a      	ldr	r3, [pc, #296]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d116      	bne.n	8006e4c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e1e:	4b47      	ldr	r3, [pc, #284]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d005      	beq.n	8006e36 <HAL_RCC_OscConfig+0x17a>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d001      	beq.n	8006e36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e1df      	b.n	80071f6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e36:	4b41      	ldr	r3, [pc, #260]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	00db      	lsls	r3, r3, #3
 8006e44:	493d      	ldr	r1, [pc, #244]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e4a:	e040      	b.n	8006ece <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d023      	beq.n	8006e9c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e54:	4b39      	ldr	r3, [pc, #228]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a38      	ldr	r2, [pc, #224]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006e5a:	f043 0301 	orr.w	r3, r3, #1
 8006e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e60:	f7fc fbc2 	bl	80035e8 <HAL_GetTick>
 8006e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e66:	e008      	b.n	8006e7a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e68:	f7fc fbbe 	bl	80035e8 <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d901      	bls.n	8006e7a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e1bd      	b.n	80071f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e7a:	4b30      	ldr	r3, [pc, #192]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0302 	and.w	r3, r3, #2
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d0f0      	beq.n	8006e68 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e86:	4b2d      	ldr	r3, [pc, #180]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	00db      	lsls	r3, r3, #3
 8006e94:	4929      	ldr	r1, [pc, #164]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	600b      	str	r3, [r1, #0]
 8006e9a:	e018      	b.n	8006ece <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e9c:	4b27      	ldr	r3, [pc, #156]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a26      	ldr	r2, [pc, #152]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006ea2:	f023 0301 	bic.w	r3, r3, #1
 8006ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ea8:	f7fc fb9e 	bl	80035e8 <HAL_GetTick>
 8006eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006eae:	e008      	b.n	8006ec2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006eb0:	f7fc fb9a 	bl	80035e8 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d901      	bls.n	8006ec2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e199      	b.n	80071f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ec2:	4b1e      	ldr	r3, [pc, #120]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0302 	and.w	r3, r3, #2
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1f0      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0308 	and.w	r3, r3, #8
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d038      	beq.n	8006f4c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d019      	beq.n	8006f16 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ee2:	4b16      	ldr	r3, [pc, #88]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ee6:	4a15      	ldr	r2, [pc, #84]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006ee8:	f043 0301 	orr.w	r3, r3, #1
 8006eec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eee:	f7fc fb7b 	bl	80035e8 <HAL_GetTick>
 8006ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ef4:	e008      	b.n	8006f08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ef6:	f7fc fb77 	bl	80035e8 <HAL_GetTick>
 8006efa:	4602      	mov	r2, r0
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d901      	bls.n	8006f08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e176      	b.n	80071f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f08:	4b0c      	ldr	r3, [pc, #48]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f0c:	f003 0302 	and.w	r3, r3, #2
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d0f0      	beq.n	8006ef6 <HAL_RCC_OscConfig+0x23a>
 8006f14:	e01a      	b.n	8006f4c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f16:	4b09      	ldr	r3, [pc, #36]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f1a:	4a08      	ldr	r2, [pc, #32]	; (8006f3c <HAL_RCC_OscConfig+0x280>)
 8006f1c:	f023 0301 	bic.w	r3, r3, #1
 8006f20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f22:	f7fc fb61 	bl	80035e8 <HAL_GetTick>
 8006f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f28:	e00a      	b.n	8006f40 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f2a:	f7fc fb5d 	bl	80035e8 <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d903      	bls.n	8006f40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e15c      	b.n	80071f6 <HAL_RCC_OscConfig+0x53a>
 8006f3c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f40:	4b91      	ldr	r3, [pc, #580]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 8006f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f44:	f003 0302 	and.w	r3, r3, #2
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1ee      	bne.n	8006f2a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0304 	and.w	r3, r3, #4
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 80a4 	beq.w	80070a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f5a:	4b8b      	ldr	r3, [pc, #556]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10d      	bne.n	8006f82 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f66:	4b88      	ldr	r3, [pc, #544]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 8006f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6a:	4a87      	ldr	r2, [pc, #540]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 8006f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f70:	6413      	str	r3, [r2, #64]	; 0x40
 8006f72:	4b85      	ldr	r3, [pc, #532]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 8006f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f7a:	60bb      	str	r3, [r7, #8]
 8006f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f82:	4b82      	ldr	r3, [pc, #520]	; (800718c <HAL_RCC_OscConfig+0x4d0>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d118      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006f8e:	4b7f      	ldr	r3, [pc, #508]	; (800718c <HAL_RCC_OscConfig+0x4d0>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a7e      	ldr	r2, [pc, #504]	; (800718c <HAL_RCC_OscConfig+0x4d0>)
 8006f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f9a:	f7fc fb25 	bl	80035e8 <HAL_GetTick>
 8006f9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fa0:	e008      	b.n	8006fb4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fa2:	f7fc fb21 	bl	80035e8 <HAL_GetTick>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	2b64      	cmp	r3, #100	; 0x64
 8006fae:	d901      	bls.n	8006fb4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e120      	b.n	80071f6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fb4:	4b75      	ldr	r3, [pc, #468]	; (800718c <HAL_RCC_OscConfig+0x4d0>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d0f0      	beq.n	8006fa2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d106      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x31a>
 8006fc8:	4b6f      	ldr	r3, [pc, #444]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 8006fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fcc:	4a6e      	ldr	r2, [pc, #440]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 8006fce:	f043 0301 	orr.w	r3, r3, #1
 8006fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8006fd4:	e02d      	b.n	8007032 <HAL_RCC_OscConfig+0x376>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10c      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x33c>
 8006fde:	4b6a      	ldr	r3, [pc, #424]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 8006fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe2:	4a69      	ldr	r2, [pc, #420]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 8006fe4:	f023 0301 	bic.w	r3, r3, #1
 8006fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8006fea:	4b67      	ldr	r3, [pc, #412]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 8006fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fee:	4a66      	ldr	r2, [pc, #408]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 8006ff0:	f023 0304 	bic.w	r3, r3, #4
 8006ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ff6:	e01c      	b.n	8007032 <HAL_RCC_OscConfig+0x376>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	2b05      	cmp	r3, #5
 8006ffe:	d10c      	bne.n	800701a <HAL_RCC_OscConfig+0x35e>
 8007000:	4b61      	ldr	r3, [pc, #388]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 8007002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007004:	4a60      	ldr	r2, [pc, #384]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 8007006:	f043 0304 	orr.w	r3, r3, #4
 800700a:	6713      	str	r3, [r2, #112]	; 0x70
 800700c:	4b5e      	ldr	r3, [pc, #376]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 800700e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007010:	4a5d      	ldr	r2, [pc, #372]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 8007012:	f043 0301 	orr.w	r3, r3, #1
 8007016:	6713      	str	r3, [r2, #112]	; 0x70
 8007018:	e00b      	b.n	8007032 <HAL_RCC_OscConfig+0x376>
 800701a:	4b5b      	ldr	r3, [pc, #364]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 800701c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701e:	4a5a      	ldr	r2, [pc, #360]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 8007020:	f023 0301 	bic.w	r3, r3, #1
 8007024:	6713      	str	r3, [r2, #112]	; 0x70
 8007026:	4b58      	ldr	r3, [pc, #352]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 8007028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800702a:	4a57      	ldr	r2, [pc, #348]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 800702c:	f023 0304 	bic.w	r3, r3, #4
 8007030:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d015      	beq.n	8007066 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800703a:	f7fc fad5 	bl	80035e8 <HAL_GetTick>
 800703e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007040:	e00a      	b.n	8007058 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007042:	f7fc fad1 	bl	80035e8 <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007050:	4293      	cmp	r3, r2
 8007052:	d901      	bls.n	8007058 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e0ce      	b.n	80071f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007058:	4b4b      	ldr	r3, [pc, #300]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 800705a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705c:	f003 0302 	and.w	r3, r3, #2
 8007060:	2b00      	cmp	r3, #0
 8007062:	d0ee      	beq.n	8007042 <HAL_RCC_OscConfig+0x386>
 8007064:	e014      	b.n	8007090 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007066:	f7fc fabf 	bl	80035e8 <HAL_GetTick>
 800706a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800706c:	e00a      	b.n	8007084 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800706e:	f7fc fabb 	bl	80035e8 <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	f241 3288 	movw	r2, #5000	; 0x1388
 800707c:	4293      	cmp	r3, r2
 800707e:	d901      	bls.n	8007084 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e0b8      	b.n	80071f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007084:	4b40      	ldr	r3, [pc, #256]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 8007086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007088:	f003 0302 	and.w	r3, r3, #2
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1ee      	bne.n	800706e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007090:	7dfb      	ldrb	r3, [r7, #23]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d105      	bne.n	80070a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007096:	4b3c      	ldr	r3, [pc, #240]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 8007098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709a:	4a3b      	ldr	r2, [pc, #236]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 800709c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f000 80a4 	beq.w	80071f4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070ac:	4b36      	ldr	r3, [pc, #216]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f003 030c 	and.w	r3, r3, #12
 80070b4:	2b08      	cmp	r3, #8
 80070b6:	d06b      	beq.n	8007190 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d149      	bne.n	8007154 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070c0:	4b31      	ldr	r3, [pc, #196]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a30      	ldr	r2, [pc, #192]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 80070c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070cc:	f7fc fa8c 	bl	80035e8 <HAL_GetTick>
 80070d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070d2:	e008      	b.n	80070e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070d4:	f7fc fa88 	bl	80035e8 <HAL_GetTick>
 80070d8:	4602      	mov	r2, r0
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d901      	bls.n	80070e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e087      	b.n	80071f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070e6:	4b28      	ldr	r3, [pc, #160]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1f0      	bne.n	80070d4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	69da      	ldr	r2, [r3, #28]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	431a      	orrs	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007100:	019b      	lsls	r3, r3, #6
 8007102:	431a      	orrs	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007108:	085b      	lsrs	r3, r3, #1
 800710a:	3b01      	subs	r3, #1
 800710c:	041b      	lsls	r3, r3, #16
 800710e:	431a      	orrs	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007114:	061b      	lsls	r3, r3, #24
 8007116:	4313      	orrs	r3, r2
 8007118:	4a1b      	ldr	r2, [pc, #108]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 800711a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800711e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007120:	4b19      	ldr	r3, [pc, #100]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a18      	ldr	r2, [pc, #96]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 8007126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800712a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800712c:	f7fc fa5c 	bl	80035e8 <HAL_GetTick>
 8007130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007132:	e008      	b.n	8007146 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007134:	f7fc fa58 	bl	80035e8 <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	2b02      	cmp	r3, #2
 8007140:	d901      	bls.n	8007146 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e057      	b.n	80071f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007146:	4b10      	ldr	r3, [pc, #64]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d0f0      	beq.n	8007134 <HAL_RCC_OscConfig+0x478>
 8007152:	e04f      	b.n	80071f4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007154:	4b0c      	ldr	r3, [pc, #48]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a0b      	ldr	r2, [pc, #44]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 800715a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800715e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007160:	f7fc fa42 	bl	80035e8 <HAL_GetTick>
 8007164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007166:	e008      	b.n	800717a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007168:	f7fc fa3e 	bl	80035e8 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	2b02      	cmp	r3, #2
 8007174:	d901      	bls.n	800717a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e03d      	b.n	80071f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800717a:	4b03      	ldr	r3, [pc, #12]	; (8007188 <HAL_RCC_OscConfig+0x4cc>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1f0      	bne.n	8007168 <HAL_RCC_OscConfig+0x4ac>
 8007186:	e035      	b.n	80071f4 <HAL_RCC_OscConfig+0x538>
 8007188:	40023800 	.word	0x40023800
 800718c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007190:	4b1b      	ldr	r3, [pc, #108]	; (8007200 <HAL_RCC_OscConfig+0x544>)
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d028      	beq.n	80071f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d121      	bne.n	80071f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d11a      	bne.n	80071f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80071c0:	4013      	ands	r3, r2
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d111      	bne.n	80071f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d6:	085b      	lsrs	r3, r3, #1
 80071d8:	3b01      	subs	r3, #1
 80071da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80071dc:	429a      	cmp	r2, r3
 80071de:	d107      	bne.n	80071f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d001      	beq.n	80071f4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e000      	b.n	80071f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3718      	adds	r7, #24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	40023800 	.word	0x40023800

08007204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e0d0      	b.n	80073be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800721c:	4b6a      	ldr	r3, [pc, #424]	; (80073c8 <HAL_RCC_ClockConfig+0x1c4>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 030f 	and.w	r3, r3, #15
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	429a      	cmp	r2, r3
 8007228:	d910      	bls.n	800724c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800722a:	4b67      	ldr	r3, [pc, #412]	; (80073c8 <HAL_RCC_ClockConfig+0x1c4>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f023 020f 	bic.w	r2, r3, #15
 8007232:	4965      	ldr	r1, [pc, #404]	; (80073c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	4313      	orrs	r3, r2
 8007238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800723a:	4b63      	ldr	r3, [pc, #396]	; (80073c8 <HAL_RCC_ClockConfig+0x1c4>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 030f 	and.w	r3, r3, #15
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	429a      	cmp	r2, r3
 8007246:	d001      	beq.n	800724c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e0b8      	b.n	80073be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b00      	cmp	r3, #0
 8007256:	d020      	beq.n	800729a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0304 	and.w	r3, r3, #4
 8007260:	2b00      	cmp	r3, #0
 8007262:	d005      	beq.n	8007270 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007264:	4b59      	ldr	r3, [pc, #356]	; (80073cc <HAL_RCC_ClockConfig+0x1c8>)
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	4a58      	ldr	r2, [pc, #352]	; (80073cc <HAL_RCC_ClockConfig+0x1c8>)
 800726a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800726e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0308 	and.w	r3, r3, #8
 8007278:	2b00      	cmp	r3, #0
 800727a:	d005      	beq.n	8007288 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800727c:	4b53      	ldr	r3, [pc, #332]	; (80073cc <HAL_RCC_ClockConfig+0x1c8>)
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	4a52      	ldr	r2, [pc, #328]	; (80073cc <HAL_RCC_ClockConfig+0x1c8>)
 8007282:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007286:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007288:	4b50      	ldr	r3, [pc, #320]	; (80073cc <HAL_RCC_ClockConfig+0x1c8>)
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	494d      	ldr	r1, [pc, #308]	; (80073cc <HAL_RCC_ClockConfig+0x1c8>)
 8007296:	4313      	orrs	r3, r2
 8007298:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d040      	beq.n	8007328 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d107      	bne.n	80072be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072ae:	4b47      	ldr	r3, [pc, #284]	; (80073cc <HAL_RCC_ClockConfig+0x1c8>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d115      	bne.n	80072e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e07f      	b.n	80073be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d107      	bne.n	80072d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072c6:	4b41      	ldr	r3, [pc, #260]	; (80073cc <HAL_RCC_ClockConfig+0x1c8>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d109      	bne.n	80072e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e073      	b.n	80073be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072d6:	4b3d      	ldr	r3, [pc, #244]	; (80073cc <HAL_RCC_ClockConfig+0x1c8>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 0302 	and.w	r3, r3, #2
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e06b      	b.n	80073be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072e6:	4b39      	ldr	r3, [pc, #228]	; (80073cc <HAL_RCC_ClockConfig+0x1c8>)
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f023 0203 	bic.w	r2, r3, #3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	4936      	ldr	r1, [pc, #216]	; (80073cc <HAL_RCC_ClockConfig+0x1c8>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072f8:	f7fc f976 	bl	80035e8 <HAL_GetTick>
 80072fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072fe:	e00a      	b.n	8007316 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007300:	f7fc f972 	bl	80035e8 <HAL_GetTick>
 8007304:	4602      	mov	r2, r0
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	f241 3288 	movw	r2, #5000	; 0x1388
 800730e:	4293      	cmp	r3, r2
 8007310:	d901      	bls.n	8007316 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e053      	b.n	80073be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007316:	4b2d      	ldr	r3, [pc, #180]	; (80073cc <HAL_RCC_ClockConfig+0x1c8>)
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f003 020c 	and.w	r2, r3, #12
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	429a      	cmp	r2, r3
 8007326:	d1eb      	bne.n	8007300 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007328:	4b27      	ldr	r3, [pc, #156]	; (80073c8 <HAL_RCC_ClockConfig+0x1c4>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 030f 	and.w	r3, r3, #15
 8007330:	683a      	ldr	r2, [r7, #0]
 8007332:	429a      	cmp	r2, r3
 8007334:	d210      	bcs.n	8007358 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007336:	4b24      	ldr	r3, [pc, #144]	; (80073c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f023 020f 	bic.w	r2, r3, #15
 800733e:	4922      	ldr	r1, [pc, #136]	; (80073c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	4313      	orrs	r3, r2
 8007344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007346:	4b20      	ldr	r3, [pc, #128]	; (80073c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 030f 	and.w	r3, r3, #15
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	429a      	cmp	r2, r3
 8007352:	d001      	beq.n	8007358 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e032      	b.n	80073be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0304 	and.w	r3, r3, #4
 8007360:	2b00      	cmp	r3, #0
 8007362:	d008      	beq.n	8007376 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007364:	4b19      	ldr	r3, [pc, #100]	; (80073cc <HAL_RCC_ClockConfig+0x1c8>)
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	4916      	ldr	r1, [pc, #88]	; (80073cc <HAL_RCC_ClockConfig+0x1c8>)
 8007372:	4313      	orrs	r3, r2
 8007374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 0308 	and.w	r3, r3, #8
 800737e:	2b00      	cmp	r3, #0
 8007380:	d009      	beq.n	8007396 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007382:	4b12      	ldr	r3, [pc, #72]	; (80073cc <HAL_RCC_ClockConfig+0x1c8>)
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	00db      	lsls	r3, r3, #3
 8007390:	490e      	ldr	r1, [pc, #56]	; (80073cc <HAL_RCC_ClockConfig+0x1c8>)
 8007392:	4313      	orrs	r3, r2
 8007394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007396:	f000 f821 	bl	80073dc <HAL_RCC_GetSysClockFreq>
 800739a:	4602      	mov	r2, r0
 800739c:	4b0b      	ldr	r3, [pc, #44]	; (80073cc <HAL_RCC_ClockConfig+0x1c8>)
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	091b      	lsrs	r3, r3, #4
 80073a2:	f003 030f 	and.w	r3, r3, #15
 80073a6:	490a      	ldr	r1, [pc, #40]	; (80073d0 <HAL_RCC_ClockConfig+0x1cc>)
 80073a8:	5ccb      	ldrb	r3, [r1, r3]
 80073aa:	fa22 f303 	lsr.w	r3, r2, r3
 80073ae:	4a09      	ldr	r2, [pc, #36]	; (80073d4 <HAL_RCC_ClockConfig+0x1d0>)
 80073b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80073b2:	4b09      	ldr	r3, [pc, #36]	; (80073d8 <HAL_RCC_ClockConfig+0x1d4>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fc f8d2 	bl	8003560 <HAL_InitTick>

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	40023c00 	.word	0x40023c00
 80073cc:	40023800 	.word	0x40023800
 80073d0:	080112a0 	.word	0x080112a0
 80073d4:	20000000 	.word	0x20000000
 80073d8:	20000004 	.word	0x20000004

080073dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073dc:	b5b0      	push	{r4, r5, r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80073e2:	2100      	movs	r1, #0
 80073e4:	6079      	str	r1, [r7, #4]
 80073e6:	2100      	movs	r1, #0
 80073e8:	60f9      	str	r1, [r7, #12]
 80073ea:	2100      	movs	r1, #0
 80073ec:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80073ee:	2100      	movs	r1, #0
 80073f0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073f2:	4952      	ldr	r1, [pc, #328]	; (800753c <HAL_RCC_GetSysClockFreq+0x160>)
 80073f4:	6889      	ldr	r1, [r1, #8]
 80073f6:	f001 010c 	and.w	r1, r1, #12
 80073fa:	2908      	cmp	r1, #8
 80073fc:	d00d      	beq.n	800741a <HAL_RCC_GetSysClockFreq+0x3e>
 80073fe:	2908      	cmp	r1, #8
 8007400:	f200 8094 	bhi.w	800752c <HAL_RCC_GetSysClockFreq+0x150>
 8007404:	2900      	cmp	r1, #0
 8007406:	d002      	beq.n	800740e <HAL_RCC_GetSysClockFreq+0x32>
 8007408:	2904      	cmp	r1, #4
 800740a:	d003      	beq.n	8007414 <HAL_RCC_GetSysClockFreq+0x38>
 800740c:	e08e      	b.n	800752c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800740e:	4b4c      	ldr	r3, [pc, #304]	; (8007540 <HAL_RCC_GetSysClockFreq+0x164>)
 8007410:	60bb      	str	r3, [r7, #8]
      break;
 8007412:	e08e      	b.n	8007532 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007414:	4b4b      	ldr	r3, [pc, #300]	; (8007544 <HAL_RCC_GetSysClockFreq+0x168>)
 8007416:	60bb      	str	r3, [r7, #8]
      break;
 8007418:	e08b      	b.n	8007532 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800741a:	4948      	ldr	r1, [pc, #288]	; (800753c <HAL_RCC_GetSysClockFreq+0x160>)
 800741c:	6849      	ldr	r1, [r1, #4]
 800741e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007422:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007424:	4945      	ldr	r1, [pc, #276]	; (800753c <HAL_RCC_GetSysClockFreq+0x160>)
 8007426:	6849      	ldr	r1, [r1, #4]
 8007428:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800742c:	2900      	cmp	r1, #0
 800742e:	d024      	beq.n	800747a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007430:	4942      	ldr	r1, [pc, #264]	; (800753c <HAL_RCC_GetSysClockFreq+0x160>)
 8007432:	6849      	ldr	r1, [r1, #4]
 8007434:	0989      	lsrs	r1, r1, #6
 8007436:	4608      	mov	r0, r1
 8007438:	f04f 0100 	mov.w	r1, #0
 800743c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007440:	f04f 0500 	mov.w	r5, #0
 8007444:	ea00 0204 	and.w	r2, r0, r4
 8007448:	ea01 0305 	and.w	r3, r1, r5
 800744c:	493d      	ldr	r1, [pc, #244]	; (8007544 <HAL_RCC_GetSysClockFreq+0x168>)
 800744e:	fb01 f003 	mul.w	r0, r1, r3
 8007452:	2100      	movs	r1, #0
 8007454:	fb01 f102 	mul.w	r1, r1, r2
 8007458:	1844      	adds	r4, r0, r1
 800745a:	493a      	ldr	r1, [pc, #232]	; (8007544 <HAL_RCC_GetSysClockFreq+0x168>)
 800745c:	fba2 0101 	umull	r0, r1, r2, r1
 8007460:	1863      	adds	r3, r4, r1
 8007462:	4619      	mov	r1, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	461a      	mov	r2, r3
 8007468:	f04f 0300 	mov.w	r3, #0
 800746c:	f7f9 fc0c 	bl	8000c88 <__aeabi_uldivmod>
 8007470:	4602      	mov	r2, r0
 8007472:	460b      	mov	r3, r1
 8007474:	4613      	mov	r3, r2
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	e04a      	b.n	8007510 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800747a:	4b30      	ldr	r3, [pc, #192]	; (800753c <HAL_RCC_GetSysClockFreq+0x160>)
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	099b      	lsrs	r3, r3, #6
 8007480:	461a      	mov	r2, r3
 8007482:	f04f 0300 	mov.w	r3, #0
 8007486:	f240 10ff 	movw	r0, #511	; 0x1ff
 800748a:	f04f 0100 	mov.w	r1, #0
 800748e:	ea02 0400 	and.w	r4, r2, r0
 8007492:	ea03 0501 	and.w	r5, r3, r1
 8007496:	4620      	mov	r0, r4
 8007498:	4629      	mov	r1, r5
 800749a:	f04f 0200 	mov.w	r2, #0
 800749e:	f04f 0300 	mov.w	r3, #0
 80074a2:	014b      	lsls	r3, r1, #5
 80074a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80074a8:	0142      	lsls	r2, r0, #5
 80074aa:	4610      	mov	r0, r2
 80074ac:	4619      	mov	r1, r3
 80074ae:	1b00      	subs	r0, r0, r4
 80074b0:	eb61 0105 	sbc.w	r1, r1, r5
 80074b4:	f04f 0200 	mov.w	r2, #0
 80074b8:	f04f 0300 	mov.w	r3, #0
 80074bc:	018b      	lsls	r3, r1, #6
 80074be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80074c2:	0182      	lsls	r2, r0, #6
 80074c4:	1a12      	subs	r2, r2, r0
 80074c6:	eb63 0301 	sbc.w	r3, r3, r1
 80074ca:	f04f 0000 	mov.w	r0, #0
 80074ce:	f04f 0100 	mov.w	r1, #0
 80074d2:	00d9      	lsls	r1, r3, #3
 80074d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80074d8:	00d0      	lsls	r0, r2, #3
 80074da:	4602      	mov	r2, r0
 80074dc:	460b      	mov	r3, r1
 80074de:	1912      	adds	r2, r2, r4
 80074e0:	eb45 0303 	adc.w	r3, r5, r3
 80074e4:	f04f 0000 	mov.w	r0, #0
 80074e8:	f04f 0100 	mov.w	r1, #0
 80074ec:	0299      	lsls	r1, r3, #10
 80074ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80074f2:	0290      	lsls	r0, r2, #10
 80074f4:	4602      	mov	r2, r0
 80074f6:	460b      	mov	r3, r1
 80074f8:	4610      	mov	r0, r2
 80074fa:	4619      	mov	r1, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	461a      	mov	r2, r3
 8007500:	f04f 0300 	mov.w	r3, #0
 8007504:	f7f9 fbc0 	bl	8000c88 <__aeabi_uldivmod>
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	4613      	mov	r3, r2
 800750e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007510:	4b0a      	ldr	r3, [pc, #40]	; (800753c <HAL_RCC_GetSysClockFreq+0x160>)
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	0c1b      	lsrs	r3, r3, #16
 8007516:	f003 0303 	and.w	r3, r3, #3
 800751a:	3301      	adds	r3, #1
 800751c:	005b      	lsls	r3, r3, #1
 800751e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	fbb2 f3f3 	udiv	r3, r2, r3
 8007528:	60bb      	str	r3, [r7, #8]
      break;
 800752a:	e002      	b.n	8007532 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800752c:	4b04      	ldr	r3, [pc, #16]	; (8007540 <HAL_RCC_GetSysClockFreq+0x164>)
 800752e:	60bb      	str	r3, [r7, #8]
      break;
 8007530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007532:	68bb      	ldr	r3, [r7, #8]
}
 8007534:	4618      	mov	r0, r3
 8007536:	3710      	adds	r7, #16
 8007538:	46bd      	mov	sp, r7
 800753a:	bdb0      	pop	{r4, r5, r7, pc}
 800753c:	40023800 	.word	0x40023800
 8007540:	00f42400 	.word	0x00f42400
 8007544:	017d7840 	.word	0x017d7840

08007548 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007548:	b480      	push	{r7}
 800754a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800754c:	4b03      	ldr	r3, [pc, #12]	; (800755c <HAL_RCC_GetHCLKFreq+0x14>)
 800754e:	681b      	ldr	r3, [r3, #0]
}
 8007550:	4618      	mov	r0, r3
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	20000000 	.word	0x20000000

08007560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007564:	f7ff fff0 	bl	8007548 <HAL_RCC_GetHCLKFreq>
 8007568:	4602      	mov	r2, r0
 800756a:	4b05      	ldr	r3, [pc, #20]	; (8007580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	0a9b      	lsrs	r3, r3, #10
 8007570:	f003 0307 	and.w	r3, r3, #7
 8007574:	4903      	ldr	r1, [pc, #12]	; (8007584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007576:	5ccb      	ldrb	r3, [r1, r3]
 8007578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800757c:	4618      	mov	r0, r3
 800757e:	bd80      	pop	{r7, pc}
 8007580:	40023800 	.word	0x40023800
 8007584:	080112b0 	.word	0x080112b0

08007588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800758c:	f7ff ffdc 	bl	8007548 <HAL_RCC_GetHCLKFreq>
 8007590:	4602      	mov	r2, r0
 8007592:	4b05      	ldr	r3, [pc, #20]	; (80075a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	0b5b      	lsrs	r3, r3, #13
 8007598:	f003 0307 	and.w	r3, r3, #7
 800759c:	4903      	ldr	r1, [pc, #12]	; (80075ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800759e:	5ccb      	ldrb	r3, [r1, r3]
 80075a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	40023800 	.word	0x40023800
 80075ac:	080112b0 	.word	0x080112b0

080075b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b088      	sub	sp, #32
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80075b8:	2300      	movs	r3, #0
 80075ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80075bc:	2300      	movs	r3, #0
 80075be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80075c0:	2300      	movs	r3, #0
 80075c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80075c4:	2300      	movs	r3, #0
 80075c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80075c8:	2300      	movs	r3, #0
 80075ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d012      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80075d8:	4b69      	ldr	r3, [pc, #420]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	4a68      	ldr	r2, [pc, #416]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80075e2:	6093      	str	r3, [r2, #8]
 80075e4:	4b66      	ldr	r3, [pc, #408]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075e6:	689a      	ldr	r2, [r3, #8]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ec:	4964      	ldr	r1, [pc, #400]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075ee:	4313      	orrs	r3, r2
 80075f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d101      	bne.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80075fa:	2301      	movs	r3, #1
 80075fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d017      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800760a:	4b5d      	ldr	r3, [pc, #372]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800760c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007610:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007618:	4959      	ldr	r1, [pc, #356]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800761a:	4313      	orrs	r3, r2
 800761c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007628:	d101      	bne.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800762a:	2301      	movs	r3, #1
 800762c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007632:	2b00      	cmp	r3, #0
 8007634:	d101      	bne.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007636:	2301      	movs	r3, #1
 8007638:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d017      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007646:	4b4e      	ldr	r3, [pc, #312]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800764c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007654:	494a      	ldr	r1, [pc, #296]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007656:	4313      	orrs	r3, r2
 8007658:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007660:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007664:	d101      	bne.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007666:	2301      	movs	r3, #1
 8007668:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007672:	2301      	movs	r3, #1
 8007674:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007682:	2301      	movs	r3, #1
 8007684:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0320 	and.w	r3, r3, #32
 800768e:	2b00      	cmp	r3, #0
 8007690:	f000 808b 	beq.w	80077aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007694:	4b3a      	ldr	r3, [pc, #232]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007698:	4a39      	ldr	r2, [pc, #228]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800769a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800769e:	6413      	str	r3, [r2, #64]	; 0x40
 80076a0:	4b37      	ldr	r3, [pc, #220]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076a8:	60bb      	str	r3, [r7, #8]
 80076aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80076ac:	4b35      	ldr	r3, [pc, #212]	; (8007784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a34      	ldr	r2, [pc, #208]	; (8007784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80076b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076b8:	f7fb ff96 	bl	80035e8 <HAL_GetTick>
 80076bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80076be:	e008      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076c0:	f7fb ff92 	bl	80035e8 <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	2b64      	cmp	r3, #100	; 0x64
 80076cc:	d901      	bls.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e357      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80076d2:	4b2c      	ldr	r3, [pc, #176]	; (8007784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d0f0      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80076de:	4b28      	ldr	r3, [pc, #160]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d035      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d02e      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80076fc:	4b20      	ldr	r3, [pc, #128]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007704:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007706:	4b1e      	ldr	r3, [pc, #120]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800770a:	4a1d      	ldr	r2, [pc, #116]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800770c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007710:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007712:	4b1b      	ldr	r3, [pc, #108]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007716:	4a1a      	ldr	r2, [pc, #104]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800771c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800771e:	4a18      	ldr	r2, [pc, #96]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007724:	4b16      	ldr	r3, [pc, #88]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007728:	f003 0301 	and.w	r3, r3, #1
 800772c:	2b01      	cmp	r3, #1
 800772e:	d114      	bne.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007730:	f7fb ff5a 	bl	80035e8 <HAL_GetTick>
 8007734:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007736:	e00a      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007738:	f7fb ff56 	bl	80035e8 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	f241 3288 	movw	r2, #5000	; 0x1388
 8007746:	4293      	cmp	r3, r2
 8007748:	d901      	bls.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e319      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800774e:	4b0c      	ldr	r3, [pc, #48]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007752:	f003 0302 	and.w	r3, r3, #2
 8007756:	2b00      	cmp	r3, #0
 8007758:	d0ee      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007762:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007766:	d111      	bne.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007768:	4b05      	ldr	r3, [pc, #20]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007774:	4b04      	ldr	r3, [pc, #16]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007776:	400b      	ands	r3, r1
 8007778:	4901      	ldr	r1, [pc, #4]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800777a:	4313      	orrs	r3, r2
 800777c:	608b      	str	r3, [r1, #8]
 800777e:	e00b      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007780:	40023800 	.word	0x40023800
 8007784:	40007000 	.word	0x40007000
 8007788:	0ffffcff 	.word	0x0ffffcff
 800778c:	4bb1      	ldr	r3, [pc, #708]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	4ab0      	ldr	r2, [pc, #704]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007792:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007796:	6093      	str	r3, [r2, #8]
 8007798:	4bae      	ldr	r3, [pc, #696]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800779a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077a4:	49ab      	ldr	r1, [pc, #684]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80077a6:	4313      	orrs	r3, r2
 80077a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0310 	and.w	r3, r3, #16
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d010      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80077b6:	4ba7      	ldr	r3, [pc, #668]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80077b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077bc:	4aa5      	ldr	r2, [pc, #660]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80077be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80077c6:	4ba3      	ldr	r3, [pc, #652]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80077c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d0:	49a0      	ldr	r1, [pc, #640]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80077d2:	4313      	orrs	r3, r2
 80077d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00a      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80077e4:	4b9b      	ldr	r3, [pc, #620]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80077e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077f2:	4998      	ldr	r1, [pc, #608]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80077f4:	4313      	orrs	r3, r2
 80077f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00a      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007806:	4b93      	ldr	r3, [pc, #588]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800780c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007814:	498f      	ldr	r1, [pc, #572]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007816:	4313      	orrs	r3, r2
 8007818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00a      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007828:	4b8a      	ldr	r3, [pc, #552]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800782a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800782e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007836:	4987      	ldr	r1, [pc, #540]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007838:	4313      	orrs	r3, r2
 800783a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00a      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800784a:	4b82      	ldr	r3, [pc, #520]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800784c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007850:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007858:	497e      	ldr	r1, [pc, #504]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800785a:	4313      	orrs	r3, r2
 800785c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00a      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800786c:	4b79      	ldr	r3, [pc, #484]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800786e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007872:	f023 0203 	bic.w	r2, r3, #3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800787a:	4976      	ldr	r1, [pc, #472]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800787c:	4313      	orrs	r3, r2
 800787e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00a      	beq.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800788e:	4b71      	ldr	r3, [pc, #452]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007894:	f023 020c 	bic.w	r2, r3, #12
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800789c:	496d      	ldr	r1, [pc, #436]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00a      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80078b0:	4b68      	ldr	r3, [pc, #416]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80078b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078be:	4965      	ldr	r1, [pc, #404]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00a      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80078d2:	4b60      	ldr	r3, [pc, #384]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80078d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078e0:	495c      	ldr	r1, [pc, #368]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00a      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80078f4:	4b57      	ldr	r3, [pc, #348]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80078f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007902:	4954      	ldr	r1, [pc, #336]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007904:	4313      	orrs	r3, r2
 8007906:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00a      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007916:	4b4f      	ldr	r3, [pc, #316]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800791c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007924:	494b      	ldr	r1, [pc, #300]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007926:	4313      	orrs	r3, r2
 8007928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00a      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007938:	4b46      	ldr	r3, [pc, #280]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800793a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800793e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007946:	4943      	ldr	r1, [pc, #268]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007948:	4313      	orrs	r3, r2
 800794a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00a      	beq.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800795a:	4b3e      	ldr	r3, [pc, #248]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800795c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007960:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007968:	493a      	ldr	r1, [pc, #232]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800796a:	4313      	orrs	r3, r2
 800796c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00a      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800797c:	4b35      	ldr	r3, [pc, #212]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800797e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007982:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800798a:	4932      	ldr	r1, [pc, #200]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800798c:	4313      	orrs	r3, r2
 800798e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d011      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800799e:	4b2d      	ldr	r3, [pc, #180]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079ac:	4929      	ldr	r1, [pc, #164]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079ae:	4313      	orrs	r3, r2
 80079b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079bc:	d101      	bne.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80079be:	2301      	movs	r3, #1
 80079c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 0308 	and.w	r3, r3, #8
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80079ce:	2301      	movs	r3, #1
 80079d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00a      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80079de:	4b1d      	ldr	r3, [pc, #116]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ec:	4919      	ldr	r1, [pc, #100]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00b      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007a00:	4b14      	ldr	r3, [pc, #80]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a06:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a10:	4910      	ldr	r1, [pc, #64]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a12:	4313      	orrs	r3, r2
 8007a14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d006      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f000 80d9 	beq.w	8007bde <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007a2c:	4b09      	ldr	r3, [pc, #36]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a08      	ldr	r2, [pc, #32]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a38:	f7fb fdd6 	bl	80035e8 <HAL_GetTick>
 8007a3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a3e:	e00b      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007a40:	f7fb fdd2 	bl	80035e8 <HAL_GetTick>
 8007a44:	4602      	mov	r2, r0
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	2b64      	cmp	r3, #100	; 0x64
 8007a4c:	d904      	bls.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e197      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007a52:	bf00      	nop
 8007a54:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a58:	4b6c      	ldr	r3, [pc, #432]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1ed      	bne.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d021      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d11d      	bne.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007a78:	4b64      	ldr	r3, [pc, #400]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a7e:	0c1b      	lsrs	r3, r3, #16
 8007a80:	f003 0303 	and.w	r3, r3, #3
 8007a84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007a86:	4b61      	ldr	r3, [pc, #388]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a8c:	0e1b      	lsrs	r3, r3, #24
 8007a8e:	f003 030f 	and.w	r3, r3, #15
 8007a92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	019a      	lsls	r2, r3, #6
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	041b      	lsls	r3, r3, #16
 8007a9e:	431a      	orrs	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	061b      	lsls	r3, r3, #24
 8007aa4:	431a      	orrs	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	071b      	lsls	r3, r3, #28
 8007aac:	4957      	ldr	r1, [pc, #348]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d004      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ac8:	d00a      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d02e      	beq.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ada:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ade:	d129      	bne.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007ae0:	4b4a      	ldr	r3, [pc, #296]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ae6:	0c1b      	lsrs	r3, r3, #16
 8007ae8:	f003 0303 	and.w	r3, r3, #3
 8007aec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007aee:	4b47      	ldr	r3, [pc, #284]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007af4:	0f1b      	lsrs	r3, r3, #28
 8007af6:	f003 0307 	and.w	r3, r3, #7
 8007afa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	019a      	lsls	r2, r3, #6
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	041b      	lsls	r3, r3, #16
 8007b06:	431a      	orrs	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	061b      	lsls	r3, r3, #24
 8007b0e:	431a      	orrs	r2, r3
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	071b      	lsls	r3, r3, #28
 8007b14:	493d      	ldr	r1, [pc, #244]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007b1c:	4b3b      	ldr	r3, [pc, #236]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b22:	f023 021f 	bic.w	r2, r3, #31
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	4937      	ldr	r1, [pc, #220]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d01d      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007b40:	4b32      	ldr	r3, [pc, #200]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b46:	0e1b      	lsrs	r3, r3, #24
 8007b48:	f003 030f 	and.w	r3, r3, #15
 8007b4c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007b4e:	4b2f      	ldr	r3, [pc, #188]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b54:	0f1b      	lsrs	r3, r3, #28
 8007b56:	f003 0307 	and.w	r3, r3, #7
 8007b5a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	019a      	lsls	r2, r3, #6
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	041b      	lsls	r3, r3, #16
 8007b68:	431a      	orrs	r2, r3
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	061b      	lsls	r3, r3, #24
 8007b6e:	431a      	orrs	r2, r3
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	071b      	lsls	r3, r3, #28
 8007b74:	4925      	ldr	r1, [pc, #148]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b76:	4313      	orrs	r3, r2
 8007b78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d011      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	019a      	lsls	r2, r3, #6
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	041b      	lsls	r3, r3, #16
 8007b94:	431a      	orrs	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	061b      	lsls	r3, r3, #24
 8007b9c:	431a      	orrs	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	071b      	lsls	r3, r3, #28
 8007ba4:	4919      	ldr	r1, [pc, #100]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007bac:	4b17      	ldr	r3, [pc, #92]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a16      	ldr	r2, [pc, #88]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007bb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bb8:	f7fb fd16 	bl	80035e8 <HAL_GetTick>
 8007bbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007bbe:	e008      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007bc0:	f7fb fd12 	bl	80035e8 <HAL_GetTick>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	2b64      	cmp	r3, #100	; 0x64
 8007bcc:	d901      	bls.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	e0d7      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007bd2:	4b0e      	ldr	r3, [pc, #56]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d0f0      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	f040 80cd 	bne.w	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007be6:	4b09      	ldr	r3, [pc, #36]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a08      	ldr	r2, [pc, #32]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bf2:	f7fb fcf9 	bl	80035e8 <HAL_GetTick>
 8007bf6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007bf8:	e00a      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007bfa:	f7fb fcf5 	bl	80035e8 <HAL_GetTick>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	2b64      	cmp	r3, #100	; 0x64
 8007c06:	d903      	bls.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e0ba      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007c0c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007c10:	4b5e      	ldr	r3, [pc, #376]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c1c:	d0ed      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d009      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d02e      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d12a      	bne.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007c46:	4b51      	ldr	r3, [pc, #324]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c4c:	0c1b      	lsrs	r3, r3, #16
 8007c4e:	f003 0303 	and.w	r3, r3, #3
 8007c52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007c54:	4b4d      	ldr	r3, [pc, #308]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c5a:	0f1b      	lsrs	r3, r3, #28
 8007c5c:	f003 0307 	and.w	r3, r3, #7
 8007c60:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	019a      	lsls	r2, r3, #6
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	041b      	lsls	r3, r3, #16
 8007c6c:	431a      	orrs	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	699b      	ldr	r3, [r3, #24]
 8007c72:	061b      	lsls	r3, r3, #24
 8007c74:	431a      	orrs	r2, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	071b      	lsls	r3, r3, #28
 8007c7a:	4944      	ldr	r1, [pc, #272]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007c82:	4b42      	ldr	r3, [pc, #264]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c88:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c90:	3b01      	subs	r3, #1
 8007c92:	021b      	lsls	r3, r3, #8
 8007c94:	493d      	ldr	r1, [pc, #244]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d022      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cb0:	d11d      	bne.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007cb2:	4b36      	ldr	r3, [pc, #216]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cb8:	0e1b      	lsrs	r3, r3, #24
 8007cba:	f003 030f 	and.w	r3, r3, #15
 8007cbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007cc0:	4b32      	ldr	r3, [pc, #200]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cc6:	0f1b      	lsrs	r3, r3, #28
 8007cc8:	f003 0307 	and.w	r3, r3, #7
 8007ccc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	019a      	lsls	r2, r3, #6
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a1b      	ldr	r3, [r3, #32]
 8007cd8:	041b      	lsls	r3, r3, #16
 8007cda:	431a      	orrs	r2, r3
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	061b      	lsls	r3, r3, #24
 8007ce0:	431a      	orrs	r2, r3
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	071b      	lsls	r3, r3, #28
 8007ce6:	4929      	ldr	r1, [pc, #164]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0308 	and.w	r3, r3, #8
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d028      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007cfa:	4b24      	ldr	r3, [pc, #144]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d00:	0e1b      	lsrs	r3, r3, #24
 8007d02:	f003 030f 	and.w	r3, r3, #15
 8007d06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007d08:	4b20      	ldr	r3, [pc, #128]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d0e:	0c1b      	lsrs	r3, r3, #16
 8007d10:	f003 0303 	and.w	r3, r3, #3
 8007d14:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	019a      	lsls	r2, r3, #6
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	041b      	lsls	r3, r3, #16
 8007d20:	431a      	orrs	r2, r3
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	061b      	lsls	r3, r3, #24
 8007d26:	431a      	orrs	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	69db      	ldr	r3, [r3, #28]
 8007d2c:	071b      	lsls	r3, r3, #28
 8007d2e:	4917      	ldr	r1, [pc, #92]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d30:	4313      	orrs	r3, r2
 8007d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007d36:	4b15      	ldr	r3, [pc, #84]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d44:	4911      	ldr	r1, [pc, #68]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d46:	4313      	orrs	r3, r2
 8007d48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007d4c:	4b0f      	ldr	r3, [pc, #60]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a0e      	ldr	r2, [pc, #56]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d58:	f7fb fc46 	bl	80035e8 <HAL_GetTick>
 8007d5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007d5e:	e008      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007d60:	f7fb fc42 	bl	80035e8 <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	2b64      	cmp	r3, #100	; 0x64
 8007d6c:	d901      	bls.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e007      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007d72:	4b06      	ldr	r3, [pc, #24]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d7e:	d1ef      	bne.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3720      	adds	r7, #32
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	40023800 	.word	0x40023800

08007d90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b087      	sub	sp, #28
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007da0:	2300      	movs	r3, #0
 8007da2:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007da4:	2300      	movs	r3, #0
 8007da6:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007dae:	f040 808c 	bne.w	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007db2:	4b95      	ldr	r3, [pc, #596]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007db8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007dc0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dc8:	d07c      	beq.n	8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dd0:	d87d      	bhi.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d004      	beq.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dde:	d039      	beq.n	8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007de0:	e075      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007de2:	4b89      	ldr	r3, [pc, #548]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d108      	bne.n	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007dee:	4b86      	ldr	r3, [pc, #536]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007df6:	4a85      	ldr	r2, [pc, #532]	; (800800c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dfc:	613b      	str	r3, [r7, #16]
 8007dfe:	e007      	b.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007e00:	4b81      	ldr	r3, [pc, #516]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e08:	4a81      	ldr	r2, [pc, #516]	; (8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e0e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007e10:	4b7d      	ldr	r3, [pc, #500]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e16:	0e1b      	lsrs	r3, r3, #24
 8007e18:	f003 030f 	and.w	r3, r3, #15
 8007e1c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007e1e:	4b7a      	ldr	r3, [pc, #488]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e24:	099b      	lsrs	r3, r3, #6
 8007e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e2a:	693a      	ldr	r2, [r7, #16]
 8007e2c:	fb02 f203 	mul.w	r2, r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e36:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007e38:	4b73      	ldr	r3, [pc, #460]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e3e:	0a1b      	lsrs	r3, r3, #8
 8007e40:	f003 031f 	and.w	r3, r3, #31
 8007e44:	3301      	adds	r3, #1
 8007e46:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007e48:	697a      	ldr	r2, [r7, #20]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e50:	617b      	str	r3, [r7, #20]
        break;
 8007e52:	e03d      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007e54:	4b6c      	ldr	r3, [pc, #432]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d108      	bne.n	8007e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007e60:	4b69      	ldr	r3, [pc, #420]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e68:	4a68      	ldr	r2, [pc, #416]	; (800800c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e6e:	613b      	str	r3, [r7, #16]
 8007e70:	e007      	b.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007e72:	4b65      	ldr	r3, [pc, #404]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e7a:	4a65      	ldr	r2, [pc, #404]	; (8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e80:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007e82:	4b61      	ldr	r3, [pc, #388]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e88:	0e1b      	lsrs	r3, r3, #24
 8007e8a:	f003 030f 	and.w	r3, r3, #15
 8007e8e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007e90:	4b5d      	ldr	r3, [pc, #372]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e96:	099b      	lsrs	r3, r3, #6
 8007e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	fb02 f203 	mul.w	r2, r2, r3
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007eaa:	4b57      	ldr	r3, [pc, #348]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eb0:	f003 031f 	and.w	r3, r3, #31
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec0:	617b      	str	r3, [r7, #20]
        break;
 8007ec2:	e005      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007ec4:	4b53      	ldr	r3, [pc, #332]	; (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007ec6:	617b      	str	r3, [r7, #20]
        break;
 8007ec8:	e002      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 8007eca:	bf00      	nop
 8007ecc:	e000      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 8007ece:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ed6:	f040 808c 	bne.w	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007eda:	4b4b      	ldr	r3, [pc, #300]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ee0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007ee8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ef0:	d07c      	beq.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ef8:	d87d      	bhi.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d004      	beq.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f06:	d039      	beq.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007f08:	e075      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007f0a:	4b3f      	ldr	r3, [pc, #252]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d108      	bne.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007f16:	4b3c      	ldr	r3, [pc, #240]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f1e:	4a3b      	ldr	r2, [pc, #236]	; (800800c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f24:	613b      	str	r3, [r7, #16]
 8007f26:	e007      	b.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007f28:	4b37      	ldr	r3, [pc, #220]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f30:	4a37      	ldr	r2, [pc, #220]	; (8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f36:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007f38:	4b33      	ldr	r3, [pc, #204]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f3e:	0e1b      	lsrs	r3, r3, #24
 8007f40:	f003 030f 	and.w	r3, r3, #15
 8007f44:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007f46:	4b30      	ldr	r3, [pc, #192]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f4c:	099b      	lsrs	r3, r3, #6
 8007f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f52:	693a      	ldr	r2, [r7, #16]
 8007f54:	fb02 f203 	mul.w	r2, r2, r3
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f5e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007f60:	4b29      	ldr	r3, [pc, #164]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f66:	0a1b      	lsrs	r3, r3, #8
 8007f68:	f003 031f 	and.w	r3, r3, #31
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007f70:	697a      	ldr	r2, [r7, #20]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f78:	617b      	str	r3, [r7, #20]
        break;
 8007f7a:	e03d      	b.n	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007f7c:	4b22      	ldr	r3, [pc, #136]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d108      	bne.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007f88:	4b1f      	ldr	r3, [pc, #124]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f90:	4a1e      	ldr	r2, [pc, #120]	; (800800c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f96:	613b      	str	r3, [r7, #16]
 8007f98:	e007      	b.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007f9a:	4b1b      	ldr	r3, [pc, #108]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fa2:	4a1b      	ldr	r2, [pc, #108]	; (8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007faa:	4b17      	ldr	r3, [pc, #92]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fb0:	0e1b      	lsrs	r3, r3, #24
 8007fb2:	f003 030f 	and.w	r3, r3, #15
 8007fb6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007fb8:	4b13      	ldr	r3, [pc, #76]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fbe:	099b      	lsrs	r3, r3, #6
 8007fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fc4:	693a      	ldr	r2, [r7, #16]
 8007fc6:	fb02 f203 	mul.w	r2, r2, r3
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007fd2:	4b0d      	ldr	r3, [pc, #52]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fd8:	f003 031f 	and.w	r3, r3, #31
 8007fdc:	3301      	adds	r3, #1
 8007fde:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fe8:	617b      	str	r3, [r7, #20]
        break;
 8007fea:	e005      	b.n	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007fec:	4b09      	ldr	r3, [pc, #36]	; (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007fee:	617b      	str	r3, [r7, #20]
        break;
 8007ff0:	e002      	b.n	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 8007ff2:	bf00      	nop
 8007ff4:	e000      	b.n	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 8007ff6:	bf00      	nop

  return frequency;
 8007ff8:	697b      	ldr	r3, [r7, #20]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	371c      	adds	r7, #28
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	40023800 	.word	0x40023800
 800800c:	00f42400 	.word	0x00f42400
 8008010:	017d7840 	.word	0x017d7840
 8008014:	00bb8000 	.word	0x00bb8000

08008018 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d101      	bne.n	800802a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e081      	b.n	800812e <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	7f5b      	ldrb	r3, [r3, #29]
 800802e:	b2db      	uxtb	r3, r3
 8008030:	2b00      	cmp	r3, #0
 8008032:	d105      	bne.n	8008040 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7fa fe7a 	bl	8002d34 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2202      	movs	r2, #2
 8008044:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	22ca      	movs	r2, #202	; 0xca
 800804c:	625a      	str	r2, [r3, #36]	; 0x24
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2253      	movs	r2, #83	; 0x53
 8008054:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fb16 	bl	8008688 <RTC_EnterInitMode>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d008      	beq.n	8008074 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	22ff      	movs	r2, #255	; 0xff
 8008068:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2204      	movs	r2, #4
 800806e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e05c      	b.n	800812e <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6899      	ldr	r1, [r3, #8]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	4b2e      	ldr	r3, [pc, #184]	; (8008138 <HAL_RTC_Init+0x120>)
 8008080:	400b      	ands	r3, r1
 8008082:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6899      	ldr	r1, [r3, #8]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685a      	ldr	r2, [r3, #4]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	431a      	orrs	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	695b      	ldr	r3, [r3, #20]
 8008098:	431a      	orrs	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	430a      	orrs	r2, r1
 80080a0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	68d2      	ldr	r2, [r2, #12]
 80080aa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6919      	ldr	r1, [r3, #16]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	041a      	lsls	r2, r3, #16
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	430a      	orrs	r2, r1
 80080be:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68da      	ldr	r2, [r3, #12]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080ce:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f003 0320 	and.w	r3, r3, #32
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d10e      	bne.n	80080fc <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 faaa 	bl	8008638 <HAL_RTC_WaitForSynchro>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d008      	beq.n	80080fc <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	22ff      	movs	r2, #255	; 0xff
 80080f0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2204      	movs	r2, #4
 80080f6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e018      	b.n	800812e <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f022 0208 	bic.w	r2, r2, #8
 800810a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	699a      	ldr	r2, [r3, #24]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	430a      	orrs	r2, r1
 800811c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	22ff      	movs	r2, #255	; 0xff
 8008124:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800812c:	2300      	movs	r3, #0
  }
}
 800812e:	4618      	mov	r0, r3
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	ff8fffbf 	.word	0xff8fffbf

0800813c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800813c:	b590      	push	{r4, r7, lr}
 800813e:	b087      	sub	sp, #28
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008148:	2300      	movs	r3, #0
 800814a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	7f1b      	ldrb	r3, [r3, #28]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d101      	bne.n	8008158 <HAL_RTC_SetTime+0x1c>
 8008154:	2302      	movs	r3, #2
 8008156:	e0a8      	b.n	80082aa <HAL_RTC_SetTime+0x16e>
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2201      	movs	r2, #1
 800815c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2202      	movs	r2, #2
 8008162:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d126      	bne.n	80081b8 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008174:	2b00      	cmp	r3, #0
 8008176:	d102      	bne.n	800817e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	2200      	movs	r2, #0
 800817c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	4618      	mov	r0, r3
 8008184:	f000 faac 	bl	80086e0 <RTC_ByteToBcd2>
 8008188:	4603      	mov	r3, r0
 800818a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	785b      	ldrb	r3, [r3, #1]
 8008190:	4618      	mov	r0, r3
 8008192:	f000 faa5 	bl	80086e0 <RTC_ByteToBcd2>
 8008196:	4603      	mov	r3, r0
 8008198:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800819a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	789b      	ldrb	r3, [r3, #2]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f000 fa9d 	bl	80086e0 <RTC_ByteToBcd2>
 80081a6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80081a8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	7b1b      	ldrb	r3, [r3, #12]
 80081b0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80081b2:	4313      	orrs	r3, r2
 80081b4:	617b      	str	r3, [r7, #20]
 80081b6:	e018      	b.n	80081ea <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d102      	bne.n	80081cc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	2200      	movs	r2, #0
 80081ca:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	785b      	ldrb	r3, [r3, #1]
 80081d6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80081d8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80081de:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	7b1b      	ldrb	r3, [r3, #12]
 80081e4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80081e6:	4313      	orrs	r3, r2
 80081e8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	22ca      	movs	r2, #202	; 0xca
 80081f0:	625a      	str	r2, [r3, #36]	; 0x24
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2253      	movs	r2, #83	; 0x53
 80081f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f000 fa44 	bl	8008688 <RTC_EnterInitMode>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00b      	beq.n	800821e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	22ff      	movs	r2, #255	; 0xff
 800820c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2204      	movs	r2, #4
 8008212:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	e045      	b.n	80082aa <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	6979      	ldr	r1, [r7, #20]
 8008224:	4b23      	ldr	r3, [pc, #140]	; (80082b4 <HAL_RTC_SetTime+0x178>)
 8008226:	400b      	ands	r3, r1
 8008228:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	689a      	ldr	r2, [r3, #8]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008238:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	6899      	ldr	r1, [r3, #8]
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	691a      	ldr	r2, [r3, #16]
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	695b      	ldr	r3, [r3, #20]
 8008248:	431a      	orrs	r2, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	430a      	orrs	r2, r1
 8008250:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68da      	ldr	r2, [r3, #12]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008260:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	f003 0320 	and.w	r3, r3, #32
 800826c:	2b00      	cmp	r3, #0
 800826e:	d111      	bne.n	8008294 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f000 f9e1 	bl	8008638 <HAL_RTC_WaitForSynchro>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00b      	beq.n	8008294 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	22ff      	movs	r2, #255	; 0xff
 8008282:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2204      	movs	r2, #4
 8008288:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e00a      	b.n	80082aa <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	22ff      	movs	r2, #255	; 0xff
 800829a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2201      	movs	r2, #1
 80082a0:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80082a8:	2300      	movs	r3, #0
  }
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	371c      	adds	r7, #28
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd90      	pop	{r4, r7, pc}
 80082b2:	bf00      	nop
 80082b4:	007f7f7f 	.word	0x007f7f7f

080082b8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80082b8:	b590      	push	{r4, r7, lr}
 80082ba:	b087      	sub	sp, #28
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80082c4:	2300      	movs	r3, #0
 80082c6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	7f1b      	ldrb	r3, [r3, #28]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d101      	bne.n	80082d4 <HAL_RTC_SetDate+0x1c>
 80082d0:	2302      	movs	r3, #2
 80082d2:	e092      	b.n	80083fa <HAL_RTC_SetDate+0x142>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2201      	movs	r2, #1
 80082d8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2202      	movs	r2, #2
 80082de:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10e      	bne.n	8008304 <HAL_RTC_SetDate+0x4c>
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	785b      	ldrb	r3, [r3, #1]
 80082ea:	f003 0310 	and.w	r3, r3, #16
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d008      	beq.n	8008304 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	785b      	ldrb	r3, [r3, #1]
 80082f6:	f023 0310 	bic.w	r3, r3, #16
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	330a      	adds	r3, #10
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d11c      	bne.n	8008344 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	78db      	ldrb	r3, [r3, #3]
 800830e:	4618      	mov	r0, r3
 8008310:	f000 f9e6 	bl	80086e0 <RTC_ByteToBcd2>
 8008314:	4603      	mov	r3, r0
 8008316:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	785b      	ldrb	r3, [r3, #1]
 800831c:	4618      	mov	r0, r3
 800831e:	f000 f9df 	bl	80086e0 <RTC_ByteToBcd2>
 8008322:	4603      	mov	r3, r0
 8008324:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008326:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	789b      	ldrb	r3, [r3, #2]
 800832c:	4618      	mov	r0, r3
 800832e:	f000 f9d7 	bl	80086e0 <RTC_ByteToBcd2>
 8008332:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008334:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800833e:	4313      	orrs	r3, r2
 8008340:	617b      	str	r3, [r7, #20]
 8008342:	e00e      	b.n	8008362 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	78db      	ldrb	r3, [r3, #3]
 8008348:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	785b      	ldrb	r3, [r3, #1]
 800834e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008350:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008356:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800835e:	4313      	orrs	r3, r2
 8008360:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	22ca      	movs	r2, #202	; 0xca
 8008368:	625a      	str	r2, [r3, #36]	; 0x24
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2253      	movs	r2, #83	; 0x53
 8008370:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f000 f988 	bl	8008688 <RTC_EnterInitMode>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00b      	beq.n	8008396 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	22ff      	movs	r2, #255	; 0xff
 8008384:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2204      	movs	r2, #4
 800838a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e031      	b.n	80083fa <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	6979      	ldr	r1, [r7, #20]
 800839c:	4b19      	ldr	r3, [pc, #100]	; (8008404 <HAL_RTC_SetDate+0x14c>)
 800839e:	400b      	ands	r3, r1
 80083a0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68da      	ldr	r2, [r3, #12]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083b0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	f003 0320 	and.w	r3, r3, #32
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d111      	bne.n	80083e4 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f000 f939 	bl	8008638 <HAL_RTC_WaitForSynchro>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00b      	beq.n	80083e4 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	22ff      	movs	r2, #255	; 0xff
 80083d2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2204      	movs	r2, #4
 80083d8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2200      	movs	r2, #0
 80083de:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e00a      	b.n	80083fa <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	22ff      	movs	r2, #255	; 0xff
 80083ea:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2201      	movs	r2, #1
 80083f0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80083f8:	2300      	movs	r3, #0
  }
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	371c      	adds	r7, #28
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd90      	pop	{r4, r7, pc}
 8008402:	bf00      	nop
 8008404:	00ffff3f 	.word	0x00ffff3f

08008408 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008408:	b590      	push	{r4, r7, lr}
 800840a:	b089      	sub	sp, #36	; 0x24
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008414:	2300      	movs	r3, #0
 8008416:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008418:	2300      	movs	r3, #0
 800841a:	61fb      	str	r3, [r7, #28]
 800841c:	2300      	movs	r3, #0
 800841e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	7f1b      	ldrb	r3, [r3, #28]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d101      	bne.n	800842c <HAL_RTC_SetAlarm+0x24>
 8008428:	2302      	movs	r3, #2
 800842a:	e101      	b.n	8008630 <HAL_RTC_SetAlarm+0x228>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2201      	movs	r2, #1
 8008430:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2202      	movs	r2, #2
 8008436:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d137      	bne.n	80084ae <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008448:	2b00      	cmp	r3, #0
 800844a:	d102      	bne.n	8008452 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	2200      	movs	r2, #0
 8008450:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	4618      	mov	r0, r3
 8008458:	f000 f942 	bl	80086e0 <RTC_ByteToBcd2>
 800845c:	4603      	mov	r3, r0
 800845e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	785b      	ldrb	r3, [r3, #1]
 8008464:	4618      	mov	r0, r3
 8008466:	f000 f93b 	bl	80086e0 <RTC_ByteToBcd2>
 800846a:	4603      	mov	r3, r0
 800846c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800846e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	789b      	ldrb	r3, [r3, #2]
 8008474:	4618      	mov	r0, r3
 8008476:	f000 f933 	bl	80086e0 <RTC_ByteToBcd2>
 800847a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800847c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	7b1b      	ldrb	r3, [r3, #12]
 8008484:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008486:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008490:	4618      	mov	r0, r3
 8008492:	f000 f925 	bl	80086e0 <RTC_ByteToBcd2>
 8008496:	4603      	mov	r3, r0
 8008498:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800849a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80084a2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80084a8:	4313      	orrs	r3, r2
 80084aa:	61fb      	str	r3, [r7, #28]
 80084ac:	e023      	b.n	80084f6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d102      	bne.n	80084c2 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	2200      	movs	r2, #0
 80084c0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	785b      	ldrb	r3, [r3, #1]
 80084cc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80084ce:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80084d0:	68ba      	ldr	r2, [r7, #8]
 80084d2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80084d4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	7b1b      	ldrb	r3, [r3, #12]
 80084da:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80084dc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80084e4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80084e6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80084ec:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80084f2:	4313      	orrs	r3, r2
 80084f4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	685a      	ldr	r2, [r3, #4]
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	69db      	ldr	r3, [r3, #28]
 80084fe:	4313      	orrs	r3, r2
 8008500:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	22ca      	movs	r2, #202	; 0xca
 8008508:	625a      	str	r2, [r3, #36]	; 0x24
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2253      	movs	r2, #83	; 0x53
 8008510:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800851a:	d13f      	bne.n	800859c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	689a      	ldr	r2, [r3, #8]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800852a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	689a      	ldr	r2, [r3, #8]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800853a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800853c:	f7fb f854 	bl	80035e8 <HAL_GetTick>
 8008540:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008542:	e013      	b.n	800856c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008544:	f7fb f850 	bl	80035e8 <HAL_GetTick>
 8008548:	4602      	mov	r2, r0
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008552:	d90b      	bls.n	800856c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	22ff      	movs	r2, #255	; 0xff
 800855a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2203      	movs	r2, #3
 8008560:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008568:	2303      	movs	r3, #3
 800856a:	e061      	b.n	8008630 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	2b00      	cmp	r3, #0
 8008578:	d0e4      	beq.n	8008544 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	69fa      	ldr	r2, [r7, #28]
 8008580:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	689a      	ldr	r2, [r3, #8]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008598:	609a      	str	r2, [r3, #8]
 800859a:	e03e      	b.n	800861a <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	689a      	ldr	r2, [r3, #8]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80085aa:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	689a      	ldr	r2, [r3, #8]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085ba:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80085bc:	f7fb f814 	bl	80035e8 <HAL_GetTick>
 80085c0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80085c2:	e013      	b.n	80085ec <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80085c4:	f7fb f810 	bl	80035e8 <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085d2:	d90b      	bls.n	80085ec <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	22ff      	movs	r2, #255	; 0xff
 80085da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2203      	movs	r2, #3
 80085e0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e021      	b.n	8008630 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	f003 0302 	and.w	r3, r3, #2
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d0e4      	beq.n	80085c4 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	69fa      	ldr	r2, [r7, #28]
 8008600:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	689a      	ldr	r2, [r3, #8]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008618:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	22ff      	movs	r2, #255	; 0xff
 8008620:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2201      	movs	r2, #1
 8008626:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3724      	adds	r7, #36	; 0x24
 8008634:	46bd      	mov	sp, r7
 8008636:	bd90      	pop	{r4, r7, pc}

08008638 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008640:	2300      	movs	r3, #0
 8008642:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68da      	ldr	r2, [r3, #12]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008652:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008654:	f7fa ffc8 	bl	80035e8 <HAL_GetTick>
 8008658:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800865a:	e009      	b.n	8008670 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800865c:	f7fa ffc4 	bl	80035e8 <HAL_GetTick>
 8008660:	4602      	mov	r2, r0
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800866a:	d901      	bls.n	8008670 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800866c:	2303      	movs	r3, #3
 800866e:	e007      	b.n	8008680 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	f003 0320 	and.w	r3, r3, #32
 800867a:	2b00      	cmp	r3, #0
 800867c:	d0ee      	beq.n	800865c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008690:	2300      	movs	r3, #0
 8008692:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d119      	bne.n	80086d6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086aa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80086ac:	f7fa ff9c 	bl	80035e8 <HAL_GetTick>
 80086b0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80086b2:	e009      	b.n	80086c8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80086b4:	f7fa ff98 	bl	80035e8 <HAL_GetTick>
 80086b8:	4602      	mov	r2, r0
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086c2:	d901      	bls.n	80086c8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e007      	b.n	80086d8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d0ee      	beq.n	80086b4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3710      	adds	r7, #16
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	4603      	mov	r3, r0
 80086e8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80086ea:	2300      	movs	r3, #0
 80086ec:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80086ee:	e005      	b.n	80086fc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	3301      	adds	r3, #1
 80086f4:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80086f6:	79fb      	ldrb	r3, [r7, #7]
 80086f8:	3b0a      	subs	r3, #10
 80086fa:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80086fc:	79fb      	ldrb	r3, [r7, #7]
 80086fe:	2b09      	cmp	r3, #9
 8008700:	d8f6      	bhi.n	80086f0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	b2db      	uxtb	r3, r3
 8008706:	011b      	lsls	r3, r3, #4
 8008708:	b2da      	uxtb	r2, r3
 800870a:	79fb      	ldrb	r3, [r7, #7]
 800870c:	4313      	orrs	r3, r2
 800870e:	b2db      	uxtb	r3, r3
}
 8008710:	4618      	mov	r0, r3
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800871c:	b480      	push	{r7}
 800871e:	b087      	sub	sp, #28
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008728:	2300      	movs	r3, #0
 800872a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	7f1b      	ldrb	r3, [r3, #28]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d101      	bne.n	8008738 <HAL_RTCEx_SetTimeStamp+0x1c>
 8008734:	2302      	movs	r3, #2
 8008736:	e03e      	b.n	80087b6 <HAL_RTCEx_SetTimeStamp+0x9a>
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2201      	movs	r2, #1
 800873c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2202      	movs	r2, #2
 8008742:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	689a      	ldr	r2, [r3, #8]
 800874a:	4b1e      	ldr	r3, [pc, #120]	; (80087c4 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800874c:	4013      	ands	r3, r2
 800874e:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008750:	697a      	ldr	r2, [r7, #20]
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	4313      	orrs	r3, r2
 8008756:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	22ca      	movs	r2, #202	; 0xca
 800875e:	625a      	str	r2, [r3, #36]	; 0x24
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2253      	movs	r2, #83	; 0x53
 8008766:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f022 0206 	bic.w	r2, r2, #6
 8008776:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	430a      	orrs	r2, r1
 8008786:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	697a      	ldr	r2, [r7, #20]
 800878e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	689a      	ldr	r2, [r3, #8]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800879e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	22ff      	movs	r2, #255	; 0xff
 80087a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2201      	movs	r2, #1
 80087ac:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	371c      	adds	r7, #28
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	fffff7f7 	.word	0xfffff7f7

080087c8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80087d0:	2300      	movs	r3, #0
 80087d2:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80087d4:	2300      	movs	r3, #0
 80087d6:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80087d8:	2300      	movs	r3, #0
 80087da:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d101      	bne.n	80087e6 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	e156      	b.n	8008a94 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d106      	bne.n	8008800 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7fa fd80 	bl	8003300 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2202      	movs	r2, #2
 8008804:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f95b 	bl	8008ac4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	2b02      	cmp	r3, #2
 8008814:	d00c      	beq.n	8008830 <HAL_SAI_Init+0x68>
 8008816:	2b02      	cmp	r3, #2
 8008818:	d80d      	bhi.n	8008836 <HAL_SAI_Init+0x6e>
 800881a:	2b00      	cmp	r3, #0
 800881c:	d002      	beq.n	8008824 <HAL_SAI_Init+0x5c>
 800881e:	2b01      	cmp	r3, #1
 8008820:	d003      	beq.n	800882a <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8008822:	e008      	b.n	8008836 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8008824:	2300      	movs	r3, #0
 8008826:	61fb      	str	r3, [r7, #28]
      break;
 8008828:	e006      	b.n	8008838 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800882a:	2310      	movs	r3, #16
 800882c:	61fb      	str	r3, [r7, #28]
      break;
 800882e:	e003      	b.n	8008838 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008830:	2320      	movs	r3, #32
 8008832:	61fb      	str	r3, [r7, #28]
      break;
 8008834:	e000      	b.n	8008838 <HAL_SAI_Init+0x70>
      break;
 8008836:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	2b03      	cmp	r3, #3
 800883e:	d81e      	bhi.n	800887e <HAL_SAI_Init+0xb6>
 8008840:	a201      	add	r2, pc, #4	; (adr r2, 8008848 <HAL_SAI_Init+0x80>)
 8008842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008846:	bf00      	nop
 8008848:	08008859 	.word	0x08008859
 800884c:	0800885f 	.word	0x0800885f
 8008850:	08008867 	.word	0x08008867
 8008854:	0800886f 	.word	0x0800886f
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8008858:	2300      	movs	r3, #0
 800885a:	617b      	str	r3, [r7, #20]
    }
    break;
 800885c:	e010      	b.n	8008880 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800885e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008862:	617b      	str	r3, [r7, #20]
    }
    break;
 8008864:	e00c      	b.n	8008880 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008866:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800886a:	617b      	str	r3, [r7, #20]
    }
    break;
 800886c:	e008      	b.n	8008880 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800886e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008872:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	f043 0301 	orr.w	r3, r3, #1
 800887a:	61fb      	str	r3, [r7, #28]
    }
    break;
 800887c:	e000      	b.n	8008880 <HAL_SAI_Init+0xb8>
    default:
      break;
 800887e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a85      	ldr	r2, [pc, #532]	; (8008a9c <HAL_SAI_Init+0x2d4>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d004      	beq.n	8008894 <HAL_SAI_Init+0xcc>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a84      	ldr	r2, [pc, #528]	; (8008aa0 <HAL_SAI_Init+0x2d8>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d103      	bne.n	800889c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8008894:	4a83      	ldr	r2, [pc, #524]	; (8008aa4 <HAL_SAI_Init+0x2dc>)
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	6013      	str	r3, [r2, #0]
 800889a:	e002      	b.n	80088a2 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800889c:	4a82      	ldr	r2, [pc, #520]	; (8008aa8 <HAL_SAI_Init+0x2e0>)
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	69db      	ldr	r3, [r3, #28]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d04c      	beq.n	8008944 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 80088aa:	2300      	movs	r3, #0
 80088ac:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a7a      	ldr	r2, [pc, #488]	; (8008a9c <HAL_SAI_Init+0x2d4>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d004      	beq.n	80088c2 <HAL_SAI_Init+0xfa>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a78      	ldr	r2, [pc, #480]	; (8008aa0 <HAL_SAI_Init+0x2d8>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d104      	bne.n	80088cc <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80088c2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80088c6:	f7ff fa63 	bl	8007d90 <HAL_RCCEx_GetPeriphCLKFreq>
 80088ca:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a76      	ldr	r2, [pc, #472]	; (8008aac <HAL_SAI_Init+0x2e4>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d004      	beq.n	80088e0 <HAL_SAI_Init+0x118>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a75      	ldr	r2, [pc, #468]	; (8008ab0 <HAL_SAI_Init+0x2e8>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d104      	bne.n	80088ea <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80088e0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80088e4:	f7ff fa54 	bl	8007d90 <HAL_RCCEx_GetPeriphCLKFreq>
 80088e8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80088ea:	693a      	ldr	r2, [r7, #16]
 80088ec:	4613      	mov	r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4413      	add	r3, r2
 80088f2:	005b      	lsls	r3, r3, #1
 80088f4:	461a      	mov	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	69db      	ldr	r3, [r3, #28]
 80088fa:	025b      	lsls	r3, r3, #9
 80088fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008900:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	4a6b      	ldr	r2, [pc, #428]	; (8008ab4 <HAL_SAI_Init+0x2ec>)
 8008906:	fba2 2303 	umull	r2, r3, r2, r3
 800890a:	08da      	lsrs	r2, r3, #3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8008910:	68f9      	ldr	r1, [r7, #12]
 8008912:	4b68      	ldr	r3, [pc, #416]	; (8008ab4 <HAL_SAI_Init+0x2ec>)
 8008914:	fba3 2301 	umull	r2, r3, r3, r1
 8008918:	08da      	lsrs	r2, r3, #3
 800891a:	4613      	mov	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	4413      	add	r3, r2
 8008920:	005b      	lsls	r3, r3, #1
 8008922:	1aca      	subs	r2, r1, r3
 8008924:	2a08      	cmp	r2, #8
 8008926:	d904      	bls.n	8008932 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a1b      	ldr	r3, [r3, #32]
 800892c:	1c5a      	adds	r2, r3, #1
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008936:	2b04      	cmp	r3, #4
 8008938:	d104      	bne.n	8008944 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a1b      	ldr	r3, [r3, #32]
 800893e:	085a      	lsrs	r2, r3, #1
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d003      	beq.n	8008954 <HAL_SAI_Init+0x18c>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	2b02      	cmp	r3, #2
 8008952:	d109      	bne.n	8008968 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008958:	2b01      	cmp	r3, #1
 800895a:	d101      	bne.n	8008960 <HAL_SAI_Init+0x198>
 800895c:	2300      	movs	r3, #0
 800895e:	e001      	b.n	8008964 <HAL_SAI_Init+0x19c>
 8008960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008964:	61bb      	str	r3, [r7, #24]
 8008966:	e008      	b.n	800897a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800896c:	2b01      	cmp	r3, #1
 800896e:	d102      	bne.n	8008976 <HAL_SAI_Init+0x1ae>
 8008970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008974:	e000      	b.n	8008978 <HAL_SAI_Init+0x1b0>
 8008976:	2300      	movs	r3, #0
 8008978:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	6819      	ldr	r1, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	4b4c      	ldr	r3, [pc, #304]	; (8008ab8 <HAL_SAI_Init+0x2f0>)
 8008986:	400b      	ands	r3, r1
 8008988:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	6819      	ldr	r1, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	685a      	ldr	r2, [r3, #4]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008998:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800899e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a4:	431a      	orrs	r2, r3
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 80089b2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80089be:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6a1b      	ldr	r3, [r3, #32]
 80089c4:	051b      	lsls	r3, r3, #20
 80089c6:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	430a      	orrs	r2, r1
 80089ce:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6859      	ldr	r1, [r3, #4]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	4b38      	ldr	r3, [pc, #224]	; (8008abc <HAL_SAI_Init+0x2f4>)
 80089dc:	400b      	ands	r3, r1
 80089de:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6859      	ldr	r1, [r3, #4]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	699a      	ldr	r2, [r3, #24]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ee:	431a      	orrs	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f4:	431a      	orrs	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	430a      	orrs	r2, r1
 80089fc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	6899      	ldr	r1, [r3, #8]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	4b2d      	ldr	r3, [pc, #180]	; (8008ac0 <HAL_SAI_Init+0x2f8>)
 8008a0a:	400b      	ands	r3, r1
 8008a0c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	6899      	ldr	r1, [r3, #8]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a18:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008a1e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8008a24:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8008a2a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a30:	3b01      	subs	r3, #1
 8008a32:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008a34:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	430a      	orrs	r2, r1
 8008a3c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68d9      	ldr	r1, [r3, #12]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008a4c:	400b      	ands	r3, r1
 8008a4e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68d9      	ldr	r1, [r3, #12]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a5e:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a64:	041b      	lsls	r3, r3, #16
 8008a66:	431a      	orrs	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	021b      	lsls	r3, r3, #8
 8008a70:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	430a      	orrs	r2, r1
 8008a78:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2201      	movs	r2, #1
 8008a86:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3720      	adds	r7, #32
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	40015804 	.word	0x40015804
 8008aa0:	40015824 	.word	0x40015824
 8008aa4:	40015800 	.word	0x40015800
 8008aa8:	40015c00 	.word	0x40015c00
 8008aac:	40015c04 	.word	0x40015c04
 8008ab0:	40015c24 	.word	0x40015c24
 8008ab4:	cccccccd 	.word	0xcccccccd
 8008ab8:	ff05c010 	.word	0xff05c010
 8008abc:	ffff1ff0 	.word	0xffff1ff0
 8008ac0:	fff88000 	.word	0xfff88000

08008ac4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8008acc:	4b17      	ldr	r3, [pc, #92]	; (8008b2c <SAI_Disable+0x68>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a17      	ldr	r2, [pc, #92]	; (8008b30 <SAI_Disable+0x6c>)
 8008ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ad6:	0b1b      	lsrs	r3, r3, #12
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008adc:	2300      	movs	r3, #0
 8008ade:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008aee:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	1e5a      	subs	r2, r3, #1
 8008af4:	60fa      	str	r2, [r7, #12]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10a      	bne.n	8008b10 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	72fb      	strb	r3, [r7, #11]
      break;
 8008b0e:	e006      	b.n	8008b1e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1e8      	bne.n	8008af0 <SAI_Disable+0x2c>

  return status;
 8008b1e:	7afb      	ldrb	r3, [r7, #11]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3714      	adds	r7, #20
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr
 8008b2c:	20000000 	.word	0x20000000
 8008b30:	95cbec1b 	.word	0x95cbec1b

08008b34 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d101      	bne.n	8008b48 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e025      	b.n	8008b94 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d106      	bne.n	8008b62 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f7fa fbc5 	bl	80032ec <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2202      	movs	r2, #2
 8008b66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	3304      	adds	r3, #4
 8008b72:	4619      	mov	r1, r3
 8008b74:	4610      	mov	r0, r2
 8008b76:	f001 fc9d 	bl	800a4b4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6818      	ldr	r0, [r3, #0]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	461a      	mov	r2, r3
 8008b84:	6839      	ldr	r1, [r7, #0]
 8008b86:	f001 fd07 	bl	800a598 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d101      	bne.n	8008bae <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	e04c      	b.n	8008c48 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d106      	bne.n	8008bc8 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f7fa f8d0 	bl	8002d68 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2202      	movs	r2, #2
 8008bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f022 0203 	bic.w	r2, r2, #3
 8008bde:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	4b19      	ldr	r3, [pc, #100]	; (8008c50 <HAL_SPDIFRX_Init+0xb4>)
 8008bec:	4013      	ands	r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8008bf8:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8008bfe:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8008c04:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8008c0a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8008c10:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8008c16:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8008c1c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8008c22:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8008c28:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	fff88407 	.word	0xfff88407

08008c54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d101      	bne.n	8008c66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e049      	b.n	8008cfa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d106      	bne.n	8008c80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f7fa f8b6 	bl	8002dec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2202      	movs	r2, #2
 8008c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	3304      	adds	r3, #4
 8008c90:	4619      	mov	r1, r3
 8008c92:	4610      	mov	r0, r2
 8008c94:	f000 fad4 	bl	8009240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
	...

08008d04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d001      	beq.n	8008d1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e04c      	b.n	8008db6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a26      	ldr	r2, [pc, #152]	; (8008dc4 <HAL_TIM_Base_Start+0xc0>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d022      	beq.n	8008d74 <HAL_TIM_Base_Start+0x70>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d36:	d01d      	beq.n	8008d74 <HAL_TIM_Base_Start+0x70>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a22      	ldr	r2, [pc, #136]	; (8008dc8 <HAL_TIM_Base_Start+0xc4>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d018      	beq.n	8008d74 <HAL_TIM_Base_Start+0x70>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a21      	ldr	r2, [pc, #132]	; (8008dcc <HAL_TIM_Base_Start+0xc8>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d013      	beq.n	8008d74 <HAL_TIM_Base_Start+0x70>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a1f      	ldr	r2, [pc, #124]	; (8008dd0 <HAL_TIM_Base_Start+0xcc>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d00e      	beq.n	8008d74 <HAL_TIM_Base_Start+0x70>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a1e      	ldr	r2, [pc, #120]	; (8008dd4 <HAL_TIM_Base_Start+0xd0>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d009      	beq.n	8008d74 <HAL_TIM_Base_Start+0x70>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a1c      	ldr	r2, [pc, #112]	; (8008dd8 <HAL_TIM_Base_Start+0xd4>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d004      	beq.n	8008d74 <HAL_TIM_Base_Start+0x70>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a1b      	ldr	r2, [pc, #108]	; (8008ddc <HAL_TIM_Base_Start+0xd8>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d115      	bne.n	8008da0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	689a      	ldr	r2, [r3, #8]
 8008d7a:	4b19      	ldr	r3, [pc, #100]	; (8008de0 <HAL_TIM_Base_Start+0xdc>)
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2b06      	cmp	r3, #6
 8008d84:	d015      	beq.n	8008db2 <HAL_TIM_Base_Start+0xae>
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d8c:	d011      	beq.n	8008db2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f042 0201 	orr.w	r2, r2, #1
 8008d9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d9e:	e008      	b.n	8008db2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f042 0201 	orr.w	r2, r2, #1
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	e000      	b.n	8008db4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008db2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3714      	adds	r7, #20
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	40010000 	.word	0x40010000
 8008dc8:	40000400 	.word	0x40000400
 8008dcc:	40000800 	.word	0x40000800
 8008dd0:	40000c00 	.word	0x40000c00
 8008dd4:	40010400 	.word	0x40010400
 8008dd8:	40014000 	.word	0x40014000
 8008ddc:	40001800 	.word	0x40001800
 8008de0:	00010007 	.word	0x00010007

08008de4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d101      	bne.n	8008df6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	e049      	b.n	8008e8a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d106      	bne.n	8008e10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f7fa f85c 	bl	8002ec8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2202      	movs	r2, #2
 8008e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	3304      	adds	r3, #4
 8008e20:	4619      	mov	r1, r3
 8008e22:	4610      	mov	r0, r2
 8008e24:	f000 fa0c 	bl	8009240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
	...

08008e94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d101      	bne.n	8008eae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008eaa:	2302      	movs	r3, #2
 8008eac:	e0fd      	b.n	80090aa <HAL_TIM_PWM_ConfigChannel+0x216>
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2b14      	cmp	r3, #20
 8008eba:	f200 80f0 	bhi.w	800909e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8008ebe:	a201      	add	r2, pc, #4	; (adr r2, 8008ec4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec4:	08008f19 	.word	0x08008f19
 8008ec8:	0800909f 	.word	0x0800909f
 8008ecc:	0800909f 	.word	0x0800909f
 8008ed0:	0800909f 	.word	0x0800909f
 8008ed4:	08008f59 	.word	0x08008f59
 8008ed8:	0800909f 	.word	0x0800909f
 8008edc:	0800909f 	.word	0x0800909f
 8008ee0:	0800909f 	.word	0x0800909f
 8008ee4:	08008f9b 	.word	0x08008f9b
 8008ee8:	0800909f 	.word	0x0800909f
 8008eec:	0800909f 	.word	0x0800909f
 8008ef0:	0800909f 	.word	0x0800909f
 8008ef4:	08008fdb 	.word	0x08008fdb
 8008ef8:	0800909f 	.word	0x0800909f
 8008efc:	0800909f 	.word	0x0800909f
 8008f00:	0800909f 	.word	0x0800909f
 8008f04:	0800901d 	.word	0x0800901d
 8008f08:	0800909f 	.word	0x0800909f
 8008f0c:	0800909f 	.word	0x0800909f
 8008f10:	0800909f 	.word	0x0800909f
 8008f14:	0800905d 	.word	0x0800905d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	68b9      	ldr	r1, [r7, #8]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 fa2e 	bl	8009380 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	699a      	ldr	r2, [r3, #24]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f042 0208 	orr.w	r2, r2, #8
 8008f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	699a      	ldr	r2, [r3, #24]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f022 0204 	bic.w	r2, r2, #4
 8008f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	6999      	ldr	r1, [r3, #24]
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	691a      	ldr	r2, [r3, #16]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	430a      	orrs	r2, r1
 8008f54:	619a      	str	r2, [r3, #24]
      break;
 8008f56:	e0a3      	b.n	80090a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	68b9      	ldr	r1, [r7, #8]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f000 fa80 	bl	8009464 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	699a      	ldr	r2, [r3, #24]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	699a      	ldr	r2, [r3, #24]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	6999      	ldr	r1, [r3, #24]
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	021a      	lsls	r2, r3, #8
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	430a      	orrs	r2, r1
 8008f96:	619a      	str	r2, [r3, #24]
      break;
 8008f98:	e082      	b.n	80090a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68b9      	ldr	r1, [r7, #8]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f000 fad7 	bl	8009554 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	69da      	ldr	r2, [r3, #28]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f042 0208 	orr.w	r2, r2, #8
 8008fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	69da      	ldr	r2, [r3, #28]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f022 0204 	bic.w	r2, r2, #4
 8008fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	69d9      	ldr	r1, [r3, #28]
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	691a      	ldr	r2, [r3, #16]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	430a      	orrs	r2, r1
 8008fd6:	61da      	str	r2, [r3, #28]
      break;
 8008fd8:	e062      	b.n	80090a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68b9      	ldr	r1, [r7, #8]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f000 fb2d 	bl	8009640 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	69da      	ldr	r2, [r3, #28]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	69da      	ldr	r2, [r3, #28]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	69d9      	ldr	r1, [r3, #28]
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	021a      	lsls	r2, r3, #8
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	430a      	orrs	r2, r1
 8009018:	61da      	str	r2, [r3, #28]
      break;
 800901a:	e041      	b.n	80090a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	68b9      	ldr	r1, [r7, #8]
 8009022:	4618      	mov	r0, r3
 8009024:	f000 fb64 	bl	80096f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f042 0208 	orr.w	r2, r2, #8
 8009036:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f022 0204 	bic.w	r2, r2, #4
 8009046:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	691a      	ldr	r2, [r3, #16]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	430a      	orrs	r2, r1
 8009058:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800905a:	e021      	b.n	80090a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68b9      	ldr	r1, [r7, #8]
 8009062:	4618      	mov	r0, r3
 8009064:	f000 fb96 	bl	8009794 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009076:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009086:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	691b      	ldr	r3, [r3, #16]
 8009092:	021a      	lsls	r2, r3, #8
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	430a      	orrs	r2, r1
 800909a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800909c:	e000      	b.n	80090a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800909e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop

080090b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d101      	bne.n	80090cc <HAL_TIM_ConfigClockSource+0x18>
 80090c8:	2302      	movs	r3, #2
 80090ca:	e0b3      	b.n	8009234 <HAL_TIM_ConfigClockSource+0x180>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2202      	movs	r2, #2
 80090d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	4b55      	ldr	r3, [pc, #340]	; (800923c <HAL_TIM_ConfigClockSource+0x188>)
 80090e8:	4013      	ands	r3, r2
 80090ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80090f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009104:	d03e      	beq.n	8009184 <HAL_TIM_ConfigClockSource+0xd0>
 8009106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800910a:	f200 8087 	bhi.w	800921c <HAL_TIM_ConfigClockSource+0x168>
 800910e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009112:	f000 8085 	beq.w	8009220 <HAL_TIM_ConfigClockSource+0x16c>
 8009116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800911a:	d87f      	bhi.n	800921c <HAL_TIM_ConfigClockSource+0x168>
 800911c:	2b70      	cmp	r3, #112	; 0x70
 800911e:	d01a      	beq.n	8009156 <HAL_TIM_ConfigClockSource+0xa2>
 8009120:	2b70      	cmp	r3, #112	; 0x70
 8009122:	d87b      	bhi.n	800921c <HAL_TIM_ConfigClockSource+0x168>
 8009124:	2b60      	cmp	r3, #96	; 0x60
 8009126:	d050      	beq.n	80091ca <HAL_TIM_ConfigClockSource+0x116>
 8009128:	2b60      	cmp	r3, #96	; 0x60
 800912a:	d877      	bhi.n	800921c <HAL_TIM_ConfigClockSource+0x168>
 800912c:	2b50      	cmp	r3, #80	; 0x50
 800912e:	d03c      	beq.n	80091aa <HAL_TIM_ConfigClockSource+0xf6>
 8009130:	2b50      	cmp	r3, #80	; 0x50
 8009132:	d873      	bhi.n	800921c <HAL_TIM_ConfigClockSource+0x168>
 8009134:	2b40      	cmp	r3, #64	; 0x40
 8009136:	d058      	beq.n	80091ea <HAL_TIM_ConfigClockSource+0x136>
 8009138:	2b40      	cmp	r3, #64	; 0x40
 800913a:	d86f      	bhi.n	800921c <HAL_TIM_ConfigClockSource+0x168>
 800913c:	2b30      	cmp	r3, #48	; 0x30
 800913e:	d064      	beq.n	800920a <HAL_TIM_ConfigClockSource+0x156>
 8009140:	2b30      	cmp	r3, #48	; 0x30
 8009142:	d86b      	bhi.n	800921c <HAL_TIM_ConfigClockSource+0x168>
 8009144:	2b20      	cmp	r3, #32
 8009146:	d060      	beq.n	800920a <HAL_TIM_ConfigClockSource+0x156>
 8009148:	2b20      	cmp	r3, #32
 800914a:	d867      	bhi.n	800921c <HAL_TIM_ConfigClockSource+0x168>
 800914c:	2b00      	cmp	r3, #0
 800914e:	d05c      	beq.n	800920a <HAL_TIM_ConfigClockSource+0x156>
 8009150:	2b10      	cmp	r3, #16
 8009152:	d05a      	beq.n	800920a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009154:	e062      	b.n	800921c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6818      	ldr	r0, [r3, #0]
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	6899      	ldr	r1, [r3, #8]
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	685a      	ldr	r2, [r3, #4]
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	f000 fbe3 	bl	8009930 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009178:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	609a      	str	r2, [r3, #8]
      break;
 8009182:	e04e      	b.n	8009222 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6818      	ldr	r0, [r3, #0]
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	6899      	ldr	r1, [r3, #8]
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	685a      	ldr	r2, [r3, #4]
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	f000 fbcc 	bl	8009930 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	689a      	ldr	r2, [r3, #8]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80091a6:	609a      	str	r2, [r3, #8]
      break;
 80091a8:	e03b      	b.n	8009222 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6818      	ldr	r0, [r3, #0]
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	6859      	ldr	r1, [r3, #4]
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	461a      	mov	r2, r3
 80091b8:	f000 fb40 	bl	800983c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2150      	movs	r1, #80	; 0x50
 80091c2:	4618      	mov	r0, r3
 80091c4:	f000 fb99 	bl	80098fa <TIM_ITRx_SetConfig>
      break;
 80091c8:	e02b      	b.n	8009222 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6818      	ldr	r0, [r3, #0]
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	6859      	ldr	r1, [r3, #4]
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	461a      	mov	r2, r3
 80091d8:	f000 fb5f 	bl	800989a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2160      	movs	r1, #96	; 0x60
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 fb89 	bl	80098fa <TIM_ITRx_SetConfig>
      break;
 80091e8:	e01b      	b.n	8009222 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6818      	ldr	r0, [r3, #0]
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	6859      	ldr	r1, [r3, #4]
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	461a      	mov	r2, r3
 80091f8:	f000 fb20 	bl	800983c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2140      	movs	r1, #64	; 0x40
 8009202:	4618      	mov	r0, r3
 8009204:	f000 fb79 	bl	80098fa <TIM_ITRx_SetConfig>
      break;
 8009208:	e00b      	b.n	8009222 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4619      	mov	r1, r3
 8009214:	4610      	mov	r0, r2
 8009216:	f000 fb70 	bl	80098fa <TIM_ITRx_SetConfig>
        break;
 800921a:	e002      	b.n	8009222 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800921c:	bf00      	nop
 800921e:	e000      	b.n	8009222 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009220:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2201      	movs	r2, #1
 8009226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}
 800923c:	fffeff88 	.word	0xfffeff88

08009240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a40      	ldr	r2, [pc, #256]	; (8009354 <TIM_Base_SetConfig+0x114>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d013      	beq.n	8009280 <TIM_Base_SetConfig+0x40>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800925e:	d00f      	beq.n	8009280 <TIM_Base_SetConfig+0x40>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a3d      	ldr	r2, [pc, #244]	; (8009358 <TIM_Base_SetConfig+0x118>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d00b      	beq.n	8009280 <TIM_Base_SetConfig+0x40>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a3c      	ldr	r2, [pc, #240]	; (800935c <TIM_Base_SetConfig+0x11c>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d007      	beq.n	8009280 <TIM_Base_SetConfig+0x40>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a3b      	ldr	r2, [pc, #236]	; (8009360 <TIM_Base_SetConfig+0x120>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d003      	beq.n	8009280 <TIM_Base_SetConfig+0x40>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a3a      	ldr	r2, [pc, #232]	; (8009364 <TIM_Base_SetConfig+0x124>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d108      	bne.n	8009292 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	4313      	orrs	r3, r2
 8009290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a2f      	ldr	r2, [pc, #188]	; (8009354 <TIM_Base_SetConfig+0x114>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d02b      	beq.n	80092f2 <TIM_Base_SetConfig+0xb2>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092a0:	d027      	beq.n	80092f2 <TIM_Base_SetConfig+0xb2>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4a2c      	ldr	r2, [pc, #176]	; (8009358 <TIM_Base_SetConfig+0x118>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d023      	beq.n	80092f2 <TIM_Base_SetConfig+0xb2>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4a2b      	ldr	r2, [pc, #172]	; (800935c <TIM_Base_SetConfig+0x11c>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d01f      	beq.n	80092f2 <TIM_Base_SetConfig+0xb2>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	4a2a      	ldr	r2, [pc, #168]	; (8009360 <TIM_Base_SetConfig+0x120>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d01b      	beq.n	80092f2 <TIM_Base_SetConfig+0xb2>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4a29      	ldr	r2, [pc, #164]	; (8009364 <TIM_Base_SetConfig+0x124>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d017      	beq.n	80092f2 <TIM_Base_SetConfig+0xb2>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	4a28      	ldr	r2, [pc, #160]	; (8009368 <TIM_Base_SetConfig+0x128>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d013      	beq.n	80092f2 <TIM_Base_SetConfig+0xb2>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4a27      	ldr	r2, [pc, #156]	; (800936c <TIM_Base_SetConfig+0x12c>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d00f      	beq.n	80092f2 <TIM_Base_SetConfig+0xb2>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	4a26      	ldr	r2, [pc, #152]	; (8009370 <TIM_Base_SetConfig+0x130>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d00b      	beq.n	80092f2 <TIM_Base_SetConfig+0xb2>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	4a25      	ldr	r2, [pc, #148]	; (8009374 <TIM_Base_SetConfig+0x134>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d007      	beq.n	80092f2 <TIM_Base_SetConfig+0xb2>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4a24      	ldr	r2, [pc, #144]	; (8009378 <TIM_Base_SetConfig+0x138>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d003      	beq.n	80092f2 <TIM_Base_SetConfig+0xb2>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4a23      	ldr	r2, [pc, #140]	; (800937c <TIM_Base_SetConfig+0x13c>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d108      	bne.n	8009304 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	4313      	orrs	r3, r2
 8009302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	695b      	ldr	r3, [r3, #20]
 800930e:	4313      	orrs	r3, r2
 8009310:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	689a      	ldr	r2, [r3, #8]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4a0a      	ldr	r2, [pc, #40]	; (8009354 <TIM_Base_SetConfig+0x114>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d003      	beq.n	8009338 <TIM_Base_SetConfig+0xf8>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a0c      	ldr	r2, [pc, #48]	; (8009364 <TIM_Base_SetConfig+0x124>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d103      	bne.n	8009340 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	691a      	ldr	r2, [r3, #16]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	615a      	str	r2, [r3, #20]
}
 8009346:	bf00      	nop
 8009348:	3714      	adds	r7, #20
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	40010000 	.word	0x40010000
 8009358:	40000400 	.word	0x40000400
 800935c:	40000800 	.word	0x40000800
 8009360:	40000c00 	.word	0x40000c00
 8009364:	40010400 	.word	0x40010400
 8009368:	40014000 	.word	0x40014000
 800936c:	40014400 	.word	0x40014400
 8009370:	40014800 	.word	0x40014800
 8009374:	40001800 	.word	0x40001800
 8009378:	40001c00 	.word	0x40001c00
 800937c:	40002000 	.word	0x40002000

08009380 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009380:	b480      	push	{r7}
 8009382:	b087      	sub	sp, #28
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6a1b      	ldr	r3, [r3, #32]
 800938e:	f023 0201 	bic.w	r2, r3, #1
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	4b2b      	ldr	r3, [pc, #172]	; (8009458 <TIM_OC1_SetConfig+0xd8>)
 80093ac:	4013      	ands	r3, r2
 80093ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f023 0303 	bic.w	r3, r3, #3
 80093b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	4313      	orrs	r3, r2
 80093c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	f023 0302 	bic.w	r3, r3, #2
 80093c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	697a      	ldr	r2, [r7, #20]
 80093d0:	4313      	orrs	r3, r2
 80093d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a21      	ldr	r2, [pc, #132]	; (800945c <TIM_OC1_SetConfig+0xdc>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d003      	beq.n	80093e4 <TIM_OC1_SetConfig+0x64>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a20      	ldr	r2, [pc, #128]	; (8009460 <TIM_OC1_SetConfig+0xe0>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d10c      	bne.n	80093fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	f023 0308 	bic.w	r3, r3, #8
 80093ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	697a      	ldr	r2, [r7, #20]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	f023 0304 	bic.w	r3, r3, #4
 80093fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4a16      	ldr	r2, [pc, #88]	; (800945c <TIM_OC1_SetConfig+0xdc>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d003      	beq.n	800940e <TIM_OC1_SetConfig+0x8e>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a15      	ldr	r2, [pc, #84]	; (8009460 <TIM_OC1_SetConfig+0xe0>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d111      	bne.n	8009432 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009414:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800941c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	695b      	ldr	r3, [r3, #20]
 8009422:	693a      	ldr	r2, [r7, #16]
 8009424:	4313      	orrs	r3, r2
 8009426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	699b      	ldr	r3, [r3, #24]
 800942c:	693a      	ldr	r2, [r7, #16]
 800942e:	4313      	orrs	r3, r2
 8009430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	693a      	ldr	r2, [r7, #16]
 8009436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	685a      	ldr	r2, [r3, #4]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	697a      	ldr	r2, [r7, #20]
 800944a:	621a      	str	r2, [r3, #32]
}
 800944c:	bf00      	nop
 800944e:	371c      	adds	r7, #28
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr
 8009458:	fffeff8f 	.word	0xfffeff8f
 800945c:	40010000 	.word	0x40010000
 8009460:	40010400 	.word	0x40010400

08009464 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009464:	b480      	push	{r7}
 8009466:	b087      	sub	sp, #28
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6a1b      	ldr	r3, [r3, #32]
 8009472:	f023 0210 	bic.w	r2, r3, #16
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a1b      	ldr	r3, [r3, #32]
 800947e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	699b      	ldr	r3, [r3, #24]
 800948a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	4b2e      	ldr	r3, [pc, #184]	; (8009548 <TIM_OC2_SetConfig+0xe4>)
 8009490:	4013      	ands	r3, r2
 8009492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800949a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	021b      	lsls	r3, r3, #8
 80094a2:	68fa      	ldr	r2, [r7, #12]
 80094a4:	4313      	orrs	r3, r2
 80094a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	f023 0320 	bic.w	r3, r3, #32
 80094ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	011b      	lsls	r3, r3, #4
 80094b6:	697a      	ldr	r2, [r7, #20]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a23      	ldr	r2, [pc, #140]	; (800954c <TIM_OC2_SetConfig+0xe8>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d003      	beq.n	80094cc <TIM_OC2_SetConfig+0x68>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a22      	ldr	r2, [pc, #136]	; (8009550 <TIM_OC2_SetConfig+0xec>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d10d      	bne.n	80094e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	011b      	lsls	r3, r3, #4
 80094da:	697a      	ldr	r2, [r7, #20]
 80094dc:	4313      	orrs	r3, r2
 80094de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a18      	ldr	r2, [pc, #96]	; (800954c <TIM_OC2_SetConfig+0xe8>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d003      	beq.n	80094f8 <TIM_OC2_SetConfig+0x94>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a17      	ldr	r2, [pc, #92]	; (8009550 <TIM_OC2_SetConfig+0xec>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d113      	bne.n	8009520 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009506:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	695b      	ldr	r3, [r3, #20]
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	4313      	orrs	r3, r2
 8009512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	699b      	ldr	r3, [r3, #24]
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	693a      	ldr	r2, [r7, #16]
 800951c:	4313      	orrs	r3, r2
 800951e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	693a      	ldr	r2, [r7, #16]
 8009524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	685a      	ldr	r2, [r3, #4]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	697a      	ldr	r2, [r7, #20]
 8009538:	621a      	str	r2, [r3, #32]
}
 800953a:	bf00      	nop
 800953c:	371c      	adds	r7, #28
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop
 8009548:	feff8fff 	.word	0xfeff8fff
 800954c:	40010000 	.word	0x40010000
 8009550:	40010400 	.word	0x40010400

08009554 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009554:	b480      	push	{r7}
 8009556:	b087      	sub	sp, #28
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6a1b      	ldr	r3, [r3, #32]
 8009562:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a1b      	ldr	r3, [r3, #32]
 800956e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	69db      	ldr	r3, [r3, #28]
 800957a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	4b2d      	ldr	r3, [pc, #180]	; (8009634 <TIM_OC3_SetConfig+0xe0>)
 8009580:	4013      	ands	r3, r2
 8009582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f023 0303 	bic.w	r3, r3, #3
 800958a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	4313      	orrs	r3, r2
 8009594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800959c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	021b      	lsls	r3, r3, #8
 80095a4:	697a      	ldr	r2, [r7, #20]
 80095a6:	4313      	orrs	r3, r2
 80095a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a22      	ldr	r2, [pc, #136]	; (8009638 <TIM_OC3_SetConfig+0xe4>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d003      	beq.n	80095ba <TIM_OC3_SetConfig+0x66>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a21      	ldr	r2, [pc, #132]	; (800963c <TIM_OC3_SetConfig+0xe8>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d10d      	bne.n	80095d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	021b      	lsls	r3, r3, #8
 80095c8:	697a      	ldr	r2, [r7, #20]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a17      	ldr	r2, [pc, #92]	; (8009638 <TIM_OC3_SetConfig+0xe4>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d003      	beq.n	80095e6 <TIM_OC3_SetConfig+0x92>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4a16      	ldr	r2, [pc, #88]	; (800963c <TIM_OC3_SetConfig+0xe8>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d113      	bne.n	800960e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80095f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	695b      	ldr	r3, [r3, #20]
 80095fa:	011b      	lsls	r3, r3, #4
 80095fc:	693a      	ldr	r2, [r7, #16]
 80095fe:	4313      	orrs	r3, r2
 8009600:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	699b      	ldr	r3, [r3, #24]
 8009606:	011b      	lsls	r3, r3, #4
 8009608:	693a      	ldr	r2, [r7, #16]
 800960a:	4313      	orrs	r3, r2
 800960c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	693a      	ldr	r2, [r7, #16]
 8009612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	685a      	ldr	r2, [r3, #4]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	697a      	ldr	r2, [r7, #20]
 8009626:	621a      	str	r2, [r3, #32]
}
 8009628:	bf00      	nop
 800962a:	371c      	adds	r7, #28
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr
 8009634:	fffeff8f 	.word	0xfffeff8f
 8009638:	40010000 	.word	0x40010000
 800963c:	40010400 	.word	0x40010400

08009640 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009640:	b480      	push	{r7}
 8009642:	b087      	sub	sp, #28
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	69db      	ldr	r3, [r3, #28]
 8009666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	4b1e      	ldr	r3, [pc, #120]	; (80096e4 <TIM_OC4_SetConfig+0xa4>)
 800966c:	4013      	ands	r3, r2
 800966e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	021b      	lsls	r3, r3, #8
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	4313      	orrs	r3, r2
 8009682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800968a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	031b      	lsls	r3, r3, #12
 8009692:	693a      	ldr	r2, [r7, #16]
 8009694:	4313      	orrs	r3, r2
 8009696:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a13      	ldr	r2, [pc, #76]	; (80096e8 <TIM_OC4_SetConfig+0xa8>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d003      	beq.n	80096a8 <TIM_OC4_SetConfig+0x68>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a12      	ldr	r2, [pc, #72]	; (80096ec <TIM_OC4_SetConfig+0xac>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d109      	bne.n	80096bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	695b      	ldr	r3, [r3, #20]
 80096b4:	019b      	lsls	r3, r3, #6
 80096b6:	697a      	ldr	r2, [r7, #20]
 80096b8:	4313      	orrs	r3, r2
 80096ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	685a      	ldr	r2, [r3, #4]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	693a      	ldr	r2, [r7, #16]
 80096d4:	621a      	str	r2, [r3, #32]
}
 80096d6:	bf00      	nop
 80096d8:	371c      	adds	r7, #28
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	feff8fff 	.word	0xfeff8fff
 80096e8:	40010000 	.word	0x40010000
 80096ec:	40010400 	.word	0x40010400

080096f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b087      	sub	sp, #28
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6a1b      	ldr	r3, [r3, #32]
 80096fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6a1b      	ldr	r3, [r3, #32]
 800970a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009718:	68fa      	ldr	r2, [r7, #12]
 800971a:	4b1b      	ldr	r3, [pc, #108]	; (8009788 <TIM_OC5_SetConfig+0x98>)
 800971c:	4013      	ands	r3, r2
 800971e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	68fa      	ldr	r2, [r7, #12]
 8009726:	4313      	orrs	r3, r2
 8009728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009730:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	041b      	lsls	r3, r3, #16
 8009738:	693a      	ldr	r2, [r7, #16]
 800973a:	4313      	orrs	r3, r2
 800973c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4a12      	ldr	r2, [pc, #72]	; (800978c <TIM_OC5_SetConfig+0x9c>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d003      	beq.n	800974e <TIM_OC5_SetConfig+0x5e>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a11      	ldr	r2, [pc, #68]	; (8009790 <TIM_OC5_SetConfig+0xa0>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d109      	bne.n	8009762 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009754:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	021b      	lsls	r3, r3, #8
 800975c:	697a      	ldr	r2, [r7, #20]
 800975e:	4313      	orrs	r3, r2
 8009760:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	697a      	ldr	r2, [r7, #20]
 8009766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	685a      	ldr	r2, [r3, #4]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	693a      	ldr	r2, [r7, #16]
 800977a:	621a      	str	r2, [r3, #32]
}
 800977c:	bf00      	nop
 800977e:	371c      	adds	r7, #28
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr
 8009788:	fffeff8f 	.word	0xfffeff8f
 800978c:	40010000 	.word	0x40010000
 8009790:	40010400 	.word	0x40010400

08009794 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009794:	b480      	push	{r7}
 8009796:	b087      	sub	sp, #28
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a1b      	ldr	r3, [r3, #32]
 80097a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a1b      	ldr	r3, [r3, #32]
 80097ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	4b1c      	ldr	r3, [pc, #112]	; (8009830 <TIM_OC6_SetConfig+0x9c>)
 80097c0:	4013      	ands	r3, r2
 80097c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	021b      	lsls	r3, r3, #8
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	4313      	orrs	r3, r2
 80097ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80097d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	051b      	lsls	r3, r3, #20
 80097de:	693a      	ldr	r2, [r7, #16]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4a13      	ldr	r2, [pc, #76]	; (8009834 <TIM_OC6_SetConfig+0xa0>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d003      	beq.n	80097f4 <TIM_OC6_SetConfig+0x60>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4a12      	ldr	r2, [pc, #72]	; (8009838 <TIM_OC6_SetConfig+0xa4>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d109      	bne.n	8009808 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	695b      	ldr	r3, [r3, #20]
 8009800:	029b      	lsls	r3, r3, #10
 8009802:	697a      	ldr	r2, [r7, #20]
 8009804:	4313      	orrs	r3, r2
 8009806:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	697a      	ldr	r2, [r7, #20]
 800980c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	685a      	ldr	r2, [r3, #4]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	693a      	ldr	r2, [r7, #16]
 8009820:	621a      	str	r2, [r3, #32]
}
 8009822:	bf00      	nop
 8009824:	371c      	adds	r7, #28
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop
 8009830:	feff8fff 	.word	0xfeff8fff
 8009834:	40010000 	.word	0x40010000
 8009838:	40010400 	.word	0x40010400

0800983c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800983c:	b480      	push	{r7}
 800983e:	b087      	sub	sp, #28
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	6a1b      	ldr	r3, [r3, #32]
 800984c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6a1b      	ldr	r3, [r3, #32]
 8009852:	f023 0201 	bic.w	r2, r3, #1
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	699b      	ldr	r3, [r3, #24]
 800985e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	011b      	lsls	r3, r3, #4
 800986c:	693a      	ldr	r2, [r7, #16]
 800986e:	4313      	orrs	r3, r2
 8009870:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	f023 030a 	bic.w	r3, r3, #10
 8009878:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800987a:	697a      	ldr	r2, [r7, #20]
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	4313      	orrs	r3, r2
 8009880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	693a      	ldr	r2, [r7, #16]
 8009886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	697a      	ldr	r2, [r7, #20]
 800988c:	621a      	str	r2, [r3, #32]
}
 800988e:	bf00      	nop
 8009890:	371c      	adds	r7, #28
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr

0800989a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800989a:	b480      	push	{r7}
 800989c:	b087      	sub	sp, #28
 800989e:	af00      	add	r7, sp, #0
 80098a0:	60f8      	str	r0, [r7, #12]
 80098a2:	60b9      	str	r1, [r7, #8]
 80098a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	6a1b      	ldr	r3, [r3, #32]
 80098aa:	f023 0210 	bic.w	r2, r3, #16
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	699b      	ldr	r3, [r3, #24]
 80098b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6a1b      	ldr	r3, [r3, #32]
 80098bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	031b      	lsls	r3, r3, #12
 80098ca:	697a      	ldr	r2, [r7, #20]
 80098cc:	4313      	orrs	r3, r2
 80098ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	011b      	lsls	r3, r3, #4
 80098dc:	693a      	ldr	r2, [r7, #16]
 80098de:	4313      	orrs	r3, r2
 80098e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	697a      	ldr	r2, [r7, #20]
 80098e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	621a      	str	r2, [r3, #32]
}
 80098ee:	bf00      	nop
 80098f0:	371c      	adds	r7, #28
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr

080098fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098fa:	b480      	push	{r7}
 80098fc:	b085      	sub	sp, #20
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009910:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009912:	683a      	ldr	r2, [r7, #0]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	4313      	orrs	r3, r2
 8009918:	f043 0307 	orr.w	r3, r3, #7
 800991c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	609a      	str	r2, [r3, #8]
}
 8009924:	bf00      	nop
 8009926:	3714      	adds	r7, #20
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009930:	b480      	push	{r7}
 8009932:	b087      	sub	sp, #28
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	607a      	str	r2, [r7, #4]
 800993c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800994a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	021a      	lsls	r2, r3, #8
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	431a      	orrs	r2, r3
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	4313      	orrs	r3, r2
 8009958:	697a      	ldr	r2, [r7, #20]
 800995a:	4313      	orrs	r3, r2
 800995c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	697a      	ldr	r2, [r7, #20]
 8009962:	609a      	str	r2, [r3, #8]
}
 8009964:	bf00      	nop
 8009966:	371c      	adds	r7, #28
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009970:	b480      	push	{r7}
 8009972:	b085      	sub	sp, #20
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009980:	2b01      	cmp	r3, #1
 8009982:	d101      	bne.n	8009988 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009984:	2302      	movs	r3, #2
 8009986:	e06d      	b.n	8009a64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2202      	movs	r2, #2
 8009994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a30      	ldr	r2, [pc, #192]	; (8009a70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d004      	beq.n	80099bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a2f      	ldr	r2, [pc, #188]	; (8009a74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d108      	bne.n	80099ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80099c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	68fa      	ldr	r2, [r7, #12]
 80099dc:	4313      	orrs	r3, r2
 80099de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a20      	ldr	r2, [pc, #128]	; (8009a70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d022      	beq.n	8009a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099fa:	d01d      	beq.n	8009a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a1d      	ldr	r2, [pc, #116]	; (8009a78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d018      	beq.n	8009a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a1c      	ldr	r2, [pc, #112]	; (8009a7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d013      	beq.n	8009a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a1a      	ldr	r2, [pc, #104]	; (8009a80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d00e      	beq.n	8009a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a15      	ldr	r2, [pc, #84]	; (8009a74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d009      	beq.n	8009a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a16      	ldr	r2, [pc, #88]	; (8009a84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d004      	beq.n	8009a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a15      	ldr	r2, [pc, #84]	; (8009a88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d10c      	bne.n	8009a52 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	4313      	orrs	r3, r2
 8009a48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68ba      	ldr	r2, [r7, #8]
 8009a50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2201      	movs	r2, #1
 8009a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a62:	2300      	movs	r3, #0
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3714      	adds	r7, #20
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr
 8009a70:	40010000 	.word	0x40010000
 8009a74:	40010400 	.word	0x40010400
 8009a78:	40000400 	.word	0x40000400
 8009a7c:	40000800 	.word	0x40000800
 8009a80:	40000c00 	.word	0x40000c00
 8009a84:	40014000 	.word	0x40014000
 8009a88:	40001800 	.word	0x40001800

08009a8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009a96:	2300      	movs	r3, #0
 8009a98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d101      	bne.n	8009aa8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	e065      	b.n	8009b74 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	4313      	orrs	r3, r2
 8009af4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	695b      	ldr	r3, [r3, #20]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	699b      	ldr	r3, [r3, #24]
 8009b1c:	041b      	lsls	r3, r3, #16
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a16      	ldr	r2, [pc, #88]	; (8009b80 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d004      	beq.n	8009b36 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a14      	ldr	r2, [pc, #80]	; (8009b84 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d115      	bne.n	8009b62 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b40:	051b      	lsls	r3, r3, #20
 8009b42:	4313      	orrs	r3, r2
 8009b44:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	69db      	ldr	r3, [r3, #28]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	6a1b      	ldr	r3, [r3, #32]
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	68fa      	ldr	r2, [r7, #12]
 8009b68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b72:	2300      	movs	r3, #0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3714      	adds	r7, #20
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr
 8009b80:	40010000 	.word	0x40010000
 8009b84:	40010400 	.word	0x40010400

08009b88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d101      	bne.n	8009b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	e040      	b.n	8009c1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d106      	bne.n	8009bb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f7f9 fa7a 	bl	80030a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2224      	movs	r2, #36	; 0x24
 8009bb4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f022 0201 	bic.w	r2, r2, #1
 8009bc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f8c0 	bl	8009d4c <UART_SetConfig>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d101      	bne.n	8009bd6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e022      	b.n	8009c1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d002      	beq.n	8009be4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fb16 	bl	800a210 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	685a      	ldr	r2, [r3, #4]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009bf2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	689a      	ldr	r2, [r3, #8]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f042 0201 	orr.w	r2, r2, #1
 8009c12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fb9d 	bl	800a354 <UART_CheckIdleState>
 8009c1a:	4603      	mov	r3, r0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b08a      	sub	sp, #40	; 0x28
 8009c28:	af02      	add	r7, sp, #8
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	603b      	str	r3, [r7, #0]
 8009c30:	4613      	mov	r3, r2
 8009c32:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c38:	2b20      	cmp	r3, #32
 8009c3a:	f040 8081 	bne.w	8009d40 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d002      	beq.n	8009c4a <HAL_UART_Transmit+0x26>
 8009c44:	88fb      	ldrh	r3, [r7, #6]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d101      	bne.n	8009c4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e079      	b.n	8009d42 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d101      	bne.n	8009c5c <HAL_UART_Transmit+0x38>
 8009c58:	2302      	movs	r3, #2
 8009c5a:	e072      	b.n	8009d42 <HAL_UART_Transmit+0x11e>
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2200      	movs	r2, #0
 8009c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2221      	movs	r2, #33	; 0x21
 8009c70:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c72:	f7f9 fcb9 	bl	80035e8 <HAL_GetTick>
 8009c76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	88fa      	ldrh	r2, [r7, #6]
 8009c7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	88fa      	ldrh	r2, [r7, #6]
 8009c84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c90:	d108      	bne.n	8009ca4 <HAL_UART_Transmit+0x80>
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d104      	bne.n	8009ca4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	61bb      	str	r3, [r7, #24]
 8009ca2:	e003      	b.n	8009cac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009cb4:	e02c      	b.n	8009d10 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	9300      	str	r3, [sp, #0]
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	2180      	movs	r1, #128	; 0x80
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	f000 fb7a 	bl	800a3ba <UART_WaitOnFlagUntilTimeout>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d001      	beq.n	8009cd0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009ccc:	2303      	movs	r3, #3
 8009cce:	e038      	b.n	8009d42 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d10b      	bne.n	8009cee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	881b      	ldrh	r3, [r3, #0]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ce4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	3302      	adds	r3, #2
 8009cea:	61bb      	str	r3, [r7, #24]
 8009cec:	e007      	b.n	8009cfe <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	781a      	ldrb	r2, [r3, #0]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	3b01      	subs	r3, #1
 8009d08:	b29a      	uxth	r2, r3
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d1cc      	bne.n	8009cb6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	9300      	str	r3, [sp, #0]
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	2200      	movs	r2, #0
 8009d24:	2140      	movs	r1, #64	; 0x40
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	f000 fb47 	bl	800a3ba <UART_WaitOnFlagUntilTimeout>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d001      	beq.n	8009d36 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8009d32:	2303      	movs	r3, #3
 8009d34:	e005      	b.n	8009d42 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2220      	movs	r2, #32
 8009d3a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	e000      	b.n	8009d42 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8009d40:	2302      	movs	r3, #2
  }
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3720      	adds	r7, #32
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
	...

08009d4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b088      	sub	sp, #32
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d54:	2300      	movs	r3, #0
 8009d56:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	689a      	ldr	r2, [r3, #8]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	691b      	ldr	r3, [r3, #16]
 8009d60:	431a      	orrs	r2, r3
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	695b      	ldr	r3, [r3, #20]
 8009d66:	431a      	orrs	r2, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	69db      	ldr	r3, [r3, #28]
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	4ba7      	ldr	r3, [pc, #668]	; (800a014 <UART_SetConfig+0x2c8>)
 8009d78:	4013      	ands	r3, r2
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	6812      	ldr	r2, [r2, #0]
 8009d7e:	6979      	ldr	r1, [r7, #20]
 8009d80:	430b      	orrs	r3, r1
 8009d82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	68da      	ldr	r2, [r3, #12]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	430a      	orrs	r2, r1
 8009d98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	699b      	ldr	r3, [r3, #24]
 8009d9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6a1b      	ldr	r3, [r3, #32]
 8009da4:	697a      	ldr	r2, [r7, #20]
 8009da6:	4313      	orrs	r3, r2
 8009da8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	697a      	ldr	r2, [r7, #20]
 8009dba:	430a      	orrs	r2, r1
 8009dbc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a95      	ldr	r2, [pc, #596]	; (800a018 <UART_SetConfig+0x2cc>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d120      	bne.n	8009e0a <UART_SetConfig+0xbe>
 8009dc8:	4b94      	ldr	r3, [pc, #592]	; (800a01c <UART_SetConfig+0x2d0>)
 8009dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dce:	f003 0303 	and.w	r3, r3, #3
 8009dd2:	2b03      	cmp	r3, #3
 8009dd4:	d816      	bhi.n	8009e04 <UART_SetConfig+0xb8>
 8009dd6:	a201      	add	r2, pc, #4	; (adr r2, 8009ddc <UART_SetConfig+0x90>)
 8009dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ddc:	08009ded 	.word	0x08009ded
 8009de0:	08009df9 	.word	0x08009df9
 8009de4:	08009df3 	.word	0x08009df3
 8009de8:	08009dff 	.word	0x08009dff
 8009dec:	2301      	movs	r3, #1
 8009dee:	77fb      	strb	r3, [r7, #31]
 8009df0:	e14f      	b.n	800a092 <UART_SetConfig+0x346>
 8009df2:	2302      	movs	r3, #2
 8009df4:	77fb      	strb	r3, [r7, #31]
 8009df6:	e14c      	b.n	800a092 <UART_SetConfig+0x346>
 8009df8:	2304      	movs	r3, #4
 8009dfa:	77fb      	strb	r3, [r7, #31]
 8009dfc:	e149      	b.n	800a092 <UART_SetConfig+0x346>
 8009dfe:	2308      	movs	r3, #8
 8009e00:	77fb      	strb	r3, [r7, #31]
 8009e02:	e146      	b.n	800a092 <UART_SetConfig+0x346>
 8009e04:	2310      	movs	r3, #16
 8009e06:	77fb      	strb	r3, [r7, #31]
 8009e08:	e143      	b.n	800a092 <UART_SetConfig+0x346>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a84      	ldr	r2, [pc, #528]	; (800a020 <UART_SetConfig+0x2d4>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d132      	bne.n	8009e7a <UART_SetConfig+0x12e>
 8009e14:	4b81      	ldr	r3, [pc, #516]	; (800a01c <UART_SetConfig+0x2d0>)
 8009e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e1a:	f003 030c 	and.w	r3, r3, #12
 8009e1e:	2b0c      	cmp	r3, #12
 8009e20:	d828      	bhi.n	8009e74 <UART_SetConfig+0x128>
 8009e22:	a201      	add	r2, pc, #4	; (adr r2, 8009e28 <UART_SetConfig+0xdc>)
 8009e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e28:	08009e5d 	.word	0x08009e5d
 8009e2c:	08009e75 	.word	0x08009e75
 8009e30:	08009e75 	.word	0x08009e75
 8009e34:	08009e75 	.word	0x08009e75
 8009e38:	08009e69 	.word	0x08009e69
 8009e3c:	08009e75 	.word	0x08009e75
 8009e40:	08009e75 	.word	0x08009e75
 8009e44:	08009e75 	.word	0x08009e75
 8009e48:	08009e63 	.word	0x08009e63
 8009e4c:	08009e75 	.word	0x08009e75
 8009e50:	08009e75 	.word	0x08009e75
 8009e54:	08009e75 	.word	0x08009e75
 8009e58:	08009e6f 	.word	0x08009e6f
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	77fb      	strb	r3, [r7, #31]
 8009e60:	e117      	b.n	800a092 <UART_SetConfig+0x346>
 8009e62:	2302      	movs	r3, #2
 8009e64:	77fb      	strb	r3, [r7, #31]
 8009e66:	e114      	b.n	800a092 <UART_SetConfig+0x346>
 8009e68:	2304      	movs	r3, #4
 8009e6a:	77fb      	strb	r3, [r7, #31]
 8009e6c:	e111      	b.n	800a092 <UART_SetConfig+0x346>
 8009e6e:	2308      	movs	r3, #8
 8009e70:	77fb      	strb	r3, [r7, #31]
 8009e72:	e10e      	b.n	800a092 <UART_SetConfig+0x346>
 8009e74:	2310      	movs	r3, #16
 8009e76:	77fb      	strb	r3, [r7, #31]
 8009e78:	e10b      	b.n	800a092 <UART_SetConfig+0x346>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a69      	ldr	r2, [pc, #420]	; (800a024 <UART_SetConfig+0x2d8>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d120      	bne.n	8009ec6 <UART_SetConfig+0x17a>
 8009e84:	4b65      	ldr	r3, [pc, #404]	; (800a01c <UART_SetConfig+0x2d0>)
 8009e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e8a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009e8e:	2b30      	cmp	r3, #48	; 0x30
 8009e90:	d013      	beq.n	8009eba <UART_SetConfig+0x16e>
 8009e92:	2b30      	cmp	r3, #48	; 0x30
 8009e94:	d814      	bhi.n	8009ec0 <UART_SetConfig+0x174>
 8009e96:	2b20      	cmp	r3, #32
 8009e98:	d009      	beq.n	8009eae <UART_SetConfig+0x162>
 8009e9a:	2b20      	cmp	r3, #32
 8009e9c:	d810      	bhi.n	8009ec0 <UART_SetConfig+0x174>
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d002      	beq.n	8009ea8 <UART_SetConfig+0x15c>
 8009ea2:	2b10      	cmp	r3, #16
 8009ea4:	d006      	beq.n	8009eb4 <UART_SetConfig+0x168>
 8009ea6:	e00b      	b.n	8009ec0 <UART_SetConfig+0x174>
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	77fb      	strb	r3, [r7, #31]
 8009eac:	e0f1      	b.n	800a092 <UART_SetConfig+0x346>
 8009eae:	2302      	movs	r3, #2
 8009eb0:	77fb      	strb	r3, [r7, #31]
 8009eb2:	e0ee      	b.n	800a092 <UART_SetConfig+0x346>
 8009eb4:	2304      	movs	r3, #4
 8009eb6:	77fb      	strb	r3, [r7, #31]
 8009eb8:	e0eb      	b.n	800a092 <UART_SetConfig+0x346>
 8009eba:	2308      	movs	r3, #8
 8009ebc:	77fb      	strb	r3, [r7, #31]
 8009ebe:	e0e8      	b.n	800a092 <UART_SetConfig+0x346>
 8009ec0:	2310      	movs	r3, #16
 8009ec2:	77fb      	strb	r3, [r7, #31]
 8009ec4:	e0e5      	b.n	800a092 <UART_SetConfig+0x346>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a57      	ldr	r2, [pc, #348]	; (800a028 <UART_SetConfig+0x2dc>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d120      	bne.n	8009f12 <UART_SetConfig+0x1c6>
 8009ed0:	4b52      	ldr	r3, [pc, #328]	; (800a01c <UART_SetConfig+0x2d0>)
 8009ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ed6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009eda:	2bc0      	cmp	r3, #192	; 0xc0
 8009edc:	d013      	beq.n	8009f06 <UART_SetConfig+0x1ba>
 8009ede:	2bc0      	cmp	r3, #192	; 0xc0
 8009ee0:	d814      	bhi.n	8009f0c <UART_SetConfig+0x1c0>
 8009ee2:	2b80      	cmp	r3, #128	; 0x80
 8009ee4:	d009      	beq.n	8009efa <UART_SetConfig+0x1ae>
 8009ee6:	2b80      	cmp	r3, #128	; 0x80
 8009ee8:	d810      	bhi.n	8009f0c <UART_SetConfig+0x1c0>
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d002      	beq.n	8009ef4 <UART_SetConfig+0x1a8>
 8009eee:	2b40      	cmp	r3, #64	; 0x40
 8009ef0:	d006      	beq.n	8009f00 <UART_SetConfig+0x1b4>
 8009ef2:	e00b      	b.n	8009f0c <UART_SetConfig+0x1c0>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	77fb      	strb	r3, [r7, #31]
 8009ef8:	e0cb      	b.n	800a092 <UART_SetConfig+0x346>
 8009efa:	2302      	movs	r3, #2
 8009efc:	77fb      	strb	r3, [r7, #31]
 8009efe:	e0c8      	b.n	800a092 <UART_SetConfig+0x346>
 8009f00:	2304      	movs	r3, #4
 8009f02:	77fb      	strb	r3, [r7, #31]
 8009f04:	e0c5      	b.n	800a092 <UART_SetConfig+0x346>
 8009f06:	2308      	movs	r3, #8
 8009f08:	77fb      	strb	r3, [r7, #31]
 8009f0a:	e0c2      	b.n	800a092 <UART_SetConfig+0x346>
 8009f0c:	2310      	movs	r3, #16
 8009f0e:	77fb      	strb	r3, [r7, #31]
 8009f10:	e0bf      	b.n	800a092 <UART_SetConfig+0x346>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a45      	ldr	r2, [pc, #276]	; (800a02c <UART_SetConfig+0x2e0>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d125      	bne.n	8009f68 <UART_SetConfig+0x21c>
 8009f1c:	4b3f      	ldr	r3, [pc, #252]	; (800a01c <UART_SetConfig+0x2d0>)
 8009f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f2a:	d017      	beq.n	8009f5c <UART_SetConfig+0x210>
 8009f2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f30:	d817      	bhi.n	8009f62 <UART_SetConfig+0x216>
 8009f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f36:	d00b      	beq.n	8009f50 <UART_SetConfig+0x204>
 8009f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f3c:	d811      	bhi.n	8009f62 <UART_SetConfig+0x216>
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d003      	beq.n	8009f4a <UART_SetConfig+0x1fe>
 8009f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f46:	d006      	beq.n	8009f56 <UART_SetConfig+0x20a>
 8009f48:	e00b      	b.n	8009f62 <UART_SetConfig+0x216>
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	77fb      	strb	r3, [r7, #31]
 8009f4e:	e0a0      	b.n	800a092 <UART_SetConfig+0x346>
 8009f50:	2302      	movs	r3, #2
 8009f52:	77fb      	strb	r3, [r7, #31]
 8009f54:	e09d      	b.n	800a092 <UART_SetConfig+0x346>
 8009f56:	2304      	movs	r3, #4
 8009f58:	77fb      	strb	r3, [r7, #31]
 8009f5a:	e09a      	b.n	800a092 <UART_SetConfig+0x346>
 8009f5c:	2308      	movs	r3, #8
 8009f5e:	77fb      	strb	r3, [r7, #31]
 8009f60:	e097      	b.n	800a092 <UART_SetConfig+0x346>
 8009f62:	2310      	movs	r3, #16
 8009f64:	77fb      	strb	r3, [r7, #31]
 8009f66:	e094      	b.n	800a092 <UART_SetConfig+0x346>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a30      	ldr	r2, [pc, #192]	; (800a030 <UART_SetConfig+0x2e4>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d125      	bne.n	8009fbe <UART_SetConfig+0x272>
 8009f72:	4b2a      	ldr	r3, [pc, #168]	; (800a01c <UART_SetConfig+0x2d0>)
 8009f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009f7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f80:	d017      	beq.n	8009fb2 <UART_SetConfig+0x266>
 8009f82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f86:	d817      	bhi.n	8009fb8 <UART_SetConfig+0x26c>
 8009f88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f8c:	d00b      	beq.n	8009fa6 <UART_SetConfig+0x25a>
 8009f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f92:	d811      	bhi.n	8009fb8 <UART_SetConfig+0x26c>
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d003      	beq.n	8009fa0 <UART_SetConfig+0x254>
 8009f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f9c:	d006      	beq.n	8009fac <UART_SetConfig+0x260>
 8009f9e:	e00b      	b.n	8009fb8 <UART_SetConfig+0x26c>
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	77fb      	strb	r3, [r7, #31]
 8009fa4:	e075      	b.n	800a092 <UART_SetConfig+0x346>
 8009fa6:	2302      	movs	r3, #2
 8009fa8:	77fb      	strb	r3, [r7, #31]
 8009faa:	e072      	b.n	800a092 <UART_SetConfig+0x346>
 8009fac:	2304      	movs	r3, #4
 8009fae:	77fb      	strb	r3, [r7, #31]
 8009fb0:	e06f      	b.n	800a092 <UART_SetConfig+0x346>
 8009fb2:	2308      	movs	r3, #8
 8009fb4:	77fb      	strb	r3, [r7, #31]
 8009fb6:	e06c      	b.n	800a092 <UART_SetConfig+0x346>
 8009fb8:	2310      	movs	r3, #16
 8009fba:	77fb      	strb	r3, [r7, #31]
 8009fbc:	e069      	b.n	800a092 <UART_SetConfig+0x346>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4a1c      	ldr	r2, [pc, #112]	; (800a034 <UART_SetConfig+0x2e8>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d137      	bne.n	800a038 <UART_SetConfig+0x2ec>
 8009fc8:	4b14      	ldr	r3, [pc, #80]	; (800a01c <UART_SetConfig+0x2d0>)
 8009fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009fd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009fd6:	d017      	beq.n	800a008 <UART_SetConfig+0x2bc>
 8009fd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009fdc:	d817      	bhi.n	800a00e <UART_SetConfig+0x2c2>
 8009fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fe2:	d00b      	beq.n	8009ffc <UART_SetConfig+0x2b0>
 8009fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fe8:	d811      	bhi.n	800a00e <UART_SetConfig+0x2c2>
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d003      	beq.n	8009ff6 <UART_SetConfig+0x2aa>
 8009fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ff2:	d006      	beq.n	800a002 <UART_SetConfig+0x2b6>
 8009ff4:	e00b      	b.n	800a00e <UART_SetConfig+0x2c2>
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	77fb      	strb	r3, [r7, #31]
 8009ffa:	e04a      	b.n	800a092 <UART_SetConfig+0x346>
 8009ffc:	2302      	movs	r3, #2
 8009ffe:	77fb      	strb	r3, [r7, #31]
 800a000:	e047      	b.n	800a092 <UART_SetConfig+0x346>
 800a002:	2304      	movs	r3, #4
 800a004:	77fb      	strb	r3, [r7, #31]
 800a006:	e044      	b.n	800a092 <UART_SetConfig+0x346>
 800a008:	2308      	movs	r3, #8
 800a00a:	77fb      	strb	r3, [r7, #31]
 800a00c:	e041      	b.n	800a092 <UART_SetConfig+0x346>
 800a00e:	2310      	movs	r3, #16
 800a010:	77fb      	strb	r3, [r7, #31]
 800a012:	e03e      	b.n	800a092 <UART_SetConfig+0x346>
 800a014:	efff69f3 	.word	0xefff69f3
 800a018:	40011000 	.word	0x40011000
 800a01c:	40023800 	.word	0x40023800
 800a020:	40004400 	.word	0x40004400
 800a024:	40004800 	.word	0x40004800
 800a028:	40004c00 	.word	0x40004c00
 800a02c:	40005000 	.word	0x40005000
 800a030:	40011400 	.word	0x40011400
 800a034:	40007800 	.word	0x40007800
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a71      	ldr	r2, [pc, #452]	; (800a204 <UART_SetConfig+0x4b8>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d125      	bne.n	800a08e <UART_SetConfig+0x342>
 800a042:	4b71      	ldr	r3, [pc, #452]	; (800a208 <UART_SetConfig+0x4bc>)
 800a044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a048:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a04c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a050:	d017      	beq.n	800a082 <UART_SetConfig+0x336>
 800a052:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a056:	d817      	bhi.n	800a088 <UART_SetConfig+0x33c>
 800a058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a05c:	d00b      	beq.n	800a076 <UART_SetConfig+0x32a>
 800a05e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a062:	d811      	bhi.n	800a088 <UART_SetConfig+0x33c>
 800a064:	2b00      	cmp	r3, #0
 800a066:	d003      	beq.n	800a070 <UART_SetConfig+0x324>
 800a068:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a06c:	d006      	beq.n	800a07c <UART_SetConfig+0x330>
 800a06e:	e00b      	b.n	800a088 <UART_SetConfig+0x33c>
 800a070:	2300      	movs	r3, #0
 800a072:	77fb      	strb	r3, [r7, #31]
 800a074:	e00d      	b.n	800a092 <UART_SetConfig+0x346>
 800a076:	2302      	movs	r3, #2
 800a078:	77fb      	strb	r3, [r7, #31]
 800a07a:	e00a      	b.n	800a092 <UART_SetConfig+0x346>
 800a07c:	2304      	movs	r3, #4
 800a07e:	77fb      	strb	r3, [r7, #31]
 800a080:	e007      	b.n	800a092 <UART_SetConfig+0x346>
 800a082:	2308      	movs	r3, #8
 800a084:	77fb      	strb	r3, [r7, #31]
 800a086:	e004      	b.n	800a092 <UART_SetConfig+0x346>
 800a088:	2310      	movs	r3, #16
 800a08a:	77fb      	strb	r3, [r7, #31]
 800a08c:	e001      	b.n	800a092 <UART_SetConfig+0x346>
 800a08e:	2310      	movs	r3, #16
 800a090:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	69db      	ldr	r3, [r3, #28]
 800a096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a09a:	d15b      	bne.n	800a154 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800a09c:	7ffb      	ldrb	r3, [r7, #31]
 800a09e:	2b08      	cmp	r3, #8
 800a0a0:	d827      	bhi.n	800a0f2 <UART_SetConfig+0x3a6>
 800a0a2:	a201      	add	r2, pc, #4	; (adr r2, 800a0a8 <UART_SetConfig+0x35c>)
 800a0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a8:	0800a0cd 	.word	0x0800a0cd
 800a0ac:	0800a0d5 	.word	0x0800a0d5
 800a0b0:	0800a0dd 	.word	0x0800a0dd
 800a0b4:	0800a0f3 	.word	0x0800a0f3
 800a0b8:	0800a0e3 	.word	0x0800a0e3
 800a0bc:	0800a0f3 	.word	0x0800a0f3
 800a0c0:	0800a0f3 	.word	0x0800a0f3
 800a0c4:	0800a0f3 	.word	0x0800a0f3
 800a0c8:	0800a0eb 	.word	0x0800a0eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0cc:	f7fd fa48 	bl	8007560 <HAL_RCC_GetPCLK1Freq>
 800a0d0:	61b8      	str	r0, [r7, #24]
        break;
 800a0d2:	e013      	b.n	800a0fc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0d4:	f7fd fa58 	bl	8007588 <HAL_RCC_GetPCLK2Freq>
 800a0d8:	61b8      	str	r0, [r7, #24]
        break;
 800a0da:	e00f      	b.n	800a0fc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0dc:	4b4b      	ldr	r3, [pc, #300]	; (800a20c <UART_SetConfig+0x4c0>)
 800a0de:	61bb      	str	r3, [r7, #24]
        break;
 800a0e0:	e00c      	b.n	800a0fc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0e2:	f7fd f97b 	bl	80073dc <HAL_RCC_GetSysClockFreq>
 800a0e6:	61b8      	str	r0, [r7, #24]
        break;
 800a0e8:	e008      	b.n	800a0fc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0ee:	61bb      	str	r3, [r7, #24]
        break;
 800a0f0:	e004      	b.n	800a0fc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	77bb      	strb	r3, [r7, #30]
        break;
 800a0fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a0fc:	69bb      	ldr	r3, [r7, #24]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d074      	beq.n	800a1ec <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a102:	69bb      	ldr	r3, [r7, #24]
 800a104:	005a      	lsls	r2, r3, #1
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	085b      	lsrs	r3, r3, #1
 800a10c:	441a      	add	r2, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	fbb2 f3f3 	udiv	r3, r2, r3
 800a116:	b29b      	uxth	r3, r3
 800a118:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	2b0f      	cmp	r3, #15
 800a11e:	d916      	bls.n	800a14e <UART_SetConfig+0x402>
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a126:	d212      	bcs.n	800a14e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	f023 030f 	bic.w	r3, r3, #15
 800a130:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	085b      	lsrs	r3, r3, #1
 800a136:	b29b      	uxth	r3, r3
 800a138:	f003 0307 	and.w	r3, r3, #7
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	89fb      	ldrh	r3, [r7, #14]
 800a140:	4313      	orrs	r3, r2
 800a142:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	89fa      	ldrh	r2, [r7, #14]
 800a14a:	60da      	str	r2, [r3, #12]
 800a14c:	e04e      	b.n	800a1ec <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a14e:	2301      	movs	r3, #1
 800a150:	77bb      	strb	r3, [r7, #30]
 800a152:	e04b      	b.n	800a1ec <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a154:	7ffb      	ldrb	r3, [r7, #31]
 800a156:	2b08      	cmp	r3, #8
 800a158:	d827      	bhi.n	800a1aa <UART_SetConfig+0x45e>
 800a15a:	a201      	add	r2, pc, #4	; (adr r2, 800a160 <UART_SetConfig+0x414>)
 800a15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a160:	0800a185 	.word	0x0800a185
 800a164:	0800a18d 	.word	0x0800a18d
 800a168:	0800a195 	.word	0x0800a195
 800a16c:	0800a1ab 	.word	0x0800a1ab
 800a170:	0800a19b 	.word	0x0800a19b
 800a174:	0800a1ab 	.word	0x0800a1ab
 800a178:	0800a1ab 	.word	0x0800a1ab
 800a17c:	0800a1ab 	.word	0x0800a1ab
 800a180:	0800a1a3 	.word	0x0800a1a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a184:	f7fd f9ec 	bl	8007560 <HAL_RCC_GetPCLK1Freq>
 800a188:	61b8      	str	r0, [r7, #24]
        break;
 800a18a:	e013      	b.n	800a1b4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a18c:	f7fd f9fc 	bl	8007588 <HAL_RCC_GetPCLK2Freq>
 800a190:	61b8      	str	r0, [r7, #24]
        break;
 800a192:	e00f      	b.n	800a1b4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a194:	4b1d      	ldr	r3, [pc, #116]	; (800a20c <UART_SetConfig+0x4c0>)
 800a196:	61bb      	str	r3, [r7, #24]
        break;
 800a198:	e00c      	b.n	800a1b4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a19a:	f7fd f91f 	bl	80073dc <HAL_RCC_GetSysClockFreq>
 800a19e:	61b8      	str	r0, [r7, #24]
        break;
 800a1a0:	e008      	b.n	800a1b4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1a6:	61bb      	str	r3, [r7, #24]
        break;
 800a1a8:	e004      	b.n	800a1b4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	77bb      	strb	r3, [r7, #30]
        break;
 800a1b2:	bf00      	nop
    }

    if (pclk != 0U)
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d018      	beq.n	800a1ec <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	085a      	lsrs	r2, r3, #1
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	441a      	add	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	2b0f      	cmp	r3, #15
 800a1d4:	d908      	bls.n	800a1e8 <UART_SetConfig+0x49c>
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1dc:	d204      	bcs.n	800a1e8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	693a      	ldr	r2, [r7, #16]
 800a1e4:	60da      	str	r2, [r3, #12]
 800a1e6:	e001      	b.n	800a1ec <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a1f8:	7fbb      	ldrb	r3, [r7, #30]
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3720      	adds	r7, #32
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	40007c00 	.word	0x40007c00
 800a208:	40023800 	.word	0x40023800
 800a20c:	00f42400 	.word	0x00f42400

0800a210 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21c:	f003 0301 	and.w	r3, r3, #1
 800a220:	2b00      	cmp	r3, #0
 800a222:	d00a      	beq.n	800a23a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	430a      	orrs	r2, r1
 800a238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23e:	f003 0302 	and.w	r3, r3, #2
 800a242:	2b00      	cmp	r3, #0
 800a244:	d00a      	beq.n	800a25c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	430a      	orrs	r2, r1
 800a25a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a260:	f003 0304 	and.w	r3, r3, #4
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00a      	beq.n	800a27e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	430a      	orrs	r2, r1
 800a27c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a282:	f003 0308 	and.w	r3, r3, #8
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00a      	beq.n	800a2a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	430a      	orrs	r2, r1
 800a29e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a4:	f003 0310 	and.w	r3, r3, #16
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d00a      	beq.n	800a2c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	430a      	orrs	r2, r1
 800a2c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c6:	f003 0320 	and.w	r3, r3, #32
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00a      	beq.n	800a2e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	430a      	orrs	r2, r1
 800a2e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d01a      	beq.n	800a326 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	430a      	orrs	r2, r1
 800a304:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a30a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a30e:	d10a      	bne.n	800a326 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	430a      	orrs	r2, r1
 800a324:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d00a      	beq.n	800a348 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	430a      	orrs	r2, r1
 800a346:	605a      	str	r2, [r3, #4]
  }
}
 800a348:	bf00      	nop
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b086      	sub	sp, #24
 800a358:	af02      	add	r7, sp, #8
 800a35a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a364:	f7f9 f940 	bl	80035e8 <HAL_GetTick>
 800a368:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f003 0308 	and.w	r3, r3, #8
 800a374:	2b08      	cmp	r3, #8
 800a376:	d10e      	bne.n	800a396 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a378:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a37c:	9300      	str	r3, [sp, #0]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 f817 	bl	800a3ba <UART_WaitOnFlagUntilTimeout>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d001      	beq.n	800a396 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a392:	2303      	movs	r3, #3
 800a394:	e00d      	b.n	800a3b2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2220      	movs	r2, #32
 800a39a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2220      	movs	r2, #32
 800a3a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a3b0:	2300      	movs	r3, #0
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3710      	adds	r7, #16
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b084      	sub	sp, #16
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	60f8      	str	r0, [r7, #12]
 800a3c2:	60b9      	str	r1, [r7, #8]
 800a3c4:	603b      	str	r3, [r7, #0]
 800a3c6:	4613      	mov	r3, r2
 800a3c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3ca:	e05e      	b.n	800a48a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3d2:	d05a      	beq.n	800a48a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3d4:	f7f9 f908 	bl	80035e8 <HAL_GetTick>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	1ad3      	subs	r3, r2, r3
 800a3de:	69ba      	ldr	r2, [r7, #24]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d302      	bcc.n	800a3ea <UART_WaitOnFlagUntilTimeout+0x30>
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d11b      	bne.n	800a422 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a3f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	689a      	ldr	r2, [r3, #8]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f022 0201 	bic.w	r2, r2, #1
 800a408:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2220      	movs	r2, #32
 800a40e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2220      	movs	r2, #32
 800a414:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2200      	movs	r2, #0
 800a41a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a41e:	2303      	movs	r3, #3
 800a420:	e043      	b.n	800a4aa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f003 0304 	and.w	r3, r3, #4
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d02c      	beq.n	800a48a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	69db      	ldr	r3, [r3, #28]
 800a436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a43a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a43e:	d124      	bne.n	800a48a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a448:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a458:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	689a      	ldr	r2, [r3, #8]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f022 0201 	bic.w	r2, r2, #1
 800a468:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2220      	movs	r2, #32
 800a46e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2220      	movs	r2, #32
 800a474:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2220      	movs	r2, #32
 800a47a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2200      	movs	r2, #0
 800a482:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a486:	2303      	movs	r3, #3
 800a488:	e00f      	b.n	800a4aa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	69da      	ldr	r2, [r3, #28]
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	4013      	ands	r3, r2
 800a494:	68ba      	ldr	r2, [r7, #8]
 800a496:	429a      	cmp	r2, r3
 800a498:	bf0c      	ite	eq
 800a49a:	2301      	moveq	r3, #1
 800a49c:	2300      	movne	r3, #0
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	79fb      	ldrb	r3, [r7, #7]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d091      	beq.n	800a3cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4a8:	2300      	movs	r3, #0
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3710      	adds	r7, #16
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
	...

0800a4b4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d027      	beq.n	800a51e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a4d4:	68fa      	ldr	r2, [r7, #12]
 800a4d6:	4b2f      	ldr	r3, [pc, #188]	; (800a594 <FMC_SDRAM_Init+0xe0>)
 800a4d8:	4013      	ands	r3, r2
 800a4da:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a4e4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800a4ea:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800a4f0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800a4f6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800a4fc:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800a502:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800a508:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a50e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a510:	68fa      	ldr	r2, [r7, #12]
 800a512:	4313      	orrs	r3, r2
 800a514:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	68fa      	ldr	r2, [r7, #12]
 800a51a:	601a      	str	r2, [r3, #0]
 800a51c:	e032      	b.n	800a584 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a52a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a534:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a53a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	4313      	orrs	r3, r2
 800a540:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	4b12      	ldr	r3, [pc, #72]	; (800a594 <FMC_SDRAM_Init+0xe0>)
 800a54c:	4013      	ands	r3, r2
 800a54e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a558:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800a55e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800a564:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800a56a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800a570:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a572:	68ba      	ldr	r2, [r7, #8]
 800a574:	4313      	orrs	r3, r2
 800a576:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	68fa      	ldr	r2, [r7, #12]
 800a57c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	68ba      	ldr	r2, [r7, #8]
 800a582:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800a584:	2300      	movs	r3, #0
}
 800a586:	4618      	mov	r0, r3
 800a588:	3714      	adds	r7, #20
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop
 800a594:	ffff8000 	.word	0xffff8000

0800a598 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a598:	b480      	push	{r7}
 800a59a:	b087      	sub	sp, #28
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d02e      	beq.n	800a610 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	689b      	ldr	r3, [r3, #8]
 800a5b6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a5be:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	3b01      	subs	r3, #1
 800a5cc:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a5ce:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	3b01      	subs	r3, #1
 800a5d6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a5d8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	3b01      	subs	r3, #1
 800a5e0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a5e2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	691b      	ldr	r3, [r3, #16]
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a5ec:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	695b      	ldr	r3, [r3, #20]
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a5f6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	699b      	ldr	r3, [r3, #24]
 800a5fc:	3b01      	subs	r3, #1
 800a5fe:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a600:	4313      	orrs	r3, r2
 800a602:	697a      	ldr	r2, [r7, #20]
 800a604:	4313      	orrs	r3, r2
 800a606:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	697a      	ldr	r2, [r7, #20]
 800a60c:	609a      	str	r2, [r3, #8]
 800a60e:	e039      	b.n	800a684 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	689b      	ldr	r3, [r3, #8]
 800a614:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a616:	697a      	ldr	r2, [r7, #20]
 800a618:	4b1e      	ldr	r3, [pc, #120]	; (800a694 <FMC_SDRAM_Timing_Init+0xfc>)
 800a61a:	4013      	ands	r3, r2
 800a61c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	3b01      	subs	r3, #1
 800a624:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	695b      	ldr	r3, [r3, #20]
 800a62a:	3b01      	subs	r3, #1
 800a62c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a62e:	4313      	orrs	r3, r2
 800a630:	697a      	ldr	r2, [r7, #20]
 800a632:	4313      	orrs	r3, r2
 800a634:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a642:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	3b01      	subs	r3, #1
 800a650:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a652:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	3b01      	subs	r3, #1
 800a65a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a65c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	691b      	ldr	r3, [r3, #16]
 800a662:	3b01      	subs	r3, #1
 800a664:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a666:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	699b      	ldr	r3, [r3, #24]
 800a66c:	3b01      	subs	r3, #1
 800a66e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a670:	4313      	orrs	r3, r2
 800a672:	693a      	ldr	r2, [r7, #16]
 800a674:	4313      	orrs	r3, r2
 800a676:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	697a      	ldr	r2, [r7, #20]
 800a67c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	693a      	ldr	r2, [r7, #16]
 800a682:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800a684:	2300      	movs	r3, #0
}
 800a686:	4618      	mov	r0, r3
 800a688:	371c      	adds	r7, #28
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr
 800a692:	bf00      	nop
 800a694:	ff0f0fff 	.word	0xff0f0fff

0800a698 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	f043 0201 	orr.w	r2, r3, #1
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a6ac:	2300      	movs	r3, #0
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	370c      	adds	r7, #12
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr

0800a6ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a6ba:	b480      	push	{r7}
 800a6bc:	b083      	sub	sp, #12
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	689b      	ldr	r3, [r3, #8]
 800a6c6:	f023 0201 	bic.w	r2, r3, #1
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a6ce:	2300      	movs	r3, #0
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b085      	sub	sp, #20
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	019b      	lsls	r3, r3, #6
 800a6ee:	f043 0220 	orr.w	r2, r3, #32
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	60fb      	str	r3, [r7, #12]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	4a09      	ldr	r2, [pc, #36]	; (800a724 <USB_FlushTxFifo+0x48>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d901      	bls.n	800a708 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a704:	2303      	movs	r3, #3
 800a706:	e006      	b.n	800a716 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	f003 0320 	and.w	r3, r3, #32
 800a710:	2b20      	cmp	r3, #32
 800a712:	d0f0      	beq.n	800a6f6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a714:	2300      	movs	r3, #0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3714      	adds	r7, #20
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	00030d40 	.word	0x00030d40

0800a728 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a728:	b480      	push	{r7}
 800a72a:	b085      	sub	sp, #20
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a730:	2300      	movs	r3, #0
 800a732:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2210      	movs	r2, #16
 800a738:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	3301      	adds	r3, #1
 800a73e:	60fb      	str	r3, [r7, #12]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	4a09      	ldr	r2, [pc, #36]	; (800a768 <USB_FlushRxFifo+0x40>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d901      	bls.n	800a74c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a748:	2303      	movs	r3, #3
 800a74a:	e006      	b.n	800a75a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	691b      	ldr	r3, [r3, #16]
 800a750:	f003 0310 	and.w	r3, r3, #16
 800a754:	2b10      	cmp	r3, #16
 800a756:	d0f0      	beq.n	800a73a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a758:	2300      	movs	r3, #0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3714      	adds	r7, #20
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr
 800a766:	bf00      	nop
 800a768:	00030d40 	.word	0x00030d40

0800a76c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b089      	sub	sp, #36	; 0x24
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	4611      	mov	r1, r2
 800a778:	461a      	mov	r2, r3
 800a77a:	460b      	mov	r3, r1
 800a77c:	71fb      	strb	r3, [r7, #7]
 800a77e:	4613      	mov	r3, r2
 800a780:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a78a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d11a      	bne.n	800a7c8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a792:	88bb      	ldrh	r3, [r7, #4]
 800a794:	3303      	adds	r3, #3
 800a796:	089b      	lsrs	r3, r3, #2
 800a798:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a79a:	2300      	movs	r3, #0
 800a79c:	61bb      	str	r3, [r7, #24]
 800a79e:	e00f      	b.n	800a7c0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a7a0:	79fb      	ldrb	r3, [r7, #7]
 800a7a2:	031a      	lsls	r2, r3, #12
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	3304      	adds	r3, #4
 800a7b8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	3301      	adds	r3, #1
 800a7be:	61bb      	str	r3, [r7, #24]
 800a7c0:	69ba      	ldr	r2, [r7, #24]
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d3eb      	bcc.n	800a7a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a7c8:	2300      	movs	r3, #0
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3724      	adds	r7, #36	; 0x24
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr

0800a7d6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a7d6:	b480      	push	{r7}
 800a7d8:	b089      	sub	sp, #36	; 0x24
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	60f8      	str	r0, [r7, #12]
 800a7de:	60b9      	str	r1, [r7, #8]
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a7ec:	88fb      	ldrh	r3, [r7, #6]
 800a7ee:	3303      	adds	r3, #3
 800a7f0:	089b      	lsrs	r3, r3, #2
 800a7f2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	61bb      	str	r3, [r7, #24]
 800a7f8:	e00b      	b.n	800a812 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	601a      	str	r2, [r3, #0]
    pDest++;
 800a806:	69fb      	ldr	r3, [r7, #28]
 800a808:	3304      	adds	r3, #4
 800a80a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	3301      	adds	r3, #1
 800a810:	61bb      	str	r3, [r7, #24]
 800a812:	69ba      	ldr	r2, [r7, #24]
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	429a      	cmp	r2, r3
 800a818:	d3ef      	bcc.n	800a7fa <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a81a:	69fb      	ldr	r3, [r7, #28]
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3724      	adds	r7, #36	; 0x24
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a828:	b480      	push	{r7}
 800a82a:	b085      	sub	sp, #20
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	695b      	ldr	r3, [r3, #20]
 800a834:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	699b      	ldr	r3, [r3, #24]
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	4013      	ands	r3, r2
 800a83e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a840:	68fb      	ldr	r3, [r7, #12]
}
 800a842:	4618      	mov	r0, r3
 800a844:	3714      	adds	r7, #20
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr

0800a84e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a84e:	b480      	push	{r7}
 800a850:	b083      	sub	sp, #12
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	695b      	ldr	r3, [r3, #20]
 800a85a:	f003 0301 	and.w	r3, r3, #1
}
 800a85e:	4618      	mov	r0, r3
 800a860:	370c      	adds	r7, #12
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a86a:	b480      	push	{r7}
 800a86c:	b085      	sub	sp, #20
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
 800a872:	460b      	mov	r3, r1
 800a874:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	68fa      	ldr	r2, [r7, #12]
 800a884:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a888:	f023 0303 	bic.w	r3, r3, #3
 800a88c:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	78fb      	ldrb	r3, [r7, #3]
 800a898:	f003 0303 	and.w	r3, r3, #3
 800a89c:	68f9      	ldr	r1, [r7, #12]
 800a89e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a8a6:	78fb      	ldrb	r3, [r7, #3]
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d107      	bne.n	800a8bc <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a8b8:	6053      	str	r3, [r2, #4]
 800a8ba:	e009      	b.n	800a8d0 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a8bc:	78fb      	ldrb	r3, [r7, #3]
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	d106      	bne.n	800a8d0 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	f241 7370 	movw	r3, #6000	; 0x1770
 800a8ce:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3714      	adds	r7, #20
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr

0800a8de <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b084      	sub	sp, #16
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a8fe:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a90c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a90e:	2064      	movs	r0, #100	; 0x64
 800a910:	f7f8 fe76 	bl	8003600 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a91c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a920:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a922:	200a      	movs	r0, #10
 800a924:	f7f8 fe6c 	bl	8003600 <HAL_Delay>

  return HAL_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3710      	adds	r7, #16
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a932:	b480      	push	{r7}
 800a934:	b085      	sub	sp, #20
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
 800a93a:	460b      	mov	r3, r1
 800a93c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a942:	2300      	movs	r3, #0
 800a944:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a956:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d109      	bne.n	800a976 <USB_DriveVbus+0x44>
 800a962:	78fb      	ldrb	r3, [r7, #3]
 800a964:	2b01      	cmp	r3, #1
 800a966:	d106      	bne.n	800a976 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a970:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a974:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a97c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a980:	d109      	bne.n	800a996 <USB_DriveVbus+0x64>
 800a982:	78fb      	ldrb	r3, [r7, #3]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d106      	bne.n	800a996 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	68fa      	ldr	r2, [r7, #12]
 800a98c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a990:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a994:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a996:	2300      	movs	r3, #0
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3714      	adds	r7, #20
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	0c5b      	lsrs	r3, r3, #17
 800a9c2:	f003 0303 	and.w	r3, r3, #3
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3714      	adds	r7, #20
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr
	...

0800a9d4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b088      	sub	sp, #32
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	4608      	mov	r0, r1
 800a9de:	4611      	mov	r1, r2
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	70fb      	strb	r3, [r7, #3]
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	70bb      	strb	r3, [r7, #2]
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800a9f6:	78fb      	ldrb	r3, [r7, #3]
 800a9f8:	015a      	lsls	r2, r3, #5
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa02:	461a      	mov	r2, r3
 800aa04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa08:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800aa0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800aa0e:	2b03      	cmp	r3, #3
 800aa10:	d87e      	bhi.n	800ab10 <USB_HC_Init+0x13c>
 800aa12:	a201      	add	r2, pc, #4	; (adr r2, 800aa18 <USB_HC_Init+0x44>)
 800aa14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa18:	0800aa29 	.word	0x0800aa29
 800aa1c:	0800aad3 	.word	0x0800aad3
 800aa20:	0800aa29 	.word	0x0800aa29
 800aa24:	0800aa95 	.word	0x0800aa95
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800aa28:	78fb      	ldrb	r3, [r7, #3]
 800aa2a:	015a      	lsls	r2, r3, #5
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	4413      	add	r3, r2
 800aa30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa34:	461a      	mov	r2, r3
 800aa36:	f240 439d 	movw	r3, #1181	; 0x49d
 800aa3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800aa3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	da10      	bge.n	800aa66 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800aa44:	78fb      	ldrb	r3, [r7, #3]
 800aa46:	015a      	lsls	r2, r3, #5
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	4413      	add	r3, r2
 800aa4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	78fa      	ldrb	r2, [r7, #3]
 800aa54:	0151      	lsls	r1, r2, #5
 800aa56:	693a      	ldr	r2, [r7, #16]
 800aa58:	440a      	add	r2, r1
 800aa5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa62:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800aa64:	e057      	b.n	800ab16 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d051      	beq.n	800ab16 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800aa72:	78fb      	ldrb	r3, [r7, #3]
 800aa74:	015a      	lsls	r2, r3, #5
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	4413      	add	r3, r2
 800aa7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	78fa      	ldrb	r2, [r7, #3]
 800aa82:	0151      	lsls	r1, r2, #5
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	440a      	add	r2, r1
 800aa88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800aa90:	60d3      	str	r3, [r2, #12]
      break;
 800aa92:	e040      	b.n	800ab16 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800aa94:	78fb      	ldrb	r3, [r7, #3]
 800aa96:	015a      	lsls	r2, r3, #5
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	4413      	add	r3, r2
 800aa9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	f240 639d 	movw	r3, #1693	; 0x69d
 800aaa6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800aaa8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	da34      	bge.n	800ab1a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800aab0:	78fb      	ldrb	r3, [r7, #3]
 800aab2:	015a      	lsls	r2, r3, #5
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	4413      	add	r3, r2
 800aab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	78fa      	ldrb	r2, [r7, #3]
 800aac0:	0151      	lsls	r1, r2, #5
 800aac2:	693a      	ldr	r2, [r7, #16]
 800aac4:	440a      	add	r2, r1
 800aac6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aaca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aace:	60d3      	str	r3, [r2, #12]
      }

      break;
 800aad0:	e023      	b.n	800ab1a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800aad2:	78fb      	ldrb	r3, [r7, #3]
 800aad4:	015a      	lsls	r2, r3, #5
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	4413      	add	r3, r2
 800aada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aade:	461a      	mov	r2, r3
 800aae0:	f240 2325 	movw	r3, #549	; 0x225
 800aae4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800aae6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	da17      	bge.n	800ab1e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800aaee:	78fb      	ldrb	r3, [r7, #3]
 800aaf0:	015a      	lsls	r2, r3, #5
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	78fa      	ldrb	r2, [r7, #3]
 800aafe:	0151      	lsls	r1, r2, #5
 800ab00:	693a      	ldr	r2, [r7, #16]
 800ab02:	440a      	add	r2, r1
 800ab04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab08:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800ab0c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800ab0e:	e006      	b.n	800ab1e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800ab10:	2301      	movs	r3, #1
 800ab12:	77fb      	strb	r3, [r7, #31]
      break;
 800ab14:	e004      	b.n	800ab20 <USB_HC_Init+0x14c>
      break;
 800ab16:	bf00      	nop
 800ab18:	e002      	b.n	800ab20 <USB_HC_Init+0x14c>
      break;
 800ab1a:	bf00      	nop
 800ab1c:	e000      	b.n	800ab20 <USB_HC_Init+0x14c>
      break;
 800ab1e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab26:	699a      	ldr	r2, [r3, #24]
 800ab28:	78fb      	ldrb	r3, [r7, #3]
 800ab2a:	f003 030f 	and.w	r3, r3, #15
 800ab2e:	2101      	movs	r1, #1
 800ab30:	fa01 f303 	lsl.w	r3, r1, r3
 800ab34:	6939      	ldr	r1, [r7, #16]
 800ab36:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	699b      	ldr	r3, [r3, #24]
 800ab42:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800ab4a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	da03      	bge.n	800ab5a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800ab52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab56:	61bb      	str	r3, [r7, #24]
 800ab58:	e001      	b.n	800ab5e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f7ff ff20 	bl	800a9a4 <USB_GetHostSpeed>
 800ab64:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800ab66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ab6a:	2b02      	cmp	r3, #2
 800ab6c:	d106      	bne.n	800ab7c <USB_HC_Init+0x1a8>
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2b02      	cmp	r3, #2
 800ab72:	d003      	beq.n	800ab7c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800ab74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ab78:	617b      	str	r3, [r7, #20]
 800ab7a:	e001      	b.n	800ab80 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ab80:	787b      	ldrb	r3, [r7, #1]
 800ab82:	059b      	lsls	r3, r3, #22
 800ab84:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ab88:	78bb      	ldrb	r3, [r7, #2]
 800ab8a:	02db      	lsls	r3, r3, #11
 800ab8c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ab90:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ab92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ab96:	049b      	lsls	r3, r3, #18
 800ab98:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ab9c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ab9e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800aba0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800aba4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800abaa:	78fb      	ldrb	r3, [r7, #3]
 800abac:	0159      	lsls	r1, r3, #5
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	440b      	add	r3, r1
 800abb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abb6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800abbc:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800abbe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800abc2:	2b03      	cmp	r3, #3
 800abc4:	d10f      	bne.n	800abe6 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800abc6:	78fb      	ldrb	r3, [r7, #3]
 800abc8:	015a      	lsls	r2, r3, #5
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	4413      	add	r3, r2
 800abce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	78fa      	ldrb	r2, [r7, #3]
 800abd6:	0151      	lsls	r1, r2, #5
 800abd8:	693a      	ldr	r2, [r7, #16]
 800abda:	440a      	add	r2, r1
 800abdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abe0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800abe4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800abe6:	7ffb      	ldrb	r3, [r7, #31]
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3720      	adds	r7, #32
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b08c      	sub	sp, #48	; 0x30
 800abf4:	af02      	add	r7, sp, #8
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	4613      	mov	r3, r2
 800abfc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	785b      	ldrb	r3, [r3, #1]
 800ac06:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800ac08:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac0c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d02d      	beq.n	800ac76 <USB_HC_StartXfer+0x86>
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	791b      	ldrb	r3, [r3, #4]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d129      	bne.n	800ac76 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800ac22:	79fb      	ldrb	r3, [r7, #7]
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d117      	bne.n	800ac58 <USB_HC_StartXfer+0x68>
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	79db      	ldrb	r3, [r3, #7]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d003      	beq.n	800ac38 <USB_HC_StartXfer+0x48>
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	79db      	ldrb	r3, [r3, #7]
 800ac34:	2b02      	cmp	r3, #2
 800ac36:	d10f      	bne.n	800ac58 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	015a      	lsls	r2, r3, #5
 800ac3c:	6a3b      	ldr	r3, [r7, #32]
 800ac3e:	4413      	add	r3, r2
 800ac40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	69fa      	ldr	r2, [r7, #28]
 800ac48:	0151      	lsls	r1, r2, #5
 800ac4a:	6a3a      	ldr	r2, [r7, #32]
 800ac4c:	440a      	add	r2, r1
 800ac4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac56:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800ac58:	79fb      	ldrb	r3, [r7, #7]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d10b      	bne.n	800ac76 <USB_HC_StartXfer+0x86>
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	795b      	ldrb	r3, [r3, #5]
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d107      	bne.n	800ac76 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	785b      	ldrb	r3, [r3, #1]
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	68f8      	ldr	r0, [r7, #12]
 800ac6e:	f000 fa2f 	bl	800b0d0 <USB_DoPing>
      return HAL_OK;
 800ac72:	2300      	movs	r3, #0
 800ac74:	e0f8      	b.n	800ae68 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	695b      	ldr	r3, [r3, #20]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d018      	beq.n	800acb0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	695b      	ldr	r3, [r3, #20]
 800ac82:	68ba      	ldr	r2, [r7, #8]
 800ac84:	8912      	ldrh	r2, [r2, #8]
 800ac86:	4413      	add	r3, r2
 800ac88:	3b01      	subs	r3, #1
 800ac8a:	68ba      	ldr	r2, [r7, #8]
 800ac8c:	8912      	ldrh	r2, [r2, #8]
 800ac8e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac92:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800ac94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ac96:	8b7b      	ldrh	r3, [r7, #26]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d90b      	bls.n	800acb4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800ac9c:	8b7b      	ldrh	r3, [r7, #26]
 800ac9e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800aca0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aca2:	68ba      	ldr	r2, [r7, #8]
 800aca4:	8912      	ldrh	r2, [r2, #8]
 800aca6:	fb02 f203 	mul.w	r2, r2, r3
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	611a      	str	r2, [r3, #16]
 800acae:	e001      	b.n	800acb4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800acb0:	2301      	movs	r3, #1
 800acb2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	78db      	ldrb	r3, [r3, #3]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d007      	beq.n	800accc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800acbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800acbe:	68ba      	ldr	r2, [r7, #8]
 800acc0:	8912      	ldrh	r2, [r2, #8]
 800acc2:	fb02 f203 	mul.w	r2, r2, r3
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	611a      	str	r2, [r3, #16]
 800acca:	e003      	b.n	800acd4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	695a      	ldr	r2, [r3, #20]
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	691b      	ldr	r3, [r3, #16]
 800acd8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800acdc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800acde:	04d9      	lsls	r1, r3, #19
 800ace0:	4b63      	ldr	r3, [pc, #396]	; (800ae70 <USB_HC_StartXfer+0x280>)
 800ace2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ace4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	7a9b      	ldrb	r3, [r3, #10]
 800acea:	075b      	lsls	r3, r3, #29
 800acec:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800acf0:	69f9      	ldr	r1, [r7, #28]
 800acf2:	0148      	lsls	r0, r1, #5
 800acf4:	6a39      	ldr	r1, [r7, #32]
 800acf6:	4401      	add	r1, r0
 800acf8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800acfc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800acfe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800ad00:	79fb      	ldrb	r3, [r7, #7]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d009      	beq.n	800ad1a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	68d9      	ldr	r1, [r3, #12]
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	015a      	lsls	r2, r3, #5
 800ad0e:	6a3b      	ldr	r3, [r7, #32]
 800ad10:	4413      	add	r3, r2
 800ad12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad16:	460a      	mov	r2, r1
 800ad18:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800ad1a:	6a3b      	ldr	r3, [r7, #32]
 800ad1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	f003 0301 	and.w	r3, r3, #1
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	bf0c      	ite	eq
 800ad2a:	2301      	moveq	r3, #1
 800ad2c:	2300      	movne	r3, #0
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	015a      	lsls	r2, r3, #5
 800ad36:	6a3b      	ldr	r3, [r7, #32]
 800ad38:	4413      	add	r3, r2
 800ad3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	69fa      	ldr	r2, [r7, #28]
 800ad42:	0151      	lsls	r1, r2, #5
 800ad44:	6a3a      	ldr	r2, [r7, #32]
 800ad46:	440a      	add	r2, r1
 800ad48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ad50:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	015a      	lsls	r2, r3, #5
 800ad56:	6a3b      	ldr	r3, [r7, #32]
 800ad58:	4413      	add	r3, r2
 800ad5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	7e7b      	ldrb	r3, [r7, #25]
 800ad62:	075b      	lsls	r3, r3, #29
 800ad64:	69f9      	ldr	r1, [r7, #28]
 800ad66:	0148      	lsls	r0, r1, #5
 800ad68:	6a39      	ldr	r1, [r7, #32]
 800ad6a:	4401      	add	r1, r0
 800ad6c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800ad70:	4313      	orrs	r3, r2
 800ad72:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ad74:	69fb      	ldr	r3, [r7, #28]
 800ad76:	015a      	lsls	r2, r3, #5
 800ad78:	6a3b      	ldr	r3, [r7, #32]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ad8a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	78db      	ldrb	r3, [r3, #3]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d004      	beq.n	800ad9e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad9a:	613b      	str	r3, [r7, #16]
 800ad9c:	e003      	b.n	800ada6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ada4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800adac:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800adae:	69fb      	ldr	r3, [r7, #28]
 800adb0:	015a      	lsls	r2, r3, #5
 800adb2:	6a3b      	ldr	r3, [r7, #32]
 800adb4:	4413      	add	r3, r2
 800adb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adba:	461a      	mov	r2, r3
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800adc0:	79fb      	ldrb	r3, [r7, #7]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d001      	beq.n	800adca <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800adc6:	2300      	movs	r3, #0
 800adc8:	e04e      	b.n	800ae68 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	78db      	ldrb	r3, [r3, #3]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d149      	bne.n	800ae66 <USB_HC_StartXfer+0x276>
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	695b      	ldr	r3, [r3, #20]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d045      	beq.n	800ae66 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	79db      	ldrb	r3, [r3, #7]
 800adde:	2b03      	cmp	r3, #3
 800ade0:	d830      	bhi.n	800ae44 <USB_HC_StartXfer+0x254>
 800ade2:	a201      	add	r2, pc, #4	; (adr r2, 800ade8 <USB_HC_StartXfer+0x1f8>)
 800ade4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ade8:	0800adf9 	.word	0x0800adf9
 800adec:	0800ae1d 	.word	0x0800ae1d
 800adf0:	0800adf9 	.word	0x0800adf9
 800adf4:	0800ae1d 	.word	0x0800ae1d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	695b      	ldr	r3, [r3, #20]
 800adfc:	3303      	adds	r3, #3
 800adfe:	089b      	lsrs	r3, r3, #2
 800ae00:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800ae02:	8afa      	ldrh	r2, [r7, #22]
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae08:	b29b      	uxth	r3, r3
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d91c      	bls.n	800ae48 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	699b      	ldr	r3, [r3, #24]
 800ae12:	f043 0220 	orr.w	r2, r3, #32
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	619a      	str	r2, [r3, #24]
        }
        break;
 800ae1a:	e015      	b.n	800ae48 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	695b      	ldr	r3, [r3, #20]
 800ae20:	3303      	adds	r3, #3
 800ae22:	089b      	lsrs	r3, r3, #2
 800ae24:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ae26:	8afa      	ldrh	r2, [r7, #22]
 800ae28:	6a3b      	ldr	r3, [r7, #32]
 800ae2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae2e:	691b      	ldr	r3, [r3, #16]
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d90a      	bls.n	800ae4c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	699b      	ldr	r3, [r3, #24]
 800ae3a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	619a      	str	r2, [r3, #24]
        }
        break;
 800ae42:	e003      	b.n	800ae4c <USB_HC_StartXfer+0x25c>

      default:
        break;
 800ae44:	bf00      	nop
 800ae46:	e002      	b.n	800ae4e <USB_HC_StartXfer+0x25e>
        break;
 800ae48:	bf00      	nop
 800ae4a:	e000      	b.n	800ae4e <USB_HC_StartXfer+0x25e>
        break;
 800ae4c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	68d9      	ldr	r1, [r3, #12]
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	785a      	ldrb	r2, [r3, #1]
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	695b      	ldr	r3, [r3, #20]
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	9000      	str	r0, [sp, #0]
 800ae60:	68f8      	ldr	r0, [r7, #12]
 800ae62:	f7ff fc83 	bl	800a76c <USB_WritePacket>
  }

  return HAL_OK;
 800ae66:	2300      	movs	r3, #0
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3728      	adds	r7, #40	; 0x28
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	1ff80000 	.word	0x1ff80000

0800ae74 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae86:	695b      	ldr	r3, [r3, #20]
 800ae88:	b29b      	uxth	r3, r3
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3714      	adds	r7, #20
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr

0800ae96 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ae96:	b480      	push	{r7}
 800ae98:	b089      	sub	sp, #36	; 0x24
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
 800ae9e:	460b      	mov	r3, r1
 800aea0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800aea6:	78fb      	ldrb	r3, [r7, #3]
 800aea8:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	015a      	lsls	r2, r3, #5
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	4413      	add	r3, r2
 800aeb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	0c9b      	lsrs	r3, r3, #18
 800aebe:	f003 0303 	and.w	r3, r3, #3
 800aec2:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	015a      	lsls	r2, r3, #5
 800aec8:	69bb      	ldr	r3, [r7, #24]
 800aeca:	4413      	add	r3, r2
 800aecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	0fdb      	lsrs	r3, r3, #31
 800aed4:	f003 0301 	and.w	r3, r3, #1
 800aed8:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	689b      	ldr	r3, [r3, #8]
 800aede:	f003 0320 	and.w	r3, r3, #32
 800aee2:	2b20      	cmp	r3, #32
 800aee4:	d104      	bne.n	800aef0 <USB_HC_Halt+0x5a>
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d101      	bne.n	800aef0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800aeec:	2300      	movs	r3, #0
 800aeee:	e0e8      	b.n	800b0c2 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d002      	beq.n	800aefc <USB_HC_Halt+0x66>
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	2b02      	cmp	r3, #2
 800aefa:	d173      	bne.n	800afe4 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	015a      	lsls	r2, r3, #5
 800af00:	69bb      	ldr	r3, [r7, #24]
 800af02:	4413      	add	r3, r2
 800af04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	697a      	ldr	r2, [r7, #20]
 800af0c:	0151      	lsls	r1, r2, #5
 800af0e:	69ba      	ldr	r2, [r7, #24]
 800af10:	440a      	add	r2, r1
 800af12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af1a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	f003 0320 	and.w	r3, r3, #32
 800af24:	2b00      	cmp	r3, #0
 800af26:	f040 80cb 	bne.w	800b0c0 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800af32:	2b00      	cmp	r3, #0
 800af34:	d143      	bne.n	800afbe <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	015a      	lsls	r2, r3, #5
 800af3a:	69bb      	ldr	r3, [r7, #24]
 800af3c:	4413      	add	r3, r2
 800af3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	697a      	ldr	r2, [r7, #20]
 800af46:	0151      	lsls	r1, r2, #5
 800af48:	69ba      	ldr	r2, [r7, #24]
 800af4a:	440a      	add	r2, r1
 800af4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af54:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	015a      	lsls	r2, r3, #5
 800af5a:	69bb      	ldr	r3, [r7, #24]
 800af5c:	4413      	add	r3, r2
 800af5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	697a      	ldr	r2, [r7, #20]
 800af66:	0151      	lsls	r1, r2, #5
 800af68:	69ba      	ldr	r2, [r7, #24]
 800af6a:	440a      	add	r2, r1
 800af6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af74:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	015a      	lsls	r2, r3, #5
 800af7a:	69bb      	ldr	r3, [r7, #24]
 800af7c:	4413      	add	r3, r2
 800af7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	697a      	ldr	r2, [r7, #20]
 800af86:	0151      	lsls	r1, r2, #5
 800af88:	69ba      	ldr	r2, [r7, #24]
 800af8a:	440a      	add	r2, r1
 800af8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800af94:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800af96:	69fb      	ldr	r3, [r7, #28]
 800af98:	3301      	adds	r3, #1
 800af9a:	61fb      	str	r3, [r7, #28]
 800af9c:	69fb      	ldr	r3, [r7, #28]
 800af9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800afa2:	d81d      	bhi.n	800afe0 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	015a      	lsls	r2, r3, #5
 800afa8:	69bb      	ldr	r3, [r7, #24]
 800afaa:	4413      	add	r3, r2
 800afac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800afb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800afba:	d0ec      	beq.n	800af96 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800afbc:	e080      	b.n	800b0c0 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	015a      	lsls	r2, r3, #5
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	4413      	add	r3, r2
 800afc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	697a      	ldr	r2, [r7, #20]
 800afce:	0151      	lsls	r1, r2, #5
 800afd0:	69ba      	ldr	r2, [r7, #24]
 800afd2:	440a      	add	r2, r1
 800afd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800afd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800afdc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800afde:	e06f      	b.n	800b0c0 <USB_HC_Halt+0x22a>
            break;
 800afe0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800afe2:	e06d      	b.n	800b0c0 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	015a      	lsls	r2, r3, #5
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	4413      	add	r3, r2
 800afec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	697a      	ldr	r2, [r7, #20]
 800aff4:	0151      	lsls	r1, r2, #5
 800aff6:	69ba      	ldr	r2, [r7, #24]
 800aff8:	440a      	add	r2, r1
 800affa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800affe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b002:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b004:	69bb      	ldr	r3, [r7, #24]
 800b006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b00a:	691b      	ldr	r3, [r3, #16]
 800b00c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b010:	2b00      	cmp	r3, #0
 800b012:	d143      	bne.n	800b09c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	015a      	lsls	r2, r3, #5
 800b018:	69bb      	ldr	r3, [r7, #24]
 800b01a:	4413      	add	r3, r2
 800b01c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	697a      	ldr	r2, [r7, #20]
 800b024:	0151      	lsls	r1, r2, #5
 800b026:	69ba      	ldr	r2, [r7, #24]
 800b028:	440a      	add	r2, r1
 800b02a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b02e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b032:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	015a      	lsls	r2, r3, #5
 800b038:	69bb      	ldr	r3, [r7, #24]
 800b03a:	4413      	add	r3, r2
 800b03c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	697a      	ldr	r2, [r7, #20]
 800b044:	0151      	lsls	r1, r2, #5
 800b046:	69ba      	ldr	r2, [r7, #24]
 800b048:	440a      	add	r2, r1
 800b04a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b04e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b052:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	015a      	lsls	r2, r3, #5
 800b058:	69bb      	ldr	r3, [r7, #24]
 800b05a:	4413      	add	r3, r2
 800b05c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	697a      	ldr	r2, [r7, #20]
 800b064:	0151      	lsls	r1, r2, #5
 800b066:	69ba      	ldr	r2, [r7, #24]
 800b068:	440a      	add	r2, r1
 800b06a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b06e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b072:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b074:	69fb      	ldr	r3, [r7, #28]
 800b076:	3301      	adds	r3, #1
 800b078:	61fb      	str	r3, [r7, #28]
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b080:	d81d      	bhi.n	800b0be <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	015a      	lsls	r2, r3, #5
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	4413      	add	r3, r2
 800b08a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b094:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b098:	d0ec      	beq.n	800b074 <USB_HC_Halt+0x1de>
 800b09a:	e011      	b.n	800b0c0 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	015a      	lsls	r2, r3, #5
 800b0a0:	69bb      	ldr	r3, [r7, #24]
 800b0a2:	4413      	add	r3, r2
 800b0a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	697a      	ldr	r2, [r7, #20]
 800b0ac:	0151      	lsls	r1, r2, #5
 800b0ae:	69ba      	ldr	r2, [r7, #24]
 800b0b0:	440a      	add	r2, r1
 800b0b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b0b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b0ba:	6013      	str	r3, [r2, #0]
 800b0bc:	e000      	b.n	800b0c0 <USB_HC_Halt+0x22a>
          break;
 800b0be:	bf00      	nop
    }
  }

  return HAL_OK;
 800b0c0:	2300      	movs	r3, #0
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3724      	adds	r7, #36	; 0x24
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr
	...

0800b0d0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b087      	sub	sp, #28
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	460b      	mov	r3, r1
 800b0da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b0e0:	78fb      	ldrb	r3, [r7, #3]
 800b0e2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	04da      	lsls	r2, r3, #19
 800b0ec:	4b15      	ldr	r3, [pc, #84]	; (800b144 <USB_DoPing+0x74>)
 800b0ee:	4013      	ands	r3, r2
 800b0f0:	693a      	ldr	r2, [r7, #16]
 800b0f2:	0151      	lsls	r1, r2, #5
 800b0f4:	697a      	ldr	r2, [r7, #20]
 800b0f6:	440a      	add	r2, r1
 800b0f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b0fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b100:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	015a      	lsls	r2, r3, #5
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	4413      	add	r3, r2
 800b10a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b118:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b120:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	015a      	lsls	r2, r3, #5
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	4413      	add	r3, r2
 800b12a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b12e:	461a      	mov	r2, r3
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b134:	2300      	movs	r3, #0
}
 800b136:	4618      	mov	r0, r3
 800b138:	371c      	adds	r7, #28
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr
 800b142:	bf00      	nop
 800b144:	1ff80000 	.word	0x1ff80000

0800b148 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b086      	sub	sp, #24
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b154:	2300      	movs	r3, #0
 800b156:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f7ff faae 	bl	800a6ba <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800b15e:	2110      	movs	r1, #16
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f7ff fabb 	bl	800a6dc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f7ff fade 	bl	800a728 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b16c:	2300      	movs	r3, #0
 800b16e:	613b      	str	r3, [r7, #16]
 800b170:	e01f      	b.n	800b1b2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	015a      	lsls	r2, r3, #5
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	4413      	add	r3, r2
 800b17a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b188:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b190:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b198:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	015a      	lsls	r2, r3, #5
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	4413      	add	r3, r2
 800b1a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	613b      	str	r3, [r7, #16]
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	2b0f      	cmp	r3, #15
 800b1b6:	d9dc      	bls.n	800b172 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	613b      	str	r3, [r7, #16]
 800b1bc:	e034      	b.n	800b228 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	015a      	lsls	r2, r3, #5
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b1d4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b1dc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b1e4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	015a      	lsls	r2, r3, #5
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	617b      	str	r3, [r7, #20]
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b204:	d80c      	bhi.n	800b220 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	015a      	lsls	r2, r3, #5
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	4413      	add	r3, r2
 800b20e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b218:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b21c:	d0ec      	beq.n	800b1f8 <USB_StopHost+0xb0>
 800b21e:	e000      	b.n	800b222 <USB_StopHost+0xda>
        break;
 800b220:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	3301      	adds	r3, #1
 800b226:	613b      	str	r3, [r7, #16]
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	2b0f      	cmp	r3, #15
 800b22c:	d9c7      	bls.n	800b1be <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b234:	461a      	mov	r2, r3
 800b236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b23a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b242:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f7ff fa27 	bl	800a698 <USB_EnableGlobalInt>

  return HAL_OK;
 800b24a:	2300      	movs	r3, #0
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3718      	adds	r7, #24
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b254:	b480      	push	{r7}
 800b256:	b085      	sub	sp, #20
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b25c:	2300      	movs	r3, #0
 800b25e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b260:	2300      	movs	r3, #0
 800b262:	60fb      	str	r3, [r7, #12]
 800b264:	e009      	b.n	800b27a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	33e0      	adds	r3, #224	; 0xe0
 800b26c:	009b      	lsls	r3, r3, #2
 800b26e:	4413      	add	r3, r2
 800b270:	2200      	movs	r2, #0
 800b272:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	3301      	adds	r3, #1
 800b278:	60fb      	str	r3, [r7, #12]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2b0e      	cmp	r3, #14
 800b27e:	d9f2      	bls.n	800b266 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b280:	2300      	movs	r3, #0
 800b282:	60fb      	str	r3, [r7, #12]
 800b284:	e009      	b.n	800b29a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	4413      	add	r3, r2
 800b28c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b290:	2200      	movs	r2, #0
 800b292:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	3301      	adds	r3, #1
 800b298:	60fb      	str	r3, [r7, #12]
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2a0:	d3f1      	bcc.n	800b286 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2240      	movs	r2, #64	; 0x40
 800b2c6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2201      	movs	r2, #1
 800b2da:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b2ee:	2300      	movs	r3, #0
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3714      	adds	r7, #20
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr

0800b2fc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f001 fa11 	bl	800c72c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800b30a:	2101      	movs	r1, #1
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f001 faf8 	bl	800c902 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b312:	2300      	movs	r3, #0
}
 800b314:	4618      	mov	r0, r3
 800b316:	3708      	adds	r7, #8
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b088      	sub	sp, #32
 800b320:	af04      	add	r7, sp, #16
 800b322:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b324:	2302      	movs	r3, #2
 800b326:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b328:	2300      	movs	r3, #0
 800b32a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b332:	b2db      	uxtb	r3, r3
 800b334:	2b01      	cmp	r3, #1
 800b336:	d102      	bne.n	800b33e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2203      	movs	r2, #3
 800b33c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	b2db      	uxtb	r3, r3
 800b344:	2b0b      	cmp	r3, #11
 800b346:	f200 81b3 	bhi.w	800b6b0 <USBH_Process+0x394>
 800b34a:	a201      	add	r2, pc, #4	; (adr r2, 800b350 <USBH_Process+0x34>)
 800b34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b350:	0800b381 	.word	0x0800b381
 800b354:	0800b3b3 	.word	0x0800b3b3
 800b358:	0800b41b 	.word	0x0800b41b
 800b35c:	0800b64b 	.word	0x0800b64b
 800b360:	0800b6b1 	.word	0x0800b6b1
 800b364:	0800b4bf 	.word	0x0800b4bf
 800b368:	0800b5f1 	.word	0x0800b5f1
 800b36c:	0800b4f5 	.word	0x0800b4f5
 800b370:	0800b515 	.word	0x0800b515
 800b374:	0800b535 	.word	0x0800b535
 800b378:	0800b563 	.word	0x0800b563
 800b37c:	0800b633 	.word	0x0800b633
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b386:	b2db      	uxtb	r3, r3
 800b388:	2b00      	cmp	r3, #0
 800b38a:	f000 8193 	beq.w	800b6b4 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2201      	movs	r2, #1
 800b392:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b394:	20c8      	movs	r0, #200	; 0xc8
 800b396:	f001 facb 	bl	800c930 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f001 fa23 	bl	800c7e6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b3b0:	e180      	b.n	800b6b4 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d107      	bne.n	800b3cc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2202      	movs	r2, #2
 800b3c8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b3ca:	e182      	b.n	800b6d2 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b3d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3d6:	d914      	bls.n	800b402 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b3de:	3301      	adds	r3, #1
 800b3e0:	b2da      	uxtb	r2, r3
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b3ee:	2b03      	cmp	r3, #3
 800b3f0:	d903      	bls.n	800b3fa <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	220d      	movs	r2, #13
 800b3f6:	701a      	strb	r2, [r3, #0]
      break;
 800b3f8:	e16b      	b.n	800b6d2 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	701a      	strb	r2, [r3, #0]
      break;
 800b400:	e167      	b.n	800b6d2 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b408:	f103 020a 	add.w	r2, r3, #10
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b412:	200a      	movs	r0, #10
 800b414:	f001 fa8c 	bl	800c930 <USBH_Delay>
      break;
 800b418:	e15b      	b.n	800b6d2 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b420:	2b00      	cmp	r3, #0
 800b422:	d005      	beq.n	800b430 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b42a:	2104      	movs	r1, #4
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b430:	2064      	movs	r0, #100	; 0x64
 800b432:	f001 fa7d 	bl	800c930 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f001 f9ae 	bl	800c798 <USBH_LL_GetSpeed>
 800b43c:	4603      	mov	r3, r0
 800b43e:	461a      	mov	r2, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2205      	movs	r2, #5
 800b44a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b44c:	2100      	movs	r1, #0
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f001 f8aa 	bl	800c5a8 <USBH_AllocPipe>
 800b454:	4603      	mov	r3, r0
 800b456:	461a      	mov	r2, r3
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b45c:	2180      	movs	r1, #128	; 0x80
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f001 f8a2 	bl	800c5a8 <USBH_AllocPipe>
 800b464:	4603      	mov	r3, r0
 800b466:	461a      	mov	r2, r3
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	7919      	ldrb	r1, [r3, #4]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b480:	b292      	uxth	r2, r2
 800b482:	9202      	str	r2, [sp, #8]
 800b484:	2200      	movs	r2, #0
 800b486:	9201      	str	r2, [sp, #4]
 800b488:	9300      	str	r3, [sp, #0]
 800b48a:	4603      	mov	r3, r0
 800b48c:	2280      	movs	r2, #128	; 0x80
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f001 f86b 	bl	800c56a <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	7959      	ldrb	r1, [r3, #5]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b4a8:	b292      	uxth	r2, r2
 800b4aa:	9202      	str	r2, [sp, #8]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	9201      	str	r2, [sp, #4]
 800b4b0:	9300      	str	r3, [sp, #0]
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f001 f857 	bl	800c56a <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b4bc:	e109      	b.n	800b6d2 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 f90c 	bl	800b6dc <USBH_HandleEnum>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b4c8:	7bbb      	ldrb	r3, [r7, #14]
 800b4ca:	b2db      	uxtb	r3, r3
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	f040 80f3 	bne.w	800b6b8 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d103      	bne.n	800b4ec <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2208      	movs	r2, #8
 800b4e8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b4ea:	e0e5      	b.n	800b6b8 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2207      	movs	r2, #7
 800b4f0:	701a      	strb	r2, [r3, #0]
      break;
 800b4f2:	e0e1      	b.n	800b6b8 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	f000 80de 	beq.w	800b6bc <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b506:	2101      	movs	r1, #1
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2208      	movs	r2, #8
 800b510:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800b512:	e0d3      	b.n	800b6bc <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	4619      	mov	r1, r3
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 fc11 	bl	800bd46 <USBH_SetCfg>
 800b524:	4603      	mov	r3, r0
 800b526:	2b00      	cmp	r3, #0
 800b528:	f040 80ca 	bne.w	800b6c0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2209      	movs	r2, #9
 800b530:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b532:	e0c5      	b.n	800b6c0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b53a:	f003 0320 	and.w	r3, r3, #32
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d00b      	beq.n	800b55a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800b542:	2101      	movs	r1, #1
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 fc21 	bl	800bd8c <USBH_SetFeature>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	f040 80b9 	bne.w	800b6c4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	220a      	movs	r2, #10
 800b556:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b558:	e0b4      	b.n	800b6c4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	220a      	movs	r2, #10
 800b55e:	701a      	strb	r2, [r3, #0]
      break;
 800b560:	e0b0      	b.n	800b6c4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b568:	2b00      	cmp	r3, #0
 800b56a:	f000 80ad 	beq.w	800b6c8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b576:	2300      	movs	r3, #0
 800b578:	73fb      	strb	r3, [r7, #15]
 800b57a:	e016      	b.n	800b5aa <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b57c:	7bfa      	ldrb	r2, [r7, #15]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	32de      	adds	r2, #222	; 0xde
 800b582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b586:	791a      	ldrb	r2, [r3, #4]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b58e:	429a      	cmp	r2, r3
 800b590:	d108      	bne.n	800b5a4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b592:	7bfa      	ldrb	r2, [r7, #15]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	32de      	adds	r2, #222	; 0xde
 800b598:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b5a2:	e005      	b.n	800b5b0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b5a4:	7bfb      	ldrb	r3, [r7, #15]
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	73fb      	strb	r3, [r7, #15]
 800b5aa:	7bfb      	ldrb	r3, [r7, #15]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d0e5      	beq.n	800b57c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d016      	beq.n	800b5e8 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5c0:	689b      	ldr	r3, [r3, #8]
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	4798      	blx	r3
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d109      	bne.n	800b5e0 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2206      	movs	r2, #6
 800b5d0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b5d8:	2103      	movs	r1, #3
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b5de:	e073      	b.n	800b6c8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	220d      	movs	r2, #13
 800b5e4:	701a      	strb	r2, [r3, #0]
      break;
 800b5e6:	e06f      	b.n	800b6c8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	220d      	movs	r2, #13
 800b5ec:	701a      	strb	r2, [r3, #0]
      break;
 800b5ee:	e06b      	b.n	800b6c8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d017      	beq.n	800b62a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b600:	691b      	ldr	r3, [r3, #16]
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	4798      	blx	r3
 800b606:	4603      	mov	r3, r0
 800b608:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b60a:	7bbb      	ldrb	r3, [r7, #14]
 800b60c:	b2db      	uxtb	r3, r3
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d103      	bne.n	800b61a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	220b      	movs	r2, #11
 800b616:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b618:	e058      	b.n	800b6cc <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800b61a:	7bbb      	ldrb	r3, [r7, #14]
 800b61c:	b2db      	uxtb	r3, r3
 800b61e:	2b02      	cmp	r3, #2
 800b620:	d154      	bne.n	800b6cc <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	220d      	movs	r2, #13
 800b626:	701a      	strb	r2, [r3, #0]
      break;
 800b628:	e050      	b.n	800b6cc <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	220d      	movs	r2, #13
 800b62e:	701a      	strb	r2, [r3, #0]
      break;
 800b630:	e04c      	b.n	800b6cc <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d049      	beq.n	800b6d0 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b642:	695b      	ldr	r3, [r3, #20]
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	4798      	blx	r3
      }
      break;
 800b648:	e042      	b.n	800b6d0 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2200      	movs	r2, #0
 800b64e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f7ff fdfe 	bl	800b254 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d009      	beq.n	800b676 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b668:	68db      	ldr	r3, [r3, #12]
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d005      	beq.n	800b68c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b686:	2105      	movs	r1, #5
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b692:	b2db      	uxtb	r3, r3
 800b694:	2b01      	cmp	r3, #1
 800b696:	d107      	bne.n	800b6a8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f7ff fe2b 	bl	800b2fc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b6a6:	e014      	b.n	800b6d2 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f001 f83f 	bl	800c72c <USBH_LL_Start>
      break;
 800b6ae:	e010      	b.n	800b6d2 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800b6b0:	bf00      	nop
 800b6b2:	e00e      	b.n	800b6d2 <USBH_Process+0x3b6>
      break;
 800b6b4:	bf00      	nop
 800b6b6:	e00c      	b.n	800b6d2 <USBH_Process+0x3b6>
      break;
 800b6b8:	bf00      	nop
 800b6ba:	e00a      	b.n	800b6d2 <USBH_Process+0x3b6>
    break;
 800b6bc:	bf00      	nop
 800b6be:	e008      	b.n	800b6d2 <USBH_Process+0x3b6>
      break;
 800b6c0:	bf00      	nop
 800b6c2:	e006      	b.n	800b6d2 <USBH_Process+0x3b6>
      break;
 800b6c4:	bf00      	nop
 800b6c6:	e004      	b.n	800b6d2 <USBH_Process+0x3b6>
      break;
 800b6c8:	bf00      	nop
 800b6ca:	e002      	b.n	800b6d2 <USBH_Process+0x3b6>
      break;
 800b6cc:	bf00      	nop
 800b6ce:	e000      	b.n	800b6d2 <USBH_Process+0x3b6>
      break;
 800b6d0:	bf00      	nop
  }
  return USBH_OK;
 800b6d2:	2300      	movs	r3, #0
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3710      	adds	r7, #16
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b088      	sub	sp, #32
 800b6e0:	af04      	add	r7, sp, #16
 800b6e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	785b      	ldrb	r3, [r3, #1]
 800b6f0:	2b07      	cmp	r3, #7
 800b6f2:	f200 81c1 	bhi.w	800ba78 <USBH_HandleEnum+0x39c>
 800b6f6:	a201      	add	r2, pc, #4	; (adr r2, 800b6fc <USBH_HandleEnum+0x20>)
 800b6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6fc:	0800b71d 	.word	0x0800b71d
 800b700:	0800b7db 	.word	0x0800b7db
 800b704:	0800b845 	.word	0x0800b845
 800b708:	0800b8d3 	.word	0x0800b8d3
 800b70c:	0800b93d 	.word	0x0800b93d
 800b710:	0800b9ad 	.word	0x0800b9ad
 800b714:	0800b9f3 	.word	0x0800b9f3
 800b718:	0800ba39 	.word	0x0800ba39
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b71c:	2108      	movs	r1, #8
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 fa41 	bl	800bba6 <USBH_Get_DevDesc>
 800b724:	4603      	mov	r3, r0
 800b726:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b728:	7bbb      	ldrb	r3, [r7, #14]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d130      	bne.n	800b790 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2201      	movs	r2, #1
 800b73c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	7919      	ldrb	r1, [r3, #4]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b752:	b292      	uxth	r2, r2
 800b754:	9202      	str	r2, [sp, #8]
 800b756:	2200      	movs	r2, #0
 800b758:	9201      	str	r2, [sp, #4]
 800b75a:	9300      	str	r3, [sp, #0]
 800b75c:	4603      	mov	r3, r0
 800b75e:	2280      	movs	r2, #128	; 0x80
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f000 ff02 	bl	800c56a <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	7959      	ldrb	r1, [r3, #5]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b776:	687a      	ldr	r2, [r7, #4]
 800b778:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b77a:	b292      	uxth	r2, r2
 800b77c:	9202      	str	r2, [sp, #8]
 800b77e:	2200      	movs	r2, #0
 800b780:	9201      	str	r2, [sp, #4]
 800b782:	9300      	str	r3, [sp, #0]
 800b784:	4603      	mov	r3, r0
 800b786:	2200      	movs	r2, #0
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f000 feee 	bl	800c56a <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b78e:	e175      	b.n	800ba7c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b790:	7bbb      	ldrb	r3, [r7, #14]
 800b792:	2b03      	cmp	r3, #3
 800b794:	f040 8172 	bne.w	800ba7c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b79e:	3301      	adds	r3, #1
 800b7a0:	b2da      	uxtb	r2, r3
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b7ae:	2b03      	cmp	r3, #3
 800b7b0:	d903      	bls.n	800b7ba <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	220d      	movs	r2, #13
 800b7b6:	701a      	strb	r2, [r3, #0]
      break;
 800b7b8:	e160      	b.n	800ba7c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	795b      	ldrb	r3, [r3, #5]
 800b7be:	4619      	mov	r1, r3
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 ff12 	bl	800c5ea <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	791b      	ldrb	r3, [r3, #4]
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f000 ff0c 	bl	800c5ea <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	701a      	strb	r2, [r3, #0]
      break;
 800b7d8:	e150      	b.n	800ba7c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b7da:	2112      	movs	r1, #18
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 f9e2 	bl	800bba6 <USBH_Get_DevDesc>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b7e6:	7bbb      	ldrb	r3, [r7, #14]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d103      	bne.n	800b7f4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2202      	movs	r2, #2
 800b7f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b7f2:	e145      	b.n	800ba80 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b7f4:	7bbb      	ldrb	r3, [r7, #14]
 800b7f6:	2b03      	cmp	r3, #3
 800b7f8:	f040 8142 	bne.w	800ba80 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b802:	3301      	adds	r3, #1
 800b804:	b2da      	uxtb	r2, r3
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b812:	2b03      	cmp	r3, #3
 800b814:	d903      	bls.n	800b81e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	220d      	movs	r2, #13
 800b81a:	701a      	strb	r2, [r3, #0]
      break;
 800b81c:	e130      	b.n	800ba80 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	795b      	ldrb	r3, [r3, #5]
 800b822:	4619      	mov	r1, r3
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f000 fee0 	bl	800c5ea <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	791b      	ldrb	r3, [r3, #4]
 800b82e:	4619      	mov	r1, r3
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 feda 	bl	800c5ea <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2200      	movs	r2, #0
 800b83a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2200      	movs	r2, #0
 800b840:	701a      	strb	r2, [r3, #0]
      break;
 800b842:	e11d      	b.n	800ba80 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b844:	2101      	movs	r1, #1
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f000 fa59 	bl	800bcfe <USBH_SetAddress>
 800b84c:	4603      	mov	r3, r0
 800b84e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b850:	7bbb      	ldrb	r3, [r7, #14]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d132      	bne.n	800b8bc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b856:	2002      	movs	r0, #2
 800b858:	f001 f86a 	bl	800c930 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2201      	movs	r2, #1
 800b860:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2203      	movs	r2, #3
 800b868:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	7919      	ldrb	r1, [r3, #4]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b87e:	b292      	uxth	r2, r2
 800b880:	9202      	str	r2, [sp, #8]
 800b882:	2200      	movs	r2, #0
 800b884:	9201      	str	r2, [sp, #4]
 800b886:	9300      	str	r3, [sp, #0]
 800b888:	4603      	mov	r3, r0
 800b88a:	2280      	movs	r2, #128	; 0x80
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 fe6c 	bl	800c56a <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	7959      	ldrb	r1, [r3, #5]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b8a6:	b292      	uxth	r2, r2
 800b8a8:	9202      	str	r2, [sp, #8]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	9201      	str	r2, [sp, #4]
 800b8ae:	9300      	str	r3, [sp, #0]
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 fe58 	bl	800c56a <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b8ba:	e0e3      	b.n	800ba84 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b8bc:	7bbb      	ldrb	r3, [r7, #14]
 800b8be:	2b03      	cmp	r3, #3
 800b8c0:	f040 80e0 	bne.w	800ba84 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	220d      	movs	r2, #13
 800b8c8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	705a      	strb	r2, [r3, #1]
      break;
 800b8d0:	e0d8      	b.n	800ba84 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b8d2:	2109      	movs	r1, #9
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 f98e 	bl	800bbf6 <USBH_Get_CfgDesc>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b8de:	7bbb      	ldrb	r3, [r7, #14]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d103      	bne.n	800b8ec <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2204      	movs	r2, #4
 800b8e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b8ea:	e0cd      	b.n	800ba88 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b8ec:	7bbb      	ldrb	r3, [r7, #14]
 800b8ee:	2b03      	cmp	r3, #3
 800b8f0:	f040 80ca 	bne.w	800ba88 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	b2da      	uxtb	r2, r3
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b90a:	2b03      	cmp	r3, #3
 800b90c:	d903      	bls.n	800b916 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	220d      	movs	r2, #13
 800b912:	701a      	strb	r2, [r3, #0]
      break;
 800b914:	e0b8      	b.n	800ba88 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	795b      	ldrb	r3, [r3, #5]
 800b91a:	4619      	mov	r1, r3
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 fe64 	bl	800c5ea <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	791b      	ldrb	r3, [r3, #4]
 800b926:	4619      	mov	r1, r3
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 fe5e 	bl	800c5ea <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2200      	movs	r2, #0
 800b932:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2200      	movs	r2, #0
 800b938:	701a      	strb	r2, [r3, #0]
      break;
 800b93a:	e0a5      	b.n	800ba88 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b942:	4619      	mov	r1, r3
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f000 f956 	bl	800bbf6 <USBH_Get_CfgDesc>
 800b94a:	4603      	mov	r3, r0
 800b94c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b94e:	7bbb      	ldrb	r3, [r7, #14]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d103      	bne.n	800b95c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2205      	movs	r2, #5
 800b958:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b95a:	e097      	b.n	800ba8c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b95c:	7bbb      	ldrb	r3, [r7, #14]
 800b95e:	2b03      	cmp	r3, #3
 800b960:	f040 8094 	bne.w	800ba8c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b96a:	3301      	adds	r3, #1
 800b96c:	b2da      	uxtb	r2, r3
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b97a:	2b03      	cmp	r3, #3
 800b97c:	d903      	bls.n	800b986 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	220d      	movs	r2, #13
 800b982:	701a      	strb	r2, [r3, #0]
      break;
 800b984:	e082      	b.n	800ba8c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	795b      	ldrb	r3, [r3, #5]
 800b98a:	4619      	mov	r1, r3
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 fe2c 	bl	800c5ea <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	791b      	ldrb	r3, [r3, #4]
 800b996:	4619      	mov	r1, r3
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f000 fe26 	bl	800c5ea <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	701a      	strb	r2, [r3, #0]
      break;
 800b9aa:	e06f      	b.n	800ba8c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d019      	beq.n	800b9ea <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b9c2:	23ff      	movs	r3, #255	; 0xff
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 f93a 	bl	800bc3e <USBH_Get_StringDesc>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b9ce:	7bbb      	ldrb	r3, [r7, #14]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d103      	bne.n	800b9dc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2206      	movs	r2, #6
 800b9d8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b9da:	e059      	b.n	800ba90 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b9dc:	7bbb      	ldrb	r3, [r7, #14]
 800b9de:	2b03      	cmp	r3, #3
 800b9e0:	d156      	bne.n	800ba90 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2206      	movs	r2, #6
 800b9e6:	705a      	strb	r2, [r3, #1]
      break;
 800b9e8:	e052      	b.n	800ba90 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2206      	movs	r2, #6
 800b9ee:	705a      	strb	r2, [r3, #1]
      break;
 800b9f0:	e04e      	b.n	800ba90 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d019      	beq.n	800ba30 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ba08:	23ff      	movs	r3, #255	; 0xff
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 f917 	bl	800bc3e <USBH_Get_StringDesc>
 800ba10:	4603      	mov	r3, r0
 800ba12:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ba14:	7bbb      	ldrb	r3, [r7, #14]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d103      	bne.n	800ba22 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2207      	movs	r2, #7
 800ba1e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ba20:	e038      	b.n	800ba94 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ba22:	7bbb      	ldrb	r3, [r7, #14]
 800ba24:	2b03      	cmp	r3, #3
 800ba26:	d135      	bne.n	800ba94 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2207      	movs	r2, #7
 800ba2c:	705a      	strb	r2, [r3, #1]
      break;
 800ba2e:	e031      	b.n	800ba94 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2207      	movs	r2, #7
 800ba34:	705a      	strb	r2, [r3, #1]
      break;
 800ba36:	e02d      	b.n	800ba94 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d017      	beq.n	800ba72 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ba4e:	23ff      	movs	r3, #255	; 0xff
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f000 f8f4 	bl	800bc3e <USBH_Get_StringDesc>
 800ba56:	4603      	mov	r3, r0
 800ba58:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ba5a:	7bbb      	ldrb	r3, [r7, #14]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d102      	bne.n	800ba66 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ba60:	2300      	movs	r3, #0
 800ba62:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ba64:	e018      	b.n	800ba98 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ba66:	7bbb      	ldrb	r3, [r7, #14]
 800ba68:	2b03      	cmp	r3, #3
 800ba6a:	d115      	bne.n	800ba98 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	73fb      	strb	r3, [r7, #15]
      break;
 800ba70:	e012      	b.n	800ba98 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800ba72:	2300      	movs	r3, #0
 800ba74:	73fb      	strb	r3, [r7, #15]
      break;
 800ba76:	e00f      	b.n	800ba98 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800ba78:	bf00      	nop
 800ba7a:	e00e      	b.n	800ba9a <USBH_HandleEnum+0x3be>
      break;
 800ba7c:	bf00      	nop
 800ba7e:	e00c      	b.n	800ba9a <USBH_HandleEnum+0x3be>
      break;
 800ba80:	bf00      	nop
 800ba82:	e00a      	b.n	800ba9a <USBH_HandleEnum+0x3be>
      break;
 800ba84:	bf00      	nop
 800ba86:	e008      	b.n	800ba9a <USBH_HandleEnum+0x3be>
      break;
 800ba88:	bf00      	nop
 800ba8a:	e006      	b.n	800ba9a <USBH_HandleEnum+0x3be>
      break;
 800ba8c:	bf00      	nop
 800ba8e:	e004      	b.n	800ba9a <USBH_HandleEnum+0x3be>
      break;
 800ba90:	bf00      	nop
 800ba92:	e002      	b.n	800ba9a <USBH_HandleEnum+0x3be>
      break;
 800ba94:	bf00      	nop
 800ba96:	e000      	b.n	800ba9a <USBH_HandleEnum+0x3be>
      break;
 800ba98:	bf00      	nop
  }
  return Status;
 800ba9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3710      	adds	r7, #16
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b082      	sub	sp, #8
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bab2:	1c5a      	adds	r2, r3, #1
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 f804 	bl	800bac8 <USBH_HandleSof>
}
 800bac0:	bf00      	nop
 800bac2:	3708      	adds	r7, #8
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	2b0b      	cmp	r3, #11
 800bad8:	d10a      	bne.n	800baf0 <USBH_HandleSof+0x28>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d005      	beq.n	800baf0 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800baea:	699b      	ldr	r3, [r3, #24]
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	4798      	blx	r3
  }
}
 800baf0:	bf00      	nop
 800baf2:	3708      	adds	r7, #8
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2201      	movs	r2, #1
 800bb04:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800bb08:	bf00      	nop
}
 800bb0a:	370c      	adds	r7, #12
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b083      	sub	sp, #12
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800bb24:	bf00      	nop
}
 800bb26:	370c      	adds	r7, #12
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr

0800bb30 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b083      	sub	sp, #12
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2200      	movs	r2, #0
 800bb44:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800bb50:	2300      	movs	r3, #0
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	370c      	adds	r7, #12
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr

0800bb5e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b082      	sub	sp, #8
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2201      	movs	r2, #1
 800bb6a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2200      	movs	r2, #0
 800bb72:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 fdef 	bl	800c762 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	791b      	ldrb	r3, [r3, #4]
 800bb88:	4619      	mov	r1, r3
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 fd2d 	bl	800c5ea <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	795b      	ldrb	r3, [r3, #5]
 800bb94:	4619      	mov	r1, r3
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 fd27 	bl	800c5ea <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800bb9c:	2300      	movs	r3, #0
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3708      	adds	r7, #8
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800bba6:	b580      	push	{r7, lr}
 800bba8:	b086      	sub	sp, #24
 800bbaa:	af02      	add	r7, sp, #8
 800bbac:	6078      	str	r0, [r7, #4]
 800bbae:	460b      	mov	r3, r1
 800bbb0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800bbb8:	78fb      	ldrb	r3, [r7, #3]
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	9300      	str	r3, [sp, #0]
 800bbbe:	4613      	mov	r3, r2
 800bbc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bbc4:	2100      	movs	r1, #0
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 f864 	bl	800bc94 <USBH_GetDescriptor>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	73fb      	strb	r3, [r7, #15]
 800bbd0:	7bfb      	ldrb	r3, [r7, #15]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d10a      	bne.n	800bbec <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f203 3026 	addw	r0, r3, #806	; 0x326
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bbe2:	78fa      	ldrb	r2, [r7, #3]
 800bbe4:	b292      	uxth	r2, r2
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	f000 f8f4 	bl	800bdd4 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800bbec:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3710      	adds	r7, #16
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b086      	sub	sp, #24
 800bbfa:	af02      	add	r7, sp, #8
 800bbfc:	6078      	str	r0, [r7, #4]
 800bbfe:	460b      	mov	r3, r1
 800bc00:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	331c      	adds	r3, #28
 800bc06:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800bc08:	887b      	ldrh	r3, [r7, #2]
 800bc0a:	9300      	str	r3, [sp, #0]
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc12:	2100      	movs	r1, #0
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f000 f83d 	bl	800bc94 <USBH_GetDescriptor>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	72fb      	strb	r3, [r7, #11]
 800bc1e:	7afb      	ldrb	r3, [r7, #11]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d107      	bne.n	800bc34 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bc2a:	887a      	ldrh	r2, [r7, #2]
 800bc2c:	68f9      	ldr	r1, [r7, #12]
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f000 f940 	bl	800beb4 <USBH_ParseCfgDesc>
  }

  return status;
 800bc34:	7afb      	ldrb	r3, [r7, #11]
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3710      	adds	r7, #16
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}

0800bc3e <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800bc3e:	b580      	push	{r7, lr}
 800bc40:	b088      	sub	sp, #32
 800bc42:	af02      	add	r7, sp, #8
 800bc44:	60f8      	str	r0, [r7, #12]
 800bc46:	607a      	str	r2, [r7, #4]
 800bc48:	461a      	mov	r2, r3
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	72fb      	strb	r3, [r7, #11]
 800bc4e:	4613      	mov	r3, r2
 800bc50:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800bc52:	7afb      	ldrb	r3, [r7, #11]
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800bc5a:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800bc62:	893b      	ldrh	r3, [r7, #8]
 800bc64:	9300      	str	r3, [sp, #0]
 800bc66:	460b      	mov	r3, r1
 800bc68:	2100      	movs	r1, #0
 800bc6a:	68f8      	ldr	r0, [r7, #12]
 800bc6c:	f000 f812 	bl	800bc94 <USBH_GetDescriptor>
 800bc70:	4603      	mov	r3, r0
 800bc72:	75fb      	strb	r3, [r7, #23]
 800bc74:	7dfb      	ldrb	r3, [r7, #23]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d107      	bne.n	800bc8a <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bc80:	893a      	ldrh	r2, [r7, #8]
 800bc82:	6879      	ldr	r1, [r7, #4]
 800bc84:	4618      	mov	r0, r3
 800bc86:	f000 fa13 	bl	800c0b0 <USBH_ParseStringDesc>
  }

  return status;
 800bc8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3718      	adds	r7, #24
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	607b      	str	r3, [r7, #4]
 800bc9e:	460b      	mov	r3, r1
 800bca0:	72fb      	strb	r3, [r7, #11]
 800bca2:	4613      	mov	r3, r2
 800bca4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	789b      	ldrb	r3, [r3, #2]
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d11c      	bne.n	800bce8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800bcae:	7afb      	ldrb	r3, [r7, #11]
 800bcb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bcb4:	b2da      	uxtb	r2, r3
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2206      	movs	r2, #6
 800bcbe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	893a      	ldrh	r2, [r7, #8]
 800bcc4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800bcc6:	893b      	ldrh	r3, [r7, #8]
 800bcc8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bccc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcd0:	d104      	bne.n	800bcdc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	f240 4209 	movw	r2, #1033	; 0x409
 800bcd8:	829a      	strh	r2, [r3, #20]
 800bcda:	e002      	b.n	800bce2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2200      	movs	r2, #0
 800bce0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	8b3a      	ldrh	r2, [r7, #24]
 800bce6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800bce8:	8b3b      	ldrh	r3, [r7, #24]
 800bcea:	461a      	mov	r2, r3
 800bcec:	6879      	ldr	r1, [r7, #4]
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	f000 fa2c 	bl	800c14c <USBH_CtlReq>
 800bcf4:	4603      	mov	r3, r0
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3710      	adds	r7, #16
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}

0800bcfe <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800bcfe:	b580      	push	{r7, lr}
 800bd00:	b082      	sub	sp, #8
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	6078      	str	r0, [r7, #4]
 800bd06:	460b      	mov	r3, r1
 800bd08:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	789b      	ldrb	r3, [r3, #2]
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d10f      	bne.n	800bd32 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2200      	movs	r2, #0
 800bd16:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2205      	movs	r2, #5
 800bd1c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bd1e:	78fb      	ldrb	r3, [r7, #3]
 800bd20:	b29a      	uxth	r2, r3
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bd32:	2200      	movs	r2, #0
 800bd34:	2100      	movs	r1, #0
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f000 fa08 	bl	800c14c <USBH_CtlReq>
 800bd3c:	4603      	mov	r3, r0
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3708      	adds	r7, #8
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}

0800bd46 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bd46:	b580      	push	{r7, lr}
 800bd48:	b082      	sub	sp, #8
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6078      	str	r0, [r7, #4]
 800bd4e:	460b      	mov	r3, r1
 800bd50:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	789b      	ldrb	r3, [r3, #2]
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d10e      	bne.n	800bd78 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2209      	movs	r2, #9
 800bd64:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	887a      	ldrh	r2, [r7, #2]
 800bd6a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2200      	movs	r2, #0
 800bd76:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bd78:	2200      	movs	r2, #0
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f000 f9e5 	bl	800c14c <USBH_CtlReq>
 800bd82:	4603      	mov	r3, r0
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3708      	adds	r7, #8
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	460b      	mov	r3, r1
 800bd96:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	789b      	ldrb	r3, [r3, #2]
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d10f      	bne.n	800bdc0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2203      	movs	r2, #3
 800bdaa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bdac:	78fb      	ldrb	r3, [r7, #3]
 800bdae:	b29a      	uxth	r2, r3
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	2100      	movs	r1, #0
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f000 f9c1 	bl	800c14c <USBH_CtlReq>
 800bdca:	4603      	mov	r3, r0
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3708      	adds	r7, #8
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	60b9      	str	r1, [r7, #8]
 800bdde:	4613      	mov	r3, r2
 800bde0:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	781a      	ldrb	r2, [r3, #0]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	785a      	ldrb	r2, [r3, #1]
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	3302      	adds	r3, #2
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	b29a      	uxth	r2, r3
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	3303      	adds	r3, #3
 800bdfe:	781b      	ldrb	r3, [r3, #0]
 800be00:	b29b      	uxth	r3, r3
 800be02:	021b      	lsls	r3, r3, #8
 800be04:	b29b      	uxth	r3, r3
 800be06:	4313      	orrs	r3, r2
 800be08:	b29a      	uxth	r2, r3
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	791a      	ldrb	r2, [r3, #4]
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	795a      	ldrb	r2, [r3, #5]
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	799a      	ldrb	r2, [r3, #6]
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	79da      	ldrb	r2, [r3, #7]
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800be2e:	88fb      	ldrh	r3, [r7, #6]
 800be30:	2b08      	cmp	r3, #8
 800be32:	d939      	bls.n	800bea8 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	3308      	adds	r3, #8
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	b29a      	uxth	r2, r3
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	3309      	adds	r3, #9
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	b29b      	uxth	r3, r3
 800be44:	021b      	lsls	r3, r3, #8
 800be46:	b29b      	uxth	r3, r3
 800be48:	4313      	orrs	r3, r2
 800be4a:	b29a      	uxth	r2, r3
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	330a      	adds	r3, #10
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	b29a      	uxth	r2, r3
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	330b      	adds	r3, #11
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	b29b      	uxth	r3, r3
 800be60:	021b      	lsls	r3, r3, #8
 800be62:	b29b      	uxth	r3, r3
 800be64:	4313      	orrs	r3, r2
 800be66:	b29a      	uxth	r2, r3
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	330c      	adds	r3, #12
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	b29a      	uxth	r2, r3
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	330d      	adds	r3, #13
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	021b      	lsls	r3, r3, #8
 800be7e:	b29b      	uxth	r3, r3
 800be80:	4313      	orrs	r3, r2
 800be82:	b29a      	uxth	r2, r3
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	7b9a      	ldrb	r2, [r3, #14]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	7bda      	ldrb	r2, [r3, #15]
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	7c1a      	ldrb	r2, [r3, #16]
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	7c5a      	ldrb	r2, [r3, #17]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	745a      	strb	r2, [r3, #17]
  }
}
 800bea8:	bf00      	nop
 800beaa:	3714      	adds	r7, #20
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr

0800beb4 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b08a      	sub	sp, #40	; 0x28
 800beb8:	af00      	add	r7, sp, #0
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	60b9      	str	r1, [r7, #8]
 800bebe:	4613      	mov	r3, r2
 800bec0:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bec6:	2300      	movs	r3, #0
 800bec8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800becc:	2300      	movs	r3, #0
 800bece:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	781a      	ldrb	r2, [r3, #0]
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	785a      	ldrb	r2, [r3, #1]
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	3302      	adds	r3, #2
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	b29a      	uxth	r2, r3
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	3303      	adds	r3, #3
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	021b      	lsls	r3, r3, #8
 800bef8:	b29b      	uxth	r3, r3
 800befa:	4313      	orrs	r3, r2
 800befc:	b29a      	uxth	r2, r3
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	791a      	ldrb	r2, [r3, #4]
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	795a      	ldrb	r2, [r3, #5]
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	799a      	ldrb	r2, [r3, #6]
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	79da      	ldrb	r2, [r3, #7]
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	7a1a      	ldrb	r2, [r3, #8]
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bf2a:	88fb      	ldrh	r3, [r7, #6]
 800bf2c:	2b09      	cmp	r3, #9
 800bf2e:	d95f      	bls.n	800bff0 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800bf30:	2309      	movs	r3, #9
 800bf32:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800bf34:	2300      	movs	r3, #0
 800bf36:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bf38:	e051      	b.n	800bfde <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bf3a:	f107 0316 	add.w	r3, r7, #22
 800bf3e:	4619      	mov	r1, r3
 800bf40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf42:	f000 f8e8 	bl	800c116 <USBH_GetNextDesc>
 800bf46:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800bf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4a:	785b      	ldrb	r3, [r3, #1]
 800bf4c:	2b04      	cmp	r3, #4
 800bf4e:	d146      	bne.n	800bfde <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800bf50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bf54:	221a      	movs	r2, #26
 800bf56:	fb02 f303 	mul.w	r3, r2, r3
 800bf5a:	3308      	adds	r3, #8
 800bf5c:	68fa      	ldr	r2, [r7, #12]
 800bf5e:	4413      	add	r3, r2
 800bf60:	3302      	adds	r3, #2
 800bf62:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800bf64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf66:	69f8      	ldr	r0, [r7, #28]
 800bf68:	f000 f846 	bl	800bff8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800bf72:	2300      	movs	r3, #0
 800bf74:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bf76:	e022      	b.n	800bfbe <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bf78:	f107 0316 	add.w	r3, r7, #22
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf80:	f000 f8c9 	bl	800c116 <USBH_GetNextDesc>
 800bf84:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800bf86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf88:	785b      	ldrb	r3, [r3, #1]
 800bf8a:	2b05      	cmp	r3, #5
 800bf8c:	d117      	bne.n	800bfbe <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800bf8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bf92:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bf96:	3201      	adds	r2, #1
 800bf98:	00d2      	lsls	r2, r2, #3
 800bf9a:	211a      	movs	r1, #26
 800bf9c:	fb01 f303 	mul.w	r3, r1, r3
 800bfa0:	4413      	add	r3, r2
 800bfa2:	3308      	adds	r3, #8
 800bfa4:	68fa      	ldr	r2, [r7, #12]
 800bfa6:	4413      	add	r3, r2
 800bfa8:	3304      	adds	r3, #4
 800bfaa:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800bfac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bfae:	69b8      	ldr	r0, [r7, #24]
 800bfb0:	f000 f851 	bl	800c056 <USBH_ParseEPDesc>
            ep_ix++;
 800bfb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bfb8:	3301      	adds	r3, #1
 800bfba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bfbe:	69fb      	ldr	r3, [r7, #28]
 800bfc0:	791b      	ldrb	r3, [r3, #4]
 800bfc2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d204      	bcs.n	800bfd4 <USBH_ParseCfgDesc+0x120>
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	885a      	ldrh	r2, [r3, #2]
 800bfce:	8afb      	ldrh	r3, [r7, #22]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d8d1      	bhi.n	800bf78 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800bfd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bfd8:	3301      	adds	r3, #1
 800bfda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bfde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d804      	bhi.n	800bff0 <USBH_ParseCfgDesc+0x13c>
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	885a      	ldrh	r2, [r3, #2]
 800bfea:	8afb      	ldrh	r3, [r7, #22]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d8a4      	bhi.n	800bf3a <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800bff0:	bf00      	nop
 800bff2:	3728      	adds	r7, #40	; 0x28
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b083      	sub	sp, #12
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	781a      	ldrb	r2, [r3, #0]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	785a      	ldrb	r2, [r3, #1]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	789a      	ldrb	r2, [r3, #2]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	78da      	ldrb	r2, [r3, #3]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	791a      	ldrb	r2, [r3, #4]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	795a      	ldrb	r2, [r3, #5]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	799a      	ldrb	r2, [r3, #6]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	79da      	ldrb	r2, [r3, #7]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	7a1a      	ldrb	r2, [r3, #8]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	721a      	strb	r2, [r3, #8]
}
 800c04a:	bf00      	nop
 800c04c:	370c      	adds	r7, #12
 800c04e:	46bd      	mov	sp, r7
 800c050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c054:	4770      	bx	lr

0800c056 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800c056:	b480      	push	{r7}
 800c058:	b083      	sub	sp, #12
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
 800c05e:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	781a      	ldrb	r2, [r3, #0]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	785a      	ldrb	r2, [r3, #1]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	789a      	ldrb	r2, [r3, #2]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	78da      	ldrb	r2, [r3, #3]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	3304      	adds	r3, #4
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	b29a      	uxth	r2, r3
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	3305      	adds	r3, #5
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	b29b      	uxth	r3, r3
 800c090:	021b      	lsls	r3, r3, #8
 800c092:	b29b      	uxth	r3, r3
 800c094:	4313      	orrs	r3, r2
 800c096:	b29a      	uxth	r2, r3
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	799a      	ldrb	r2, [r3, #6]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	719a      	strb	r2, [r3, #6]
}
 800c0a4:	bf00      	nop
 800c0a6:	370c      	adds	r7, #12
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr

0800c0b0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b087      	sub	sp, #28
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	60f8      	str	r0, [r7, #12]
 800c0b8:	60b9      	str	r1, [r7, #8]
 800c0ba:	4613      	mov	r3, r2
 800c0bc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	3301      	adds	r3, #1
 800c0c2:	781b      	ldrb	r3, [r3, #0]
 800c0c4:	2b03      	cmp	r3, #3
 800c0c6:	d120      	bne.n	800c10a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	1e9a      	subs	r2, r3, #2
 800c0ce:	88fb      	ldrh	r3, [r7, #6]
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	bf28      	it	cs
 800c0d4:	4613      	movcs	r3, r2
 800c0d6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	3302      	adds	r3, #2
 800c0dc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c0de:	2300      	movs	r3, #0
 800c0e0:	82fb      	strh	r3, [r7, #22]
 800c0e2:	e00b      	b.n	800c0fc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c0e4:	8afb      	ldrh	r3, [r7, #22]
 800c0e6:	68fa      	ldr	r2, [r7, #12]
 800c0e8:	4413      	add	r3, r2
 800c0ea:	781a      	ldrb	r2, [r3, #0]
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c0f6:	8afb      	ldrh	r3, [r7, #22]
 800c0f8:	3302      	adds	r3, #2
 800c0fa:	82fb      	strh	r3, [r7, #22]
 800c0fc:	8afa      	ldrh	r2, [r7, #22]
 800c0fe:	8abb      	ldrh	r3, [r7, #20]
 800c100:	429a      	cmp	r2, r3
 800c102:	d3ef      	bcc.n	800c0e4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	2200      	movs	r2, #0
 800c108:	701a      	strb	r2, [r3, #0]
  }
}
 800c10a:	bf00      	nop
 800c10c:	371c      	adds	r7, #28
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr

0800c116 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c116:	b480      	push	{r7}
 800c118:	b085      	sub	sp, #20
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
 800c11e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	881a      	ldrh	r2, [r3, #0]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	b29b      	uxth	r3, r3
 800c12a:	4413      	add	r3, r2
 800c12c:	b29a      	uxth	r2, r3
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	4413      	add	r3, r2
 800c13c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c13e:	68fb      	ldr	r3, [r7, #12]
}
 800c140:	4618      	mov	r0, r3
 800c142:	3714      	adds	r7, #20
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b086      	sub	sp, #24
 800c150:	af00      	add	r7, sp, #0
 800c152:	60f8      	str	r0, [r7, #12]
 800c154:	60b9      	str	r1, [r7, #8]
 800c156:	4613      	mov	r3, r2
 800c158:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c15a:	2301      	movs	r3, #1
 800c15c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	789b      	ldrb	r3, [r3, #2]
 800c162:	2b01      	cmp	r3, #1
 800c164:	d002      	beq.n	800c16c <USBH_CtlReq+0x20>
 800c166:	2b02      	cmp	r3, #2
 800c168:	d00f      	beq.n	800c18a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c16a:	e027      	b.n	800c1bc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	68ba      	ldr	r2, [r7, #8]
 800c170:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	88fa      	ldrh	r2, [r7, #6]
 800c176:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2201      	movs	r2, #1
 800c17c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2202      	movs	r2, #2
 800c182:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c184:	2301      	movs	r3, #1
 800c186:	75fb      	strb	r3, [r7, #23]
      break;
 800c188:	e018      	b.n	800c1bc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c18a:	68f8      	ldr	r0, [r7, #12]
 800c18c:	f000 f81c 	bl	800c1c8 <USBH_HandleControl>
 800c190:	4603      	mov	r3, r0
 800c192:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c194:	7dfb      	ldrb	r3, [r7, #23]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d002      	beq.n	800c1a0 <USBH_CtlReq+0x54>
 800c19a:	7dfb      	ldrb	r3, [r7, #23]
 800c19c:	2b03      	cmp	r3, #3
 800c19e:	d106      	bne.n	800c1ae <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	761a      	strb	r2, [r3, #24]
      break;
 800c1ac:	e005      	b.n	800c1ba <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c1ae:	7dfb      	ldrb	r3, [r7, #23]
 800c1b0:	2b02      	cmp	r3, #2
 800c1b2:	d102      	bne.n	800c1ba <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	709a      	strb	r2, [r3, #2]
      break;
 800c1ba:	bf00      	nop
  }
  return status;
 800c1bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3718      	adds	r7, #24
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
	...

0800c1c8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b086      	sub	sp, #24
 800c1cc:	af02      	add	r7, sp, #8
 800c1ce:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	7e1b      	ldrb	r3, [r3, #24]
 800c1dc:	3b01      	subs	r3, #1
 800c1de:	2b0a      	cmp	r3, #10
 800c1e0:	f200 8156 	bhi.w	800c490 <USBH_HandleControl+0x2c8>
 800c1e4:	a201      	add	r2, pc, #4	; (adr r2, 800c1ec <USBH_HandleControl+0x24>)
 800c1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ea:	bf00      	nop
 800c1ec:	0800c219 	.word	0x0800c219
 800c1f0:	0800c233 	.word	0x0800c233
 800c1f4:	0800c29d 	.word	0x0800c29d
 800c1f8:	0800c2c3 	.word	0x0800c2c3
 800c1fc:	0800c2fb 	.word	0x0800c2fb
 800c200:	0800c325 	.word	0x0800c325
 800c204:	0800c377 	.word	0x0800c377
 800c208:	0800c399 	.word	0x0800c399
 800c20c:	0800c3d5 	.word	0x0800c3d5
 800c210:	0800c3fb 	.word	0x0800c3fb
 800c214:	0800c439 	.word	0x0800c439
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f103 0110 	add.w	r1, r3, #16
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	795b      	ldrb	r3, [r3, #5]
 800c222:	461a      	mov	r2, r3
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f000 f943 	bl	800c4b0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2202      	movs	r2, #2
 800c22e:	761a      	strb	r2, [r3, #24]
      break;
 800c230:	e139      	b.n	800c4a6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	795b      	ldrb	r3, [r3, #5]
 800c236:	4619      	mov	r1, r3
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 fb4f 	bl	800c8dc <USBH_LL_GetURBState>
 800c23e:	4603      	mov	r3, r0
 800c240:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c242:	7bbb      	ldrb	r3, [r7, #14]
 800c244:	2b01      	cmp	r3, #1
 800c246:	d11e      	bne.n	800c286 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	7c1b      	ldrb	r3, [r3, #16]
 800c24c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c250:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	8adb      	ldrh	r3, [r3, #22]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d00a      	beq.n	800c270 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c25a:	7b7b      	ldrb	r3, [r7, #13]
 800c25c:	2b80      	cmp	r3, #128	; 0x80
 800c25e:	d103      	bne.n	800c268 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2203      	movs	r2, #3
 800c264:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c266:	e115      	b.n	800c494 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2205      	movs	r2, #5
 800c26c:	761a      	strb	r2, [r3, #24]
      break;
 800c26e:	e111      	b.n	800c494 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c270:	7b7b      	ldrb	r3, [r7, #13]
 800c272:	2b80      	cmp	r3, #128	; 0x80
 800c274:	d103      	bne.n	800c27e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2209      	movs	r2, #9
 800c27a:	761a      	strb	r2, [r3, #24]
      break;
 800c27c:	e10a      	b.n	800c494 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2207      	movs	r2, #7
 800c282:	761a      	strb	r2, [r3, #24]
      break;
 800c284:	e106      	b.n	800c494 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c286:	7bbb      	ldrb	r3, [r7, #14]
 800c288:	2b04      	cmp	r3, #4
 800c28a:	d003      	beq.n	800c294 <USBH_HandleControl+0xcc>
 800c28c:	7bbb      	ldrb	r3, [r7, #14]
 800c28e:	2b02      	cmp	r3, #2
 800c290:	f040 8100 	bne.w	800c494 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	220b      	movs	r2, #11
 800c298:	761a      	strb	r2, [r3, #24]
      break;
 800c29a:	e0fb      	b.n	800c494 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c2a2:	b29a      	uxth	r2, r3
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6899      	ldr	r1, [r3, #8]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	899a      	ldrh	r2, [r3, #12]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	791b      	ldrb	r3, [r3, #4]
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 f93a 	bl	800c52e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2204      	movs	r2, #4
 800c2be:	761a      	strb	r2, [r3, #24]
      break;
 800c2c0:	e0f1      	b.n	800c4a6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	791b      	ldrb	r3, [r3, #4]
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f000 fb07 	bl	800c8dc <USBH_LL_GetURBState>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c2d2:	7bbb      	ldrb	r3, [r7, #14]
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d102      	bne.n	800c2de <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2209      	movs	r2, #9
 800c2dc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c2de:	7bbb      	ldrb	r3, [r7, #14]
 800c2e0:	2b05      	cmp	r3, #5
 800c2e2:	d102      	bne.n	800c2ea <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c2e4:	2303      	movs	r3, #3
 800c2e6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c2e8:	e0d6      	b.n	800c498 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c2ea:	7bbb      	ldrb	r3, [r7, #14]
 800c2ec:	2b04      	cmp	r3, #4
 800c2ee:	f040 80d3 	bne.w	800c498 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	220b      	movs	r2, #11
 800c2f6:	761a      	strb	r2, [r3, #24]
      break;
 800c2f8:	e0ce      	b.n	800c498 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6899      	ldr	r1, [r3, #8]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	899a      	ldrh	r2, [r3, #12]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	795b      	ldrb	r3, [r3, #5]
 800c306:	2001      	movs	r0, #1
 800c308:	9000      	str	r0, [sp, #0]
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 f8ea 	bl	800c4e4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c316:	b29a      	uxth	r2, r3
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2206      	movs	r2, #6
 800c320:	761a      	strb	r2, [r3, #24]
      break;
 800c322:	e0c0      	b.n	800c4a6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	795b      	ldrb	r3, [r3, #5]
 800c328:	4619      	mov	r1, r3
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 fad6 	bl	800c8dc <USBH_LL_GetURBState>
 800c330:	4603      	mov	r3, r0
 800c332:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c334:	7bbb      	ldrb	r3, [r7, #14]
 800c336:	2b01      	cmp	r3, #1
 800c338:	d103      	bne.n	800c342 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2207      	movs	r2, #7
 800c33e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c340:	e0ac      	b.n	800c49c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c342:	7bbb      	ldrb	r3, [r7, #14]
 800c344:	2b05      	cmp	r3, #5
 800c346:	d105      	bne.n	800c354 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	220c      	movs	r2, #12
 800c34c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c34e:	2303      	movs	r3, #3
 800c350:	73fb      	strb	r3, [r7, #15]
      break;
 800c352:	e0a3      	b.n	800c49c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c354:	7bbb      	ldrb	r3, [r7, #14]
 800c356:	2b02      	cmp	r3, #2
 800c358:	d103      	bne.n	800c362 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2205      	movs	r2, #5
 800c35e:	761a      	strb	r2, [r3, #24]
      break;
 800c360:	e09c      	b.n	800c49c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c362:	7bbb      	ldrb	r3, [r7, #14]
 800c364:	2b04      	cmp	r3, #4
 800c366:	f040 8099 	bne.w	800c49c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	220b      	movs	r2, #11
 800c36e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c370:	2302      	movs	r3, #2
 800c372:	73fb      	strb	r3, [r7, #15]
      break;
 800c374:	e092      	b.n	800c49c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	791b      	ldrb	r3, [r3, #4]
 800c37a:	2200      	movs	r2, #0
 800c37c:	2100      	movs	r1, #0
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f000 f8d5 	bl	800c52e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c38a:	b29a      	uxth	r2, r3
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2208      	movs	r2, #8
 800c394:	761a      	strb	r2, [r3, #24]

      break;
 800c396:	e086      	b.n	800c4a6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	791b      	ldrb	r3, [r3, #4]
 800c39c:	4619      	mov	r1, r3
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 fa9c 	bl	800c8dc <USBH_LL_GetURBState>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c3a8:	7bbb      	ldrb	r3, [r7, #14]
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	d105      	bne.n	800c3ba <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	220d      	movs	r2, #13
 800c3b2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c3b8:	e072      	b.n	800c4a0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c3ba:	7bbb      	ldrb	r3, [r7, #14]
 800c3bc:	2b04      	cmp	r3, #4
 800c3be:	d103      	bne.n	800c3c8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	220b      	movs	r2, #11
 800c3c4:	761a      	strb	r2, [r3, #24]
      break;
 800c3c6:	e06b      	b.n	800c4a0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c3c8:	7bbb      	ldrb	r3, [r7, #14]
 800c3ca:	2b05      	cmp	r3, #5
 800c3cc:	d168      	bne.n	800c4a0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c3ce:	2303      	movs	r3, #3
 800c3d0:	73fb      	strb	r3, [r7, #15]
      break;
 800c3d2:	e065      	b.n	800c4a0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	795b      	ldrb	r3, [r3, #5]
 800c3d8:	2201      	movs	r2, #1
 800c3da:	9200      	str	r2, [sp, #0]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	2100      	movs	r1, #0
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f000 f87f 	bl	800c4e4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c3ec:	b29a      	uxth	r2, r3
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	220a      	movs	r2, #10
 800c3f6:	761a      	strb	r2, [r3, #24]
      break;
 800c3f8:	e055      	b.n	800c4a6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	795b      	ldrb	r3, [r3, #5]
 800c3fe:	4619      	mov	r1, r3
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f000 fa6b 	bl	800c8dc <USBH_LL_GetURBState>
 800c406:	4603      	mov	r3, r0
 800c408:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c40a:	7bbb      	ldrb	r3, [r7, #14]
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d105      	bne.n	800c41c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c410:	2300      	movs	r3, #0
 800c412:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	220d      	movs	r2, #13
 800c418:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c41a:	e043      	b.n	800c4a4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c41c:	7bbb      	ldrb	r3, [r7, #14]
 800c41e:	2b02      	cmp	r3, #2
 800c420:	d103      	bne.n	800c42a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2209      	movs	r2, #9
 800c426:	761a      	strb	r2, [r3, #24]
      break;
 800c428:	e03c      	b.n	800c4a4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c42a:	7bbb      	ldrb	r3, [r7, #14]
 800c42c:	2b04      	cmp	r3, #4
 800c42e:	d139      	bne.n	800c4a4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	220b      	movs	r2, #11
 800c434:	761a      	strb	r2, [r3, #24]
      break;
 800c436:	e035      	b.n	800c4a4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	7e5b      	ldrb	r3, [r3, #25]
 800c43c:	3301      	adds	r3, #1
 800c43e:	b2da      	uxtb	r2, r3
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	765a      	strb	r2, [r3, #25]
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	7e5b      	ldrb	r3, [r3, #25]
 800c448:	2b02      	cmp	r3, #2
 800c44a:	d806      	bhi.n	800c45a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2201      	movs	r2, #1
 800c450:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2201      	movs	r2, #1
 800c456:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c458:	e025      	b.n	800c4a6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c460:	2106      	movs	r1, #6
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2200      	movs	r2, #0
 800c46a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	795b      	ldrb	r3, [r3, #5]
 800c470:	4619      	mov	r1, r3
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 f8b9 	bl	800c5ea <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	791b      	ldrb	r3, [r3, #4]
 800c47c:	4619      	mov	r1, r3
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f000 f8b3 	bl	800c5ea <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2200      	movs	r2, #0
 800c488:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c48a:	2302      	movs	r3, #2
 800c48c:	73fb      	strb	r3, [r7, #15]
      break;
 800c48e:	e00a      	b.n	800c4a6 <USBH_HandleControl+0x2de>

    default:
      break;
 800c490:	bf00      	nop
 800c492:	e008      	b.n	800c4a6 <USBH_HandleControl+0x2de>
      break;
 800c494:	bf00      	nop
 800c496:	e006      	b.n	800c4a6 <USBH_HandleControl+0x2de>
      break;
 800c498:	bf00      	nop
 800c49a:	e004      	b.n	800c4a6 <USBH_HandleControl+0x2de>
      break;
 800c49c:	bf00      	nop
 800c49e:	e002      	b.n	800c4a6 <USBH_HandleControl+0x2de>
      break;
 800c4a0:	bf00      	nop
 800c4a2:	e000      	b.n	800c4a6 <USBH_HandleControl+0x2de>
      break;
 800c4a4:	bf00      	nop
  }

  return status;
 800c4a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3710      	adds	r7, #16
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b088      	sub	sp, #32
 800c4b4:	af04      	add	r7, sp, #16
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	60b9      	str	r1, [r7, #8]
 800c4ba:	4613      	mov	r3, r2
 800c4bc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c4be:	79f9      	ldrb	r1, [r7, #7]
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	9303      	str	r3, [sp, #12]
 800c4c4:	2308      	movs	r3, #8
 800c4c6:	9302      	str	r3, [sp, #8]
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	9301      	str	r3, [sp, #4]
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	9300      	str	r3, [sp, #0]
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	68f8      	ldr	r0, [r7, #12]
 800c4d6:	f000 f9d0 	bl	800c87a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800c4da:	2300      	movs	r3, #0
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3710      	adds	r7, #16
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b088      	sub	sp, #32
 800c4e8:	af04      	add	r7, sp, #16
 800c4ea:	60f8      	str	r0, [r7, #12]
 800c4ec:	60b9      	str	r1, [r7, #8]
 800c4ee:	4611      	mov	r1, r2
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	80fb      	strh	r3, [r7, #6]
 800c4f6:	4613      	mov	r3, r2
 800c4f8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c500:	2b00      	cmp	r3, #0
 800c502:	d001      	beq.n	800c508 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c504:	2300      	movs	r3, #0
 800c506:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c508:	7979      	ldrb	r1, [r7, #5]
 800c50a:	7e3b      	ldrb	r3, [r7, #24]
 800c50c:	9303      	str	r3, [sp, #12]
 800c50e:	88fb      	ldrh	r3, [r7, #6]
 800c510:	9302      	str	r3, [sp, #8]
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	9301      	str	r3, [sp, #4]
 800c516:	2301      	movs	r3, #1
 800c518:	9300      	str	r3, [sp, #0]
 800c51a:	2300      	movs	r3, #0
 800c51c:	2200      	movs	r2, #0
 800c51e:	68f8      	ldr	r0, [r7, #12]
 800c520:	f000 f9ab 	bl	800c87a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c524:	2300      	movs	r3, #0
}
 800c526:	4618      	mov	r0, r3
 800c528:	3710      	adds	r7, #16
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c52e:	b580      	push	{r7, lr}
 800c530:	b088      	sub	sp, #32
 800c532:	af04      	add	r7, sp, #16
 800c534:	60f8      	str	r0, [r7, #12]
 800c536:	60b9      	str	r1, [r7, #8]
 800c538:	4611      	mov	r1, r2
 800c53a:	461a      	mov	r2, r3
 800c53c:	460b      	mov	r3, r1
 800c53e:	80fb      	strh	r3, [r7, #6]
 800c540:	4613      	mov	r3, r2
 800c542:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c544:	7979      	ldrb	r1, [r7, #5]
 800c546:	2300      	movs	r3, #0
 800c548:	9303      	str	r3, [sp, #12]
 800c54a:	88fb      	ldrh	r3, [r7, #6]
 800c54c:	9302      	str	r3, [sp, #8]
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	9301      	str	r3, [sp, #4]
 800c552:	2301      	movs	r3, #1
 800c554:	9300      	str	r3, [sp, #0]
 800c556:	2300      	movs	r3, #0
 800c558:	2201      	movs	r2, #1
 800c55a:	68f8      	ldr	r0, [r7, #12]
 800c55c:	f000 f98d 	bl	800c87a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c560:	2300      	movs	r3, #0

}
 800c562:	4618      	mov	r0, r3
 800c564:	3710      	adds	r7, #16
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b086      	sub	sp, #24
 800c56e:	af04      	add	r7, sp, #16
 800c570:	6078      	str	r0, [r7, #4]
 800c572:	4608      	mov	r0, r1
 800c574:	4611      	mov	r1, r2
 800c576:	461a      	mov	r2, r3
 800c578:	4603      	mov	r3, r0
 800c57a:	70fb      	strb	r3, [r7, #3]
 800c57c:	460b      	mov	r3, r1
 800c57e:	70bb      	strb	r3, [r7, #2]
 800c580:	4613      	mov	r3, r2
 800c582:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c584:	7878      	ldrb	r0, [r7, #1]
 800c586:	78ba      	ldrb	r2, [r7, #2]
 800c588:	78f9      	ldrb	r1, [r7, #3]
 800c58a:	8b3b      	ldrh	r3, [r7, #24]
 800c58c:	9302      	str	r3, [sp, #8]
 800c58e:	7d3b      	ldrb	r3, [r7, #20]
 800c590:	9301      	str	r3, [sp, #4]
 800c592:	7c3b      	ldrb	r3, [r7, #16]
 800c594:	9300      	str	r3, [sp, #0]
 800c596:	4603      	mov	r3, r0
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f000 f93f 	bl	800c81c <USBH_LL_OpenPipe>

  return USBH_OK;
 800c59e:	2300      	movs	r3, #0
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3708      	adds	r7, #8
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}

0800c5a8 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b084      	sub	sp, #16
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	460b      	mov	r3, r1
 800c5b2:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f000 f836 	bl	800c626 <USBH_GetFreePipe>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c5be:	89fb      	ldrh	r3, [r7, #14]
 800c5c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d00a      	beq.n	800c5de <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800c5c8:	78fa      	ldrb	r2, [r7, #3]
 800c5ca:	89fb      	ldrh	r3, [r7, #14]
 800c5cc:	f003 030f 	and.w	r3, r3, #15
 800c5d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c5d4:	6879      	ldr	r1, [r7, #4]
 800c5d6:	33e0      	adds	r3, #224	; 0xe0
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	440b      	add	r3, r1
 800c5dc:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c5de:	89fb      	ldrh	r3, [r7, #14]
 800c5e0:	b2db      	uxtb	r3, r3
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c5ea:	b480      	push	{r7}
 800c5ec:	b083      	sub	sp, #12
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
 800c5f2:	460b      	mov	r3, r1
 800c5f4:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800c5f6:	78fb      	ldrb	r3, [r7, #3]
 800c5f8:	2b0a      	cmp	r3, #10
 800c5fa:	d80d      	bhi.n	800c618 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c5fc:	78fb      	ldrb	r3, [r7, #3]
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	33e0      	adds	r3, #224	; 0xe0
 800c602:	009b      	lsls	r3, r3, #2
 800c604:	4413      	add	r3, r2
 800c606:	685a      	ldr	r2, [r3, #4]
 800c608:	78fb      	ldrb	r3, [r7, #3]
 800c60a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c60e:	6879      	ldr	r1, [r7, #4]
 800c610:	33e0      	adds	r3, #224	; 0xe0
 800c612:	009b      	lsls	r3, r3, #2
 800c614:	440b      	add	r3, r1
 800c616:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c618:	2300      	movs	r3, #0
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	370c      	adds	r7, #12
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr

0800c626 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c626:	b480      	push	{r7}
 800c628:	b085      	sub	sp, #20
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c62e:	2300      	movs	r3, #0
 800c630:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800c632:	2300      	movs	r3, #0
 800c634:	73fb      	strb	r3, [r7, #15]
 800c636:	e00f      	b.n	800c658 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c638:	7bfb      	ldrb	r3, [r7, #15]
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	33e0      	adds	r3, #224	; 0xe0
 800c63e:	009b      	lsls	r3, r3, #2
 800c640:	4413      	add	r3, r2
 800c642:	685b      	ldr	r3, [r3, #4]
 800c644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d102      	bne.n	800c652 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c64c:	7bfb      	ldrb	r3, [r7, #15]
 800c64e:	b29b      	uxth	r3, r3
 800c650:	e007      	b.n	800c662 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800c652:	7bfb      	ldrb	r3, [r7, #15]
 800c654:	3301      	adds	r3, #1
 800c656:	73fb      	strb	r3, [r7, #15]
 800c658:	7bfb      	ldrb	r3, [r7, #15]
 800c65a:	2b0a      	cmp	r3, #10
 800c65c:	d9ec      	bls.n	800c638 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c65e:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c662:	4618      	mov	r0, r3
 800c664:	3714      	adds	r7, #20
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr
	...

0800c670 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c674:	4802      	ldr	r0, [pc, #8]	; (800c680 <MX_USB_HOST_Process+0x10>)
 800c676:	f7fe fe51 	bl	800b31c <USBH_Process>
}
 800c67a:	bf00      	nop
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	bf00      	nop
 800c680:	20001030 	.word	0x20001030

0800c684 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c692:	4618      	mov	r0, r3
 800c694:	f7ff fa06 	bl	800baa4 <USBH_LL_IncTimer>
}
 800c698:	bf00      	nop
 800c69a:	3708      	adds	r7, #8
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}

0800c6a0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7ff fa3e 	bl	800bb30 <USBH_LL_Connect>
}
 800c6b4:	bf00      	nop
 800c6b6:	3708      	adds	r7, #8
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7ff fa47 	bl	800bb5e <USBH_LL_Disconnect>
}
 800c6d0:	bf00      	nop
 800c6d2:	3708      	adds	r7, #8
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b083      	sub	sp, #12
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	70fb      	strb	r3, [r7, #3]
 800c6e4:	4613      	mov	r3, r2
 800c6e6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c6e8:	bf00      	nop
 800c6ea:	370c      	adds	r7, #12
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr

0800c6f4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c702:	4618      	mov	r0, r3
 800c704:	f7ff f9f8 	bl	800baf8 <USBH_LL_PortEnabled>
}
 800c708:	bf00      	nop
 800c70a:	3708      	adds	r7, #8
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c71e:	4618      	mov	r0, r3
 800c720:	f7ff f9f8 	bl	800bb14 <USBH_LL_PortDisabled>
}
 800c724:	bf00      	nop
 800c726:	3708      	adds	r7, #8
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b084      	sub	sp, #16
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c734:	2300      	movs	r3, #0
 800c736:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c738:	2300      	movs	r3, #0
 800c73a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c742:	4618      	mov	r0, r3
 800c744:	f7f8 fb32 	bl	8004dac <HAL_HCD_Start>
 800c748:	4603      	mov	r3, r0
 800c74a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c74c:	7bfb      	ldrb	r3, [r7, #15]
 800c74e:	4618      	mov	r0, r3
 800c750:	f000 f8fa 	bl	800c948 <USBH_Get_USB_Status>
 800c754:	4603      	mov	r3, r0
 800c756:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c758:	7bbb      	ldrb	r3, [r7, #14]
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3710      	adds	r7, #16
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}

0800c762 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c762:	b580      	push	{r7, lr}
 800c764:	b084      	sub	sp, #16
 800c766:	af00      	add	r7, sp, #0
 800c768:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c76a:	2300      	movs	r3, #0
 800c76c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c76e:	2300      	movs	r3, #0
 800c770:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c778:	4618      	mov	r0, r3
 800c77a:	f7f8 fb3a 	bl	8004df2 <HAL_HCD_Stop>
 800c77e:	4603      	mov	r3, r0
 800c780:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c782:	7bfb      	ldrb	r3, [r7, #15]
 800c784:	4618      	mov	r0, r3
 800c786:	f000 f8df 	bl	800c948 <USBH_Get_USB_Status>
 800c78a:	4603      	mov	r3, r0
 800c78c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c78e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c790:	4618      	mov	r0, r3
 800c792:	3710      	adds	r7, #16
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}

0800c798 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b084      	sub	sp, #16
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7f8 fb60 	bl	8004e70 <HAL_HCD_GetCurrentSpeed>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	2b02      	cmp	r3, #2
 800c7b4:	d00c      	beq.n	800c7d0 <USBH_LL_GetSpeed+0x38>
 800c7b6:	2b02      	cmp	r3, #2
 800c7b8:	d80d      	bhi.n	800c7d6 <USBH_LL_GetSpeed+0x3e>
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d002      	beq.n	800c7c4 <USBH_LL_GetSpeed+0x2c>
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d003      	beq.n	800c7ca <USBH_LL_GetSpeed+0x32>
 800c7c2:	e008      	b.n	800c7d6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	73fb      	strb	r3, [r7, #15]
    break;
 800c7c8:	e008      	b.n	800c7dc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	73fb      	strb	r3, [r7, #15]
    break;
 800c7ce:	e005      	b.n	800c7dc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c7d0:	2302      	movs	r3, #2
 800c7d2:	73fb      	strb	r3, [r7, #15]
    break;
 800c7d4:	e002      	b.n	800c7dc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	73fb      	strb	r3, [r7, #15]
    break;
 800c7da:	bf00      	nop
  }
  return  speed;
 800c7dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3710      	adds	r7, #16
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}

0800c7e6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c7e6:	b580      	push	{r7, lr}
 800c7e8:	b084      	sub	sp, #16
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7f8 fb15 	bl	8004e2c <HAL_HCD_ResetPort>
 800c802:	4603      	mov	r3, r0
 800c804:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c806:	7bfb      	ldrb	r3, [r7, #15]
 800c808:	4618      	mov	r0, r3
 800c80a:	f000 f89d 	bl	800c948 <USBH_Get_USB_Status>
 800c80e:	4603      	mov	r3, r0
 800c810:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c812:	7bbb      	ldrb	r3, [r7, #14]
}
 800c814:	4618      	mov	r0, r3
 800c816:	3710      	adds	r7, #16
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}

0800c81c <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c81c:	b590      	push	{r4, r7, lr}
 800c81e:	b089      	sub	sp, #36	; 0x24
 800c820:	af04      	add	r7, sp, #16
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	4608      	mov	r0, r1
 800c826:	4611      	mov	r1, r2
 800c828:	461a      	mov	r2, r3
 800c82a:	4603      	mov	r3, r0
 800c82c:	70fb      	strb	r3, [r7, #3]
 800c82e:	460b      	mov	r3, r1
 800c830:	70bb      	strb	r3, [r7, #2]
 800c832:	4613      	mov	r3, r2
 800c834:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c836:	2300      	movs	r3, #0
 800c838:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c83a:	2300      	movs	r3, #0
 800c83c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c844:	787c      	ldrb	r4, [r7, #1]
 800c846:	78ba      	ldrb	r2, [r7, #2]
 800c848:	78f9      	ldrb	r1, [r7, #3]
 800c84a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c84c:	9302      	str	r3, [sp, #8]
 800c84e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c852:	9301      	str	r3, [sp, #4]
 800c854:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c858:	9300      	str	r3, [sp, #0]
 800c85a:	4623      	mov	r3, r4
 800c85c:	f7f7 ffbd 	bl	80047da <HAL_HCD_HC_Init>
 800c860:	4603      	mov	r3, r0
 800c862:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c864:	7bfb      	ldrb	r3, [r7, #15]
 800c866:	4618      	mov	r0, r3
 800c868:	f000 f86e 	bl	800c948 <USBH_Get_USB_Status>
 800c86c:	4603      	mov	r3, r0
 800c86e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c870:	7bbb      	ldrb	r3, [r7, #14]
}
 800c872:	4618      	mov	r0, r3
 800c874:	3714      	adds	r7, #20
 800c876:	46bd      	mov	sp, r7
 800c878:	bd90      	pop	{r4, r7, pc}

0800c87a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c87a:	b590      	push	{r4, r7, lr}
 800c87c:	b089      	sub	sp, #36	; 0x24
 800c87e:	af04      	add	r7, sp, #16
 800c880:	6078      	str	r0, [r7, #4]
 800c882:	4608      	mov	r0, r1
 800c884:	4611      	mov	r1, r2
 800c886:	461a      	mov	r2, r3
 800c888:	4603      	mov	r3, r0
 800c88a:	70fb      	strb	r3, [r7, #3]
 800c88c:	460b      	mov	r3, r1
 800c88e:	70bb      	strb	r3, [r7, #2]
 800c890:	4613      	mov	r3, r2
 800c892:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c894:	2300      	movs	r3, #0
 800c896:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c898:	2300      	movs	r3, #0
 800c89a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c8a2:	787c      	ldrb	r4, [r7, #1]
 800c8a4:	78ba      	ldrb	r2, [r7, #2]
 800c8a6:	78f9      	ldrb	r1, [r7, #3]
 800c8a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c8ac:	9303      	str	r3, [sp, #12]
 800c8ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c8b0:	9302      	str	r3, [sp, #8]
 800c8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b4:	9301      	str	r3, [sp, #4]
 800c8b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c8ba:	9300      	str	r3, [sp, #0]
 800c8bc:	4623      	mov	r3, r4
 800c8be:	f7f8 f81b 	bl	80048f8 <HAL_HCD_HC_SubmitRequest>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c8c6:	7bfb      	ldrb	r3, [r7, #15]
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f000 f83d 	bl	800c948 <USBH_Get_USB_Status>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3714      	adds	r7, #20
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd90      	pop	{r4, r7, pc}

0800c8dc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b082      	sub	sp, #8
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	460b      	mov	r3, r1
 800c8e6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c8ee:	78fa      	ldrb	r2, [r7, #3]
 800c8f0:	4611      	mov	r1, r2
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7f8 faa8 	bl	8004e48 <HAL_HCD_HC_GetURBState>
 800c8f8:	4603      	mov	r3, r0
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3708      	adds	r7, #8
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}

0800c902 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c902:	b580      	push	{r7, lr}
 800c904:	b082      	sub	sp, #8
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]
 800c90a:	460b      	mov	r3, r1
 800c90c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c914:	2b01      	cmp	r3, #1
 800c916:	d103      	bne.n	800c920 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c918:	78fb      	ldrb	r3, [r7, #3]
 800c91a:	4618      	mov	r0, r3
 800c91c:	f000 f840 	bl	800c9a0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c920:	20c8      	movs	r0, #200	; 0xc8
 800c922:	f7f6 fe6d 	bl	8003600 <HAL_Delay>
  return USBH_OK;
 800c926:	2300      	movs	r3, #0
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3708      	adds	r7, #8
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f7f6 fe61 	bl	8003600 <HAL_Delay>
}
 800c93e:	bf00      	nop
 800c940:	3708      	adds	r7, #8
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
	...

0800c948 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c948:	b480      	push	{r7}
 800c94a:	b085      	sub	sp, #20
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	4603      	mov	r3, r0
 800c950:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c952:	2300      	movs	r3, #0
 800c954:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c956:	79fb      	ldrb	r3, [r7, #7]
 800c958:	2b03      	cmp	r3, #3
 800c95a:	d817      	bhi.n	800c98c <USBH_Get_USB_Status+0x44>
 800c95c:	a201      	add	r2, pc, #4	; (adr r2, 800c964 <USBH_Get_USB_Status+0x1c>)
 800c95e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c962:	bf00      	nop
 800c964:	0800c975 	.word	0x0800c975
 800c968:	0800c97b 	.word	0x0800c97b
 800c96c:	0800c981 	.word	0x0800c981
 800c970:	0800c987 	.word	0x0800c987
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c974:	2300      	movs	r3, #0
 800c976:	73fb      	strb	r3, [r7, #15]
    break;
 800c978:	e00b      	b.n	800c992 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c97a:	2302      	movs	r3, #2
 800c97c:	73fb      	strb	r3, [r7, #15]
    break;
 800c97e:	e008      	b.n	800c992 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c980:	2301      	movs	r3, #1
 800c982:	73fb      	strb	r3, [r7, #15]
    break;
 800c984:	e005      	b.n	800c992 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c986:	2302      	movs	r3, #2
 800c988:	73fb      	strb	r3, [r7, #15]
    break;
 800c98a:	e002      	b.n	800c992 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c98c:	2302      	movs	r3, #2
 800c98e:	73fb      	strb	r3, [r7, #15]
    break;
 800c990:	bf00      	nop
  }
  return usb_status;
 800c992:	7bfb      	ldrb	r3, [r7, #15]
}
 800c994:	4618      	mov	r0, r3
 800c996:	3714      	adds	r7, #20
 800c998:	46bd      	mov	sp, r7
 800c99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99e:	4770      	bx	lr

0800c9a0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b084      	sub	sp, #16
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c9aa:	79fb      	ldrb	r3, [r7, #7]
 800c9ac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c9ae:	79fb      	ldrb	r3, [r7, #7]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d102      	bne.n	800c9ba <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	73fb      	strb	r3, [r7, #15]
 800c9b8:	e001      	b.n	800c9be <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 800c9be:	7bfb      	ldrb	r3, [r7, #15]
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	2120      	movs	r1, #32
 800c9c4:	4803      	ldr	r0, [pc, #12]	; (800c9d4 <MX_DriverVbusFS+0x34>)
 800c9c6:	f7f7 fed5 	bl	8004774 <HAL_GPIO_WritePin>
}
 800c9ca:	bf00      	nop
 800c9cc:	3710      	adds	r7, #16
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	bf00      	nop
 800c9d4:	40020c00 	.word	0x40020c00

0800c9d8 <sine_model_configure_activations>:


AI_DECLARE_STATIC
ai_bool sine_model_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b085      	sub	sp, #20
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	691b      	ldr	r3, [r3, #16]
 800c9e6:	3303      	adds	r3, #3
 800c9e8:	f023 0303 	bic.w	r3, r3, #3
 800c9ec:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    serving_default_dense_input0_output_array.data = AI_PTR(NULL);
 800c9ee:	4b16      	ldr	r3, [pc, #88]	; (800ca48 <sine_model_configure_activations+0x70>)
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	609a      	str	r2, [r3, #8]
    serving_default_dense_input0_output_array.data_start = AI_PTR(NULL);
 800c9f4:	4b14      	ldr	r3, [pc, #80]	; (800ca48 <sine_model_configure_activations+0x70>)
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	60da      	str	r2, [r3, #12]
    dense_0_output_array.data = AI_PTR(activations + 0);
 800c9fa:	4a14      	ldr	r2, [pc, #80]	; (800ca4c <sine_model_configure_activations+0x74>)
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(activations + 0);
 800ca00:	4a12      	ldr	r2, [pc, #72]	; (800ca4c <sine_model_configure_activations+0x74>)
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	60d3      	str	r3, [r2, #12]
    nl_0_output_array.data = AI_PTR(activations + 0);
 800ca06:	4a12      	ldr	r2, [pc, #72]	; (800ca50 <sine_model_configure_activations+0x78>)
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	6093      	str	r3, [r2, #8]
    nl_0_output_array.data_start = AI_PTR(activations + 0);
 800ca0c:	4a10      	ldr	r2, [pc, #64]	; (800ca50 <sine_model_configure_activations+0x78>)
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 64);
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	3340      	adds	r3, #64	; 0x40
 800ca16:	4a0f      	ldr	r2, [pc, #60]	; (800ca54 <sine_model_configure_activations+0x7c>)
 800ca18:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 64);
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	3340      	adds	r3, #64	; 0x40
 800ca1e:	4a0d      	ldr	r2, [pc, #52]	; (800ca54 <sine_model_configure_activations+0x7c>)
 800ca20:	60d3      	str	r3, [r2, #12]
    nl_1_output_array.data = AI_PTR(activations + 0);
 800ca22:	4a0d      	ldr	r2, [pc, #52]	; (800ca58 <sine_model_configure_activations+0x80>)
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	6093      	str	r3, [r2, #8]
    nl_1_output_array.data_start = AI_PTR(activations + 0);
 800ca28:	4a0b      	ldr	r2, [pc, #44]	; (800ca58 <sine_model_configure_activations+0x80>)
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(NULL);
 800ca2e:	4b0b      	ldr	r3, [pc, #44]	; (800ca5c <sine_model_configure_activations+0x84>)
 800ca30:	2200      	movs	r2, #0
 800ca32:	609a      	str	r2, [r3, #8]
    dense_2_output_array.data_start = AI_PTR(NULL);
 800ca34:	4b09      	ldr	r3, [pc, #36]	; (800ca5c <sine_model_configure_activations+0x84>)
 800ca36:	2200      	movs	r2, #0
 800ca38:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800ca3a:	2301      	movs	r3, #1
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3714      	adds	r7, #20
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr
 800ca48:	200000cc 	.word	0x200000cc
 800ca4c:	200000dc 	.word	0x200000dc
 800ca50:	200000ec 	.word	0x200000ec
 800ca54:	200000fc 	.word	0x200000fc
 800ca58:	2000010c 	.word	0x2000010c
 800ca5c:	2000011c 	.word	0x2000011c

0800ca60 <sine_model_configure_weights>:


AI_DECLARE_STATIC
ai_bool sine_model_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b085      	sub	sp, #20
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	691b      	ldr	r3, [r3, #16]
 800ca6e:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800ca70:	4b2f      	ldr	r3, [pc, #188]	; (800cb30 <sine_model_configure_weights+0xd0>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ca78:	4a2d      	ldr	r2, [pc, #180]	; (800cb30 <sine_model_configure_weights+0xd0>)
 800ca7a:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 1280);
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca82:	4a2b      	ldr	r2, [pc, #172]	; (800cb30 <sine_model_configure_weights+0xd0>)
 800ca84:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 1280);
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca8c:	4a28      	ldr	r2, [pc, #160]	; (800cb30 <sine_model_configure_weights+0xd0>)
 800ca8e:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800ca90:	4b28      	ldr	r3, [pc, #160]	; (800cb34 <sine_model_configure_weights+0xd4>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ca98:	4a26      	ldr	r2, [pc, #152]	; (800cb34 <sine_model_configure_weights+0xd4>)
 800ca9a:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 1216);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800caa2:	4a24      	ldr	r2, [pc, #144]	; (800cb34 <sine_model_configure_weights+0xd4>)
 800caa4:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 1216);
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800caac:	4a21      	ldr	r2, [pc, #132]	; (800cb34 <sine_model_configure_weights+0xd4>)
 800caae:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800cab0:	4b21      	ldr	r3, [pc, #132]	; (800cb38 <sine_model_configure_weights+0xd8>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cab8:	4a1f      	ldr	r2, [pc, #124]	; (800cb38 <sine_model_configure_weights+0xd8>)
 800caba:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 1152);
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800cac2:	4a1d      	ldr	r2, [pc, #116]	; (800cb38 <sine_model_configure_weights+0xd8>)
 800cac4:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 1152);
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800cacc:	4a1a      	ldr	r2, [pc, #104]	; (800cb38 <sine_model_configure_weights+0xd8>)
 800cace:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800cad0:	4b1a      	ldr	r3, [pc, #104]	; (800cb3c <sine_model_configure_weights+0xdc>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cad8:	4a18      	ldr	r2, [pc, #96]	; (800cb3c <sine_model_configure_weights+0xdc>)
 800cada:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 128);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	3380      	adds	r3, #128	; 0x80
 800cae0:	4a16      	ldr	r2, [pc, #88]	; (800cb3c <sine_model_configure_weights+0xdc>)
 800cae2:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 128);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	3380      	adds	r3, #128	; 0x80
 800cae8:	4a14      	ldr	r2, [pc, #80]	; (800cb3c <sine_model_configure_weights+0xdc>)
 800caea:	60d3      	str	r3, [r2, #12]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800caec:	4b14      	ldr	r3, [pc, #80]	; (800cb40 <sine_model_configure_weights+0xe0>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800caf4:	4a12      	ldr	r2, [pc, #72]	; (800cb40 <sine_model_configure_weights+0xe0>)
 800caf6:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(weights + 64);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	3340      	adds	r3, #64	; 0x40
 800cafc:	4a10      	ldr	r2, [pc, #64]	; (800cb40 <sine_model_configure_weights+0xe0>)
 800cafe:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(weights + 64);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	3340      	adds	r3, #64	; 0x40
 800cb04:	4a0e      	ldr	r2, [pc, #56]	; (800cb40 <sine_model_configure_weights+0xe0>)
 800cb06:	60d3      	str	r3, [r2, #12]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800cb08:	4b0e      	ldr	r3, [pc, #56]	; (800cb44 <sine_model_configure_weights+0xe4>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb10:	4a0c      	ldr	r2, [pc, #48]	; (800cb44 <sine_model_configure_weights+0xe4>)
 800cb12:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(weights + 0);
 800cb14:	4a0b      	ldr	r2, [pc, #44]	; (800cb44 <sine_model_configure_weights+0xe4>)
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(weights + 0);
 800cb1a:	4a0a      	ldr	r2, [pc, #40]	; (800cb44 <sine_model_configure_weights+0xe4>)
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	60d3      	str	r3, [r2, #12]
  }

  return true;
 800cb20:	2301      	movs	r3, #1
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3714      	adds	r7, #20
 800cb26:	46bd      	mov	sp, r7
 800cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2c:	4770      	bx	lr
 800cb2e:	bf00      	nop
 800cb30:	2000006c 	.word	0x2000006c
 800cb34:	2000007c 	.word	0x2000007c
 800cb38:	2000008c 	.word	0x2000008c
 800cb3c:	2000009c 	.word	0x2000009c
 800cb40:	200000ac 	.word	0x200000ac
 800cb44:	200000bc 	.word	0x200000bc

0800cb48 <ai_sine_model_create>:
}

AI_API_ENTRY
ai_error ai_sine_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af02      	add	r7, sp, #8
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800cb52:	2300      	movs	r3, #0
 800cb54:	9301      	str	r3, [sp, #4]
 800cb56:	2303      	movs	r3, #3
 800cb58:	9300      	str	r3, [sp, #0]
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	4a04      	ldr	r2, [pc, #16]	; (800cb70 <ai_sine_model_create+0x28>)
 800cb5e:	6839      	ldr	r1, [r7, #0]
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 f861 	bl	800cc28 <ai_platform_network_create>
 800cb66:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}
 800cb70:	2000000c 	.word	0x2000000c

0800cb74 <ai_sine_model_init>:
}

AI_API_ENTRY
ai_bool ai_sine_model_init(
  ai_handle network, const ai_network_params* params)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b084      	sub	sp, #16
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800cb7e:	6839      	ldr	r1, [r7, #0]
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f000 f8d5 	bl	800cd30 <ai_platform_network_init>
 800cb86:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d101      	bne.n	800cb92 <ai_sine_model_init+0x1e>
 800cb8e:	2300      	movs	r3, #0
 800cb90:	e02b      	b.n	800cbea <ai_sine_model_init+0x76>

  ai_bool ok = true;
 800cb92:	2301      	movs	r3, #1
 800cb94:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_weights(net_ctx, &params->params);
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	4619      	mov	r1, r3
 800cb9a:	68f8      	ldr	r0, [r7, #12]
 800cb9c:	f7ff ff60 	bl	800ca60 <sine_model_configure_weights>
 800cba0:	4603      	mov	r3, r0
 800cba2:	461a      	mov	r2, r3
 800cba4:	7afb      	ldrb	r3, [r7, #11]
 800cba6:	4013      	ands	r3, r2
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	bf14      	ite	ne
 800cbac:	2301      	movne	r3, #1
 800cbae:	2300      	moveq	r3, #0
 800cbb0:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_activations(net_ctx, &params->activations);
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	3318      	adds	r3, #24
 800cbb6:	4619      	mov	r1, r3
 800cbb8:	68f8      	ldr	r0, [r7, #12]
 800cbba:	f7ff ff0d 	bl	800c9d8 <sine_model_configure_activations>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	7afb      	ldrb	r3, [r7, #11]
 800cbc4:	4013      	ands	r3, r2
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	bf14      	ite	ne
 800cbca:	2301      	movne	r3, #1
 800cbcc:	2300      	moveq	r3, #0
 800cbce:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 f995 	bl	800cf00 <ai_platform_network_post_init>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	461a      	mov	r2, r3
 800cbda:	7afb      	ldrb	r3, [r7, #11]
 800cbdc:	4013      	ands	r3, r2
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	bf14      	ite	ne
 800cbe2:	2301      	movne	r3, #1
 800cbe4:	2300      	moveq	r3, #0
 800cbe6:	72fb      	strb	r3, [r7, #11]

  return ok;
 800cbe8:	7afb      	ldrb	r3, [r7, #11]
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3710      	adds	r7, #16
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}

0800cbf2 <ai_sine_model_run>:


AI_API_ENTRY
ai_i32 ai_sine_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800cbf2:	b580      	push	{r7, lr}
 800cbf4:	b084      	sub	sp, #16
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	60f8      	str	r0, [r7, #12]
 800cbfa:	60b9      	str	r1, [r7, #8]
 800cbfc:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800cbfe:	687a      	ldr	r2, [r7, #4]
 800cc00:	68b9      	ldr	r1, [r7, #8]
 800cc02:	68f8      	ldr	r0, [r7, #12]
 800cc04:	f000 fa28 	bl	800d058 <ai_platform_network_process>
 800cc08:	4603      	mov	r3, r0
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3710      	adds	r7, #16
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
	...

0800cc14 <ai_sine_model_data_weights_get>:
#include "sine_model_data.h"

ai_handle ai_sine_model_data_weights_get(void)
{
 800cc14:	b480      	push	{r7}
 800cc16:	af00      	add	r7, sp, #0
    0x6d, 0x59, 0xbe, 0x5a, 0xac, 0x15, 0x40, 0x0c, 0x2f,
    0xe0, 0x3e, 0x30, 0x6a, 0x25, 0x3f, 0xaf, 0xda, 0xee,
    0x3d, 0x9d, 0x54, 0xfb, 0xbe, 0x19, 0x36, 0x1f, 0xbd
  };

  return AI_HANDLE_PTR(s_sine_model_weights);
 800cc18:	4b02      	ldr	r3, [pc, #8]	; (800cc24 <ai_sine_model_data_weights_get+0x10>)

}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr
 800cc24:	080112e0 	.word	0x080112e0

0800cc28 <ai_platform_network_create>:
 800cc28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc2a:	4d36      	ldr	r5, [pc, #216]	; (800cd04 <ai_platform_network_create+0xdc>)
 800cc2c:	b083      	sub	sp, #12
 800cc2e:	4e36      	ldr	r6, [pc, #216]	; (800cd08 <ai_platform_network_create+0xe0>)
 800cc30:	6829      	ldr	r1, [r5, #0]
 800cc32:	f89d 7020 	ldrb.w	r7, [sp, #32]
 800cc36:	f021 0101 	bic.w	r1, r1, #1
 800cc3a:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800cc3e:	6029      	str	r1, [r5, #0]
 800cc40:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 800cc44:	6831      	ldr	r1, [r6, #0]
 800cc46:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800cc4a:	194d      	adds	r5, r1, r5
 800cc4c:	2d01      	cmp	r5, #1
 800cc4e:	d92f      	bls.n	800ccb0 <ai_platform_network_create+0x88>
 800cc50:	f240 4549 	movw	r5, #1097	; 0x449
 800cc54:	42a9      	cmp	r1, r5
 800cc56:	d02b      	beq.n	800ccb0 <ai_platform_network_create+0x88>
 800cc58:	492c      	ldr	r1, [pc, #176]	; (800cd0c <ai_platform_network_create+0xe4>)
 800cc5a:	6809      	ldr	r1, [r1, #0]
 800cc5c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800cc60:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 800cc64:	d015      	beq.n	800cc92 <ai_platform_network_create+0x6a>
 800cc66:	2800      	cmp	r0, #0
 800cc68:	d031      	beq.n	800ccce <ai_platform_network_create+0xa6>
 800cc6a:	461e      	mov	r6, r3
 800cc6c:	4613      	mov	r3, r2
 800cc6e:	4a28      	ldr	r2, [pc, #160]	; (800cd10 <ai_platform_network_create+0xe8>)
 800cc70:	4605      	mov	r5, r0
 800cc72:	601a      	str	r2, [r3, #0]
 800cc74:	6003      	str	r3, [r0, #0]
 800cc76:	f000 fc9f 	bl	800d5b8 <core_init>
 800cc7a:	2800      	cmp	r0, #0
 800cc7c:	d02b      	beq.n	800ccd6 <ai_platform_network_create+0xae>
 800cc7e:	0223      	lsls	r3, r4, #8
 800cc80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cc84:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 800cc88:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 800cc8c:	d92e      	bls.n	800ccec <ai_platform_network_create+0xc4>
 800cc8e:	2301      	movs	r3, #1
 800cc90:	e022      	b.n	800ccd8 <ai_platform_network_create+0xb0>
 800cc92:	4920      	ldr	r1, [pc, #128]	; (800cd14 <ai_platform_network_create+0xec>)
 800cc94:	2501      	movs	r5, #1
 800cc96:	460e      	mov	r6, r1
 800cc98:	600d      	str	r5, [r1, #0]
 800cc9a:	6831      	ldr	r1, [r6, #0]
 800cc9c:	2900      	cmp	r1, #0
 800cc9e:	d1fc      	bne.n	800cc9a <ai_platform_network_create+0x72>
 800cca0:	491d      	ldr	r1, [pc, #116]	; (800cd18 <ai_platform_network_create+0xf0>)
 800cca2:	4e1e      	ldr	r6, [pc, #120]	; (800cd1c <ai_platform_network_create+0xf4>)
 800cca4:	4d1e      	ldr	r5, [pc, #120]	; (800cd20 <ai_platform_network_create+0xf8>)
 800cca6:	600e      	str	r6, [r1, #0]
 800cca8:	6809      	ldr	r1, [r1, #0]
 800ccaa:	42a9      	cmp	r1, r5
 800ccac:	d0db      	beq.n	800cc66 <ai_platform_network_create+0x3e>
 800ccae:	e7fe      	b.n	800ccae <ai_platform_network_create+0x86>
 800ccb0:	491c      	ldr	r1, [pc, #112]	; (800cd24 <ai_platform_network_create+0xfc>)
 800ccb2:	2501      	movs	r5, #1
 800ccb4:	460e      	mov	r6, r1
 800ccb6:	600d      	str	r5, [r1, #0]
 800ccb8:	6831      	ldr	r1, [r6, #0]
 800ccba:	2900      	cmp	r1, #0
 800ccbc:	d1fc      	bne.n	800ccb8 <ai_platform_network_create+0x90>
 800ccbe:	491a      	ldr	r1, [pc, #104]	; (800cd28 <ai_platform_network_create+0x100>)
 800ccc0:	4e16      	ldr	r6, [pc, #88]	; (800cd1c <ai_platform_network_create+0xf4>)
 800ccc2:	4d17      	ldr	r5, [pc, #92]	; (800cd20 <ai_platform_network_create+0xf8>)
 800ccc4:	600e      	str	r6, [r1, #0]
 800ccc6:	6809      	ldr	r1, [r1, #0]
 800ccc8:	42a9      	cmp	r1, r5
 800ccca:	d0cc      	beq.n	800cc66 <ai_platform_network_create+0x3e>
 800cccc:	e7fe      	b.n	800cccc <ai_platform_network_create+0xa4>
 800ccce:	f241 0010 	movw	r0, #4112	; 0x1010
 800ccd2:	b003      	add	sp, #12
 800ccd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccd6:	2330      	movs	r3, #48	; 0x30
 800ccd8:	2100      	movs	r1, #0
 800ccda:	2210      	movs	r2, #16
 800ccdc:	6029      	str	r1, [r5, #0]
 800ccde:	2000      	movs	r0, #0
 800cce0:	f363 0007 	bfi	r0, r3, #0, #8
 800cce4:	f362 201f 	bfi	r0, r2, #8, #24
 800cce8:	b003      	add	sp, #12
 800ccea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccec:	4b0f      	ldr	r3, [pc, #60]	; (800cd2c <ai_platform_network_create+0x104>)
 800ccee:	a802      	add	r0, sp, #8
 800ccf0:	f840 3d04 	str.w	r3, [r0, #-4]!
 800ccf4:	f001 fa82 	bl	800e1fc <ai_check_custom_types>
 800ccf8:	b110      	cbz	r0, 800cd00 <ai_platform_network_create+0xd8>
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	4613      	mov	r3, r2
 800ccfe:	e7ee      	b.n	800ccde <ai_platform_network_create+0xb6>
 800cd00:	2302      	movs	r3, #2
 800cd02:	e7e9      	b.n	800ccd8 <ai_platform_network_create+0xb0>
 800cd04:	e0002000 	.word	0xe0002000
 800cd08:	e0042000 	.word	0xe0042000
 800cd0c:	5c001000 	.word	0x5c001000
 800cd10:	a1c00100 	.word	0xa1c00100
 800cd14:	58024c08 	.word	0x58024c08
 800cd18:	58024c00 	.word	0x58024c00
 800cd1c:	f407a5c2 	.word	0xf407a5c2
 800cd20:	b5e8b5cd 	.word	0xb5e8b5cd
 800cd24:	40023008 	.word	0x40023008
 800cd28:	40023000 	.word	0x40023000
 800cd2c:	84048403 	.word	0x84048403

0800cd30 <ai_platform_network_init>:
 800cd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd32:	2800      	cmp	r0, #0
 800cd34:	d05e      	beq.n	800cdf4 <ai_platform_network_init+0xc4>
 800cd36:	4b68      	ldr	r3, [pc, #416]	; (800ced8 <ai_platform_network_init+0x1a8>)
 800cd38:	6802      	ldr	r2, [r0, #0]
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d15a      	bne.n	800cdf4 <ai_platform_network_init+0xc4>
 800cd3e:	4a67      	ldr	r2, [pc, #412]	; (800cedc <ai_platform_network_init+0x1ac>)
 800cd40:	4c67      	ldr	r4, [pc, #412]	; (800cee0 <ai_platform_network_init+0x1b0>)
 800cd42:	6813      	ldr	r3, [r2, #0]
 800cd44:	f023 0301 	bic.w	r3, r3, #1
 800cd48:	6013      	str	r3, [r2, #0]
 800cd4a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800cd4e:	6823      	ldr	r3, [r4, #0]
 800cd50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd54:	189a      	adds	r2, r3, r2
 800cd56:	2a01      	cmp	r2, #1
 800cd58:	d93d      	bls.n	800cdd6 <ai_platform_network_init+0xa6>
 800cd5a:	f240 4249 	movw	r2, #1097	; 0x449
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d039      	beq.n	800cdd6 <ai_platform_network_init+0xa6>
 800cd62:	4b60      	ldr	r3, [pc, #384]	; (800cee4 <ai_platform_network_init+0x1b4>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd6a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cd6e:	d06b      	beq.n	800ce48 <ai_platform_network_init+0x118>
 800cd70:	4605      	mov	r5, r0
 800cd72:	460c      	mov	r4, r1
 800cd74:	2900      	cmp	r1, #0
 800cd76:	f000 80a8 	beq.w	800ceca <ai_platform_network_init+0x19a>
 800cd7a:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 800cd7c:	690e      	ldr	r6, [r1, #16]
 800cd7e:	2f00      	cmp	r7, #0
 800cd80:	f000 8092 	beq.w	800cea8 <ai_platform_network_init+0x178>
 800cd84:	2e00      	cmp	r6, #0
 800cd86:	d07d      	beq.n	800ce84 <ai_platform_network_init+0x154>
 800cd88:	f104 0718 	add.w	r7, r4, #24
 800cd8c:	f105 0c18 	add.w	ip, r5, #24
 800cd90:	f105 0630 	add.w	r6, r5, #48	; 0x30
 800cd94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cd9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800cd9e:	2403      	movs	r4, #3
 800cda0:	e88c 0003 	stmia.w	ip, {r0, r1}
 800cda4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cda6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800cda8:	e897 0003 	ldmia.w	r7, {r0, r1}
 800cdac:	e886 0003 	stmia.w	r6, {r0, r1}
 800cdb0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800cdb2:	60ec      	str	r4, [r5, #12]
 800cdb4:	b16a      	cbz	r2, 800cdd2 <ai_platform_network_init+0xa2>
 800cdb6:	68d3      	ldr	r3, [r2, #12]
 800cdb8:	6095      	str	r5, [r2, #8]
 800cdba:	b153      	cbz	r3, 800cdd2 <ai_platform_network_init+0xa2>
 800cdbc:	429a      	cmp	r2, r3
 800cdbe:	d104      	bne.n	800cdca <ai_platform_network_init+0x9a>
 800cdc0:	e007      	b.n	800cdd2 <ai_platform_network_init+0xa2>
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	4613      	mov	r3, r2
 800cdc6:	d004      	beq.n	800cdd2 <ai_platform_network_init+0xa2>
 800cdc8:	b11a      	cbz	r2, 800cdd2 <ai_platform_network_init+0xa2>
 800cdca:	68da      	ldr	r2, [r3, #12]
 800cdcc:	609d      	str	r5, [r3, #8]
 800cdce:	2a00      	cmp	r2, #0
 800cdd0:	d1f7      	bne.n	800cdc2 <ai_platform_network_init+0x92>
 800cdd2:	4628      	mov	r0, r5
 800cdd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdd6:	4b44      	ldr	r3, [pc, #272]	; (800cee8 <ai_platform_network_init+0x1b8>)
 800cdd8:	2201      	movs	r2, #1
 800cdda:	461c      	mov	r4, r3
 800cddc:	601a      	str	r2, [r3, #0]
 800cdde:	6823      	ldr	r3, [r4, #0]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d1fc      	bne.n	800cdde <ai_platform_network_init+0xae>
 800cde4:	4b41      	ldr	r3, [pc, #260]	; (800ceec <ai_platform_network_init+0x1bc>)
 800cde6:	4c42      	ldr	r4, [pc, #264]	; (800cef0 <ai_platform_network_init+0x1c0>)
 800cde8:	4a42      	ldr	r2, [pc, #264]	; (800cef4 <ai_platform_network_init+0x1c4>)
 800cdea:	601c      	str	r4, [r3, #0]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d0be      	beq.n	800cd70 <ai_platform_network_init+0x40>
 800cdf2:	e7fe      	b.n	800cdf2 <ai_platform_network_init+0xc2>
 800cdf4:	4a39      	ldr	r2, [pc, #228]	; (800cedc <ai_platform_network_init+0x1ac>)
 800cdf6:	493a      	ldr	r1, [pc, #232]	; (800cee0 <ai_platform_network_init+0x1b0>)
 800cdf8:	6813      	ldr	r3, [r2, #0]
 800cdfa:	f023 0301 	bic.w	r3, r3, #1
 800cdfe:	6013      	str	r3, [r2, #0]
 800ce00:	680b      	ldr	r3, [r1, #0]
 800ce02:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800ce06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce0a:	185a      	adds	r2, r3, r1
 800ce0c:	2a01      	cmp	r2, #1
 800ce0e:	d90c      	bls.n	800ce2a <ai_platform_network_init+0xfa>
 800ce10:	f240 4249 	movw	r2, #1097	; 0x449
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d008      	beq.n	800ce2a <ai_platform_network_init+0xfa>
 800ce18:	4b32      	ldr	r3, [pc, #200]	; (800cee4 <ai_platform_network_init+0x1b4>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce20:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ce24:	d01f      	beq.n	800ce66 <ai_platform_network_init+0x136>
 800ce26:	2000      	movs	r0, #0
 800ce28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce2a:	4b2f      	ldr	r3, [pc, #188]	; (800cee8 <ai_platform_network_init+0x1b8>)
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	4619      	mov	r1, r3
 800ce30:	601a      	str	r2, [r3, #0]
 800ce32:	680b      	ldr	r3, [r1, #0]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d1fc      	bne.n	800ce32 <ai_platform_network_init+0x102>
 800ce38:	4b2c      	ldr	r3, [pc, #176]	; (800ceec <ai_platform_network_init+0x1bc>)
 800ce3a:	492d      	ldr	r1, [pc, #180]	; (800cef0 <ai_platform_network_init+0x1c0>)
 800ce3c:	4a2d      	ldr	r2, [pc, #180]	; (800cef4 <ai_platform_network_init+0x1c4>)
 800ce3e:	6019      	str	r1, [r3, #0]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d0ef      	beq.n	800ce26 <ai_platform_network_init+0xf6>
 800ce46:	e7fe      	b.n	800ce46 <ai_platform_network_init+0x116>
 800ce48:	4b2b      	ldr	r3, [pc, #172]	; (800cef8 <ai_platform_network_init+0x1c8>)
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	461c      	mov	r4, r3
 800ce4e:	601a      	str	r2, [r3, #0]
 800ce50:	6823      	ldr	r3, [r4, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d1fc      	bne.n	800ce50 <ai_platform_network_init+0x120>
 800ce56:	4b29      	ldr	r3, [pc, #164]	; (800cefc <ai_platform_network_init+0x1cc>)
 800ce58:	4c25      	ldr	r4, [pc, #148]	; (800cef0 <ai_platform_network_init+0x1c0>)
 800ce5a:	4a26      	ldr	r2, [pc, #152]	; (800cef4 <ai_platform_network_init+0x1c4>)
 800ce5c:	601c      	str	r4, [r3, #0]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d085      	beq.n	800cd70 <ai_platform_network_init+0x40>
 800ce64:	e7fe      	b.n	800ce64 <ai_platform_network_init+0x134>
 800ce66:	4b24      	ldr	r3, [pc, #144]	; (800cef8 <ai_platform_network_init+0x1c8>)
 800ce68:	2201      	movs	r2, #1
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	601a      	str	r2, [r3, #0]
 800ce6e:	680b      	ldr	r3, [r1, #0]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d1fc      	bne.n	800ce6e <ai_platform_network_init+0x13e>
 800ce74:	4b21      	ldr	r3, [pc, #132]	; (800cefc <ai_platform_network_init+0x1cc>)
 800ce76:	491e      	ldr	r1, [pc, #120]	; (800cef0 <ai_platform_network_init+0x1c0>)
 800ce78:	4a1e      	ldr	r2, [pc, #120]	; (800cef4 <ai_platform_network_init+0x1c4>)
 800ce7a:	6019      	str	r1, [r3, #0]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d0d1      	beq.n	800ce26 <ai_platform_network_init+0xf6>
 800ce82:	e7fe      	b.n	800ce82 <ai_platform_network_init+0x152>
 800ce84:	8921      	ldrh	r1, [r4, #8]
 800ce86:	88e2      	ldrh	r2, [r4, #6]
 800ce88:	68e3      	ldr	r3, [r4, #12]
 800ce8a:	fb02 f201 	mul.w	r2, r2, r1
 800ce8e:	fb03 f302 	mul.w	r3, r3, r2
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	f43f af78 	beq.w	800cd88 <ai_platform_network_init+0x58>
 800ce98:	f105 0010 	add.w	r0, r5, #16
 800ce9c:	2212      	movs	r2, #18
 800ce9e:	2110      	movs	r1, #16
 800cea0:	f000 fb8c 	bl	800d5bc <core_set_error>
 800cea4:	4630      	mov	r0, r6
 800cea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cea8:	8c09      	ldrh	r1, [r1, #32]
 800ceaa:	8be2      	ldrh	r2, [r4, #30]
 800ceac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ceae:	fb02 f201 	mul.w	r2, r2, r1
 800ceb2:	fb03 f302 	mul.w	r3, r3, r2
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	f43f af64 	beq.w	800cd84 <ai_platform_network_init+0x54>
 800cebc:	2213      	movs	r2, #19
 800cebe:	2110      	movs	r1, #16
 800cec0:	3010      	adds	r0, #16
 800cec2:	f000 fb7b 	bl	800d5bc <core_set_error>
 800cec6:	4638      	mov	r0, r7
 800cec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ceca:	2211      	movs	r2, #17
 800cecc:	2110      	movs	r1, #16
 800cece:	3010      	adds	r0, #16
 800ced0:	f000 fb74 	bl	800d5bc <core_set_error>
 800ced4:	4620      	mov	r0, r4
 800ced6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ced8:	a1c00100 	.word	0xa1c00100
 800cedc:	e0002000 	.word	0xe0002000
 800cee0:	e0042000 	.word	0xe0042000
 800cee4:	5c001000 	.word	0x5c001000
 800cee8:	40023008 	.word	0x40023008
 800ceec:	40023000 	.word	0x40023000
 800cef0:	f407a5c2 	.word	0xf407a5c2
 800cef4:	b5e8b5cd 	.word	0xb5e8b5cd
 800cef8:	58024c08 	.word	0x58024c08
 800cefc:	58024c00 	.word	0x58024c00

0800cf00 <ai_platform_network_post_init>:
 800cf00:	b538      	push	{r3, r4, r5, lr}
 800cf02:	b118      	cbz	r0, 800cf0c <ai_platform_network_post_init+0xc>
 800cf04:	4b4a      	ldr	r3, [pc, #296]	; (800d030 <ai_platform_network_post_init+0x130>)
 800cf06:	6802      	ldr	r2, [r0, #0]
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d029      	beq.n	800cf60 <ai_platform_network_post_init+0x60>
 800cf0c:	4a49      	ldr	r2, [pc, #292]	; (800d034 <ai_platform_network_post_init+0x134>)
 800cf0e:	494a      	ldr	r1, [pc, #296]	; (800d038 <ai_platform_network_post_init+0x138>)
 800cf10:	6813      	ldr	r3, [r2, #0]
 800cf12:	f023 0301 	bic.w	r3, r3, #1
 800cf16:	6013      	str	r3, [r2, #0]
 800cf18:	680b      	ldr	r3, [r1, #0]
 800cf1a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800cf1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf22:	185a      	adds	r2, r3, r1
 800cf24:	2a01      	cmp	r2, #1
 800cf26:	d90c      	bls.n	800cf42 <ai_platform_network_post_init+0x42>
 800cf28:	f240 4249 	movw	r2, #1097	; 0x449
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d008      	beq.n	800cf42 <ai_platform_network_post_init+0x42>
 800cf30:	4b42      	ldr	r3, [pc, #264]	; (800d03c <ai_platform_network_post_init+0x13c>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf38:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cf3c:	d044      	beq.n	800cfc8 <ai_platform_network_post_init+0xc8>
 800cf3e:	2000      	movs	r0, #0
 800cf40:	bd38      	pop	{r3, r4, r5, pc}
 800cf42:	4b3f      	ldr	r3, [pc, #252]	; (800d040 <ai_platform_network_post_init+0x140>)
 800cf44:	2201      	movs	r2, #1
 800cf46:	4619      	mov	r1, r3
 800cf48:	601a      	str	r2, [r3, #0]
 800cf4a:	680b      	ldr	r3, [r1, #0]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d1fc      	bne.n	800cf4a <ai_platform_network_post_init+0x4a>
 800cf50:	4b3c      	ldr	r3, [pc, #240]	; (800d044 <ai_platform_network_post_init+0x144>)
 800cf52:	493d      	ldr	r1, [pc, #244]	; (800d048 <ai_platform_network_post_init+0x148>)
 800cf54:	4a3d      	ldr	r2, [pc, #244]	; (800d04c <ai_platform_network_post_init+0x14c>)
 800cf56:	6019      	str	r1, [r3, #0]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d0ef      	beq.n	800cf3e <ai_platform_network_post_init+0x3e>
 800cf5e:	e7fe      	b.n	800cf5e <ai_platform_network_post_init+0x5e>
 800cf60:	4a34      	ldr	r2, [pc, #208]	; (800d034 <ai_platform_network_post_init+0x134>)
 800cf62:	4935      	ldr	r1, [pc, #212]	; (800d038 <ai_platform_network_post_init+0x138>)
 800cf64:	6813      	ldr	r3, [r2, #0]
 800cf66:	f023 0301 	bic.w	r3, r3, #1
 800cf6a:	6013      	str	r3, [r2, #0]
 800cf6c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800cf70:	680b      	ldr	r3, [r1, #0]
 800cf72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf76:	189a      	adds	r2, r3, r2
 800cf78:	2a01      	cmp	r2, #1
 800cf7a:	d94a      	bls.n	800d012 <ai_platform_network_post_init+0x112>
 800cf7c:	f240 4249 	movw	r2, #1097	; 0x449
 800cf80:	4293      	cmp	r3, r2
 800cf82:	d046      	beq.n	800d012 <ai_platform_network_post_init+0x112>
 800cf84:	4b2d      	ldr	r3, [pc, #180]	; (800d03c <ai_platform_network_post_init+0x13c>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf8c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cf90:	d030      	beq.n	800cff4 <ai_platform_network_post_init+0xf4>
 800cf92:	68c3      	ldr	r3, [r0, #12]
 800cf94:	4604      	mov	r4, r0
 800cf96:	f013 0502 	ands.w	r5, r3, #2
 800cf9a:	d024      	beq.n	800cfe6 <ai_platform_network_post_init+0xe6>
 800cf9c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800cf9e:	b18b      	cbz	r3, 800cfc4 <ai_platform_network_post_init+0xc4>
 800cfa0:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800cfa2:	b90d      	cbnz	r5, 800cfa8 <ai_platform_network_post_init+0xa8>
 800cfa4:	e00e      	b.n	800cfc4 <ai_platform_network_post_init+0xc4>
 800cfa6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cfa8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800cfaa:	4629      	mov	r1, r5
 800cfac:	2000      	movs	r0, #0
 800cfae:	4798      	blx	r3
 800cfb0:	68ea      	ldr	r2, [r5, #12]
 800cfb2:	1b53      	subs	r3, r2, r5
 800cfb4:	4615      	mov	r5, r2
 800cfb6:	bf18      	it	ne
 800cfb8:	2301      	movne	r3, #1
 800cfba:	2a00      	cmp	r2, #0
 800cfbc:	bf08      	it	eq
 800cfbe:	2300      	moveq	r3, #0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d1f0      	bne.n	800cfa6 <ai_platform_network_post_init+0xa6>
 800cfc4:	2001      	movs	r0, #1
 800cfc6:	bd38      	pop	{r3, r4, r5, pc}
 800cfc8:	4b21      	ldr	r3, [pc, #132]	; (800d050 <ai_platform_network_post_init+0x150>)
 800cfca:	2201      	movs	r2, #1
 800cfcc:	4619      	mov	r1, r3
 800cfce:	601a      	str	r2, [r3, #0]
 800cfd0:	680b      	ldr	r3, [r1, #0]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d1fc      	bne.n	800cfd0 <ai_platform_network_post_init+0xd0>
 800cfd6:	4b1f      	ldr	r3, [pc, #124]	; (800d054 <ai_platform_network_post_init+0x154>)
 800cfd8:	491b      	ldr	r1, [pc, #108]	; (800d048 <ai_platform_network_post_init+0x148>)
 800cfda:	4a1c      	ldr	r2, [pc, #112]	; (800d04c <ai_platform_network_post_init+0x14c>)
 800cfdc:	6019      	str	r1, [r3, #0]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	d0ac      	beq.n	800cf3e <ai_platform_network_post_init+0x3e>
 800cfe4:	e7fe      	b.n	800cfe4 <ai_platform_network_post_init+0xe4>
 800cfe6:	2210      	movs	r2, #16
 800cfe8:	2111      	movs	r1, #17
 800cfea:	3010      	adds	r0, #16
 800cfec:	f000 fae6 	bl	800d5bc <core_set_error>
 800cff0:	4628      	mov	r0, r5
 800cff2:	bd38      	pop	{r3, r4, r5, pc}
 800cff4:	4b16      	ldr	r3, [pc, #88]	; (800d050 <ai_platform_network_post_init+0x150>)
 800cff6:	2201      	movs	r2, #1
 800cff8:	4619      	mov	r1, r3
 800cffa:	601a      	str	r2, [r3, #0]
 800cffc:	680b      	ldr	r3, [r1, #0]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d1fc      	bne.n	800cffc <ai_platform_network_post_init+0xfc>
 800d002:	4b14      	ldr	r3, [pc, #80]	; (800d054 <ai_platform_network_post_init+0x154>)
 800d004:	4910      	ldr	r1, [pc, #64]	; (800d048 <ai_platform_network_post_init+0x148>)
 800d006:	4a11      	ldr	r2, [pc, #68]	; (800d04c <ai_platform_network_post_init+0x14c>)
 800d008:	6019      	str	r1, [r3, #0]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d0c0      	beq.n	800cf92 <ai_platform_network_post_init+0x92>
 800d010:	e7fe      	b.n	800d010 <ai_platform_network_post_init+0x110>
 800d012:	4b0b      	ldr	r3, [pc, #44]	; (800d040 <ai_platform_network_post_init+0x140>)
 800d014:	2201      	movs	r2, #1
 800d016:	4619      	mov	r1, r3
 800d018:	601a      	str	r2, [r3, #0]
 800d01a:	680b      	ldr	r3, [r1, #0]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d1fc      	bne.n	800d01a <ai_platform_network_post_init+0x11a>
 800d020:	4b08      	ldr	r3, [pc, #32]	; (800d044 <ai_platform_network_post_init+0x144>)
 800d022:	4909      	ldr	r1, [pc, #36]	; (800d048 <ai_platform_network_post_init+0x148>)
 800d024:	4a09      	ldr	r2, [pc, #36]	; (800d04c <ai_platform_network_post_init+0x14c>)
 800d026:	6019      	str	r1, [r3, #0]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d0b1      	beq.n	800cf92 <ai_platform_network_post_init+0x92>
 800d02e:	e7fe      	b.n	800d02e <ai_platform_network_post_init+0x12e>
 800d030:	a1c00100 	.word	0xa1c00100
 800d034:	e0002000 	.word	0xe0002000
 800d038:	e0042000 	.word	0xe0042000
 800d03c:	5c001000 	.word	0x5c001000
 800d040:	40023008 	.word	0x40023008
 800d044:	40023000 	.word	0x40023000
 800d048:	f407a5c2 	.word	0xf407a5c2
 800d04c:	b5e8b5cd 	.word	0xb5e8b5cd
 800d050:	58024c08 	.word	0x58024c08
 800d054:	58024c00 	.word	0x58024c00

0800d058 <ai_platform_network_process>:
 800d058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d05c:	4692      	mov	sl, r2
 800d05e:	b083      	sub	sp, #12
 800d060:	4604      	mov	r4, r0
 800d062:	b120      	cbz	r0, 800d06e <ai_platform_network_process+0x16>
 800d064:	4b86      	ldr	r3, [pc, #536]	; (800d280 <ai_platform_network_process+0x228>)
 800d066:	6802      	ldr	r2, [r0, #0]
 800d068:	429a      	cmp	r2, r3
 800d06a:	bf18      	it	ne
 800d06c:	2400      	movne	r4, #0
 800d06e:	4a85      	ldr	r2, [pc, #532]	; (800d284 <ai_platform_network_process+0x22c>)
 800d070:	4885      	ldr	r0, [pc, #532]	; (800d288 <ai_platform_network_process+0x230>)
 800d072:	6813      	ldr	r3, [r2, #0]
 800d074:	f023 0301 	bic.w	r3, r3, #1
 800d078:	6013      	str	r3, [r2, #0]
 800d07a:	6803      	ldr	r3, [r0, #0]
 800d07c:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 800d080:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d084:	181a      	adds	r2, r3, r0
 800d086:	2a01      	cmp	r2, #1
 800d088:	f240 80c6 	bls.w	800d218 <ai_platform_network_process+0x1c0>
 800d08c:	f240 4249 	movw	r2, #1097	; 0x449
 800d090:	4293      	cmp	r3, r2
 800d092:	f000 80c1 	beq.w	800d218 <ai_platform_network_process+0x1c0>
 800d096:	4b7d      	ldr	r3, [pc, #500]	; (800d28c <ai_platform_network_process+0x234>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d09e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d0a2:	f000 80a9 	beq.w	800d1f8 <ai_platform_network_process+0x1a0>
 800d0a6:	2c00      	cmp	r4, #0
 800d0a8:	f000 80db 	beq.w	800d262 <ai_platform_network_process+0x20a>
 800d0ac:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800d0b0:	68e0      	ldr	r0, [r4, #12]
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	f000 0003 	and.w	r0, r0, #3
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	f000 80bd 	beq.w	800d238 <ai_platform_network_process+0x1e0>
 800d0be:	2600      	movs	r6, #0
 800d0c0:	2803      	cmp	r0, #3
 800d0c2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800d0c4:	6166      	str	r6, [r4, #20]
 800d0c6:	f040 80c6 	bne.w	800d256 <ai_platform_network_process+0x1fe>
 800d0ca:	2900      	cmp	r1, #0
 800d0cc:	f000 80b7 	beq.w	800d23e <ai_platform_network_process+0x1e6>
 800d0d0:	fab5 f085 	clz	r0, r5
 800d0d4:	0940      	lsrs	r0, r0, #5
 800d0d6:	2800      	cmp	r0, #0
 800d0d8:	f040 80b1 	bne.w	800d23e <ai_platform_network_process+0x1e6>
 800d0dc:	882e      	ldrh	r6, [r5, #0]
 800d0de:	2e00      	cmp	r6, #0
 800d0e0:	f000 80ad 	beq.w	800d23e <ai_platform_network_process+0x1e6>
 800d0e4:	888f      	ldrh	r7, [r1, #4]
 800d0e6:	686e      	ldr	r6, [r5, #4]
 800d0e8:	9701      	str	r7, [sp, #4]
 800d0ea:	2e00      	cmp	r6, #0
 800d0ec:	f000 825f 	beq.w	800d5ae <ai_platform_network_process+0x556>
 800d0f0:	6836      	ldr	r6, [r6, #0]
 800d0f2:	2e00      	cmp	r6, #0
 800d0f4:	f000 825b 	beq.w	800d5ae <ai_platform_network_process+0x556>
 800d0f8:	68ab      	ldr	r3, [r5, #8]
 800d0fa:	f8d3 9000 	ldr.w	r9, [r3]
 800d0fe:	f1b9 0f00 	cmp.w	r9, #0
 800d102:	f000 809c 	beq.w	800d23e <ai_platform_network_process+0x1e6>
 800d106:	460f      	mov	r7, r1
 800d108:	4680      	mov	r8, r0
 800d10a:	e05e      	b.n	800d1ca <ai_platform_network_process+0x172>
 800d10c:	68f3      	ldr	r3, [r6, #12]
 800d10e:	68da      	ldr	r2, [r3, #12]
 800d110:	455a      	cmp	r2, fp
 800d112:	d168      	bne.n	800d1e6 <ai_platform_network_process+0x18e>
 800d114:	689a      	ldr	r2, [r3, #8]
 800d116:	4572      	cmp	r2, lr
 800d118:	d165      	bne.n	800d1e6 <ai_platform_network_process+0x18e>
 800d11a:	685b      	ldr	r3, [r3, #4]
 800d11c:	459c      	cmp	ip, r3
 800d11e:	d162      	bne.n	800d1e6 <ai_platform_network_process+0x18e>
 800d120:	6800      	ldr	r0, [r0, #0]
 800d122:	f001 f91b 	bl	800e35c <ai_array_get_byte_size>
 800d126:	68f2      	ldr	r2, [r6, #12]
 800d128:	6973      	ldr	r3, [r6, #20]
 800d12a:	68d2      	ldr	r2, [r2, #12]
 800d12c:	68db      	ldr	r3, [r3, #12]
 800d12e:	fb03 f302 	mul.w	r3, r3, r2
 800d132:	4298      	cmp	r0, r3
 800d134:	d357      	bcc.n	800d1e6 <ai_platform_network_process+0x18e>
 800d136:	69b3      	ldr	r3, [r6, #24]
 800d138:	6818      	ldr	r0, [r3, #0]
 800d13a:	f001 f8c3 	bl	800e2c4 <ai_array_to_buffer_fmt>
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	4043      	eors	r3, r0
 800d142:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800d146:	f040 8229 	bne.w	800d59c <ai_platform_network_process+0x544>
 800d14a:	693b      	ldr	r3, [r7, #16]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	f000 821d 	beq.w	800d58c <ai_platform_network_process+0x534>
 800d152:	88bb      	ldrh	r3, [r7, #4]
 800d154:	2b00      	cmp	r3, #0
 800d156:	f000 808a 	beq.w	800d26e <ai_platform_network_process+0x216>
 800d15a:	9a01      	ldr	r2, [sp, #4]
 800d15c:	68f1      	ldr	r1, [r6, #12]
 800d15e:	429a      	cmp	r2, r3
 800d160:	68c9      	ldr	r1, [r1, #12]
 800d162:	bf38      	it	cc
 800d164:	461a      	movcc	r2, r3
 800d166:	9201      	str	r2, [sp, #4]
 800d168:	6972      	ldr	r2, [r6, #20]
 800d16a:	68d3      	ldr	r3, [r2, #12]
 800d16c:	fb03 f301 	mul.w	r3, r3, r1
 800d170:	f8c9 3008 	str.w	r3, [r9, #8]
 800d174:	88ba      	ldrh	r2, [r7, #4]
 800d176:	fb03 f302 	mul.w	r3, r3, r2
 800d17a:	f8c9 300c 	str.w	r3, [r9, #12]
 800d17e:	6939      	ldr	r1, [r7, #16]
 800d180:	f8c9 1004 	str.w	r1, [r9, #4]
 800d184:	693a      	ldr	r2, [r7, #16]
 800d186:	4413      	add	r3, r2
 800d188:	f8c9 3000 	str.w	r3, [r9]
 800d18c:	69b0      	ldr	r0, [r6, #24]
 800d18e:	6803      	ldr	r3, [r0, #0]
 800d190:	009a      	lsls	r2, r3, #2
 800d192:	d408      	bmi.n	800d1a6 <ai_platform_network_process+0x14e>
 800d194:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800d198:	1a9b      	subs	r3, r3, r2
 800d19a:	4419      	add	r1, r3
 800d19c:	6081      	str	r1, [r0, #8]
 800d19e:	69b3      	ldr	r3, [r6, #24]
 800d1a0:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800d1a4:	60da      	str	r2, [r3, #12]
 800d1a6:	f108 0801 	add.w	r8, r8, #1
 800d1aa:	882b      	ldrh	r3, [r5, #0]
 800d1ac:	4598      	cmp	r8, r3
 800d1ae:	d27b      	bcs.n	800d2a8 <ai_platform_network_process+0x250>
 800d1b0:	686b      	ldr	r3, [r5, #4]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d078      	beq.n	800d2a8 <ai_platform_network_process+0x250>
 800d1b6:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 800d1ba:	2e00      	cmp	r6, #0
 800d1bc:	d074      	beq.n	800d2a8 <ai_platform_network_process+0x250>
 800d1be:	68ab      	ldr	r3, [r5, #8]
 800d1c0:	3718      	adds	r7, #24
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 800d1c8:	d039      	beq.n	800d23e <ai_platform_network_process+0x1e6>
 800d1ca:	f8b7 e008 	ldrh.w	lr, [r7, #8]
 800d1ce:	f8b7 b006 	ldrh.w	fp, [r7, #6]
 800d1d2:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800d1d6:	fb0b f30e 	mul.w	r3, fp, lr
 800d1da:	69b0      	ldr	r0, [r6, #24]
 800d1dc:	fb0c f303 	mul.w	r3, ip, r3
 800d1e0:	6841      	ldr	r1, [r0, #4]
 800d1e2:	4299      	cmp	r1, r3
 800d1e4:	d292      	bcs.n	800d10c <ai_platform_network_process+0xb4>
 800d1e6:	f104 0010 	add.w	r0, r4, #16
 800d1ea:	2218      	movs	r2, #24
 800d1ec:	2112      	movs	r1, #18
 800d1ee:	f04f 0b00 	mov.w	fp, #0
 800d1f2:	f000 f9e3 	bl	800d5bc <core_set_error>
 800d1f6:	e02a      	b.n	800d24e <ai_platform_network_process+0x1f6>
 800d1f8:	4b25      	ldr	r3, [pc, #148]	; (800d290 <ai_platform_network_process+0x238>)
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	601a      	str	r2, [r3, #0]
 800d200:	6803      	ldr	r3, [r0, #0]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d1fc      	bne.n	800d200 <ai_platform_network_process+0x1a8>
 800d206:	4b23      	ldr	r3, [pc, #140]	; (800d294 <ai_platform_network_process+0x23c>)
 800d208:	4823      	ldr	r0, [pc, #140]	; (800d298 <ai_platform_network_process+0x240>)
 800d20a:	4a24      	ldr	r2, [pc, #144]	; (800d29c <ai_platform_network_process+0x244>)
 800d20c:	6018      	str	r0, [r3, #0]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4293      	cmp	r3, r2
 800d212:	f43f af48 	beq.w	800d0a6 <ai_platform_network_process+0x4e>
 800d216:	e7fe      	b.n	800d216 <ai_platform_network_process+0x1be>
 800d218:	4b21      	ldr	r3, [pc, #132]	; (800d2a0 <ai_platform_network_process+0x248>)
 800d21a:	2201      	movs	r2, #1
 800d21c:	4618      	mov	r0, r3
 800d21e:	601a      	str	r2, [r3, #0]
 800d220:	6803      	ldr	r3, [r0, #0]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d1fc      	bne.n	800d220 <ai_platform_network_process+0x1c8>
 800d226:	4b1f      	ldr	r3, [pc, #124]	; (800d2a4 <ai_platform_network_process+0x24c>)
 800d228:	481b      	ldr	r0, [pc, #108]	; (800d298 <ai_platform_network_process+0x240>)
 800d22a:	4a1c      	ldr	r2, [pc, #112]	; (800d29c <ai_platform_network_process+0x244>)
 800d22c:	6018      	str	r0, [r3, #0]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	4293      	cmp	r3, r2
 800d232:	f43f af38 	beq.w	800d0a6 <ai_platform_network_process+0x4e>
 800d236:	e7fe      	b.n	800d236 <ai_platform_network_process+0x1de>
 800d238:	2803      	cmp	r0, #3
 800d23a:	6163      	str	r3, [r4, #20]
 800d23c:	d10b      	bne.n	800d256 <ai_platform_network_process+0x1fe>
 800d23e:	f04f 0b00 	mov.w	fp, #0
 800d242:	f104 0010 	add.w	r0, r4, #16
 800d246:	2217      	movs	r2, #23
 800d248:	2112      	movs	r1, #18
 800d24a:	f000 f9b7 	bl	800d5bc <core_set_error>
 800d24e:	4658      	mov	r0, fp
 800d250:	b003      	add	sp, #12
 800d252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d256:	f104 0010 	add.w	r0, r4, #16
 800d25a:	2230      	movs	r2, #48	; 0x30
 800d25c:	2111      	movs	r1, #17
 800d25e:	f000 f9ad 	bl	800d5bc <core_set_error>
 800d262:	f04f 0b00 	mov.w	fp, #0
 800d266:	4658      	mov	r0, fp
 800d268:	b003      	add	sp, #12
 800d26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d26e:	f104 0010 	add.w	r0, r4, #16
 800d272:	2221      	movs	r2, #33	; 0x21
 800d274:	2112      	movs	r1, #18
 800d276:	469b      	mov	fp, r3
 800d278:	f000 f9a0 	bl	800d5bc <core_set_error>
 800d27c:	e7e7      	b.n	800d24e <ai_platform_network_process+0x1f6>
 800d27e:	bf00      	nop
 800d280:	a1c00100 	.word	0xa1c00100
 800d284:	e0002000 	.word	0xe0002000
 800d288:	e0042000 	.word	0xe0042000
 800d28c:	5c001000 	.word	0x5c001000
 800d290:	58024c08 	.word	0x58024c08
 800d294:	58024c00 	.word	0x58024c00
 800d298:	f407a5c2 	.word	0xf407a5c2
 800d29c:	b5e8b5cd 	.word	0xb5e8b5cd
 800d2a0:	40023008 	.word	0x40023008
 800d2a4:	40023000 	.word	0x40023000
 800d2a8:	f1ba 0f00 	cmp.w	sl, #0
 800d2ac:	f000 808c 	beq.w	800d3c8 <ai_platform_network_process+0x370>
 800d2b0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800d2b4:	2b01      	cmp	r3, #1
 800d2b6:	f240 813b 	bls.w	800d530 <ai_platform_network_process+0x4d8>
 800d2ba:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800d2bc:	f115 0f0c 	cmn.w	r5, #12
 800d2c0:	f000 8136 	beq.w	800d530 <ai_platform_network_process+0x4d8>
 800d2c4:	89ab      	ldrh	r3, [r5, #12]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	f000 8132 	beq.w	800d530 <ai_platform_network_process+0x4d8>
 800d2cc:	4656      	mov	r6, sl
 800d2ce:	f04f 0900 	mov.w	r9, #0
 800d2d2:	9400      	str	r4, [sp, #0]
 800d2d4:	4599      	cmp	r9, r3
 800d2d6:	d274      	bcs.n	800d3c2 <ai_platform_network_process+0x36a>
 800d2d8:	692b      	ldr	r3, [r5, #16]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d071      	beq.n	800d3c2 <ai_platform_network_process+0x36a>
 800d2de:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
 800d2e2:	2f00      	cmp	r7, #0
 800d2e4:	d06d      	beq.n	800d3c2 <ai_platform_network_process+0x36a>
 800d2e6:	696b      	ldr	r3, [r5, #20]
 800d2e8:	ea4f 1409 	mov.w	r4, r9, lsl #4
 800d2ec:	f8d3 8000 	ldr.w	r8, [r3]
 800d2f0:	eb18 0a04 	adds.w	sl, r8, r4
 800d2f4:	f000 8125 	beq.w	800d542 <ai_platform_network_process+0x4ea>
 800d2f8:	f8b6 e008 	ldrh.w	lr, [r6, #8]
 800d2fc:	f8b6 b006 	ldrh.w	fp, [r6, #6]
 800d300:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 800d304:	fb0b f30e 	mul.w	r3, fp, lr
 800d308:	69b8      	ldr	r0, [r7, #24]
 800d30a:	fb0c f303 	mul.w	r3, ip, r3
 800d30e:	6841      	ldr	r1, [r0, #4]
 800d310:	4299      	cmp	r1, r3
 800d312:	f0c0 810c 	bcc.w	800d52e <ai_platform_network_process+0x4d6>
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	68da      	ldr	r2, [r3, #12]
 800d31a:	455a      	cmp	r2, fp
 800d31c:	f040 8107 	bne.w	800d52e <ai_platform_network_process+0x4d6>
 800d320:	689a      	ldr	r2, [r3, #8]
 800d322:	4572      	cmp	r2, lr
 800d324:	f040 8103 	bne.w	800d52e <ai_platform_network_process+0x4d6>
 800d328:	685b      	ldr	r3, [r3, #4]
 800d32a:	459c      	cmp	ip, r3
 800d32c:	f040 80ff 	bne.w	800d52e <ai_platform_network_process+0x4d6>
 800d330:	6800      	ldr	r0, [r0, #0]
 800d332:	f001 f813 	bl	800e35c <ai_array_get_byte_size>
 800d336:	68fa      	ldr	r2, [r7, #12]
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	68d2      	ldr	r2, [r2, #12]
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	fb03 f302 	mul.w	r3, r3, r2
 800d342:	4298      	cmp	r0, r3
 800d344:	f0c0 80f3 	bcc.w	800d52e <ai_platform_network_process+0x4d6>
 800d348:	69bb      	ldr	r3, [r7, #24]
 800d34a:	6818      	ldr	r0, [r3, #0]
 800d34c:	f000 ffba 	bl	800e2c4 <ai_array_to_buffer_fmt>
 800d350:	6833      	ldr	r3, [r6, #0]
 800d352:	4043      	eors	r3, r0
 800d354:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800d358:	f040 810e 	bne.w	800d578 <ai_platform_network_process+0x520>
 800d35c:	6933      	ldr	r3, [r6, #16]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	f000 8101 	beq.w	800d566 <ai_platform_network_process+0x50e>
 800d364:	88b3      	ldrh	r3, [r6, #4]
 800d366:	2b00      	cmp	r3, #0
 800d368:	f000 80f4 	beq.w	800d554 <ai_platform_network_process+0x4fc>
 800d36c:	9a01      	ldr	r2, [sp, #4]
 800d36e:	68f9      	ldr	r1, [r7, #12]
 800d370:	429a      	cmp	r2, r3
 800d372:	68c9      	ldr	r1, [r1, #12]
 800d374:	bf38      	it	cc
 800d376:	461a      	movcc	r2, r3
 800d378:	9201      	str	r2, [sp, #4]
 800d37a:	697a      	ldr	r2, [r7, #20]
 800d37c:	68d3      	ldr	r3, [r2, #12]
 800d37e:	fb03 f301 	mul.w	r3, r3, r1
 800d382:	f8ca 3008 	str.w	r3, [sl, #8]
 800d386:	88b2      	ldrh	r2, [r6, #4]
 800d388:	fb03 f302 	mul.w	r3, r3, r2
 800d38c:	f8ca 300c 	str.w	r3, [sl, #12]
 800d390:	6931      	ldr	r1, [r6, #16]
 800d392:	f8ca 1004 	str.w	r1, [sl, #4]
 800d396:	6932      	ldr	r2, [r6, #16]
 800d398:	4413      	add	r3, r2
 800d39a:	f848 3004 	str.w	r3, [r8, r4]
 800d39e:	69b8      	ldr	r0, [r7, #24]
 800d3a0:	6803      	ldr	r3, [r0, #0]
 800d3a2:	009b      	lsls	r3, r3, #2
 800d3a4:	d408      	bmi.n	800d3b8 <ai_platform_network_process+0x360>
 800d3a6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800d3aa:	1a9b      	subs	r3, r3, r2
 800d3ac:	4419      	add	r1, r3
 800d3ae:	6081      	str	r1, [r0, #8]
 800d3b0:	69bb      	ldr	r3, [r7, #24]
 800d3b2:	f8da 2004 	ldr.w	r2, [sl, #4]
 800d3b6:	60da      	str	r2, [r3, #12]
 800d3b8:	f109 0901 	add.w	r9, r9, #1
 800d3bc:	3618      	adds	r6, #24
 800d3be:	89ab      	ldrh	r3, [r5, #12]
 800d3c0:	e788      	b.n	800d2d4 <ai_platform_network_process+0x27c>
 800d3c2:	e9dd 4300 	ldrd	r4, r3, [sp]
 800d3c6:	82a3      	strh	r3, [r4, #20]
 800d3c8:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800d3cc:	2a00      	cmp	r2, #0
 800d3ce:	f000 80a9 	beq.w	800d524 <ai_platform_network_process+0x4cc>
 800d3d2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800d3d4:	2a01      	cmp	r2, #1
 800d3d6:	f240 80a8 	bls.w	800d52a <ai_platform_network_process+0x4d2>
 800d3da:	f105 060c 	add.w	r6, r5, #12
 800d3de:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 800d3e2:	8aa3      	ldrh	r3, [r4, #20]
 800d3e4:	455b      	cmp	r3, fp
 800d3e6:	f67f af32 	bls.w	800d24e <ai_platform_network_process+0x1f6>
 800d3ea:	9400      	str	r4, [sp, #0]
 800d3ec:	2d00      	cmp	r5, #0
 800d3ee:	d037      	beq.n	800d460 <ai_platform_network_process+0x408>
 800d3f0:	882b      	ldrh	r3, [r5, #0]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d034      	beq.n	800d460 <ai_platform_network_process+0x408>
 800d3f6:	686b      	ldr	r3, [r5, #4]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d031      	beq.n	800d460 <ai_platform_network_process+0x408>
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d02e      	beq.n	800d460 <ai_platform_network_process+0x408>
 800d402:	f04f 0800 	mov.w	r8, #0
 800d406:	e01a      	b.n	800d43e <ai_platform_network_process+0x3e6>
 800d408:	68d4      	ldr	r4, [r2, #12]
 800d40a:	1b00      	subs	r0, r0, r4
 800d40c:	4401      	add	r1, r0
 800d40e:	6091      	str	r1, [r2, #8]
 800d410:	687a      	ldr	r2, [r7, #4]
 800d412:	699b      	ldr	r3, [r3, #24]
 800d414:	60da      	str	r2, [r3, #12]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f108 0801 	add.w	r8, r8, #1
 800d41c:	68b9      	ldr	r1, [r7, #8]
 800d41e:	f85a 2009 	ldr.w	r2, [sl, r9]
 800d422:	440b      	add	r3, r1
 800d424:	4293      	cmp	r3, r2
 800d426:	d301      	bcc.n	800d42c <ai_platform_network_process+0x3d4>
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	1ad3      	subs	r3, r2, r3
 800d42c:	607b      	str	r3, [r7, #4]
 800d42e:	882b      	ldrh	r3, [r5, #0]
 800d430:	4598      	cmp	r8, r3
 800d432:	d215      	bcs.n	800d460 <ai_platform_network_process+0x408>
 800d434:	686b      	ldr	r3, [r5, #4]
 800d436:	b19b      	cbz	r3, 800d460 <ai_platform_network_process+0x408>
 800d438:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800d43c:	b183      	cbz	r3, 800d460 <ai_platform_network_process+0x408>
 800d43e:	68a9      	ldr	r1, [r5, #8]
 800d440:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800d444:	699a      	ldr	r2, [r3, #24]
 800d446:	f8d1 a000 	ldr.w	sl, [r1]
 800d44a:	6814      	ldr	r4, [r2, #0]
 800d44c:	eb0a 0709 	add.w	r7, sl, r9
 800d450:	6890      	ldr	r0, [r2, #8]
 800d452:	00a4      	lsls	r4, r4, #2
 800d454:	6879      	ldr	r1, [r7, #4]
 800d456:	d5d7      	bpl.n	800d408 <ai_platform_network_process+0x3b0>
 800d458:	68ba      	ldr	r2, [r7, #8]
 800d45a:	f000 ffd9 	bl	800e410 <memcpy>
 800d45e:	e7da      	b.n	800d416 <ai_platform_network_process+0x3be>
 800d460:	9800      	ldr	r0, [sp, #0]
 800d462:	f000 fef5 	bl	800e250 <ai_layers_forward_all>
 800d466:	2e00      	cmp	r6, #0
 800d468:	d04a      	beq.n	800d500 <ai_platform_network_process+0x4a8>
 800d46a:	8833      	ldrh	r3, [r6, #0]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d047      	beq.n	800d500 <ai_platform_network_process+0x4a8>
 800d470:	6873      	ldr	r3, [r6, #4]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d044      	beq.n	800d500 <ai_platform_network_process+0x4a8>
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d041      	beq.n	800d500 <ai_platform_network_process+0x4a8>
 800d47c:	f04f 0800 	mov.w	r8, #0
 800d480:	e019      	b.n	800d4b6 <ai_platform_network_process+0x45e>
 800d482:	f85a 2009 	ldr.w	r2, [sl, r9]
 800d486:	4291      	cmp	r1, r2
 800d488:	d301      	bcc.n	800d48e <ai_platform_network_process+0x436>
 800d48a:	68f9      	ldr	r1, [r7, #12]
 800d48c:	1a51      	subs	r1, r2, r1
 800d48e:	6079      	str	r1, [r7, #4]
 800d490:	f108 0801 	add.w	r8, r8, #1
 800d494:	6998      	ldr	r0, [r3, #24]
 800d496:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 800d49a:	1b12      	subs	r2, r2, r4
 800d49c:	440a      	add	r2, r1
 800d49e:	6082      	str	r2, [r0, #8]
 800d4a0:	687a      	ldr	r2, [r7, #4]
 800d4a2:	699b      	ldr	r3, [r3, #24]
 800d4a4:	60da      	str	r2, [r3, #12]
 800d4a6:	8833      	ldrh	r3, [r6, #0]
 800d4a8:	4598      	cmp	r8, r3
 800d4aa:	d229      	bcs.n	800d500 <ai_platform_network_process+0x4a8>
 800d4ac:	6873      	ldr	r3, [r6, #4]
 800d4ae:	b33b      	cbz	r3, 800d500 <ai_platform_network_process+0x4a8>
 800d4b0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800d4b4:	b323      	cbz	r3, 800d500 <ai_platform_network_process+0x4a8>
 800d4b6:	68b2      	ldr	r2, [r6, #8]
 800d4b8:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800d4bc:	f8d3 e018 	ldr.w	lr, [r3, #24]
 800d4c0:	f8d2 a000 	ldr.w	sl, [r2]
 800d4c4:	f8de 1000 	ldr.w	r1, [lr]
 800d4c8:	eb0a 0709 	add.w	r7, sl, r9
 800d4cc:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 800d4d0:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 800d4d4:	eb00 0102 	add.w	r1, r0, r2
 800d4d8:	d0d3      	beq.n	800d482 <ai_platform_network_process+0x42a>
 800d4da:	f8de 1008 	ldr.w	r1, [lr, #8]
 800d4de:	f000 ff97 	bl	800e410 <memcpy>
 800d4e2:	f85a 2009 	ldr.w	r2, [sl, r9]
 800d4e6:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 800d4ea:	440b      	add	r3, r1
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d301      	bcc.n	800d4f4 <ai_platform_network_process+0x49c>
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	1ad3      	subs	r3, r2, r3
 800d4f4:	607b      	str	r3, [r7, #4]
 800d4f6:	f108 0801 	add.w	r8, r8, #1
 800d4fa:	8833      	ldrh	r3, [r6, #0]
 800d4fc:	4598      	cmp	r8, r3
 800d4fe:	d3d5      	bcc.n	800d4ac <ai_platform_network_process+0x454>
 800d500:	9b00      	ldr	r3, [sp, #0]
 800d502:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 800d506:	461a      	mov	r2, r3
 800d508:	8a9b      	ldrh	r3, [r3, #20]
 800d50a:	f10b 0b01 	add.w	fp, fp, #1
 800d50e:	fa1f fb8b 	uxth.w	fp, fp
 800d512:	455b      	cmp	r3, fp
 800d514:	f8a2 b016 	strh.w	fp, [r2, #22]
 800d518:	f63f af68 	bhi.w	800d3ec <ai_platform_network_process+0x394>
 800d51c:	4658      	mov	r0, fp
 800d51e:	b003      	add	sp, #12
 800d520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d524:	4615      	mov	r5, r2
 800d526:	4616      	mov	r6, r2
 800d528:	e759      	b.n	800d3de <ai_platform_network_process+0x386>
 800d52a:	2600      	movs	r6, #0
 800d52c:	e757      	b.n	800d3de <ai_platform_network_process+0x386>
 800d52e:	9c00      	ldr	r4, [sp, #0]
 800d530:	f104 0010 	add.w	r0, r4, #16
 800d534:	2218      	movs	r2, #24
 800d536:	2113      	movs	r1, #19
 800d538:	f04f 0b00 	mov.w	fp, #0
 800d53c:	f000 f83e 	bl	800d5bc <core_set_error>
 800d540:	e685      	b.n	800d24e <ai_platform_network_process+0x1f6>
 800d542:	9c00      	ldr	r4, [sp, #0]
 800d544:	2217      	movs	r2, #23
 800d546:	2113      	movs	r1, #19
 800d548:	46d3      	mov	fp, sl
 800d54a:	f104 0010 	add.w	r0, r4, #16
 800d54e:	f000 f835 	bl	800d5bc <core_set_error>
 800d552:	e67c      	b.n	800d24e <ai_platform_network_process+0x1f6>
 800d554:	9c00      	ldr	r4, [sp, #0]
 800d556:	2221      	movs	r2, #33	; 0x21
 800d558:	2113      	movs	r1, #19
 800d55a:	469b      	mov	fp, r3
 800d55c:	f104 0010 	add.w	r0, r4, #16
 800d560:	f000 f82c 	bl	800d5bc <core_set_error>
 800d564:	e673      	b.n	800d24e <ai_platform_network_process+0x1f6>
 800d566:	9c00      	ldr	r4, [sp, #0]
 800d568:	2217      	movs	r2, #23
 800d56a:	2113      	movs	r1, #19
 800d56c:	469b      	mov	fp, r3
 800d56e:	f104 0010 	add.w	r0, r4, #16
 800d572:	f000 f823 	bl	800d5bc <core_set_error>
 800d576:	e66a      	b.n	800d24e <ai_platform_network_process+0x1f6>
 800d578:	9c00      	ldr	r4, [sp, #0]
 800d57a:	2219      	movs	r2, #25
 800d57c:	2113      	movs	r1, #19
 800d57e:	f04f 0b00 	mov.w	fp, #0
 800d582:	f104 0010 	add.w	r0, r4, #16
 800d586:	f000 f819 	bl	800d5bc <core_set_error>
 800d58a:	e660      	b.n	800d24e <ai_platform_network_process+0x1f6>
 800d58c:	f104 0010 	add.w	r0, r4, #16
 800d590:	2217      	movs	r2, #23
 800d592:	2112      	movs	r1, #18
 800d594:	469b      	mov	fp, r3
 800d596:	f000 f811 	bl	800d5bc <core_set_error>
 800d59a:	e658      	b.n	800d24e <ai_platform_network_process+0x1f6>
 800d59c:	f104 0010 	add.w	r0, r4, #16
 800d5a0:	2219      	movs	r2, #25
 800d5a2:	2112      	movs	r1, #18
 800d5a4:	f04f 0b00 	mov.w	fp, #0
 800d5a8:	f000 f808 	bl	800d5bc <core_set_error>
 800d5ac:	e64f      	b.n	800d24e <ai_platform_network_process+0x1f6>
 800d5ae:	f1ba 0f00 	cmp.w	sl, #0
 800d5b2:	f47f ae7f 	bne.w	800d2b4 <ai_platform_network_process+0x25c>
 800d5b6:	e70d      	b.n	800d3d4 <ai_platform_network_process+0x37c>

0800d5b8 <core_init>:
 800d5b8:	2001      	movs	r0, #1
 800d5ba:	4770      	bx	lr

0800d5bc <core_set_error>:
 800d5bc:	4603      	mov	r3, r0
 800d5be:	7800      	ldrb	r0, [r0, #0]
 800d5c0:	b930      	cbnz	r0, 800d5d0 <core_set_error+0x14>
 800d5c2:	7019      	strb	r1, [r3, #0]
 800d5c4:	2001      	movs	r0, #1
 800d5c6:	6819      	ldr	r1, [r3, #0]
 800d5c8:	f362 211f 	bfi	r1, r2, #8, #24
 800d5cc:	6019      	str	r1, [r3, #0]
 800d5ce:	4770      	bx	lr
 800d5d0:	2000      	movs	r0, #0
 800d5d2:	4770      	bx	lr

0800d5d4 <ai_dict8_dot_array_f32>:
 800d5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5d8:	9d06      	ldr	r5, [sp, #24]
 800d5da:	4c88      	ldr	r4, [pc, #544]	; (800d7fc <ai_dict8_dot_array_f32+0x228>)
 800d5dc:	2d07      	cmp	r5, #7
 800d5de:	442c      	add	r4, r5
 800d5e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d5e4:	f104 0620 	add.w	r6, r4, #32
 800d5e8:	d817      	bhi.n	800d61a <ai_dict8_dot_array_f32+0x46>
 800d5ea:	42b3      	cmp	r3, r6
 800d5ec:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800d800 <ai_dict8_dot_array_f32+0x22c>
 800d5f0:	d20b      	bcs.n	800d60a <ai_dict8_dot_array_f32+0x36>
 800d5f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5f6:	ecf3 7a01 	vldmia	r3!, {s15}
 800d5fa:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800d5fe:	42b3      	cmp	r3, r6
 800d600:	edd4 6a00 	vldr	s13, [r4]
 800d604:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d608:	d3f3      	bcc.n	800d5f2 <ai_dict8_dot_array_f32+0x1e>
 800d60a:	edd0 7a00 	vldr	s15, [r0]
 800d60e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d612:	ed80 7a00 	vstr	s14, [r0]
 800d616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d61a:	f001 0503 	and.w	r5, r1, #3
 800d61e:	2d02      	cmp	r5, #2
 800d620:	f000 80f0 	beq.w	800d804 <ai_dict8_dot_array_f32+0x230>
 800d624:	2d03      	cmp	r5, #3
 800d626:	f000 81ff 	beq.w	800da28 <ai_dict8_dot_array_f32+0x454>
 800d62a:	2d01      	cmp	r5, #1
 800d62c:	f000 81f0 	beq.w	800da10 <ai_dict8_dot_array_f32+0x43c>
 800d630:	42a3      	cmp	r3, r4
 800d632:	f200 81fc 	bhi.w	800da2e <ai_dict8_dot_array_f32+0x45a>
 800d636:	1ae4      	subs	r4, r4, r3
 800d638:	f101 0810 	add.w	r8, r1, #16
 800d63c:	f101 0508 	add.w	r5, r1, #8
 800d640:	f103 0720 	add.w	r7, r3, #32
 800d644:	0964      	lsrs	r4, r4, #5
 800d646:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800d800 <ai_dict8_dot_array_f32+0x22c>
 800d64a:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 800d64e:	f815 ec07 	ldrb.w	lr, [r5, #-7]
 800d652:	3508      	adds	r5, #8
 800d654:	f815 cc10 	ldrb.w	ip, [r5, #-16]
 800d658:	3720      	adds	r7, #32
 800d65a:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800d65e:	ed57 5a0f 	vldr	s11, [r7, #-60]	; 0xffffffc4
 800d662:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800d666:	ed17 6a10 	vldr	s12, [r7, #-64]	; 0xffffffc0
 800d66a:	edde 7a00 	vldr	s15, [lr]
 800d66e:	ed57 6a0e 	vldr	s13, [r7, #-56]	; 0xffffffc8
 800d672:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800d676:	eddc 5a00 	vldr	s11, [ip]
 800d67a:	f815 cc0e 	ldrb.w	ip, [r5, #-14]
 800d67e:	ed17 5a0d 	vldr	s10, [r7, #-52]	; 0xffffffcc
 800d682:	eee5 7a86 	vfma.f32	s15, s11, s12
 800d686:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800d68a:	f815 ec0c 	ldrb.w	lr, [r5, #-12]
 800d68e:	ed9c 4a00 	vldr	s8, [ip]
 800d692:	f815 cc0d 	ldrb.w	ip, [r5, #-13]
 800d696:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800d69a:	ed17 6a0c 	vldr	s12, [r7, #-48]	; 0xffffffd0
 800d69e:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800d6a2:	ed57 4a0b 	vldr	s9, [r7, #-44]	; 0xffffffd4
 800d6a6:	eee4 7a26 	vfma.f32	s15, s8, s13
 800d6aa:	ed57 5a0a 	vldr	s11, [r7, #-40]	; 0xffffffd8
 800d6ae:	ed9c 4a00 	vldr	s8, [ip]
 800d6b2:	f815 cc0b 	ldrb.w	ip, [r5, #-11]
 800d6b6:	ed57 6a09 	vldr	s13, [r7, #-36]	; 0xffffffdc
 800d6ba:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800d6be:	eee4 7a05 	vfma.f32	s15, s8, s10
 800d6c2:	ed9e 5a00 	vldr	s10, [lr]
 800d6c6:	ed9c 4a00 	vldr	s8, [ip]
 800d6ca:	f815 ec0a 	ldrb.w	lr, [r5, #-10]
 800d6ce:	f815 cc09 	ldrb.w	ip, [r5, #-9]
 800d6d2:	4545      	cmp	r5, r8
 800d6d4:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800d6d8:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800d6dc:	eee5 7a06 	vfma.f32	s15, s10, s12
 800d6e0:	ed9e 5a00 	vldr	s10, [lr]
 800d6e4:	ed9c 6a00 	vldr	s12, [ip]
 800d6e8:	eee4 7a24 	vfma.f32	s15, s8, s9
 800d6ec:	eee5 7a25 	vfma.f32	s15, s10, s11
 800d6f0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800d6f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d6f8:	d1a9      	bne.n	800d64e <ai_dict8_dot_array_f32+0x7a>
 800d6fa:	3401      	adds	r4, #1
 800d6fc:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800d700:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 800d704:	42b3      	cmp	r3, r6
 800d706:	d280      	bcs.n	800d60a <ai_dict8_dot_array_f32+0x36>
 800d708:	461c      	mov	r4, r3
 800d70a:	780d      	ldrb	r5, [r1, #0]
 800d70c:	ecf4 6a01 	vldmia	r4!, {s13}
 800d710:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800d714:	42a6      	cmp	r6, r4
 800d716:	edd5 7a00 	vldr	s15, [r5]
 800d71a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d71e:	f67f af74 	bls.w	800d60a <ai_dict8_dot_array_f32+0x36>
 800d722:	784d      	ldrb	r5, [r1, #1]
 800d724:	f103 0408 	add.w	r4, r3, #8
 800d728:	edd3 6a01 	vldr	s13, [r3, #4]
 800d72c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800d730:	42a6      	cmp	r6, r4
 800d732:	edd5 7a00 	vldr	s15, [r5]
 800d736:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d73a:	f67f af66 	bls.w	800d60a <ai_dict8_dot_array_f32+0x36>
 800d73e:	788d      	ldrb	r5, [r1, #2]
 800d740:	f103 040c 	add.w	r4, r3, #12
 800d744:	edd3 6a02 	vldr	s13, [r3, #8]
 800d748:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800d74c:	42a6      	cmp	r6, r4
 800d74e:	edd5 7a00 	vldr	s15, [r5]
 800d752:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d756:	f67f af58 	bls.w	800d60a <ai_dict8_dot_array_f32+0x36>
 800d75a:	78cd      	ldrb	r5, [r1, #3]
 800d75c:	f103 0410 	add.w	r4, r3, #16
 800d760:	edd3 6a03 	vldr	s13, [r3, #12]
 800d764:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800d768:	42a6      	cmp	r6, r4
 800d76a:	edd5 7a00 	vldr	s15, [r5]
 800d76e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d772:	f67f af4a 	bls.w	800d60a <ai_dict8_dot_array_f32+0x36>
 800d776:	790d      	ldrb	r5, [r1, #4]
 800d778:	f103 0414 	add.w	r4, r3, #20
 800d77c:	edd3 6a04 	vldr	s13, [r3, #16]
 800d780:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800d784:	42a6      	cmp	r6, r4
 800d786:	edd5 7a00 	vldr	s15, [r5]
 800d78a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d78e:	f67f af3c 	bls.w	800d60a <ai_dict8_dot_array_f32+0x36>
 800d792:	794d      	ldrb	r5, [r1, #5]
 800d794:	f103 0418 	add.w	r4, r3, #24
 800d798:	edd3 6a05 	vldr	s13, [r3, #20]
 800d79c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800d7a0:	42a6      	cmp	r6, r4
 800d7a2:	edd5 7a00 	vldr	s15, [r5]
 800d7a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d7aa:	f67f af2e 	bls.w	800d60a <ai_dict8_dot_array_f32+0x36>
 800d7ae:	798d      	ldrb	r5, [r1, #6]
 800d7b0:	f103 041c 	add.w	r4, r3, #28
 800d7b4:	edd3 6a06 	vldr	s13, [r3, #24]
 800d7b8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800d7bc:	42a6      	cmp	r6, r4
 800d7be:	edd5 7a00 	vldr	s15, [r5]
 800d7c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d7c6:	f67f af20 	bls.w	800d60a <ai_dict8_dot_array_f32+0x36>
 800d7ca:	79cd      	ldrb	r5, [r1, #7]
 800d7cc:	f103 0420 	add.w	r4, r3, #32
 800d7d0:	edd3 6a07 	vldr	s13, [r3, #28]
 800d7d4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800d7d8:	42a6      	cmp	r6, r4
 800d7da:	edd5 7a00 	vldr	s15, [r5]
 800d7de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d7e2:	f67f af12 	bls.w	800d60a <ai_dict8_dot_array_f32+0x36>
 800d7e6:	7a09      	ldrb	r1, [r1, #8]
 800d7e8:	edd3 7a08 	vldr	s15, [r3, #32]
 800d7ec:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800d7f0:	edd2 6a00 	vldr	s13, [r2]
 800d7f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d7f8:	e707      	b.n	800d60a <ai_dict8_dot_array_f32+0x36>
 800d7fa:	bf00      	nop
 800d7fc:	3ffffff8 	.word	0x3ffffff8
 800d800:	00000000 	.word	0x00000000
 800d804:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 800d800 <ai_dict8_dot_array_f32+0x22c>
 800d808:	780d      	ldrb	r5, [r1, #0]
 800d80a:	3304      	adds	r3, #4
 800d80c:	ed53 7a01 	vldr	s15, [r3, #-4]
 800d810:	3101      	adds	r1, #1
 800d812:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800d816:	edd5 6a00 	vldr	s13, [r5]
 800d81a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d81e:	780d      	ldrb	r5, [r1, #0]
 800d820:	1d1f      	adds	r7, r3, #4
 800d822:	edd3 7a00 	vldr	s15, [r3]
 800d826:	f101 0c01 	add.w	ip, r1, #1
 800d82a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800d82e:	42bc      	cmp	r4, r7
 800d830:	edd5 6a00 	vldr	s13, [r5]
 800d834:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d838:	d365      	bcc.n	800d906 <ai_dict8_dot_array_f32+0x332>
 800d83a:	3324      	adds	r3, #36	; 0x24
 800d83c:	f101 0e11 	add.w	lr, r1, #17
 800d840:	3109      	adds	r1, #9
 800d842:	eba6 0803 	sub.w	r8, r6, r3
 800d846:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800d84a:	eb0e 0ec8 	add.w	lr, lr, r8, lsl #3
 800d84e:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800d852:	3108      	adds	r1, #8
 800d854:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 800d858:	3320      	adds	r3, #32
 800d85a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800d85e:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 800d862:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800d866:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 800d86a:	edd5 7a00 	vldr	s15, [r5]
 800d86e:	ed53 6a0e 	vldr	s13, [r3, #-56]	; 0xffffffc8
 800d872:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800d876:	edd4 5a00 	vldr	s11, [r4]
 800d87a:	f811 4c0e 	ldrb.w	r4, [r1, #-14]
 800d87e:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 800d882:	eee5 7a86 	vfma.f32	s15, s11, s12
 800d886:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800d88a:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800d88e:	ed94 4a00 	vldr	s8, [r4]
 800d892:	f811 4c0d 	ldrb.w	r4, [r1, #-13]
 800d896:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800d89a:	ed13 6a0c 	vldr	s12, [r3, #-48]	; 0xffffffd0
 800d89e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800d8a2:	ed53 4a0b 	vldr	s9, [r3, #-44]	; 0xffffffd4
 800d8a6:	eee4 7a26 	vfma.f32	s15, s8, s13
 800d8aa:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 800d8ae:	ed94 4a00 	vldr	s8, [r4]
 800d8b2:	f811 4c0b 	ldrb.w	r4, [r1, #-11]
 800d8b6:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 800d8ba:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800d8be:	eee4 7a05 	vfma.f32	s15, s8, s10
 800d8c2:	ed95 5a00 	vldr	s10, [r5]
 800d8c6:	ed94 4a00 	vldr	s8, [r4]
 800d8ca:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800d8ce:	f811 4c09 	ldrb.w	r4, [r1, #-9]
 800d8d2:	458e      	cmp	lr, r1
 800d8d4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800d8d8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800d8dc:	eee5 7a06 	vfma.f32	s15, s10, s12
 800d8e0:	ed95 5a00 	vldr	s10, [r5]
 800d8e4:	ed94 6a00 	vldr	s12, [r4]
 800d8e8:	eee4 7a24 	vfma.f32	s15, s8, s9
 800d8ec:	eee5 7a25 	vfma.f32	s15, s10, s11
 800d8f0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800d8f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d8f8:	d1a9      	bne.n	800d84e <ai_dict8_dot_array_f32+0x27a>
 800d8fa:	f108 0801 	add.w	r8, r8, #1
 800d8fe:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 800d902:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 800d906:	42b7      	cmp	r7, r6
 800d908:	f4bf ae7f 	bcs.w	800d60a <ai_dict8_dot_array_f32+0x36>
 800d90c:	463b      	mov	r3, r7
 800d90e:	f89c 1000 	ldrb.w	r1, [ip]
 800d912:	ecf3 6a01 	vldmia	r3!, {s13}
 800d916:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800d91a:	429e      	cmp	r6, r3
 800d91c:	edd1 7a00 	vldr	s15, [r1]
 800d920:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d924:	f67f ae71 	bls.w	800d60a <ai_dict8_dot_array_f32+0x36>
 800d928:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800d92c:	f107 0308 	add.w	r3, r7, #8
 800d930:	edd7 6a01 	vldr	s13, [r7, #4]
 800d934:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800d938:	429e      	cmp	r6, r3
 800d93a:	edd1 7a00 	vldr	s15, [r1]
 800d93e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d942:	f67f ae62 	bls.w	800d60a <ai_dict8_dot_array_f32+0x36>
 800d946:	f89c 1002 	ldrb.w	r1, [ip, #2]
 800d94a:	f107 030c 	add.w	r3, r7, #12
 800d94e:	edd7 6a02 	vldr	s13, [r7, #8]
 800d952:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800d956:	429e      	cmp	r6, r3
 800d958:	edd1 7a00 	vldr	s15, [r1]
 800d95c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d960:	f67f ae53 	bls.w	800d60a <ai_dict8_dot_array_f32+0x36>
 800d964:	f89c 1003 	ldrb.w	r1, [ip, #3]
 800d968:	f107 0310 	add.w	r3, r7, #16
 800d96c:	edd7 6a03 	vldr	s13, [r7, #12]
 800d970:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800d974:	429e      	cmp	r6, r3
 800d976:	edd1 7a00 	vldr	s15, [r1]
 800d97a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d97e:	f67f ae44 	bls.w	800d60a <ai_dict8_dot_array_f32+0x36>
 800d982:	f89c 1004 	ldrb.w	r1, [ip, #4]
 800d986:	f107 0314 	add.w	r3, r7, #20
 800d98a:	edd7 6a04 	vldr	s13, [r7, #16]
 800d98e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800d992:	429e      	cmp	r6, r3
 800d994:	edd1 7a00 	vldr	s15, [r1]
 800d998:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d99c:	f67f ae35 	bls.w	800d60a <ai_dict8_dot_array_f32+0x36>
 800d9a0:	f89c 1005 	ldrb.w	r1, [ip, #5]
 800d9a4:	f107 0318 	add.w	r3, r7, #24
 800d9a8:	edd7 6a05 	vldr	s13, [r7, #20]
 800d9ac:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800d9b0:	429e      	cmp	r6, r3
 800d9b2:	edd1 7a00 	vldr	s15, [r1]
 800d9b6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d9ba:	f67f ae26 	bls.w	800d60a <ai_dict8_dot_array_f32+0x36>
 800d9be:	f89c 1006 	ldrb.w	r1, [ip, #6]
 800d9c2:	f107 031c 	add.w	r3, r7, #28
 800d9c6:	edd7 6a06 	vldr	s13, [r7, #24]
 800d9ca:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800d9ce:	429e      	cmp	r6, r3
 800d9d0:	edd1 7a00 	vldr	s15, [r1]
 800d9d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d9d8:	f67f ae17 	bls.w	800d60a <ai_dict8_dot_array_f32+0x36>
 800d9dc:	f89c 1007 	ldrb.w	r1, [ip, #7]
 800d9e0:	f107 0320 	add.w	r3, r7, #32
 800d9e4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d9e8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800d9ec:	429e      	cmp	r6, r3
 800d9ee:	edd1 7a00 	vldr	s15, [r1]
 800d9f2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d9f6:	f67f ae08 	bls.w	800d60a <ai_dict8_dot_array_f32+0x36>
 800d9fa:	f89c 3008 	ldrb.w	r3, [ip, #8]
 800d9fe:	edd7 7a08 	vldr	s15, [r7, #32]
 800da02:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800da06:	edd2 6a00 	vldr	s13, [r2]
 800da0a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800da0e:	e5fc      	b.n	800d60a <ai_dict8_dot_array_f32+0x36>
 800da10:	780d      	ldrb	r5, [r1, #0]
 800da12:	3304      	adds	r3, #4
 800da14:	ed53 7a01 	vldr	s15, [r3, #-4]
 800da18:	3101      	adds	r1, #1
 800da1a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800da1e:	ed95 7a00 	vldr	s14, [r5]
 800da22:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da26:	e6ef      	b.n	800d808 <ai_dict8_dot_array_f32+0x234>
 800da28:	ed1f 7a8b 	vldr	s14, [pc, #-556]	; 800d800 <ai_dict8_dot_array_f32+0x22c>
 800da2c:	e6f7      	b.n	800d81e <ai_dict8_dot_array_f32+0x24a>
 800da2e:	ed1f 7a8c 	vldr	s14, [pc, #-560]	; 800d800 <ai_dict8_dot_array_f32+0x22c>
 800da32:	e667      	b.n	800d704 <ai_dict8_dot_array_f32+0x130>

0800da34 <ai_dict4_dot_array_f32>:
 800da34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da38:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800da3a:	f027 0c01 	bic.w	ip, r7, #1
 800da3e:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800da42:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800da46:	f000 80ad 	beq.w	800dba4 <ai_dict4_dot_array_f32+0x170>
 800da4a:	1d0d      	adds	r5, r1, #4
 800da4c:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800da50:	f103 0420 	add.w	r4, r3, #32
 800da54:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800dbac <ai_dict4_dot_array_f32+0x178>
 800da58:	eb05 0e09 	add.w	lr, r5, r9
 800da5c:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 800da60:	3504      	adds	r5, #4
 800da62:	ed14 5a07 	vldr	s10, [r4, #-28]	; 0xffffffe4
 800da66:	3420      	adds	r4, #32
 800da68:	f006 0a0f 	and.w	sl, r6, #15
 800da6c:	0936      	lsrs	r6, r6, #4
 800da6e:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 800da72:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800da76:	ed14 4a0e 	vldr	s8, [r4, #-56]	; 0xffffffc8
 800da7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800da7e:	ed14 6a0d 	vldr	s12, [r4, #-52]	; 0xffffffcc
 800da82:	edda 7a00 	vldr	s15, [sl]
 800da86:	edd6 5a00 	vldr	s11, [r6]
 800da8a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800da8e:	f815 6c07 	ldrb.w	r6, [r5, #-7]
 800da92:	ed54 3a0c 	vldr	s7, [r4, #-48]	; 0xffffffd0
 800da96:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800da9a:	f006 060f 	and.w	r6, r6, #15
 800da9e:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800daa2:	ed54 4a0b 	vldr	s9, [r4, #-44]	; 0xffffffd4
 800daa6:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800daaa:	ed54 5a0a 	vldr	s11, [r4, #-40]	; 0xffffffd8
 800daae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dab2:	ed54 6a09 	vldr	s13, [r4, #-36]	; 0xffffffdc
 800dab6:	ed9a 3a00 	vldr	s6, [sl]
 800daba:	ed96 5a00 	vldr	s10, [r6]
 800dabe:	f815 ac06 	ldrb.w	sl, [r5, #-6]
 800dac2:	eee3 7a04 	vfma.f32	s15, s6, s8
 800dac6:	f815 6c05 	ldrb.w	r6, [r5, #-5]
 800daca:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 800dace:	f00a 0a0f 	and.w	sl, sl, #15
 800dad2:	45ae      	cmp	lr, r5
 800dad4:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800dad8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800dadc:	ed9b 3a00 	vldr	s6, [fp]
 800dae0:	ea4f 1b16 	mov.w	fp, r6, lsr #4
 800dae4:	eee5 7a06 	vfma.f32	s15, s10, s12
 800dae8:	ed9a 4a00 	vldr	s8, [sl]
 800daec:	eb02 0a8b 	add.w	sl, r2, fp, lsl #2
 800daf0:	f006 060f 	and.w	r6, r6, #15
 800daf4:	ed9a 5a00 	vldr	s10, [sl]
 800daf8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dafc:	ed96 6a00 	vldr	s12, [r6]
 800db00:	eee3 7a23 	vfma.f32	s15, s6, s7
 800db04:	eee4 7a24 	vfma.f32	s15, s8, s9
 800db08:	eee5 7a25 	vfma.f32	s15, s10, s11
 800db0c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800db10:	ee37 7a27 	vadd.f32	s14, s14, s15
 800db14:	d1a2      	bne.n	800da5c <ai_dict4_dot_array_f32+0x28>
 800db16:	4449      	add	r1, r9
 800db18:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800db1c:	459c      	cmp	ip, r3
 800db1e:	d92d      	bls.n	800db7c <ai_dict4_dot_array_f32+0x148>
 800db20:	f10c 0c07 	add.w	ip, ip, #7
 800db24:	f103 0508 	add.w	r5, r3, #8
 800db28:	f103 0810 	add.w	r8, r3, #16
 800db2c:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 800db30:	ebac 0c05 	sub.w	ip, ip, r5
 800db34:	f02c 0407 	bic.w	r4, ip, #7
 800db38:	44a0      	add	r8, r4
 800db3a:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800db3e:	3508      	adds	r5, #8
 800db40:	ed55 5a03 	vldr	s11, [r5, #-12]
 800db44:	f004 060f 	and.w	r6, r4, #15
 800db48:	0924      	lsrs	r4, r4, #4
 800db4a:	ed55 6a04 	vldr	s13, [r5, #-16]
 800db4e:	45a8      	cmp	r8, r5
 800db50:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800db54:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800db58:	edd6 7a00 	vldr	s15, [r6]
 800db5c:	ed94 6a00 	vldr	s12, [r4]
 800db60:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800db64:	eee6 7a26 	vfma.f32	s15, s12, s13
 800db68:	ee37 7a27 	vadd.f32	s14, s14, s15
 800db6c:	d1e5      	bne.n	800db3a <ai_dict4_dot_array_f32+0x106>
 800db6e:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800db72:	f10c 0c01 	add.w	ip, ip, #1
 800db76:	4461      	add	r1, ip
 800db78:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800db7c:	07fc      	lsls	r4, r7, #31
 800db7e:	d509      	bpl.n	800db94 <ai_dict4_dot_array_f32+0x160>
 800db80:	7809      	ldrb	r1, [r1, #0]
 800db82:	edd3 7a00 	vldr	s15, [r3]
 800db86:	090b      	lsrs	r3, r1, #4
 800db88:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800db8c:	edd2 6a00 	vldr	s13, [r2]
 800db90:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800db94:	edd0 7a00 	vldr	s15, [r0]
 800db98:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db9c:	ed80 7a00 	vstr	s14, [r0]
 800dba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dba4:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800dbac <ai_dict4_dot_array_f32+0x178>
 800dba8:	e7b8      	b.n	800db1c <ai_dict4_dot_array_f32+0xe8>
 800dbaa:	bf00      	nop
 800dbac:	00000000 	.word	0x00000000

0800dbb0 <forward_dense>:
 800dbb0:	6942      	ldr	r2, [r0, #20]
 800dbb2:	8813      	ldrh	r3, [r2, #0]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	f000 81c8 	beq.w	800df4a <forward_dense+0x39a>
 800dbba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbbe:	ed2d 8b08 	vpush	{d8-d11}
 800dbc2:	6851      	ldr	r1, [r2, #4]
 800dbc4:	b091      	sub	sp, #68	; 0x44
 800dbc6:	684d      	ldr	r5, [r1, #4]
 800dbc8:	b105      	cbz	r5, 800dbcc <forward_dense+0x1c>
 800dbca:	682d      	ldr	r5, [r5, #0]
 800dbcc:	2b01      	cmp	r3, #1
 800dbce:	f240 81b9 	bls.w	800df44 <forward_dense+0x394>
 800dbd2:	690a      	ldr	r2, [r1, #16]
 800dbd4:	b102      	cbz	r2, 800dbd8 <forward_dense+0x28>
 800dbd6:	6812      	ldr	r2, [r2, #0]
 800dbd8:	2b02      	cmp	r3, #2
 800dbda:	f000 81b8 	beq.w	800df4e <forward_dense+0x39e>
 800dbde:	69cb      	ldr	r3, [r1, #28]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	f000 8209 	beq.w	800dff8 <forward_dense+0x448>
 800dbe6:	6818      	ldr	r0, [r3, #0]
 800dbe8:	9008      	str	r0, [sp, #32]
 800dbea:	f111 0018 	adds.w	r0, r1, #24
 800dbee:	f000 81dc 	beq.w	800dfaa <forward_dense+0x3fa>
 800dbf2:	8b09      	ldrh	r1, [r1, #24]
 800dbf4:	2901      	cmp	r1, #1
 800dbf6:	f240 81fc 	bls.w	800dff2 <forward_dense+0x442>
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	f000 81d7 	beq.w	800dfae <forward_dense+0x3fe>
 800dc00:	685b      	ldr	r3, [r3, #4]
 800dc02:	9306      	str	r3, [sp, #24]
 800dc04:	9b08      	ldr	r3, [sp, #32]
 800dc06:	68d6      	ldr	r6, [r2, #12]
 800dc08:	699b      	ldr	r3, [r3, #24]
 800dc0a:	68b0      	ldr	r0, [r6, #8]
 800dc0c:	681f      	ldr	r7, [r3, #0]
 800dc0e:	68f4      	ldr	r4, [r6, #12]
 800dc10:	f3c7 1ec6 	ubfx	lr, r7, #7, #7
 800dc14:	f3c7 5c41 	ubfx	ip, r7, #21, #2
 800dc18:	f3c7 4743 	ubfx	r7, r7, #17, #4
 800dc1c:	fb04 f000 	mul.w	r0, r4, r0
 800dc20:	fa4e f10c 	asr.w	r1, lr, ip
 800dc24:	2f04      	cmp	r7, #4
 800dc26:	9007      	str	r0, [sp, #28]
 800dc28:	910b      	str	r1, [sp, #44]	; 0x2c
 800dc2a:	68e9      	ldr	r1, [r5, #12]
 800dc2c:	6870      	ldr	r0, [r6, #4]
 800dc2e:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800dc32:	f000 81db 	beq.w	800dfec <forward_dense+0x43c>
 800dc36:	2f08      	cmp	r7, #8
 800dc38:	f000 81d8 	beq.w	800dfec <forward_dense+0x43c>
 800dc3c:	f04f 0a00 	mov.w	sl, #0
 800dc40:	6992      	ldr	r2, [r2, #24]
 800dc42:	0080      	lsls	r0, r0, #2
 800dc44:	69a9      	ldr	r1, [r5, #24]
 800dc46:	6894      	ldr	r4, [r2, #8]
 800dc48:	9a08      	ldr	r2, [sp, #32]
 800dc4a:	9009      	str	r0, [sp, #36]	; 0x24
 800dc4c:	1826      	adds	r6, r4, r0
 800dc4e:	6952      	ldr	r2, [r2, #20]
 800dc50:	9404      	str	r4, [sp, #16]
 800dc52:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800dc56:	9a07      	ldr	r2, [sp, #28]
 800dc58:	688f      	ldr	r7, [r1, #8]
 800dc5a:	2a00      	cmp	r2, #0
 800dc5c:	f000 81c1 	beq.w	800dfe2 <forward_dense+0x432>
 800dc60:	f1a8 0210 	sub.w	r2, r8, #16
 800dc64:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800dc68:	689d      	ldr	r5, [r3, #8]
 800dc6a:	0912      	lsrs	r2, r2, #4
 800dc6c:	910a      	str	r1, [sp, #40]	; 0x28
 800dc6e:	2100      	movs	r1, #0
 800dc70:	9b06      	ldr	r3, [sp, #24]
 800dc72:	3201      	adds	r2, #1
 800dc74:	eddf 2acf 	vldr	s5, [pc, #828]	; 800dfb4 <forward_dense+0x404>
 800dc78:	9105      	str	r1, [sp, #20]
 800dc7a:	f008 010f 	and.w	r1, r8, #15
 800dc7e:	0192      	lsls	r2, r2, #6
 800dc80:	910d      	str	r1, [sp, #52]	; 0x34
 800dc82:	920c      	str	r2, [sp, #48]	; 0x30
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d042      	beq.n	800dd0e <forward_dense+0x15e>
 800dc88:	699b      	ldr	r3, [r3, #24]
 800dc8a:	689c      	ldr	r4, [r3, #8]
 800dc8c:	9b04      	ldr	r3, [sp, #16]
 800dc8e:	f1ba 0f00 	cmp.w	sl, #0
 800dc92:	d041      	beq.n	800dd18 <forward_dense+0x168>
 800dc94:	42b3      	cmp	r3, r6
 800dc96:	d229      	bcs.n	800dcec <forward_dense+0x13c>
 800dc98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dc9a:	469b      	mov	fp, r3
 800dc9c:	ab0f      	add	r3, sp, #60	; 0x3c
 800dc9e:	2a04      	cmp	r2, #4
 800dca0:	9303      	str	r3, [sp, #12]
 800dca2:	4633      	mov	r3, r6
 800dca4:	4646      	mov	r6, r8
 800dca6:	4698      	mov	r8, r3
 800dca8:	f000 8154 	beq.w	800df54 <forward_dense+0x3a4>
 800dcac:	2c00      	cmp	r4, #0
 800dcae:	f000 8183 	beq.w	800dfb8 <forward_dense+0x408>
 800dcb2:	f8d4 c000 	ldr.w	ip, [r4]
 800dcb6:	463b      	mov	r3, r7
 800dcb8:	4629      	mov	r1, r5
 800dcba:	9600      	str	r6, [sp, #0]
 800dcbc:	4652      	mov	r2, sl
 800dcbe:	9803      	ldr	r0, [sp, #12]
 800dcc0:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800dcc4:	f7ff fc86 	bl	800d5d4 <ai_dict8_dot_array_f32>
 800dcc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dcca:	3404      	adds	r4, #4
 800dccc:	444d      	add	r5, r9
 800dcce:	f84b 3b04 	str.w	r3, [fp], #4
 800dcd2:	45c3      	cmp	fp, r8
 800dcd4:	d3ea      	bcc.n	800dcac <forward_dense+0xfc>
 800dcd6:	4643      	mov	r3, r8
 800dcd8:	46b0      	mov	r8, r6
 800dcda:	461e      	mov	r6, r3
 800dcdc:	9a04      	ldr	r2, [sp, #16]
 800dcde:	43d3      	mvns	r3, r2
 800dce0:	4433      	add	r3, r6
 800dce2:	f023 0303 	bic.w	r3, r3, #3
 800dce6:	3304      	adds	r3, #4
 800dce8:	18d3      	adds	r3, r2, r3
 800dcea:	9304      	str	r3, [sp, #16]
 800dcec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dcee:	9b05      	ldr	r3, [sp, #20]
 800dcf0:	4417      	add	r7, r2
 800dcf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcf4:	3301      	adds	r3, #1
 800dcf6:	4416      	add	r6, r2
 800dcf8:	9a07      	ldr	r2, [sp, #28]
 800dcfa:	9305      	str	r3, [sp, #20]
 800dcfc:	4293      	cmp	r3, r2
 800dcfe:	f000 8170 	beq.w	800dfe2 <forward_dense+0x432>
 800dd02:	9b08      	ldr	r3, [sp, #32]
 800dd04:	699b      	ldr	r3, [r3, #24]
 800dd06:	689d      	ldr	r5, [r3, #8]
 800dd08:	9b06      	ldr	r3, [sp, #24]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d1bc      	bne.n	800dc88 <forward_dense+0xd8>
 800dd0e:	461c      	mov	r4, r3
 800dd10:	9b04      	ldr	r3, [sp, #16]
 800dd12:	f1ba 0f00 	cmp.w	sl, #0
 800dd16:	d1bd      	bne.n	800dc94 <forward_dense+0xe4>
 800dd18:	42b3      	cmp	r3, r6
 800dd1a:	d2e7      	bcs.n	800dcec <forward_dense+0x13c>
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd20:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800dd24:	eb07 0c03 	add.w	ip, r7, r3
 800dd28:	469e      	mov	lr, r3
 800dd2a:	2c00      	cmp	r4, #0
 800dd2c:	f000 80fe 	beq.w	800df2c <forward_dense+0x37c>
 800dd30:	f1b8 0f0f 	cmp.w	r8, #15
 800dd34:	ed94 6a00 	vldr	s12, [r4]
 800dd38:	f104 0404 	add.w	r4, r4, #4
 800dd3c:	f240 80fc 	bls.w	800df38 <forward_dense+0x388>
 800dd40:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800dd44:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800dd48:	4641      	mov	r1, r8
 800dd4a:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800dfb4 <forward_dense+0x404>
 800dd4e:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 800dd52:	3910      	subs	r1, #16
 800dd54:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 800dd58:	3240      	adds	r2, #64	; 0x40
 800dd5a:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 800dd5e:	290f      	cmp	r1, #15
 800dd60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd64:	ed12 7a20 	vldr	s14, [r2, #-128]	; 0xffffff80
 800dd68:	ed12 2a1e 	vldr	s4, [r2, #-120]	; 0xffffff88
 800dd6c:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800dd70:	ed13 3a1e 	vldr	s6, [r3, #-120]	; 0xffffff88
 800dd74:	eee5 7a87 	vfma.f32	s15, s11, s14
 800dd78:	ed52 3a1d 	vldr	s7, [r2, #-116]	; 0xffffff8c
 800dd7c:	ed13 4a1d 	vldr	s8, [r3, #-116]	; 0xffffff8c
 800dd80:	ed52 4a1c 	vldr	s9, [r2, #-112]	; 0xffffff90
 800dd84:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 800dd88:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 800dd8c:	ed12 7a1b 	vldr	s14, [r2, #-108]	; 0xffffff94
 800dd90:	eee2 7a03 	vfma.f32	s15, s4, s6
 800dd94:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 800dd98:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 800dd9c:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 800dda0:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 800dda4:	ed53 9a18 	vldr	s19, [r3, #-96]	; 0xffffffa0
 800dda8:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 800ddac:	eee3 7a84 	vfma.f32	s15, s7, s8
 800ddb0:	ed53 8a17 	vldr	s17, [r3, #-92]	; 0xffffffa4
 800ddb4:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 800ddb8:	ed13 0a16 	vldr	s0, [r3, #-88]	; 0xffffffa8
 800ddbc:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 800ddc0:	ed12 1a15 	vldr	s2, [r2, #-84]	; 0xffffffac
 800ddc4:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 800ddc8:	eee4 7a85 	vfma.f32	s15, s9, s10
 800ddcc:	ed13 2a14 	vldr	s4, [r3, #-80]	; 0xffffffb0
 800ddd0:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800ddd4:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 800ddd8:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 800dddc:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 800dde0:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 800dde4:	eee5 7a87 	vfma.f32	s15, s11, s14
 800dde8:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 800ddec:	ed12 7a11 	vldr	s14, [r2, #-68]	; 0xffffffbc
 800ddf0:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800ddf4:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800ddf8:	eee9 7a89 	vfma.f32	s15, s19, s18
 800ddfc:	eee8 7a88 	vfma.f32	s15, s17, s16
 800de00:	eee0 7a20 	vfma.f32	s15, s0, s1
 800de04:	eee1 7a21 	vfma.f32	s15, s2, s3
 800de08:	eee2 7a03 	vfma.f32	s15, s4, s6
 800de0c:	eee3 7a84 	vfma.f32	s15, s7, s8
 800de10:	eee4 7a85 	vfma.f32	s15, s9, s10
 800de14:	eee5 7a87 	vfma.f32	s15, s11, s14
 800de18:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800de1c:	d897      	bhi.n	800dd4e <forward_dense+0x19e>
 800de1e:	eb05 010e 	add.w	r1, r5, lr
 800de22:	465b      	mov	r3, fp
 800de24:	4662      	mov	r2, ip
 800de26:	2b00      	cmp	r3, #0
 800de28:	d075      	beq.n	800df16 <forward_dense+0x366>
 800de2a:	ed91 7a00 	vldr	s14, [r1]
 800de2e:	2b01      	cmp	r3, #1
 800de30:	edd2 7a00 	vldr	s15, [r2]
 800de34:	eee7 6a27 	vfma.f32	s13, s14, s15
 800de38:	d06d      	beq.n	800df16 <forward_dense+0x366>
 800de3a:	ed91 7a01 	vldr	s14, [r1, #4]
 800de3e:	2b02      	cmp	r3, #2
 800de40:	edd2 7a01 	vldr	s15, [r2, #4]
 800de44:	eee7 6a27 	vfma.f32	s13, s14, s15
 800de48:	d065      	beq.n	800df16 <forward_dense+0x366>
 800de4a:	ed91 7a02 	vldr	s14, [r1, #8]
 800de4e:	2b03      	cmp	r3, #3
 800de50:	edd2 7a02 	vldr	s15, [r2, #8]
 800de54:	eee7 6a27 	vfma.f32	s13, s14, s15
 800de58:	d05d      	beq.n	800df16 <forward_dense+0x366>
 800de5a:	ed91 7a03 	vldr	s14, [r1, #12]
 800de5e:	2b04      	cmp	r3, #4
 800de60:	edd2 7a03 	vldr	s15, [r2, #12]
 800de64:	eee7 6a27 	vfma.f32	s13, s14, s15
 800de68:	d055      	beq.n	800df16 <forward_dense+0x366>
 800de6a:	ed91 7a04 	vldr	s14, [r1, #16]
 800de6e:	2b05      	cmp	r3, #5
 800de70:	edd2 7a04 	vldr	s15, [r2, #16]
 800de74:	eee7 6a27 	vfma.f32	s13, s14, s15
 800de78:	d04d      	beq.n	800df16 <forward_dense+0x366>
 800de7a:	ed91 7a05 	vldr	s14, [r1, #20]
 800de7e:	2b06      	cmp	r3, #6
 800de80:	edd2 7a05 	vldr	s15, [r2, #20]
 800de84:	eee7 6a27 	vfma.f32	s13, s14, s15
 800de88:	d045      	beq.n	800df16 <forward_dense+0x366>
 800de8a:	ed91 7a06 	vldr	s14, [r1, #24]
 800de8e:	2b07      	cmp	r3, #7
 800de90:	edd2 7a06 	vldr	s15, [r2, #24]
 800de94:	eee7 6a27 	vfma.f32	s13, s14, s15
 800de98:	d03d      	beq.n	800df16 <forward_dense+0x366>
 800de9a:	ed91 7a07 	vldr	s14, [r1, #28]
 800de9e:	2b08      	cmp	r3, #8
 800dea0:	edd2 7a07 	vldr	s15, [r2, #28]
 800dea4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800dea8:	d035      	beq.n	800df16 <forward_dense+0x366>
 800deaa:	ed91 7a08 	vldr	s14, [r1, #32]
 800deae:	2b09      	cmp	r3, #9
 800deb0:	edd2 7a08 	vldr	s15, [r2, #32]
 800deb4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800deb8:	d02d      	beq.n	800df16 <forward_dense+0x366>
 800deba:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800debe:	2b0a      	cmp	r3, #10
 800dec0:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800dec4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800dec8:	d025      	beq.n	800df16 <forward_dense+0x366>
 800deca:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800dece:	2b0b      	cmp	r3, #11
 800ded0:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800ded4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ded8:	d01d      	beq.n	800df16 <forward_dense+0x366>
 800deda:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800dede:	2b0c      	cmp	r3, #12
 800dee0:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800dee4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800dee8:	d015      	beq.n	800df16 <forward_dense+0x366>
 800deea:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800deee:	2b0d      	cmp	r3, #13
 800def0:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800def4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800def8:	d00d      	beq.n	800df16 <forward_dense+0x366>
 800defa:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800defe:	2b0e      	cmp	r3, #14
 800df00:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800df04:	eee7 6a27 	vfma.f32	s13, s14, s15
 800df08:	d005      	beq.n	800df16 <forward_dense+0x366>
 800df0a:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800df0e:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800df12:	eee7 6a27 	vfma.f32	s13, s14, s15
 800df16:	ee76 6a26 	vadd.f32	s13, s12, s13
 800df1a:	444d      	add	r5, r9
 800df1c:	ece0 6a01 	vstmia	r0!, {s13}
 800df20:	42b0      	cmp	r0, r6
 800df22:	f4bf aedb 	bcs.w	800dcdc <forward_dense+0x12c>
 800df26:	2c00      	cmp	r4, #0
 800df28:	f47f af02 	bne.w	800dd30 <forward_dense+0x180>
 800df2c:	f1b8 0f0f 	cmp.w	r8, #15
 800df30:	eeb0 6a62 	vmov.f32	s12, s5
 800df34:	f63f af04 	bhi.w	800dd40 <forward_dense+0x190>
 800df38:	4643      	mov	r3, r8
 800df3a:	4629      	mov	r1, r5
 800df3c:	463a      	mov	r2, r7
 800df3e:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800dfb4 <forward_dense+0x404>
 800df42:	e770      	b.n	800de26 <forward_dense+0x276>
 800df44:	2300      	movs	r3, #0
 800df46:	685b      	ldr	r3, [r3, #4]
 800df48:	deff      	udf	#255	; 0xff
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	deff      	udf	#255	; 0xff
 800df4e:	2300      	movs	r3, #0
 800df50:	685b      	ldr	r3, [r3, #4]
 800df52:	deff      	udf	#255	; 0xff
 800df54:	b1a4      	cbz	r4, 800df80 <forward_dense+0x3d0>
 800df56:	f8d4 c000 	ldr.w	ip, [r4]
 800df5a:	463b      	mov	r3, r7
 800df5c:	4629      	mov	r1, r5
 800df5e:	9600      	str	r6, [sp, #0]
 800df60:	4652      	mov	r2, sl
 800df62:	9803      	ldr	r0, [sp, #12]
 800df64:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800df68:	f7ff fd64 	bl	800da34 <ai_dict4_dot_array_f32>
 800df6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df6e:	3404      	adds	r4, #4
 800df70:	444d      	add	r5, r9
 800df72:	f84b 3b04 	str.w	r3, [fp], #4
 800df76:	45c3      	cmp	fp, r8
 800df78:	f4bf aead 	bcs.w	800dcd6 <forward_dense+0x126>
 800df7c:	2c00      	cmp	r4, #0
 800df7e:	d1ea      	bne.n	800df56 <forward_dense+0x3a6>
 800df80:	4634      	mov	r4, r6
 800df82:	4646      	mov	r6, r8
 800df84:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800df88:	463b      	mov	r3, r7
 800df8a:	4629      	mov	r1, r5
 800df8c:	9400      	str	r4, [sp, #0]
 800df8e:	4652      	mov	r2, sl
 800df90:	4640      	mov	r0, r8
 800df92:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 800df96:	f7ff fd4d 	bl	800da34 <ai_dict4_dot_array_f32>
 800df9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df9c:	444d      	add	r5, r9
 800df9e:	f84b 3b04 	str.w	r3, [fp], #4
 800dfa2:	45b3      	cmp	fp, r6
 800dfa4:	d3f0      	bcc.n	800df88 <forward_dense+0x3d8>
 800dfa6:	46a0      	mov	r8, r4
 800dfa8:	e698      	b.n	800dcdc <forward_dense+0x12c>
 800dfaa:	9006      	str	r0, [sp, #24]
 800dfac:	e62a      	b.n	800dc04 <forward_dense+0x54>
 800dfae:	9306      	str	r3, [sp, #24]
 800dfb0:	e628      	b.n	800dc04 <forward_dense+0x54>
 800dfb2:	bf00      	nop
 800dfb4:	00000000 	.word	0x00000000
 800dfb8:	4634      	mov	r4, r6
 800dfba:	4646      	mov	r6, r8
 800dfbc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800dfc0:	463b      	mov	r3, r7
 800dfc2:	4629      	mov	r1, r5
 800dfc4:	9400      	str	r4, [sp, #0]
 800dfc6:	4652      	mov	r2, sl
 800dfc8:	4640      	mov	r0, r8
 800dfca:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 800dfce:	f7ff fb01 	bl	800d5d4 <ai_dict8_dot_array_f32>
 800dfd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dfd4:	444d      	add	r5, r9
 800dfd6:	f84b 3b04 	str.w	r3, [fp], #4
 800dfda:	45b3      	cmp	fp, r6
 800dfdc:	d3f0      	bcc.n	800dfc0 <forward_dense+0x410>
 800dfde:	46a0      	mov	r8, r4
 800dfe0:	e67c      	b.n	800dcdc <forward_dense+0x12c>
 800dfe2:	b011      	add	sp, #68	; 0x44
 800dfe4:	ecbd 8b08 	vpop	{d8-d11}
 800dfe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfec:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800dff0:	e626      	b.n	800dc40 <forward_dense+0x90>
 800dff2:	2300      	movs	r3, #0
 800dff4:	9306      	str	r3, [sp, #24]
 800dff6:	e605      	b.n	800dc04 <forward_dense+0x54>
 800dff8:	9308      	str	r3, [sp, #32]
 800dffa:	e5f6      	b.n	800dbea <forward_dense+0x3a>

0800dffc <nl_func_relu_generic_array_f32>:
 800dffc:	b470      	push	{r4, r5, r6}
 800dffe:	edd3 6a02 	vldr	s13, [r3, #8]
 800e002:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 800e006:	6880      	ldr	r0, [r0, #8]
 800e008:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800e00c:	4414      	add	r4, r2
 800e00e:	688d      	ldr	r5, [r1, #8]
 800e010:	00a4      	lsls	r4, r4, #2
 800e012:	ed93 7a00 	vldr	s14, [r3]
 800e016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e01a:	ed93 6a01 	vldr	s12, [r3, #4]
 800e01e:	eb00 0204 	add.w	r2, r0, r4
 800e022:	442c      	add	r4, r5
 800e024:	d420      	bmi.n	800e068 <nl_func_relu_generic_array_f32+0x6c>
 800e026:	42ac      	cmp	r4, r5
 800e028:	d33b      	bcc.n	800e0a2 <nl_func_relu_generic_array_f32+0xa6>
 800e02a:	1d23      	adds	r3, r4, #4
 800e02c:	3204      	adds	r2, #4
 800e02e:	e010      	b.n	800e052 <nl_func_relu_generic_array_f32+0x56>
 800e030:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e034:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800e038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e03c:	dd01      	ble.n	800e042 <nl_func_relu_generic_array_f32+0x46>
 800e03e:	ee65 7a86 	vmul.f32	s15, s11, s12
 800e042:	f1a3 0408 	sub.w	r4, r3, #8
 800e046:	ed62 7a01 	vstmdb	r2!, {s15}
 800e04a:	4603      	mov	r3, r0
 800e04c:	6888      	ldr	r0, [r1, #8]
 800e04e:	4284      	cmp	r4, r0
 800e050:	d327      	bcc.n	800e0a2 <nl_func_relu_generic_array_f32+0xa6>
 800e052:	ed53 7a01 	vldr	s15, [r3, #-4]
 800e056:	1f18      	subs	r0, r3, #4
 800e058:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e05c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e060:	dce6      	bgt.n	800e030 <nl_func_relu_generic_array_f32+0x34>
 800e062:	eef0 7a66 	vmov.f32	s15, s13
 800e066:	e7ec      	b.n	800e042 <nl_func_relu_generic_array_f32+0x46>
 800e068:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800e06c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e070:	d019      	beq.n	800e0a6 <nl_func_relu_generic_array_f32+0xaa>
 800e072:	42ac      	cmp	r4, r5
 800e074:	d315      	bcc.n	800e0a2 <nl_func_relu_generic_array_f32+0xa6>
 800e076:	1d23      	adds	r3, r4, #4
 800e078:	3204      	adds	r2, #4
 800e07a:	ed53 7a01 	vldr	s15, [r3, #-4]
 800e07e:	1f18      	subs	r0, r3, #4
 800e080:	f1a3 0508 	sub.w	r5, r3, #8
 800e084:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e088:	4603      	mov	r3, r0
 800e08a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800e08e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e092:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e096:	d51c      	bpl.n	800e0d2 <nl_func_relu_generic_array_f32+0xd6>
 800e098:	ed62 6a01 	vstmdb	r2!, {s13}
 800e09c:	6888      	ldr	r0, [r1, #8]
 800e09e:	42a8      	cmp	r0, r5
 800e0a0:	d9eb      	bls.n	800e07a <nl_func_relu_generic_array_f32+0x7e>
 800e0a2:	bc70      	pop	{r4, r5, r6}
 800e0a4:	4770      	bx	lr
 800e0a6:	42ac      	cmp	r4, r5
 800e0a8:	d3fb      	bcc.n	800e0a2 <nl_func_relu_generic_array_f32+0xa6>
 800e0aa:	1d23      	adds	r3, r4, #4
 800e0ac:	3204      	adds	r2, #4
 800e0ae:	2600      	movs	r6, #0
 800e0b0:	ed53 7a01 	vldr	s15, [r3, #-4]
 800e0b4:	1f18      	subs	r0, r3, #4
 800e0b6:	f1a3 0508 	sub.w	r5, r3, #8
 800e0ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e0be:	4603      	mov	r3, r0
 800e0c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0c4:	d80b      	bhi.n	800e0de <nl_func_relu_generic_array_f32+0xe2>
 800e0c6:	ed62 7a01 	vstmdb	r2!, {s15}
 800e0ca:	6888      	ldr	r0, [r1, #8]
 800e0cc:	42a8      	cmp	r0, r5
 800e0ce:	d9ef      	bls.n	800e0b0 <nl_func_relu_generic_array_f32+0xb4>
 800e0d0:	e7e7      	b.n	800e0a2 <nl_func_relu_generic_array_f32+0xa6>
 800e0d2:	ed62 7a01 	vstmdb	r2!, {s15}
 800e0d6:	6888      	ldr	r0, [r1, #8]
 800e0d8:	42a8      	cmp	r0, r5
 800e0da:	d9ce      	bls.n	800e07a <nl_func_relu_generic_array_f32+0x7e>
 800e0dc:	e7e1      	b.n	800e0a2 <nl_func_relu_generic_array_f32+0xa6>
 800e0de:	f842 6d04 	str.w	r6, [r2, #-4]!
 800e0e2:	6888      	ldr	r0, [r1, #8]
 800e0e4:	42a8      	cmp	r0, r5
 800e0e6:	d9e3      	bls.n	800e0b0 <nl_func_relu_generic_array_f32+0xb4>
 800e0e8:	e7db      	b.n	800e0a2 <nl_func_relu_generic_array_f32+0xa6>
 800e0ea:	bf00      	nop

0800e0ec <forward_relu>:
 800e0ec:	6942      	ldr	r2, [r0, #20]
 800e0ee:	8813      	ldrh	r3, [r2, #0]
 800e0f0:	b33b      	cbz	r3, 800e142 <forward_relu+0x56>
 800e0f2:	b4f0      	push	{r4, r5, r6, r7}
 800e0f4:	6852      	ldr	r2, [r2, #4]
 800e0f6:	6855      	ldr	r5, [r2, #4]
 800e0f8:	b105      	cbz	r5, 800e0fc <forward_relu+0x10>
 800e0fa:	682d      	ldr	r5, [r5, #0]
 800e0fc:	2b01      	cmp	r3, #1
 800e0fe:	d91d      	bls.n	800e13c <forward_relu+0x50>
 800e100:	6913      	ldr	r3, [r2, #16]
 800e102:	b103      	cbz	r3, 800e106 <forward_relu+0x1a>
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	6982      	ldr	r2, [r0, #24]
 800e108:	68ac      	ldr	r4, [r5, #8]
 800e10a:	6998      	ldr	r0, [r3, #24]
 800e10c:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800e110:	69a9      	ldr	r1, [r5, #24]
 800e112:	2a00      	cmp	r2, #0
 800e114:	d040      	beq.n	800e198 <forward_relu+0xac>
 800e116:	e9d2 6301 	ldrd	r6, r3, [r2, #4]
 800e11a:	2e01      	cmp	r6, #1
 800e11c:	d013      	beq.n	800e146 <forward_relu+0x5a>
 800e11e:	2c00      	cmp	r4, #0
 800e120:	d068      	beq.n	800e1f4 <forward_relu+0x108>
 800e122:	68ee      	ldr	r6, [r5, #12]
 800e124:	2201      	movs	r2, #1
 800e126:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800e12a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e12e:	42a6      	cmp	r6, r4
 800e130:	fb05 f202 	mul.w	r2, r5, r2
 800e134:	d1f9      	bne.n	800e12a <forward_relu+0x3e>
 800e136:	bcf0      	pop	{r4, r5, r6, r7}
 800e138:	f7ff bf60 	b.w	800dffc <nl_func_relu_generic_array_f32>
 800e13c:	2300      	movs	r3, #0
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	deff      	udf	#255	; 0xff
 800e142:	685b      	ldr	r3, [r3, #4]
 800e144:	deff      	udf	#255	; 0xff
 800e146:	6887      	ldr	r7, [r0, #8]
 800e148:	688a      	ldr	r2, [r1, #8]
 800e14a:	ed93 7a00 	vldr	s14, [r3]
 800e14e:	b184      	cbz	r4, 800e172 <forward_relu+0x86>
 800e150:	68ed      	ldr	r5, [r5, #12]
 800e152:	4630      	mov	r0, r6
 800e154:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800e158:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800e15c:	42a5      	cmp	r5, r4
 800e15e:	fb03 f000 	mul.w	r0, r3, r0
 800e162:	d1f9      	bne.n	800e158 <forward_relu+0x6c>
 800e164:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e168:	4403      	add	r3, r0
 800e16a:	009b      	lsls	r3, r3, #2
 800e16c:	18d2      	adds	r2, r2, r3
 800e16e:	441f      	add	r7, r3
 800e170:	d236      	bcs.n	800e1e0 <forward_relu+0xf4>
 800e172:	1d13      	adds	r3, r2, #4
 800e174:	2500      	movs	r5, #0
 800e176:	1d3a      	adds	r2, r7, #4
 800e178:	ed53 7a01 	vldr	s15, [r3, #-4]
 800e17c:	1f18      	subs	r0, r3, #4
 800e17e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e186:	d82d      	bhi.n	800e1e4 <forward_relu+0xf8>
 800e188:	ed62 7a01 	vstmdb	r2!, {s15}
 800e18c:	3b08      	subs	r3, #8
 800e18e:	688c      	ldr	r4, [r1, #8]
 800e190:	429c      	cmp	r4, r3
 800e192:	d825      	bhi.n	800e1e0 <forward_relu+0xf4>
 800e194:	4603      	mov	r3, r0
 800e196:	e7ef      	b.n	800e178 <forward_relu+0x8c>
 800e198:	6880      	ldr	r0, [r0, #8]
 800e19a:	688b      	ldr	r3, [r1, #8]
 800e19c:	b184      	cbz	r4, 800e1c0 <forward_relu+0xd4>
 800e19e:	68ee      	ldr	r6, [r5, #12]
 800e1a0:	2201      	movs	r2, #1
 800e1a2:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800e1a6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e1aa:	42a6      	cmp	r6, r4
 800e1ac:	fb05 f202 	mul.w	r2, r5, r2
 800e1b0:	d1f9      	bne.n	800e1a6 <forward_relu+0xba>
 800e1b2:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 800e1b6:	4414      	add	r4, r2
 800e1b8:	00a2      	lsls	r2, r4, #2
 800e1ba:	189b      	adds	r3, r3, r2
 800e1bc:	4410      	add	r0, r2
 800e1be:	d20f      	bcs.n	800e1e0 <forward_relu+0xf4>
 800e1c0:	3304      	adds	r3, #4
 800e1c2:	3004      	adds	r0, #4
 800e1c4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800e1f8 <forward_relu+0x10c>
 800e1c8:	ed53 7a01 	vldr	s15, [r3, #-4]
 800e1cc:	f1a3 0208 	sub.w	r2, r3, #8
 800e1d0:	3b04      	subs	r3, #4
 800e1d2:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800e1d6:	ed60 7a01 	vstmdb	r0!, {s15}
 800e1da:	688c      	ldr	r4, [r1, #8]
 800e1dc:	4294      	cmp	r4, r2
 800e1de:	d9f3      	bls.n	800e1c8 <forward_relu+0xdc>
 800e1e0:	bcf0      	pop	{r4, r5, r6, r7}
 800e1e2:	4770      	bx	lr
 800e1e4:	f842 5d04 	str.w	r5, [r2, #-4]!
 800e1e8:	3b08      	subs	r3, #8
 800e1ea:	688c      	ldr	r4, [r1, #8]
 800e1ec:	429c      	cmp	r4, r3
 800e1ee:	d8f7      	bhi.n	800e1e0 <forward_relu+0xf4>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	e7c1      	b.n	800e178 <forward_relu+0x8c>
 800e1f4:	2201      	movs	r2, #1
 800e1f6:	e79e      	b.n	800e136 <forward_relu+0x4a>
 800e1f8:	00000000 	.word	0x00000000

0800e1fc <ai_check_custom_types>:
 800e1fc:	4b13      	ldr	r3, [pc, #76]	; (800e24c <ai_check_custom_types+0x50>)
 800e1fe:	b082      	sub	sp, #8
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	9301      	str	r3, [sp, #4]
 800e204:	b118      	cbz	r0, 800e20e <ai_check_custom_types+0x12>
 800e206:	7803      	ldrb	r3, [r0, #0]
 800e208:	2b03      	cmp	r3, #3
 800e20a:	d002      	beq.n	800e212 <ai_check_custom_types+0x16>
 800e20c:	2000      	movs	r0, #0
 800e20e:	b002      	add	sp, #8
 800e210:	4770      	bx	lr
 800e212:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e216:	4293      	cmp	r3, r2
 800e218:	d004      	beq.n	800e224 <ai_check_custom_types+0x28>
 800e21a:	2001      	movs	r0, #1
 800e21c:	f080 0001 	eor.w	r0, r0, #1
 800e220:	b002      	add	sp, #8
 800e222:	4770      	bx	lr
 800e224:	7842      	ldrb	r2, [r0, #1]
 800e226:	3001      	adds	r0, #1
 800e228:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e22c:	429a      	cmp	r2, r3
 800e22e:	d1f4      	bne.n	800e21a <ai_check_custom_types+0x1e>
 800e230:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800e234:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e238:	429a      	cmp	r2, r3
 800e23a:	d1ee      	bne.n	800e21a <ai_check_custom_types+0x1e>
 800e23c:	7842      	ldrb	r2, [r0, #1]
 800e23e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e242:	429a      	cmp	r2, r3
 800e244:	d1e9      	bne.n	800e21a <ai_check_custom_types+0x1e>
 800e246:	2000      	movs	r0, #0
 800e248:	e7e8      	b.n	800e21c <ai_check_custom_types+0x20>
 800e24a:	bf00      	nop
 800e24c:	0801129c 	.word	0x0801129c

0800e250 <ai_layers_forward_all>:
 800e250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e252:	6d86      	ldr	r6, [r0, #88]	; 0x58
 800e254:	4604      	mov	r4, r0
 800e256:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800e258:	b316      	cbz	r6, 800e2a0 <ai_layers_forward_all+0x50>
 800e25a:	b1c5      	cbz	r5, 800e28e <ai_layers_forward_all+0x3e>
 800e25c:	6545      	str	r5, [r0, #84]	; 0x54
 800e25e:	4629      	mov	r1, r5
 800e260:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800e262:	2001      	movs	r0, #1
 800e264:	47b0      	blx	r6
 800e266:	2700      	movs	r7, #0
 800e268:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800e26a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800e26c:	2002      	movs	r0, #2
 800e26e:	47b0      	blx	r6
 800e270:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800e272:	692b      	ldr	r3, [r5, #16]
 800e274:	4628      	mov	r0, r5
 800e276:	4798      	blx	r3
 800e278:	68eb      	ldr	r3, [r5, #12]
 800e27a:	2003      	movs	r0, #3
 800e27c:	429d      	cmp	r5, r3
 800e27e:	4619      	mov	r1, r3
 800e280:	d006      	beq.n	800e290 <ai_layers_forward_all+0x40>
 800e282:	6563      	str	r3, [r4, #84]	; 0x54
 800e284:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800e286:	47b0      	blx	r6
 800e288:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800e28a:	2900      	cmp	r1, #0
 800e28c:	d1ed      	bne.n	800e26a <ai_layers_forward_all+0x1a>
 800e28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e290:	2100      	movs	r1, #0
 800e292:	6567      	str	r7, [r4, #84]	; 0x54
 800e294:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800e296:	47b0      	blx	r6
 800e298:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800e29a:	2900      	cmp	r1, #0
 800e29c:	d1e5      	bne.n	800e26a <ai_layers_forward_all+0x1a>
 800e29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2a0:	2d00      	cmp	r5, #0
 800e2a2:	d0f4      	beq.n	800e28e <ai_layers_forward_all+0x3e>
 800e2a4:	6545      	str	r5, [r0, #84]	; 0x54
 800e2a6:	692b      	ldr	r3, [r5, #16]
 800e2a8:	4628      	mov	r0, r5
 800e2aa:	4798      	blx	r3
 800e2ac:	68eb      	ldr	r3, [r5, #12]
 800e2ae:	42ab      	cmp	r3, r5
 800e2b0:	461d      	mov	r5, r3
 800e2b2:	d003      	beq.n	800e2bc <ai_layers_forward_all+0x6c>
 800e2b4:	6563      	str	r3, [r4, #84]	; 0x54
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d1f5      	bne.n	800e2a6 <ai_layers_forward_all+0x56>
 800e2ba:	e7e8      	b.n	800e28e <ai_layers_forward_all+0x3e>
 800e2bc:	2300      	movs	r3, #0
 800e2be:	6563      	str	r3, [r4, #84]	; 0x54
 800e2c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2c2:	bf00      	nop

0800e2c4 <ai_array_to_buffer_fmt>:
 800e2c4:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800e2c8:	2b02      	cmp	r3, #2
 800e2ca:	d01f      	beq.n	800e30c <ai_array_to_buffer_fmt+0x48>
 800e2cc:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800e2d0:	4a1b      	ldr	r2, [pc, #108]	; (800e340 <ai_array_to_buffer_fmt+0x7c>)
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	d00a      	beq.n	800e2ec <ai_array_to_buffer_fmt+0x28>
 800e2d6:	dc0d      	bgt.n	800e2f4 <ai_array_to_buffer_fmt+0x30>
 800e2d8:	4a1a      	ldr	r2, [pc, #104]	; (800e344 <ai_array_to_buffer_fmt+0x80>)
 800e2da:	4293      	cmp	r3, r2
 800e2dc:	d006      	beq.n	800e2ec <ai_array_to_buffer_fmt+0x28>
 800e2de:	dd1d      	ble.n	800e31c <ai_array_to_buffer_fmt+0x58>
 800e2e0:	4a19      	ldr	r2, [pc, #100]	; (800e348 <ai_array_to_buffer_fmt+0x84>)
 800e2e2:	4293      	cmp	r3, r2
 800e2e4:	d002      	beq.n	800e2ec <ai_array_to_buffer_fmt+0x28>
 800e2e6:	320f      	adds	r2, #15
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	d10d      	bne.n	800e308 <ai_array_to_buffer_fmt+0x44>
 800e2ec:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800e2f0:	4318      	orrs	r0, r3
 800e2f2:	4770      	bx	lr
 800e2f4:	4a15      	ldr	r2, [pc, #84]	; (800e34c <ai_array_to_buffer_fmt+0x88>)
 800e2f6:	4293      	cmp	r3, r2
 800e2f8:	d0f8      	beq.n	800e2ec <ai_array_to_buffer_fmt+0x28>
 800e2fa:	dd18      	ble.n	800e32e <ai_array_to_buffer_fmt+0x6a>
 800e2fc:	4a14      	ldr	r2, [pc, #80]	; (800e350 <ai_array_to_buffer_fmt+0x8c>)
 800e2fe:	4293      	cmp	r3, r2
 800e300:	d0f4      	beq.n	800e2ec <ai_array_to_buffer_fmt+0x28>
 800e302:	4a14      	ldr	r2, [pc, #80]	; (800e354 <ai_array_to_buffer_fmt+0x90>)
 800e304:	4293      	cmp	r3, r2
 800e306:	d0f1      	beq.n	800e2ec <ai_array_to_buffer_fmt+0x28>
 800e308:	2340      	movs	r3, #64	; 0x40
 800e30a:	e7ef      	b.n	800e2ec <ai_array_to_buffer_fmt+0x28>
 800e30c:	4b12      	ldr	r3, [pc, #72]	; (800e358 <ai_array_to_buffer_fmt+0x94>)
 800e30e:	4003      	ands	r3, r0
 800e310:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800e314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e318:	4318      	orrs	r0, r3
 800e31a:	4770      	bx	lr
 800e31c:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800e320:	4293      	cmp	r3, r2
 800e322:	d0e3      	beq.n	800e2ec <ai_array_to_buffer_fmt+0x28>
 800e324:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e328:	4293      	cmp	r3, r2
 800e32a:	d0df      	beq.n	800e2ec <ai_array_to_buffer_fmt+0x28>
 800e32c:	e7ec      	b.n	800e308 <ai_array_to_buffer_fmt+0x44>
 800e32e:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800e332:	4293      	cmp	r3, r2
 800e334:	d0da      	beq.n	800e2ec <ai_array_to_buffer_fmt+0x28>
 800e336:	3207      	adds	r2, #7
 800e338:	4293      	cmp	r3, r2
 800e33a:	d0d7      	beq.n	800e2ec <ai_array_to_buffer_fmt+0x28>
 800e33c:	e7e4      	b.n	800e308 <ai_array_to_buffer_fmt+0x44>
 800e33e:	bf00      	nop
 800e340:	00840040 	.word	0x00840040
 800e344:	00040447 	.word	0x00040447
 800e348:	00040840 	.word	0x00040840
 800e34c:	00840840 	.word	0x00840840
 800e350:	0084084f 	.word	0x0084084f
 800e354:	01821040 	.word	0x01821040
 800e358:	00803fff 	.word	0x00803fff

0800e35c <ai_array_get_byte_size>:
 800e35c:	b1e1      	cbz	r1, 800e398 <ai_array_get_byte_size+0x3c>
 800e35e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800e362:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800e366:	b410      	push	{r4}
 800e368:	f3c0 3482 	ubfx	r4, r0, #14, #3
 800e36c:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800e370:	4423      	add	r3, r4
 800e372:	2804      	cmp	r0, #4
 800e374:	fb01 f103 	mul.w	r1, r1, r3
 800e378:	f101 0107 	add.w	r1, r1, #7
 800e37c:	f021 0107 	bic.w	r1, r1, #7
 800e380:	fa21 f102 	lsr.w	r1, r1, r2
 800e384:	d00a      	beq.n	800e39c <ai_array_get_byte_size+0x40>
 800e386:	2808      	cmp	r0, #8
 800e388:	d101      	bne.n	800e38e <ai_array_get_byte_size+0x32>
 800e38a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800e38e:	3107      	adds	r1, #7
 800e390:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e394:	08c8      	lsrs	r0, r1, #3
 800e396:	4770      	bx	lr
 800e398:	4608      	mov	r0, r1
 800e39a:	4770      	bx	lr
 800e39c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800e3a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3a4:	3107      	adds	r1, #7
 800e3a6:	08c8      	lsrs	r0, r1, #3
 800e3a8:	4770      	bx	lr
 800e3aa:	bf00      	nop

0800e3ac <__errno>:
 800e3ac:	4b01      	ldr	r3, [pc, #4]	; (800e3b4 <__errno+0x8>)
 800e3ae:	6818      	ldr	r0, [r3, #0]
 800e3b0:	4770      	bx	lr
 800e3b2:	bf00      	nop
 800e3b4:	200005e4 	.word	0x200005e4

0800e3b8 <__libc_init_array>:
 800e3b8:	b570      	push	{r4, r5, r6, lr}
 800e3ba:	4d0d      	ldr	r5, [pc, #52]	; (800e3f0 <__libc_init_array+0x38>)
 800e3bc:	4c0d      	ldr	r4, [pc, #52]	; (800e3f4 <__libc_init_array+0x3c>)
 800e3be:	1b64      	subs	r4, r4, r5
 800e3c0:	10a4      	asrs	r4, r4, #2
 800e3c2:	2600      	movs	r6, #0
 800e3c4:	42a6      	cmp	r6, r4
 800e3c6:	d109      	bne.n	800e3dc <__libc_init_array+0x24>
 800e3c8:	4d0b      	ldr	r5, [pc, #44]	; (800e3f8 <__libc_init_array+0x40>)
 800e3ca:	4c0c      	ldr	r4, [pc, #48]	; (800e3fc <__libc_init_array+0x44>)
 800e3cc:	f002 fef6 	bl	80111bc <_init>
 800e3d0:	1b64      	subs	r4, r4, r5
 800e3d2:	10a4      	asrs	r4, r4, #2
 800e3d4:	2600      	movs	r6, #0
 800e3d6:	42a6      	cmp	r6, r4
 800e3d8:	d105      	bne.n	800e3e6 <__libc_init_array+0x2e>
 800e3da:	bd70      	pop	{r4, r5, r6, pc}
 800e3dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3e0:	4798      	blx	r3
 800e3e2:	3601      	adds	r6, #1
 800e3e4:	e7ee      	b.n	800e3c4 <__libc_init_array+0xc>
 800e3e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3ea:	4798      	blx	r3
 800e3ec:	3601      	adds	r6, #1
 800e3ee:	e7f2      	b.n	800e3d6 <__libc_init_array+0x1e>
 800e3f0:	08011bcc 	.word	0x08011bcc
 800e3f4:	08011bcc 	.word	0x08011bcc
 800e3f8:	08011bcc 	.word	0x08011bcc
 800e3fc:	08011bd0 	.word	0x08011bd0

0800e400 <malloc>:
 800e400:	4b02      	ldr	r3, [pc, #8]	; (800e40c <malloc+0xc>)
 800e402:	4601      	mov	r1, r0
 800e404:	6818      	ldr	r0, [r3, #0]
 800e406:	f000 b869 	b.w	800e4dc <_malloc_r>
 800e40a:	bf00      	nop
 800e40c:	200005e4 	.word	0x200005e4

0800e410 <memcpy>:
 800e410:	440a      	add	r2, r1
 800e412:	4291      	cmp	r1, r2
 800e414:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e418:	d100      	bne.n	800e41c <memcpy+0xc>
 800e41a:	4770      	bx	lr
 800e41c:	b510      	push	{r4, lr}
 800e41e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e422:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e426:	4291      	cmp	r1, r2
 800e428:	d1f9      	bne.n	800e41e <memcpy+0xe>
 800e42a:	bd10      	pop	{r4, pc}

0800e42c <memset>:
 800e42c:	4402      	add	r2, r0
 800e42e:	4603      	mov	r3, r0
 800e430:	4293      	cmp	r3, r2
 800e432:	d100      	bne.n	800e436 <memset+0xa>
 800e434:	4770      	bx	lr
 800e436:	f803 1b01 	strb.w	r1, [r3], #1
 800e43a:	e7f9      	b.n	800e430 <memset+0x4>

0800e43c <_free_r>:
 800e43c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e43e:	2900      	cmp	r1, #0
 800e440:	d048      	beq.n	800e4d4 <_free_r+0x98>
 800e442:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e446:	9001      	str	r0, [sp, #4]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	f1a1 0404 	sub.w	r4, r1, #4
 800e44e:	bfb8      	it	lt
 800e450:	18e4      	addlt	r4, r4, r3
 800e452:	f001 fbb5 	bl	800fbc0 <__malloc_lock>
 800e456:	4a20      	ldr	r2, [pc, #128]	; (800e4d8 <_free_r+0x9c>)
 800e458:	9801      	ldr	r0, [sp, #4]
 800e45a:	6813      	ldr	r3, [r2, #0]
 800e45c:	4615      	mov	r5, r2
 800e45e:	b933      	cbnz	r3, 800e46e <_free_r+0x32>
 800e460:	6063      	str	r3, [r4, #4]
 800e462:	6014      	str	r4, [r2, #0]
 800e464:	b003      	add	sp, #12
 800e466:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e46a:	f001 bbaf 	b.w	800fbcc <__malloc_unlock>
 800e46e:	42a3      	cmp	r3, r4
 800e470:	d90b      	bls.n	800e48a <_free_r+0x4e>
 800e472:	6821      	ldr	r1, [r4, #0]
 800e474:	1862      	adds	r2, r4, r1
 800e476:	4293      	cmp	r3, r2
 800e478:	bf04      	itt	eq
 800e47a:	681a      	ldreq	r2, [r3, #0]
 800e47c:	685b      	ldreq	r3, [r3, #4]
 800e47e:	6063      	str	r3, [r4, #4]
 800e480:	bf04      	itt	eq
 800e482:	1852      	addeq	r2, r2, r1
 800e484:	6022      	streq	r2, [r4, #0]
 800e486:	602c      	str	r4, [r5, #0]
 800e488:	e7ec      	b.n	800e464 <_free_r+0x28>
 800e48a:	461a      	mov	r2, r3
 800e48c:	685b      	ldr	r3, [r3, #4]
 800e48e:	b10b      	cbz	r3, 800e494 <_free_r+0x58>
 800e490:	42a3      	cmp	r3, r4
 800e492:	d9fa      	bls.n	800e48a <_free_r+0x4e>
 800e494:	6811      	ldr	r1, [r2, #0]
 800e496:	1855      	adds	r5, r2, r1
 800e498:	42a5      	cmp	r5, r4
 800e49a:	d10b      	bne.n	800e4b4 <_free_r+0x78>
 800e49c:	6824      	ldr	r4, [r4, #0]
 800e49e:	4421      	add	r1, r4
 800e4a0:	1854      	adds	r4, r2, r1
 800e4a2:	42a3      	cmp	r3, r4
 800e4a4:	6011      	str	r1, [r2, #0]
 800e4a6:	d1dd      	bne.n	800e464 <_free_r+0x28>
 800e4a8:	681c      	ldr	r4, [r3, #0]
 800e4aa:	685b      	ldr	r3, [r3, #4]
 800e4ac:	6053      	str	r3, [r2, #4]
 800e4ae:	4421      	add	r1, r4
 800e4b0:	6011      	str	r1, [r2, #0]
 800e4b2:	e7d7      	b.n	800e464 <_free_r+0x28>
 800e4b4:	d902      	bls.n	800e4bc <_free_r+0x80>
 800e4b6:	230c      	movs	r3, #12
 800e4b8:	6003      	str	r3, [r0, #0]
 800e4ba:	e7d3      	b.n	800e464 <_free_r+0x28>
 800e4bc:	6825      	ldr	r5, [r4, #0]
 800e4be:	1961      	adds	r1, r4, r5
 800e4c0:	428b      	cmp	r3, r1
 800e4c2:	bf04      	itt	eq
 800e4c4:	6819      	ldreq	r1, [r3, #0]
 800e4c6:	685b      	ldreq	r3, [r3, #4]
 800e4c8:	6063      	str	r3, [r4, #4]
 800e4ca:	bf04      	itt	eq
 800e4cc:	1949      	addeq	r1, r1, r5
 800e4ce:	6021      	streq	r1, [r4, #0]
 800e4d0:	6054      	str	r4, [r2, #4]
 800e4d2:	e7c7      	b.n	800e464 <_free_r+0x28>
 800e4d4:	b003      	add	sp, #12
 800e4d6:	bd30      	pop	{r4, r5, pc}
 800e4d8:	20000858 	.word	0x20000858

0800e4dc <_malloc_r>:
 800e4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4de:	1ccd      	adds	r5, r1, #3
 800e4e0:	f025 0503 	bic.w	r5, r5, #3
 800e4e4:	3508      	adds	r5, #8
 800e4e6:	2d0c      	cmp	r5, #12
 800e4e8:	bf38      	it	cc
 800e4ea:	250c      	movcc	r5, #12
 800e4ec:	2d00      	cmp	r5, #0
 800e4ee:	4606      	mov	r6, r0
 800e4f0:	db01      	blt.n	800e4f6 <_malloc_r+0x1a>
 800e4f2:	42a9      	cmp	r1, r5
 800e4f4:	d903      	bls.n	800e4fe <_malloc_r+0x22>
 800e4f6:	230c      	movs	r3, #12
 800e4f8:	6033      	str	r3, [r6, #0]
 800e4fa:	2000      	movs	r0, #0
 800e4fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4fe:	f001 fb5f 	bl	800fbc0 <__malloc_lock>
 800e502:	4921      	ldr	r1, [pc, #132]	; (800e588 <_malloc_r+0xac>)
 800e504:	680a      	ldr	r2, [r1, #0]
 800e506:	4614      	mov	r4, r2
 800e508:	b99c      	cbnz	r4, 800e532 <_malloc_r+0x56>
 800e50a:	4f20      	ldr	r7, [pc, #128]	; (800e58c <_malloc_r+0xb0>)
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	b923      	cbnz	r3, 800e51a <_malloc_r+0x3e>
 800e510:	4621      	mov	r1, r4
 800e512:	4630      	mov	r0, r6
 800e514:	f000 fca6 	bl	800ee64 <_sbrk_r>
 800e518:	6038      	str	r0, [r7, #0]
 800e51a:	4629      	mov	r1, r5
 800e51c:	4630      	mov	r0, r6
 800e51e:	f000 fca1 	bl	800ee64 <_sbrk_r>
 800e522:	1c43      	adds	r3, r0, #1
 800e524:	d123      	bne.n	800e56e <_malloc_r+0x92>
 800e526:	230c      	movs	r3, #12
 800e528:	6033      	str	r3, [r6, #0]
 800e52a:	4630      	mov	r0, r6
 800e52c:	f001 fb4e 	bl	800fbcc <__malloc_unlock>
 800e530:	e7e3      	b.n	800e4fa <_malloc_r+0x1e>
 800e532:	6823      	ldr	r3, [r4, #0]
 800e534:	1b5b      	subs	r3, r3, r5
 800e536:	d417      	bmi.n	800e568 <_malloc_r+0x8c>
 800e538:	2b0b      	cmp	r3, #11
 800e53a:	d903      	bls.n	800e544 <_malloc_r+0x68>
 800e53c:	6023      	str	r3, [r4, #0]
 800e53e:	441c      	add	r4, r3
 800e540:	6025      	str	r5, [r4, #0]
 800e542:	e004      	b.n	800e54e <_malloc_r+0x72>
 800e544:	6863      	ldr	r3, [r4, #4]
 800e546:	42a2      	cmp	r2, r4
 800e548:	bf0c      	ite	eq
 800e54a:	600b      	streq	r3, [r1, #0]
 800e54c:	6053      	strne	r3, [r2, #4]
 800e54e:	4630      	mov	r0, r6
 800e550:	f001 fb3c 	bl	800fbcc <__malloc_unlock>
 800e554:	f104 000b 	add.w	r0, r4, #11
 800e558:	1d23      	adds	r3, r4, #4
 800e55a:	f020 0007 	bic.w	r0, r0, #7
 800e55e:	1ac2      	subs	r2, r0, r3
 800e560:	d0cc      	beq.n	800e4fc <_malloc_r+0x20>
 800e562:	1a1b      	subs	r3, r3, r0
 800e564:	50a3      	str	r3, [r4, r2]
 800e566:	e7c9      	b.n	800e4fc <_malloc_r+0x20>
 800e568:	4622      	mov	r2, r4
 800e56a:	6864      	ldr	r4, [r4, #4]
 800e56c:	e7cc      	b.n	800e508 <_malloc_r+0x2c>
 800e56e:	1cc4      	adds	r4, r0, #3
 800e570:	f024 0403 	bic.w	r4, r4, #3
 800e574:	42a0      	cmp	r0, r4
 800e576:	d0e3      	beq.n	800e540 <_malloc_r+0x64>
 800e578:	1a21      	subs	r1, r4, r0
 800e57a:	4630      	mov	r0, r6
 800e57c:	f000 fc72 	bl	800ee64 <_sbrk_r>
 800e580:	3001      	adds	r0, #1
 800e582:	d1dd      	bne.n	800e540 <_malloc_r+0x64>
 800e584:	e7cf      	b.n	800e526 <_malloc_r+0x4a>
 800e586:	bf00      	nop
 800e588:	20000858 	.word	0x20000858
 800e58c:	2000085c 	.word	0x2000085c

0800e590 <__cvt>:
 800e590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e594:	ec55 4b10 	vmov	r4, r5, d0
 800e598:	2d00      	cmp	r5, #0
 800e59a:	460e      	mov	r6, r1
 800e59c:	4619      	mov	r1, r3
 800e59e:	462b      	mov	r3, r5
 800e5a0:	bfbb      	ittet	lt
 800e5a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e5a6:	461d      	movlt	r5, r3
 800e5a8:	2300      	movge	r3, #0
 800e5aa:	232d      	movlt	r3, #45	; 0x2d
 800e5ac:	700b      	strb	r3, [r1, #0]
 800e5ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e5b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e5b4:	4691      	mov	r9, r2
 800e5b6:	f023 0820 	bic.w	r8, r3, #32
 800e5ba:	bfbc      	itt	lt
 800e5bc:	4622      	movlt	r2, r4
 800e5be:	4614      	movlt	r4, r2
 800e5c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e5c4:	d005      	beq.n	800e5d2 <__cvt+0x42>
 800e5c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e5ca:	d100      	bne.n	800e5ce <__cvt+0x3e>
 800e5cc:	3601      	adds	r6, #1
 800e5ce:	2102      	movs	r1, #2
 800e5d0:	e000      	b.n	800e5d4 <__cvt+0x44>
 800e5d2:	2103      	movs	r1, #3
 800e5d4:	ab03      	add	r3, sp, #12
 800e5d6:	9301      	str	r3, [sp, #4]
 800e5d8:	ab02      	add	r3, sp, #8
 800e5da:	9300      	str	r3, [sp, #0]
 800e5dc:	ec45 4b10 	vmov	d0, r4, r5
 800e5e0:	4653      	mov	r3, sl
 800e5e2:	4632      	mov	r2, r6
 800e5e4:	f000 fcfc 	bl	800efe0 <_dtoa_r>
 800e5e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e5ec:	4607      	mov	r7, r0
 800e5ee:	d102      	bne.n	800e5f6 <__cvt+0x66>
 800e5f0:	f019 0f01 	tst.w	r9, #1
 800e5f4:	d022      	beq.n	800e63c <__cvt+0xac>
 800e5f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e5fa:	eb07 0906 	add.w	r9, r7, r6
 800e5fe:	d110      	bne.n	800e622 <__cvt+0x92>
 800e600:	783b      	ldrb	r3, [r7, #0]
 800e602:	2b30      	cmp	r3, #48	; 0x30
 800e604:	d10a      	bne.n	800e61c <__cvt+0x8c>
 800e606:	2200      	movs	r2, #0
 800e608:	2300      	movs	r3, #0
 800e60a:	4620      	mov	r0, r4
 800e60c:	4629      	mov	r1, r5
 800e60e:	f7f2 fa7b 	bl	8000b08 <__aeabi_dcmpeq>
 800e612:	b918      	cbnz	r0, 800e61c <__cvt+0x8c>
 800e614:	f1c6 0601 	rsb	r6, r6, #1
 800e618:	f8ca 6000 	str.w	r6, [sl]
 800e61c:	f8da 3000 	ldr.w	r3, [sl]
 800e620:	4499      	add	r9, r3
 800e622:	2200      	movs	r2, #0
 800e624:	2300      	movs	r3, #0
 800e626:	4620      	mov	r0, r4
 800e628:	4629      	mov	r1, r5
 800e62a:	f7f2 fa6d 	bl	8000b08 <__aeabi_dcmpeq>
 800e62e:	b108      	cbz	r0, 800e634 <__cvt+0xa4>
 800e630:	f8cd 900c 	str.w	r9, [sp, #12]
 800e634:	2230      	movs	r2, #48	; 0x30
 800e636:	9b03      	ldr	r3, [sp, #12]
 800e638:	454b      	cmp	r3, r9
 800e63a:	d307      	bcc.n	800e64c <__cvt+0xbc>
 800e63c:	9b03      	ldr	r3, [sp, #12]
 800e63e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e640:	1bdb      	subs	r3, r3, r7
 800e642:	4638      	mov	r0, r7
 800e644:	6013      	str	r3, [r2, #0]
 800e646:	b004      	add	sp, #16
 800e648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e64c:	1c59      	adds	r1, r3, #1
 800e64e:	9103      	str	r1, [sp, #12]
 800e650:	701a      	strb	r2, [r3, #0]
 800e652:	e7f0      	b.n	800e636 <__cvt+0xa6>

0800e654 <__exponent>:
 800e654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e656:	4603      	mov	r3, r0
 800e658:	2900      	cmp	r1, #0
 800e65a:	bfb8      	it	lt
 800e65c:	4249      	neglt	r1, r1
 800e65e:	f803 2b02 	strb.w	r2, [r3], #2
 800e662:	bfb4      	ite	lt
 800e664:	222d      	movlt	r2, #45	; 0x2d
 800e666:	222b      	movge	r2, #43	; 0x2b
 800e668:	2909      	cmp	r1, #9
 800e66a:	7042      	strb	r2, [r0, #1]
 800e66c:	dd2a      	ble.n	800e6c4 <__exponent+0x70>
 800e66e:	f10d 0407 	add.w	r4, sp, #7
 800e672:	46a4      	mov	ip, r4
 800e674:	270a      	movs	r7, #10
 800e676:	46a6      	mov	lr, r4
 800e678:	460a      	mov	r2, r1
 800e67a:	fb91 f6f7 	sdiv	r6, r1, r7
 800e67e:	fb07 1516 	mls	r5, r7, r6, r1
 800e682:	3530      	adds	r5, #48	; 0x30
 800e684:	2a63      	cmp	r2, #99	; 0x63
 800e686:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800e68a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e68e:	4631      	mov	r1, r6
 800e690:	dcf1      	bgt.n	800e676 <__exponent+0x22>
 800e692:	3130      	adds	r1, #48	; 0x30
 800e694:	f1ae 0502 	sub.w	r5, lr, #2
 800e698:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e69c:	1c44      	adds	r4, r0, #1
 800e69e:	4629      	mov	r1, r5
 800e6a0:	4561      	cmp	r1, ip
 800e6a2:	d30a      	bcc.n	800e6ba <__exponent+0x66>
 800e6a4:	f10d 0209 	add.w	r2, sp, #9
 800e6a8:	eba2 020e 	sub.w	r2, r2, lr
 800e6ac:	4565      	cmp	r5, ip
 800e6ae:	bf88      	it	hi
 800e6b0:	2200      	movhi	r2, #0
 800e6b2:	4413      	add	r3, r2
 800e6b4:	1a18      	subs	r0, r3, r0
 800e6b6:	b003      	add	sp, #12
 800e6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e6be:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e6c2:	e7ed      	b.n	800e6a0 <__exponent+0x4c>
 800e6c4:	2330      	movs	r3, #48	; 0x30
 800e6c6:	3130      	adds	r1, #48	; 0x30
 800e6c8:	7083      	strb	r3, [r0, #2]
 800e6ca:	70c1      	strb	r1, [r0, #3]
 800e6cc:	1d03      	adds	r3, r0, #4
 800e6ce:	e7f1      	b.n	800e6b4 <__exponent+0x60>

0800e6d0 <_printf_float>:
 800e6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6d4:	ed2d 8b02 	vpush	{d8}
 800e6d8:	b08d      	sub	sp, #52	; 0x34
 800e6da:	460c      	mov	r4, r1
 800e6dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e6e0:	4616      	mov	r6, r2
 800e6e2:	461f      	mov	r7, r3
 800e6e4:	4605      	mov	r5, r0
 800e6e6:	f001 fa67 	bl	800fbb8 <_localeconv_r>
 800e6ea:	f8d0 a000 	ldr.w	sl, [r0]
 800e6ee:	4650      	mov	r0, sl
 800e6f0:	f7f1 fd8e 	bl	8000210 <strlen>
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	930a      	str	r3, [sp, #40]	; 0x28
 800e6f8:	6823      	ldr	r3, [r4, #0]
 800e6fa:	9305      	str	r3, [sp, #20]
 800e6fc:	f8d8 3000 	ldr.w	r3, [r8]
 800e700:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e704:	3307      	adds	r3, #7
 800e706:	f023 0307 	bic.w	r3, r3, #7
 800e70a:	f103 0208 	add.w	r2, r3, #8
 800e70e:	f8c8 2000 	str.w	r2, [r8]
 800e712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e716:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e71a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e71e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e722:	9307      	str	r3, [sp, #28]
 800e724:	f8cd 8018 	str.w	r8, [sp, #24]
 800e728:	ee08 0a10 	vmov	s16, r0
 800e72c:	4b9f      	ldr	r3, [pc, #636]	; (800e9ac <_printf_float+0x2dc>)
 800e72e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e732:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e736:	f7f2 fa19 	bl	8000b6c <__aeabi_dcmpun>
 800e73a:	bb88      	cbnz	r0, 800e7a0 <_printf_float+0xd0>
 800e73c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e740:	4b9a      	ldr	r3, [pc, #616]	; (800e9ac <_printf_float+0x2dc>)
 800e742:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e746:	f7f2 f9f3 	bl	8000b30 <__aeabi_dcmple>
 800e74a:	bb48      	cbnz	r0, 800e7a0 <_printf_float+0xd0>
 800e74c:	2200      	movs	r2, #0
 800e74e:	2300      	movs	r3, #0
 800e750:	4640      	mov	r0, r8
 800e752:	4649      	mov	r1, r9
 800e754:	f7f2 f9e2 	bl	8000b1c <__aeabi_dcmplt>
 800e758:	b110      	cbz	r0, 800e760 <_printf_float+0x90>
 800e75a:	232d      	movs	r3, #45	; 0x2d
 800e75c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e760:	4b93      	ldr	r3, [pc, #588]	; (800e9b0 <_printf_float+0x2e0>)
 800e762:	4894      	ldr	r0, [pc, #592]	; (800e9b4 <_printf_float+0x2e4>)
 800e764:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e768:	bf94      	ite	ls
 800e76a:	4698      	movls	r8, r3
 800e76c:	4680      	movhi	r8, r0
 800e76e:	2303      	movs	r3, #3
 800e770:	6123      	str	r3, [r4, #16]
 800e772:	9b05      	ldr	r3, [sp, #20]
 800e774:	f023 0204 	bic.w	r2, r3, #4
 800e778:	6022      	str	r2, [r4, #0]
 800e77a:	f04f 0900 	mov.w	r9, #0
 800e77e:	9700      	str	r7, [sp, #0]
 800e780:	4633      	mov	r3, r6
 800e782:	aa0b      	add	r2, sp, #44	; 0x2c
 800e784:	4621      	mov	r1, r4
 800e786:	4628      	mov	r0, r5
 800e788:	f000 f9d8 	bl	800eb3c <_printf_common>
 800e78c:	3001      	adds	r0, #1
 800e78e:	f040 8090 	bne.w	800e8b2 <_printf_float+0x1e2>
 800e792:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e796:	b00d      	add	sp, #52	; 0x34
 800e798:	ecbd 8b02 	vpop	{d8}
 800e79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7a0:	4642      	mov	r2, r8
 800e7a2:	464b      	mov	r3, r9
 800e7a4:	4640      	mov	r0, r8
 800e7a6:	4649      	mov	r1, r9
 800e7a8:	f7f2 f9e0 	bl	8000b6c <__aeabi_dcmpun>
 800e7ac:	b140      	cbz	r0, 800e7c0 <_printf_float+0xf0>
 800e7ae:	464b      	mov	r3, r9
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	bfbc      	itt	lt
 800e7b4:	232d      	movlt	r3, #45	; 0x2d
 800e7b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e7ba:	487f      	ldr	r0, [pc, #508]	; (800e9b8 <_printf_float+0x2e8>)
 800e7bc:	4b7f      	ldr	r3, [pc, #508]	; (800e9bc <_printf_float+0x2ec>)
 800e7be:	e7d1      	b.n	800e764 <_printf_float+0x94>
 800e7c0:	6863      	ldr	r3, [r4, #4]
 800e7c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e7c6:	9206      	str	r2, [sp, #24]
 800e7c8:	1c5a      	adds	r2, r3, #1
 800e7ca:	d13f      	bne.n	800e84c <_printf_float+0x17c>
 800e7cc:	2306      	movs	r3, #6
 800e7ce:	6063      	str	r3, [r4, #4]
 800e7d0:	9b05      	ldr	r3, [sp, #20]
 800e7d2:	6861      	ldr	r1, [r4, #4]
 800e7d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e7d8:	2300      	movs	r3, #0
 800e7da:	9303      	str	r3, [sp, #12]
 800e7dc:	ab0a      	add	r3, sp, #40	; 0x28
 800e7de:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e7e2:	ab09      	add	r3, sp, #36	; 0x24
 800e7e4:	ec49 8b10 	vmov	d0, r8, r9
 800e7e8:	9300      	str	r3, [sp, #0]
 800e7ea:	6022      	str	r2, [r4, #0]
 800e7ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e7f0:	4628      	mov	r0, r5
 800e7f2:	f7ff fecd 	bl	800e590 <__cvt>
 800e7f6:	9b06      	ldr	r3, [sp, #24]
 800e7f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e7fa:	2b47      	cmp	r3, #71	; 0x47
 800e7fc:	4680      	mov	r8, r0
 800e7fe:	d108      	bne.n	800e812 <_printf_float+0x142>
 800e800:	1cc8      	adds	r0, r1, #3
 800e802:	db02      	blt.n	800e80a <_printf_float+0x13a>
 800e804:	6863      	ldr	r3, [r4, #4]
 800e806:	4299      	cmp	r1, r3
 800e808:	dd41      	ble.n	800e88e <_printf_float+0x1be>
 800e80a:	f1ab 0b02 	sub.w	fp, fp, #2
 800e80e:	fa5f fb8b 	uxtb.w	fp, fp
 800e812:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e816:	d820      	bhi.n	800e85a <_printf_float+0x18a>
 800e818:	3901      	subs	r1, #1
 800e81a:	465a      	mov	r2, fp
 800e81c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e820:	9109      	str	r1, [sp, #36]	; 0x24
 800e822:	f7ff ff17 	bl	800e654 <__exponent>
 800e826:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e828:	1813      	adds	r3, r2, r0
 800e82a:	2a01      	cmp	r2, #1
 800e82c:	4681      	mov	r9, r0
 800e82e:	6123      	str	r3, [r4, #16]
 800e830:	dc02      	bgt.n	800e838 <_printf_float+0x168>
 800e832:	6822      	ldr	r2, [r4, #0]
 800e834:	07d2      	lsls	r2, r2, #31
 800e836:	d501      	bpl.n	800e83c <_printf_float+0x16c>
 800e838:	3301      	adds	r3, #1
 800e83a:	6123      	str	r3, [r4, #16]
 800e83c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e840:	2b00      	cmp	r3, #0
 800e842:	d09c      	beq.n	800e77e <_printf_float+0xae>
 800e844:	232d      	movs	r3, #45	; 0x2d
 800e846:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e84a:	e798      	b.n	800e77e <_printf_float+0xae>
 800e84c:	9a06      	ldr	r2, [sp, #24]
 800e84e:	2a47      	cmp	r2, #71	; 0x47
 800e850:	d1be      	bne.n	800e7d0 <_printf_float+0x100>
 800e852:	2b00      	cmp	r3, #0
 800e854:	d1bc      	bne.n	800e7d0 <_printf_float+0x100>
 800e856:	2301      	movs	r3, #1
 800e858:	e7b9      	b.n	800e7ce <_printf_float+0xfe>
 800e85a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e85e:	d118      	bne.n	800e892 <_printf_float+0x1c2>
 800e860:	2900      	cmp	r1, #0
 800e862:	6863      	ldr	r3, [r4, #4]
 800e864:	dd0b      	ble.n	800e87e <_printf_float+0x1ae>
 800e866:	6121      	str	r1, [r4, #16]
 800e868:	b913      	cbnz	r3, 800e870 <_printf_float+0x1a0>
 800e86a:	6822      	ldr	r2, [r4, #0]
 800e86c:	07d0      	lsls	r0, r2, #31
 800e86e:	d502      	bpl.n	800e876 <_printf_float+0x1a6>
 800e870:	3301      	adds	r3, #1
 800e872:	440b      	add	r3, r1
 800e874:	6123      	str	r3, [r4, #16]
 800e876:	65a1      	str	r1, [r4, #88]	; 0x58
 800e878:	f04f 0900 	mov.w	r9, #0
 800e87c:	e7de      	b.n	800e83c <_printf_float+0x16c>
 800e87e:	b913      	cbnz	r3, 800e886 <_printf_float+0x1b6>
 800e880:	6822      	ldr	r2, [r4, #0]
 800e882:	07d2      	lsls	r2, r2, #31
 800e884:	d501      	bpl.n	800e88a <_printf_float+0x1ba>
 800e886:	3302      	adds	r3, #2
 800e888:	e7f4      	b.n	800e874 <_printf_float+0x1a4>
 800e88a:	2301      	movs	r3, #1
 800e88c:	e7f2      	b.n	800e874 <_printf_float+0x1a4>
 800e88e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e894:	4299      	cmp	r1, r3
 800e896:	db05      	blt.n	800e8a4 <_printf_float+0x1d4>
 800e898:	6823      	ldr	r3, [r4, #0]
 800e89a:	6121      	str	r1, [r4, #16]
 800e89c:	07d8      	lsls	r0, r3, #31
 800e89e:	d5ea      	bpl.n	800e876 <_printf_float+0x1a6>
 800e8a0:	1c4b      	adds	r3, r1, #1
 800e8a2:	e7e7      	b.n	800e874 <_printf_float+0x1a4>
 800e8a4:	2900      	cmp	r1, #0
 800e8a6:	bfd4      	ite	le
 800e8a8:	f1c1 0202 	rsble	r2, r1, #2
 800e8ac:	2201      	movgt	r2, #1
 800e8ae:	4413      	add	r3, r2
 800e8b0:	e7e0      	b.n	800e874 <_printf_float+0x1a4>
 800e8b2:	6823      	ldr	r3, [r4, #0]
 800e8b4:	055a      	lsls	r2, r3, #21
 800e8b6:	d407      	bmi.n	800e8c8 <_printf_float+0x1f8>
 800e8b8:	6923      	ldr	r3, [r4, #16]
 800e8ba:	4642      	mov	r2, r8
 800e8bc:	4631      	mov	r1, r6
 800e8be:	4628      	mov	r0, r5
 800e8c0:	47b8      	blx	r7
 800e8c2:	3001      	adds	r0, #1
 800e8c4:	d12c      	bne.n	800e920 <_printf_float+0x250>
 800e8c6:	e764      	b.n	800e792 <_printf_float+0xc2>
 800e8c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e8cc:	f240 80e0 	bls.w	800ea90 <_printf_float+0x3c0>
 800e8d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	f7f2 f916 	bl	8000b08 <__aeabi_dcmpeq>
 800e8dc:	2800      	cmp	r0, #0
 800e8de:	d034      	beq.n	800e94a <_printf_float+0x27a>
 800e8e0:	4a37      	ldr	r2, [pc, #220]	; (800e9c0 <_printf_float+0x2f0>)
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	4631      	mov	r1, r6
 800e8e6:	4628      	mov	r0, r5
 800e8e8:	47b8      	blx	r7
 800e8ea:	3001      	adds	r0, #1
 800e8ec:	f43f af51 	beq.w	800e792 <_printf_float+0xc2>
 800e8f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	db02      	blt.n	800e8fe <_printf_float+0x22e>
 800e8f8:	6823      	ldr	r3, [r4, #0]
 800e8fa:	07d8      	lsls	r0, r3, #31
 800e8fc:	d510      	bpl.n	800e920 <_printf_float+0x250>
 800e8fe:	ee18 3a10 	vmov	r3, s16
 800e902:	4652      	mov	r2, sl
 800e904:	4631      	mov	r1, r6
 800e906:	4628      	mov	r0, r5
 800e908:	47b8      	blx	r7
 800e90a:	3001      	adds	r0, #1
 800e90c:	f43f af41 	beq.w	800e792 <_printf_float+0xc2>
 800e910:	f04f 0800 	mov.w	r8, #0
 800e914:	f104 091a 	add.w	r9, r4, #26
 800e918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e91a:	3b01      	subs	r3, #1
 800e91c:	4543      	cmp	r3, r8
 800e91e:	dc09      	bgt.n	800e934 <_printf_float+0x264>
 800e920:	6823      	ldr	r3, [r4, #0]
 800e922:	079b      	lsls	r3, r3, #30
 800e924:	f100 8105 	bmi.w	800eb32 <_printf_float+0x462>
 800e928:	68e0      	ldr	r0, [r4, #12]
 800e92a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e92c:	4298      	cmp	r0, r3
 800e92e:	bfb8      	it	lt
 800e930:	4618      	movlt	r0, r3
 800e932:	e730      	b.n	800e796 <_printf_float+0xc6>
 800e934:	2301      	movs	r3, #1
 800e936:	464a      	mov	r2, r9
 800e938:	4631      	mov	r1, r6
 800e93a:	4628      	mov	r0, r5
 800e93c:	47b8      	blx	r7
 800e93e:	3001      	adds	r0, #1
 800e940:	f43f af27 	beq.w	800e792 <_printf_float+0xc2>
 800e944:	f108 0801 	add.w	r8, r8, #1
 800e948:	e7e6      	b.n	800e918 <_printf_float+0x248>
 800e94a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	dc39      	bgt.n	800e9c4 <_printf_float+0x2f4>
 800e950:	4a1b      	ldr	r2, [pc, #108]	; (800e9c0 <_printf_float+0x2f0>)
 800e952:	2301      	movs	r3, #1
 800e954:	4631      	mov	r1, r6
 800e956:	4628      	mov	r0, r5
 800e958:	47b8      	blx	r7
 800e95a:	3001      	adds	r0, #1
 800e95c:	f43f af19 	beq.w	800e792 <_printf_float+0xc2>
 800e960:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e964:	4313      	orrs	r3, r2
 800e966:	d102      	bne.n	800e96e <_printf_float+0x29e>
 800e968:	6823      	ldr	r3, [r4, #0]
 800e96a:	07d9      	lsls	r1, r3, #31
 800e96c:	d5d8      	bpl.n	800e920 <_printf_float+0x250>
 800e96e:	ee18 3a10 	vmov	r3, s16
 800e972:	4652      	mov	r2, sl
 800e974:	4631      	mov	r1, r6
 800e976:	4628      	mov	r0, r5
 800e978:	47b8      	blx	r7
 800e97a:	3001      	adds	r0, #1
 800e97c:	f43f af09 	beq.w	800e792 <_printf_float+0xc2>
 800e980:	f04f 0900 	mov.w	r9, #0
 800e984:	f104 0a1a 	add.w	sl, r4, #26
 800e988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e98a:	425b      	negs	r3, r3
 800e98c:	454b      	cmp	r3, r9
 800e98e:	dc01      	bgt.n	800e994 <_printf_float+0x2c4>
 800e990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e992:	e792      	b.n	800e8ba <_printf_float+0x1ea>
 800e994:	2301      	movs	r3, #1
 800e996:	4652      	mov	r2, sl
 800e998:	4631      	mov	r1, r6
 800e99a:	4628      	mov	r0, r5
 800e99c:	47b8      	blx	r7
 800e99e:	3001      	adds	r0, #1
 800e9a0:	f43f aef7 	beq.w	800e792 <_printf_float+0xc2>
 800e9a4:	f109 0901 	add.w	r9, r9, #1
 800e9a8:	e7ee      	b.n	800e988 <_printf_float+0x2b8>
 800e9aa:	bf00      	nop
 800e9ac:	7fefffff 	.word	0x7fefffff
 800e9b0:	080117e8 	.word	0x080117e8
 800e9b4:	080117ec 	.word	0x080117ec
 800e9b8:	080117f4 	.word	0x080117f4
 800e9bc:	080117f0 	.word	0x080117f0
 800e9c0:	080117f8 	.word	0x080117f8
 800e9c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	bfa8      	it	ge
 800e9cc:	461a      	movge	r2, r3
 800e9ce:	2a00      	cmp	r2, #0
 800e9d0:	4691      	mov	r9, r2
 800e9d2:	dc37      	bgt.n	800ea44 <_printf_float+0x374>
 800e9d4:	f04f 0b00 	mov.w	fp, #0
 800e9d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e9dc:	f104 021a 	add.w	r2, r4, #26
 800e9e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e9e2:	9305      	str	r3, [sp, #20]
 800e9e4:	eba3 0309 	sub.w	r3, r3, r9
 800e9e8:	455b      	cmp	r3, fp
 800e9ea:	dc33      	bgt.n	800ea54 <_printf_float+0x384>
 800e9ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	db3b      	blt.n	800ea6c <_printf_float+0x39c>
 800e9f4:	6823      	ldr	r3, [r4, #0]
 800e9f6:	07da      	lsls	r2, r3, #31
 800e9f8:	d438      	bmi.n	800ea6c <_printf_float+0x39c>
 800e9fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9fc:	9b05      	ldr	r3, [sp, #20]
 800e9fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea00:	1ad3      	subs	r3, r2, r3
 800ea02:	eba2 0901 	sub.w	r9, r2, r1
 800ea06:	4599      	cmp	r9, r3
 800ea08:	bfa8      	it	ge
 800ea0a:	4699      	movge	r9, r3
 800ea0c:	f1b9 0f00 	cmp.w	r9, #0
 800ea10:	dc35      	bgt.n	800ea7e <_printf_float+0x3ae>
 800ea12:	f04f 0800 	mov.w	r8, #0
 800ea16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea1a:	f104 0a1a 	add.w	sl, r4, #26
 800ea1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea22:	1a9b      	subs	r3, r3, r2
 800ea24:	eba3 0309 	sub.w	r3, r3, r9
 800ea28:	4543      	cmp	r3, r8
 800ea2a:	f77f af79 	ble.w	800e920 <_printf_float+0x250>
 800ea2e:	2301      	movs	r3, #1
 800ea30:	4652      	mov	r2, sl
 800ea32:	4631      	mov	r1, r6
 800ea34:	4628      	mov	r0, r5
 800ea36:	47b8      	blx	r7
 800ea38:	3001      	adds	r0, #1
 800ea3a:	f43f aeaa 	beq.w	800e792 <_printf_float+0xc2>
 800ea3e:	f108 0801 	add.w	r8, r8, #1
 800ea42:	e7ec      	b.n	800ea1e <_printf_float+0x34e>
 800ea44:	4613      	mov	r3, r2
 800ea46:	4631      	mov	r1, r6
 800ea48:	4642      	mov	r2, r8
 800ea4a:	4628      	mov	r0, r5
 800ea4c:	47b8      	blx	r7
 800ea4e:	3001      	adds	r0, #1
 800ea50:	d1c0      	bne.n	800e9d4 <_printf_float+0x304>
 800ea52:	e69e      	b.n	800e792 <_printf_float+0xc2>
 800ea54:	2301      	movs	r3, #1
 800ea56:	4631      	mov	r1, r6
 800ea58:	4628      	mov	r0, r5
 800ea5a:	9205      	str	r2, [sp, #20]
 800ea5c:	47b8      	blx	r7
 800ea5e:	3001      	adds	r0, #1
 800ea60:	f43f ae97 	beq.w	800e792 <_printf_float+0xc2>
 800ea64:	9a05      	ldr	r2, [sp, #20]
 800ea66:	f10b 0b01 	add.w	fp, fp, #1
 800ea6a:	e7b9      	b.n	800e9e0 <_printf_float+0x310>
 800ea6c:	ee18 3a10 	vmov	r3, s16
 800ea70:	4652      	mov	r2, sl
 800ea72:	4631      	mov	r1, r6
 800ea74:	4628      	mov	r0, r5
 800ea76:	47b8      	blx	r7
 800ea78:	3001      	adds	r0, #1
 800ea7a:	d1be      	bne.n	800e9fa <_printf_float+0x32a>
 800ea7c:	e689      	b.n	800e792 <_printf_float+0xc2>
 800ea7e:	9a05      	ldr	r2, [sp, #20]
 800ea80:	464b      	mov	r3, r9
 800ea82:	4442      	add	r2, r8
 800ea84:	4631      	mov	r1, r6
 800ea86:	4628      	mov	r0, r5
 800ea88:	47b8      	blx	r7
 800ea8a:	3001      	adds	r0, #1
 800ea8c:	d1c1      	bne.n	800ea12 <_printf_float+0x342>
 800ea8e:	e680      	b.n	800e792 <_printf_float+0xc2>
 800ea90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea92:	2a01      	cmp	r2, #1
 800ea94:	dc01      	bgt.n	800ea9a <_printf_float+0x3ca>
 800ea96:	07db      	lsls	r3, r3, #31
 800ea98:	d538      	bpl.n	800eb0c <_printf_float+0x43c>
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	4642      	mov	r2, r8
 800ea9e:	4631      	mov	r1, r6
 800eaa0:	4628      	mov	r0, r5
 800eaa2:	47b8      	blx	r7
 800eaa4:	3001      	adds	r0, #1
 800eaa6:	f43f ae74 	beq.w	800e792 <_printf_float+0xc2>
 800eaaa:	ee18 3a10 	vmov	r3, s16
 800eaae:	4652      	mov	r2, sl
 800eab0:	4631      	mov	r1, r6
 800eab2:	4628      	mov	r0, r5
 800eab4:	47b8      	blx	r7
 800eab6:	3001      	adds	r0, #1
 800eab8:	f43f ae6b 	beq.w	800e792 <_printf_float+0xc2>
 800eabc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eac0:	2200      	movs	r2, #0
 800eac2:	2300      	movs	r3, #0
 800eac4:	f7f2 f820 	bl	8000b08 <__aeabi_dcmpeq>
 800eac8:	b9d8      	cbnz	r0, 800eb02 <_printf_float+0x432>
 800eaca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eacc:	f108 0201 	add.w	r2, r8, #1
 800ead0:	3b01      	subs	r3, #1
 800ead2:	4631      	mov	r1, r6
 800ead4:	4628      	mov	r0, r5
 800ead6:	47b8      	blx	r7
 800ead8:	3001      	adds	r0, #1
 800eada:	d10e      	bne.n	800eafa <_printf_float+0x42a>
 800eadc:	e659      	b.n	800e792 <_printf_float+0xc2>
 800eade:	2301      	movs	r3, #1
 800eae0:	4652      	mov	r2, sl
 800eae2:	4631      	mov	r1, r6
 800eae4:	4628      	mov	r0, r5
 800eae6:	47b8      	blx	r7
 800eae8:	3001      	adds	r0, #1
 800eaea:	f43f ae52 	beq.w	800e792 <_printf_float+0xc2>
 800eaee:	f108 0801 	add.w	r8, r8, #1
 800eaf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eaf4:	3b01      	subs	r3, #1
 800eaf6:	4543      	cmp	r3, r8
 800eaf8:	dcf1      	bgt.n	800eade <_printf_float+0x40e>
 800eafa:	464b      	mov	r3, r9
 800eafc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800eb00:	e6dc      	b.n	800e8bc <_printf_float+0x1ec>
 800eb02:	f04f 0800 	mov.w	r8, #0
 800eb06:	f104 0a1a 	add.w	sl, r4, #26
 800eb0a:	e7f2      	b.n	800eaf2 <_printf_float+0x422>
 800eb0c:	2301      	movs	r3, #1
 800eb0e:	4642      	mov	r2, r8
 800eb10:	e7df      	b.n	800ead2 <_printf_float+0x402>
 800eb12:	2301      	movs	r3, #1
 800eb14:	464a      	mov	r2, r9
 800eb16:	4631      	mov	r1, r6
 800eb18:	4628      	mov	r0, r5
 800eb1a:	47b8      	blx	r7
 800eb1c:	3001      	adds	r0, #1
 800eb1e:	f43f ae38 	beq.w	800e792 <_printf_float+0xc2>
 800eb22:	f108 0801 	add.w	r8, r8, #1
 800eb26:	68e3      	ldr	r3, [r4, #12]
 800eb28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb2a:	1a5b      	subs	r3, r3, r1
 800eb2c:	4543      	cmp	r3, r8
 800eb2e:	dcf0      	bgt.n	800eb12 <_printf_float+0x442>
 800eb30:	e6fa      	b.n	800e928 <_printf_float+0x258>
 800eb32:	f04f 0800 	mov.w	r8, #0
 800eb36:	f104 0919 	add.w	r9, r4, #25
 800eb3a:	e7f4      	b.n	800eb26 <_printf_float+0x456>

0800eb3c <_printf_common>:
 800eb3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb40:	4616      	mov	r6, r2
 800eb42:	4699      	mov	r9, r3
 800eb44:	688a      	ldr	r2, [r1, #8]
 800eb46:	690b      	ldr	r3, [r1, #16]
 800eb48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eb4c:	4293      	cmp	r3, r2
 800eb4e:	bfb8      	it	lt
 800eb50:	4613      	movlt	r3, r2
 800eb52:	6033      	str	r3, [r6, #0]
 800eb54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb58:	4607      	mov	r7, r0
 800eb5a:	460c      	mov	r4, r1
 800eb5c:	b10a      	cbz	r2, 800eb62 <_printf_common+0x26>
 800eb5e:	3301      	adds	r3, #1
 800eb60:	6033      	str	r3, [r6, #0]
 800eb62:	6823      	ldr	r3, [r4, #0]
 800eb64:	0699      	lsls	r1, r3, #26
 800eb66:	bf42      	ittt	mi
 800eb68:	6833      	ldrmi	r3, [r6, #0]
 800eb6a:	3302      	addmi	r3, #2
 800eb6c:	6033      	strmi	r3, [r6, #0]
 800eb6e:	6825      	ldr	r5, [r4, #0]
 800eb70:	f015 0506 	ands.w	r5, r5, #6
 800eb74:	d106      	bne.n	800eb84 <_printf_common+0x48>
 800eb76:	f104 0a19 	add.w	sl, r4, #25
 800eb7a:	68e3      	ldr	r3, [r4, #12]
 800eb7c:	6832      	ldr	r2, [r6, #0]
 800eb7e:	1a9b      	subs	r3, r3, r2
 800eb80:	42ab      	cmp	r3, r5
 800eb82:	dc26      	bgt.n	800ebd2 <_printf_common+0x96>
 800eb84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eb88:	1e13      	subs	r3, r2, #0
 800eb8a:	6822      	ldr	r2, [r4, #0]
 800eb8c:	bf18      	it	ne
 800eb8e:	2301      	movne	r3, #1
 800eb90:	0692      	lsls	r2, r2, #26
 800eb92:	d42b      	bmi.n	800ebec <_printf_common+0xb0>
 800eb94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb98:	4649      	mov	r1, r9
 800eb9a:	4638      	mov	r0, r7
 800eb9c:	47c0      	blx	r8
 800eb9e:	3001      	adds	r0, #1
 800eba0:	d01e      	beq.n	800ebe0 <_printf_common+0xa4>
 800eba2:	6823      	ldr	r3, [r4, #0]
 800eba4:	68e5      	ldr	r5, [r4, #12]
 800eba6:	6832      	ldr	r2, [r6, #0]
 800eba8:	f003 0306 	and.w	r3, r3, #6
 800ebac:	2b04      	cmp	r3, #4
 800ebae:	bf08      	it	eq
 800ebb0:	1aad      	subeq	r5, r5, r2
 800ebb2:	68a3      	ldr	r3, [r4, #8]
 800ebb4:	6922      	ldr	r2, [r4, #16]
 800ebb6:	bf0c      	ite	eq
 800ebb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ebbc:	2500      	movne	r5, #0
 800ebbe:	4293      	cmp	r3, r2
 800ebc0:	bfc4      	itt	gt
 800ebc2:	1a9b      	subgt	r3, r3, r2
 800ebc4:	18ed      	addgt	r5, r5, r3
 800ebc6:	2600      	movs	r6, #0
 800ebc8:	341a      	adds	r4, #26
 800ebca:	42b5      	cmp	r5, r6
 800ebcc:	d11a      	bne.n	800ec04 <_printf_common+0xc8>
 800ebce:	2000      	movs	r0, #0
 800ebd0:	e008      	b.n	800ebe4 <_printf_common+0xa8>
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	4652      	mov	r2, sl
 800ebd6:	4649      	mov	r1, r9
 800ebd8:	4638      	mov	r0, r7
 800ebda:	47c0      	blx	r8
 800ebdc:	3001      	adds	r0, #1
 800ebde:	d103      	bne.n	800ebe8 <_printf_common+0xac>
 800ebe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ebe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebe8:	3501      	adds	r5, #1
 800ebea:	e7c6      	b.n	800eb7a <_printf_common+0x3e>
 800ebec:	18e1      	adds	r1, r4, r3
 800ebee:	1c5a      	adds	r2, r3, #1
 800ebf0:	2030      	movs	r0, #48	; 0x30
 800ebf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ebf6:	4422      	add	r2, r4
 800ebf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ebfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ec00:	3302      	adds	r3, #2
 800ec02:	e7c7      	b.n	800eb94 <_printf_common+0x58>
 800ec04:	2301      	movs	r3, #1
 800ec06:	4622      	mov	r2, r4
 800ec08:	4649      	mov	r1, r9
 800ec0a:	4638      	mov	r0, r7
 800ec0c:	47c0      	blx	r8
 800ec0e:	3001      	adds	r0, #1
 800ec10:	d0e6      	beq.n	800ebe0 <_printf_common+0xa4>
 800ec12:	3601      	adds	r6, #1
 800ec14:	e7d9      	b.n	800ebca <_printf_common+0x8e>
	...

0800ec18 <_printf_i>:
 800ec18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec1c:	460c      	mov	r4, r1
 800ec1e:	4691      	mov	r9, r2
 800ec20:	7e27      	ldrb	r7, [r4, #24]
 800ec22:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ec24:	2f78      	cmp	r7, #120	; 0x78
 800ec26:	4680      	mov	r8, r0
 800ec28:	469a      	mov	sl, r3
 800ec2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ec2e:	d807      	bhi.n	800ec40 <_printf_i+0x28>
 800ec30:	2f62      	cmp	r7, #98	; 0x62
 800ec32:	d80a      	bhi.n	800ec4a <_printf_i+0x32>
 800ec34:	2f00      	cmp	r7, #0
 800ec36:	f000 80d8 	beq.w	800edea <_printf_i+0x1d2>
 800ec3a:	2f58      	cmp	r7, #88	; 0x58
 800ec3c:	f000 80a3 	beq.w	800ed86 <_printf_i+0x16e>
 800ec40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ec44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ec48:	e03a      	b.n	800ecc0 <_printf_i+0xa8>
 800ec4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ec4e:	2b15      	cmp	r3, #21
 800ec50:	d8f6      	bhi.n	800ec40 <_printf_i+0x28>
 800ec52:	a001      	add	r0, pc, #4	; (adr r0, 800ec58 <_printf_i+0x40>)
 800ec54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ec58:	0800ecb1 	.word	0x0800ecb1
 800ec5c:	0800ecc5 	.word	0x0800ecc5
 800ec60:	0800ec41 	.word	0x0800ec41
 800ec64:	0800ec41 	.word	0x0800ec41
 800ec68:	0800ec41 	.word	0x0800ec41
 800ec6c:	0800ec41 	.word	0x0800ec41
 800ec70:	0800ecc5 	.word	0x0800ecc5
 800ec74:	0800ec41 	.word	0x0800ec41
 800ec78:	0800ec41 	.word	0x0800ec41
 800ec7c:	0800ec41 	.word	0x0800ec41
 800ec80:	0800ec41 	.word	0x0800ec41
 800ec84:	0800edd1 	.word	0x0800edd1
 800ec88:	0800ecf5 	.word	0x0800ecf5
 800ec8c:	0800edb3 	.word	0x0800edb3
 800ec90:	0800ec41 	.word	0x0800ec41
 800ec94:	0800ec41 	.word	0x0800ec41
 800ec98:	0800edf3 	.word	0x0800edf3
 800ec9c:	0800ec41 	.word	0x0800ec41
 800eca0:	0800ecf5 	.word	0x0800ecf5
 800eca4:	0800ec41 	.word	0x0800ec41
 800eca8:	0800ec41 	.word	0x0800ec41
 800ecac:	0800edbb 	.word	0x0800edbb
 800ecb0:	680b      	ldr	r3, [r1, #0]
 800ecb2:	1d1a      	adds	r2, r3, #4
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	600a      	str	r2, [r1, #0]
 800ecb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ecbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	e0a3      	b.n	800ee0c <_printf_i+0x1f4>
 800ecc4:	6825      	ldr	r5, [r4, #0]
 800ecc6:	6808      	ldr	r0, [r1, #0]
 800ecc8:	062e      	lsls	r6, r5, #24
 800ecca:	f100 0304 	add.w	r3, r0, #4
 800ecce:	d50a      	bpl.n	800ece6 <_printf_i+0xce>
 800ecd0:	6805      	ldr	r5, [r0, #0]
 800ecd2:	600b      	str	r3, [r1, #0]
 800ecd4:	2d00      	cmp	r5, #0
 800ecd6:	da03      	bge.n	800ece0 <_printf_i+0xc8>
 800ecd8:	232d      	movs	r3, #45	; 0x2d
 800ecda:	426d      	negs	r5, r5
 800ecdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ece0:	485e      	ldr	r0, [pc, #376]	; (800ee5c <_printf_i+0x244>)
 800ece2:	230a      	movs	r3, #10
 800ece4:	e019      	b.n	800ed1a <_printf_i+0x102>
 800ece6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ecea:	6805      	ldr	r5, [r0, #0]
 800ecec:	600b      	str	r3, [r1, #0]
 800ecee:	bf18      	it	ne
 800ecf0:	b22d      	sxthne	r5, r5
 800ecf2:	e7ef      	b.n	800ecd4 <_printf_i+0xbc>
 800ecf4:	680b      	ldr	r3, [r1, #0]
 800ecf6:	6825      	ldr	r5, [r4, #0]
 800ecf8:	1d18      	adds	r0, r3, #4
 800ecfa:	6008      	str	r0, [r1, #0]
 800ecfc:	0628      	lsls	r0, r5, #24
 800ecfe:	d501      	bpl.n	800ed04 <_printf_i+0xec>
 800ed00:	681d      	ldr	r5, [r3, #0]
 800ed02:	e002      	b.n	800ed0a <_printf_i+0xf2>
 800ed04:	0669      	lsls	r1, r5, #25
 800ed06:	d5fb      	bpl.n	800ed00 <_printf_i+0xe8>
 800ed08:	881d      	ldrh	r5, [r3, #0]
 800ed0a:	4854      	ldr	r0, [pc, #336]	; (800ee5c <_printf_i+0x244>)
 800ed0c:	2f6f      	cmp	r7, #111	; 0x6f
 800ed0e:	bf0c      	ite	eq
 800ed10:	2308      	moveq	r3, #8
 800ed12:	230a      	movne	r3, #10
 800ed14:	2100      	movs	r1, #0
 800ed16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ed1a:	6866      	ldr	r6, [r4, #4]
 800ed1c:	60a6      	str	r6, [r4, #8]
 800ed1e:	2e00      	cmp	r6, #0
 800ed20:	bfa2      	ittt	ge
 800ed22:	6821      	ldrge	r1, [r4, #0]
 800ed24:	f021 0104 	bicge.w	r1, r1, #4
 800ed28:	6021      	strge	r1, [r4, #0]
 800ed2a:	b90d      	cbnz	r5, 800ed30 <_printf_i+0x118>
 800ed2c:	2e00      	cmp	r6, #0
 800ed2e:	d04d      	beq.n	800edcc <_printf_i+0x1b4>
 800ed30:	4616      	mov	r6, r2
 800ed32:	fbb5 f1f3 	udiv	r1, r5, r3
 800ed36:	fb03 5711 	mls	r7, r3, r1, r5
 800ed3a:	5dc7      	ldrb	r7, [r0, r7]
 800ed3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ed40:	462f      	mov	r7, r5
 800ed42:	42bb      	cmp	r3, r7
 800ed44:	460d      	mov	r5, r1
 800ed46:	d9f4      	bls.n	800ed32 <_printf_i+0x11a>
 800ed48:	2b08      	cmp	r3, #8
 800ed4a:	d10b      	bne.n	800ed64 <_printf_i+0x14c>
 800ed4c:	6823      	ldr	r3, [r4, #0]
 800ed4e:	07df      	lsls	r7, r3, #31
 800ed50:	d508      	bpl.n	800ed64 <_printf_i+0x14c>
 800ed52:	6923      	ldr	r3, [r4, #16]
 800ed54:	6861      	ldr	r1, [r4, #4]
 800ed56:	4299      	cmp	r1, r3
 800ed58:	bfde      	ittt	le
 800ed5a:	2330      	movle	r3, #48	; 0x30
 800ed5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ed60:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800ed64:	1b92      	subs	r2, r2, r6
 800ed66:	6122      	str	r2, [r4, #16]
 800ed68:	f8cd a000 	str.w	sl, [sp]
 800ed6c:	464b      	mov	r3, r9
 800ed6e:	aa03      	add	r2, sp, #12
 800ed70:	4621      	mov	r1, r4
 800ed72:	4640      	mov	r0, r8
 800ed74:	f7ff fee2 	bl	800eb3c <_printf_common>
 800ed78:	3001      	adds	r0, #1
 800ed7a:	d14c      	bne.n	800ee16 <_printf_i+0x1fe>
 800ed7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed80:	b004      	add	sp, #16
 800ed82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed86:	4835      	ldr	r0, [pc, #212]	; (800ee5c <_printf_i+0x244>)
 800ed88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ed8c:	6823      	ldr	r3, [r4, #0]
 800ed8e:	680e      	ldr	r6, [r1, #0]
 800ed90:	061f      	lsls	r7, r3, #24
 800ed92:	f856 5b04 	ldr.w	r5, [r6], #4
 800ed96:	600e      	str	r6, [r1, #0]
 800ed98:	d514      	bpl.n	800edc4 <_printf_i+0x1ac>
 800ed9a:	07d9      	lsls	r1, r3, #31
 800ed9c:	bf44      	itt	mi
 800ed9e:	f043 0320 	orrmi.w	r3, r3, #32
 800eda2:	6023      	strmi	r3, [r4, #0]
 800eda4:	b91d      	cbnz	r5, 800edae <_printf_i+0x196>
 800eda6:	6823      	ldr	r3, [r4, #0]
 800eda8:	f023 0320 	bic.w	r3, r3, #32
 800edac:	6023      	str	r3, [r4, #0]
 800edae:	2310      	movs	r3, #16
 800edb0:	e7b0      	b.n	800ed14 <_printf_i+0xfc>
 800edb2:	6823      	ldr	r3, [r4, #0]
 800edb4:	f043 0320 	orr.w	r3, r3, #32
 800edb8:	6023      	str	r3, [r4, #0]
 800edba:	2378      	movs	r3, #120	; 0x78
 800edbc:	4828      	ldr	r0, [pc, #160]	; (800ee60 <_printf_i+0x248>)
 800edbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800edc2:	e7e3      	b.n	800ed8c <_printf_i+0x174>
 800edc4:	065e      	lsls	r6, r3, #25
 800edc6:	bf48      	it	mi
 800edc8:	b2ad      	uxthmi	r5, r5
 800edca:	e7e6      	b.n	800ed9a <_printf_i+0x182>
 800edcc:	4616      	mov	r6, r2
 800edce:	e7bb      	b.n	800ed48 <_printf_i+0x130>
 800edd0:	680b      	ldr	r3, [r1, #0]
 800edd2:	6826      	ldr	r6, [r4, #0]
 800edd4:	6960      	ldr	r0, [r4, #20]
 800edd6:	1d1d      	adds	r5, r3, #4
 800edd8:	600d      	str	r5, [r1, #0]
 800edda:	0635      	lsls	r5, r6, #24
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	d501      	bpl.n	800ede4 <_printf_i+0x1cc>
 800ede0:	6018      	str	r0, [r3, #0]
 800ede2:	e002      	b.n	800edea <_printf_i+0x1d2>
 800ede4:	0671      	lsls	r1, r6, #25
 800ede6:	d5fb      	bpl.n	800ede0 <_printf_i+0x1c8>
 800ede8:	8018      	strh	r0, [r3, #0]
 800edea:	2300      	movs	r3, #0
 800edec:	6123      	str	r3, [r4, #16]
 800edee:	4616      	mov	r6, r2
 800edf0:	e7ba      	b.n	800ed68 <_printf_i+0x150>
 800edf2:	680b      	ldr	r3, [r1, #0]
 800edf4:	1d1a      	adds	r2, r3, #4
 800edf6:	600a      	str	r2, [r1, #0]
 800edf8:	681e      	ldr	r6, [r3, #0]
 800edfa:	6862      	ldr	r2, [r4, #4]
 800edfc:	2100      	movs	r1, #0
 800edfe:	4630      	mov	r0, r6
 800ee00:	f7f1 fa0e 	bl	8000220 <memchr>
 800ee04:	b108      	cbz	r0, 800ee0a <_printf_i+0x1f2>
 800ee06:	1b80      	subs	r0, r0, r6
 800ee08:	6060      	str	r0, [r4, #4]
 800ee0a:	6863      	ldr	r3, [r4, #4]
 800ee0c:	6123      	str	r3, [r4, #16]
 800ee0e:	2300      	movs	r3, #0
 800ee10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee14:	e7a8      	b.n	800ed68 <_printf_i+0x150>
 800ee16:	6923      	ldr	r3, [r4, #16]
 800ee18:	4632      	mov	r2, r6
 800ee1a:	4649      	mov	r1, r9
 800ee1c:	4640      	mov	r0, r8
 800ee1e:	47d0      	blx	sl
 800ee20:	3001      	adds	r0, #1
 800ee22:	d0ab      	beq.n	800ed7c <_printf_i+0x164>
 800ee24:	6823      	ldr	r3, [r4, #0]
 800ee26:	079b      	lsls	r3, r3, #30
 800ee28:	d413      	bmi.n	800ee52 <_printf_i+0x23a>
 800ee2a:	68e0      	ldr	r0, [r4, #12]
 800ee2c:	9b03      	ldr	r3, [sp, #12]
 800ee2e:	4298      	cmp	r0, r3
 800ee30:	bfb8      	it	lt
 800ee32:	4618      	movlt	r0, r3
 800ee34:	e7a4      	b.n	800ed80 <_printf_i+0x168>
 800ee36:	2301      	movs	r3, #1
 800ee38:	4632      	mov	r2, r6
 800ee3a:	4649      	mov	r1, r9
 800ee3c:	4640      	mov	r0, r8
 800ee3e:	47d0      	blx	sl
 800ee40:	3001      	adds	r0, #1
 800ee42:	d09b      	beq.n	800ed7c <_printf_i+0x164>
 800ee44:	3501      	adds	r5, #1
 800ee46:	68e3      	ldr	r3, [r4, #12]
 800ee48:	9903      	ldr	r1, [sp, #12]
 800ee4a:	1a5b      	subs	r3, r3, r1
 800ee4c:	42ab      	cmp	r3, r5
 800ee4e:	dcf2      	bgt.n	800ee36 <_printf_i+0x21e>
 800ee50:	e7eb      	b.n	800ee2a <_printf_i+0x212>
 800ee52:	2500      	movs	r5, #0
 800ee54:	f104 0619 	add.w	r6, r4, #25
 800ee58:	e7f5      	b.n	800ee46 <_printf_i+0x22e>
 800ee5a:	bf00      	nop
 800ee5c:	080117fa 	.word	0x080117fa
 800ee60:	0801180b 	.word	0x0801180b

0800ee64 <_sbrk_r>:
 800ee64:	b538      	push	{r3, r4, r5, lr}
 800ee66:	4d06      	ldr	r5, [pc, #24]	; (800ee80 <_sbrk_r+0x1c>)
 800ee68:	2300      	movs	r3, #0
 800ee6a:	4604      	mov	r4, r0
 800ee6c:	4608      	mov	r0, r1
 800ee6e:	602b      	str	r3, [r5, #0]
 800ee70:	f7f4 faf8 	bl	8003464 <_sbrk>
 800ee74:	1c43      	adds	r3, r0, #1
 800ee76:	d102      	bne.n	800ee7e <_sbrk_r+0x1a>
 800ee78:	682b      	ldr	r3, [r5, #0]
 800ee7a:	b103      	cbz	r3, 800ee7e <_sbrk_r+0x1a>
 800ee7c:	6023      	str	r3, [r4, #0]
 800ee7e:	bd38      	pop	{r3, r4, r5, pc}
 800ee80:	2000170c 	.word	0x2000170c

0800ee84 <siprintf>:
 800ee84:	b40e      	push	{r1, r2, r3}
 800ee86:	b500      	push	{lr}
 800ee88:	b09c      	sub	sp, #112	; 0x70
 800ee8a:	ab1d      	add	r3, sp, #116	; 0x74
 800ee8c:	9002      	str	r0, [sp, #8]
 800ee8e:	9006      	str	r0, [sp, #24]
 800ee90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ee94:	4809      	ldr	r0, [pc, #36]	; (800eebc <siprintf+0x38>)
 800ee96:	9107      	str	r1, [sp, #28]
 800ee98:	9104      	str	r1, [sp, #16]
 800ee9a:	4909      	ldr	r1, [pc, #36]	; (800eec0 <siprintf+0x3c>)
 800ee9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800eea0:	9105      	str	r1, [sp, #20]
 800eea2:	6800      	ldr	r0, [r0, #0]
 800eea4:	9301      	str	r3, [sp, #4]
 800eea6:	a902      	add	r1, sp, #8
 800eea8:	f001 faa4 	bl	80103f4 <_svfiprintf_r>
 800eeac:	9b02      	ldr	r3, [sp, #8]
 800eeae:	2200      	movs	r2, #0
 800eeb0:	701a      	strb	r2, [r3, #0]
 800eeb2:	b01c      	add	sp, #112	; 0x70
 800eeb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800eeb8:	b003      	add	sp, #12
 800eeba:	4770      	bx	lr
 800eebc:	200005e4 	.word	0x200005e4
 800eec0:	ffff0208 	.word	0xffff0208

0800eec4 <quorem>:
 800eec4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eec8:	6903      	ldr	r3, [r0, #16]
 800eeca:	690c      	ldr	r4, [r1, #16]
 800eecc:	42a3      	cmp	r3, r4
 800eece:	4607      	mov	r7, r0
 800eed0:	f2c0 8081 	blt.w	800efd6 <quorem+0x112>
 800eed4:	3c01      	subs	r4, #1
 800eed6:	f101 0814 	add.w	r8, r1, #20
 800eeda:	f100 0514 	add.w	r5, r0, #20
 800eede:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eee2:	9301      	str	r3, [sp, #4]
 800eee4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eee8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eeec:	3301      	adds	r3, #1
 800eeee:	429a      	cmp	r2, r3
 800eef0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800eef4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eef8:	fbb2 f6f3 	udiv	r6, r2, r3
 800eefc:	d331      	bcc.n	800ef62 <quorem+0x9e>
 800eefe:	f04f 0e00 	mov.w	lr, #0
 800ef02:	4640      	mov	r0, r8
 800ef04:	46ac      	mov	ip, r5
 800ef06:	46f2      	mov	sl, lr
 800ef08:	f850 2b04 	ldr.w	r2, [r0], #4
 800ef0c:	b293      	uxth	r3, r2
 800ef0e:	fb06 e303 	mla	r3, r6, r3, lr
 800ef12:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ef16:	b29b      	uxth	r3, r3
 800ef18:	ebaa 0303 	sub.w	r3, sl, r3
 800ef1c:	0c12      	lsrs	r2, r2, #16
 800ef1e:	f8dc a000 	ldr.w	sl, [ip]
 800ef22:	fb06 e202 	mla	r2, r6, r2, lr
 800ef26:	fa13 f38a 	uxtah	r3, r3, sl
 800ef2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ef2e:	fa1f fa82 	uxth.w	sl, r2
 800ef32:	f8dc 2000 	ldr.w	r2, [ip]
 800ef36:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ef3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ef3e:	b29b      	uxth	r3, r3
 800ef40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef44:	4581      	cmp	r9, r0
 800ef46:	f84c 3b04 	str.w	r3, [ip], #4
 800ef4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ef4e:	d2db      	bcs.n	800ef08 <quorem+0x44>
 800ef50:	f855 300b 	ldr.w	r3, [r5, fp]
 800ef54:	b92b      	cbnz	r3, 800ef62 <quorem+0x9e>
 800ef56:	9b01      	ldr	r3, [sp, #4]
 800ef58:	3b04      	subs	r3, #4
 800ef5a:	429d      	cmp	r5, r3
 800ef5c:	461a      	mov	r2, r3
 800ef5e:	d32e      	bcc.n	800efbe <quorem+0xfa>
 800ef60:	613c      	str	r4, [r7, #16]
 800ef62:	4638      	mov	r0, r7
 800ef64:	f001 f8b6 	bl	80100d4 <__mcmp>
 800ef68:	2800      	cmp	r0, #0
 800ef6a:	db24      	blt.n	800efb6 <quorem+0xf2>
 800ef6c:	3601      	adds	r6, #1
 800ef6e:	4628      	mov	r0, r5
 800ef70:	f04f 0c00 	mov.w	ip, #0
 800ef74:	f858 2b04 	ldr.w	r2, [r8], #4
 800ef78:	f8d0 e000 	ldr.w	lr, [r0]
 800ef7c:	b293      	uxth	r3, r2
 800ef7e:	ebac 0303 	sub.w	r3, ip, r3
 800ef82:	0c12      	lsrs	r2, r2, #16
 800ef84:	fa13 f38e 	uxtah	r3, r3, lr
 800ef88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ef8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ef90:	b29b      	uxth	r3, r3
 800ef92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef96:	45c1      	cmp	r9, r8
 800ef98:	f840 3b04 	str.w	r3, [r0], #4
 800ef9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800efa0:	d2e8      	bcs.n	800ef74 <quorem+0xb0>
 800efa2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800efa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800efaa:	b922      	cbnz	r2, 800efb6 <quorem+0xf2>
 800efac:	3b04      	subs	r3, #4
 800efae:	429d      	cmp	r5, r3
 800efb0:	461a      	mov	r2, r3
 800efb2:	d30a      	bcc.n	800efca <quorem+0x106>
 800efb4:	613c      	str	r4, [r7, #16]
 800efb6:	4630      	mov	r0, r6
 800efb8:	b003      	add	sp, #12
 800efba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efbe:	6812      	ldr	r2, [r2, #0]
 800efc0:	3b04      	subs	r3, #4
 800efc2:	2a00      	cmp	r2, #0
 800efc4:	d1cc      	bne.n	800ef60 <quorem+0x9c>
 800efc6:	3c01      	subs	r4, #1
 800efc8:	e7c7      	b.n	800ef5a <quorem+0x96>
 800efca:	6812      	ldr	r2, [r2, #0]
 800efcc:	3b04      	subs	r3, #4
 800efce:	2a00      	cmp	r2, #0
 800efd0:	d1f0      	bne.n	800efb4 <quorem+0xf0>
 800efd2:	3c01      	subs	r4, #1
 800efd4:	e7eb      	b.n	800efae <quorem+0xea>
 800efd6:	2000      	movs	r0, #0
 800efd8:	e7ee      	b.n	800efb8 <quorem+0xf4>
 800efda:	0000      	movs	r0, r0
 800efdc:	0000      	movs	r0, r0
	...

0800efe0 <_dtoa_r>:
 800efe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efe4:	ed2d 8b02 	vpush	{d8}
 800efe8:	ec57 6b10 	vmov	r6, r7, d0
 800efec:	b095      	sub	sp, #84	; 0x54
 800efee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800eff0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800eff4:	9105      	str	r1, [sp, #20]
 800eff6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800effa:	4604      	mov	r4, r0
 800effc:	9209      	str	r2, [sp, #36]	; 0x24
 800effe:	930f      	str	r3, [sp, #60]	; 0x3c
 800f000:	b975      	cbnz	r5, 800f020 <_dtoa_r+0x40>
 800f002:	2010      	movs	r0, #16
 800f004:	f7ff f9fc 	bl	800e400 <malloc>
 800f008:	4602      	mov	r2, r0
 800f00a:	6260      	str	r0, [r4, #36]	; 0x24
 800f00c:	b920      	cbnz	r0, 800f018 <_dtoa_r+0x38>
 800f00e:	4bb2      	ldr	r3, [pc, #712]	; (800f2d8 <_dtoa_r+0x2f8>)
 800f010:	21ea      	movs	r1, #234	; 0xea
 800f012:	48b2      	ldr	r0, [pc, #712]	; (800f2dc <_dtoa_r+0x2fc>)
 800f014:	f001 faee 	bl	80105f4 <__assert_func>
 800f018:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f01c:	6005      	str	r5, [r0, #0]
 800f01e:	60c5      	str	r5, [r0, #12]
 800f020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f022:	6819      	ldr	r1, [r3, #0]
 800f024:	b151      	cbz	r1, 800f03c <_dtoa_r+0x5c>
 800f026:	685a      	ldr	r2, [r3, #4]
 800f028:	604a      	str	r2, [r1, #4]
 800f02a:	2301      	movs	r3, #1
 800f02c:	4093      	lsls	r3, r2
 800f02e:	608b      	str	r3, [r1, #8]
 800f030:	4620      	mov	r0, r4
 800f032:	f000 fe11 	bl	800fc58 <_Bfree>
 800f036:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f038:	2200      	movs	r2, #0
 800f03a:	601a      	str	r2, [r3, #0]
 800f03c:	1e3b      	subs	r3, r7, #0
 800f03e:	bfb9      	ittee	lt
 800f040:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f044:	9303      	strlt	r3, [sp, #12]
 800f046:	2300      	movge	r3, #0
 800f048:	f8c8 3000 	strge.w	r3, [r8]
 800f04c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f050:	4ba3      	ldr	r3, [pc, #652]	; (800f2e0 <_dtoa_r+0x300>)
 800f052:	bfbc      	itt	lt
 800f054:	2201      	movlt	r2, #1
 800f056:	f8c8 2000 	strlt.w	r2, [r8]
 800f05a:	ea33 0309 	bics.w	r3, r3, r9
 800f05e:	d11b      	bne.n	800f098 <_dtoa_r+0xb8>
 800f060:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f062:	f242 730f 	movw	r3, #9999	; 0x270f
 800f066:	6013      	str	r3, [r2, #0]
 800f068:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f06c:	4333      	orrs	r3, r6
 800f06e:	f000 857a 	beq.w	800fb66 <_dtoa_r+0xb86>
 800f072:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f074:	b963      	cbnz	r3, 800f090 <_dtoa_r+0xb0>
 800f076:	4b9b      	ldr	r3, [pc, #620]	; (800f2e4 <_dtoa_r+0x304>)
 800f078:	e024      	b.n	800f0c4 <_dtoa_r+0xe4>
 800f07a:	4b9b      	ldr	r3, [pc, #620]	; (800f2e8 <_dtoa_r+0x308>)
 800f07c:	9300      	str	r3, [sp, #0]
 800f07e:	3308      	adds	r3, #8
 800f080:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f082:	6013      	str	r3, [r2, #0]
 800f084:	9800      	ldr	r0, [sp, #0]
 800f086:	b015      	add	sp, #84	; 0x54
 800f088:	ecbd 8b02 	vpop	{d8}
 800f08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f090:	4b94      	ldr	r3, [pc, #592]	; (800f2e4 <_dtoa_r+0x304>)
 800f092:	9300      	str	r3, [sp, #0]
 800f094:	3303      	adds	r3, #3
 800f096:	e7f3      	b.n	800f080 <_dtoa_r+0xa0>
 800f098:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f09c:	2200      	movs	r2, #0
 800f09e:	ec51 0b17 	vmov	r0, r1, d7
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f0a8:	f7f1 fd2e 	bl	8000b08 <__aeabi_dcmpeq>
 800f0ac:	4680      	mov	r8, r0
 800f0ae:	b158      	cbz	r0, 800f0c8 <_dtoa_r+0xe8>
 800f0b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	6013      	str	r3, [r2, #0]
 800f0b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	f000 8551 	beq.w	800fb60 <_dtoa_r+0xb80>
 800f0be:	488b      	ldr	r0, [pc, #556]	; (800f2ec <_dtoa_r+0x30c>)
 800f0c0:	6018      	str	r0, [r3, #0]
 800f0c2:	1e43      	subs	r3, r0, #1
 800f0c4:	9300      	str	r3, [sp, #0]
 800f0c6:	e7dd      	b.n	800f084 <_dtoa_r+0xa4>
 800f0c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f0cc:	aa12      	add	r2, sp, #72	; 0x48
 800f0ce:	a913      	add	r1, sp, #76	; 0x4c
 800f0d0:	4620      	mov	r0, r4
 800f0d2:	f001 f8a3 	bl	801021c <__d2b>
 800f0d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f0da:	4683      	mov	fp, r0
 800f0dc:	2d00      	cmp	r5, #0
 800f0de:	d07c      	beq.n	800f1da <_dtoa_r+0x1fa>
 800f0e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f0e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f0ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f0ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f0f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f0f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f0fa:	4b7d      	ldr	r3, [pc, #500]	; (800f2f0 <_dtoa_r+0x310>)
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	4630      	mov	r0, r6
 800f100:	4639      	mov	r1, r7
 800f102:	f7f1 f8e1 	bl	80002c8 <__aeabi_dsub>
 800f106:	a36e      	add	r3, pc, #440	; (adr r3, 800f2c0 <_dtoa_r+0x2e0>)
 800f108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f10c:	f7f1 fa94 	bl	8000638 <__aeabi_dmul>
 800f110:	a36d      	add	r3, pc, #436	; (adr r3, 800f2c8 <_dtoa_r+0x2e8>)
 800f112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f116:	f7f1 f8d9 	bl	80002cc <__adddf3>
 800f11a:	4606      	mov	r6, r0
 800f11c:	4628      	mov	r0, r5
 800f11e:	460f      	mov	r7, r1
 800f120:	f7f1 fa20 	bl	8000564 <__aeabi_i2d>
 800f124:	a36a      	add	r3, pc, #424	; (adr r3, 800f2d0 <_dtoa_r+0x2f0>)
 800f126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f12a:	f7f1 fa85 	bl	8000638 <__aeabi_dmul>
 800f12e:	4602      	mov	r2, r0
 800f130:	460b      	mov	r3, r1
 800f132:	4630      	mov	r0, r6
 800f134:	4639      	mov	r1, r7
 800f136:	f7f1 f8c9 	bl	80002cc <__adddf3>
 800f13a:	4606      	mov	r6, r0
 800f13c:	460f      	mov	r7, r1
 800f13e:	f7f1 fd2b 	bl	8000b98 <__aeabi_d2iz>
 800f142:	2200      	movs	r2, #0
 800f144:	4682      	mov	sl, r0
 800f146:	2300      	movs	r3, #0
 800f148:	4630      	mov	r0, r6
 800f14a:	4639      	mov	r1, r7
 800f14c:	f7f1 fce6 	bl	8000b1c <__aeabi_dcmplt>
 800f150:	b148      	cbz	r0, 800f166 <_dtoa_r+0x186>
 800f152:	4650      	mov	r0, sl
 800f154:	f7f1 fa06 	bl	8000564 <__aeabi_i2d>
 800f158:	4632      	mov	r2, r6
 800f15a:	463b      	mov	r3, r7
 800f15c:	f7f1 fcd4 	bl	8000b08 <__aeabi_dcmpeq>
 800f160:	b908      	cbnz	r0, 800f166 <_dtoa_r+0x186>
 800f162:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f166:	f1ba 0f16 	cmp.w	sl, #22
 800f16a:	d854      	bhi.n	800f216 <_dtoa_r+0x236>
 800f16c:	4b61      	ldr	r3, [pc, #388]	; (800f2f4 <_dtoa_r+0x314>)
 800f16e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f176:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f17a:	f7f1 fccf 	bl	8000b1c <__aeabi_dcmplt>
 800f17e:	2800      	cmp	r0, #0
 800f180:	d04b      	beq.n	800f21a <_dtoa_r+0x23a>
 800f182:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f186:	2300      	movs	r3, #0
 800f188:	930e      	str	r3, [sp, #56]	; 0x38
 800f18a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f18c:	1b5d      	subs	r5, r3, r5
 800f18e:	1e6b      	subs	r3, r5, #1
 800f190:	9304      	str	r3, [sp, #16]
 800f192:	bf43      	ittte	mi
 800f194:	2300      	movmi	r3, #0
 800f196:	f1c5 0801 	rsbmi	r8, r5, #1
 800f19a:	9304      	strmi	r3, [sp, #16]
 800f19c:	f04f 0800 	movpl.w	r8, #0
 800f1a0:	f1ba 0f00 	cmp.w	sl, #0
 800f1a4:	db3b      	blt.n	800f21e <_dtoa_r+0x23e>
 800f1a6:	9b04      	ldr	r3, [sp, #16]
 800f1a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f1ac:	4453      	add	r3, sl
 800f1ae:	9304      	str	r3, [sp, #16]
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	9306      	str	r3, [sp, #24]
 800f1b4:	9b05      	ldr	r3, [sp, #20]
 800f1b6:	2b09      	cmp	r3, #9
 800f1b8:	d869      	bhi.n	800f28e <_dtoa_r+0x2ae>
 800f1ba:	2b05      	cmp	r3, #5
 800f1bc:	bfc4      	itt	gt
 800f1be:	3b04      	subgt	r3, #4
 800f1c0:	9305      	strgt	r3, [sp, #20]
 800f1c2:	9b05      	ldr	r3, [sp, #20]
 800f1c4:	f1a3 0302 	sub.w	r3, r3, #2
 800f1c8:	bfcc      	ite	gt
 800f1ca:	2500      	movgt	r5, #0
 800f1cc:	2501      	movle	r5, #1
 800f1ce:	2b03      	cmp	r3, #3
 800f1d0:	d869      	bhi.n	800f2a6 <_dtoa_r+0x2c6>
 800f1d2:	e8df f003 	tbb	[pc, r3]
 800f1d6:	4e2c      	.short	0x4e2c
 800f1d8:	5a4c      	.short	0x5a4c
 800f1da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f1de:	441d      	add	r5, r3
 800f1e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f1e4:	2b20      	cmp	r3, #32
 800f1e6:	bfc1      	itttt	gt
 800f1e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f1ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f1f0:	fa09 f303 	lslgt.w	r3, r9, r3
 800f1f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f1f8:	bfda      	itte	le
 800f1fa:	f1c3 0320 	rsble	r3, r3, #32
 800f1fe:	fa06 f003 	lslle.w	r0, r6, r3
 800f202:	4318      	orrgt	r0, r3
 800f204:	f7f1 f99e 	bl	8000544 <__aeabi_ui2d>
 800f208:	2301      	movs	r3, #1
 800f20a:	4606      	mov	r6, r0
 800f20c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f210:	3d01      	subs	r5, #1
 800f212:	9310      	str	r3, [sp, #64]	; 0x40
 800f214:	e771      	b.n	800f0fa <_dtoa_r+0x11a>
 800f216:	2301      	movs	r3, #1
 800f218:	e7b6      	b.n	800f188 <_dtoa_r+0x1a8>
 800f21a:	900e      	str	r0, [sp, #56]	; 0x38
 800f21c:	e7b5      	b.n	800f18a <_dtoa_r+0x1aa>
 800f21e:	f1ca 0300 	rsb	r3, sl, #0
 800f222:	9306      	str	r3, [sp, #24]
 800f224:	2300      	movs	r3, #0
 800f226:	eba8 080a 	sub.w	r8, r8, sl
 800f22a:	930d      	str	r3, [sp, #52]	; 0x34
 800f22c:	e7c2      	b.n	800f1b4 <_dtoa_r+0x1d4>
 800f22e:	2300      	movs	r3, #0
 800f230:	9308      	str	r3, [sp, #32]
 800f232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f234:	2b00      	cmp	r3, #0
 800f236:	dc39      	bgt.n	800f2ac <_dtoa_r+0x2cc>
 800f238:	f04f 0901 	mov.w	r9, #1
 800f23c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f240:	464b      	mov	r3, r9
 800f242:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f246:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f248:	2200      	movs	r2, #0
 800f24a:	6042      	str	r2, [r0, #4]
 800f24c:	2204      	movs	r2, #4
 800f24e:	f102 0614 	add.w	r6, r2, #20
 800f252:	429e      	cmp	r6, r3
 800f254:	6841      	ldr	r1, [r0, #4]
 800f256:	d92f      	bls.n	800f2b8 <_dtoa_r+0x2d8>
 800f258:	4620      	mov	r0, r4
 800f25a:	f000 fcbd 	bl	800fbd8 <_Balloc>
 800f25e:	9000      	str	r0, [sp, #0]
 800f260:	2800      	cmp	r0, #0
 800f262:	d14b      	bne.n	800f2fc <_dtoa_r+0x31c>
 800f264:	4b24      	ldr	r3, [pc, #144]	; (800f2f8 <_dtoa_r+0x318>)
 800f266:	4602      	mov	r2, r0
 800f268:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f26c:	e6d1      	b.n	800f012 <_dtoa_r+0x32>
 800f26e:	2301      	movs	r3, #1
 800f270:	e7de      	b.n	800f230 <_dtoa_r+0x250>
 800f272:	2300      	movs	r3, #0
 800f274:	9308      	str	r3, [sp, #32]
 800f276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f278:	eb0a 0903 	add.w	r9, sl, r3
 800f27c:	f109 0301 	add.w	r3, r9, #1
 800f280:	2b01      	cmp	r3, #1
 800f282:	9301      	str	r3, [sp, #4]
 800f284:	bfb8      	it	lt
 800f286:	2301      	movlt	r3, #1
 800f288:	e7dd      	b.n	800f246 <_dtoa_r+0x266>
 800f28a:	2301      	movs	r3, #1
 800f28c:	e7f2      	b.n	800f274 <_dtoa_r+0x294>
 800f28e:	2501      	movs	r5, #1
 800f290:	2300      	movs	r3, #0
 800f292:	9305      	str	r3, [sp, #20]
 800f294:	9508      	str	r5, [sp, #32]
 800f296:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800f29a:	2200      	movs	r2, #0
 800f29c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f2a0:	2312      	movs	r3, #18
 800f2a2:	9209      	str	r2, [sp, #36]	; 0x24
 800f2a4:	e7cf      	b.n	800f246 <_dtoa_r+0x266>
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	9308      	str	r3, [sp, #32]
 800f2aa:	e7f4      	b.n	800f296 <_dtoa_r+0x2b6>
 800f2ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f2b0:	f8cd 9004 	str.w	r9, [sp, #4]
 800f2b4:	464b      	mov	r3, r9
 800f2b6:	e7c6      	b.n	800f246 <_dtoa_r+0x266>
 800f2b8:	3101      	adds	r1, #1
 800f2ba:	6041      	str	r1, [r0, #4]
 800f2bc:	0052      	lsls	r2, r2, #1
 800f2be:	e7c6      	b.n	800f24e <_dtoa_r+0x26e>
 800f2c0:	636f4361 	.word	0x636f4361
 800f2c4:	3fd287a7 	.word	0x3fd287a7
 800f2c8:	8b60c8b3 	.word	0x8b60c8b3
 800f2cc:	3fc68a28 	.word	0x3fc68a28
 800f2d0:	509f79fb 	.word	0x509f79fb
 800f2d4:	3fd34413 	.word	0x3fd34413
 800f2d8:	08011829 	.word	0x08011829
 800f2dc:	08011840 	.word	0x08011840
 800f2e0:	7ff00000 	.word	0x7ff00000
 800f2e4:	08011825 	.word	0x08011825
 800f2e8:	0801181c 	.word	0x0801181c
 800f2ec:	080117f9 	.word	0x080117f9
 800f2f0:	3ff80000 	.word	0x3ff80000
 800f2f4:	08011938 	.word	0x08011938
 800f2f8:	0801189f 	.word	0x0801189f
 800f2fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2fe:	9a00      	ldr	r2, [sp, #0]
 800f300:	601a      	str	r2, [r3, #0]
 800f302:	9b01      	ldr	r3, [sp, #4]
 800f304:	2b0e      	cmp	r3, #14
 800f306:	f200 80ad 	bhi.w	800f464 <_dtoa_r+0x484>
 800f30a:	2d00      	cmp	r5, #0
 800f30c:	f000 80aa 	beq.w	800f464 <_dtoa_r+0x484>
 800f310:	f1ba 0f00 	cmp.w	sl, #0
 800f314:	dd36      	ble.n	800f384 <_dtoa_r+0x3a4>
 800f316:	4ac3      	ldr	r2, [pc, #780]	; (800f624 <_dtoa_r+0x644>)
 800f318:	f00a 030f 	and.w	r3, sl, #15
 800f31c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f320:	ed93 7b00 	vldr	d7, [r3]
 800f324:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f328:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f32c:	eeb0 8a47 	vmov.f32	s16, s14
 800f330:	eef0 8a67 	vmov.f32	s17, s15
 800f334:	d016      	beq.n	800f364 <_dtoa_r+0x384>
 800f336:	4bbc      	ldr	r3, [pc, #752]	; (800f628 <_dtoa_r+0x648>)
 800f338:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f33c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f340:	f7f1 faa4 	bl	800088c <__aeabi_ddiv>
 800f344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f348:	f007 070f 	and.w	r7, r7, #15
 800f34c:	2503      	movs	r5, #3
 800f34e:	4eb6      	ldr	r6, [pc, #728]	; (800f628 <_dtoa_r+0x648>)
 800f350:	b957      	cbnz	r7, 800f368 <_dtoa_r+0x388>
 800f352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f356:	ec53 2b18 	vmov	r2, r3, d8
 800f35a:	f7f1 fa97 	bl	800088c <__aeabi_ddiv>
 800f35e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f362:	e029      	b.n	800f3b8 <_dtoa_r+0x3d8>
 800f364:	2502      	movs	r5, #2
 800f366:	e7f2      	b.n	800f34e <_dtoa_r+0x36e>
 800f368:	07f9      	lsls	r1, r7, #31
 800f36a:	d508      	bpl.n	800f37e <_dtoa_r+0x39e>
 800f36c:	ec51 0b18 	vmov	r0, r1, d8
 800f370:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f374:	f7f1 f960 	bl	8000638 <__aeabi_dmul>
 800f378:	ec41 0b18 	vmov	d8, r0, r1
 800f37c:	3501      	adds	r5, #1
 800f37e:	107f      	asrs	r7, r7, #1
 800f380:	3608      	adds	r6, #8
 800f382:	e7e5      	b.n	800f350 <_dtoa_r+0x370>
 800f384:	f000 80a6 	beq.w	800f4d4 <_dtoa_r+0x4f4>
 800f388:	f1ca 0600 	rsb	r6, sl, #0
 800f38c:	4ba5      	ldr	r3, [pc, #660]	; (800f624 <_dtoa_r+0x644>)
 800f38e:	4fa6      	ldr	r7, [pc, #664]	; (800f628 <_dtoa_r+0x648>)
 800f390:	f006 020f 	and.w	r2, r6, #15
 800f394:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f39c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f3a0:	f7f1 f94a 	bl	8000638 <__aeabi_dmul>
 800f3a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3a8:	1136      	asrs	r6, r6, #4
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	2502      	movs	r5, #2
 800f3ae:	2e00      	cmp	r6, #0
 800f3b0:	f040 8085 	bne.w	800f4be <_dtoa_r+0x4de>
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d1d2      	bne.n	800f35e <_dtoa_r+0x37e>
 800f3b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	f000 808c 	beq.w	800f4d8 <_dtoa_r+0x4f8>
 800f3c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f3c4:	4b99      	ldr	r3, [pc, #612]	; (800f62c <_dtoa_r+0x64c>)
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	4630      	mov	r0, r6
 800f3ca:	4639      	mov	r1, r7
 800f3cc:	f7f1 fba6 	bl	8000b1c <__aeabi_dcmplt>
 800f3d0:	2800      	cmp	r0, #0
 800f3d2:	f000 8081 	beq.w	800f4d8 <_dtoa_r+0x4f8>
 800f3d6:	9b01      	ldr	r3, [sp, #4]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d07d      	beq.n	800f4d8 <_dtoa_r+0x4f8>
 800f3dc:	f1b9 0f00 	cmp.w	r9, #0
 800f3e0:	dd3c      	ble.n	800f45c <_dtoa_r+0x47c>
 800f3e2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800f3e6:	9307      	str	r3, [sp, #28]
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	4b91      	ldr	r3, [pc, #580]	; (800f630 <_dtoa_r+0x650>)
 800f3ec:	4630      	mov	r0, r6
 800f3ee:	4639      	mov	r1, r7
 800f3f0:	f7f1 f922 	bl	8000638 <__aeabi_dmul>
 800f3f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3f8:	3501      	adds	r5, #1
 800f3fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f3fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f402:	4628      	mov	r0, r5
 800f404:	f7f1 f8ae 	bl	8000564 <__aeabi_i2d>
 800f408:	4632      	mov	r2, r6
 800f40a:	463b      	mov	r3, r7
 800f40c:	f7f1 f914 	bl	8000638 <__aeabi_dmul>
 800f410:	4b88      	ldr	r3, [pc, #544]	; (800f634 <_dtoa_r+0x654>)
 800f412:	2200      	movs	r2, #0
 800f414:	f7f0 ff5a 	bl	80002cc <__adddf3>
 800f418:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f41c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f420:	9303      	str	r3, [sp, #12]
 800f422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f424:	2b00      	cmp	r3, #0
 800f426:	d15c      	bne.n	800f4e2 <_dtoa_r+0x502>
 800f428:	4b83      	ldr	r3, [pc, #524]	; (800f638 <_dtoa_r+0x658>)
 800f42a:	2200      	movs	r2, #0
 800f42c:	4630      	mov	r0, r6
 800f42e:	4639      	mov	r1, r7
 800f430:	f7f0 ff4a 	bl	80002c8 <__aeabi_dsub>
 800f434:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f438:	4606      	mov	r6, r0
 800f43a:	460f      	mov	r7, r1
 800f43c:	f7f1 fb8c 	bl	8000b58 <__aeabi_dcmpgt>
 800f440:	2800      	cmp	r0, #0
 800f442:	f040 8296 	bne.w	800f972 <_dtoa_r+0x992>
 800f446:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f44a:	4630      	mov	r0, r6
 800f44c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f450:	4639      	mov	r1, r7
 800f452:	f7f1 fb63 	bl	8000b1c <__aeabi_dcmplt>
 800f456:	2800      	cmp	r0, #0
 800f458:	f040 8288 	bne.w	800f96c <_dtoa_r+0x98c>
 800f45c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f460:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f464:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f466:	2b00      	cmp	r3, #0
 800f468:	f2c0 8158 	blt.w	800f71c <_dtoa_r+0x73c>
 800f46c:	f1ba 0f0e 	cmp.w	sl, #14
 800f470:	f300 8154 	bgt.w	800f71c <_dtoa_r+0x73c>
 800f474:	4b6b      	ldr	r3, [pc, #428]	; (800f624 <_dtoa_r+0x644>)
 800f476:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f47a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f47e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f480:	2b00      	cmp	r3, #0
 800f482:	f280 80e3 	bge.w	800f64c <_dtoa_r+0x66c>
 800f486:	9b01      	ldr	r3, [sp, #4]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	f300 80df 	bgt.w	800f64c <_dtoa_r+0x66c>
 800f48e:	f040 826d 	bne.w	800f96c <_dtoa_r+0x98c>
 800f492:	4b69      	ldr	r3, [pc, #420]	; (800f638 <_dtoa_r+0x658>)
 800f494:	2200      	movs	r2, #0
 800f496:	4640      	mov	r0, r8
 800f498:	4649      	mov	r1, r9
 800f49a:	f7f1 f8cd 	bl	8000638 <__aeabi_dmul>
 800f49e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f4a2:	f7f1 fb4f 	bl	8000b44 <__aeabi_dcmpge>
 800f4a6:	9e01      	ldr	r6, [sp, #4]
 800f4a8:	4637      	mov	r7, r6
 800f4aa:	2800      	cmp	r0, #0
 800f4ac:	f040 8243 	bne.w	800f936 <_dtoa_r+0x956>
 800f4b0:	9d00      	ldr	r5, [sp, #0]
 800f4b2:	2331      	movs	r3, #49	; 0x31
 800f4b4:	f805 3b01 	strb.w	r3, [r5], #1
 800f4b8:	f10a 0a01 	add.w	sl, sl, #1
 800f4bc:	e23f      	b.n	800f93e <_dtoa_r+0x95e>
 800f4be:	07f2      	lsls	r2, r6, #31
 800f4c0:	d505      	bpl.n	800f4ce <_dtoa_r+0x4ee>
 800f4c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4c6:	f7f1 f8b7 	bl	8000638 <__aeabi_dmul>
 800f4ca:	3501      	adds	r5, #1
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	1076      	asrs	r6, r6, #1
 800f4d0:	3708      	adds	r7, #8
 800f4d2:	e76c      	b.n	800f3ae <_dtoa_r+0x3ce>
 800f4d4:	2502      	movs	r5, #2
 800f4d6:	e76f      	b.n	800f3b8 <_dtoa_r+0x3d8>
 800f4d8:	9b01      	ldr	r3, [sp, #4]
 800f4da:	f8cd a01c 	str.w	sl, [sp, #28]
 800f4de:	930c      	str	r3, [sp, #48]	; 0x30
 800f4e0:	e78d      	b.n	800f3fe <_dtoa_r+0x41e>
 800f4e2:	9900      	ldr	r1, [sp, #0]
 800f4e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f4e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f4e8:	4b4e      	ldr	r3, [pc, #312]	; (800f624 <_dtoa_r+0x644>)
 800f4ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f4ee:	4401      	add	r1, r0
 800f4f0:	9102      	str	r1, [sp, #8]
 800f4f2:	9908      	ldr	r1, [sp, #32]
 800f4f4:	eeb0 8a47 	vmov.f32	s16, s14
 800f4f8:	eef0 8a67 	vmov.f32	s17, s15
 800f4fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f500:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f504:	2900      	cmp	r1, #0
 800f506:	d045      	beq.n	800f594 <_dtoa_r+0x5b4>
 800f508:	494c      	ldr	r1, [pc, #304]	; (800f63c <_dtoa_r+0x65c>)
 800f50a:	2000      	movs	r0, #0
 800f50c:	f7f1 f9be 	bl	800088c <__aeabi_ddiv>
 800f510:	ec53 2b18 	vmov	r2, r3, d8
 800f514:	f7f0 fed8 	bl	80002c8 <__aeabi_dsub>
 800f518:	9d00      	ldr	r5, [sp, #0]
 800f51a:	ec41 0b18 	vmov	d8, r0, r1
 800f51e:	4639      	mov	r1, r7
 800f520:	4630      	mov	r0, r6
 800f522:	f7f1 fb39 	bl	8000b98 <__aeabi_d2iz>
 800f526:	900c      	str	r0, [sp, #48]	; 0x30
 800f528:	f7f1 f81c 	bl	8000564 <__aeabi_i2d>
 800f52c:	4602      	mov	r2, r0
 800f52e:	460b      	mov	r3, r1
 800f530:	4630      	mov	r0, r6
 800f532:	4639      	mov	r1, r7
 800f534:	f7f0 fec8 	bl	80002c8 <__aeabi_dsub>
 800f538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f53a:	3330      	adds	r3, #48	; 0x30
 800f53c:	f805 3b01 	strb.w	r3, [r5], #1
 800f540:	ec53 2b18 	vmov	r2, r3, d8
 800f544:	4606      	mov	r6, r0
 800f546:	460f      	mov	r7, r1
 800f548:	f7f1 fae8 	bl	8000b1c <__aeabi_dcmplt>
 800f54c:	2800      	cmp	r0, #0
 800f54e:	d165      	bne.n	800f61c <_dtoa_r+0x63c>
 800f550:	4632      	mov	r2, r6
 800f552:	463b      	mov	r3, r7
 800f554:	4935      	ldr	r1, [pc, #212]	; (800f62c <_dtoa_r+0x64c>)
 800f556:	2000      	movs	r0, #0
 800f558:	f7f0 feb6 	bl	80002c8 <__aeabi_dsub>
 800f55c:	ec53 2b18 	vmov	r2, r3, d8
 800f560:	f7f1 fadc 	bl	8000b1c <__aeabi_dcmplt>
 800f564:	2800      	cmp	r0, #0
 800f566:	f040 80b9 	bne.w	800f6dc <_dtoa_r+0x6fc>
 800f56a:	9b02      	ldr	r3, [sp, #8]
 800f56c:	429d      	cmp	r5, r3
 800f56e:	f43f af75 	beq.w	800f45c <_dtoa_r+0x47c>
 800f572:	4b2f      	ldr	r3, [pc, #188]	; (800f630 <_dtoa_r+0x650>)
 800f574:	ec51 0b18 	vmov	r0, r1, d8
 800f578:	2200      	movs	r2, #0
 800f57a:	f7f1 f85d 	bl	8000638 <__aeabi_dmul>
 800f57e:	4b2c      	ldr	r3, [pc, #176]	; (800f630 <_dtoa_r+0x650>)
 800f580:	ec41 0b18 	vmov	d8, r0, r1
 800f584:	2200      	movs	r2, #0
 800f586:	4630      	mov	r0, r6
 800f588:	4639      	mov	r1, r7
 800f58a:	f7f1 f855 	bl	8000638 <__aeabi_dmul>
 800f58e:	4606      	mov	r6, r0
 800f590:	460f      	mov	r7, r1
 800f592:	e7c4      	b.n	800f51e <_dtoa_r+0x53e>
 800f594:	ec51 0b17 	vmov	r0, r1, d7
 800f598:	f7f1 f84e 	bl	8000638 <__aeabi_dmul>
 800f59c:	9b02      	ldr	r3, [sp, #8]
 800f59e:	9d00      	ldr	r5, [sp, #0]
 800f5a0:	930c      	str	r3, [sp, #48]	; 0x30
 800f5a2:	ec41 0b18 	vmov	d8, r0, r1
 800f5a6:	4639      	mov	r1, r7
 800f5a8:	4630      	mov	r0, r6
 800f5aa:	f7f1 faf5 	bl	8000b98 <__aeabi_d2iz>
 800f5ae:	9011      	str	r0, [sp, #68]	; 0x44
 800f5b0:	f7f0 ffd8 	bl	8000564 <__aeabi_i2d>
 800f5b4:	4602      	mov	r2, r0
 800f5b6:	460b      	mov	r3, r1
 800f5b8:	4630      	mov	r0, r6
 800f5ba:	4639      	mov	r1, r7
 800f5bc:	f7f0 fe84 	bl	80002c8 <__aeabi_dsub>
 800f5c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f5c2:	3330      	adds	r3, #48	; 0x30
 800f5c4:	f805 3b01 	strb.w	r3, [r5], #1
 800f5c8:	9b02      	ldr	r3, [sp, #8]
 800f5ca:	429d      	cmp	r5, r3
 800f5cc:	4606      	mov	r6, r0
 800f5ce:	460f      	mov	r7, r1
 800f5d0:	f04f 0200 	mov.w	r2, #0
 800f5d4:	d134      	bne.n	800f640 <_dtoa_r+0x660>
 800f5d6:	4b19      	ldr	r3, [pc, #100]	; (800f63c <_dtoa_r+0x65c>)
 800f5d8:	ec51 0b18 	vmov	r0, r1, d8
 800f5dc:	f7f0 fe76 	bl	80002cc <__adddf3>
 800f5e0:	4602      	mov	r2, r0
 800f5e2:	460b      	mov	r3, r1
 800f5e4:	4630      	mov	r0, r6
 800f5e6:	4639      	mov	r1, r7
 800f5e8:	f7f1 fab6 	bl	8000b58 <__aeabi_dcmpgt>
 800f5ec:	2800      	cmp	r0, #0
 800f5ee:	d175      	bne.n	800f6dc <_dtoa_r+0x6fc>
 800f5f0:	ec53 2b18 	vmov	r2, r3, d8
 800f5f4:	4911      	ldr	r1, [pc, #68]	; (800f63c <_dtoa_r+0x65c>)
 800f5f6:	2000      	movs	r0, #0
 800f5f8:	f7f0 fe66 	bl	80002c8 <__aeabi_dsub>
 800f5fc:	4602      	mov	r2, r0
 800f5fe:	460b      	mov	r3, r1
 800f600:	4630      	mov	r0, r6
 800f602:	4639      	mov	r1, r7
 800f604:	f7f1 fa8a 	bl	8000b1c <__aeabi_dcmplt>
 800f608:	2800      	cmp	r0, #0
 800f60a:	f43f af27 	beq.w	800f45c <_dtoa_r+0x47c>
 800f60e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f610:	1e6b      	subs	r3, r5, #1
 800f612:	930c      	str	r3, [sp, #48]	; 0x30
 800f614:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f618:	2b30      	cmp	r3, #48	; 0x30
 800f61a:	d0f8      	beq.n	800f60e <_dtoa_r+0x62e>
 800f61c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f620:	e04a      	b.n	800f6b8 <_dtoa_r+0x6d8>
 800f622:	bf00      	nop
 800f624:	08011938 	.word	0x08011938
 800f628:	08011910 	.word	0x08011910
 800f62c:	3ff00000 	.word	0x3ff00000
 800f630:	40240000 	.word	0x40240000
 800f634:	401c0000 	.word	0x401c0000
 800f638:	40140000 	.word	0x40140000
 800f63c:	3fe00000 	.word	0x3fe00000
 800f640:	4baf      	ldr	r3, [pc, #700]	; (800f900 <_dtoa_r+0x920>)
 800f642:	f7f0 fff9 	bl	8000638 <__aeabi_dmul>
 800f646:	4606      	mov	r6, r0
 800f648:	460f      	mov	r7, r1
 800f64a:	e7ac      	b.n	800f5a6 <_dtoa_r+0x5c6>
 800f64c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f650:	9d00      	ldr	r5, [sp, #0]
 800f652:	4642      	mov	r2, r8
 800f654:	464b      	mov	r3, r9
 800f656:	4630      	mov	r0, r6
 800f658:	4639      	mov	r1, r7
 800f65a:	f7f1 f917 	bl	800088c <__aeabi_ddiv>
 800f65e:	f7f1 fa9b 	bl	8000b98 <__aeabi_d2iz>
 800f662:	9002      	str	r0, [sp, #8]
 800f664:	f7f0 ff7e 	bl	8000564 <__aeabi_i2d>
 800f668:	4642      	mov	r2, r8
 800f66a:	464b      	mov	r3, r9
 800f66c:	f7f0 ffe4 	bl	8000638 <__aeabi_dmul>
 800f670:	4602      	mov	r2, r0
 800f672:	460b      	mov	r3, r1
 800f674:	4630      	mov	r0, r6
 800f676:	4639      	mov	r1, r7
 800f678:	f7f0 fe26 	bl	80002c8 <__aeabi_dsub>
 800f67c:	9e02      	ldr	r6, [sp, #8]
 800f67e:	9f01      	ldr	r7, [sp, #4]
 800f680:	3630      	adds	r6, #48	; 0x30
 800f682:	f805 6b01 	strb.w	r6, [r5], #1
 800f686:	9e00      	ldr	r6, [sp, #0]
 800f688:	1bae      	subs	r6, r5, r6
 800f68a:	42b7      	cmp	r7, r6
 800f68c:	4602      	mov	r2, r0
 800f68e:	460b      	mov	r3, r1
 800f690:	d137      	bne.n	800f702 <_dtoa_r+0x722>
 800f692:	f7f0 fe1b 	bl	80002cc <__adddf3>
 800f696:	4642      	mov	r2, r8
 800f698:	464b      	mov	r3, r9
 800f69a:	4606      	mov	r6, r0
 800f69c:	460f      	mov	r7, r1
 800f69e:	f7f1 fa5b 	bl	8000b58 <__aeabi_dcmpgt>
 800f6a2:	b9c8      	cbnz	r0, 800f6d8 <_dtoa_r+0x6f8>
 800f6a4:	4642      	mov	r2, r8
 800f6a6:	464b      	mov	r3, r9
 800f6a8:	4630      	mov	r0, r6
 800f6aa:	4639      	mov	r1, r7
 800f6ac:	f7f1 fa2c 	bl	8000b08 <__aeabi_dcmpeq>
 800f6b0:	b110      	cbz	r0, 800f6b8 <_dtoa_r+0x6d8>
 800f6b2:	9b02      	ldr	r3, [sp, #8]
 800f6b4:	07d9      	lsls	r1, r3, #31
 800f6b6:	d40f      	bmi.n	800f6d8 <_dtoa_r+0x6f8>
 800f6b8:	4620      	mov	r0, r4
 800f6ba:	4659      	mov	r1, fp
 800f6bc:	f000 facc 	bl	800fc58 <_Bfree>
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	702b      	strb	r3, [r5, #0]
 800f6c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f6c6:	f10a 0001 	add.w	r0, sl, #1
 800f6ca:	6018      	str	r0, [r3, #0]
 800f6cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	f43f acd8 	beq.w	800f084 <_dtoa_r+0xa4>
 800f6d4:	601d      	str	r5, [r3, #0]
 800f6d6:	e4d5      	b.n	800f084 <_dtoa_r+0xa4>
 800f6d8:	f8cd a01c 	str.w	sl, [sp, #28]
 800f6dc:	462b      	mov	r3, r5
 800f6de:	461d      	mov	r5, r3
 800f6e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f6e4:	2a39      	cmp	r2, #57	; 0x39
 800f6e6:	d108      	bne.n	800f6fa <_dtoa_r+0x71a>
 800f6e8:	9a00      	ldr	r2, [sp, #0]
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	d1f7      	bne.n	800f6de <_dtoa_r+0x6fe>
 800f6ee:	9a07      	ldr	r2, [sp, #28]
 800f6f0:	9900      	ldr	r1, [sp, #0]
 800f6f2:	3201      	adds	r2, #1
 800f6f4:	9207      	str	r2, [sp, #28]
 800f6f6:	2230      	movs	r2, #48	; 0x30
 800f6f8:	700a      	strb	r2, [r1, #0]
 800f6fa:	781a      	ldrb	r2, [r3, #0]
 800f6fc:	3201      	adds	r2, #1
 800f6fe:	701a      	strb	r2, [r3, #0]
 800f700:	e78c      	b.n	800f61c <_dtoa_r+0x63c>
 800f702:	4b7f      	ldr	r3, [pc, #508]	; (800f900 <_dtoa_r+0x920>)
 800f704:	2200      	movs	r2, #0
 800f706:	f7f0 ff97 	bl	8000638 <__aeabi_dmul>
 800f70a:	2200      	movs	r2, #0
 800f70c:	2300      	movs	r3, #0
 800f70e:	4606      	mov	r6, r0
 800f710:	460f      	mov	r7, r1
 800f712:	f7f1 f9f9 	bl	8000b08 <__aeabi_dcmpeq>
 800f716:	2800      	cmp	r0, #0
 800f718:	d09b      	beq.n	800f652 <_dtoa_r+0x672>
 800f71a:	e7cd      	b.n	800f6b8 <_dtoa_r+0x6d8>
 800f71c:	9a08      	ldr	r2, [sp, #32]
 800f71e:	2a00      	cmp	r2, #0
 800f720:	f000 80c4 	beq.w	800f8ac <_dtoa_r+0x8cc>
 800f724:	9a05      	ldr	r2, [sp, #20]
 800f726:	2a01      	cmp	r2, #1
 800f728:	f300 80a8 	bgt.w	800f87c <_dtoa_r+0x89c>
 800f72c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f72e:	2a00      	cmp	r2, #0
 800f730:	f000 80a0 	beq.w	800f874 <_dtoa_r+0x894>
 800f734:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f738:	9e06      	ldr	r6, [sp, #24]
 800f73a:	4645      	mov	r5, r8
 800f73c:	9a04      	ldr	r2, [sp, #16]
 800f73e:	2101      	movs	r1, #1
 800f740:	441a      	add	r2, r3
 800f742:	4620      	mov	r0, r4
 800f744:	4498      	add	r8, r3
 800f746:	9204      	str	r2, [sp, #16]
 800f748:	f000 fb42 	bl	800fdd0 <__i2b>
 800f74c:	4607      	mov	r7, r0
 800f74e:	2d00      	cmp	r5, #0
 800f750:	dd0b      	ble.n	800f76a <_dtoa_r+0x78a>
 800f752:	9b04      	ldr	r3, [sp, #16]
 800f754:	2b00      	cmp	r3, #0
 800f756:	dd08      	ble.n	800f76a <_dtoa_r+0x78a>
 800f758:	42ab      	cmp	r3, r5
 800f75a:	9a04      	ldr	r2, [sp, #16]
 800f75c:	bfa8      	it	ge
 800f75e:	462b      	movge	r3, r5
 800f760:	eba8 0803 	sub.w	r8, r8, r3
 800f764:	1aed      	subs	r5, r5, r3
 800f766:	1ad3      	subs	r3, r2, r3
 800f768:	9304      	str	r3, [sp, #16]
 800f76a:	9b06      	ldr	r3, [sp, #24]
 800f76c:	b1fb      	cbz	r3, 800f7ae <_dtoa_r+0x7ce>
 800f76e:	9b08      	ldr	r3, [sp, #32]
 800f770:	2b00      	cmp	r3, #0
 800f772:	f000 809f 	beq.w	800f8b4 <_dtoa_r+0x8d4>
 800f776:	2e00      	cmp	r6, #0
 800f778:	dd11      	ble.n	800f79e <_dtoa_r+0x7be>
 800f77a:	4639      	mov	r1, r7
 800f77c:	4632      	mov	r2, r6
 800f77e:	4620      	mov	r0, r4
 800f780:	f000 fbe2 	bl	800ff48 <__pow5mult>
 800f784:	465a      	mov	r2, fp
 800f786:	4601      	mov	r1, r0
 800f788:	4607      	mov	r7, r0
 800f78a:	4620      	mov	r0, r4
 800f78c:	f000 fb36 	bl	800fdfc <__multiply>
 800f790:	4659      	mov	r1, fp
 800f792:	9007      	str	r0, [sp, #28]
 800f794:	4620      	mov	r0, r4
 800f796:	f000 fa5f 	bl	800fc58 <_Bfree>
 800f79a:	9b07      	ldr	r3, [sp, #28]
 800f79c:	469b      	mov	fp, r3
 800f79e:	9b06      	ldr	r3, [sp, #24]
 800f7a0:	1b9a      	subs	r2, r3, r6
 800f7a2:	d004      	beq.n	800f7ae <_dtoa_r+0x7ce>
 800f7a4:	4659      	mov	r1, fp
 800f7a6:	4620      	mov	r0, r4
 800f7a8:	f000 fbce 	bl	800ff48 <__pow5mult>
 800f7ac:	4683      	mov	fp, r0
 800f7ae:	2101      	movs	r1, #1
 800f7b0:	4620      	mov	r0, r4
 800f7b2:	f000 fb0d 	bl	800fdd0 <__i2b>
 800f7b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	4606      	mov	r6, r0
 800f7bc:	dd7c      	ble.n	800f8b8 <_dtoa_r+0x8d8>
 800f7be:	461a      	mov	r2, r3
 800f7c0:	4601      	mov	r1, r0
 800f7c2:	4620      	mov	r0, r4
 800f7c4:	f000 fbc0 	bl	800ff48 <__pow5mult>
 800f7c8:	9b05      	ldr	r3, [sp, #20]
 800f7ca:	2b01      	cmp	r3, #1
 800f7cc:	4606      	mov	r6, r0
 800f7ce:	dd76      	ble.n	800f8be <_dtoa_r+0x8de>
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	9306      	str	r3, [sp, #24]
 800f7d4:	6933      	ldr	r3, [r6, #16]
 800f7d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f7da:	6918      	ldr	r0, [r3, #16]
 800f7dc:	f000 faa8 	bl	800fd30 <__hi0bits>
 800f7e0:	f1c0 0020 	rsb	r0, r0, #32
 800f7e4:	9b04      	ldr	r3, [sp, #16]
 800f7e6:	4418      	add	r0, r3
 800f7e8:	f010 001f 	ands.w	r0, r0, #31
 800f7ec:	f000 8086 	beq.w	800f8fc <_dtoa_r+0x91c>
 800f7f0:	f1c0 0320 	rsb	r3, r0, #32
 800f7f4:	2b04      	cmp	r3, #4
 800f7f6:	dd7f      	ble.n	800f8f8 <_dtoa_r+0x918>
 800f7f8:	f1c0 001c 	rsb	r0, r0, #28
 800f7fc:	9b04      	ldr	r3, [sp, #16]
 800f7fe:	4403      	add	r3, r0
 800f800:	4480      	add	r8, r0
 800f802:	4405      	add	r5, r0
 800f804:	9304      	str	r3, [sp, #16]
 800f806:	f1b8 0f00 	cmp.w	r8, #0
 800f80a:	dd05      	ble.n	800f818 <_dtoa_r+0x838>
 800f80c:	4659      	mov	r1, fp
 800f80e:	4642      	mov	r2, r8
 800f810:	4620      	mov	r0, r4
 800f812:	f000 fbf3 	bl	800fffc <__lshift>
 800f816:	4683      	mov	fp, r0
 800f818:	9b04      	ldr	r3, [sp, #16]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	dd05      	ble.n	800f82a <_dtoa_r+0x84a>
 800f81e:	4631      	mov	r1, r6
 800f820:	461a      	mov	r2, r3
 800f822:	4620      	mov	r0, r4
 800f824:	f000 fbea 	bl	800fffc <__lshift>
 800f828:	4606      	mov	r6, r0
 800f82a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d069      	beq.n	800f904 <_dtoa_r+0x924>
 800f830:	4631      	mov	r1, r6
 800f832:	4658      	mov	r0, fp
 800f834:	f000 fc4e 	bl	80100d4 <__mcmp>
 800f838:	2800      	cmp	r0, #0
 800f83a:	da63      	bge.n	800f904 <_dtoa_r+0x924>
 800f83c:	2300      	movs	r3, #0
 800f83e:	4659      	mov	r1, fp
 800f840:	220a      	movs	r2, #10
 800f842:	4620      	mov	r0, r4
 800f844:	f000 fa2a 	bl	800fc9c <__multadd>
 800f848:	9b08      	ldr	r3, [sp, #32]
 800f84a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f84e:	4683      	mov	fp, r0
 800f850:	2b00      	cmp	r3, #0
 800f852:	f000 818f 	beq.w	800fb74 <_dtoa_r+0xb94>
 800f856:	4639      	mov	r1, r7
 800f858:	2300      	movs	r3, #0
 800f85a:	220a      	movs	r2, #10
 800f85c:	4620      	mov	r0, r4
 800f85e:	f000 fa1d 	bl	800fc9c <__multadd>
 800f862:	f1b9 0f00 	cmp.w	r9, #0
 800f866:	4607      	mov	r7, r0
 800f868:	f300 808e 	bgt.w	800f988 <_dtoa_r+0x9a8>
 800f86c:	9b05      	ldr	r3, [sp, #20]
 800f86e:	2b02      	cmp	r3, #2
 800f870:	dc50      	bgt.n	800f914 <_dtoa_r+0x934>
 800f872:	e089      	b.n	800f988 <_dtoa_r+0x9a8>
 800f874:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f876:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f87a:	e75d      	b.n	800f738 <_dtoa_r+0x758>
 800f87c:	9b01      	ldr	r3, [sp, #4]
 800f87e:	1e5e      	subs	r6, r3, #1
 800f880:	9b06      	ldr	r3, [sp, #24]
 800f882:	42b3      	cmp	r3, r6
 800f884:	bfbf      	itttt	lt
 800f886:	9b06      	ldrlt	r3, [sp, #24]
 800f888:	9606      	strlt	r6, [sp, #24]
 800f88a:	1af2      	sublt	r2, r6, r3
 800f88c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800f88e:	bfb6      	itet	lt
 800f890:	189b      	addlt	r3, r3, r2
 800f892:	1b9e      	subge	r6, r3, r6
 800f894:	930d      	strlt	r3, [sp, #52]	; 0x34
 800f896:	9b01      	ldr	r3, [sp, #4]
 800f898:	bfb8      	it	lt
 800f89a:	2600      	movlt	r6, #0
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	bfb5      	itete	lt
 800f8a0:	eba8 0503 	sublt.w	r5, r8, r3
 800f8a4:	9b01      	ldrge	r3, [sp, #4]
 800f8a6:	2300      	movlt	r3, #0
 800f8a8:	4645      	movge	r5, r8
 800f8aa:	e747      	b.n	800f73c <_dtoa_r+0x75c>
 800f8ac:	9e06      	ldr	r6, [sp, #24]
 800f8ae:	9f08      	ldr	r7, [sp, #32]
 800f8b0:	4645      	mov	r5, r8
 800f8b2:	e74c      	b.n	800f74e <_dtoa_r+0x76e>
 800f8b4:	9a06      	ldr	r2, [sp, #24]
 800f8b6:	e775      	b.n	800f7a4 <_dtoa_r+0x7c4>
 800f8b8:	9b05      	ldr	r3, [sp, #20]
 800f8ba:	2b01      	cmp	r3, #1
 800f8bc:	dc18      	bgt.n	800f8f0 <_dtoa_r+0x910>
 800f8be:	9b02      	ldr	r3, [sp, #8]
 800f8c0:	b9b3      	cbnz	r3, 800f8f0 <_dtoa_r+0x910>
 800f8c2:	9b03      	ldr	r3, [sp, #12]
 800f8c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f8c8:	b9a3      	cbnz	r3, 800f8f4 <_dtoa_r+0x914>
 800f8ca:	9b03      	ldr	r3, [sp, #12]
 800f8cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f8d0:	0d1b      	lsrs	r3, r3, #20
 800f8d2:	051b      	lsls	r3, r3, #20
 800f8d4:	b12b      	cbz	r3, 800f8e2 <_dtoa_r+0x902>
 800f8d6:	9b04      	ldr	r3, [sp, #16]
 800f8d8:	3301      	adds	r3, #1
 800f8da:	9304      	str	r3, [sp, #16]
 800f8dc:	f108 0801 	add.w	r8, r8, #1
 800f8e0:	2301      	movs	r3, #1
 800f8e2:	9306      	str	r3, [sp, #24]
 800f8e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	f47f af74 	bne.w	800f7d4 <_dtoa_r+0x7f4>
 800f8ec:	2001      	movs	r0, #1
 800f8ee:	e779      	b.n	800f7e4 <_dtoa_r+0x804>
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	e7f6      	b.n	800f8e2 <_dtoa_r+0x902>
 800f8f4:	9b02      	ldr	r3, [sp, #8]
 800f8f6:	e7f4      	b.n	800f8e2 <_dtoa_r+0x902>
 800f8f8:	d085      	beq.n	800f806 <_dtoa_r+0x826>
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	301c      	adds	r0, #28
 800f8fe:	e77d      	b.n	800f7fc <_dtoa_r+0x81c>
 800f900:	40240000 	.word	0x40240000
 800f904:	9b01      	ldr	r3, [sp, #4]
 800f906:	2b00      	cmp	r3, #0
 800f908:	dc38      	bgt.n	800f97c <_dtoa_r+0x99c>
 800f90a:	9b05      	ldr	r3, [sp, #20]
 800f90c:	2b02      	cmp	r3, #2
 800f90e:	dd35      	ble.n	800f97c <_dtoa_r+0x99c>
 800f910:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f914:	f1b9 0f00 	cmp.w	r9, #0
 800f918:	d10d      	bne.n	800f936 <_dtoa_r+0x956>
 800f91a:	4631      	mov	r1, r6
 800f91c:	464b      	mov	r3, r9
 800f91e:	2205      	movs	r2, #5
 800f920:	4620      	mov	r0, r4
 800f922:	f000 f9bb 	bl	800fc9c <__multadd>
 800f926:	4601      	mov	r1, r0
 800f928:	4606      	mov	r6, r0
 800f92a:	4658      	mov	r0, fp
 800f92c:	f000 fbd2 	bl	80100d4 <__mcmp>
 800f930:	2800      	cmp	r0, #0
 800f932:	f73f adbd 	bgt.w	800f4b0 <_dtoa_r+0x4d0>
 800f936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f938:	9d00      	ldr	r5, [sp, #0]
 800f93a:	ea6f 0a03 	mvn.w	sl, r3
 800f93e:	f04f 0800 	mov.w	r8, #0
 800f942:	4631      	mov	r1, r6
 800f944:	4620      	mov	r0, r4
 800f946:	f000 f987 	bl	800fc58 <_Bfree>
 800f94a:	2f00      	cmp	r7, #0
 800f94c:	f43f aeb4 	beq.w	800f6b8 <_dtoa_r+0x6d8>
 800f950:	f1b8 0f00 	cmp.w	r8, #0
 800f954:	d005      	beq.n	800f962 <_dtoa_r+0x982>
 800f956:	45b8      	cmp	r8, r7
 800f958:	d003      	beq.n	800f962 <_dtoa_r+0x982>
 800f95a:	4641      	mov	r1, r8
 800f95c:	4620      	mov	r0, r4
 800f95e:	f000 f97b 	bl	800fc58 <_Bfree>
 800f962:	4639      	mov	r1, r7
 800f964:	4620      	mov	r0, r4
 800f966:	f000 f977 	bl	800fc58 <_Bfree>
 800f96a:	e6a5      	b.n	800f6b8 <_dtoa_r+0x6d8>
 800f96c:	2600      	movs	r6, #0
 800f96e:	4637      	mov	r7, r6
 800f970:	e7e1      	b.n	800f936 <_dtoa_r+0x956>
 800f972:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f974:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f978:	4637      	mov	r7, r6
 800f97a:	e599      	b.n	800f4b0 <_dtoa_r+0x4d0>
 800f97c:	9b08      	ldr	r3, [sp, #32]
 800f97e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f982:	2b00      	cmp	r3, #0
 800f984:	f000 80fd 	beq.w	800fb82 <_dtoa_r+0xba2>
 800f988:	2d00      	cmp	r5, #0
 800f98a:	dd05      	ble.n	800f998 <_dtoa_r+0x9b8>
 800f98c:	4639      	mov	r1, r7
 800f98e:	462a      	mov	r2, r5
 800f990:	4620      	mov	r0, r4
 800f992:	f000 fb33 	bl	800fffc <__lshift>
 800f996:	4607      	mov	r7, r0
 800f998:	9b06      	ldr	r3, [sp, #24]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d05c      	beq.n	800fa58 <_dtoa_r+0xa78>
 800f99e:	6879      	ldr	r1, [r7, #4]
 800f9a0:	4620      	mov	r0, r4
 800f9a2:	f000 f919 	bl	800fbd8 <_Balloc>
 800f9a6:	4605      	mov	r5, r0
 800f9a8:	b928      	cbnz	r0, 800f9b6 <_dtoa_r+0x9d6>
 800f9aa:	4b80      	ldr	r3, [pc, #512]	; (800fbac <_dtoa_r+0xbcc>)
 800f9ac:	4602      	mov	r2, r0
 800f9ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f9b2:	f7ff bb2e 	b.w	800f012 <_dtoa_r+0x32>
 800f9b6:	693a      	ldr	r2, [r7, #16]
 800f9b8:	3202      	adds	r2, #2
 800f9ba:	0092      	lsls	r2, r2, #2
 800f9bc:	f107 010c 	add.w	r1, r7, #12
 800f9c0:	300c      	adds	r0, #12
 800f9c2:	f7fe fd25 	bl	800e410 <memcpy>
 800f9c6:	2201      	movs	r2, #1
 800f9c8:	4629      	mov	r1, r5
 800f9ca:	4620      	mov	r0, r4
 800f9cc:	f000 fb16 	bl	800fffc <__lshift>
 800f9d0:	9b00      	ldr	r3, [sp, #0]
 800f9d2:	3301      	adds	r3, #1
 800f9d4:	9301      	str	r3, [sp, #4]
 800f9d6:	9b00      	ldr	r3, [sp, #0]
 800f9d8:	444b      	add	r3, r9
 800f9da:	9307      	str	r3, [sp, #28]
 800f9dc:	9b02      	ldr	r3, [sp, #8]
 800f9de:	f003 0301 	and.w	r3, r3, #1
 800f9e2:	46b8      	mov	r8, r7
 800f9e4:	9306      	str	r3, [sp, #24]
 800f9e6:	4607      	mov	r7, r0
 800f9e8:	9b01      	ldr	r3, [sp, #4]
 800f9ea:	4631      	mov	r1, r6
 800f9ec:	3b01      	subs	r3, #1
 800f9ee:	4658      	mov	r0, fp
 800f9f0:	9302      	str	r3, [sp, #8]
 800f9f2:	f7ff fa67 	bl	800eec4 <quorem>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	3330      	adds	r3, #48	; 0x30
 800f9fa:	9004      	str	r0, [sp, #16]
 800f9fc:	4641      	mov	r1, r8
 800f9fe:	4658      	mov	r0, fp
 800fa00:	9308      	str	r3, [sp, #32]
 800fa02:	f000 fb67 	bl	80100d4 <__mcmp>
 800fa06:	463a      	mov	r2, r7
 800fa08:	4681      	mov	r9, r0
 800fa0a:	4631      	mov	r1, r6
 800fa0c:	4620      	mov	r0, r4
 800fa0e:	f000 fb7d 	bl	801010c <__mdiff>
 800fa12:	68c2      	ldr	r2, [r0, #12]
 800fa14:	9b08      	ldr	r3, [sp, #32]
 800fa16:	4605      	mov	r5, r0
 800fa18:	bb02      	cbnz	r2, 800fa5c <_dtoa_r+0xa7c>
 800fa1a:	4601      	mov	r1, r0
 800fa1c:	4658      	mov	r0, fp
 800fa1e:	f000 fb59 	bl	80100d4 <__mcmp>
 800fa22:	9b08      	ldr	r3, [sp, #32]
 800fa24:	4602      	mov	r2, r0
 800fa26:	4629      	mov	r1, r5
 800fa28:	4620      	mov	r0, r4
 800fa2a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800fa2e:	f000 f913 	bl	800fc58 <_Bfree>
 800fa32:	9b05      	ldr	r3, [sp, #20]
 800fa34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa36:	9d01      	ldr	r5, [sp, #4]
 800fa38:	ea43 0102 	orr.w	r1, r3, r2
 800fa3c:	9b06      	ldr	r3, [sp, #24]
 800fa3e:	430b      	orrs	r3, r1
 800fa40:	9b08      	ldr	r3, [sp, #32]
 800fa42:	d10d      	bne.n	800fa60 <_dtoa_r+0xa80>
 800fa44:	2b39      	cmp	r3, #57	; 0x39
 800fa46:	d029      	beq.n	800fa9c <_dtoa_r+0xabc>
 800fa48:	f1b9 0f00 	cmp.w	r9, #0
 800fa4c:	dd01      	ble.n	800fa52 <_dtoa_r+0xa72>
 800fa4e:	9b04      	ldr	r3, [sp, #16]
 800fa50:	3331      	adds	r3, #49	; 0x31
 800fa52:	9a02      	ldr	r2, [sp, #8]
 800fa54:	7013      	strb	r3, [r2, #0]
 800fa56:	e774      	b.n	800f942 <_dtoa_r+0x962>
 800fa58:	4638      	mov	r0, r7
 800fa5a:	e7b9      	b.n	800f9d0 <_dtoa_r+0x9f0>
 800fa5c:	2201      	movs	r2, #1
 800fa5e:	e7e2      	b.n	800fa26 <_dtoa_r+0xa46>
 800fa60:	f1b9 0f00 	cmp.w	r9, #0
 800fa64:	db06      	blt.n	800fa74 <_dtoa_r+0xa94>
 800fa66:	9905      	ldr	r1, [sp, #20]
 800fa68:	ea41 0909 	orr.w	r9, r1, r9
 800fa6c:	9906      	ldr	r1, [sp, #24]
 800fa6e:	ea59 0101 	orrs.w	r1, r9, r1
 800fa72:	d120      	bne.n	800fab6 <_dtoa_r+0xad6>
 800fa74:	2a00      	cmp	r2, #0
 800fa76:	ddec      	ble.n	800fa52 <_dtoa_r+0xa72>
 800fa78:	4659      	mov	r1, fp
 800fa7a:	2201      	movs	r2, #1
 800fa7c:	4620      	mov	r0, r4
 800fa7e:	9301      	str	r3, [sp, #4]
 800fa80:	f000 fabc 	bl	800fffc <__lshift>
 800fa84:	4631      	mov	r1, r6
 800fa86:	4683      	mov	fp, r0
 800fa88:	f000 fb24 	bl	80100d4 <__mcmp>
 800fa8c:	2800      	cmp	r0, #0
 800fa8e:	9b01      	ldr	r3, [sp, #4]
 800fa90:	dc02      	bgt.n	800fa98 <_dtoa_r+0xab8>
 800fa92:	d1de      	bne.n	800fa52 <_dtoa_r+0xa72>
 800fa94:	07da      	lsls	r2, r3, #31
 800fa96:	d5dc      	bpl.n	800fa52 <_dtoa_r+0xa72>
 800fa98:	2b39      	cmp	r3, #57	; 0x39
 800fa9a:	d1d8      	bne.n	800fa4e <_dtoa_r+0xa6e>
 800fa9c:	9a02      	ldr	r2, [sp, #8]
 800fa9e:	2339      	movs	r3, #57	; 0x39
 800faa0:	7013      	strb	r3, [r2, #0]
 800faa2:	462b      	mov	r3, r5
 800faa4:	461d      	mov	r5, r3
 800faa6:	3b01      	subs	r3, #1
 800faa8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800faac:	2a39      	cmp	r2, #57	; 0x39
 800faae:	d050      	beq.n	800fb52 <_dtoa_r+0xb72>
 800fab0:	3201      	adds	r2, #1
 800fab2:	701a      	strb	r2, [r3, #0]
 800fab4:	e745      	b.n	800f942 <_dtoa_r+0x962>
 800fab6:	2a00      	cmp	r2, #0
 800fab8:	dd03      	ble.n	800fac2 <_dtoa_r+0xae2>
 800faba:	2b39      	cmp	r3, #57	; 0x39
 800fabc:	d0ee      	beq.n	800fa9c <_dtoa_r+0xabc>
 800fabe:	3301      	adds	r3, #1
 800fac0:	e7c7      	b.n	800fa52 <_dtoa_r+0xa72>
 800fac2:	9a01      	ldr	r2, [sp, #4]
 800fac4:	9907      	ldr	r1, [sp, #28]
 800fac6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800faca:	428a      	cmp	r2, r1
 800facc:	d02a      	beq.n	800fb24 <_dtoa_r+0xb44>
 800face:	4659      	mov	r1, fp
 800fad0:	2300      	movs	r3, #0
 800fad2:	220a      	movs	r2, #10
 800fad4:	4620      	mov	r0, r4
 800fad6:	f000 f8e1 	bl	800fc9c <__multadd>
 800fada:	45b8      	cmp	r8, r7
 800fadc:	4683      	mov	fp, r0
 800fade:	f04f 0300 	mov.w	r3, #0
 800fae2:	f04f 020a 	mov.w	r2, #10
 800fae6:	4641      	mov	r1, r8
 800fae8:	4620      	mov	r0, r4
 800faea:	d107      	bne.n	800fafc <_dtoa_r+0xb1c>
 800faec:	f000 f8d6 	bl	800fc9c <__multadd>
 800faf0:	4680      	mov	r8, r0
 800faf2:	4607      	mov	r7, r0
 800faf4:	9b01      	ldr	r3, [sp, #4]
 800faf6:	3301      	adds	r3, #1
 800faf8:	9301      	str	r3, [sp, #4]
 800fafa:	e775      	b.n	800f9e8 <_dtoa_r+0xa08>
 800fafc:	f000 f8ce 	bl	800fc9c <__multadd>
 800fb00:	4639      	mov	r1, r7
 800fb02:	4680      	mov	r8, r0
 800fb04:	2300      	movs	r3, #0
 800fb06:	220a      	movs	r2, #10
 800fb08:	4620      	mov	r0, r4
 800fb0a:	f000 f8c7 	bl	800fc9c <__multadd>
 800fb0e:	4607      	mov	r7, r0
 800fb10:	e7f0      	b.n	800faf4 <_dtoa_r+0xb14>
 800fb12:	f1b9 0f00 	cmp.w	r9, #0
 800fb16:	9a00      	ldr	r2, [sp, #0]
 800fb18:	bfcc      	ite	gt
 800fb1a:	464d      	movgt	r5, r9
 800fb1c:	2501      	movle	r5, #1
 800fb1e:	4415      	add	r5, r2
 800fb20:	f04f 0800 	mov.w	r8, #0
 800fb24:	4659      	mov	r1, fp
 800fb26:	2201      	movs	r2, #1
 800fb28:	4620      	mov	r0, r4
 800fb2a:	9301      	str	r3, [sp, #4]
 800fb2c:	f000 fa66 	bl	800fffc <__lshift>
 800fb30:	4631      	mov	r1, r6
 800fb32:	4683      	mov	fp, r0
 800fb34:	f000 face 	bl	80100d4 <__mcmp>
 800fb38:	2800      	cmp	r0, #0
 800fb3a:	dcb2      	bgt.n	800faa2 <_dtoa_r+0xac2>
 800fb3c:	d102      	bne.n	800fb44 <_dtoa_r+0xb64>
 800fb3e:	9b01      	ldr	r3, [sp, #4]
 800fb40:	07db      	lsls	r3, r3, #31
 800fb42:	d4ae      	bmi.n	800faa2 <_dtoa_r+0xac2>
 800fb44:	462b      	mov	r3, r5
 800fb46:	461d      	mov	r5, r3
 800fb48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb4c:	2a30      	cmp	r2, #48	; 0x30
 800fb4e:	d0fa      	beq.n	800fb46 <_dtoa_r+0xb66>
 800fb50:	e6f7      	b.n	800f942 <_dtoa_r+0x962>
 800fb52:	9a00      	ldr	r2, [sp, #0]
 800fb54:	429a      	cmp	r2, r3
 800fb56:	d1a5      	bne.n	800faa4 <_dtoa_r+0xac4>
 800fb58:	f10a 0a01 	add.w	sl, sl, #1
 800fb5c:	2331      	movs	r3, #49	; 0x31
 800fb5e:	e779      	b.n	800fa54 <_dtoa_r+0xa74>
 800fb60:	4b13      	ldr	r3, [pc, #76]	; (800fbb0 <_dtoa_r+0xbd0>)
 800fb62:	f7ff baaf 	b.w	800f0c4 <_dtoa_r+0xe4>
 800fb66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	f47f aa86 	bne.w	800f07a <_dtoa_r+0x9a>
 800fb6e:	4b11      	ldr	r3, [pc, #68]	; (800fbb4 <_dtoa_r+0xbd4>)
 800fb70:	f7ff baa8 	b.w	800f0c4 <_dtoa_r+0xe4>
 800fb74:	f1b9 0f00 	cmp.w	r9, #0
 800fb78:	dc03      	bgt.n	800fb82 <_dtoa_r+0xba2>
 800fb7a:	9b05      	ldr	r3, [sp, #20]
 800fb7c:	2b02      	cmp	r3, #2
 800fb7e:	f73f aec9 	bgt.w	800f914 <_dtoa_r+0x934>
 800fb82:	9d00      	ldr	r5, [sp, #0]
 800fb84:	4631      	mov	r1, r6
 800fb86:	4658      	mov	r0, fp
 800fb88:	f7ff f99c 	bl	800eec4 <quorem>
 800fb8c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fb90:	f805 3b01 	strb.w	r3, [r5], #1
 800fb94:	9a00      	ldr	r2, [sp, #0]
 800fb96:	1aaa      	subs	r2, r5, r2
 800fb98:	4591      	cmp	r9, r2
 800fb9a:	ddba      	ble.n	800fb12 <_dtoa_r+0xb32>
 800fb9c:	4659      	mov	r1, fp
 800fb9e:	2300      	movs	r3, #0
 800fba0:	220a      	movs	r2, #10
 800fba2:	4620      	mov	r0, r4
 800fba4:	f000 f87a 	bl	800fc9c <__multadd>
 800fba8:	4683      	mov	fp, r0
 800fbaa:	e7eb      	b.n	800fb84 <_dtoa_r+0xba4>
 800fbac:	0801189f 	.word	0x0801189f
 800fbb0:	080117f8 	.word	0x080117f8
 800fbb4:	0801181c 	.word	0x0801181c

0800fbb8 <_localeconv_r>:
 800fbb8:	4800      	ldr	r0, [pc, #0]	; (800fbbc <_localeconv_r+0x4>)
 800fbba:	4770      	bx	lr
 800fbbc:	20000738 	.word	0x20000738

0800fbc0 <__malloc_lock>:
 800fbc0:	4801      	ldr	r0, [pc, #4]	; (800fbc8 <__malloc_lock+0x8>)
 800fbc2:	f000 bd48 	b.w	8010656 <__retarget_lock_acquire_recursive>
 800fbc6:	bf00      	nop
 800fbc8:	20001714 	.word	0x20001714

0800fbcc <__malloc_unlock>:
 800fbcc:	4801      	ldr	r0, [pc, #4]	; (800fbd4 <__malloc_unlock+0x8>)
 800fbce:	f000 bd43 	b.w	8010658 <__retarget_lock_release_recursive>
 800fbd2:	bf00      	nop
 800fbd4:	20001714 	.word	0x20001714

0800fbd8 <_Balloc>:
 800fbd8:	b570      	push	{r4, r5, r6, lr}
 800fbda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fbdc:	4604      	mov	r4, r0
 800fbde:	460d      	mov	r5, r1
 800fbe0:	b976      	cbnz	r6, 800fc00 <_Balloc+0x28>
 800fbe2:	2010      	movs	r0, #16
 800fbe4:	f7fe fc0c 	bl	800e400 <malloc>
 800fbe8:	4602      	mov	r2, r0
 800fbea:	6260      	str	r0, [r4, #36]	; 0x24
 800fbec:	b920      	cbnz	r0, 800fbf8 <_Balloc+0x20>
 800fbee:	4b18      	ldr	r3, [pc, #96]	; (800fc50 <_Balloc+0x78>)
 800fbf0:	4818      	ldr	r0, [pc, #96]	; (800fc54 <_Balloc+0x7c>)
 800fbf2:	2166      	movs	r1, #102	; 0x66
 800fbf4:	f000 fcfe 	bl	80105f4 <__assert_func>
 800fbf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fbfc:	6006      	str	r6, [r0, #0]
 800fbfe:	60c6      	str	r6, [r0, #12]
 800fc00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fc02:	68f3      	ldr	r3, [r6, #12]
 800fc04:	b183      	cbz	r3, 800fc28 <_Balloc+0x50>
 800fc06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc08:	68db      	ldr	r3, [r3, #12]
 800fc0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fc0e:	b9b8      	cbnz	r0, 800fc40 <_Balloc+0x68>
 800fc10:	2101      	movs	r1, #1
 800fc12:	fa01 f605 	lsl.w	r6, r1, r5
 800fc16:	1d72      	adds	r2, r6, #5
 800fc18:	0092      	lsls	r2, r2, #2
 800fc1a:	4620      	mov	r0, r4
 800fc1c:	f000 fb5a 	bl	80102d4 <_calloc_r>
 800fc20:	b160      	cbz	r0, 800fc3c <_Balloc+0x64>
 800fc22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fc26:	e00e      	b.n	800fc46 <_Balloc+0x6e>
 800fc28:	2221      	movs	r2, #33	; 0x21
 800fc2a:	2104      	movs	r1, #4
 800fc2c:	4620      	mov	r0, r4
 800fc2e:	f000 fb51 	bl	80102d4 <_calloc_r>
 800fc32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc34:	60f0      	str	r0, [r6, #12]
 800fc36:	68db      	ldr	r3, [r3, #12]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d1e4      	bne.n	800fc06 <_Balloc+0x2e>
 800fc3c:	2000      	movs	r0, #0
 800fc3e:	bd70      	pop	{r4, r5, r6, pc}
 800fc40:	6802      	ldr	r2, [r0, #0]
 800fc42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fc46:	2300      	movs	r3, #0
 800fc48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fc4c:	e7f7      	b.n	800fc3e <_Balloc+0x66>
 800fc4e:	bf00      	nop
 800fc50:	08011829 	.word	0x08011829
 800fc54:	080118b0 	.word	0x080118b0

0800fc58 <_Bfree>:
 800fc58:	b570      	push	{r4, r5, r6, lr}
 800fc5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fc5c:	4605      	mov	r5, r0
 800fc5e:	460c      	mov	r4, r1
 800fc60:	b976      	cbnz	r6, 800fc80 <_Bfree+0x28>
 800fc62:	2010      	movs	r0, #16
 800fc64:	f7fe fbcc 	bl	800e400 <malloc>
 800fc68:	4602      	mov	r2, r0
 800fc6a:	6268      	str	r0, [r5, #36]	; 0x24
 800fc6c:	b920      	cbnz	r0, 800fc78 <_Bfree+0x20>
 800fc6e:	4b09      	ldr	r3, [pc, #36]	; (800fc94 <_Bfree+0x3c>)
 800fc70:	4809      	ldr	r0, [pc, #36]	; (800fc98 <_Bfree+0x40>)
 800fc72:	218a      	movs	r1, #138	; 0x8a
 800fc74:	f000 fcbe 	bl	80105f4 <__assert_func>
 800fc78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc7c:	6006      	str	r6, [r0, #0]
 800fc7e:	60c6      	str	r6, [r0, #12]
 800fc80:	b13c      	cbz	r4, 800fc92 <_Bfree+0x3a>
 800fc82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fc84:	6862      	ldr	r2, [r4, #4]
 800fc86:	68db      	ldr	r3, [r3, #12]
 800fc88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fc8c:	6021      	str	r1, [r4, #0]
 800fc8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fc92:	bd70      	pop	{r4, r5, r6, pc}
 800fc94:	08011829 	.word	0x08011829
 800fc98:	080118b0 	.word	0x080118b0

0800fc9c <__multadd>:
 800fc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fca0:	690e      	ldr	r6, [r1, #16]
 800fca2:	4607      	mov	r7, r0
 800fca4:	4698      	mov	r8, r3
 800fca6:	460c      	mov	r4, r1
 800fca8:	f101 0014 	add.w	r0, r1, #20
 800fcac:	2300      	movs	r3, #0
 800fcae:	6805      	ldr	r5, [r0, #0]
 800fcb0:	b2a9      	uxth	r1, r5
 800fcb2:	fb02 8101 	mla	r1, r2, r1, r8
 800fcb6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800fcba:	0c2d      	lsrs	r5, r5, #16
 800fcbc:	fb02 c505 	mla	r5, r2, r5, ip
 800fcc0:	b289      	uxth	r1, r1
 800fcc2:	3301      	adds	r3, #1
 800fcc4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800fcc8:	429e      	cmp	r6, r3
 800fcca:	f840 1b04 	str.w	r1, [r0], #4
 800fcce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800fcd2:	dcec      	bgt.n	800fcae <__multadd+0x12>
 800fcd4:	f1b8 0f00 	cmp.w	r8, #0
 800fcd8:	d022      	beq.n	800fd20 <__multadd+0x84>
 800fcda:	68a3      	ldr	r3, [r4, #8]
 800fcdc:	42b3      	cmp	r3, r6
 800fcde:	dc19      	bgt.n	800fd14 <__multadd+0x78>
 800fce0:	6861      	ldr	r1, [r4, #4]
 800fce2:	4638      	mov	r0, r7
 800fce4:	3101      	adds	r1, #1
 800fce6:	f7ff ff77 	bl	800fbd8 <_Balloc>
 800fcea:	4605      	mov	r5, r0
 800fcec:	b928      	cbnz	r0, 800fcfa <__multadd+0x5e>
 800fcee:	4602      	mov	r2, r0
 800fcf0:	4b0d      	ldr	r3, [pc, #52]	; (800fd28 <__multadd+0x8c>)
 800fcf2:	480e      	ldr	r0, [pc, #56]	; (800fd2c <__multadd+0x90>)
 800fcf4:	21b5      	movs	r1, #181	; 0xb5
 800fcf6:	f000 fc7d 	bl	80105f4 <__assert_func>
 800fcfa:	6922      	ldr	r2, [r4, #16]
 800fcfc:	3202      	adds	r2, #2
 800fcfe:	f104 010c 	add.w	r1, r4, #12
 800fd02:	0092      	lsls	r2, r2, #2
 800fd04:	300c      	adds	r0, #12
 800fd06:	f7fe fb83 	bl	800e410 <memcpy>
 800fd0a:	4621      	mov	r1, r4
 800fd0c:	4638      	mov	r0, r7
 800fd0e:	f7ff ffa3 	bl	800fc58 <_Bfree>
 800fd12:	462c      	mov	r4, r5
 800fd14:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800fd18:	3601      	adds	r6, #1
 800fd1a:	f8c3 8014 	str.w	r8, [r3, #20]
 800fd1e:	6126      	str	r6, [r4, #16]
 800fd20:	4620      	mov	r0, r4
 800fd22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd26:	bf00      	nop
 800fd28:	0801189f 	.word	0x0801189f
 800fd2c:	080118b0 	.word	0x080118b0

0800fd30 <__hi0bits>:
 800fd30:	0c03      	lsrs	r3, r0, #16
 800fd32:	041b      	lsls	r3, r3, #16
 800fd34:	b9d3      	cbnz	r3, 800fd6c <__hi0bits+0x3c>
 800fd36:	0400      	lsls	r0, r0, #16
 800fd38:	2310      	movs	r3, #16
 800fd3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fd3e:	bf04      	itt	eq
 800fd40:	0200      	lsleq	r0, r0, #8
 800fd42:	3308      	addeq	r3, #8
 800fd44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fd48:	bf04      	itt	eq
 800fd4a:	0100      	lsleq	r0, r0, #4
 800fd4c:	3304      	addeq	r3, #4
 800fd4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fd52:	bf04      	itt	eq
 800fd54:	0080      	lsleq	r0, r0, #2
 800fd56:	3302      	addeq	r3, #2
 800fd58:	2800      	cmp	r0, #0
 800fd5a:	db05      	blt.n	800fd68 <__hi0bits+0x38>
 800fd5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fd60:	f103 0301 	add.w	r3, r3, #1
 800fd64:	bf08      	it	eq
 800fd66:	2320      	moveq	r3, #32
 800fd68:	4618      	mov	r0, r3
 800fd6a:	4770      	bx	lr
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	e7e4      	b.n	800fd3a <__hi0bits+0xa>

0800fd70 <__lo0bits>:
 800fd70:	6803      	ldr	r3, [r0, #0]
 800fd72:	f013 0207 	ands.w	r2, r3, #7
 800fd76:	4601      	mov	r1, r0
 800fd78:	d00b      	beq.n	800fd92 <__lo0bits+0x22>
 800fd7a:	07da      	lsls	r2, r3, #31
 800fd7c:	d424      	bmi.n	800fdc8 <__lo0bits+0x58>
 800fd7e:	0798      	lsls	r0, r3, #30
 800fd80:	bf49      	itett	mi
 800fd82:	085b      	lsrmi	r3, r3, #1
 800fd84:	089b      	lsrpl	r3, r3, #2
 800fd86:	2001      	movmi	r0, #1
 800fd88:	600b      	strmi	r3, [r1, #0]
 800fd8a:	bf5c      	itt	pl
 800fd8c:	600b      	strpl	r3, [r1, #0]
 800fd8e:	2002      	movpl	r0, #2
 800fd90:	4770      	bx	lr
 800fd92:	b298      	uxth	r0, r3
 800fd94:	b9b0      	cbnz	r0, 800fdc4 <__lo0bits+0x54>
 800fd96:	0c1b      	lsrs	r3, r3, #16
 800fd98:	2010      	movs	r0, #16
 800fd9a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fd9e:	bf04      	itt	eq
 800fda0:	0a1b      	lsreq	r3, r3, #8
 800fda2:	3008      	addeq	r0, #8
 800fda4:	071a      	lsls	r2, r3, #28
 800fda6:	bf04      	itt	eq
 800fda8:	091b      	lsreq	r3, r3, #4
 800fdaa:	3004      	addeq	r0, #4
 800fdac:	079a      	lsls	r2, r3, #30
 800fdae:	bf04      	itt	eq
 800fdb0:	089b      	lsreq	r3, r3, #2
 800fdb2:	3002      	addeq	r0, #2
 800fdb4:	07da      	lsls	r2, r3, #31
 800fdb6:	d403      	bmi.n	800fdc0 <__lo0bits+0x50>
 800fdb8:	085b      	lsrs	r3, r3, #1
 800fdba:	f100 0001 	add.w	r0, r0, #1
 800fdbe:	d005      	beq.n	800fdcc <__lo0bits+0x5c>
 800fdc0:	600b      	str	r3, [r1, #0]
 800fdc2:	4770      	bx	lr
 800fdc4:	4610      	mov	r0, r2
 800fdc6:	e7e8      	b.n	800fd9a <__lo0bits+0x2a>
 800fdc8:	2000      	movs	r0, #0
 800fdca:	4770      	bx	lr
 800fdcc:	2020      	movs	r0, #32
 800fdce:	4770      	bx	lr

0800fdd0 <__i2b>:
 800fdd0:	b510      	push	{r4, lr}
 800fdd2:	460c      	mov	r4, r1
 800fdd4:	2101      	movs	r1, #1
 800fdd6:	f7ff feff 	bl	800fbd8 <_Balloc>
 800fdda:	4602      	mov	r2, r0
 800fddc:	b928      	cbnz	r0, 800fdea <__i2b+0x1a>
 800fdde:	4b05      	ldr	r3, [pc, #20]	; (800fdf4 <__i2b+0x24>)
 800fde0:	4805      	ldr	r0, [pc, #20]	; (800fdf8 <__i2b+0x28>)
 800fde2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fde6:	f000 fc05 	bl	80105f4 <__assert_func>
 800fdea:	2301      	movs	r3, #1
 800fdec:	6144      	str	r4, [r0, #20]
 800fdee:	6103      	str	r3, [r0, #16]
 800fdf0:	bd10      	pop	{r4, pc}
 800fdf2:	bf00      	nop
 800fdf4:	0801189f 	.word	0x0801189f
 800fdf8:	080118b0 	.word	0x080118b0

0800fdfc <__multiply>:
 800fdfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe00:	4614      	mov	r4, r2
 800fe02:	690a      	ldr	r2, [r1, #16]
 800fe04:	6923      	ldr	r3, [r4, #16]
 800fe06:	429a      	cmp	r2, r3
 800fe08:	bfb8      	it	lt
 800fe0a:	460b      	movlt	r3, r1
 800fe0c:	460d      	mov	r5, r1
 800fe0e:	bfbc      	itt	lt
 800fe10:	4625      	movlt	r5, r4
 800fe12:	461c      	movlt	r4, r3
 800fe14:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800fe18:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fe1c:	68ab      	ldr	r3, [r5, #8]
 800fe1e:	6869      	ldr	r1, [r5, #4]
 800fe20:	eb0a 0709 	add.w	r7, sl, r9
 800fe24:	42bb      	cmp	r3, r7
 800fe26:	b085      	sub	sp, #20
 800fe28:	bfb8      	it	lt
 800fe2a:	3101      	addlt	r1, #1
 800fe2c:	f7ff fed4 	bl	800fbd8 <_Balloc>
 800fe30:	b930      	cbnz	r0, 800fe40 <__multiply+0x44>
 800fe32:	4602      	mov	r2, r0
 800fe34:	4b42      	ldr	r3, [pc, #264]	; (800ff40 <__multiply+0x144>)
 800fe36:	4843      	ldr	r0, [pc, #268]	; (800ff44 <__multiply+0x148>)
 800fe38:	f240 115d 	movw	r1, #349	; 0x15d
 800fe3c:	f000 fbda 	bl	80105f4 <__assert_func>
 800fe40:	f100 0614 	add.w	r6, r0, #20
 800fe44:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800fe48:	4633      	mov	r3, r6
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	4543      	cmp	r3, r8
 800fe4e:	d31e      	bcc.n	800fe8e <__multiply+0x92>
 800fe50:	f105 0c14 	add.w	ip, r5, #20
 800fe54:	f104 0314 	add.w	r3, r4, #20
 800fe58:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800fe5c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800fe60:	9202      	str	r2, [sp, #8]
 800fe62:	ebac 0205 	sub.w	r2, ip, r5
 800fe66:	3a15      	subs	r2, #21
 800fe68:	f022 0203 	bic.w	r2, r2, #3
 800fe6c:	3204      	adds	r2, #4
 800fe6e:	f105 0115 	add.w	r1, r5, #21
 800fe72:	458c      	cmp	ip, r1
 800fe74:	bf38      	it	cc
 800fe76:	2204      	movcc	r2, #4
 800fe78:	9201      	str	r2, [sp, #4]
 800fe7a:	9a02      	ldr	r2, [sp, #8]
 800fe7c:	9303      	str	r3, [sp, #12]
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d808      	bhi.n	800fe94 <__multiply+0x98>
 800fe82:	2f00      	cmp	r7, #0
 800fe84:	dc55      	bgt.n	800ff32 <__multiply+0x136>
 800fe86:	6107      	str	r7, [r0, #16]
 800fe88:	b005      	add	sp, #20
 800fe8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe8e:	f843 2b04 	str.w	r2, [r3], #4
 800fe92:	e7db      	b.n	800fe4c <__multiply+0x50>
 800fe94:	f8b3 a000 	ldrh.w	sl, [r3]
 800fe98:	f1ba 0f00 	cmp.w	sl, #0
 800fe9c:	d020      	beq.n	800fee0 <__multiply+0xe4>
 800fe9e:	f105 0e14 	add.w	lr, r5, #20
 800fea2:	46b1      	mov	r9, r6
 800fea4:	2200      	movs	r2, #0
 800fea6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800feaa:	f8d9 b000 	ldr.w	fp, [r9]
 800feae:	b2a1      	uxth	r1, r4
 800feb0:	fa1f fb8b 	uxth.w	fp, fp
 800feb4:	fb0a b101 	mla	r1, sl, r1, fp
 800feb8:	4411      	add	r1, r2
 800feba:	f8d9 2000 	ldr.w	r2, [r9]
 800febe:	0c24      	lsrs	r4, r4, #16
 800fec0:	0c12      	lsrs	r2, r2, #16
 800fec2:	fb0a 2404 	mla	r4, sl, r4, r2
 800fec6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800feca:	b289      	uxth	r1, r1
 800fecc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800fed0:	45f4      	cmp	ip, lr
 800fed2:	f849 1b04 	str.w	r1, [r9], #4
 800fed6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800feda:	d8e4      	bhi.n	800fea6 <__multiply+0xaa>
 800fedc:	9901      	ldr	r1, [sp, #4]
 800fede:	5072      	str	r2, [r6, r1]
 800fee0:	9a03      	ldr	r2, [sp, #12]
 800fee2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fee6:	3304      	adds	r3, #4
 800fee8:	f1b9 0f00 	cmp.w	r9, #0
 800feec:	d01f      	beq.n	800ff2e <__multiply+0x132>
 800feee:	6834      	ldr	r4, [r6, #0]
 800fef0:	f105 0114 	add.w	r1, r5, #20
 800fef4:	46b6      	mov	lr, r6
 800fef6:	f04f 0a00 	mov.w	sl, #0
 800fefa:	880a      	ldrh	r2, [r1, #0]
 800fefc:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ff00:	fb09 b202 	mla	r2, r9, r2, fp
 800ff04:	4492      	add	sl, r2
 800ff06:	b2a4      	uxth	r4, r4
 800ff08:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ff0c:	f84e 4b04 	str.w	r4, [lr], #4
 800ff10:	f851 4b04 	ldr.w	r4, [r1], #4
 800ff14:	f8be 2000 	ldrh.w	r2, [lr]
 800ff18:	0c24      	lsrs	r4, r4, #16
 800ff1a:	fb09 2404 	mla	r4, r9, r4, r2
 800ff1e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ff22:	458c      	cmp	ip, r1
 800ff24:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ff28:	d8e7      	bhi.n	800fefa <__multiply+0xfe>
 800ff2a:	9a01      	ldr	r2, [sp, #4]
 800ff2c:	50b4      	str	r4, [r6, r2]
 800ff2e:	3604      	adds	r6, #4
 800ff30:	e7a3      	b.n	800fe7a <__multiply+0x7e>
 800ff32:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d1a5      	bne.n	800fe86 <__multiply+0x8a>
 800ff3a:	3f01      	subs	r7, #1
 800ff3c:	e7a1      	b.n	800fe82 <__multiply+0x86>
 800ff3e:	bf00      	nop
 800ff40:	0801189f 	.word	0x0801189f
 800ff44:	080118b0 	.word	0x080118b0

0800ff48 <__pow5mult>:
 800ff48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff4c:	4615      	mov	r5, r2
 800ff4e:	f012 0203 	ands.w	r2, r2, #3
 800ff52:	4606      	mov	r6, r0
 800ff54:	460f      	mov	r7, r1
 800ff56:	d007      	beq.n	800ff68 <__pow5mult+0x20>
 800ff58:	4c25      	ldr	r4, [pc, #148]	; (800fff0 <__pow5mult+0xa8>)
 800ff5a:	3a01      	subs	r2, #1
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ff62:	f7ff fe9b 	bl	800fc9c <__multadd>
 800ff66:	4607      	mov	r7, r0
 800ff68:	10ad      	asrs	r5, r5, #2
 800ff6a:	d03d      	beq.n	800ffe8 <__pow5mult+0xa0>
 800ff6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ff6e:	b97c      	cbnz	r4, 800ff90 <__pow5mult+0x48>
 800ff70:	2010      	movs	r0, #16
 800ff72:	f7fe fa45 	bl	800e400 <malloc>
 800ff76:	4602      	mov	r2, r0
 800ff78:	6270      	str	r0, [r6, #36]	; 0x24
 800ff7a:	b928      	cbnz	r0, 800ff88 <__pow5mult+0x40>
 800ff7c:	4b1d      	ldr	r3, [pc, #116]	; (800fff4 <__pow5mult+0xac>)
 800ff7e:	481e      	ldr	r0, [pc, #120]	; (800fff8 <__pow5mult+0xb0>)
 800ff80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ff84:	f000 fb36 	bl	80105f4 <__assert_func>
 800ff88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ff8c:	6004      	str	r4, [r0, #0]
 800ff8e:	60c4      	str	r4, [r0, #12]
 800ff90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ff94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ff98:	b94c      	cbnz	r4, 800ffae <__pow5mult+0x66>
 800ff9a:	f240 2171 	movw	r1, #625	; 0x271
 800ff9e:	4630      	mov	r0, r6
 800ffa0:	f7ff ff16 	bl	800fdd0 <__i2b>
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	f8c8 0008 	str.w	r0, [r8, #8]
 800ffaa:	4604      	mov	r4, r0
 800ffac:	6003      	str	r3, [r0, #0]
 800ffae:	f04f 0900 	mov.w	r9, #0
 800ffb2:	07eb      	lsls	r3, r5, #31
 800ffb4:	d50a      	bpl.n	800ffcc <__pow5mult+0x84>
 800ffb6:	4639      	mov	r1, r7
 800ffb8:	4622      	mov	r2, r4
 800ffba:	4630      	mov	r0, r6
 800ffbc:	f7ff ff1e 	bl	800fdfc <__multiply>
 800ffc0:	4639      	mov	r1, r7
 800ffc2:	4680      	mov	r8, r0
 800ffc4:	4630      	mov	r0, r6
 800ffc6:	f7ff fe47 	bl	800fc58 <_Bfree>
 800ffca:	4647      	mov	r7, r8
 800ffcc:	106d      	asrs	r5, r5, #1
 800ffce:	d00b      	beq.n	800ffe8 <__pow5mult+0xa0>
 800ffd0:	6820      	ldr	r0, [r4, #0]
 800ffd2:	b938      	cbnz	r0, 800ffe4 <__pow5mult+0x9c>
 800ffd4:	4622      	mov	r2, r4
 800ffd6:	4621      	mov	r1, r4
 800ffd8:	4630      	mov	r0, r6
 800ffda:	f7ff ff0f 	bl	800fdfc <__multiply>
 800ffde:	6020      	str	r0, [r4, #0]
 800ffe0:	f8c0 9000 	str.w	r9, [r0]
 800ffe4:	4604      	mov	r4, r0
 800ffe6:	e7e4      	b.n	800ffb2 <__pow5mult+0x6a>
 800ffe8:	4638      	mov	r0, r7
 800ffea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffee:	bf00      	nop
 800fff0:	08011a00 	.word	0x08011a00
 800fff4:	08011829 	.word	0x08011829
 800fff8:	080118b0 	.word	0x080118b0

0800fffc <__lshift>:
 800fffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010000:	460c      	mov	r4, r1
 8010002:	6849      	ldr	r1, [r1, #4]
 8010004:	6923      	ldr	r3, [r4, #16]
 8010006:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801000a:	68a3      	ldr	r3, [r4, #8]
 801000c:	4607      	mov	r7, r0
 801000e:	4691      	mov	r9, r2
 8010010:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010014:	f108 0601 	add.w	r6, r8, #1
 8010018:	42b3      	cmp	r3, r6
 801001a:	db0b      	blt.n	8010034 <__lshift+0x38>
 801001c:	4638      	mov	r0, r7
 801001e:	f7ff fddb 	bl	800fbd8 <_Balloc>
 8010022:	4605      	mov	r5, r0
 8010024:	b948      	cbnz	r0, 801003a <__lshift+0x3e>
 8010026:	4602      	mov	r2, r0
 8010028:	4b28      	ldr	r3, [pc, #160]	; (80100cc <__lshift+0xd0>)
 801002a:	4829      	ldr	r0, [pc, #164]	; (80100d0 <__lshift+0xd4>)
 801002c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010030:	f000 fae0 	bl	80105f4 <__assert_func>
 8010034:	3101      	adds	r1, #1
 8010036:	005b      	lsls	r3, r3, #1
 8010038:	e7ee      	b.n	8010018 <__lshift+0x1c>
 801003a:	2300      	movs	r3, #0
 801003c:	f100 0114 	add.w	r1, r0, #20
 8010040:	f100 0210 	add.w	r2, r0, #16
 8010044:	4618      	mov	r0, r3
 8010046:	4553      	cmp	r3, sl
 8010048:	db33      	blt.n	80100b2 <__lshift+0xb6>
 801004a:	6920      	ldr	r0, [r4, #16]
 801004c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010050:	f104 0314 	add.w	r3, r4, #20
 8010054:	f019 091f 	ands.w	r9, r9, #31
 8010058:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801005c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010060:	d02b      	beq.n	80100ba <__lshift+0xbe>
 8010062:	f1c9 0e20 	rsb	lr, r9, #32
 8010066:	468a      	mov	sl, r1
 8010068:	2200      	movs	r2, #0
 801006a:	6818      	ldr	r0, [r3, #0]
 801006c:	fa00 f009 	lsl.w	r0, r0, r9
 8010070:	4302      	orrs	r2, r0
 8010072:	f84a 2b04 	str.w	r2, [sl], #4
 8010076:	f853 2b04 	ldr.w	r2, [r3], #4
 801007a:	459c      	cmp	ip, r3
 801007c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010080:	d8f3      	bhi.n	801006a <__lshift+0x6e>
 8010082:	ebac 0304 	sub.w	r3, ip, r4
 8010086:	3b15      	subs	r3, #21
 8010088:	f023 0303 	bic.w	r3, r3, #3
 801008c:	3304      	adds	r3, #4
 801008e:	f104 0015 	add.w	r0, r4, #21
 8010092:	4584      	cmp	ip, r0
 8010094:	bf38      	it	cc
 8010096:	2304      	movcc	r3, #4
 8010098:	50ca      	str	r2, [r1, r3]
 801009a:	b10a      	cbz	r2, 80100a0 <__lshift+0xa4>
 801009c:	f108 0602 	add.w	r6, r8, #2
 80100a0:	3e01      	subs	r6, #1
 80100a2:	4638      	mov	r0, r7
 80100a4:	612e      	str	r6, [r5, #16]
 80100a6:	4621      	mov	r1, r4
 80100a8:	f7ff fdd6 	bl	800fc58 <_Bfree>
 80100ac:	4628      	mov	r0, r5
 80100ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80100b6:	3301      	adds	r3, #1
 80100b8:	e7c5      	b.n	8010046 <__lshift+0x4a>
 80100ba:	3904      	subs	r1, #4
 80100bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80100c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80100c4:	459c      	cmp	ip, r3
 80100c6:	d8f9      	bhi.n	80100bc <__lshift+0xc0>
 80100c8:	e7ea      	b.n	80100a0 <__lshift+0xa4>
 80100ca:	bf00      	nop
 80100cc:	0801189f 	.word	0x0801189f
 80100d0:	080118b0 	.word	0x080118b0

080100d4 <__mcmp>:
 80100d4:	b530      	push	{r4, r5, lr}
 80100d6:	6902      	ldr	r2, [r0, #16]
 80100d8:	690c      	ldr	r4, [r1, #16]
 80100da:	1b12      	subs	r2, r2, r4
 80100dc:	d10e      	bne.n	80100fc <__mcmp+0x28>
 80100de:	f100 0314 	add.w	r3, r0, #20
 80100e2:	3114      	adds	r1, #20
 80100e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80100e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80100ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80100f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80100f4:	42a5      	cmp	r5, r4
 80100f6:	d003      	beq.n	8010100 <__mcmp+0x2c>
 80100f8:	d305      	bcc.n	8010106 <__mcmp+0x32>
 80100fa:	2201      	movs	r2, #1
 80100fc:	4610      	mov	r0, r2
 80100fe:	bd30      	pop	{r4, r5, pc}
 8010100:	4283      	cmp	r3, r0
 8010102:	d3f3      	bcc.n	80100ec <__mcmp+0x18>
 8010104:	e7fa      	b.n	80100fc <__mcmp+0x28>
 8010106:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801010a:	e7f7      	b.n	80100fc <__mcmp+0x28>

0801010c <__mdiff>:
 801010c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010110:	460c      	mov	r4, r1
 8010112:	4606      	mov	r6, r0
 8010114:	4611      	mov	r1, r2
 8010116:	4620      	mov	r0, r4
 8010118:	4617      	mov	r7, r2
 801011a:	f7ff ffdb 	bl	80100d4 <__mcmp>
 801011e:	1e05      	subs	r5, r0, #0
 8010120:	d110      	bne.n	8010144 <__mdiff+0x38>
 8010122:	4629      	mov	r1, r5
 8010124:	4630      	mov	r0, r6
 8010126:	f7ff fd57 	bl	800fbd8 <_Balloc>
 801012a:	b930      	cbnz	r0, 801013a <__mdiff+0x2e>
 801012c:	4b39      	ldr	r3, [pc, #228]	; (8010214 <__mdiff+0x108>)
 801012e:	4602      	mov	r2, r0
 8010130:	f240 2132 	movw	r1, #562	; 0x232
 8010134:	4838      	ldr	r0, [pc, #224]	; (8010218 <__mdiff+0x10c>)
 8010136:	f000 fa5d 	bl	80105f4 <__assert_func>
 801013a:	2301      	movs	r3, #1
 801013c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010140:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010144:	bfa4      	itt	ge
 8010146:	463b      	movge	r3, r7
 8010148:	4627      	movge	r7, r4
 801014a:	4630      	mov	r0, r6
 801014c:	6879      	ldr	r1, [r7, #4]
 801014e:	bfa6      	itte	ge
 8010150:	461c      	movge	r4, r3
 8010152:	2500      	movge	r5, #0
 8010154:	2501      	movlt	r5, #1
 8010156:	f7ff fd3f 	bl	800fbd8 <_Balloc>
 801015a:	b920      	cbnz	r0, 8010166 <__mdiff+0x5a>
 801015c:	4b2d      	ldr	r3, [pc, #180]	; (8010214 <__mdiff+0x108>)
 801015e:	4602      	mov	r2, r0
 8010160:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010164:	e7e6      	b.n	8010134 <__mdiff+0x28>
 8010166:	693e      	ldr	r6, [r7, #16]
 8010168:	60c5      	str	r5, [r0, #12]
 801016a:	6925      	ldr	r5, [r4, #16]
 801016c:	f107 0114 	add.w	r1, r7, #20
 8010170:	f104 0914 	add.w	r9, r4, #20
 8010174:	f100 0e14 	add.w	lr, r0, #20
 8010178:	f107 0210 	add.w	r2, r7, #16
 801017c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010180:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010184:	46f2      	mov	sl, lr
 8010186:	2700      	movs	r7, #0
 8010188:	f859 3b04 	ldr.w	r3, [r9], #4
 801018c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010190:	fa1f f883 	uxth.w	r8, r3
 8010194:	fa17 f78b 	uxtah	r7, r7, fp
 8010198:	0c1b      	lsrs	r3, r3, #16
 801019a:	eba7 0808 	sub.w	r8, r7, r8
 801019e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80101a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80101a6:	fa1f f888 	uxth.w	r8, r8
 80101aa:	141f      	asrs	r7, r3, #16
 80101ac:	454d      	cmp	r5, r9
 80101ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80101b2:	f84a 3b04 	str.w	r3, [sl], #4
 80101b6:	d8e7      	bhi.n	8010188 <__mdiff+0x7c>
 80101b8:	1b2b      	subs	r3, r5, r4
 80101ba:	3b15      	subs	r3, #21
 80101bc:	f023 0303 	bic.w	r3, r3, #3
 80101c0:	3304      	adds	r3, #4
 80101c2:	3415      	adds	r4, #21
 80101c4:	42a5      	cmp	r5, r4
 80101c6:	bf38      	it	cc
 80101c8:	2304      	movcc	r3, #4
 80101ca:	4419      	add	r1, r3
 80101cc:	4473      	add	r3, lr
 80101ce:	469e      	mov	lr, r3
 80101d0:	460d      	mov	r5, r1
 80101d2:	4565      	cmp	r5, ip
 80101d4:	d30e      	bcc.n	80101f4 <__mdiff+0xe8>
 80101d6:	f10c 0203 	add.w	r2, ip, #3
 80101da:	1a52      	subs	r2, r2, r1
 80101dc:	f022 0203 	bic.w	r2, r2, #3
 80101e0:	3903      	subs	r1, #3
 80101e2:	458c      	cmp	ip, r1
 80101e4:	bf38      	it	cc
 80101e6:	2200      	movcc	r2, #0
 80101e8:	441a      	add	r2, r3
 80101ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80101ee:	b17b      	cbz	r3, 8010210 <__mdiff+0x104>
 80101f0:	6106      	str	r6, [r0, #16]
 80101f2:	e7a5      	b.n	8010140 <__mdiff+0x34>
 80101f4:	f855 8b04 	ldr.w	r8, [r5], #4
 80101f8:	fa17 f488 	uxtah	r4, r7, r8
 80101fc:	1422      	asrs	r2, r4, #16
 80101fe:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8010202:	b2a4      	uxth	r4, r4
 8010204:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010208:	f84e 4b04 	str.w	r4, [lr], #4
 801020c:	1417      	asrs	r7, r2, #16
 801020e:	e7e0      	b.n	80101d2 <__mdiff+0xc6>
 8010210:	3e01      	subs	r6, #1
 8010212:	e7ea      	b.n	80101ea <__mdiff+0xde>
 8010214:	0801189f 	.word	0x0801189f
 8010218:	080118b0 	.word	0x080118b0

0801021c <__d2b>:
 801021c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010220:	4689      	mov	r9, r1
 8010222:	2101      	movs	r1, #1
 8010224:	ec57 6b10 	vmov	r6, r7, d0
 8010228:	4690      	mov	r8, r2
 801022a:	f7ff fcd5 	bl	800fbd8 <_Balloc>
 801022e:	4604      	mov	r4, r0
 8010230:	b930      	cbnz	r0, 8010240 <__d2b+0x24>
 8010232:	4602      	mov	r2, r0
 8010234:	4b25      	ldr	r3, [pc, #148]	; (80102cc <__d2b+0xb0>)
 8010236:	4826      	ldr	r0, [pc, #152]	; (80102d0 <__d2b+0xb4>)
 8010238:	f240 310a 	movw	r1, #778	; 0x30a
 801023c:	f000 f9da 	bl	80105f4 <__assert_func>
 8010240:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010244:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010248:	bb35      	cbnz	r5, 8010298 <__d2b+0x7c>
 801024a:	2e00      	cmp	r6, #0
 801024c:	9301      	str	r3, [sp, #4]
 801024e:	d028      	beq.n	80102a2 <__d2b+0x86>
 8010250:	4668      	mov	r0, sp
 8010252:	9600      	str	r6, [sp, #0]
 8010254:	f7ff fd8c 	bl	800fd70 <__lo0bits>
 8010258:	9900      	ldr	r1, [sp, #0]
 801025a:	b300      	cbz	r0, 801029e <__d2b+0x82>
 801025c:	9a01      	ldr	r2, [sp, #4]
 801025e:	f1c0 0320 	rsb	r3, r0, #32
 8010262:	fa02 f303 	lsl.w	r3, r2, r3
 8010266:	430b      	orrs	r3, r1
 8010268:	40c2      	lsrs	r2, r0
 801026a:	6163      	str	r3, [r4, #20]
 801026c:	9201      	str	r2, [sp, #4]
 801026e:	9b01      	ldr	r3, [sp, #4]
 8010270:	61a3      	str	r3, [r4, #24]
 8010272:	2b00      	cmp	r3, #0
 8010274:	bf14      	ite	ne
 8010276:	2202      	movne	r2, #2
 8010278:	2201      	moveq	r2, #1
 801027a:	6122      	str	r2, [r4, #16]
 801027c:	b1d5      	cbz	r5, 80102b4 <__d2b+0x98>
 801027e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010282:	4405      	add	r5, r0
 8010284:	f8c9 5000 	str.w	r5, [r9]
 8010288:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801028c:	f8c8 0000 	str.w	r0, [r8]
 8010290:	4620      	mov	r0, r4
 8010292:	b003      	add	sp, #12
 8010294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010298:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801029c:	e7d5      	b.n	801024a <__d2b+0x2e>
 801029e:	6161      	str	r1, [r4, #20]
 80102a0:	e7e5      	b.n	801026e <__d2b+0x52>
 80102a2:	a801      	add	r0, sp, #4
 80102a4:	f7ff fd64 	bl	800fd70 <__lo0bits>
 80102a8:	9b01      	ldr	r3, [sp, #4]
 80102aa:	6163      	str	r3, [r4, #20]
 80102ac:	2201      	movs	r2, #1
 80102ae:	6122      	str	r2, [r4, #16]
 80102b0:	3020      	adds	r0, #32
 80102b2:	e7e3      	b.n	801027c <__d2b+0x60>
 80102b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80102b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80102bc:	f8c9 0000 	str.w	r0, [r9]
 80102c0:	6918      	ldr	r0, [r3, #16]
 80102c2:	f7ff fd35 	bl	800fd30 <__hi0bits>
 80102c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80102ca:	e7df      	b.n	801028c <__d2b+0x70>
 80102cc:	0801189f 	.word	0x0801189f
 80102d0:	080118b0 	.word	0x080118b0

080102d4 <_calloc_r>:
 80102d4:	b513      	push	{r0, r1, r4, lr}
 80102d6:	434a      	muls	r2, r1
 80102d8:	4611      	mov	r1, r2
 80102da:	9201      	str	r2, [sp, #4]
 80102dc:	f7fe f8fe 	bl	800e4dc <_malloc_r>
 80102e0:	4604      	mov	r4, r0
 80102e2:	b118      	cbz	r0, 80102ec <_calloc_r+0x18>
 80102e4:	9a01      	ldr	r2, [sp, #4]
 80102e6:	2100      	movs	r1, #0
 80102e8:	f7fe f8a0 	bl	800e42c <memset>
 80102ec:	4620      	mov	r0, r4
 80102ee:	b002      	add	sp, #8
 80102f0:	bd10      	pop	{r4, pc}

080102f2 <_realloc_r>:
 80102f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102f4:	4607      	mov	r7, r0
 80102f6:	4614      	mov	r4, r2
 80102f8:	460e      	mov	r6, r1
 80102fa:	b921      	cbnz	r1, 8010306 <_realloc_r+0x14>
 80102fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010300:	4611      	mov	r1, r2
 8010302:	f7fe b8eb 	b.w	800e4dc <_malloc_r>
 8010306:	b922      	cbnz	r2, 8010312 <_realloc_r+0x20>
 8010308:	f7fe f898 	bl	800e43c <_free_r>
 801030c:	4625      	mov	r5, r4
 801030e:	4628      	mov	r0, r5
 8010310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010312:	f000 f9ce 	bl	80106b2 <_malloc_usable_size_r>
 8010316:	42a0      	cmp	r0, r4
 8010318:	d20f      	bcs.n	801033a <_realloc_r+0x48>
 801031a:	4621      	mov	r1, r4
 801031c:	4638      	mov	r0, r7
 801031e:	f7fe f8dd 	bl	800e4dc <_malloc_r>
 8010322:	4605      	mov	r5, r0
 8010324:	2800      	cmp	r0, #0
 8010326:	d0f2      	beq.n	801030e <_realloc_r+0x1c>
 8010328:	4631      	mov	r1, r6
 801032a:	4622      	mov	r2, r4
 801032c:	f7fe f870 	bl	800e410 <memcpy>
 8010330:	4631      	mov	r1, r6
 8010332:	4638      	mov	r0, r7
 8010334:	f7fe f882 	bl	800e43c <_free_r>
 8010338:	e7e9      	b.n	801030e <_realloc_r+0x1c>
 801033a:	4635      	mov	r5, r6
 801033c:	e7e7      	b.n	801030e <_realloc_r+0x1c>

0801033e <__ssputs_r>:
 801033e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010342:	688e      	ldr	r6, [r1, #8]
 8010344:	429e      	cmp	r6, r3
 8010346:	4682      	mov	sl, r0
 8010348:	460c      	mov	r4, r1
 801034a:	4690      	mov	r8, r2
 801034c:	461f      	mov	r7, r3
 801034e:	d838      	bhi.n	80103c2 <__ssputs_r+0x84>
 8010350:	898a      	ldrh	r2, [r1, #12]
 8010352:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010356:	d032      	beq.n	80103be <__ssputs_r+0x80>
 8010358:	6825      	ldr	r5, [r4, #0]
 801035a:	6909      	ldr	r1, [r1, #16]
 801035c:	eba5 0901 	sub.w	r9, r5, r1
 8010360:	6965      	ldr	r5, [r4, #20]
 8010362:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010366:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801036a:	3301      	adds	r3, #1
 801036c:	444b      	add	r3, r9
 801036e:	106d      	asrs	r5, r5, #1
 8010370:	429d      	cmp	r5, r3
 8010372:	bf38      	it	cc
 8010374:	461d      	movcc	r5, r3
 8010376:	0553      	lsls	r3, r2, #21
 8010378:	d531      	bpl.n	80103de <__ssputs_r+0xa0>
 801037a:	4629      	mov	r1, r5
 801037c:	f7fe f8ae 	bl	800e4dc <_malloc_r>
 8010380:	4606      	mov	r6, r0
 8010382:	b950      	cbnz	r0, 801039a <__ssputs_r+0x5c>
 8010384:	230c      	movs	r3, #12
 8010386:	f8ca 3000 	str.w	r3, [sl]
 801038a:	89a3      	ldrh	r3, [r4, #12]
 801038c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010390:	81a3      	strh	r3, [r4, #12]
 8010392:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801039a:	6921      	ldr	r1, [r4, #16]
 801039c:	464a      	mov	r2, r9
 801039e:	f7fe f837 	bl	800e410 <memcpy>
 80103a2:	89a3      	ldrh	r3, [r4, #12]
 80103a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80103a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103ac:	81a3      	strh	r3, [r4, #12]
 80103ae:	6126      	str	r6, [r4, #16]
 80103b0:	6165      	str	r5, [r4, #20]
 80103b2:	444e      	add	r6, r9
 80103b4:	eba5 0509 	sub.w	r5, r5, r9
 80103b8:	6026      	str	r6, [r4, #0]
 80103ba:	60a5      	str	r5, [r4, #8]
 80103bc:	463e      	mov	r6, r7
 80103be:	42be      	cmp	r6, r7
 80103c0:	d900      	bls.n	80103c4 <__ssputs_r+0x86>
 80103c2:	463e      	mov	r6, r7
 80103c4:	4632      	mov	r2, r6
 80103c6:	6820      	ldr	r0, [r4, #0]
 80103c8:	4641      	mov	r1, r8
 80103ca:	f000 f958 	bl	801067e <memmove>
 80103ce:	68a3      	ldr	r3, [r4, #8]
 80103d0:	6822      	ldr	r2, [r4, #0]
 80103d2:	1b9b      	subs	r3, r3, r6
 80103d4:	4432      	add	r2, r6
 80103d6:	60a3      	str	r3, [r4, #8]
 80103d8:	6022      	str	r2, [r4, #0]
 80103da:	2000      	movs	r0, #0
 80103dc:	e7db      	b.n	8010396 <__ssputs_r+0x58>
 80103de:	462a      	mov	r2, r5
 80103e0:	f7ff ff87 	bl	80102f2 <_realloc_r>
 80103e4:	4606      	mov	r6, r0
 80103e6:	2800      	cmp	r0, #0
 80103e8:	d1e1      	bne.n	80103ae <__ssputs_r+0x70>
 80103ea:	6921      	ldr	r1, [r4, #16]
 80103ec:	4650      	mov	r0, sl
 80103ee:	f7fe f825 	bl	800e43c <_free_r>
 80103f2:	e7c7      	b.n	8010384 <__ssputs_r+0x46>

080103f4 <_svfiprintf_r>:
 80103f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103f8:	4698      	mov	r8, r3
 80103fa:	898b      	ldrh	r3, [r1, #12]
 80103fc:	061b      	lsls	r3, r3, #24
 80103fe:	b09d      	sub	sp, #116	; 0x74
 8010400:	4607      	mov	r7, r0
 8010402:	460d      	mov	r5, r1
 8010404:	4614      	mov	r4, r2
 8010406:	d50e      	bpl.n	8010426 <_svfiprintf_r+0x32>
 8010408:	690b      	ldr	r3, [r1, #16]
 801040a:	b963      	cbnz	r3, 8010426 <_svfiprintf_r+0x32>
 801040c:	2140      	movs	r1, #64	; 0x40
 801040e:	f7fe f865 	bl	800e4dc <_malloc_r>
 8010412:	6028      	str	r0, [r5, #0]
 8010414:	6128      	str	r0, [r5, #16]
 8010416:	b920      	cbnz	r0, 8010422 <_svfiprintf_r+0x2e>
 8010418:	230c      	movs	r3, #12
 801041a:	603b      	str	r3, [r7, #0]
 801041c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010420:	e0d1      	b.n	80105c6 <_svfiprintf_r+0x1d2>
 8010422:	2340      	movs	r3, #64	; 0x40
 8010424:	616b      	str	r3, [r5, #20]
 8010426:	2300      	movs	r3, #0
 8010428:	9309      	str	r3, [sp, #36]	; 0x24
 801042a:	2320      	movs	r3, #32
 801042c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010430:	f8cd 800c 	str.w	r8, [sp, #12]
 8010434:	2330      	movs	r3, #48	; 0x30
 8010436:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80105e0 <_svfiprintf_r+0x1ec>
 801043a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801043e:	f04f 0901 	mov.w	r9, #1
 8010442:	4623      	mov	r3, r4
 8010444:	469a      	mov	sl, r3
 8010446:	f813 2b01 	ldrb.w	r2, [r3], #1
 801044a:	b10a      	cbz	r2, 8010450 <_svfiprintf_r+0x5c>
 801044c:	2a25      	cmp	r2, #37	; 0x25
 801044e:	d1f9      	bne.n	8010444 <_svfiprintf_r+0x50>
 8010450:	ebba 0b04 	subs.w	fp, sl, r4
 8010454:	d00b      	beq.n	801046e <_svfiprintf_r+0x7a>
 8010456:	465b      	mov	r3, fp
 8010458:	4622      	mov	r2, r4
 801045a:	4629      	mov	r1, r5
 801045c:	4638      	mov	r0, r7
 801045e:	f7ff ff6e 	bl	801033e <__ssputs_r>
 8010462:	3001      	adds	r0, #1
 8010464:	f000 80aa 	beq.w	80105bc <_svfiprintf_r+0x1c8>
 8010468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801046a:	445a      	add	r2, fp
 801046c:	9209      	str	r2, [sp, #36]	; 0x24
 801046e:	f89a 3000 	ldrb.w	r3, [sl]
 8010472:	2b00      	cmp	r3, #0
 8010474:	f000 80a2 	beq.w	80105bc <_svfiprintf_r+0x1c8>
 8010478:	2300      	movs	r3, #0
 801047a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801047e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010482:	f10a 0a01 	add.w	sl, sl, #1
 8010486:	9304      	str	r3, [sp, #16]
 8010488:	9307      	str	r3, [sp, #28]
 801048a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801048e:	931a      	str	r3, [sp, #104]	; 0x68
 8010490:	4654      	mov	r4, sl
 8010492:	2205      	movs	r2, #5
 8010494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010498:	4851      	ldr	r0, [pc, #324]	; (80105e0 <_svfiprintf_r+0x1ec>)
 801049a:	f7ef fec1 	bl	8000220 <memchr>
 801049e:	9a04      	ldr	r2, [sp, #16]
 80104a0:	b9d8      	cbnz	r0, 80104da <_svfiprintf_r+0xe6>
 80104a2:	06d0      	lsls	r0, r2, #27
 80104a4:	bf44      	itt	mi
 80104a6:	2320      	movmi	r3, #32
 80104a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80104ac:	0711      	lsls	r1, r2, #28
 80104ae:	bf44      	itt	mi
 80104b0:	232b      	movmi	r3, #43	; 0x2b
 80104b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80104b6:	f89a 3000 	ldrb.w	r3, [sl]
 80104ba:	2b2a      	cmp	r3, #42	; 0x2a
 80104bc:	d015      	beq.n	80104ea <_svfiprintf_r+0xf6>
 80104be:	9a07      	ldr	r2, [sp, #28]
 80104c0:	4654      	mov	r4, sl
 80104c2:	2000      	movs	r0, #0
 80104c4:	f04f 0c0a 	mov.w	ip, #10
 80104c8:	4621      	mov	r1, r4
 80104ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80104ce:	3b30      	subs	r3, #48	; 0x30
 80104d0:	2b09      	cmp	r3, #9
 80104d2:	d94e      	bls.n	8010572 <_svfiprintf_r+0x17e>
 80104d4:	b1b0      	cbz	r0, 8010504 <_svfiprintf_r+0x110>
 80104d6:	9207      	str	r2, [sp, #28]
 80104d8:	e014      	b.n	8010504 <_svfiprintf_r+0x110>
 80104da:	eba0 0308 	sub.w	r3, r0, r8
 80104de:	fa09 f303 	lsl.w	r3, r9, r3
 80104e2:	4313      	orrs	r3, r2
 80104e4:	9304      	str	r3, [sp, #16]
 80104e6:	46a2      	mov	sl, r4
 80104e8:	e7d2      	b.n	8010490 <_svfiprintf_r+0x9c>
 80104ea:	9b03      	ldr	r3, [sp, #12]
 80104ec:	1d19      	adds	r1, r3, #4
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	9103      	str	r1, [sp, #12]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	bfbb      	ittet	lt
 80104f6:	425b      	neglt	r3, r3
 80104f8:	f042 0202 	orrlt.w	r2, r2, #2
 80104fc:	9307      	strge	r3, [sp, #28]
 80104fe:	9307      	strlt	r3, [sp, #28]
 8010500:	bfb8      	it	lt
 8010502:	9204      	strlt	r2, [sp, #16]
 8010504:	7823      	ldrb	r3, [r4, #0]
 8010506:	2b2e      	cmp	r3, #46	; 0x2e
 8010508:	d10c      	bne.n	8010524 <_svfiprintf_r+0x130>
 801050a:	7863      	ldrb	r3, [r4, #1]
 801050c:	2b2a      	cmp	r3, #42	; 0x2a
 801050e:	d135      	bne.n	801057c <_svfiprintf_r+0x188>
 8010510:	9b03      	ldr	r3, [sp, #12]
 8010512:	1d1a      	adds	r2, r3, #4
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	9203      	str	r2, [sp, #12]
 8010518:	2b00      	cmp	r3, #0
 801051a:	bfb8      	it	lt
 801051c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010520:	3402      	adds	r4, #2
 8010522:	9305      	str	r3, [sp, #20]
 8010524:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80105f0 <_svfiprintf_r+0x1fc>
 8010528:	7821      	ldrb	r1, [r4, #0]
 801052a:	2203      	movs	r2, #3
 801052c:	4650      	mov	r0, sl
 801052e:	f7ef fe77 	bl	8000220 <memchr>
 8010532:	b140      	cbz	r0, 8010546 <_svfiprintf_r+0x152>
 8010534:	2340      	movs	r3, #64	; 0x40
 8010536:	eba0 000a 	sub.w	r0, r0, sl
 801053a:	fa03 f000 	lsl.w	r0, r3, r0
 801053e:	9b04      	ldr	r3, [sp, #16]
 8010540:	4303      	orrs	r3, r0
 8010542:	3401      	adds	r4, #1
 8010544:	9304      	str	r3, [sp, #16]
 8010546:	f814 1b01 	ldrb.w	r1, [r4], #1
 801054a:	4826      	ldr	r0, [pc, #152]	; (80105e4 <_svfiprintf_r+0x1f0>)
 801054c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010550:	2206      	movs	r2, #6
 8010552:	f7ef fe65 	bl	8000220 <memchr>
 8010556:	2800      	cmp	r0, #0
 8010558:	d038      	beq.n	80105cc <_svfiprintf_r+0x1d8>
 801055a:	4b23      	ldr	r3, [pc, #140]	; (80105e8 <_svfiprintf_r+0x1f4>)
 801055c:	bb1b      	cbnz	r3, 80105a6 <_svfiprintf_r+0x1b2>
 801055e:	9b03      	ldr	r3, [sp, #12]
 8010560:	3307      	adds	r3, #7
 8010562:	f023 0307 	bic.w	r3, r3, #7
 8010566:	3308      	adds	r3, #8
 8010568:	9303      	str	r3, [sp, #12]
 801056a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801056c:	4433      	add	r3, r6
 801056e:	9309      	str	r3, [sp, #36]	; 0x24
 8010570:	e767      	b.n	8010442 <_svfiprintf_r+0x4e>
 8010572:	fb0c 3202 	mla	r2, ip, r2, r3
 8010576:	460c      	mov	r4, r1
 8010578:	2001      	movs	r0, #1
 801057a:	e7a5      	b.n	80104c8 <_svfiprintf_r+0xd4>
 801057c:	2300      	movs	r3, #0
 801057e:	3401      	adds	r4, #1
 8010580:	9305      	str	r3, [sp, #20]
 8010582:	4619      	mov	r1, r3
 8010584:	f04f 0c0a 	mov.w	ip, #10
 8010588:	4620      	mov	r0, r4
 801058a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801058e:	3a30      	subs	r2, #48	; 0x30
 8010590:	2a09      	cmp	r2, #9
 8010592:	d903      	bls.n	801059c <_svfiprintf_r+0x1a8>
 8010594:	2b00      	cmp	r3, #0
 8010596:	d0c5      	beq.n	8010524 <_svfiprintf_r+0x130>
 8010598:	9105      	str	r1, [sp, #20]
 801059a:	e7c3      	b.n	8010524 <_svfiprintf_r+0x130>
 801059c:	fb0c 2101 	mla	r1, ip, r1, r2
 80105a0:	4604      	mov	r4, r0
 80105a2:	2301      	movs	r3, #1
 80105a4:	e7f0      	b.n	8010588 <_svfiprintf_r+0x194>
 80105a6:	ab03      	add	r3, sp, #12
 80105a8:	9300      	str	r3, [sp, #0]
 80105aa:	462a      	mov	r2, r5
 80105ac:	4b0f      	ldr	r3, [pc, #60]	; (80105ec <_svfiprintf_r+0x1f8>)
 80105ae:	a904      	add	r1, sp, #16
 80105b0:	4638      	mov	r0, r7
 80105b2:	f7fe f88d 	bl	800e6d0 <_printf_float>
 80105b6:	1c42      	adds	r2, r0, #1
 80105b8:	4606      	mov	r6, r0
 80105ba:	d1d6      	bne.n	801056a <_svfiprintf_r+0x176>
 80105bc:	89ab      	ldrh	r3, [r5, #12]
 80105be:	065b      	lsls	r3, r3, #25
 80105c0:	f53f af2c 	bmi.w	801041c <_svfiprintf_r+0x28>
 80105c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80105c6:	b01d      	add	sp, #116	; 0x74
 80105c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105cc:	ab03      	add	r3, sp, #12
 80105ce:	9300      	str	r3, [sp, #0]
 80105d0:	462a      	mov	r2, r5
 80105d2:	4b06      	ldr	r3, [pc, #24]	; (80105ec <_svfiprintf_r+0x1f8>)
 80105d4:	a904      	add	r1, sp, #16
 80105d6:	4638      	mov	r0, r7
 80105d8:	f7fe fb1e 	bl	800ec18 <_printf_i>
 80105dc:	e7eb      	b.n	80105b6 <_svfiprintf_r+0x1c2>
 80105de:	bf00      	nop
 80105e0:	08011a0c 	.word	0x08011a0c
 80105e4:	08011a16 	.word	0x08011a16
 80105e8:	0800e6d1 	.word	0x0800e6d1
 80105ec:	0801033f 	.word	0x0801033f
 80105f0:	08011a12 	.word	0x08011a12

080105f4 <__assert_func>:
 80105f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80105f6:	4614      	mov	r4, r2
 80105f8:	461a      	mov	r2, r3
 80105fa:	4b09      	ldr	r3, [pc, #36]	; (8010620 <__assert_func+0x2c>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	4605      	mov	r5, r0
 8010600:	68d8      	ldr	r0, [r3, #12]
 8010602:	b14c      	cbz	r4, 8010618 <__assert_func+0x24>
 8010604:	4b07      	ldr	r3, [pc, #28]	; (8010624 <__assert_func+0x30>)
 8010606:	9100      	str	r1, [sp, #0]
 8010608:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801060c:	4906      	ldr	r1, [pc, #24]	; (8010628 <__assert_func+0x34>)
 801060e:	462b      	mov	r3, r5
 8010610:	f000 f80e 	bl	8010630 <fiprintf>
 8010614:	f000 fa7c 	bl	8010b10 <abort>
 8010618:	4b04      	ldr	r3, [pc, #16]	; (801062c <__assert_func+0x38>)
 801061a:	461c      	mov	r4, r3
 801061c:	e7f3      	b.n	8010606 <__assert_func+0x12>
 801061e:	bf00      	nop
 8010620:	200005e4 	.word	0x200005e4
 8010624:	08011a1d 	.word	0x08011a1d
 8010628:	08011a2a 	.word	0x08011a2a
 801062c:	08011a58 	.word	0x08011a58

08010630 <fiprintf>:
 8010630:	b40e      	push	{r1, r2, r3}
 8010632:	b503      	push	{r0, r1, lr}
 8010634:	4601      	mov	r1, r0
 8010636:	ab03      	add	r3, sp, #12
 8010638:	4805      	ldr	r0, [pc, #20]	; (8010650 <fiprintf+0x20>)
 801063a:	f853 2b04 	ldr.w	r2, [r3], #4
 801063e:	6800      	ldr	r0, [r0, #0]
 8010640:	9301      	str	r3, [sp, #4]
 8010642:	f000 f867 	bl	8010714 <_vfiprintf_r>
 8010646:	b002      	add	sp, #8
 8010648:	f85d eb04 	ldr.w	lr, [sp], #4
 801064c:	b003      	add	sp, #12
 801064e:	4770      	bx	lr
 8010650:	200005e4 	.word	0x200005e4

08010654 <__retarget_lock_init_recursive>:
 8010654:	4770      	bx	lr

08010656 <__retarget_lock_acquire_recursive>:
 8010656:	4770      	bx	lr

08010658 <__retarget_lock_release_recursive>:
 8010658:	4770      	bx	lr

0801065a <__ascii_mbtowc>:
 801065a:	b082      	sub	sp, #8
 801065c:	b901      	cbnz	r1, 8010660 <__ascii_mbtowc+0x6>
 801065e:	a901      	add	r1, sp, #4
 8010660:	b142      	cbz	r2, 8010674 <__ascii_mbtowc+0x1a>
 8010662:	b14b      	cbz	r3, 8010678 <__ascii_mbtowc+0x1e>
 8010664:	7813      	ldrb	r3, [r2, #0]
 8010666:	600b      	str	r3, [r1, #0]
 8010668:	7812      	ldrb	r2, [r2, #0]
 801066a:	1e10      	subs	r0, r2, #0
 801066c:	bf18      	it	ne
 801066e:	2001      	movne	r0, #1
 8010670:	b002      	add	sp, #8
 8010672:	4770      	bx	lr
 8010674:	4610      	mov	r0, r2
 8010676:	e7fb      	b.n	8010670 <__ascii_mbtowc+0x16>
 8010678:	f06f 0001 	mvn.w	r0, #1
 801067c:	e7f8      	b.n	8010670 <__ascii_mbtowc+0x16>

0801067e <memmove>:
 801067e:	4288      	cmp	r0, r1
 8010680:	b510      	push	{r4, lr}
 8010682:	eb01 0402 	add.w	r4, r1, r2
 8010686:	d902      	bls.n	801068e <memmove+0x10>
 8010688:	4284      	cmp	r4, r0
 801068a:	4623      	mov	r3, r4
 801068c:	d807      	bhi.n	801069e <memmove+0x20>
 801068e:	1e43      	subs	r3, r0, #1
 8010690:	42a1      	cmp	r1, r4
 8010692:	d008      	beq.n	80106a6 <memmove+0x28>
 8010694:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010698:	f803 2f01 	strb.w	r2, [r3, #1]!
 801069c:	e7f8      	b.n	8010690 <memmove+0x12>
 801069e:	4402      	add	r2, r0
 80106a0:	4601      	mov	r1, r0
 80106a2:	428a      	cmp	r2, r1
 80106a4:	d100      	bne.n	80106a8 <memmove+0x2a>
 80106a6:	bd10      	pop	{r4, pc}
 80106a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80106ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80106b0:	e7f7      	b.n	80106a2 <memmove+0x24>

080106b2 <_malloc_usable_size_r>:
 80106b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106b6:	1f18      	subs	r0, r3, #4
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	bfbc      	itt	lt
 80106bc:	580b      	ldrlt	r3, [r1, r0]
 80106be:	18c0      	addlt	r0, r0, r3
 80106c0:	4770      	bx	lr

080106c2 <__sfputc_r>:
 80106c2:	6893      	ldr	r3, [r2, #8]
 80106c4:	3b01      	subs	r3, #1
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	b410      	push	{r4}
 80106ca:	6093      	str	r3, [r2, #8]
 80106cc:	da08      	bge.n	80106e0 <__sfputc_r+0x1e>
 80106ce:	6994      	ldr	r4, [r2, #24]
 80106d0:	42a3      	cmp	r3, r4
 80106d2:	db01      	blt.n	80106d8 <__sfputc_r+0x16>
 80106d4:	290a      	cmp	r1, #10
 80106d6:	d103      	bne.n	80106e0 <__sfputc_r+0x1e>
 80106d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106dc:	f000 b94a 	b.w	8010974 <__swbuf_r>
 80106e0:	6813      	ldr	r3, [r2, #0]
 80106e2:	1c58      	adds	r0, r3, #1
 80106e4:	6010      	str	r0, [r2, #0]
 80106e6:	7019      	strb	r1, [r3, #0]
 80106e8:	4608      	mov	r0, r1
 80106ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106ee:	4770      	bx	lr

080106f0 <__sfputs_r>:
 80106f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106f2:	4606      	mov	r6, r0
 80106f4:	460f      	mov	r7, r1
 80106f6:	4614      	mov	r4, r2
 80106f8:	18d5      	adds	r5, r2, r3
 80106fa:	42ac      	cmp	r4, r5
 80106fc:	d101      	bne.n	8010702 <__sfputs_r+0x12>
 80106fe:	2000      	movs	r0, #0
 8010700:	e007      	b.n	8010712 <__sfputs_r+0x22>
 8010702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010706:	463a      	mov	r2, r7
 8010708:	4630      	mov	r0, r6
 801070a:	f7ff ffda 	bl	80106c2 <__sfputc_r>
 801070e:	1c43      	adds	r3, r0, #1
 8010710:	d1f3      	bne.n	80106fa <__sfputs_r+0xa>
 8010712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010714 <_vfiprintf_r>:
 8010714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010718:	460d      	mov	r5, r1
 801071a:	b09d      	sub	sp, #116	; 0x74
 801071c:	4614      	mov	r4, r2
 801071e:	4698      	mov	r8, r3
 8010720:	4606      	mov	r6, r0
 8010722:	b118      	cbz	r0, 801072c <_vfiprintf_r+0x18>
 8010724:	6983      	ldr	r3, [r0, #24]
 8010726:	b90b      	cbnz	r3, 801072c <_vfiprintf_r+0x18>
 8010728:	f000 fb14 	bl	8010d54 <__sinit>
 801072c:	4b89      	ldr	r3, [pc, #548]	; (8010954 <_vfiprintf_r+0x240>)
 801072e:	429d      	cmp	r5, r3
 8010730:	d11b      	bne.n	801076a <_vfiprintf_r+0x56>
 8010732:	6875      	ldr	r5, [r6, #4]
 8010734:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010736:	07d9      	lsls	r1, r3, #31
 8010738:	d405      	bmi.n	8010746 <_vfiprintf_r+0x32>
 801073a:	89ab      	ldrh	r3, [r5, #12]
 801073c:	059a      	lsls	r2, r3, #22
 801073e:	d402      	bmi.n	8010746 <_vfiprintf_r+0x32>
 8010740:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010742:	f7ff ff88 	bl	8010656 <__retarget_lock_acquire_recursive>
 8010746:	89ab      	ldrh	r3, [r5, #12]
 8010748:	071b      	lsls	r3, r3, #28
 801074a:	d501      	bpl.n	8010750 <_vfiprintf_r+0x3c>
 801074c:	692b      	ldr	r3, [r5, #16]
 801074e:	b9eb      	cbnz	r3, 801078c <_vfiprintf_r+0x78>
 8010750:	4629      	mov	r1, r5
 8010752:	4630      	mov	r0, r6
 8010754:	f000 f96e 	bl	8010a34 <__swsetup_r>
 8010758:	b1c0      	cbz	r0, 801078c <_vfiprintf_r+0x78>
 801075a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801075c:	07dc      	lsls	r4, r3, #31
 801075e:	d50e      	bpl.n	801077e <_vfiprintf_r+0x6a>
 8010760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010764:	b01d      	add	sp, #116	; 0x74
 8010766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801076a:	4b7b      	ldr	r3, [pc, #492]	; (8010958 <_vfiprintf_r+0x244>)
 801076c:	429d      	cmp	r5, r3
 801076e:	d101      	bne.n	8010774 <_vfiprintf_r+0x60>
 8010770:	68b5      	ldr	r5, [r6, #8]
 8010772:	e7df      	b.n	8010734 <_vfiprintf_r+0x20>
 8010774:	4b79      	ldr	r3, [pc, #484]	; (801095c <_vfiprintf_r+0x248>)
 8010776:	429d      	cmp	r5, r3
 8010778:	bf08      	it	eq
 801077a:	68f5      	ldreq	r5, [r6, #12]
 801077c:	e7da      	b.n	8010734 <_vfiprintf_r+0x20>
 801077e:	89ab      	ldrh	r3, [r5, #12]
 8010780:	0598      	lsls	r0, r3, #22
 8010782:	d4ed      	bmi.n	8010760 <_vfiprintf_r+0x4c>
 8010784:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010786:	f7ff ff67 	bl	8010658 <__retarget_lock_release_recursive>
 801078a:	e7e9      	b.n	8010760 <_vfiprintf_r+0x4c>
 801078c:	2300      	movs	r3, #0
 801078e:	9309      	str	r3, [sp, #36]	; 0x24
 8010790:	2320      	movs	r3, #32
 8010792:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010796:	f8cd 800c 	str.w	r8, [sp, #12]
 801079a:	2330      	movs	r3, #48	; 0x30
 801079c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010960 <_vfiprintf_r+0x24c>
 80107a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80107a4:	f04f 0901 	mov.w	r9, #1
 80107a8:	4623      	mov	r3, r4
 80107aa:	469a      	mov	sl, r3
 80107ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80107b0:	b10a      	cbz	r2, 80107b6 <_vfiprintf_r+0xa2>
 80107b2:	2a25      	cmp	r2, #37	; 0x25
 80107b4:	d1f9      	bne.n	80107aa <_vfiprintf_r+0x96>
 80107b6:	ebba 0b04 	subs.w	fp, sl, r4
 80107ba:	d00b      	beq.n	80107d4 <_vfiprintf_r+0xc0>
 80107bc:	465b      	mov	r3, fp
 80107be:	4622      	mov	r2, r4
 80107c0:	4629      	mov	r1, r5
 80107c2:	4630      	mov	r0, r6
 80107c4:	f7ff ff94 	bl	80106f0 <__sfputs_r>
 80107c8:	3001      	adds	r0, #1
 80107ca:	f000 80aa 	beq.w	8010922 <_vfiprintf_r+0x20e>
 80107ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80107d0:	445a      	add	r2, fp
 80107d2:	9209      	str	r2, [sp, #36]	; 0x24
 80107d4:	f89a 3000 	ldrb.w	r3, [sl]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	f000 80a2 	beq.w	8010922 <_vfiprintf_r+0x20e>
 80107de:	2300      	movs	r3, #0
 80107e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80107e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80107e8:	f10a 0a01 	add.w	sl, sl, #1
 80107ec:	9304      	str	r3, [sp, #16]
 80107ee:	9307      	str	r3, [sp, #28]
 80107f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80107f4:	931a      	str	r3, [sp, #104]	; 0x68
 80107f6:	4654      	mov	r4, sl
 80107f8:	2205      	movs	r2, #5
 80107fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107fe:	4858      	ldr	r0, [pc, #352]	; (8010960 <_vfiprintf_r+0x24c>)
 8010800:	f7ef fd0e 	bl	8000220 <memchr>
 8010804:	9a04      	ldr	r2, [sp, #16]
 8010806:	b9d8      	cbnz	r0, 8010840 <_vfiprintf_r+0x12c>
 8010808:	06d1      	lsls	r1, r2, #27
 801080a:	bf44      	itt	mi
 801080c:	2320      	movmi	r3, #32
 801080e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010812:	0713      	lsls	r3, r2, #28
 8010814:	bf44      	itt	mi
 8010816:	232b      	movmi	r3, #43	; 0x2b
 8010818:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801081c:	f89a 3000 	ldrb.w	r3, [sl]
 8010820:	2b2a      	cmp	r3, #42	; 0x2a
 8010822:	d015      	beq.n	8010850 <_vfiprintf_r+0x13c>
 8010824:	9a07      	ldr	r2, [sp, #28]
 8010826:	4654      	mov	r4, sl
 8010828:	2000      	movs	r0, #0
 801082a:	f04f 0c0a 	mov.w	ip, #10
 801082e:	4621      	mov	r1, r4
 8010830:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010834:	3b30      	subs	r3, #48	; 0x30
 8010836:	2b09      	cmp	r3, #9
 8010838:	d94e      	bls.n	80108d8 <_vfiprintf_r+0x1c4>
 801083a:	b1b0      	cbz	r0, 801086a <_vfiprintf_r+0x156>
 801083c:	9207      	str	r2, [sp, #28]
 801083e:	e014      	b.n	801086a <_vfiprintf_r+0x156>
 8010840:	eba0 0308 	sub.w	r3, r0, r8
 8010844:	fa09 f303 	lsl.w	r3, r9, r3
 8010848:	4313      	orrs	r3, r2
 801084a:	9304      	str	r3, [sp, #16]
 801084c:	46a2      	mov	sl, r4
 801084e:	e7d2      	b.n	80107f6 <_vfiprintf_r+0xe2>
 8010850:	9b03      	ldr	r3, [sp, #12]
 8010852:	1d19      	adds	r1, r3, #4
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	9103      	str	r1, [sp, #12]
 8010858:	2b00      	cmp	r3, #0
 801085a:	bfbb      	ittet	lt
 801085c:	425b      	neglt	r3, r3
 801085e:	f042 0202 	orrlt.w	r2, r2, #2
 8010862:	9307      	strge	r3, [sp, #28]
 8010864:	9307      	strlt	r3, [sp, #28]
 8010866:	bfb8      	it	lt
 8010868:	9204      	strlt	r2, [sp, #16]
 801086a:	7823      	ldrb	r3, [r4, #0]
 801086c:	2b2e      	cmp	r3, #46	; 0x2e
 801086e:	d10c      	bne.n	801088a <_vfiprintf_r+0x176>
 8010870:	7863      	ldrb	r3, [r4, #1]
 8010872:	2b2a      	cmp	r3, #42	; 0x2a
 8010874:	d135      	bne.n	80108e2 <_vfiprintf_r+0x1ce>
 8010876:	9b03      	ldr	r3, [sp, #12]
 8010878:	1d1a      	adds	r2, r3, #4
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	9203      	str	r2, [sp, #12]
 801087e:	2b00      	cmp	r3, #0
 8010880:	bfb8      	it	lt
 8010882:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010886:	3402      	adds	r4, #2
 8010888:	9305      	str	r3, [sp, #20]
 801088a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010970 <_vfiprintf_r+0x25c>
 801088e:	7821      	ldrb	r1, [r4, #0]
 8010890:	2203      	movs	r2, #3
 8010892:	4650      	mov	r0, sl
 8010894:	f7ef fcc4 	bl	8000220 <memchr>
 8010898:	b140      	cbz	r0, 80108ac <_vfiprintf_r+0x198>
 801089a:	2340      	movs	r3, #64	; 0x40
 801089c:	eba0 000a 	sub.w	r0, r0, sl
 80108a0:	fa03 f000 	lsl.w	r0, r3, r0
 80108a4:	9b04      	ldr	r3, [sp, #16]
 80108a6:	4303      	orrs	r3, r0
 80108a8:	3401      	adds	r4, #1
 80108aa:	9304      	str	r3, [sp, #16]
 80108ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108b0:	482c      	ldr	r0, [pc, #176]	; (8010964 <_vfiprintf_r+0x250>)
 80108b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80108b6:	2206      	movs	r2, #6
 80108b8:	f7ef fcb2 	bl	8000220 <memchr>
 80108bc:	2800      	cmp	r0, #0
 80108be:	d03f      	beq.n	8010940 <_vfiprintf_r+0x22c>
 80108c0:	4b29      	ldr	r3, [pc, #164]	; (8010968 <_vfiprintf_r+0x254>)
 80108c2:	bb1b      	cbnz	r3, 801090c <_vfiprintf_r+0x1f8>
 80108c4:	9b03      	ldr	r3, [sp, #12]
 80108c6:	3307      	adds	r3, #7
 80108c8:	f023 0307 	bic.w	r3, r3, #7
 80108cc:	3308      	adds	r3, #8
 80108ce:	9303      	str	r3, [sp, #12]
 80108d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108d2:	443b      	add	r3, r7
 80108d4:	9309      	str	r3, [sp, #36]	; 0x24
 80108d6:	e767      	b.n	80107a8 <_vfiprintf_r+0x94>
 80108d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80108dc:	460c      	mov	r4, r1
 80108de:	2001      	movs	r0, #1
 80108e0:	e7a5      	b.n	801082e <_vfiprintf_r+0x11a>
 80108e2:	2300      	movs	r3, #0
 80108e4:	3401      	adds	r4, #1
 80108e6:	9305      	str	r3, [sp, #20]
 80108e8:	4619      	mov	r1, r3
 80108ea:	f04f 0c0a 	mov.w	ip, #10
 80108ee:	4620      	mov	r0, r4
 80108f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80108f4:	3a30      	subs	r2, #48	; 0x30
 80108f6:	2a09      	cmp	r2, #9
 80108f8:	d903      	bls.n	8010902 <_vfiprintf_r+0x1ee>
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d0c5      	beq.n	801088a <_vfiprintf_r+0x176>
 80108fe:	9105      	str	r1, [sp, #20]
 8010900:	e7c3      	b.n	801088a <_vfiprintf_r+0x176>
 8010902:	fb0c 2101 	mla	r1, ip, r1, r2
 8010906:	4604      	mov	r4, r0
 8010908:	2301      	movs	r3, #1
 801090a:	e7f0      	b.n	80108ee <_vfiprintf_r+0x1da>
 801090c:	ab03      	add	r3, sp, #12
 801090e:	9300      	str	r3, [sp, #0]
 8010910:	462a      	mov	r2, r5
 8010912:	4b16      	ldr	r3, [pc, #88]	; (801096c <_vfiprintf_r+0x258>)
 8010914:	a904      	add	r1, sp, #16
 8010916:	4630      	mov	r0, r6
 8010918:	f7fd feda 	bl	800e6d0 <_printf_float>
 801091c:	4607      	mov	r7, r0
 801091e:	1c78      	adds	r0, r7, #1
 8010920:	d1d6      	bne.n	80108d0 <_vfiprintf_r+0x1bc>
 8010922:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010924:	07d9      	lsls	r1, r3, #31
 8010926:	d405      	bmi.n	8010934 <_vfiprintf_r+0x220>
 8010928:	89ab      	ldrh	r3, [r5, #12]
 801092a:	059a      	lsls	r2, r3, #22
 801092c:	d402      	bmi.n	8010934 <_vfiprintf_r+0x220>
 801092e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010930:	f7ff fe92 	bl	8010658 <__retarget_lock_release_recursive>
 8010934:	89ab      	ldrh	r3, [r5, #12]
 8010936:	065b      	lsls	r3, r3, #25
 8010938:	f53f af12 	bmi.w	8010760 <_vfiprintf_r+0x4c>
 801093c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801093e:	e711      	b.n	8010764 <_vfiprintf_r+0x50>
 8010940:	ab03      	add	r3, sp, #12
 8010942:	9300      	str	r3, [sp, #0]
 8010944:	462a      	mov	r2, r5
 8010946:	4b09      	ldr	r3, [pc, #36]	; (801096c <_vfiprintf_r+0x258>)
 8010948:	a904      	add	r1, sp, #16
 801094a:	4630      	mov	r0, r6
 801094c:	f7fe f964 	bl	800ec18 <_printf_i>
 8010950:	e7e4      	b.n	801091c <_vfiprintf_r+0x208>
 8010952:	bf00      	nop
 8010954:	08011b84 	.word	0x08011b84
 8010958:	08011ba4 	.word	0x08011ba4
 801095c:	08011b64 	.word	0x08011b64
 8010960:	08011a0c 	.word	0x08011a0c
 8010964:	08011a16 	.word	0x08011a16
 8010968:	0800e6d1 	.word	0x0800e6d1
 801096c:	080106f1 	.word	0x080106f1
 8010970:	08011a12 	.word	0x08011a12

08010974 <__swbuf_r>:
 8010974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010976:	460e      	mov	r6, r1
 8010978:	4614      	mov	r4, r2
 801097a:	4605      	mov	r5, r0
 801097c:	b118      	cbz	r0, 8010986 <__swbuf_r+0x12>
 801097e:	6983      	ldr	r3, [r0, #24]
 8010980:	b90b      	cbnz	r3, 8010986 <__swbuf_r+0x12>
 8010982:	f000 f9e7 	bl	8010d54 <__sinit>
 8010986:	4b21      	ldr	r3, [pc, #132]	; (8010a0c <__swbuf_r+0x98>)
 8010988:	429c      	cmp	r4, r3
 801098a:	d12b      	bne.n	80109e4 <__swbuf_r+0x70>
 801098c:	686c      	ldr	r4, [r5, #4]
 801098e:	69a3      	ldr	r3, [r4, #24]
 8010990:	60a3      	str	r3, [r4, #8]
 8010992:	89a3      	ldrh	r3, [r4, #12]
 8010994:	071a      	lsls	r2, r3, #28
 8010996:	d52f      	bpl.n	80109f8 <__swbuf_r+0x84>
 8010998:	6923      	ldr	r3, [r4, #16]
 801099a:	b36b      	cbz	r3, 80109f8 <__swbuf_r+0x84>
 801099c:	6923      	ldr	r3, [r4, #16]
 801099e:	6820      	ldr	r0, [r4, #0]
 80109a0:	1ac0      	subs	r0, r0, r3
 80109a2:	6963      	ldr	r3, [r4, #20]
 80109a4:	b2f6      	uxtb	r6, r6
 80109a6:	4283      	cmp	r3, r0
 80109a8:	4637      	mov	r7, r6
 80109aa:	dc04      	bgt.n	80109b6 <__swbuf_r+0x42>
 80109ac:	4621      	mov	r1, r4
 80109ae:	4628      	mov	r0, r5
 80109b0:	f000 f93c 	bl	8010c2c <_fflush_r>
 80109b4:	bb30      	cbnz	r0, 8010a04 <__swbuf_r+0x90>
 80109b6:	68a3      	ldr	r3, [r4, #8]
 80109b8:	3b01      	subs	r3, #1
 80109ba:	60a3      	str	r3, [r4, #8]
 80109bc:	6823      	ldr	r3, [r4, #0]
 80109be:	1c5a      	adds	r2, r3, #1
 80109c0:	6022      	str	r2, [r4, #0]
 80109c2:	701e      	strb	r6, [r3, #0]
 80109c4:	6963      	ldr	r3, [r4, #20]
 80109c6:	3001      	adds	r0, #1
 80109c8:	4283      	cmp	r3, r0
 80109ca:	d004      	beq.n	80109d6 <__swbuf_r+0x62>
 80109cc:	89a3      	ldrh	r3, [r4, #12]
 80109ce:	07db      	lsls	r3, r3, #31
 80109d0:	d506      	bpl.n	80109e0 <__swbuf_r+0x6c>
 80109d2:	2e0a      	cmp	r6, #10
 80109d4:	d104      	bne.n	80109e0 <__swbuf_r+0x6c>
 80109d6:	4621      	mov	r1, r4
 80109d8:	4628      	mov	r0, r5
 80109da:	f000 f927 	bl	8010c2c <_fflush_r>
 80109de:	b988      	cbnz	r0, 8010a04 <__swbuf_r+0x90>
 80109e0:	4638      	mov	r0, r7
 80109e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109e4:	4b0a      	ldr	r3, [pc, #40]	; (8010a10 <__swbuf_r+0x9c>)
 80109e6:	429c      	cmp	r4, r3
 80109e8:	d101      	bne.n	80109ee <__swbuf_r+0x7a>
 80109ea:	68ac      	ldr	r4, [r5, #8]
 80109ec:	e7cf      	b.n	801098e <__swbuf_r+0x1a>
 80109ee:	4b09      	ldr	r3, [pc, #36]	; (8010a14 <__swbuf_r+0xa0>)
 80109f0:	429c      	cmp	r4, r3
 80109f2:	bf08      	it	eq
 80109f4:	68ec      	ldreq	r4, [r5, #12]
 80109f6:	e7ca      	b.n	801098e <__swbuf_r+0x1a>
 80109f8:	4621      	mov	r1, r4
 80109fa:	4628      	mov	r0, r5
 80109fc:	f000 f81a 	bl	8010a34 <__swsetup_r>
 8010a00:	2800      	cmp	r0, #0
 8010a02:	d0cb      	beq.n	801099c <__swbuf_r+0x28>
 8010a04:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010a08:	e7ea      	b.n	80109e0 <__swbuf_r+0x6c>
 8010a0a:	bf00      	nop
 8010a0c:	08011b84 	.word	0x08011b84
 8010a10:	08011ba4 	.word	0x08011ba4
 8010a14:	08011b64 	.word	0x08011b64

08010a18 <__ascii_wctomb>:
 8010a18:	b149      	cbz	r1, 8010a2e <__ascii_wctomb+0x16>
 8010a1a:	2aff      	cmp	r2, #255	; 0xff
 8010a1c:	bf85      	ittet	hi
 8010a1e:	238a      	movhi	r3, #138	; 0x8a
 8010a20:	6003      	strhi	r3, [r0, #0]
 8010a22:	700a      	strbls	r2, [r1, #0]
 8010a24:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8010a28:	bf98      	it	ls
 8010a2a:	2001      	movls	r0, #1
 8010a2c:	4770      	bx	lr
 8010a2e:	4608      	mov	r0, r1
 8010a30:	4770      	bx	lr
	...

08010a34 <__swsetup_r>:
 8010a34:	4b32      	ldr	r3, [pc, #200]	; (8010b00 <__swsetup_r+0xcc>)
 8010a36:	b570      	push	{r4, r5, r6, lr}
 8010a38:	681d      	ldr	r5, [r3, #0]
 8010a3a:	4606      	mov	r6, r0
 8010a3c:	460c      	mov	r4, r1
 8010a3e:	b125      	cbz	r5, 8010a4a <__swsetup_r+0x16>
 8010a40:	69ab      	ldr	r3, [r5, #24]
 8010a42:	b913      	cbnz	r3, 8010a4a <__swsetup_r+0x16>
 8010a44:	4628      	mov	r0, r5
 8010a46:	f000 f985 	bl	8010d54 <__sinit>
 8010a4a:	4b2e      	ldr	r3, [pc, #184]	; (8010b04 <__swsetup_r+0xd0>)
 8010a4c:	429c      	cmp	r4, r3
 8010a4e:	d10f      	bne.n	8010a70 <__swsetup_r+0x3c>
 8010a50:	686c      	ldr	r4, [r5, #4]
 8010a52:	89a3      	ldrh	r3, [r4, #12]
 8010a54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010a58:	0719      	lsls	r1, r3, #28
 8010a5a:	d42c      	bmi.n	8010ab6 <__swsetup_r+0x82>
 8010a5c:	06dd      	lsls	r5, r3, #27
 8010a5e:	d411      	bmi.n	8010a84 <__swsetup_r+0x50>
 8010a60:	2309      	movs	r3, #9
 8010a62:	6033      	str	r3, [r6, #0]
 8010a64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010a68:	81a3      	strh	r3, [r4, #12]
 8010a6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010a6e:	e03e      	b.n	8010aee <__swsetup_r+0xba>
 8010a70:	4b25      	ldr	r3, [pc, #148]	; (8010b08 <__swsetup_r+0xd4>)
 8010a72:	429c      	cmp	r4, r3
 8010a74:	d101      	bne.n	8010a7a <__swsetup_r+0x46>
 8010a76:	68ac      	ldr	r4, [r5, #8]
 8010a78:	e7eb      	b.n	8010a52 <__swsetup_r+0x1e>
 8010a7a:	4b24      	ldr	r3, [pc, #144]	; (8010b0c <__swsetup_r+0xd8>)
 8010a7c:	429c      	cmp	r4, r3
 8010a7e:	bf08      	it	eq
 8010a80:	68ec      	ldreq	r4, [r5, #12]
 8010a82:	e7e6      	b.n	8010a52 <__swsetup_r+0x1e>
 8010a84:	0758      	lsls	r0, r3, #29
 8010a86:	d512      	bpl.n	8010aae <__swsetup_r+0x7a>
 8010a88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a8a:	b141      	cbz	r1, 8010a9e <__swsetup_r+0x6a>
 8010a8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a90:	4299      	cmp	r1, r3
 8010a92:	d002      	beq.n	8010a9a <__swsetup_r+0x66>
 8010a94:	4630      	mov	r0, r6
 8010a96:	f7fd fcd1 	bl	800e43c <_free_r>
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	6363      	str	r3, [r4, #52]	; 0x34
 8010a9e:	89a3      	ldrh	r3, [r4, #12]
 8010aa0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010aa4:	81a3      	strh	r3, [r4, #12]
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	6063      	str	r3, [r4, #4]
 8010aaa:	6923      	ldr	r3, [r4, #16]
 8010aac:	6023      	str	r3, [r4, #0]
 8010aae:	89a3      	ldrh	r3, [r4, #12]
 8010ab0:	f043 0308 	orr.w	r3, r3, #8
 8010ab4:	81a3      	strh	r3, [r4, #12]
 8010ab6:	6923      	ldr	r3, [r4, #16]
 8010ab8:	b94b      	cbnz	r3, 8010ace <__swsetup_r+0x9a>
 8010aba:	89a3      	ldrh	r3, [r4, #12]
 8010abc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ac4:	d003      	beq.n	8010ace <__swsetup_r+0x9a>
 8010ac6:	4621      	mov	r1, r4
 8010ac8:	4630      	mov	r0, r6
 8010aca:	f000 fa05 	bl	8010ed8 <__smakebuf_r>
 8010ace:	89a0      	ldrh	r0, [r4, #12]
 8010ad0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010ad4:	f010 0301 	ands.w	r3, r0, #1
 8010ad8:	d00a      	beq.n	8010af0 <__swsetup_r+0xbc>
 8010ada:	2300      	movs	r3, #0
 8010adc:	60a3      	str	r3, [r4, #8]
 8010ade:	6963      	ldr	r3, [r4, #20]
 8010ae0:	425b      	negs	r3, r3
 8010ae2:	61a3      	str	r3, [r4, #24]
 8010ae4:	6923      	ldr	r3, [r4, #16]
 8010ae6:	b943      	cbnz	r3, 8010afa <__swsetup_r+0xc6>
 8010ae8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010aec:	d1ba      	bne.n	8010a64 <__swsetup_r+0x30>
 8010aee:	bd70      	pop	{r4, r5, r6, pc}
 8010af0:	0781      	lsls	r1, r0, #30
 8010af2:	bf58      	it	pl
 8010af4:	6963      	ldrpl	r3, [r4, #20]
 8010af6:	60a3      	str	r3, [r4, #8]
 8010af8:	e7f4      	b.n	8010ae4 <__swsetup_r+0xb0>
 8010afa:	2000      	movs	r0, #0
 8010afc:	e7f7      	b.n	8010aee <__swsetup_r+0xba>
 8010afe:	bf00      	nop
 8010b00:	200005e4 	.word	0x200005e4
 8010b04:	08011b84 	.word	0x08011b84
 8010b08:	08011ba4 	.word	0x08011ba4
 8010b0c:	08011b64 	.word	0x08011b64

08010b10 <abort>:
 8010b10:	b508      	push	{r3, lr}
 8010b12:	2006      	movs	r0, #6
 8010b14:	f000 fa48 	bl	8010fa8 <raise>
 8010b18:	2001      	movs	r0, #1
 8010b1a:	f000 fb4d 	bl	80111b8 <_exit>
	...

08010b20 <__sflush_r>:
 8010b20:	898a      	ldrh	r2, [r1, #12]
 8010b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b26:	4605      	mov	r5, r0
 8010b28:	0710      	lsls	r0, r2, #28
 8010b2a:	460c      	mov	r4, r1
 8010b2c:	d458      	bmi.n	8010be0 <__sflush_r+0xc0>
 8010b2e:	684b      	ldr	r3, [r1, #4]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	dc05      	bgt.n	8010b40 <__sflush_r+0x20>
 8010b34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	dc02      	bgt.n	8010b40 <__sflush_r+0x20>
 8010b3a:	2000      	movs	r0, #0
 8010b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010b42:	2e00      	cmp	r6, #0
 8010b44:	d0f9      	beq.n	8010b3a <__sflush_r+0x1a>
 8010b46:	2300      	movs	r3, #0
 8010b48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010b4c:	682f      	ldr	r7, [r5, #0]
 8010b4e:	602b      	str	r3, [r5, #0]
 8010b50:	d032      	beq.n	8010bb8 <__sflush_r+0x98>
 8010b52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010b54:	89a3      	ldrh	r3, [r4, #12]
 8010b56:	075a      	lsls	r2, r3, #29
 8010b58:	d505      	bpl.n	8010b66 <__sflush_r+0x46>
 8010b5a:	6863      	ldr	r3, [r4, #4]
 8010b5c:	1ac0      	subs	r0, r0, r3
 8010b5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010b60:	b10b      	cbz	r3, 8010b66 <__sflush_r+0x46>
 8010b62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010b64:	1ac0      	subs	r0, r0, r3
 8010b66:	2300      	movs	r3, #0
 8010b68:	4602      	mov	r2, r0
 8010b6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010b6c:	6a21      	ldr	r1, [r4, #32]
 8010b6e:	4628      	mov	r0, r5
 8010b70:	47b0      	blx	r6
 8010b72:	1c43      	adds	r3, r0, #1
 8010b74:	89a3      	ldrh	r3, [r4, #12]
 8010b76:	d106      	bne.n	8010b86 <__sflush_r+0x66>
 8010b78:	6829      	ldr	r1, [r5, #0]
 8010b7a:	291d      	cmp	r1, #29
 8010b7c:	d82c      	bhi.n	8010bd8 <__sflush_r+0xb8>
 8010b7e:	4a2a      	ldr	r2, [pc, #168]	; (8010c28 <__sflush_r+0x108>)
 8010b80:	40ca      	lsrs	r2, r1
 8010b82:	07d6      	lsls	r6, r2, #31
 8010b84:	d528      	bpl.n	8010bd8 <__sflush_r+0xb8>
 8010b86:	2200      	movs	r2, #0
 8010b88:	6062      	str	r2, [r4, #4]
 8010b8a:	04d9      	lsls	r1, r3, #19
 8010b8c:	6922      	ldr	r2, [r4, #16]
 8010b8e:	6022      	str	r2, [r4, #0]
 8010b90:	d504      	bpl.n	8010b9c <__sflush_r+0x7c>
 8010b92:	1c42      	adds	r2, r0, #1
 8010b94:	d101      	bne.n	8010b9a <__sflush_r+0x7a>
 8010b96:	682b      	ldr	r3, [r5, #0]
 8010b98:	b903      	cbnz	r3, 8010b9c <__sflush_r+0x7c>
 8010b9a:	6560      	str	r0, [r4, #84]	; 0x54
 8010b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b9e:	602f      	str	r7, [r5, #0]
 8010ba0:	2900      	cmp	r1, #0
 8010ba2:	d0ca      	beq.n	8010b3a <__sflush_r+0x1a>
 8010ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010ba8:	4299      	cmp	r1, r3
 8010baa:	d002      	beq.n	8010bb2 <__sflush_r+0x92>
 8010bac:	4628      	mov	r0, r5
 8010bae:	f7fd fc45 	bl	800e43c <_free_r>
 8010bb2:	2000      	movs	r0, #0
 8010bb4:	6360      	str	r0, [r4, #52]	; 0x34
 8010bb6:	e7c1      	b.n	8010b3c <__sflush_r+0x1c>
 8010bb8:	6a21      	ldr	r1, [r4, #32]
 8010bba:	2301      	movs	r3, #1
 8010bbc:	4628      	mov	r0, r5
 8010bbe:	47b0      	blx	r6
 8010bc0:	1c41      	adds	r1, r0, #1
 8010bc2:	d1c7      	bne.n	8010b54 <__sflush_r+0x34>
 8010bc4:	682b      	ldr	r3, [r5, #0]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d0c4      	beq.n	8010b54 <__sflush_r+0x34>
 8010bca:	2b1d      	cmp	r3, #29
 8010bcc:	d001      	beq.n	8010bd2 <__sflush_r+0xb2>
 8010bce:	2b16      	cmp	r3, #22
 8010bd0:	d101      	bne.n	8010bd6 <__sflush_r+0xb6>
 8010bd2:	602f      	str	r7, [r5, #0]
 8010bd4:	e7b1      	b.n	8010b3a <__sflush_r+0x1a>
 8010bd6:	89a3      	ldrh	r3, [r4, #12]
 8010bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010bdc:	81a3      	strh	r3, [r4, #12]
 8010bde:	e7ad      	b.n	8010b3c <__sflush_r+0x1c>
 8010be0:	690f      	ldr	r7, [r1, #16]
 8010be2:	2f00      	cmp	r7, #0
 8010be4:	d0a9      	beq.n	8010b3a <__sflush_r+0x1a>
 8010be6:	0793      	lsls	r3, r2, #30
 8010be8:	680e      	ldr	r6, [r1, #0]
 8010bea:	bf08      	it	eq
 8010bec:	694b      	ldreq	r3, [r1, #20]
 8010bee:	600f      	str	r7, [r1, #0]
 8010bf0:	bf18      	it	ne
 8010bf2:	2300      	movne	r3, #0
 8010bf4:	eba6 0807 	sub.w	r8, r6, r7
 8010bf8:	608b      	str	r3, [r1, #8]
 8010bfa:	f1b8 0f00 	cmp.w	r8, #0
 8010bfe:	dd9c      	ble.n	8010b3a <__sflush_r+0x1a>
 8010c00:	6a21      	ldr	r1, [r4, #32]
 8010c02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010c04:	4643      	mov	r3, r8
 8010c06:	463a      	mov	r2, r7
 8010c08:	4628      	mov	r0, r5
 8010c0a:	47b0      	blx	r6
 8010c0c:	2800      	cmp	r0, #0
 8010c0e:	dc06      	bgt.n	8010c1e <__sflush_r+0xfe>
 8010c10:	89a3      	ldrh	r3, [r4, #12]
 8010c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c16:	81a3      	strh	r3, [r4, #12]
 8010c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c1c:	e78e      	b.n	8010b3c <__sflush_r+0x1c>
 8010c1e:	4407      	add	r7, r0
 8010c20:	eba8 0800 	sub.w	r8, r8, r0
 8010c24:	e7e9      	b.n	8010bfa <__sflush_r+0xda>
 8010c26:	bf00      	nop
 8010c28:	20400001 	.word	0x20400001

08010c2c <_fflush_r>:
 8010c2c:	b538      	push	{r3, r4, r5, lr}
 8010c2e:	690b      	ldr	r3, [r1, #16]
 8010c30:	4605      	mov	r5, r0
 8010c32:	460c      	mov	r4, r1
 8010c34:	b913      	cbnz	r3, 8010c3c <_fflush_r+0x10>
 8010c36:	2500      	movs	r5, #0
 8010c38:	4628      	mov	r0, r5
 8010c3a:	bd38      	pop	{r3, r4, r5, pc}
 8010c3c:	b118      	cbz	r0, 8010c46 <_fflush_r+0x1a>
 8010c3e:	6983      	ldr	r3, [r0, #24]
 8010c40:	b90b      	cbnz	r3, 8010c46 <_fflush_r+0x1a>
 8010c42:	f000 f887 	bl	8010d54 <__sinit>
 8010c46:	4b14      	ldr	r3, [pc, #80]	; (8010c98 <_fflush_r+0x6c>)
 8010c48:	429c      	cmp	r4, r3
 8010c4a:	d11b      	bne.n	8010c84 <_fflush_r+0x58>
 8010c4c:	686c      	ldr	r4, [r5, #4]
 8010c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d0ef      	beq.n	8010c36 <_fflush_r+0xa>
 8010c56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010c58:	07d0      	lsls	r0, r2, #31
 8010c5a:	d404      	bmi.n	8010c66 <_fflush_r+0x3a>
 8010c5c:	0599      	lsls	r1, r3, #22
 8010c5e:	d402      	bmi.n	8010c66 <_fflush_r+0x3a>
 8010c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c62:	f7ff fcf8 	bl	8010656 <__retarget_lock_acquire_recursive>
 8010c66:	4628      	mov	r0, r5
 8010c68:	4621      	mov	r1, r4
 8010c6a:	f7ff ff59 	bl	8010b20 <__sflush_r>
 8010c6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010c70:	07da      	lsls	r2, r3, #31
 8010c72:	4605      	mov	r5, r0
 8010c74:	d4e0      	bmi.n	8010c38 <_fflush_r+0xc>
 8010c76:	89a3      	ldrh	r3, [r4, #12]
 8010c78:	059b      	lsls	r3, r3, #22
 8010c7a:	d4dd      	bmi.n	8010c38 <_fflush_r+0xc>
 8010c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c7e:	f7ff fceb 	bl	8010658 <__retarget_lock_release_recursive>
 8010c82:	e7d9      	b.n	8010c38 <_fflush_r+0xc>
 8010c84:	4b05      	ldr	r3, [pc, #20]	; (8010c9c <_fflush_r+0x70>)
 8010c86:	429c      	cmp	r4, r3
 8010c88:	d101      	bne.n	8010c8e <_fflush_r+0x62>
 8010c8a:	68ac      	ldr	r4, [r5, #8]
 8010c8c:	e7df      	b.n	8010c4e <_fflush_r+0x22>
 8010c8e:	4b04      	ldr	r3, [pc, #16]	; (8010ca0 <_fflush_r+0x74>)
 8010c90:	429c      	cmp	r4, r3
 8010c92:	bf08      	it	eq
 8010c94:	68ec      	ldreq	r4, [r5, #12]
 8010c96:	e7da      	b.n	8010c4e <_fflush_r+0x22>
 8010c98:	08011b84 	.word	0x08011b84
 8010c9c:	08011ba4 	.word	0x08011ba4
 8010ca0:	08011b64 	.word	0x08011b64

08010ca4 <std>:
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	b510      	push	{r4, lr}
 8010ca8:	4604      	mov	r4, r0
 8010caa:	e9c0 3300 	strd	r3, r3, [r0]
 8010cae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010cb2:	6083      	str	r3, [r0, #8]
 8010cb4:	8181      	strh	r1, [r0, #12]
 8010cb6:	6643      	str	r3, [r0, #100]	; 0x64
 8010cb8:	81c2      	strh	r2, [r0, #14]
 8010cba:	6183      	str	r3, [r0, #24]
 8010cbc:	4619      	mov	r1, r3
 8010cbe:	2208      	movs	r2, #8
 8010cc0:	305c      	adds	r0, #92	; 0x5c
 8010cc2:	f7fd fbb3 	bl	800e42c <memset>
 8010cc6:	4b05      	ldr	r3, [pc, #20]	; (8010cdc <std+0x38>)
 8010cc8:	6263      	str	r3, [r4, #36]	; 0x24
 8010cca:	4b05      	ldr	r3, [pc, #20]	; (8010ce0 <std+0x3c>)
 8010ccc:	62a3      	str	r3, [r4, #40]	; 0x28
 8010cce:	4b05      	ldr	r3, [pc, #20]	; (8010ce4 <std+0x40>)
 8010cd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010cd2:	4b05      	ldr	r3, [pc, #20]	; (8010ce8 <std+0x44>)
 8010cd4:	6224      	str	r4, [r4, #32]
 8010cd6:	6323      	str	r3, [r4, #48]	; 0x30
 8010cd8:	bd10      	pop	{r4, pc}
 8010cda:	bf00      	nop
 8010cdc:	08010fe1 	.word	0x08010fe1
 8010ce0:	08011003 	.word	0x08011003
 8010ce4:	0801103b 	.word	0x0801103b
 8010ce8:	0801105f 	.word	0x0801105f

08010cec <_cleanup_r>:
 8010cec:	4901      	ldr	r1, [pc, #4]	; (8010cf4 <_cleanup_r+0x8>)
 8010cee:	f000 b8af 	b.w	8010e50 <_fwalk_reent>
 8010cf2:	bf00      	nop
 8010cf4:	08010c2d 	.word	0x08010c2d

08010cf8 <__sfmoreglue>:
 8010cf8:	b570      	push	{r4, r5, r6, lr}
 8010cfa:	1e4a      	subs	r2, r1, #1
 8010cfc:	2568      	movs	r5, #104	; 0x68
 8010cfe:	4355      	muls	r5, r2
 8010d00:	460e      	mov	r6, r1
 8010d02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010d06:	f7fd fbe9 	bl	800e4dc <_malloc_r>
 8010d0a:	4604      	mov	r4, r0
 8010d0c:	b140      	cbz	r0, 8010d20 <__sfmoreglue+0x28>
 8010d0e:	2100      	movs	r1, #0
 8010d10:	e9c0 1600 	strd	r1, r6, [r0]
 8010d14:	300c      	adds	r0, #12
 8010d16:	60a0      	str	r0, [r4, #8]
 8010d18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010d1c:	f7fd fb86 	bl	800e42c <memset>
 8010d20:	4620      	mov	r0, r4
 8010d22:	bd70      	pop	{r4, r5, r6, pc}

08010d24 <__sfp_lock_acquire>:
 8010d24:	4801      	ldr	r0, [pc, #4]	; (8010d2c <__sfp_lock_acquire+0x8>)
 8010d26:	f7ff bc96 	b.w	8010656 <__retarget_lock_acquire_recursive>
 8010d2a:	bf00      	nop
 8010d2c:	20001718 	.word	0x20001718

08010d30 <__sfp_lock_release>:
 8010d30:	4801      	ldr	r0, [pc, #4]	; (8010d38 <__sfp_lock_release+0x8>)
 8010d32:	f7ff bc91 	b.w	8010658 <__retarget_lock_release_recursive>
 8010d36:	bf00      	nop
 8010d38:	20001718 	.word	0x20001718

08010d3c <__sinit_lock_acquire>:
 8010d3c:	4801      	ldr	r0, [pc, #4]	; (8010d44 <__sinit_lock_acquire+0x8>)
 8010d3e:	f7ff bc8a 	b.w	8010656 <__retarget_lock_acquire_recursive>
 8010d42:	bf00      	nop
 8010d44:	20001713 	.word	0x20001713

08010d48 <__sinit_lock_release>:
 8010d48:	4801      	ldr	r0, [pc, #4]	; (8010d50 <__sinit_lock_release+0x8>)
 8010d4a:	f7ff bc85 	b.w	8010658 <__retarget_lock_release_recursive>
 8010d4e:	bf00      	nop
 8010d50:	20001713 	.word	0x20001713

08010d54 <__sinit>:
 8010d54:	b510      	push	{r4, lr}
 8010d56:	4604      	mov	r4, r0
 8010d58:	f7ff fff0 	bl	8010d3c <__sinit_lock_acquire>
 8010d5c:	69a3      	ldr	r3, [r4, #24]
 8010d5e:	b11b      	cbz	r3, 8010d68 <__sinit+0x14>
 8010d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d64:	f7ff bff0 	b.w	8010d48 <__sinit_lock_release>
 8010d68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010d6c:	6523      	str	r3, [r4, #80]	; 0x50
 8010d6e:	4b13      	ldr	r3, [pc, #76]	; (8010dbc <__sinit+0x68>)
 8010d70:	4a13      	ldr	r2, [pc, #76]	; (8010dc0 <__sinit+0x6c>)
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	62a2      	str	r2, [r4, #40]	; 0x28
 8010d76:	42a3      	cmp	r3, r4
 8010d78:	bf04      	itt	eq
 8010d7a:	2301      	moveq	r3, #1
 8010d7c:	61a3      	streq	r3, [r4, #24]
 8010d7e:	4620      	mov	r0, r4
 8010d80:	f000 f820 	bl	8010dc4 <__sfp>
 8010d84:	6060      	str	r0, [r4, #4]
 8010d86:	4620      	mov	r0, r4
 8010d88:	f000 f81c 	bl	8010dc4 <__sfp>
 8010d8c:	60a0      	str	r0, [r4, #8]
 8010d8e:	4620      	mov	r0, r4
 8010d90:	f000 f818 	bl	8010dc4 <__sfp>
 8010d94:	2200      	movs	r2, #0
 8010d96:	60e0      	str	r0, [r4, #12]
 8010d98:	2104      	movs	r1, #4
 8010d9a:	6860      	ldr	r0, [r4, #4]
 8010d9c:	f7ff ff82 	bl	8010ca4 <std>
 8010da0:	68a0      	ldr	r0, [r4, #8]
 8010da2:	2201      	movs	r2, #1
 8010da4:	2109      	movs	r1, #9
 8010da6:	f7ff ff7d 	bl	8010ca4 <std>
 8010daa:	68e0      	ldr	r0, [r4, #12]
 8010dac:	2202      	movs	r2, #2
 8010dae:	2112      	movs	r1, #18
 8010db0:	f7ff ff78 	bl	8010ca4 <std>
 8010db4:	2301      	movs	r3, #1
 8010db6:	61a3      	str	r3, [r4, #24]
 8010db8:	e7d2      	b.n	8010d60 <__sinit+0xc>
 8010dba:	bf00      	nop
 8010dbc:	080117e4 	.word	0x080117e4
 8010dc0:	08010ced 	.word	0x08010ced

08010dc4 <__sfp>:
 8010dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dc6:	4607      	mov	r7, r0
 8010dc8:	f7ff ffac 	bl	8010d24 <__sfp_lock_acquire>
 8010dcc:	4b1e      	ldr	r3, [pc, #120]	; (8010e48 <__sfp+0x84>)
 8010dce:	681e      	ldr	r6, [r3, #0]
 8010dd0:	69b3      	ldr	r3, [r6, #24]
 8010dd2:	b913      	cbnz	r3, 8010dda <__sfp+0x16>
 8010dd4:	4630      	mov	r0, r6
 8010dd6:	f7ff ffbd 	bl	8010d54 <__sinit>
 8010dda:	3648      	adds	r6, #72	; 0x48
 8010ddc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010de0:	3b01      	subs	r3, #1
 8010de2:	d503      	bpl.n	8010dec <__sfp+0x28>
 8010de4:	6833      	ldr	r3, [r6, #0]
 8010de6:	b30b      	cbz	r3, 8010e2c <__sfp+0x68>
 8010de8:	6836      	ldr	r6, [r6, #0]
 8010dea:	e7f7      	b.n	8010ddc <__sfp+0x18>
 8010dec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010df0:	b9d5      	cbnz	r5, 8010e28 <__sfp+0x64>
 8010df2:	4b16      	ldr	r3, [pc, #88]	; (8010e4c <__sfp+0x88>)
 8010df4:	60e3      	str	r3, [r4, #12]
 8010df6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010dfa:	6665      	str	r5, [r4, #100]	; 0x64
 8010dfc:	f7ff fc2a 	bl	8010654 <__retarget_lock_init_recursive>
 8010e00:	f7ff ff96 	bl	8010d30 <__sfp_lock_release>
 8010e04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010e08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010e0c:	6025      	str	r5, [r4, #0]
 8010e0e:	61a5      	str	r5, [r4, #24]
 8010e10:	2208      	movs	r2, #8
 8010e12:	4629      	mov	r1, r5
 8010e14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010e18:	f7fd fb08 	bl	800e42c <memset>
 8010e1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010e20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010e24:	4620      	mov	r0, r4
 8010e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e28:	3468      	adds	r4, #104	; 0x68
 8010e2a:	e7d9      	b.n	8010de0 <__sfp+0x1c>
 8010e2c:	2104      	movs	r1, #4
 8010e2e:	4638      	mov	r0, r7
 8010e30:	f7ff ff62 	bl	8010cf8 <__sfmoreglue>
 8010e34:	4604      	mov	r4, r0
 8010e36:	6030      	str	r0, [r6, #0]
 8010e38:	2800      	cmp	r0, #0
 8010e3a:	d1d5      	bne.n	8010de8 <__sfp+0x24>
 8010e3c:	f7ff ff78 	bl	8010d30 <__sfp_lock_release>
 8010e40:	230c      	movs	r3, #12
 8010e42:	603b      	str	r3, [r7, #0]
 8010e44:	e7ee      	b.n	8010e24 <__sfp+0x60>
 8010e46:	bf00      	nop
 8010e48:	080117e4 	.word	0x080117e4
 8010e4c:	ffff0001 	.word	0xffff0001

08010e50 <_fwalk_reent>:
 8010e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e54:	4606      	mov	r6, r0
 8010e56:	4688      	mov	r8, r1
 8010e58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010e5c:	2700      	movs	r7, #0
 8010e5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010e62:	f1b9 0901 	subs.w	r9, r9, #1
 8010e66:	d505      	bpl.n	8010e74 <_fwalk_reent+0x24>
 8010e68:	6824      	ldr	r4, [r4, #0]
 8010e6a:	2c00      	cmp	r4, #0
 8010e6c:	d1f7      	bne.n	8010e5e <_fwalk_reent+0xe>
 8010e6e:	4638      	mov	r0, r7
 8010e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e74:	89ab      	ldrh	r3, [r5, #12]
 8010e76:	2b01      	cmp	r3, #1
 8010e78:	d907      	bls.n	8010e8a <_fwalk_reent+0x3a>
 8010e7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010e7e:	3301      	adds	r3, #1
 8010e80:	d003      	beq.n	8010e8a <_fwalk_reent+0x3a>
 8010e82:	4629      	mov	r1, r5
 8010e84:	4630      	mov	r0, r6
 8010e86:	47c0      	blx	r8
 8010e88:	4307      	orrs	r7, r0
 8010e8a:	3568      	adds	r5, #104	; 0x68
 8010e8c:	e7e9      	b.n	8010e62 <_fwalk_reent+0x12>

08010e8e <__swhatbuf_r>:
 8010e8e:	b570      	push	{r4, r5, r6, lr}
 8010e90:	460e      	mov	r6, r1
 8010e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e96:	2900      	cmp	r1, #0
 8010e98:	b096      	sub	sp, #88	; 0x58
 8010e9a:	4614      	mov	r4, r2
 8010e9c:	461d      	mov	r5, r3
 8010e9e:	da07      	bge.n	8010eb0 <__swhatbuf_r+0x22>
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	602b      	str	r3, [r5, #0]
 8010ea4:	89b3      	ldrh	r3, [r6, #12]
 8010ea6:	061a      	lsls	r2, r3, #24
 8010ea8:	d410      	bmi.n	8010ecc <__swhatbuf_r+0x3e>
 8010eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010eae:	e00e      	b.n	8010ece <__swhatbuf_r+0x40>
 8010eb0:	466a      	mov	r2, sp
 8010eb2:	f000 f8fb 	bl	80110ac <_fstat_r>
 8010eb6:	2800      	cmp	r0, #0
 8010eb8:	dbf2      	blt.n	8010ea0 <__swhatbuf_r+0x12>
 8010eba:	9a01      	ldr	r2, [sp, #4]
 8010ebc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010ec0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010ec4:	425a      	negs	r2, r3
 8010ec6:	415a      	adcs	r2, r3
 8010ec8:	602a      	str	r2, [r5, #0]
 8010eca:	e7ee      	b.n	8010eaa <__swhatbuf_r+0x1c>
 8010ecc:	2340      	movs	r3, #64	; 0x40
 8010ece:	2000      	movs	r0, #0
 8010ed0:	6023      	str	r3, [r4, #0]
 8010ed2:	b016      	add	sp, #88	; 0x58
 8010ed4:	bd70      	pop	{r4, r5, r6, pc}
	...

08010ed8 <__smakebuf_r>:
 8010ed8:	898b      	ldrh	r3, [r1, #12]
 8010eda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010edc:	079d      	lsls	r5, r3, #30
 8010ede:	4606      	mov	r6, r0
 8010ee0:	460c      	mov	r4, r1
 8010ee2:	d507      	bpl.n	8010ef4 <__smakebuf_r+0x1c>
 8010ee4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010ee8:	6023      	str	r3, [r4, #0]
 8010eea:	6123      	str	r3, [r4, #16]
 8010eec:	2301      	movs	r3, #1
 8010eee:	6163      	str	r3, [r4, #20]
 8010ef0:	b002      	add	sp, #8
 8010ef2:	bd70      	pop	{r4, r5, r6, pc}
 8010ef4:	ab01      	add	r3, sp, #4
 8010ef6:	466a      	mov	r2, sp
 8010ef8:	f7ff ffc9 	bl	8010e8e <__swhatbuf_r>
 8010efc:	9900      	ldr	r1, [sp, #0]
 8010efe:	4605      	mov	r5, r0
 8010f00:	4630      	mov	r0, r6
 8010f02:	f7fd faeb 	bl	800e4dc <_malloc_r>
 8010f06:	b948      	cbnz	r0, 8010f1c <__smakebuf_r+0x44>
 8010f08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f0c:	059a      	lsls	r2, r3, #22
 8010f0e:	d4ef      	bmi.n	8010ef0 <__smakebuf_r+0x18>
 8010f10:	f023 0303 	bic.w	r3, r3, #3
 8010f14:	f043 0302 	orr.w	r3, r3, #2
 8010f18:	81a3      	strh	r3, [r4, #12]
 8010f1a:	e7e3      	b.n	8010ee4 <__smakebuf_r+0xc>
 8010f1c:	4b0d      	ldr	r3, [pc, #52]	; (8010f54 <__smakebuf_r+0x7c>)
 8010f1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010f20:	89a3      	ldrh	r3, [r4, #12]
 8010f22:	6020      	str	r0, [r4, #0]
 8010f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f28:	81a3      	strh	r3, [r4, #12]
 8010f2a:	9b00      	ldr	r3, [sp, #0]
 8010f2c:	6163      	str	r3, [r4, #20]
 8010f2e:	9b01      	ldr	r3, [sp, #4]
 8010f30:	6120      	str	r0, [r4, #16]
 8010f32:	b15b      	cbz	r3, 8010f4c <__smakebuf_r+0x74>
 8010f34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f38:	4630      	mov	r0, r6
 8010f3a:	f000 f8c9 	bl	80110d0 <_isatty_r>
 8010f3e:	b128      	cbz	r0, 8010f4c <__smakebuf_r+0x74>
 8010f40:	89a3      	ldrh	r3, [r4, #12]
 8010f42:	f023 0303 	bic.w	r3, r3, #3
 8010f46:	f043 0301 	orr.w	r3, r3, #1
 8010f4a:	81a3      	strh	r3, [r4, #12]
 8010f4c:	89a0      	ldrh	r0, [r4, #12]
 8010f4e:	4305      	orrs	r5, r0
 8010f50:	81a5      	strh	r5, [r4, #12]
 8010f52:	e7cd      	b.n	8010ef0 <__smakebuf_r+0x18>
 8010f54:	08010ced 	.word	0x08010ced

08010f58 <_raise_r>:
 8010f58:	291f      	cmp	r1, #31
 8010f5a:	b538      	push	{r3, r4, r5, lr}
 8010f5c:	4604      	mov	r4, r0
 8010f5e:	460d      	mov	r5, r1
 8010f60:	d904      	bls.n	8010f6c <_raise_r+0x14>
 8010f62:	2316      	movs	r3, #22
 8010f64:	6003      	str	r3, [r0, #0]
 8010f66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f6a:	bd38      	pop	{r3, r4, r5, pc}
 8010f6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010f6e:	b112      	cbz	r2, 8010f76 <_raise_r+0x1e>
 8010f70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010f74:	b94b      	cbnz	r3, 8010f8a <_raise_r+0x32>
 8010f76:	4620      	mov	r0, r4
 8010f78:	f000 f830 	bl	8010fdc <_getpid_r>
 8010f7c:	462a      	mov	r2, r5
 8010f7e:	4601      	mov	r1, r0
 8010f80:	4620      	mov	r0, r4
 8010f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f86:	f000 b817 	b.w	8010fb8 <_kill_r>
 8010f8a:	2b01      	cmp	r3, #1
 8010f8c:	d00a      	beq.n	8010fa4 <_raise_r+0x4c>
 8010f8e:	1c59      	adds	r1, r3, #1
 8010f90:	d103      	bne.n	8010f9a <_raise_r+0x42>
 8010f92:	2316      	movs	r3, #22
 8010f94:	6003      	str	r3, [r0, #0]
 8010f96:	2001      	movs	r0, #1
 8010f98:	e7e7      	b.n	8010f6a <_raise_r+0x12>
 8010f9a:	2400      	movs	r4, #0
 8010f9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010fa0:	4628      	mov	r0, r5
 8010fa2:	4798      	blx	r3
 8010fa4:	2000      	movs	r0, #0
 8010fa6:	e7e0      	b.n	8010f6a <_raise_r+0x12>

08010fa8 <raise>:
 8010fa8:	4b02      	ldr	r3, [pc, #8]	; (8010fb4 <raise+0xc>)
 8010faa:	4601      	mov	r1, r0
 8010fac:	6818      	ldr	r0, [r3, #0]
 8010fae:	f7ff bfd3 	b.w	8010f58 <_raise_r>
 8010fb2:	bf00      	nop
 8010fb4:	200005e4 	.word	0x200005e4

08010fb8 <_kill_r>:
 8010fb8:	b538      	push	{r3, r4, r5, lr}
 8010fba:	4d07      	ldr	r5, [pc, #28]	; (8010fd8 <_kill_r+0x20>)
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	4604      	mov	r4, r0
 8010fc0:	4608      	mov	r0, r1
 8010fc2:	4611      	mov	r1, r2
 8010fc4:	602b      	str	r3, [r5, #0]
 8010fc6:	f000 f8d7 	bl	8011178 <_kill>
 8010fca:	1c43      	adds	r3, r0, #1
 8010fcc:	d102      	bne.n	8010fd4 <_kill_r+0x1c>
 8010fce:	682b      	ldr	r3, [r5, #0]
 8010fd0:	b103      	cbz	r3, 8010fd4 <_kill_r+0x1c>
 8010fd2:	6023      	str	r3, [r4, #0]
 8010fd4:	bd38      	pop	{r3, r4, r5, pc}
 8010fd6:	bf00      	nop
 8010fd8:	2000170c 	.word	0x2000170c

08010fdc <_getpid_r>:
 8010fdc:	f000 b8bc 	b.w	8011158 <_getpid>

08010fe0 <__sread>:
 8010fe0:	b510      	push	{r4, lr}
 8010fe2:	460c      	mov	r4, r1
 8010fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fe8:	f000 f894 	bl	8011114 <_read_r>
 8010fec:	2800      	cmp	r0, #0
 8010fee:	bfab      	itete	ge
 8010ff0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010ff2:	89a3      	ldrhlt	r3, [r4, #12]
 8010ff4:	181b      	addge	r3, r3, r0
 8010ff6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010ffa:	bfac      	ite	ge
 8010ffc:	6563      	strge	r3, [r4, #84]	; 0x54
 8010ffe:	81a3      	strhlt	r3, [r4, #12]
 8011000:	bd10      	pop	{r4, pc}

08011002 <__swrite>:
 8011002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011006:	461f      	mov	r7, r3
 8011008:	898b      	ldrh	r3, [r1, #12]
 801100a:	05db      	lsls	r3, r3, #23
 801100c:	4605      	mov	r5, r0
 801100e:	460c      	mov	r4, r1
 8011010:	4616      	mov	r6, r2
 8011012:	d505      	bpl.n	8011020 <__swrite+0x1e>
 8011014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011018:	2302      	movs	r3, #2
 801101a:	2200      	movs	r2, #0
 801101c:	f000 f868 	bl	80110f0 <_lseek_r>
 8011020:	89a3      	ldrh	r3, [r4, #12]
 8011022:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011026:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801102a:	81a3      	strh	r3, [r4, #12]
 801102c:	4632      	mov	r2, r6
 801102e:	463b      	mov	r3, r7
 8011030:	4628      	mov	r0, r5
 8011032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011036:	f000 b817 	b.w	8011068 <_write_r>

0801103a <__sseek>:
 801103a:	b510      	push	{r4, lr}
 801103c:	460c      	mov	r4, r1
 801103e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011042:	f000 f855 	bl	80110f0 <_lseek_r>
 8011046:	1c43      	adds	r3, r0, #1
 8011048:	89a3      	ldrh	r3, [r4, #12]
 801104a:	bf15      	itete	ne
 801104c:	6560      	strne	r0, [r4, #84]	; 0x54
 801104e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011052:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011056:	81a3      	strheq	r3, [r4, #12]
 8011058:	bf18      	it	ne
 801105a:	81a3      	strhne	r3, [r4, #12]
 801105c:	bd10      	pop	{r4, pc}

0801105e <__sclose>:
 801105e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011062:	f000 b813 	b.w	801108c <_close_r>
	...

08011068 <_write_r>:
 8011068:	b538      	push	{r3, r4, r5, lr}
 801106a:	4d07      	ldr	r5, [pc, #28]	; (8011088 <_write_r+0x20>)
 801106c:	4604      	mov	r4, r0
 801106e:	4608      	mov	r0, r1
 8011070:	4611      	mov	r1, r2
 8011072:	2200      	movs	r2, #0
 8011074:	602a      	str	r2, [r5, #0]
 8011076:	461a      	mov	r2, r3
 8011078:	f000 f896 	bl	80111a8 <_write>
 801107c:	1c43      	adds	r3, r0, #1
 801107e:	d102      	bne.n	8011086 <_write_r+0x1e>
 8011080:	682b      	ldr	r3, [r5, #0]
 8011082:	b103      	cbz	r3, 8011086 <_write_r+0x1e>
 8011084:	6023      	str	r3, [r4, #0]
 8011086:	bd38      	pop	{r3, r4, r5, pc}
 8011088:	2000170c 	.word	0x2000170c

0801108c <_close_r>:
 801108c:	b538      	push	{r3, r4, r5, lr}
 801108e:	4d06      	ldr	r5, [pc, #24]	; (80110a8 <_close_r+0x1c>)
 8011090:	2300      	movs	r3, #0
 8011092:	4604      	mov	r4, r0
 8011094:	4608      	mov	r0, r1
 8011096:	602b      	str	r3, [r5, #0]
 8011098:	f000 f84e 	bl	8011138 <_close>
 801109c:	1c43      	adds	r3, r0, #1
 801109e:	d102      	bne.n	80110a6 <_close_r+0x1a>
 80110a0:	682b      	ldr	r3, [r5, #0]
 80110a2:	b103      	cbz	r3, 80110a6 <_close_r+0x1a>
 80110a4:	6023      	str	r3, [r4, #0]
 80110a6:	bd38      	pop	{r3, r4, r5, pc}
 80110a8:	2000170c 	.word	0x2000170c

080110ac <_fstat_r>:
 80110ac:	b538      	push	{r3, r4, r5, lr}
 80110ae:	4d07      	ldr	r5, [pc, #28]	; (80110cc <_fstat_r+0x20>)
 80110b0:	2300      	movs	r3, #0
 80110b2:	4604      	mov	r4, r0
 80110b4:	4608      	mov	r0, r1
 80110b6:	4611      	mov	r1, r2
 80110b8:	602b      	str	r3, [r5, #0]
 80110ba:	f000 f845 	bl	8011148 <_fstat>
 80110be:	1c43      	adds	r3, r0, #1
 80110c0:	d102      	bne.n	80110c8 <_fstat_r+0x1c>
 80110c2:	682b      	ldr	r3, [r5, #0]
 80110c4:	b103      	cbz	r3, 80110c8 <_fstat_r+0x1c>
 80110c6:	6023      	str	r3, [r4, #0]
 80110c8:	bd38      	pop	{r3, r4, r5, pc}
 80110ca:	bf00      	nop
 80110cc:	2000170c 	.word	0x2000170c

080110d0 <_isatty_r>:
 80110d0:	b538      	push	{r3, r4, r5, lr}
 80110d2:	4d06      	ldr	r5, [pc, #24]	; (80110ec <_isatty_r+0x1c>)
 80110d4:	2300      	movs	r3, #0
 80110d6:	4604      	mov	r4, r0
 80110d8:	4608      	mov	r0, r1
 80110da:	602b      	str	r3, [r5, #0]
 80110dc:	f000 f844 	bl	8011168 <_isatty>
 80110e0:	1c43      	adds	r3, r0, #1
 80110e2:	d102      	bne.n	80110ea <_isatty_r+0x1a>
 80110e4:	682b      	ldr	r3, [r5, #0]
 80110e6:	b103      	cbz	r3, 80110ea <_isatty_r+0x1a>
 80110e8:	6023      	str	r3, [r4, #0]
 80110ea:	bd38      	pop	{r3, r4, r5, pc}
 80110ec:	2000170c 	.word	0x2000170c

080110f0 <_lseek_r>:
 80110f0:	b538      	push	{r3, r4, r5, lr}
 80110f2:	4d07      	ldr	r5, [pc, #28]	; (8011110 <_lseek_r+0x20>)
 80110f4:	4604      	mov	r4, r0
 80110f6:	4608      	mov	r0, r1
 80110f8:	4611      	mov	r1, r2
 80110fa:	2200      	movs	r2, #0
 80110fc:	602a      	str	r2, [r5, #0]
 80110fe:	461a      	mov	r2, r3
 8011100:	f000 f842 	bl	8011188 <_lseek>
 8011104:	1c43      	adds	r3, r0, #1
 8011106:	d102      	bne.n	801110e <_lseek_r+0x1e>
 8011108:	682b      	ldr	r3, [r5, #0]
 801110a:	b103      	cbz	r3, 801110e <_lseek_r+0x1e>
 801110c:	6023      	str	r3, [r4, #0]
 801110e:	bd38      	pop	{r3, r4, r5, pc}
 8011110:	2000170c 	.word	0x2000170c

08011114 <_read_r>:
 8011114:	b538      	push	{r3, r4, r5, lr}
 8011116:	4d07      	ldr	r5, [pc, #28]	; (8011134 <_read_r+0x20>)
 8011118:	4604      	mov	r4, r0
 801111a:	4608      	mov	r0, r1
 801111c:	4611      	mov	r1, r2
 801111e:	2200      	movs	r2, #0
 8011120:	602a      	str	r2, [r5, #0]
 8011122:	461a      	mov	r2, r3
 8011124:	f000 f838 	bl	8011198 <_read>
 8011128:	1c43      	adds	r3, r0, #1
 801112a:	d102      	bne.n	8011132 <_read_r+0x1e>
 801112c:	682b      	ldr	r3, [r5, #0]
 801112e:	b103      	cbz	r3, 8011132 <_read_r+0x1e>
 8011130:	6023      	str	r3, [r4, #0]
 8011132:	bd38      	pop	{r3, r4, r5, pc}
 8011134:	2000170c 	.word	0x2000170c

08011138 <_close>:
 8011138:	4b02      	ldr	r3, [pc, #8]	; (8011144 <_close+0xc>)
 801113a:	2258      	movs	r2, #88	; 0x58
 801113c:	601a      	str	r2, [r3, #0]
 801113e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011142:	4770      	bx	lr
 8011144:	2000170c 	.word	0x2000170c

08011148 <_fstat>:
 8011148:	4b02      	ldr	r3, [pc, #8]	; (8011154 <_fstat+0xc>)
 801114a:	2258      	movs	r2, #88	; 0x58
 801114c:	601a      	str	r2, [r3, #0]
 801114e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011152:	4770      	bx	lr
 8011154:	2000170c 	.word	0x2000170c

08011158 <_getpid>:
 8011158:	4b02      	ldr	r3, [pc, #8]	; (8011164 <_getpid+0xc>)
 801115a:	2258      	movs	r2, #88	; 0x58
 801115c:	601a      	str	r2, [r3, #0]
 801115e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011162:	4770      	bx	lr
 8011164:	2000170c 	.word	0x2000170c

08011168 <_isatty>:
 8011168:	4b02      	ldr	r3, [pc, #8]	; (8011174 <_isatty+0xc>)
 801116a:	2258      	movs	r2, #88	; 0x58
 801116c:	601a      	str	r2, [r3, #0]
 801116e:	2000      	movs	r0, #0
 8011170:	4770      	bx	lr
 8011172:	bf00      	nop
 8011174:	2000170c 	.word	0x2000170c

08011178 <_kill>:
 8011178:	4b02      	ldr	r3, [pc, #8]	; (8011184 <_kill+0xc>)
 801117a:	2258      	movs	r2, #88	; 0x58
 801117c:	601a      	str	r2, [r3, #0]
 801117e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011182:	4770      	bx	lr
 8011184:	2000170c 	.word	0x2000170c

08011188 <_lseek>:
 8011188:	4b02      	ldr	r3, [pc, #8]	; (8011194 <_lseek+0xc>)
 801118a:	2258      	movs	r2, #88	; 0x58
 801118c:	601a      	str	r2, [r3, #0]
 801118e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011192:	4770      	bx	lr
 8011194:	2000170c 	.word	0x2000170c

08011198 <_read>:
 8011198:	4b02      	ldr	r3, [pc, #8]	; (80111a4 <_read+0xc>)
 801119a:	2258      	movs	r2, #88	; 0x58
 801119c:	601a      	str	r2, [r3, #0]
 801119e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80111a2:	4770      	bx	lr
 80111a4:	2000170c 	.word	0x2000170c

080111a8 <_write>:
 80111a8:	4b02      	ldr	r3, [pc, #8]	; (80111b4 <_write+0xc>)
 80111aa:	2258      	movs	r2, #88	; 0x58
 80111ac:	601a      	str	r2, [r3, #0]
 80111ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80111b2:	4770      	bx	lr
 80111b4:	2000170c 	.word	0x2000170c

080111b8 <_exit>:
 80111b8:	e7fe      	b.n	80111b8 <_exit>
	...

080111bc <_init>:
 80111bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111be:	bf00      	nop
 80111c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111c2:	bc08      	pop	{r3}
 80111c4:	469e      	mov	lr, r3
 80111c6:	4770      	bx	lr

080111c8 <_fini>:
 80111c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111ca:	bf00      	nop
 80111cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111ce:	bc08      	pop	{r3}
 80111d0:	469e      	mov	lr, r3
 80111d2:	4770      	bx	lr
