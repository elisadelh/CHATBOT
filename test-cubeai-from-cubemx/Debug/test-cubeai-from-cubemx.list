
test-cubeai-from-cubemx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015314  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ff80  080154e8  080154e8  000254e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025468  08025468  00040878  2**0
                  CONTENTS
  4 .ARM          00000008  08025468  08025468  00035468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025470  08025470  00040878  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025470  08025470  00035470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025474  08025474  00035474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000878  20000000  08025478  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013e8  20000878  08025cf0  00040878  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20001c60  08025cf0  00041c60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040878  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a680  00000000  00000000  000408a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006ed0  00000000  00000000  0007af28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002938  00000000  00000000  00081df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002668  00000000  00000000  00084730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000356a2  00000000  00000000  00086d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035816  00000000  00000000  000bc43a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012d853  00000000  00000000  000f1c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  0021f4a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c2f8  00000000  00000000  0021f574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0022b86c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0022b938  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000878 	.word	0x20000878
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080154cc 	.word	0x080154cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000087c 	.word	0x2000087c
 800020c:	080154cc 	.word	0x080154cc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c1c:	f000 b96e 	b.w	8000efc <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468c      	mov	ip, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 8083 	bne.w	8000d4e <__udivmoddi4+0x116>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d947      	bls.n	8000cde <__udivmoddi4+0xa6>
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	b142      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	f1c2 0020 	rsb	r0, r2, #32
 8000c58:	fa24 f000 	lsr.w	r0, r4, r0
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4097      	lsls	r7, r2
 8000c60:	ea40 0c01 	orr.w	ip, r0, r1
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c70:	fa1f fe87 	uxth.w	lr, r7
 8000c74:	fb08 c116 	mls	r1, r8, r6, ip
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c8a:	f080 8119 	bcs.w	8000ec0 <__udivmoddi4+0x288>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8116 	bls.w	8000ec0 <__udivmoddi4+0x288>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	443b      	add	r3, r7
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cb6:	f080 8105 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000cba:	45a6      	cmp	lr, r4
 8000cbc:	f240 8102 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	443c      	add	r4, r7
 8000cc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc8:	eba4 040e 	sub.w	r4, r4, lr
 8000ccc:	2600      	movs	r6, #0
 8000cce:	b11d      	cbz	r5, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	b902      	cbnz	r2, 8000ce2 <__udivmoddi4+0xaa>
 8000ce0:	deff      	udf	#255	; 0xff
 8000ce2:	fab2 f282 	clz	r2, r2
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	d150      	bne.n	8000d8c <__udivmoddi4+0x154>
 8000cea:	1bcb      	subs	r3, r1, r7
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa1f f887 	uxth.w	r8, r7
 8000cf4:	2601      	movs	r6, #1
 8000cf6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cfa:	0c21      	lsrs	r1, r4, #16
 8000cfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d04:	fb08 f30c 	mul.w	r3, r8, ip
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000d0c:	1879      	adds	r1, r7, r1
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0xe2>
 8000d14:	428b      	cmp	r3, r1
 8000d16:	f200 80e9 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1ac9      	subs	r1, r1, r3
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x10c>
 8000d34:	193c      	adds	r4, r7, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x10a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80d9 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e7bf      	b.n	8000cce <__udivmoddi4+0x96>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x12e>
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	f000 80b1 	beq.w	8000eba <__udivmoddi4+0x282>
 8000d58:	2600      	movs	r6, #0
 8000d5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5e:	4630      	mov	r0, r6
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f683 	clz	r6, r3
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d14a      	bne.n	8000e04 <__udivmoddi4+0x1cc>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0x140>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80b8 	bhi.w	8000ee8 <__udivmoddi4+0x2b0>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	468c      	mov	ip, r1
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d0a8      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f603 	lsr.w	r6, r0, r3
 8000d94:	4097      	lsls	r7, r2
 8000d96:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9e:	40d9      	lsrs	r1, r3
 8000da0:	4330      	orrs	r0, r6
 8000da2:	0c03      	lsrs	r3, r0, #16
 8000da4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000da8:	fa1f f887 	uxth.w	r8, r7
 8000dac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb06 f108 	mul.w	r1, r6, r8
 8000db8:	4299      	cmp	r1, r3
 8000dba:	fa04 f402 	lsl.w	r4, r4, r2
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x19c>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000dc6:	f080 808d 	bcs.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 808a 	bls.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b281      	uxth	r1, r0
 8000dd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ddc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb00 f308 	mul.w	r3, r0, r8
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x1c4>
 8000dec:	1879      	adds	r1, r7, r1
 8000dee:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000df2:	d273      	bcs.n	8000edc <__udivmoddi4+0x2a4>
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d971      	bls.n	8000edc <__udivmoddi4+0x2a4>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4439      	add	r1, r7
 8000dfc:	1acb      	subs	r3, r1, r3
 8000dfe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e02:	e778      	b.n	8000cf6 <__udivmoddi4+0xbe>
 8000e04:	f1c6 0c20 	rsb	ip, r6, #32
 8000e08:	fa03 f406 	lsl.w	r4, r3, r6
 8000e0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e10:	431c      	orrs	r4, r3
 8000e12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e16:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e22:	431f      	orrs	r7, r3
 8000e24:	0c3b      	lsrs	r3, r7, #16
 8000e26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2a:	fa1f f884 	uxth.w	r8, r4
 8000e2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e36:	fb09 fa08 	mul.w	sl, r9, r8
 8000e3a:	458a      	cmp	sl, r1
 8000e3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e40:	fa00 f306 	lsl.w	r3, r0, r6
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x220>
 8000e46:	1861      	adds	r1, r4, r1
 8000e48:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e4c:	d248      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	d946      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4421      	add	r1, r4
 8000e58:	eba1 010a 	sub.w	r1, r1, sl
 8000e5c:	b2bf      	uxth	r7, r7
 8000e5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e6a:	fb00 f808 	mul.w	r8, r0, r8
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x24a>
 8000e72:	19e7      	adds	r7, r4, r7
 8000e74:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e78:	d22e      	bcs.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7a:	45b8      	cmp	r8, r7
 8000e7c:	d92c      	bls.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4427      	add	r7, r4
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	eba7 0708 	sub.w	r7, r7, r8
 8000e8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8e:	454f      	cmp	r7, r9
 8000e90:	46c6      	mov	lr, r8
 8000e92:	4649      	mov	r1, r9
 8000e94:	d31a      	bcc.n	8000ecc <__udivmoddi4+0x294>
 8000e96:	d017      	beq.n	8000ec8 <__udivmoddi4+0x290>
 8000e98:	b15d      	cbz	r5, 8000eb2 <__udivmoddi4+0x27a>
 8000e9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000ea2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ea6:	40f2      	lsrs	r2, r6
 8000ea8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eac:	40f7      	lsrs	r7, r6
 8000eae:	e9c5 2700 	strd	r2, r7, [r5]
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e70b      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6fd      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ec8:	4543      	cmp	r3, r8
 8000eca:	d2e5      	bcs.n	8000e98 <__udivmoddi4+0x260>
 8000ecc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7df      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e7d2      	b.n	8000e82 <__udivmoddi4+0x24a>
 8000edc:	4660      	mov	r0, ip
 8000ede:	e78d      	b.n	8000dfc <__udivmoddi4+0x1c4>
 8000ee0:	4681      	mov	r9, r0
 8000ee2:	e7b9      	b.n	8000e58 <__udivmoddi4+0x220>
 8000ee4:	4666      	mov	r6, ip
 8000ee6:	e775      	b.n	8000dd4 <__udivmoddi4+0x19c>
 8000ee8:	4630      	mov	r0, r6
 8000eea:	e74a      	b.n	8000d82 <__udivmoddi4+0x14a>
 8000eec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef0:	4439      	add	r1, r7
 8000ef2:	e713      	b.n	8000d1c <__udivmoddi4+0xe4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	443c      	add	r4, r7
 8000ef8:	e724      	b.n	8000d44 <__udivmoddi4+0x10c>
 8000efa:	bf00      	nop

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f04:	f3bf 8f4f 	dsb	sy
}
 8000f08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0a:	f3bf 8f6f 	isb	sy
}
 8000f0e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f10:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <SCB_EnableICache+0x48>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f18:	f3bf 8f4f 	dsb	sy
}
 8000f1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f1e:	f3bf 8f6f 	isb	sy
}
 8000f22:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <SCB_EnableICache+0x48>)
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <SCB_EnableICache+0x48>)
 8000f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f30:	f3bf 8f4f 	dsb	sy
}
 8000f34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f36:	f3bf 8f6f 	isb	sy
}
 8000f3a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000f52:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <SCB_EnableDCache+0x84>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f5a:	f3bf 8f4f 	dsb	sy
}
 8000f5e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <SCB_EnableDCache+0x84>)
 8000f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f66:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	0b5b      	lsrs	r3, r3, #13
 8000f6c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f70:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	08db      	lsrs	r3, r3, #3
 8000f76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f7a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	015a      	lsls	r2, r3, #5
 8000f80:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000f84:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f8a:	4911      	ldr	r1, [pc, #68]	; (8000fd0 <SCB_EnableDCache+0x84>)
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1e5a      	subs	r2, r3, #1
 8000f96:	60ba      	str	r2, [r7, #8]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1ef      	bne.n	8000f7c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	1e5a      	subs	r2, r3, #1
 8000fa0:	60fa      	str	r2, [r7, #12]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1e5      	bne.n	8000f72 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa6:	f3bf 8f4f 	dsb	sy
}
 8000faa:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <SCB_EnableDCache+0x84>)
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <SCB_EnableDCache+0x84>)
 8000fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fb8:	f3bf 8f4f 	dsb	sy
}
 8000fbc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fbe:	f3bf 8f6f 	isb	sy
}
 8000fc2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fd8:	f5ad 5db2 	sub.w	sp, sp, #5696	; 0x1640
 8000fdc:	b084      	sub	sp, #16
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  char buf[50];
  int buf_len = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f241 6218 	movw	r2, #5656	; 0x1618
 8000fe6:	443a      	add	r2, r7
 8000fe8:	6013      	str	r3, [r2, #0]
  ai_i32 nbatch;
  uint32_t timestamp;


  //définitin du message de test
  char message_test[1][15] = {"tu es libre?"}; //sous forme d'array pour l'instant, à voir
 8000fea:	4bb8      	ldr	r3, [pc, #736]	; (80012cc <main+0x2f8>)
 8000fec:	f241 54b8 	movw	r4, #5560	; 0x15b8
 8000ff0:	443c      	add	r4, r7
 8000ff2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ff4:	c407      	stmia	r4!, {r0, r1, r2}
 8000ff6:	8023      	strh	r3, [r4, #0]
 8000ff8:	3402      	adds	r4, #2
 8000ffa:	0c1b      	lsrs	r3, r3, #16
 8000ffc:	7023      	strb	r3, [r4, #0]
  // Buffers used to store input and output tensors
  AI_ALIGNED(4) ai_i8 in_data[AI_CHATBOT_IN_1_SIZE_BYTES];
  AI_ALIGNED(4) ai_i8 out_data[AI_CHATBOT_OUT_1_SIZE_BYTES];

  // Pointer to our model
  ai_handle chatbot = AI_HANDLE_NULL;
 8000ffe:	f241 13b8 	movw	r3, #4536	; 0x11b8
 8001002:	443b      	add	r3, r7
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]

  // Initialize wrapper structs that hold pointers to data and info about the
  // data (tensor height, width, channels)
  ai_buffer ai_input[AI_CHATBOT_IN_NUM] = AI_CHATBOT_IN;
 8001008:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 800100c:	4ab0      	ldr	r2, [pc, #704]	; (80012d0 <main+0x2fc>)
 800100e:	461c      	mov	r4, r3
 8001010:	4615      	mov	r5, r2
 8001012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001016:	e895 0003 	ldmia.w	r5, {r0, r1}
 800101a:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_buffer ai_output[AI_CHATBOT_OUT_NUM] = AI_CHATBOT_OUT;
 800101e:	f241 1388 	movw	r3, #4488	; 0x1188
 8001022:	443b      	add	r3, r7
 8001024:	4aab      	ldr	r2, [pc, #684]	; (80012d4 <main+0x300>)
 8001026:	461c      	mov	r4, r3
 8001028:	4615      	mov	r5, r2
 800102a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001032:	e884 0003 	stmia.w	r4, {r0, r1}

  // Set working memory and get weights/biases from model
  ai_network_params ai_params = {
 8001036:	f241 1358 	movw	r3, #4440	; 0x1158
 800103a:	443b      	add	r3, r7
 800103c:	4aa6      	ldr	r2, [pc, #664]	; (80012d8 <main+0x304>)
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	f241 1358 	movw	r3, #4440	; 0x1158
 8001044:	443b      	add	r3, r7
 8001046:	2201      	movs	r2, #1
 8001048:	809a      	strh	r2, [r3, #4]
 800104a:	f241 1358 	movw	r3, #4440	; 0x1158
 800104e:	443b      	add	r3, r7
 8001050:	2201      	movs	r2, #1
 8001052:	80da      	strh	r2, [r3, #6]
 8001054:	f241 1358 	movw	r3, #4440	; 0x1158
 8001058:	443b      	add	r3, r7
 800105a:	2201      	movs	r2, #1
 800105c:	811a      	strh	r2, [r3, #8]
 800105e:	f241 1358 	movw	r3, #4440	; 0x1158
 8001062:	443b      	add	r3, r7
 8001064:	f64e 7218 	movw	r2, #61208	; 0xef18
 8001068:	60da      	str	r2, [r3, #12]
    AI_CHATBOT_DATA_WEIGHTS(ai_chatbot_data_weights_get()),
 800106a:	f00f fd49 	bl	8010b00 <ai_chatbot_data_weights_get>
 800106e:	4602      	mov	r2, r0
  ai_network_params ai_params = {
 8001070:	f241 1358 	movw	r3, #4440	; 0x1158
 8001074:	443b      	add	r3, r7
 8001076:	611a      	str	r2, [r3, #16]
 8001078:	f241 1358 	movw	r3, #4440	; 0x1158
 800107c:	443b      	add	r3, r7
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
 8001082:	f241 1358 	movw	r3, #4440	; 0x1158
 8001086:	443b      	add	r3, r7
 8001088:	4a94      	ldr	r2, [pc, #592]	; (80012dc <main+0x308>)
 800108a:	619a      	str	r2, [r3, #24]
 800108c:	f241 1358 	movw	r3, #4440	; 0x1158
 8001090:	443b      	add	r3, r7
 8001092:	2201      	movs	r2, #1
 8001094:	839a      	strh	r2, [r3, #28]
 8001096:	f241 1358 	movw	r3, #4440	; 0x1158
 800109a:	443b      	add	r3, r7
 800109c:	2201      	movs	r2, #1
 800109e:	83da      	strh	r2, [r3, #30]
 80010a0:	f241 1358 	movw	r3, #4440	; 0x1158
 80010a4:	443b      	add	r3, r7
 80010a6:	2201      	movs	r2, #1
 80010a8:	841a      	strh	r2, [r3, #32]
 80010aa:	f241 1358 	movw	r3, #4440	; 0x1158
 80010ae:	443b      	add	r3, r7
 80010b0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
 80010b6:	f241 1358 	movw	r3, #4440	; 0x1158
 80010ba:	443b      	add	r3, r7
 80010bc:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28
 80010c2:	f241 1358 	movw	r3, #4440	; 0x1158
 80010c6:	443b      	add	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	62da      	str	r2, [r3, #44]	; 0x2c
    AI_CHATBOT_DATA_ACTIVATIONS(activations)
  };


  // Set pointers wrapper structs to our data buffers
  ai_input[0].n_batches = 1;
 80010cc:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80010d0:	2201      	movs	r2, #1
 80010d2:	809a      	strh	r2, [r3, #4]
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 80010d4:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80010d8:	f241 12d4 	movw	r2, #4564	; 0x11d4
 80010dc:	443a      	add	r2, r7
 80010de:	611a      	str	r2, [r3, #16]
  ai_output[0].n_batches = 1;
 80010e0:	f241 1388 	movw	r3, #4488	; 0x1188
 80010e4:	443b      	add	r3, r7
 80010e6:	2201      	movs	r2, #1
 80010e8:	809a      	strh	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 80010ea:	f241 1388 	movw	r3, #4488	; 0x1188
 80010ee:	443b      	add	r3, r7
 80010f0:	f241 12bc 	movw	r2, #4540	; 0x11bc
 80010f4:	443a      	add	r2, r7
 80010f6:	611a      	str	r2, [r3, #16]

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80010f8:	f7ff ff02 	bl	8000f00 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80010fc:	f7ff ff26 	bl	8000f4c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001100:	f003 f813 	bl	800412a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001104:	f000 feca 	bl	8001e9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001108:	f001 fe7e 	bl	8002e08 <MX_GPIO_Init>
  MX_ADC3_Init();
 800110c:	f000 ff86 	bl	800201c <MX_ADC3_Init>
  MX_CRC_Init();
 8001110:	f000 ffd6 	bl	80020c0 <MX_CRC_Init>
  MX_DCMI_Init();
 8001114:	f000 fff6 	bl	8002104 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001118:	f001 f828 	bl	800216c <MX_DMA2D_Init>
  //MX_ETH_Init();
  MX_FMC_Init();
 800111c:	f001 fe24 	bl	8002d68 <MX_FMC_Init>
  MX_I2C1_Init();
 8001120:	f001 f856 	bl	80021d0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001124:	f001 f894 	bl	8002250 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001128:	f001 f8d2 	bl	80022d0 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800112c:	f001 f952 	bl	80023d4 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001130:	f001 f97c 	bl	800242c <MX_RTC_Init>
  MX_SAI2_Init();
 8001134:	f001 fa20 	bl	8002578 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001138:	f001 fac6 	bl	80026c8 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 800113c:	f001 fae4 	bl	8002708 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 8001140:	f001 fb12 	bl	8002768 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001144:	f001 fbbc 	bl	80028c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001148:	f001 fc30 	bl	80029ac <MX_TIM3_Init>
  MX_TIM5_Init();
 800114c:	f001 fca6 	bl	8002a9c <MX_TIM5_Init>
  MX_TIM8_Init();
 8001150:	f001 fd1c 	bl	8002b8c <MX_TIM8_Init>
  MX_TIM12_Init();
 8001154:	f001 fd6e 	bl	8002c34 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001158:	f001 fda6 	bl	8002ca8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800115c:	f001 fdd4 	bl	8002d08 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001160:	f00c ffb4 	bl	800e0cc <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001164:	f00f f8a0 	bl	80102a8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

    // Start timer/counter
    HAL_TIM_Base_Start(&htim12);
 8001168:	485d      	ldr	r0, [pc, #372]	; (80012e0 <main+0x30c>)
 800116a:	f009 fe0d 	bl	800ad88 <HAL_TIM_Base_Start>

    // Greetings!
    buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 800116e:	f241 53cc 	movw	r3, #5580	; 0x15cc
 8001172:	443b      	add	r3, r7
 8001174:	495b      	ldr	r1, [pc, #364]	; (80012e4 <main+0x310>)
 8001176:	4618      	mov	r0, r3
 8001178:	f011 feec 	bl	8012f54 <siprintf>
 800117c:	f241 6318 	movw	r3, #5656	; 0x1618
 8001180:	443b      	add	r3, r7
 8001182:	6018      	str	r0, [r3, #0]
    HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 8001184:	f241 6318 	movw	r3, #5656	; 0x1618
 8001188:	443b      	add	r3, r7
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	b29a      	uxth	r2, r3
 800118e:	f241 51cc 	movw	r1, #5580	; 0x15cc
 8001192:	4439      	add	r1, r7
 8001194:	2364      	movs	r3, #100	; 0x64
 8001196:	4854      	ldr	r0, [pc, #336]	; (80012e8 <main+0x314>)
 8001198:	f00a fd90 	bl	800bcbc <HAL_UART_Transmit>

    // Create instance of neural network
    ai_err = ai_chatbot_create(&chatbot, AI_CHATBOT_DATA_CONFIG);
 800119c:	f241 13b8 	movw	r3, #4536	; 0x11b8
 80011a0:	443b      	add	r3, r7
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f00f fc45 	bl	8010a34 <ai_chatbot_create>
 80011aa:	4603      	mov	r3, r0
 80011ac:	f241 52c8 	movw	r2, #5576	; 0x15c8
 80011b0:	443a      	add	r2, r7
 80011b2:	6013      	str	r3, [r2, #0]
    if (ai_err.type != AI_ERROR_NONE)
 80011b4:	f241 53c8 	movw	r3, #5576	; 0x15c8
 80011b8:	443b      	add	r3, r7
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d017      	beq.n	80011f0 <main+0x21c>
    {
      buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 80011c0:	f241 53cc 	movw	r3, #5580	; 0x15cc
 80011c4:	443b      	add	r3, r7
 80011c6:	4949      	ldr	r1, [pc, #292]	; (80012ec <main+0x318>)
 80011c8:	4618      	mov	r0, r3
 80011ca:	f011 fec3 	bl	8012f54 <siprintf>
 80011ce:	f241 6318 	movw	r3, #5656	; 0x1618
 80011d2:	443b      	add	r3, r7
 80011d4:	6018      	str	r0, [r3, #0]
      HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 80011d6:	f241 6318 	movw	r3, #5656	; 0x1618
 80011da:	443b      	add	r3, r7
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	b29a      	uxth	r2, r3
 80011e0:	f241 51cc 	movw	r1, #5580	; 0x15cc
 80011e4:	4439      	add	r1, r7
 80011e6:	2364      	movs	r3, #100	; 0x64
 80011e8:	483f      	ldr	r0, [pc, #252]	; (80012e8 <main+0x314>)
 80011ea:	f00a fd67 	bl	800bcbc <HAL_UART_Transmit>
      while(1);
 80011ee:	e7fe      	b.n	80011ee <main+0x21a>
    }

    // Initialize neural network
    if (!ai_chatbot_init(chatbot, &ai_params))
 80011f0:	f241 13b8 	movw	r3, #4536	; 0x11b8
 80011f4:	443b      	add	r3, r7
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f241 1258 	movw	r2, #4440	; 0x1158
 80011fc:	443a      	add	r2, r7
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f00f fc2d 	bl	8010a60 <ai_chatbot_init>
 8001206:	4603      	mov	r3, r0
 8001208:	f083 0301 	eor.w	r3, r3, #1
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d017      	beq.n	8001242 <main+0x26e>
    {
      buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8001212:	f241 53cc 	movw	r3, #5580	; 0x15cc
 8001216:	443b      	add	r3, r7
 8001218:	4935      	ldr	r1, [pc, #212]	; (80012f0 <main+0x31c>)
 800121a:	4618      	mov	r0, r3
 800121c:	f011 fe9a 	bl	8012f54 <siprintf>
 8001220:	f241 6318 	movw	r3, #5656	; 0x1618
 8001224:	443b      	add	r3, r7
 8001226:	6018      	str	r0, [r3, #0]
      HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 8001228:	f241 6318 	movw	r3, #5656	; 0x1618
 800122c:	443b      	add	r3, r7
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	b29a      	uxth	r2, r3
 8001232:	f241 51cc 	movw	r1, #5580	; 0x15cc
 8001236:	4439      	add	r1, r7
 8001238:	2364      	movs	r3, #100	; 0x64
 800123a:	482b      	ldr	r0, [pc, #172]	; (80012e8 <main+0x314>)
 800123c:	f00a fd3e 	bl	800bcbc <HAL_UART_Transmit>
      while(1);
 8001240:	e7fe      	b.n	8001240 <main+0x26c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001242:	f00f f857 	bl	80102f4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    LED_Toggle();
 8001246:	f001 ffb1 	bl	80031ac <LED_Toggle>
    HAL_Delay(500);
 800124a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800124e:	f002 ffc9 	bl	80041e4 <HAL_Delay>

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // ADAPTATION CHATBOT
    //mots de référence
    char words[51][15] = {"adios", "anniversaire", "as-tu", "bye", "c'est", "cafetière", "ce", "cette", "coffee", "comment", "cya", "ensemble", "es-tu", "est", "fais-tu", "fasse", "forme", "hello", "is", "la", "maker", "né", "où", "plan", "pour", "prénom", "qu'on", "quand", "que", "quel", "quels", "qui", "roule", "salut", "see", "semaine", "sont", "t'appelles", "te", "the", "ton", "truc", "tu", "un", "veux", "week-end", "where", "ya", "yo", "âge", "ça"};
 8001252:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8001256:	4a27      	ldr	r2, [pc, #156]	; (80012f4 <main+0x320>)
 8001258:	4618      	mov	r0, r3
 800125a:	4611      	mov	r1, r2
 800125c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001260:	461a      	mov	r2, r3
 8001262:	f011 f8e5 	bl	8012430 <memcpy>

    //bag_of_words - ~encodage de l'entrée
    int bow[51];
    for(int b=0;b<51;b++){
 8001266:	2300      	movs	r3, #0
 8001268:	f241 624c 	movw	r2, #5708	; 0x164c
 800126c:	443a      	add	r2, r7
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	e014      	b.n	800129c <main+0x2c8>
    	bow[b]=0;
 8001272:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <main+0x324>)
 8001274:	f241 6250 	movw	r2, #5712	; 0x1650
 8001278:	443a      	add	r2, r7
 800127a:	4413      	add	r3, r2
 800127c:	f241 624c 	movw	r2, #5708	; 0x164c
 8001280:	443a      	add	r2, r7
 8001282:	6812      	ldr	r2, [r2, #0]
 8001284:	2100      	movs	r1, #0
 8001286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int b=0;b<51;b++){
 800128a:	f241 634c 	movw	r3, #5708	; 0x164c
 800128e:	443b      	add	r3, r7
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	3301      	adds	r3, #1
 8001294:	f241 624c 	movw	r2, #5708	; 0x164c
 8001298:	443a      	add	r2, r7
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	f241 634c 	movw	r3, #5708	; 0x164c
 80012a0:	443b      	add	r3, r7
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b32      	cmp	r3, #50	; 0x32
 80012a6:	dde4      	ble.n	8001272 <main+0x29e>
    }

    int nb_mots = 1; //nb de mots dans le message test (1ere dimension du tableau de message_test)
 80012a8:	2301      	movs	r3, #1
 80012aa:	f241 6214 	movw	r2, #5652	; 0x1614
 80012ae:	443a      	add	r2, r7
 80012b0:	6013      	str	r3, [r2, #0]
    for(int w=0; w<nb_mots;w++){
 80012b2:	2300      	movs	r3, #0
 80012b4:	f241 6248 	movw	r2, #5704	; 0x1648
 80012b8:	443a      	add	r2, r7
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	e05d      	b.n	800137a <main+0x3a6>
		for(int w_ref=0; w_ref<51; w_ref++){
 80012be:	2300      	movs	r3, #0
 80012c0:	f241 6244 	movw	r2, #5700	; 0x1644
 80012c4:	443a      	add	r2, r7
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	e048      	b.n	800135c <main+0x388>
 80012ca:	bf00      	nop
 80012cc:	08015574 	.word	0x08015574
 80012d0:	08015584 	.word	0x08015584
 80012d4:	0801559c 	.word	0x0801559c
 80012d8:	40040440 	.word	0x40040440
 80012dc:	00040440 	.word	0x00040440
 80012e0:	20000ff4 	.word	0x20000ff4
 80012e4:	080154e8 	.word	0x080154e8
 80012e8:	20000ee4 	.word	0x20000ee4
 80012ec:	08015504 	.word	0x08015504
 80012f0:	0801552c 	.word	0x0801552c
 80012f4:	080155b4 	.word	0x080155b4
 80012f8:	ffffea78 	.word	0xffffea78
			if (strcmp(words[w_ref], message_test[w])==0){ bow[w_ref]=1;}
 80012fc:	f507 7124 	add.w	r1, r7, #656	; 0x290
 8001300:	f241 6344 	movw	r3, #5700	; 0x1644
 8001304:	443b      	add	r3, r7
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4613      	mov	r3, r2
 800130a:	011b      	lsls	r3, r3, #4
 800130c:	1a9b      	subs	r3, r3, r2
 800130e:	18c8      	adds	r0, r1, r3
 8001310:	f241 51b8 	movw	r1, #5560	; 0x15b8
 8001314:	4439      	add	r1, r7
 8001316:	f241 6348 	movw	r3, #5704	; 0x1648
 800131a:	443b      	add	r3, r7
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4613      	mov	r3, r2
 8001320:	011b      	lsls	r3, r3, #4
 8001322:	1a9b      	subs	r3, r3, r2
 8001324:	440b      	add	r3, r1
 8001326:	4619      	mov	r1, r3
 8001328:	f7fe ff72 	bl	8000210 <strcmp>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d10b      	bne.n	800134a <main+0x376>
 8001332:	4b5d      	ldr	r3, [pc, #372]	; (80014a8 <main+0x4d4>)
 8001334:	f241 6250 	movw	r2, #5712	; 0x1650
 8001338:	443a      	add	r2, r7
 800133a:	4413      	add	r3, r2
 800133c:	f241 6244 	movw	r2, #5700	; 0x1644
 8001340:	443a      	add	r2, r7
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	2101      	movs	r1, #1
 8001346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(int w_ref=0; w_ref<51; w_ref++){
 800134a:	f241 6344 	movw	r3, #5700	; 0x1644
 800134e:	443b      	add	r3, r7
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	3301      	adds	r3, #1
 8001354:	f241 6244 	movw	r2, #5700	; 0x1644
 8001358:	443a      	add	r2, r7
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	f241 6344 	movw	r3, #5700	; 0x1644
 8001360:	443b      	add	r3, r7
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b32      	cmp	r3, #50	; 0x32
 8001366:	ddc9      	ble.n	80012fc <main+0x328>
    for(int w=0; w<nb_mots;w++){
 8001368:	f241 6348 	movw	r3, #5704	; 0x1648
 800136c:	443b      	add	r3, r7
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	3301      	adds	r3, #1
 8001372:	f241 6248 	movw	r2, #5704	; 0x1648
 8001376:	443a      	add	r2, r7
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	f241 6348 	movw	r3, #5704	; 0x1648
 800137e:	443b      	add	r3, r7
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	f241 6314 	movw	r3, #5652	; 0x1614
 8001386:	443b      	add	r3, r7
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	db97      	blt.n	80012be <main+0x2ea>
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    // Fill input buffer (use test value)
  	for (uint32_t i = 0; i < AI_CHATBOT_IN_1_SIZE; i++)
 800138e:	2300      	movs	r3, #0
 8001390:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	e019      	b.n	80013cc <main+0x3f8>
  	{
  	  ((ai_int *)in_data)[i] = (ai_int)(bow[i]); //remplissage avec l'encodage du message test
 8001398:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	f241 12d4 	movw	r2, #4564	; 0x11d4
 80013a4:	443a      	add	r2, r7
 80013a6:	441a      	add	r2, r3
 80013a8:	4b3f      	ldr	r3, [pc, #252]	; (80014a8 <main+0x4d4>)
 80013aa:	f241 6150 	movw	r1, #5712	; 0x1650
 80013ae:	4439      	add	r1, r7
 80013b0:	440b      	add	r3, r1
 80013b2:	f507 51b2 	add.w	r1, r7, #5696	; 0x1640
 80013b6:	6809      	ldr	r1, [r1, #0]
 80013b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80013bc:	6013      	str	r3, [r2, #0]
  	for (uint32_t i = 0; i < AI_CHATBOT_IN_1_SIZE; i++)
 80013be:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b32      	cmp	r3, #50	; 0x32
 80013d4:	d9e0      	bls.n	8001398 <main+0x3c4>
  	  //test += 0.1; //pour sinus, pas nécessaire pour chatbot
  	}

  	// Get current timestamp
  	timestamp = htim12.Instance->CNT;
 80013d6:	4b35      	ldr	r3, [pc, #212]	; (80014ac <main+0x4d8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	f241 6210 	movw	r2, #5648	; 0x1610
 80013e0:	443a      	add	r2, r7
 80013e2:	6013      	str	r3, [r2, #0]

	// Perform inference
	nbatch = ai_chatbot_run(chatbot, &ai_input[0], &ai_output[0]);
 80013e4:	f241 13b8 	movw	r3, #4536	; 0x11b8
 80013e8:	443b      	add	r3, r7
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f241 1288 	movw	r2, #4488	; 0x1188
 80013f0:	443a      	add	r2, r7
 80013f2:	f507 518d 	add.w	r1, r7, #4512	; 0x11a0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f00f fb71 	bl	8010ade <ai_chatbot_run>
 80013fc:	f241 630c 	movw	r3, #5644	; 0x160c
 8001400:	443b      	add	r3, r7
 8001402:	6018      	str	r0, [r3, #0]
	if (nbatch != 1) {
 8001404:	f241 630c 	movw	r3, #5644	; 0x160c
 8001408:	443b      	add	r3, r7
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d016      	beq.n	800143e <main+0x46a>
	  buf_len = sprintf(buf, "Error: could not run inference\r\n");
 8001410:	f241 53cc 	movw	r3, #5580	; 0x15cc
 8001414:	443b      	add	r3, r7
 8001416:	4926      	ldr	r1, [pc, #152]	; (80014b0 <main+0x4dc>)
 8001418:	4618      	mov	r0, r3
 800141a:	f011 fd9b 	bl	8012f54 <siprintf>
 800141e:	f241 6318 	movw	r3, #5656	; 0x1618
 8001422:	443b      	add	r3, r7
 8001424:	6018      	str	r0, [r3, #0]
	  HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 8001426:	f241 6318 	movw	r3, #5656	; 0x1618
 800142a:	443b      	add	r3, r7
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	b29a      	uxth	r2, r3
 8001430:	f241 51cc 	movw	r1, #5580	; 0x15cc
 8001434:	4439      	add	r1, r7
 8001436:	2364      	movs	r3, #100	; 0x64
 8001438:	481e      	ldr	r0, [pc, #120]	; (80014b4 <main+0x4e0>)
 800143a:	f00a fc3f 	bl	800bcbc <HAL_UART_Transmit>

	// Read output (predicted y) of neural network
	//y_val = ((char *)out_data)[0];

	//Récupération de l'output du modèle : toutes les valeurs (les probas de chaque classe)
	for (uint32_t i = 0; i < AI_CHATBOT_OUT_1_SIZE; i++)
 800143e:	2300      	movs	r3, #0
 8001440:	f241 623c 	movw	r2, #5692	; 0x163c
 8001444:	443a      	add	r2, r7
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	e01b      	b.n	8001482 <main+0x4ae>
	  	{
	  	  ((ai_float *)proba_classes)[i] = ((ai_float *)out_data)[i];
 800144a:	f241 633c 	movw	r3, #5692	; 0x163c
 800144e:	443b      	add	r3, r7
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	f241 12bc 	movw	r2, #4540	; 0x11bc
 8001458:	443a      	add	r2, r7
 800145a:	441a      	add	r2, r3
 800145c:	f241 633c 	movw	r3, #5692	; 0x163c
 8001460:	443b      	add	r3, r7
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	f507 51ad 	add.w	r1, r7, #5536	; 0x15a0
 800146a:	440b      	add	r3, r1
 800146c:	6812      	ldr	r2, [r2, #0]
 800146e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < AI_CHATBOT_OUT_1_SIZE; i++)
 8001470:	f241 633c 	movw	r3, #5692	; 0x163c
 8001474:	443b      	add	r3, r7
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	3301      	adds	r3, #1
 800147a:	f241 623c 	movw	r2, #5692	; 0x163c
 800147e:	443a      	add	r2, r7
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	f241 633c 	movw	r3, #5692	; 0x163c
 8001486:	443b      	add	r3, r7
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b05      	cmp	r3, #5
 800148c:	d9dd      	bls.n	800144a <main+0x476>
	  	}

	int pred_class; //max des probas pour prédire la classe correcte
	ai_float max = proba_classes[0];
 800148e:	f507 53ad 	add.w	r3, r7, #5536	; 0x15a0
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f241 6234 	movw	r2, #5684	; 0x1634
 8001498:	443a      	add	r2, r7
 800149a:	6013      	str	r3, [r2, #0]
	for (uint32_t i = 0; i < AI_CHATBOT_OUT_1_SIZE; i++)
 800149c:	2300      	movs	r3, #0
 800149e:	f241 6230 	movw	r2, #5680	; 0x1630
 80014a2:	443a      	add	r2, r7
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	e03d      	b.n	8001524 <main+0x550>
 80014a8:	ffffea78 	.word	0xffffea78
 80014ac:	20000ff4 	.word	0x20000ff4
 80014b0:	08015550 	.word	0x08015550
 80014b4:	20000ee4 	.word	0x20000ee4
		{
		  if(proba_classes[i]>max){
 80014b8:	f241 6330 	movw	r3, #5680	; 0x1630
 80014bc:	443b      	add	r3, r7
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	f241 6250 	movw	r2, #5712	; 0x1650
 80014c6:	443a      	add	r2, r7
 80014c8:	4413      	add	r3, r2
 80014ca:	3bb0      	subs	r3, #176	; 0xb0
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	f241 6334 	movw	r3, #5684	; 0x1634
 80014d4:	443b      	add	r3, r7
 80014d6:	ed93 7a00 	vldr	s14, [r3]
 80014da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e2:	d516      	bpl.n	8001512 <main+0x53e>
			  max = proba_classes[i];
 80014e4:	f241 6330 	movw	r3, #5680	; 0x1630
 80014e8:	443b      	add	r3, r7
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	f241 6250 	movw	r2, #5712	; 0x1650
 80014f2:	443a      	add	r2, r7
 80014f4:	4413      	add	r3, r2
 80014f6:	3bb0      	subs	r3, #176	; 0xb0
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f241 6234 	movw	r2, #5684	; 0x1634
 80014fe:	443a      	add	r2, r7
 8001500:	6013      	str	r3, [r2, #0]
			  pred_class = i;
 8001502:	f241 6330 	movw	r3, #5680	; 0x1630
 8001506:	443b      	add	r3, r7
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f241 6238 	movw	r2, #5688	; 0x1638
 800150e:	443a      	add	r2, r7
 8001510:	6013      	str	r3, [r2, #0]
	for (uint32_t i = 0; i < AI_CHATBOT_OUT_1_SIZE; i++)
 8001512:	f241 6330 	movw	r3, #5680	; 0x1630
 8001516:	443b      	add	r3, r7
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	3301      	adds	r3, #1
 800151c:	f241 6230 	movw	r2, #5680	; 0x1630
 8001520:	443a      	add	r2, r7
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	f241 6330 	movw	r3, #5680	; 0x1630
 8001528:	443b      	add	r3, r7
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b05      	cmp	r3, #5
 800152e:	d9c3      	bls.n	80014b8 <main+0x4e4>
	//Creation du dictionnaire
	//6 : nombre de tags (catégories)
	//10 : longueur des tags
	//3 : nombre d'exemples pour chaque tags
	//50 : longueur des phrases exemples
	char tag[6][15] = {"greeting", "age", "date", "name", "goodbye", "object_location"};
 8001530:	4bda      	ldr	r3, [pc, #872]	; (800189c <main+0x8c8>)
 8001532:	f241 6250 	movw	r2, #5712	; 0x1650
 8001536:	443a      	add	r2, r7
 8001538:	4413      	add	r3, r2
 800153a:	4ad9      	ldr	r2, [pc, #868]	; (80018a0 <main+0x8cc>)
 800153c:	4618      	mov	r0, r3
 800153e:	4611      	mov	r1, r2
 8001540:	235a      	movs	r3, #90	; 0x5a
 8001542:	461a      	mov	r2, r3
 8001544:	f010 ff74 	bl	8012430 <memcpy>
	char patterns[6][5][50] = {{"Hello", "La forme?", "Salut", "yo", "ça roule?"},
 8001548:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800154c:	4618      	mov	r0, r3
 800154e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001552:	461a      	mov	r2, r3
 8001554:	2100      	movs	r1, #0
 8001556:	f010 ff79 	bl	801244c <memset>
 800155a:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 800155e:	49d1      	ldr	r1, [pc, #836]	; (80018a4 <main+0x8d0>)
 8001560:	4613      	mov	r3, r2
 8001562:	c903      	ldmia	r1, {r0, r1}
 8001564:	6018      	str	r0, [r3, #0]
 8001566:	3304      	adds	r3, #4
 8001568:	8019      	strh	r1, [r3, #0]
 800156a:	1d93      	adds	r3, r2, #6
 800156c:	222c      	movs	r2, #44	; 0x2c
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f010 ff6b 	bl	801244c <memset>
 8001576:	f507 64b2 	add.w	r4, r7, #1424	; 0x590
 800157a:	4bcb      	ldr	r3, [pc, #812]	; (80018a8 <main+0x8d4>)
 800157c:	f104 0232 	add.w	r2, r4, #50	; 0x32
 8001580:	cb03      	ldmia	r3!, {r0, r1}
 8001582:	6010      	str	r0, [r2, #0]
 8001584:	6051      	str	r1, [r2, #4]
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	8113      	strh	r3, [r2, #8]
 800158a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800158e:	2228      	movs	r2, #40	; 0x28
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f010 ff5a 	bl	801244c <memset>
 8001598:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 800159c:	49c3      	ldr	r1, [pc, #780]	; (80018ac <main+0x8d8>)
 800159e:	f102 0364 	add.w	r3, r2, #100	; 0x64
 80015a2:	c903      	ldmia	r1, {r0, r1}
 80015a4:	6018      	str	r0, [r3, #0]
 80015a6:	3304      	adds	r3, #4
 80015a8:	8019      	strh	r1, [r3, #0]
 80015aa:	f102 036a 	add.w	r3, r2, #106	; 0x6a
 80015ae:	222c      	movs	r2, #44	; 0x2c
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f010 ff4a 	bl	801244c <memset>
 80015b8:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80015bc:	49bc      	ldr	r1, [pc, #752]	; (80018b0 <main+0x8dc>)
 80015be:	f103 0296 	add.w	r2, r3, #150	; 0x96
 80015c2:	8808      	ldrh	r0, [r1, #0]
 80015c4:	7889      	ldrb	r1, [r1, #2]
 80015c6:	8010      	strh	r0, [r2, #0]
 80015c8:	7091      	strb	r1, [r2, #2]
 80015ca:	3399      	adds	r3, #153	; 0x99
 80015cc:	222f      	movs	r2, #47	; 0x2f
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f010 ff3b 	bl	801244c <memset>
 80015d6:	f507 64b2 	add.w	r4, r7, #1424	; 0x590
 80015da:	4ab6      	ldr	r2, [pc, #728]	; (80018b4 <main+0x8e0>)
 80015dc:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
 80015e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80015e2:	c303      	stmia	r3!, {r0, r1}
 80015e4:	801a      	strh	r2, [r3, #0]
 80015e6:	3302      	adds	r3, #2
 80015e8:	0c12      	lsrs	r2, r2, #16
 80015ea:	701a      	strb	r2, [r3, #0]
 80015ec:	f104 03d3 	add.w	r3, r4, #211	; 0xd3
 80015f0:	2227      	movs	r2, #39	; 0x27
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f010 ff29 	bl	801244c <memset>
 80015fa:	f507 66b2 	add.w	r6, r7, #1424	; 0x590
 80015fe:	4bae      	ldr	r3, [pc, #696]	; (80018b8 <main+0x8e4>)
 8001600:	f106 05fa 	add.w	r5, r6, #250	; 0xfa
 8001604:	461c      	mov	r4, r3
 8001606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001608:	6028      	str	r0, [r5, #0]
 800160a:	6069      	str	r1, [r5, #4]
 800160c:	60aa      	str	r2, [r5, #8]
 800160e:	60eb      	str	r3, [r5, #12]
 8001610:	7823      	ldrb	r3, [r4, #0]
 8001612:	742b      	strb	r3, [r5, #16]
 8001614:	f206 130b 	addw	r3, r6, #267	; 0x10b
 8001618:	2221      	movs	r2, #33	; 0x21
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f010 ff15 	bl	801244c <memset>
 8001622:	f507 66b2 	add.w	r6, r7, #1424	; 0x590
 8001626:	4ba5      	ldr	r3, [pc, #660]	; (80018bc <main+0x8e8>)
 8001628:	f506 7496 	add.w	r4, r6, #300	; 0x12c
 800162c:	461d      	mov	r5, r3
 800162e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001632:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001636:	c407      	stmia	r4!, {r0, r1, r2}
 8001638:	8023      	strh	r3, [r4, #0]
 800163a:	f506 73a5 	add.w	r3, r6, #330	; 0x14a
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	611a      	str	r2, [r3, #16]
 800164a:	f507 66b2 	add.w	r6, r7, #1424	; 0x590
 800164e:	4b9c      	ldr	r3, [pc, #624]	; (80018c0 <main+0x8ec>)
 8001650:	f506 75af 	add.w	r5, r6, #350	; 0x15e
 8001654:	461c      	mov	r4, r3
 8001656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001658:	6028      	str	r0, [r5, #0]
 800165a:	6069      	str	r1, [r5, #4]
 800165c:	60aa      	str	r2, [r5, #8]
 800165e:	60eb      	str	r3, [r5, #12]
 8001660:	7823      	ldrb	r3, [r4, #0]
 8001662:	742b      	strb	r3, [r5, #16]
 8001664:	f206 136f 	addw	r3, r6, #367	; 0x16f
 8001668:	2221      	movs	r2, #33	; 0x21
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f010 feed 	bl	801244c <memset>
 8001672:	f507 66b2 	add.w	r6, r7, #1424	; 0x590
 8001676:	4b93      	ldr	r3, [pc, #588]	; (80018c4 <main+0x8f0>)
 8001678:	f506 74fa 	add.w	r4, r6, #500	; 0x1f4
 800167c:	461d      	mov	r5, r3
 800167e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001682:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001686:	c403      	stmia	r4!, {r0, r1}
 8001688:	7022      	strb	r2, [r4, #0]
 800168a:	f206 230d 	addw	r3, r6, #525	; 0x20d
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
 8001698:	611a      	str	r2, [r3, #16]
 800169a:	615a      	str	r2, [r3, #20]
 800169c:	761a      	strb	r2, [r3, #24]
 800169e:	f507 6eb2 	add.w	lr, r7, #1424	; 0x590
 80016a2:	4b89      	ldr	r3, [pc, #548]	; (80018c8 <main+0x8f4>)
 80016a4:	461c      	mov	r4, r3
 80016a6:	f20e 2c26 	addw	ip, lr, #550	; 0x226
 80016aa:	f104 0820 	add.w	r8, r4, #32
 80016ae:	4665      	mov	r5, ip
 80016b0:	4626      	mov	r6, r4
 80016b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80016b4:	6028      	str	r0, [r5, #0]
 80016b6:	6069      	str	r1, [r5, #4]
 80016b8:	60aa      	str	r2, [r5, #8]
 80016ba:	60eb      	str	r3, [r5, #12]
 80016bc:	3410      	adds	r4, #16
 80016be:	f10c 0c10 	add.w	ip, ip, #16
 80016c2:	4544      	cmp	r4, r8
 80016c4:	d1f3      	bne.n	80016ae <main+0x6da>
 80016c6:	4663      	mov	r3, ip
 80016c8:	4622      	mov	r2, r4
 80016ca:	6810      	ldr	r0, [r2, #0]
 80016cc:	6018      	str	r0, [r3, #0]
 80016ce:	8892      	ldrh	r2, [r2, #4]
 80016d0:	809a      	strh	r2, [r3, #4]
 80016d2:	f50e 7313 	add.w	r3, lr, #588	; 0x24c
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	f507 66b2 	add.w	r6, r7, #1424	; 0x590
 80016e2:	4b7a      	ldr	r3, [pc, #488]	; (80018cc <main+0x8f8>)
 80016e4:	f506 7416 	add.w	r4, r6, #600	; 0x258
 80016e8:	461d      	mov	r5, r3
 80016ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80016f6:	e884 0003 	stmia.w	r4, {r0, r1}
 80016fa:	f506 7320 	add.w	r3, r6, #640	; 0x280
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	811a      	strh	r2, [r3, #8]
 8001706:	f507 66b2 	add.w	r6, r7, #1424	; 0x590
 800170a:	4b71      	ldr	r3, [pc, #452]	; (80018d0 <main+0x8fc>)
 800170c:	f206 25ee 	addw	r5, r6, #750	; 0x2ee
 8001710:	461c      	mov	r4, r3
 8001712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001714:	6028      	str	r0, [r5, #0]
 8001716:	6069      	str	r1, [r5, #4]
 8001718:	60aa      	str	r2, [r5, #8]
 800171a:	60eb      	str	r3, [r5, #12]
 800171c:	6820      	ldr	r0, [r4, #0]
 800171e:	6128      	str	r0, [r5, #16]
 8001720:	88a3      	ldrh	r3, [r4, #4]
 8001722:	82ab      	strh	r3, [r5, #20]
 8001724:	f506 7341 	add.w	r3, r6, #772	; 0x304
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
 8001734:	615a      	str	r2, [r3, #20]
 8001736:	619a      	str	r2, [r3, #24]
 8001738:	f507 66b2 	add.w	r6, r7, #1424	; 0x590
 800173c:	4b65      	ldr	r3, [pc, #404]	; (80018d4 <main+0x900>)
 800173e:	f506 7448 	add.w	r4, r6, #800	; 0x320
 8001742:	461d      	mov	r5, r3
 8001744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001748:	e895 0003 	ldmia.w	r5, {r0, r1}
 800174c:	6020      	str	r0, [r4, #0]
 800174e:	3404      	adds	r4, #4
 8001750:	8021      	strh	r1, [r4, #0]
 8001752:	3402      	adds	r4, #2
 8001754:	0c0b      	lsrs	r3, r1, #16
 8001756:	7023      	strb	r3, [r4, #0]
 8001758:	f206 3337 	addw	r3, r6, #823	; 0x337
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
 8001768:	615a      	str	r2, [r3, #20]
 800176a:	f8c3 2017 	str.w	r2, [r3, #23]
 800176e:	f507 64b2 	add.w	r4, r7, #1424	; 0x590
 8001772:	4b59      	ldr	r3, [pc, #356]	; (80018d8 <main+0x904>)
 8001774:	f204 3252 	addw	r2, r4, #850	; 0x352
 8001778:	cb03      	ldmia	r3!, {r0, r1}
 800177a:	6010      	str	r0, [r2, #0]
 800177c:	6051      	str	r1, [r2, #4]
 800177e:	8819      	ldrh	r1, [r3, #0]
 8001780:	789b      	ldrb	r3, [r3, #2]
 8001782:	8111      	strh	r1, [r2, #8]
 8001784:	7293      	strb	r3, [r2, #10]
 8001786:	f204 335d 	addw	r3, r4, #861	; 0x35d
 800178a:	2227      	movs	r2, #39	; 0x27
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f010 fe5c 	bl	801244c <memset>
 8001794:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8001798:	4a50      	ldr	r2, [pc, #320]	; (80018dc <main+0x908>)
 800179a:	f8c3 23e8 	str.w	r2, [r3, #1000]	; 0x3e8
 800179e:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 80017a2:	222e      	movs	r2, #46	; 0x2e
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f010 fe50 	bl	801244c <memset>
 80017ac:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80017b0:	493e      	ldr	r1, [pc, #248]	; (80018ac <main+0x8d8>)
 80017b2:	f203 421a 	addw	r2, r3, #1050	; 0x41a
 80017b6:	6808      	ldr	r0, [r1, #0]
 80017b8:	6010      	str	r0, [r2, #0]
 80017ba:	8889      	ldrh	r1, [r1, #4]
 80017bc:	8091      	strh	r1, [r2, #4]
 80017be:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80017c2:	222c      	movs	r2, #44	; 0x2c
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f010 fe40 	bl	801244c <memset>
 80017cc:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 80017d0:	4943      	ldr	r1, [pc, #268]	; (80018e0 <main+0x90c>)
 80017d2:	f202 434c 	addw	r3, r2, #1100	; 0x44c
 80017d6:	c903      	ldmia	r1, {r0, r1}
 80017d8:	6018      	str	r0, [r3, #0]
 80017da:	3304      	adds	r3, #4
 80017dc:	8019      	strh	r1, [r3, #0]
 80017de:	3302      	adds	r3, #2
 80017e0:	0c09      	lsrs	r1, r1, #16
 80017e2:	7019      	strb	r1, [r3, #0]
 80017e4:	f202 4353 	addw	r3, r2, #1107	; 0x453
 80017e8:	222b      	movs	r2, #43	; 0x2b
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f010 fe2d 	bl	801244c <memset>
 80017f2:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80017f6:	493b      	ldr	r1, [pc, #236]	; (80018e4 <main+0x910>)
 80017f8:	f203 427e 	addw	r2, r3, #1150	; 0x47e
 80017fc:	6808      	ldr	r0, [r1, #0]
 80017fe:	6010      	str	r0, [r2, #0]
 8001800:	8889      	ldrh	r1, [r1, #4]
 8001802:	8091      	strh	r1, [r2, #4]
 8001804:	f203 4384 	addw	r3, r3, #1156	; 0x484
 8001808:	222c      	movs	r2, #44	; 0x2c
 800180a:	2100      	movs	r1, #0
 800180c:	4618      	mov	r0, r3
 800180e:	f010 fe1d 	bl	801244c <memset>
 8001812:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8001816:	4a34      	ldr	r2, [pc, #208]	; (80018e8 <main+0x914>)
 8001818:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
 800181c:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8001820:	222e      	movs	r2, #46	; 0x2e
 8001822:	2100      	movs	r1, #0
 8001824:	4618      	mov	r0, r3
 8001826:	f010 fe11 	bl	801244c <memset>
 800182a:	f507 66b2 	add.w	r6, r7, #1424	; 0x590
 800182e:	4b2f      	ldr	r3, [pc, #188]	; (80018ec <main+0x918>)
 8001830:	f206 45e2 	addw	r5, r6, #1250	; 0x4e2
 8001834:	461c      	mov	r4, r3
 8001836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001838:	6028      	str	r0, [r5, #0]
 800183a:	6069      	str	r1, [r5, #4]
 800183c:	60aa      	str	r2, [r5, #8]
 800183e:	60eb      	str	r3, [r5, #12]
 8001840:	cc03      	ldmia	r4!, {r0, r1}
 8001842:	6128      	str	r0, [r5, #16]
 8001844:	6169      	str	r1, [r5, #20]
 8001846:	8823      	ldrh	r3, [r4, #0]
 8001848:	78a2      	ldrb	r2, [r4, #2]
 800184a:	832b      	strh	r3, [r5, #24]
 800184c:	4613      	mov	r3, r2
 800184e:	76ab      	strb	r3, [r5, #26]
 8001850:	f206 43fd 	addw	r3, r6, #1277	; 0x4fd
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
 8001860:	f8c3 2013 	str.w	r2, [r3, #19]
 8001864:	f507 66b2 	add.w	r6, r7, #1424	; 0x590
 8001868:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <main+0x91c>)
 800186a:	f206 5414 	addw	r4, r6, #1300	; 0x514
 800186e:	461d      	mov	r5, r3
 8001870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001874:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001878:	6020      	str	r0, [r4, #0]
 800187a:	3404      	adds	r4, #4
 800187c:	8021      	strh	r1, [r4, #0]
 800187e:	3402      	adds	r4, #2
 8001880:	0c0b      	lsrs	r3, r1, #16
 8001882:	7023      	strb	r3, [r4, #0]
 8001884:	f206 532b 	addw	r3, r6, #1323	; 0x52b
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
 8001894:	615a      	str	r2, [r3, #20]
 8001896:	f8c3 2017 	str.w	r2, [r3, #23]
 800189a:	e02b      	b.n	80018f4 <main+0x920>
 800189c:	ffffea1c 	.word	0xffffea1c
 80018a0:	080158b4 	.word	0x080158b4
 80018a4:	08015910 	.word	0x08015910
 80018a8:	08015944 	.word	0x08015944
 80018ac:	08015978 	.word	0x08015978
 80018b0:	080159ac 	.word	0x080159ac
 80018b4:	080159e0 	.word	0x080159e0
 80018b8:	08015a14 	.word	0x08015a14
 80018bc:	08015a48 	.word	0x08015a48
 80018c0:	08015a7c 	.word	0x08015a7c
 80018c4:	08015ab0 	.word	0x08015ab0
 80018c8:	08015ae4 	.word	0x08015ae4
 80018cc:	08015b18 	.word	0x08015b18
 80018d0:	08015b4c 	.word	0x08015b4c
 80018d4:	08015b80 	.word	0x08015b80
 80018d8:	08015bb4 	.word	0x08015bb4
 80018dc:	00657962 	.word	0x00657962
 80018e0:	08015be8 	.word	0x08015be8
 80018e4:	08015c1c 	.word	0x08015c1c
 80018e8:	00617963 	.word	0x00617963
 80018ec:	08015c50 	.word	0x08015c50
 80018f0:	08015c84 	.word	0x08015c84
			{"Quel est ton prénom?", "Comment tu t'appelles?", "Qui es-tu?"},
			{ "bye", "Salut", "see ya", "adios", "cya"},
			{ "Where is the coffee maker?", "Où est la cafetière?"}};
	//Test de récupération d'un mot: ok
	char test_patterns[50];
	for (uint32_t i = 0; i < 50; i++){
 80018f4:	2300      	movs	r3, #0
 80018f6:	f241 622c 	movw	r2, #5676	; 0x162c
 80018fa:	443a      	add	r2, r7
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	e01c      	b.n	800193a <main+0x966>
		  test_patterns[i] = patterns[0][0][i];
 8001900:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 8001904:	f241 632c 	movw	r3, #5676	; 0x162c
 8001908:	443b      	add	r3, r7
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4413      	add	r3, r2
 800190e:	7819      	ldrb	r1, [r3, #0]
 8001910:	4bd4      	ldr	r3, [pc, #848]	; (8001c64 <main+0xc90>)
 8001912:	f241 6250 	movw	r2, #5712	; 0x1650
 8001916:	443a      	add	r2, r7
 8001918:	4413      	add	r3, r2
 800191a:	f241 622c 	movw	r2, #5676	; 0x162c
 800191e:	443a      	add	r2, r7
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	4413      	add	r3, r2
 8001924:	460a      	mov	r2, r1
 8001926:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 50; i++){
 8001928:	f241 632c 	movw	r3, #5676	; 0x162c
 800192c:	443b      	add	r3, r7
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	3301      	adds	r3, #1
 8001932:	f241 622c 	movw	r2, #5676	; 0x162c
 8001936:	443a      	add	r2, r7
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	f241 632c 	movw	r3, #5676	; 0x162c
 800193e:	443b      	add	r3, r7
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2b31      	cmp	r3, #49	; 0x31
 8001944:	d9dc      	bls.n	8001900 <main+0x92c>
		}
	char responses[6][5][50] = {{"Salut à toi!", "Hello", "Comment vas tu?", "Salutations!", "Enchanté"},
 8001946:	f607 336c 	addw	r3, r7, #2924	; 0xb6c
 800194a:	4618      	mov	r0, r3
 800194c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001950:	461a      	mov	r2, r3
 8001952:	2100      	movs	r1, #0
 8001954:	f010 fd7a 	bl	801244c <memset>
 8001958:	f607 356c 	addw	r5, r7, #2924	; 0xb6c
 800195c:	4bc2      	ldr	r3, [pc, #776]	; (8001c68 <main+0xc94>)
 800195e:	462c      	mov	r4, r5
 8001960:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001962:	c407      	stmia	r4!, {r0, r1, r2}
 8001964:	8023      	strh	r3, [r4, #0]
 8001966:	f105 030e 	add.w	r3, r5, #14
 800196a:	2224      	movs	r2, #36	; 0x24
 800196c:	2100      	movs	r1, #0
 800196e:	4618      	mov	r0, r3
 8001970:	f010 fd6c 	bl	801244c <memset>
 8001974:	f607 336c 	addw	r3, r7, #2924	; 0xb6c
 8001978:	49bc      	ldr	r1, [pc, #752]	; (8001c6c <main+0xc98>)
 800197a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800197e:	6808      	ldr	r0, [r1, #0]
 8001980:	6010      	str	r0, [r2, #0]
 8001982:	8889      	ldrh	r1, [r1, #4]
 8001984:	8091      	strh	r1, [r2, #4]
 8001986:	3338      	adds	r3, #56	; 0x38
 8001988:	222c      	movs	r2, #44	; 0x2c
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f010 fd5d 	bl	801244c <memset>
 8001992:	f607 346c 	addw	r4, r7, #2924	; 0xb6c
 8001996:	4bb6      	ldr	r3, [pc, #728]	; (8001c70 <main+0xc9c>)
 8001998:	f104 0564 	add.w	r5, r4, #100	; 0x64
 800199c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800199e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80019a2:	f104 0374 	add.w	r3, r4, #116	; 0x74
 80019a6:	2222      	movs	r2, #34	; 0x22
 80019a8:	2100      	movs	r1, #0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f010 fd4e 	bl	801244c <memset>
 80019b0:	f607 356c 	addw	r5, r7, #2924	; 0xb6c
 80019b4:	4baf      	ldr	r3, [pc, #700]	; (8001c74 <main+0xca0>)
 80019b6:	f105 0496 	add.w	r4, r5, #150	; 0x96
 80019ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 80019bc:	6020      	str	r0, [r4, #0]
 80019be:	6061      	str	r1, [r4, #4]
 80019c0:	60a2      	str	r2, [r4, #8]
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	7323      	strb	r3, [r4, #12]
 80019c6:	f105 03a3 	add.w	r3, r5, #163	; 0xa3
 80019ca:	2225      	movs	r2, #37	; 0x25
 80019cc:	2100      	movs	r1, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f010 fd3c 	bl	801244c <memset>
 80019d4:	f607 346c 	addw	r4, r7, #2924	; 0xb6c
 80019d8:	4aa7      	ldr	r2, [pc, #668]	; (8001c78 <main+0xca4>)
 80019da:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
 80019de:	ca07      	ldmia	r2, {r0, r1, r2}
 80019e0:	c303      	stmia	r3!, {r0, r1}
 80019e2:	801a      	strh	r2, [r3, #0]
 80019e4:	f104 03d2 	add.w	r3, r4, #210	; 0xd2
 80019e8:	2228      	movs	r2, #40	; 0x28
 80019ea:	2100      	movs	r1, #0
 80019ec:	4618      	mov	r0, r3
 80019ee:	f010 fd2d 	bl	801244c <memset>
 80019f2:	f607 356c 	addw	r5, r7, #2924	; 0xb6c
 80019f6:	4ba1      	ldr	r3, [pc, #644]	; (8001c7c <main+0xca8>)
 80019f8:	f105 04fa 	add.w	r4, r5, #250	; 0xfa
 80019fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80019fe:	6020      	str	r0, [r4, #0]
 8001a00:	6061      	str	r1, [r4, #4]
 8001a02:	60a2      	str	r2, [r4, #8]
 8001a04:	f505 7383 	add.w	r3, r5, #262	; 0x106
 8001a08:	2226      	movs	r2, #38	; 0x26
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f010 fd1d 	bl	801244c <memset>
 8001a12:	f607 366c 	addw	r6, r7, #2924	; 0xb6c
 8001a16:	4b9a      	ldr	r3, [pc, #616]	; (8001c80 <main+0xcac>)
 8001a18:	f506 7496 	add.w	r4, r6, #300	; 0x12c
 8001a1c:	461d      	mov	r5, r3
 8001a1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a22:	682b      	ldr	r3, [r5, #0]
 8001a24:	6023      	str	r3, [r4, #0]
 8001a26:	f506 73a0 	add.w	r3, r6, #320	; 0x140
 8001a2a:	221e      	movs	r2, #30
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f010 fd0c 	bl	801244c <memset>
 8001a34:	f607 336c 	addw	r3, r7, #2924	; 0xb6c
 8001a38:	4a92      	ldr	r2, [pc, #584]	; (8001c84 <main+0xcb0>)
 8001a3a:	4614      	mov	r4, r2
 8001a3c:	f503 7caf 	add.w	ip, r3, #350	; 0x15e
 8001a40:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001a44:	4665      	mov	r5, ip
 8001a46:	4626      	mov	r6, r4
 8001a48:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a4a:	6028      	str	r0, [r5, #0]
 8001a4c:	6069      	str	r1, [r5, #4]
 8001a4e:	60aa      	str	r2, [r5, #8]
 8001a50:	60eb      	str	r3, [r5, #12]
 8001a52:	3410      	adds	r4, #16
 8001a54:	f10c 0c10 	add.w	ip, ip, #16
 8001a58:	4574      	cmp	r4, lr
 8001a5a:	d1f3      	bne.n	8001a44 <main+0xa70>
 8001a5c:	4662      	mov	r2, ip
 8001a5e:	4623      	mov	r3, r4
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	8013      	strh	r3, [r2, #0]
 8001a64:	f607 346c 	addw	r4, r7, #2924	; 0xb6c
 8001a68:	4a87      	ldr	r2, [pc, #540]	; (8001c88 <main+0xcb4>)
 8001a6a:	f504 73c8 	add.w	r3, r4, #400	; 0x190
 8001a6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a70:	c303      	stmia	r3!, {r0, r1}
 8001a72:	801a      	strh	r2, [r3, #0]
 8001a74:	3302      	adds	r3, #2
 8001a76:	0c12      	lsrs	r2, r2, #16
 8001a78:	701a      	strb	r2, [r3, #0]
 8001a7a:	f204 139b 	addw	r3, r4, #411	; 0x19b
 8001a7e:	2227      	movs	r2, #39	; 0x27
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f010 fce2 	bl	801244c <memset>
 8001a88:	f607 366c 	addw	r6, r7, #2924	; 0xb6c
 8001a8c:	4b7f      	ldr	r3, [pc, #508]	; (8001c8c <main+0xcb8>)
 8001a8e:	f506 74fa 	add.w	r4, r6, #500	; 0x1f4
 8001a92:	461d      	mov	r5, r3
 8001a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a98:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a9c:	c407      	stmia	r4!, {r0, r1, r2}
 8001a9e:	8023      	strh	r3, [r4, #0]
 8001aa0:	3402      	adds	r4, #2
 8001aa2:	0c1b      	lsrs	r3, r3, #16
 8001aa4:	7023      	strb	r3, [r4, #0]
 8001aa6:	f206 2313 	addw	r3, r6, #531	; 0x213
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	60da      	str	r2, [r3, #12]
 8001ab4:	f8c3 200f 	str.w	r2, [r3, #15]
 8001ab8:	f607 366c 	addw	r6, r7, #2924	; 0xb6c
 8001abc:	4b74      	ldr	r3, [pc, #464]	; (8001c90 <main+0xcbc>)
 8001abe:	f206 2426 	addw	r4, r6, #550	; 0x226
 8001ac2:	461d      	mov	r5, r3
 8001ac4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ac6:	6020      	str	r0, [r4, #0]
 8001ac8:	6061      	str	r1, [r4, #4]
 8001aca:	60a2      	str	r2, [r4, #8]
 8001acc:	60e3      	str	r3, [r4, #12]
 8001ace:	6828      	ldr	r0, [r5, #0]
 8001ad0:	6120      	str	r0, [r4, #16]
 8001ad2:	88ab      	ldrh	r3, [r5, #4]
 8001ad4:	79aa      	ldrb	r2, [r5, #6]
 8001ad6:	82a3      	strh	r3, [r4, #20]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	75a3      	strb	r3, [r4, #22]
 8001adc:	f206 233d 	addw	r3, r6, #573	; 0x23d
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
 8001aec:	615a      	str	r2, [r3, #20]
 8001aee:	f8c3 2017 	str.w	r2, [r3, #23]
 8001af2:	f607 366c 	addw	r6, r7, #2924	; 0xb6c
 8001af6:	4b67      	ldr	r3, [pc, #412]	; (8001c94 <main+0xcc0>)
 8001af8:	f506 7416 	add.w	r4, r6, #600	; 0x258
 8001afc:	461d      	mov	r5, r3
 8001afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b02:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b06:	6020      	str	r0, [r4, #0]
 8001b08:	3404      	adds	r4, #4
 8001b0a:	8021      	strh	r1, [r4, #0]
 8001b0c:	3402      	adds	r4, #2
 8001b0e:	0c0b      	lsrs	r3, r1, #16
 8001b10:	7023      	strb	r3, [r4, #0]
 8001b12:	f206 236f 	addw	r3, r6, #623	; 0x26f
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	60da      	str	r2, [r3, #12]
 8001b20:	611a      	str	r2, [r3, #16]
 8001b22:	615a      	str	r2, [r3, #20]
 8001b24:	f8c3 2017 	str.w	r2, [r3, #23]
 8001b28:	f607 366c 	addw	r6, r7, #2924	; 0xb6c
 8001b2c:	4b5a      	ldr	r3, [pc, #360]	; (8001c98 <main+0xcc4>)
 8001b2e:	f206 25ee 	addw	r5, r6, #750	; 0x2ee
 8001b32:	461c      	mov	r4, r3
 8001b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b36:	6028      	str	r0, [r5, #0]
 8001b38:	6069      	str	r1, [r5, #4]
 8001b3a:	60aa      	str	r2, [r5, #8]
 8001b3c:	60eb      	str	r3, [r5, #12]
 8001b3e:	6820      	ldr	r0, [r4, #0]
 8001b40:	6128      	str	r0, [r5, #16]
 8001b42:	7923      	ldrb	r3, [r4, #4]
 8001b44:	752b      	strb	r3, [r5, #20]
 8001b46:	f206 3303 	addw	r3, r6, #771	; 0x303
 8001b4a:	221d      	movs	r2, #29
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f010 fc7c 	bl	801244c <memset>
 8001b54:	f607 356c 	addw	r5, r7, #2924	; 0xb6c
 8001b58:	4b50      	ldr	r3, [pc, #320]	; (8001c9c <main+0xcc8>)
 8001b5a:	f505 7448 	add.w	r4, r5, #800	; 0x320
 8001b5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b60:	c407      	stmia	r4!, {r0, r1, r2}
 8001b62:	7023      	strb	r3, [r4, #0]
 8001b64:	f205 332d 	addw	r3, r5, #813	; 0x32d
 8001b68:	2225      	movs	r2, #37	; 0x25
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f010 fc6d 	bl	801244c <memset>
 8001b72:	f607 336c 	addw	r3, r7, #2924	; 0xb6c
 8001b76:	494a      	ldr	r1, [pc, #296]	; (8001ca0 <main+0xccc>)
 8001b78:	f203 3252 	addw	r2, r3, #850	; 0x352
 8001b7c:	6808      	ldr	r0, [r1, #0]
 8001b7e:	6010      	str	r0, [r2, #0]
 8001b80:	7909      	ldrb	r1, [r1, #4]
 8001b82:	7111      	strb	r1, [r2, #4]
 8001b84:	f203 3357 	addw	r3, r3, #855	; 0x357
 8001b88:	222d      	movs	r2, #45	; 0x2d
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f010 fc5d 	bl	801244c <memset>
 8001b92:	f607 366c 	addw	r6, r7, #2924	; 0xb6c
 8001b96:	4b43      	ldr	r3, [pc, #268]	; (8001ca4 <main+0xcd0>)
 8001b98:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 8001b9c:	461d      	mov	r5, r3
 8001b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ba2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ba6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001baa:	f206 4304 	addw	r3, r6, #1028	; 0x404
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
 8001bb8:	611a      	str	r2, [r3, #16]
 8001bba:	829a      	strh	r2, [r3, #20]
 8001bbc:	f607 356c 	addw	r5, r7, #2924	; 0xb6c
 8001bc0:	4b39      	ldr	r3, [pc, #228]	; (8001ca8 <main+0xcd4>)
 8001bc2:	f205 441a 	addw	r4, r5, #1050	; 0x41a
 8001bc6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001bc8:	6020      	str	r0, [r4, #0]
 8001bca:	6061      	str	r1, [r4, #4]
 8001bcc:	60a2      	str	r2, [r4, #8]
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	7323      	strb	r3, [r4, #12]
 8001bd2:	f205 4327 	addw	r3, r5, #1063	; 0x427
 8001bd6:	2225      	movs	r2, #37	; 0x25
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f010 fc36 	bl	801244c <memset>
 8001be0:	f607 366c 	addw	r6, r7, #2924	; 0xb6c
 8001be4:	4b31      	ldr	r3, [pc, #196]	; (8001cac <main+0xcd8>)
 8001be6:	f206 444c 	addw	r4, r6, #1100	; 0x44c
 8001bea:	461d      	mov	r5, r3
 8001bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bf0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bf4:	c403      	stmia	r4!, {r0, r1}
 8001bf6:	8022      	strh	r2, [r4, #0]
 8001bf8:	f206 4366 	addw	r3, r6, #1126	; 0x466
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
 8001c08:	615a      	str	r2, [r3, #20]
 8001c0a:	f607 366c 	addw	r6, r7, #2924	; 0xb6c
 8001c0e:	4b28      	ldr	r3, [pc, #160]	; (8001cb0 <main+0xcdc>)
 8001c10:	f206 45e2 	addw	r5, r6, #1250	; 0x4e2
 8001c14:	461c      	mov	r4, r3
 8001c16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c18:	6028      	str	r0, [r5, #0]
 8001c1a:	6069      	str	r1, [r5, #4]
 8001c1c:	60aa      	str	r2, [r5, #8]
 8001c1e:	60eb      	str	r3, [r5, #12]
 8001c20:	6820      	ldr	r0, [r4, #0]
 8001c22:	6128      	str	r0, [r5, #16]
 8001c24:	7923      	ldrb	r3, [r4, #4]
 8001c26:	752b      	strb	r3, [r5, #20]
 8001c28:	f206 43f7 	addw	r3, r6, #1271	; 0x4f7
 8001c2c:	221d      	movs	r2, #29
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f010 fc0b 	bl	801244c <memset>
 8001c36:	f607 366c 	addw	r6, r7, #2924	; 0xb6c
 8001c3a:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <main+0xce0>)
 8001c3c:	f206 5414 	addw	r4, r6, #1300	; 0x514
 8001c40:	461d      	mov	r5, r3
 8001c42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c4a:	c403      	stmia	r4!, {r0, r1}
 8001c4c:	8022      	strh	r2, [r4, #0]
 8001c4e:	3402      	adds	r4, #2
 8001c50:	0c13      	lsrs	r3, r2, #16
 8001c52:	7023      	strb	r3, [r4, #0]
 8001c54:	f206 532f 	addw	r3, r6, #1327	; 0x52f
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	e02a      	b.n	8001cb8 <main+0xce4>
 8001c62:	bf00      	nop
 8001c64:	ffffe9b4 	.word	0xffffe9b4
 8001c68:	08015cb8 	.word	0x08015cb8
 8001c6c:	08015910 	.word	0x08015910
 8001c70:	08015cec 	.word	0x08015cec
 8001c74:	08015d20 	.word	0x08015d20
 8001c78:	08015d54 	.word	0x08015d54
 8001c7c:	08015d88 	.word	0x08015d88
 8001c80:	08015dbc 	.word	0x08015dbc
 8001c84:	08015df0 	.word	0x08015df0
 8001c88:	08015e24 	.word	0x08015e24
 8001c8c:	08015e58 	.word	0x08015e58
 8001c90:	08015e8c 	.word	0x08015e8c
 8001c94:	08015ec0 	.word	0x08015ec0
 8001c98:	08015ef4 	.word	0x08015ef4
 8001c9c:	08015f28 	.word	0x08015f28
 8001ca0:	08015f5c 	.word	0x08015f5c
 8001ca4:	08015f90 	.word	0x08015f90
 8001ca8:	08015fc4 	.word	0x08015fc4
 8001cac:	08015ff8 	.word	0x08015ff8
 8001cb0:	0801602c 	.word	0x0801602c
 8001cb4:	08016060 	.word	0x08016060
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
 8001cbc:	f8c3 2013 	str.w	r2, [r3, #19]
			{"C'était sympa de te parler", "à plus tard", "On se reparle très vite!"},
			{"On the kitchen table","Sur la table de la cuisine"}};

	//Récupération de la réponse
	char tag_pred[15]; //classe prédite, juste à titre informatif, pas utile pour récupérer une réponse
	for (uint32_t i = 0; i < 50; i++){
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f241 6228 	movw	r2, #5672	; 0x1628
 8001cc6:	443a      	add	r2, r7
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	e025      	b.n	8001d18 <main+0xd44>
			  tag_pred[i] = tag[pred_class][i];
 8001ccc:	4a70      	ldr	r2, [pc, #448]	; (8001e90 <main+0xebc>)
 8001cce:	f241 6350 	movw	r3, #5712	; 0x1650
 8001cd2:	443b      	add	r3, r7
 8001cd4:	441a      	add	r2, r3
 8001cd6:	f241 6338 	movw	r3, #5688	; 0x1638
 8001cda:	443b      	add	r3, r7
 8001cdc:	6819      	ldr	r1, [r3, #0]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	011b      	lsls	r3, r3, #4
 8001ce2:	1a5b      	subs	r3, r3, r1
 8001ce4:	441a      	add	r2, r3
 8001ce6:	f241 6328 	movw	r3, #5672	; 0x1628
 8001cea:	443b      	add	r3, r7
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4413      	add	r3, r2
 8001cf0:	7819      	ldrb	r1, [r3, #0]
 8001cf2:	f241 1248 	movw	r2, #4424	; 0x1148
 8001cf6:	443a      	add	r2, r7
 8001cf8:	f241 6328 	movw	r3, #5672	; 0x1628
 8001cfc:	443b      	add	r3, r7
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4413      	add	r3, r2
 8001d02:	460a      	mov	r2, r1
 8001d04:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 50; i++){
 8001d06:	f241 6328 	movw	r3, #5672	; 0x1628
 8001d0a:	443b      	add	r3, r7
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	f241 6228 	movw	r2, #5672	; 0x1628
 8001d14:	443a      	add	r2, r7
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	f241 6328 	movw	r3, #5672	; 0x1628
 8001d1c:	443b      	add	r3, r7
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b31      	cmp	r3, #49	; 0x31
 8001d22:	d9d3      	bls.n	8001ccc <main+0xcf8>
			}
	//listes des réponses adéquates pour le message test
	char choice_responses[5][50];
	for (uint32_t i = 0; i < 5; i++){
 8001d24:	2300      	movs	r3, #0
 8001d26:	f241 6224 	movw	r2, #5668	; 0x1624
 8001d2a:	443a      	add	r2, r7
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	e043      	b.n	8001db8 <main+0xde4>
		for (uint32_t j = 0; j < 50; j++){
 8001d30:	2300      	movs	r3, #0
 8001d32:	f507 52b1 	add.w	r2, r7, #5664	; 0x1620
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	e030      	b.n	8001d9c <main+0xdc8>
			choice_responses[i][j] = responses[pred_class][i][j];
 8001d3a:	f607 326c 	addw	r2, r7, #2924	; 0xb6c
 8001d3e:	f241 6324 	movw	r3, #5668	; 0x1624
 8001d42:	443b      	add	r3, r7
 8001d44:	6819      	ldr	r1, [r3, #0]
 8001d46:	f241 6338 	movw	r3, #5688	; 0x1638
 8001d4a:	443b      	add	r3, r7
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2032      	movs	r0, #50	; 0x32
 8001d50:	fb00 f101 	mul.w	r1, r0, r1
 8001d54:	20fa      	movs	r0, #250	; 0xfa
 8001d56:	fb00 f303 	mul.w	r3, r0, r3
 8001d5a:	440b      	add	r3, r1
 8001d5c:	441a      	add	r2, r3
 8001d5e:	f507 53b1 	add.w	r3, r7, #5664	; 0x1620
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4413      	add	r3, r2
 8001d66:	7818      	ldrb	r0, [r3, #0]
 8001d68:	4b4a      	ldr	r3, [pc, #296]	; (8001e94 <main+0xec0>)
 8001d6a:	f241 6250 	movw	r2, #5712	; 0x1650
 8001d6e:	443a      	add	r2, r7
 8001d70:	4413      	add	r3, r2
 8001d72:	f241 6224 	movw	r2, #5668	; 0x1624
 8001d76:	443a      	add	r2, r7
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	2132      	movs	r1, #50	; 0x32
 8001d7c:	fb01 f202 	mul.w	r2, r1, r2
 8001d80:	441a      	add	r2, r3
 8001d82:	f507 53b1 	add.w	r3, r7, #5664	; 0x1620
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4413      	add	r3, r2
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	701a      	strb	r2, [r3, #0]
		for (uint32_t j = 0; j < 50; j++){
 8001d8e:	f507 53b1 	add.w	r3, r7, #5664	; 0x1620
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	3301      	adds	r3, #1
 8001d96:	f507 52b1 	add.w	r2, r7, #5664	; 0x1620
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	f507 53b1 	add.w	r3, r7, #5664	; 0x1620
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b31      	cmp	r3, #49	; 0x31
 8001da4:	d9c9      	bls.n	8001d3a <main+0xd66>
	for (uint32_t i = 0; i < 5; i++){
 8001da6:	f241 6324 	movw	r3, #5668	; 0x1624
 8001daa:	443b      	add	r3, r7
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	3301      	adds	r3, #1
 8001db0:	f241 6224 	movw	r2, #5668	; 0x1624
 8001db4:	443a      	add	r2, r7
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	f241 6324 	movw	r3, #5668	; 0x1624
 8001dbc:	443b      	add	r3, r7
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d9b5      	bls.n	8001d30 <main+0xd5c>
		}
	}

	//tirage d'une réponse au hasard
	int upper = 2;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	f241 6208 	movw	r2, #5640	; 0x1608
 8001dca:	443a      	add	r2, r7
 8001dcc:	6013      	str	r3, [r2, #0]
	int lower = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f241 6204 	movw	r2, #5636	; 0x1604
 8001dd4:	443a      	add	r2, r7
 8001dd6:	6013      	str	r3, [r2, #0]
	int random = (rand() % (upper - lower + 1)) + lower;
 8001dd8:	f011 f86c 	bl	8012eb4 <rand>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	f241 6308 	movw	r3, #5640	; 0x1608
 8001de2:	443b      	add	r3, r7
 8001de4:	6819      	ldr	r1, [r3, #0]
 8001de6:	f241 6304 	movw	r3, #5636	; 0x1604
 8001dea:	443b      	add	r3, r7
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	1acb      	subs	r3, r1, r3
 8001df0:	3301      	adds	r3, #1
 8001df2:	fb92 f1f3 	sdiv	r1, r2, r3
 8001df6:	fb03 f301 	mul.w	r3, r3, r1
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	f241 6204 	movw	r2, #5636	; 0x1604
 8001e00:	443a      	add	r2, r7
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	4413      	add	r3, r2
 8001e06:	f507 52b0 	add.w	r2, r7, #5632	; 0x1600
 8001e0a:	6013      	str	r3, [r2, #0]

	char message_answer[50];
	for (uint32_t i = 0; i < 50; i++){
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f241 621c 	movw	r2, #5660	; 0x161c
 8001e12:	443a      	add	r2, r7
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	e026      	b.n	8001e66 <main+0xe92>
		message_answer[i] = choice_responses[random][i];
 8001e18:	4b1e      	ldr	r3, [pc, #120]	; (8001e94 <main+0xec0>)
 8001e1a:	f241 6250 	movw	r2, #5712	; 0x1650
 8001e1e:	443a      	add	r2, r7
 8001e20:	4413      	add	r3, r2
 8001e22:	f507 52b0 	add.w	r2, r7, #5632	; 0x1600
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	2132      	movs	r1, #50	; 0x32
 8001e2a:	fb01 f202 	mul.w	r2, r1, r2
 8001e2e:	441a      	add	r2, r3
 8001e30:	f241 631c 	movw	r3, #5660	; 0x161c
 8001e34:	443b      	add	r3, r7
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4413      	add	r3, r2
 8001e3a:	7819      	ldrb	r1, [r3, #0]
 8001e3c:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <main+0xec4>)
 8001e3e:	f241 6250 	movw	r2, #5712	; 0x1650
 8001e42:	443a      	add	r2, r7
 8001e44:	4413      	add	r3, r2
 8001e46:	f241 621c 	movw	r2, #5660	; 0x161c
 8001e4a:	443a      	add	r2, r7
 8001e4c:	6812      	ldr	r2, [r2, #0]
 8001e4e:	4413      	add	r3, r2
 8001e50:	460a      	mov	r2, r1
 8001e52:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 50; i++){
 8001e54:	f241 631c 	movw	r3, #5660	; 0x161c
 8001e58:	443b      	add	r3, r7
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	f241 621c 	movw	r2, #5660	; 0x161c
 8001e62:	443a      	add	r2, r7
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	f241 631c 	movw	r3, #5660	; 0x161c
 8001e6a:	443b      	add	r3, r7
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b31      	cmp	r3, #49	; 0x31
 8001e70:	d9d2      	bls.n	8001e18 <main+0xe44>
	}

	printf(message_answer);
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <main+0xec4>)
 8001e74:	f241 6250 	movw	r2, #5712	; 0x1650
 8001e78:	443a      	add	r2, r7
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f011 f801 	bl	8012e84 <iprintf>


	// Wait before doing it again
	HAL_Delay(500);
 8001e82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e86:	f002 f9ad 	bl	80041e4 <HAL_Delay>
    {
 8001e8a:	f7ff b9da 	b.w	8001242 <main+0x26e>
 8001e8e:	bf00      	nop
 8001e90:	ffffea1c 	.word	0xffffea1c
 8001e94:	ffffeb44 	.word	0xffffeb44
 8001e98:	ffffe9e8 	.word	0xffffe9e8

08001e9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b0b4      	sub	sp, #208	; 0xd0
 8001ea0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ea2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ea6:	2230      	movs	r2, #48	; 0x30
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f010 face 	bl	801244c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eb0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ec0:	f107 0308 	add.w	r3, r7, #8
 8001ec4:	2284      	movs	r2, #132	; 0x84
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f010 fabf 	bl	801244c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ece:	f005 fc85 	bl	80077dc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed2:	4b4f      	ldr	r3, [pc, #316]	; (8002010 <SystemClock_Config+0x174>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	4a4e      	ldr	r2, [pc, #312]	; (8002010 <SystemClock_Config+0x174>)
 8001ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001edc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ede:	4b4c      	ldr	r3, [pc, #304]	; (8002010 <SystemClock_Config+0x174>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eea:	4b4a      	ldr	r3, [pc, #296]	; (8002014 <SystemClock_Config+0x178>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a49      	ldr	r2, [pc, #292]	; (8002014 <SystemClock_Config+0x178>)
 8001ef0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	4b47      	ldr	r3, [pc, #284]	; (8002014 <SystemClock_Config+0x178>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001f02:	2309      	movs	r3, #9
 8001f04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f10:	2301      	movs	r3, #1
 8001f12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f16:	2302      	movs	r3, #2
 8001f18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001f24:	2319      	movs	r3, #25
 8001f26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001f2a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001f2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f32:	2302      	movs	r3, #2
 8001f34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001f38:	2309      	movs	r3, #9
 8001f3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f3e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f005 fd6c 	bl	8007a20 <HAL_RCC_OscConfig>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001f4e:	f001 f937 	bl	80031c0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f52:	f005 fc53 	bl	80077fc <HAL_PWREx_EnableOverDrive>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001f5c:	f001 f930 	bl	80031c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f60:	230f      	movs	r3, #15
 8001f62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f66:	2302      	movs	r3, #2
 8001f68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f72:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001f82:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001f86:	2106      	movs	r1, #6
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f005 ffed 	bl	8007f68 <HAL_RCC_ClockConfig>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001f94:	f001 f914 	bl	80031c0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001f98:	4b1f      	ldr	r3, [pc, #124]	; (8002018 <SystemClock_Config+0x17c>)
 8001f9a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001f9c:	2364      	movs	r3, #100	; 0x64
 8001f9e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001fac:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001fb0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001fb2:	2305      	movs	r3, #5
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001fc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fca:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fd0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001fe6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001fea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ff4:	f107 0308 	add.w	r3, r7, #8
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f006 f98b 	bl	8008314 <HAL_RCCEx_PeriphCLKConfig>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8002004:	f001 f8dc 	bl	80031c0 <Error_Handler>
  }
}
 8002008:	bf00      	nop
 800200a:	37d0      	adds	r7, #208	; 0xd0
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40023800 	.word	0x40023800
 8002014:	40007000 	.word	0x40007000
 8002018:	01b14868 	.word	0x01b14868

0800201c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002022:	463b      	mov	r3, r7
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800202e:	4b21      	ldr	r3, [pc, #132]	; (80020b4 <MX_ADC3_Init+0x98>)
 8002030:	4a21      	ldr	r2, [pc, #132]	; (80020b8 <MX_ADC3_Init+0x9c>)
 8002032:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002034:	4b1f      	ldr	r3, [pc, #124]	; (80020b4 <MX_ADC3_Init+0x98>)
 8002036:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800203a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800203c:	4b1d      	ldr	r3, [pc, #116]	; (80020b4 <MX_ADC3_Init+0x98>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002042:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <MX_ADC3_Init+0x98>)
 8002044:	2200      	movs	r2, #0
 8002046:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002048:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <MX_ADC3_Init+0x98>)
 800204a:	2200      	movs	r2, #0
 800204c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800204e:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <MX_ADC3_Init+0x98>)
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002056:	4b17      	ldr	r3, [pc, #92]	; (80020b4 <MX_ADC3_Init+0x98>)
 8002058:	2200      	movs	r2, #0
 800205a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800205c:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <MX_ADC3_Init+0x98>)
 800205e:	4a17      	ldr	r2, [pc, #92]	; (80020bc <MX_ADC3_Init+0xa0>)
 8002060:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002062:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <MX_ADC3_Init+0x98>)
 8002064:	2200      	movs	r2, #0
 8002066:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002068:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <MX_ADC3_Init+0x98>)
 800206a:	2201      	movs	r2, #1
 800206c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800206e:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <MX_ADC3_Init+0x98>)
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002076:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <MX_ADC3_Init+0x98>)
 8002078:	2201      	movs	r2, #1
 800207a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800207c:	480d      	ldr	r0, [pc, #52]	; (80020b4 <MX_ADC3_Init+0x98>)
 800207e:	f002 f8d5 	bl	800422c <HAL_ADC_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002088:	f001 f89a 	bl	80031c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800208c:	2304      	movs	r3, #4
 800208e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002090:	2301      	movs	r3, #1
 8002092:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002094:	2300      	movs	r3, #0
 8002096:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002098:	463b      	mov	r3, r7
 800209a:	4619      	mov	r1, r3
 800209c:	4805      	ldr	r0, [pc, #20]	; (80020b4 <MX_ADC3_Init+0x98>)
 800209e:	f002 f909 	bl	80042b4 <HAL_ADC_ConfigChannel>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80020a8:	f001 f88a 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000d5c 	.word	0x20000d5c
 80020b8:	40012200 	.word	0x40012200
 80020bc:	0f000001 	.word	0x0f000001

080020c0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80020c4:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <MX_CRC_Init+0x3c>)
 80020c6:	4a0e      	ldr	r2, [pc, #56]	; (8002100 <MX_CRC_Init+0x40>)
 80020c8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80020ca:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <MX_CRC_Init+0x3c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80020d0:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <MX_CRC_Init+0x3c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <MX_CRC_Init+0x3c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80020dc:	4b07      	ldr	r3, [pc, #28]	; (80020fc <MX_CRC_Init+0x3c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <MX_CRC_Init+0x3c>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80020e8:	4804      	ldr	r0, [pc, #16]	; (80020fc <MX_CRC_Init+0x3c>)
 80020ea:	f002 fc39 	bl	8004960 <HAL_CRC_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80020f4:	f001 f864 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80020f8:	bf00      	nop
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000b74 	.word	0x20000b74
 8002100:	40023000 	.word	0x40023000

08002104 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8002108:	4b16      	ldr	r3, [pc, #88]	; (8002164 <MX_DCMI_Init+0x60>)
 800210a:	4a17      	ldr	r2, [pc, #92]	; (8002168 <MX_DCMI_Init+0x64>)
 800210c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <MX_DCMI_Init+0x60>)
 8002110:	2200      	movs	r2, #0
 8002112:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8002114:	4b13      	ldr	r3, [pc, #76]	; (8002164 <MX_DCMI_Init+0x60>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800211a:	4b12      	ldr	r3, [pc, #72]	; (8002164 <MX_DCMI_Init+0x60>)
 800211c:	2200      	movs	r2, #0
 800211e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8002120:	4b10      	ldr	r3, [pc, #64]	; (8002164 <MX_DCMI_Init+0x60>)
 8002122:	2200      	movs	r2, #0
 8002124:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8002126:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <MX_DCMI_Init+0x60>)
 8002128:	2200      	movs	r2, #0
 800212a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800212c:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <MX_DCMI_Init+0x60>)
 800212e:	2200      	movs	r2, #0
 8002130:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8002132:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <MX_DCMI_Init+0x60>)
 8002134:	2200      	movs	r2, #0
 8002136:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8002138:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <MX_DCMI_Init+0x60>)
 800213a:	2200      	movs	r2, #0
 800213c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800213e:	4b09      	ldr	r3, [pc, #36]	; (8002164 <MX_DCMI_Init+0x60>)
 8002140:	2200      	movs	r2, #0
 8002142:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8002144:	4b07      	ldr	r3, [pc, #28]	; (8002164 <MX_DCMI_Init+0x60>)
 8002146:	2200      	movs	r2, #0
 8002148:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <MX_DCMI_Init+0x60>)
 800214c:	2200      	movs	r2, #0
 800214e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8002150:	4804      	ldr	r0, [pc, #16]	; (8002164 <MX_DCMI_Init+0x60>)
 8002152:	f002 fcef 	bl	8004b34 <HAL_DCMI_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 800215c:	f001 f830 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000da4 	.word	0x20000da4
 8002168:	50050000 	.word	0x50050000

0800216c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002170:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <MX_DMA2D_Init+0x5c>)
 8002172:	4a16      	ldr	r2, [pc, #88]	; (80021cc <MX_DMA2D_Init+0x60>)
 8002174:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8002176:	4b14      	ldr	r3, [pc, #80]	; (80021c8 <MX_DMA2D_Init+0x5c>)
 8002178:	2200      	movs	r2, #0
 800217a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <MX_DMA2D_Init+0x5c>)
 800217e:	2200      	movs	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8002182:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <MX_DMA2D_Init+0x5c>)
 8002184:	2200      	movs	r2, #0
 8002186:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8002188:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <MX_DMA2D_Init+0x5c>)
 800218a:	2200      	movs	r2, #0
 800218c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800218e:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <MX_DMA2D_Init+0x5c>)
 8002190:	2200      	movs	r2, #0
 8002192:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <MX_DMA2D_Init+0x5c>)
 8002196:	2200      	movs	r2, #0
 8002198:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800219a:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <MX_DMA2D_Init+0x5c>)
 800219c:	2200      	movs	r2, #0
 800219e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80021a0:	4809      	ldr	r0, [pc, #36]	; (80021c8 <MX_DMA2D_Init+0x5c>)
 80021a2:	f002 fd41 	bl	8004c28 <HAL_DMA2D_Init>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80021ac:	f001 f808 	bl	80031c0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80021b0:	2101      	movs	r1, #1
 80021b2:	4805      	ldr	r0, [pc, #20]	; (80021c8 <MX_DMA2D_Init+0x5c>)
 80021b4:	f002 fe92 	bl	8004edc <HAL_DMA2D_ConfigLayer>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80021be:	f000 ffff 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000f68 	.word	0x20000f68
 80021cc:	4002b000 	.word	0x4002b000

080021d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021d4:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <MX_I2C1_Init+0x74>)
 80021d6:	4a1c      	ldr	r2, [pc, #112]	; (8002248 <MX_I2C1_Init+0x78>)
 80021d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80021da:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <MX_I2C1_Init+0x74>)
 80021dc:	4a1b      	ldr	r2, [pc, #108]	; (800224c <MX_I2C1_Init+0x7c>)
 80021de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80021e0:	4b18      	ldr	r3, [pc, #96]	; (8002244 <MX_I2C1_Init+0x74>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021e6:	4b17      	ldr	r3, [pc, #92]	; (8002244 <MX_I2C1_Init+0x74>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021ec:	4b15      	ldr	r3, [pc, #84]	; (8002244 <MX_I2C1_Init+0x74>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80021f2:	4b14      	ldr	r3, [pc, #80]	; (8002244 <MX_I2C1_Init+0x74>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <MX_I2C1_Init+0x74>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021fe:	4b11      	ldr	r3, [pc, #68]	; (8002244 <MX_I2C1_Init+0x74>)
 8002200:	2200      	movs	r2, #0
 8002202:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <MX_I2C1_Init+0x74>)
 8002206:	2200      	movs	r2, #0
 8002208:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800220a:	480e      	ldr	r0, [pc, #56]	; (8002244 <MX_I2C1_Init+0x74>)
 800220c:	f004 fe54 	bl	8006eb8 <HAL_I2C_Init>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002216:	f000 ffd3 	bl	80031c0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800221a:	2100      	movs	r1, #0
 800221c:	4809      	ldr	r0, [pc, #36]	; (8002244 <MX_I2C1_Init+0x74>)
 800221e:	f004 fedb 	bl	8006fd8 <HAL_I2CEx_ConfigAnalogFilter>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002228:	f000 ffca 	bl	80031c0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800222c:	2100      	movs	r1, #0
 800222e:	4805      	ldr	r0, [pc, #20]	; (8002244 <MX_I2C1_Init+0x74>)
 8002230:	f004 ff1d 	bl	800706e <HAL_I2CEx_ConfigDigitalFilter>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800223a:	f000 ffc1 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000b28 	.word	0x20000b28
 8002248:	40005400 	.word	0x40005400
 800224c:	00c0eaff 	.word	0x00c0eaff

08002250 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002254:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <MX_I2C3_Init+0x74>)
 8002256:	4a1c      	ldr	r2, [pc, #112]	; (80022c8 <MX_I2C3_Init+0x78>)
 8002258:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800225a:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <MX_I2C3_Init+0x74>)
 800225c:	4a1b      	ldr	r2, [pc, #108]	; (80022cc <MX_I2C3_Init+0x7c>)
 800225e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002260:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <MX_I2C3_Init+0x74>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002266:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <MX_I2C3_Init+0x74>)
 8002268:	2201      	movs	r2, #1
 800226a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800226c:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <MX_I2C3_Init+0x74>)
 800226e:	2200      	movs	r2, #0
 8002270:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002272:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <MX_I2C3_Init+0x74>)
 8002274:	2200      	movs	r2, #0
 8002276:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002278:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <MX_I2C3_Init+0x74>)
 800227a:	2200      	movs	r2, #0
 800227c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800227e:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <MX_I2C3_Init+0x74>)
 8002280:	2200      	movs	r2, #0
 8002282:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002284:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <MX_I2C3_Init+0x74>)
 8002286:	2200      	movs	r2, #0
 8002288:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800228a:	480e      	ldr	r0, [pc, #56]	; (80022c4 <MX_I2C3_Init+0x74>)
 800228c:	f004 fe14 	bl	8006eb8 <HAL_I2C_Init>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002296:	f000 ff93 	bl	80031c0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800229a:	2100      	movs	r1, #0
 800229c:	4809      	ldr	r0, [pc, #36]	; (80022c4 <MX_I2C3_Init+0x74>)
 800229e:	f004 fe9b 	bl	8006fd8 <HAL_I2CEx_ConfigAnalogFilter>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80022a8:	f000 ff8a 	bl	80031c0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80022ac:	2100      	movs	r1, #0
 80022ae:	4805      	ldr	r0, [pc, #20]	; (80022c4 <MX_I2C3_Init+0x74>)
 80022b0:	f004 fedd 	bl	800706e <HAL_I2CEx_ConfigDigitalFilter>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80022ba:	f000 ff81 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	200009c0 	.word	0x200009c0
 80022c8:	40005c00 	.word	0x40005c00
 80022cc:	00c0eaff 	.word	0x00c0eaff

080022d0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08e      	sub	sp, #56	; 0x38
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	2234      	movs	r2, #52	; 0x34
 80022da:	2100      	movs	r1, #0
 80022dc:	4618      	mov	r0, r3
 80022de:	f010 f8b5 	bl	801244c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80022e2:	4b3a      	ldr	r3, [pc, #232]	; (80023cc <MX_LTDC_Init+0xfc>)
 80022e4:	4a3a      	ldr	r2, [pc, #232]	; (80023d0 <MX_LTDC_Init+0x100>)
 80022e6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80022e8:	4b38      	ldr	r3, [pc, #224]	; (80023cc <MX_LTDC_Init+0xfc>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80022ee:	4b37      	ldr	r3, [pc, #220]	; (80023cc <MX_LTDC_Init+0xfc>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80022f4:	4b35      	ldr	r3, [pc, #212]	; (80023cc <MX_LTDC_Init+0xfc>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80022fa:	4b34      	ldr	r3, [pc, #208]	; (80023cc <MX_LTDC_Init+0xfc>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8002300:	4b32      	ldr	r3, [pc, #200]	; (80023cc <MX_LTDC_Init+0xfc>)
 8002302:	2228      	movs	r2, #40	; 0x28
 8002304:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8002306:	4b31      	ldr	r3, [pc, #196]	; (80023cc <MX_LTDC_Init+0xfc>)
 8002308:	2209      	movs	r2, #9
 800230a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800230c:	4b2f      	ldr	r3, [pc, #188]	; (80023cc <MX_LTDC_Init+0xfc>)
 800230e:	2235      	movs	r2, #53	; 0x35
 8002310:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8002312:	4b2e      	ldr	r3, [pc, #184]	; (80023cc <MX_LTDC_Init+0xfc>)
 8002314:	220b      	movs	r2, #11
 8002316:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8002318:	4b2c      	ldr	r3, [pc, #176]	; (80023cc <MX_LTDC_Init+0xfc>)
 800231a:	f240 2215 	movw	r2, #533	; 0x215
 800231e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8002320:	4b2a      	ldr	r3, [pc, #168]	; (80023cc <MX_LTDC_Init+0xfc>)
 8002322:	f240 121b 	movw	r2, #283	; 0x11b
 8002326:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8002328:	4b28      	ldr	r3, [pc, #160]	; (80023cc <MX_LTDC_Init+0xfc>)
 800232a:	f240 2235 	movw	r2, #565	; 0x235
 800232e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8002330:	4b26      	ldr	r3, [pc, #152]	; (80023cc <MX_LTDC_Init+0xfc>)
 8002332:	f240 121d 	movw	r2, #285	; 0x11d
 8002336:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002338:	4b24      	ldr	r3, [pc, #144]	; (80023cc <MX_LTDC_Init+0xfc>)
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002340:	4b22      	ldr	r3, [pc, #136]	; (80023cc <MX_LTDC_Init+0xfc>)
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002348:	4b20      	ldr	r3, [pc, #128]	; (80023cc <MX_LTDC_Init+0xfc>)
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002350:	481e      	ldr	r0, [pc, #120]	; (80023cc <MX_LTDC_Init+0xfc>)
 8002352:	f004 fed9 	bl	8007108 <HAL_LTDC_Init>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800235c:	f000 ff30 	bl	80031c0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8002364:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002368:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800236e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002372:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002374:	2302      	movs	r3, #2
 8002376:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002378:	23ff      	movs	r3, #255	; 0xff
 800237a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002380:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002384:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002386:	2307      	movs	r3, #7
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800238a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800238e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8002390:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002394:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8002396:	f44f 7388 	mov.w	r3, #272	; 0x110
 800239a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	2200      	movs	r2, #0
 80023b2:	4619      	mov	r1, r3
 80023b4:	4805      	ldr	r0, [pc, #20]	; (80023cc <MX_LTDC_Init+0xfc>)
 80023b6:	f005 f839 	bl	800742c <HAL_LTDC_ConfigLayer>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80023c0:	f000 fefe 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80023c4:	bf00      	nop
 80023c6:	3738      	adds	r7, #56	; 0x38
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000cb4 	.word	0x20000cb4
 80023d0:	40016800 	.word	0x40016800

080023d4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80023d8:	4b12      	ldr	r3, [pc, #72]	; (8002424 <MX_QUADSPI_Init+0x50>)
 80023da:	4a13      	ldr	r2, [pc, #76]	; (8002428 <MX_QUADSPI_Init+0x54>)
 80023dc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80023de:	4b11      	ldr	r3, [pc, #68]	; (8002424 <MX_QUADSPI_Init+0x50>)
 80023e0:	2201      	movs	r2, #1
 80023e2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80023e4:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <MX_QUADSPI_Init+0x50>)
 80023e6:	2204      	movs	r2, #4
 80023e8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80023ea:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <MX_QUADSPI_Init+0x50>)
 80023ec:	2210      	movs	r2, #16
 80023ee:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80023f0:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <MX_QUADSPI_Init+0x50>)
 80023f2:	2218      	movs	r2, #24
 80023f4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80023f6:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <MX_QUADSPI_Init+0x50>)
 80023f8:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80023fc:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80023fe:	4b09      	ldr	r3, [pc, #36]	; (8002424 <MX_QUADSPI_Init+0x50>)
 8002400:	2200      	movs	r2, #0
 8002402:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8002404:	4b07      	ldr	r3, [pc, #28]	; (8002424 <MX_QUADSPI_Init+0x50>)
 8002406:	2200      	movs	r2, #0
 8002408:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <MX_QUADSPI_Init+0x50>)
 800240c:	2200      	movs	r2, #0
 800240e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002410:	4804      	ldr	r0, [pc, #16]	; (8002424 <MX_QUADSPI_Init+0x50>)
 8002412:	f005 fa43 	bl	800789c <HAL_QSPI_Init>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 800241c:	f000 fed0 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}
 8002424:	200010bc 	.word	0x200010bc
 8002428:	a0001000 	.word	0xa0001000

0800242c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b092      	sub	sp, #72	; 0x48
 8002430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002432:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	605a      	str	r2, [r3, #4]
 800243c:	609a      	str	r2, [r3, #8]
 800243e:	60da      	str	r2, [r3, #12]
 8002440:	611a      	str	r2, [r3, #16]
 8002442:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8002444:	2300      	movs	r3, #0
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8002448:	463b      	mov	r3, r7
 800244a:	222c      	movs	r2, #44	; 0x2c
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f00f fffc 	bl	801244c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002454:	4b46      	ldr	r3, [pc, #280]	; (8002570 <MX_RTC_Init+0x144>)
 8002456:	4a47      	ldr	r2, [pc, #284]	; (8002574 <MX_RTC_Init+0x148>)
 8002458:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800245a:	4b45      	ldr	r3, [pc, #276]	; (8002570 <MX_RTC_Init+0x144>)
 800245c:	2200      	movs	r2, #0
 800245e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002460:	4b43      	ldr	r3, [pc, #268]	; (8002570 <MX_RTC_Init+0x144>)
 8002462:	227f      	movs	r2, #127	; 0x7f
 8002464:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002466:	4b42      	ldr	r3, [pc, #264]	; (8002570 <MX_RTC_Init+0x144>)
 8002468:	22ff      	movs	r2, #255	; 0xff
 800246a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800246c:	4b40      	ldr	r3, [pc, #256]	; (8002570 <MX_RTC_Init+0x144>)
 800246e:	2200      	movs	r2, #0
 8002470:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002472:	4b3f      	ldr	r3, [pc, #252]	; (8002570 <MX_RTC_Init+0x144>)
 8002474:	2200      	movs	r2, #0
 8002476:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002478:	4b3d      	ldr	r3, [pc, #244]	; (8002570 <MX_RTC_Init+0x144>)
 800247a:	2200      	movs	r2, #0
 800247c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800247e:	483c      	ldr	r0, [pc, #240]	; (8002570 <MX_RTC_Init+0x144>)
 8002480:	f006 fc7c 	bl	8008d7c <HAL_RTC_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800248a:	f000 fe99 	bl	80031c0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800248e:	2300      	movs	r3, #0
 8002490:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8002494:	2300      	movs	r3, #0
 8002496:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800249a:	2300      	movs	r3, #0
 800249c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80024a0:	2300      	movs	r3, #0
 80024a2:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80024a4:	2300      	movs	r3, #0
 80024a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80024a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024ac:	2201      	movs	r2, #1
 80024ae:	4619      	mov	r1, r3
 80024b0:	482f      	ldr	r0, [pc, #188]	; (8002570 <MX_RTC_Init+0x144>)
 80024b2:	f006 fcf5 	bl	8008ea0 <HAL_RTC_SetTime>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80024bc:	f000 fe80 	bl	80031c0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80024c0:	2301      	movs	r3, #1
 80024c2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80024c6:	2301      	movs	r3, #1
 80024c8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80024cc:	2301      	movs	r3, #1
 80024ce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80024d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024dc:	2201      	movs	r2, #1
 80024de:	4619      	mov	r1, r3
 80024e0:	4823      	ldr	r0, [pc, #140]	; (8002570 <MX_RTC_Init+0x144>)
 80024e2:	f006 fd9b 	bl	800901c <HAL_RTC_SetDate>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80024ec:	f000 fe68 	bl	80031c0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002500:	2300      	movs	r3, #0
 8002502:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002508:	2300      	movs	r3, #0
 800250a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800250c:	2300      	movs	r3, #0
 800250e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002510:	2300      	movs	r3, #0
 8002512:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002514:	2301      	movs	r3, #1
 8002516:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800251a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800251e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002520:	463b      	mov	r3, r7
 8002522:	2201      	movs	r2, #1
 8002524:	4619      	mov	r1, r3
 8002526:	4812      	ldr	r0, [pc, #72]	; (8002570 <MX_RTC_Init+0x144>)
 8002528:	f006 fe20 	bl	800916c <HAL_RTC_SetAlarm>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8002532:	f000 fe45 	bl	80031c0 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800253a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800253c:	463b      	mov	r3, r7
 800253e:	2201      	movs	r2, #1
 8002540:	4619      	mov	r1, r3
 8002542:	480b      	ldr	r0, [pc, #44]	; (8002570 <MX_RTC_Init+0x144>)
 8002544:	f006 fe12 	bl	800916c <HAL_RTC_SetAlarm>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 800254e:	f000 fe37 	bl	80031c0 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8002552:	2202      	movs	r2, #2
 8002554:	2100      	movs	r1, #0
 8002556:	4806      	ldr	r0, [pc, #24]	; (8002570 <MX_RTC_Init+0x144>)
 8002558:	f006 ff92 	bl	8009480 <HAL_RTCEx_SetTimeStamp>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8002562:	f000 fe2d 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002566:	bf00      	nop
 8002568:	3748      	adds	r7, #72	; 0x48
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000e78 	.word	0x20000e78
 8002574:	40002800 	.word	0x40002800

08002578 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 800257c:	4b4d      	ldr	r3, [pc, #308]	; (80026b4 <MX_SAI2_Init+0x13c>)
 800257e:	4a4e      	ldr	r2, [pc, #312]	; (80026b8 <MX_SAI2_Init+0x140>)
 8002580:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8002582:	4b4c      	ldr	r3, [pc, #304]	; (80026b4 <MX_SAI2_Init+0x13c>)
 8002584:	2200      	movs	r2, #0
 8002586:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8002588:	4b4a      	ldr	r3, [pc, #296]	; (80026b4 <MX_SAI2_Init+0x13c>)
 800258a:	2200      	movs	r2, #0
 800258c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800258e:	4b49      	ldr	r3, [pc, #292]	; (80026b4 <MX_SAI2_Init+0x13c>)
 8002590:	2240      	movs	r2, #64	; 0x40
 8002592:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002594:	4b47      	ldr	r3, [pc, #284]	; (80026b4 <MX_SAI2_Init+0x13c>)
 8002596:	2200      	movs	r2, #0
 8002598:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800259a:	4b46      	ldr	r3, [pc, #280]	; (80026b4 <MX_SAI2_Init+0x13c>)
 800259c:	2200      	movs	r2, #0
 800259e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80025a0:	4b44      	ldr	r3, [pc, #272]	; (80026b4 <MX_SAI2_Init+0x13c>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80025a6:	4b43      	ldr	r3, [pc, #268]	; (80026b4 <MX_SAI2_Init+0x13c>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80025ac:	4b41      	ldr	r3, [pc, #260]	; (80026b4 <MX_SAI2_Init+0x13c>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80025b2:	4b40      	ldr	r3, [pc, #256]	; (80026b4 <MX_SAI2_Init+0x13c>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80025b8:	4b3e      	ldr	r3, [pc, #248]	; (80026b4 <MX_SAI2_Init+0x13c>)
 80025ba:	4a40      	ldr	r2, [pc, #256]	; (80026bc <MX_SAI2_Init+0x144>)
 80025bc:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80025be:	4b3d      	ldr	r3, [pc, #244]	; (80026b4 <MX_SAI2_Init+0x13c>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80025c4:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <MX_SAI2_Init+0x13c>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80025ca:	4b3a      	ldr	r3, [pc, #232]	; (80026b4 <MX_SAI2_Init+0x13c>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80025d0:	4b38      	ldr	r3, [pc, #224]	; (80026b4 <MX_SAI2_Init+0x13c>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80025d6:	4b37      	ldr	r3, [pc, #220]	; (80026b4 <MX_SAI2_Init+0x13c>)
 80025d8:	2208      	movs	r2, #8
 80025da:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80025dc:	4b35      	ldr	r3, [pc, #212]	; (80026b4 <MX_SAI2_Init+0x13c>)
 80025de:	2201      	movs	r2, #1
 80025e0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80025e2:	4b34      	ldr	r3, [pc, #208]	; (80026b4 <MX_SAI2_Init+0x13c>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80025e8:	4b32      	ldr	r3, [pc, #200]	; (80026b4 <MX_SAI2_Init+0x13c>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80025ee:	4b31      	ldr	r3, [pc, #196]	; (80026b4 <MX_SAI2_Init+0x13c>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80025f4:	4b2f      	ldr	r3, [pc, #188]	; (80026b4 <MX_SAI2_Init+0x13c>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80025fa:	4b2e      	ldr	r3, [pc, #184]	; (80026b4 <MX_SAI2_Init+0x13c>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8002600:	4b2c      	ldr	r3, [pc, #176]	; (80026b4 <MX_SAI2_Init+0x13c>)
 8002602:	2201      	movs	r2, #1
 8002604:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8002606:	4b2b      	ldr	r3, [pc, #172]	; (80026b4 <MX_SAI2_Init+0x13c>)
 8002608:	2200      	movs	r2, #0
 800260a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800260c:	4829      	ldr	r0, [pc, #164]	; (80026b4 <MX_SAI2_Init+0x13c>)
 800260e:	f006 ff8d 	bl	800952c <HAL_SAI_Init>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8002618:	f000 fdd2 	bl	80031c0 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800261c:	4b28      	ldr	r3, [pc, #160]	; (80026c0 <MX_SAI2_Init+0x148>)
 800261e:	4a29      	ldr	r2, [pc, #164]	; (80026c4 <MX_SAI2_Init+0x14c>)
 8002620:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8002622:	4b27      	ldr	r3, [pc, #156]	; (80026c0 <MX_SAI2_Init+0x148>)
 8002624:	2200      	movs	r2, #0
 8002626:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8002628:	4b25      	ldr	r3, [pc, #148]	; (80026c0 <MX_SAI2_Init+0x148>)
 800262a:	2203      	movs	r2, #3
 800262c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800262e:	4b24      	ldr	r3, [pc, #144]	; (80026c0 <MX_SAI2_Init+0x148>)
 8002630:	2240      	movs	r2, #64	; 0x40
 8002632:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002634:	4b22      	ldr	r3, [pc, #136]	; (80026c0 <MX_SAI2_Init+0x148>)
 8002636:	2200      	movs	r2, #0
 8002638:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800263a:	4b21      	ldr	r3, [pc, #132]	; (80026c0 <MX_SAI2_Init+0x148>)
 800263c:	2200      	movs	r2, #0
 800263e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8002640:	4b1f      	ldr	r3, [pc, #124]	; (80026c0 <MX_SAI2_Init+0x148>)
 8002642:	2201      	movs	r2, #1
 8002644:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002646:	4b1e      	ldr	r3, [pc, #120]	; (80026c0 <MX_SAI2_Init+0x148>)
 8002648:	2200      	movs	r2, #0
 800264a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800264c:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <MX_SAI2_Init+0x148>)
 800264e:	2200      	movs	r2, #0
 8002650:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002652:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <MX_SAI2_Init+0x148>)
 8002654:	2200      	movs	r2, #0
 8002656:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002658:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <MX_SAI2_Init+0x148>)
 800265a:	2200      	movs	r2, #0
 800265c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800265e:	4b18      	ldr	r3, [pc, #96]	; (80026c0 <MX_SAI2_Init+0x148>)
 8002660:	2200      	movs	r2, #0
 8002662:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002664:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <MX_SAI2_Init+0x148>)
 8002666:	2200      	movs	r2, #0
 8002668:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800266a:	4b15      	ldr	r3, [pc, #84]	; (80026c0 <MX_SAI2_Init+0x148>)
 800266c:	2208      	movs	r2, #8
 800266e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8002670:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <MX_SAI2_Init+0x148>)
 8002672:	2201      	movs	r2, #1
 8002674:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002676:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <MX_SAI2_Init+0x148>)
 8002678:	2200      	movs	r2, #0
 800267a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800267c:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <MX_SAI2_Init+0x148>)
 800267e:	2200      	movs	r2, #0
 8002680:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002682:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <MX_SAI2_Init+0x148>)
 8002684:	2200      	movs	r2, #0
 8002686:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8002688:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <MX_SAI2_Init+0x148>)
 800268a:	2200      	movs	r2, #0
 800268c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800268e:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <MX_SAI2_Init+0x148>)
 8002690:	2200      	movs	r2, #0
 8002692:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8002694:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <MX_SAI2_Init+0x148>)
 8002696:	2201      	movs	r2, #1
 8002698:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800269a:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <MX_SAI2_Init+0x148>)
 800269c:	2200      	movs	r2, #0
 800269e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80026a0:	4807      	ldr	r0, [pc, #28]	; (80026c0 <MX_SAI2_Init+0x148>)
 80026a2:	f006 ff43 	bl	800952c <HAL_SAI_Init>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 80026ac:	f000 fd88 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80026b0:	bf00      	nop
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20000aa4 	.word	0x20000aa4
 80026b8:	40015c04 	.word	0x40015c04
 80026bc:	0002ee00 	.word	0x0002ee00
 80026c0:	2000093c 	.word	0x2000093c
 80026c4:	40015c24 	.word	0x40015c24

080026c8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <MX_SDMMC1_SD_Init+0x38>)
 80026ce:	4a0d      	ldr	r2, [pc, #52]	; (8002704 <MX_SDMMC1_SD_Init+0x3c>)
 80026d0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80026d2:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <MX_SDMMC1_SD_Init+0x38>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <MX_SDMMC1_SD_Init+0x38>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80026de:	4b08      	ldr	r3, [pc, #32]	; (8002700 <MX_SDMMC1_SD_Init+0x38>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <MX_SDMMC1_SD_Init+0x38>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80026ea:	4b05      	ldr	r3, [pc, #20]	; (8002700 <MX_SDMMC1_SD_Init+0x38>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80026f0:	4b03      	ldr	r3, [pc, #12]	; (8002700 <MX_SDMMC1_SD_Init+0x38>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80026f6:	bf00      	nop
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	20000b98 	.word	0x20000b98
 8002704:	40012c00 	.word	0x40012c00

08002708 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 800270c:	4b15      	ldr	r3, [pc, #84]	; (8002764 <MX_SPDIFRX_Init+0x5c>)
 800270e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002712:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8002714:	4b13      	ldr	r3, [pc, #76]	; (8002764 <MX_SPDIFRX_Init+0x5c>)
 8002716:	2200      	movs	r2, #0
 8002718:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <MX_SPDIFRX_Init+0x5c>)
 800271c:	2200      	movs	r2, #0
 800271e:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8002720:	4b10      	ldr	r3, [pc, #64]	; (8002764 <MX_SPDIFRX_Init+0x5c>)
 8002722:	2200      	movs	r2, #0
 8002724:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8002726:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <MX_SPDIFRX_Init+0x5c>)
 8002728:	2200      	movs	r2, #0
 800272a:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 800272c:	4b0d      	ldr	r3, [pc, #52]	; (8002764 <MX_SPDIFRX_Init+0x5c>)
 800272e:	2200      	movs	r2, #0
 8002730:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8002732:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <MX_SPDIFRX_Init+0x5c>)
 8002734:	2200      	movs	r2, #0
 8002736:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8002738:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <MX_SPDIFRX_Init+0x5c>)
 800273a:	2200      	movs	r2, #0
 800273c:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <MX_SPDIFRX_Init+0x5c>)
 8002740:	2200      	movs	r2, #0
 8002742:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8002744:	4b07      	ldr	r3, [pc, #28]	; (8002764 <MX_SPDIFRX_Init+0x5c>)
 8002746:	2200      	movs	r2, #0
 8002748:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <MX_SPDIFRX_Init+0x5c>)
 800274c:	2200      	movs	r2, #0
 800274e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8002750:	4804      	ldr	r0, [pc, #16]	; (8002764 <MX_SPDIFRX_Init+0x5c>)
 8002752:	f008 fa65 	bl	800ac20 <HAL_SPDIFRX_Init>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 800275c:	f000 fd30 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8002760:	bf00      	nop
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20000a58 	.word	0x20000a58

08002768 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b09a      	sub	sp, #104	; 0x68
 800276c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800276e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	605a      	str	r2, [r3, #4]
 8002778:	609a      	str	r2, [r3, #8]
 800277a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800277c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002788:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
 8002798:	615a      	str	r2, [r3, #20]
 800279a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800279c:	1d3b      	adds	r3, r7, #4
 800279e:	222c      	movs	r2, #44	; 0x2c
 80027a0:	2100      	movs	r1, #0
 80027a2:	4618      	mov	r0, r3
 80027a4:	f00f fe52 	bl	801244c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027a8:	4b43      	ldr	r3, [pc, #268]	; (80028b8 <MX_TIM1_Init+0x150>)
 80027aa:	4a44      	ldr	r2, [pc, #272]	; (80028bc <MX_TIM1_Init+0x154>)
 80027ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80027ae:	4b42      	ldr	r3, [pc, #264]	; (80028b8 <MX_TIM1_Init+0x150>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b4:	4b40      	ldr	r3, [pc, #256]	; (80028b8 <MX_TIM1_Init+0x150>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80027ba:	4b3f      	ldr	r3, [pc, #252]	; (80028b8 <MX_TIM1_Init+0x150>)
 80027bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c2:	4b3d      	ldr	r3, [pc, #244]	; (80028b8 <MX_TIM1_Init+0x150>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027c8:	4b3b      	ldr	r3, [pc, #236]	; (80028b8 <MX_TIM1_Init+0x150>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ce:	4b3a      	ldr	r3, [pc, #232]	; (80028b8 <MX_TIM1_Init+0x150>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80027d4:	4838      	ldr	r0, [pc, #224]	; (80028b8 <MX_TIM1_Init+0x150>)
 80027d6:	f008 fa7f 	bl	800acd8 <HAL_TIM_Base_Init>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80027e0:	f000 fcee 	bl	80031c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80027ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80027ee:	4619      	mov	r1, r3
 80027f0:	4831      	ldr	r0, [pc, #196]	; (80028b8 <MX_TIM1_Init+0x150>)
 80027f2:	f008 fcab 	bl	800b14c <HAL_TIM_ConfigClockSource>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80027fc:	f000 fce0 	bl	80031c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002800:	482d      	ldr	r0, [pc, #180]	; (80028b8 <MX_TIM1_Init+0x150>)
 8002802:	f008 fb31 	bl	800ae68 <HAL_TIM_PWM_Init>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800280c:	f000 fcd8 	bl	80031c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002810:	2300      	movs	r3, #0
 8002812:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002814:	2300      	movs	r3, #0
 8002816:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002818:	2300      	movs	r3, #0
 800281a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800281c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002820:	4619      	mov	r1, r3
 8002822:	4825      	ldr	r0, [pc, #148]	; (80028b8 <MX_TIM1_Init+0x150>)
 8002824:	f009 f8f0 	bl	800ba08 <HAL_TIMEx_MasterConfigSynchronization>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800282e:	f000 fcc7 	bl	80031c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002832:	2360      	movs	r3, #96	; 0x60
 8002834:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002836:	2300      	movs	r3, #0
 8002838:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800283a:	2300      	movs	r3, #0
 800283c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800283e:	2300      	movs	r3, #0
 8002840:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002842:	2300      	movs	r3, #0
 8002844:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002846:	2300      	movs	r3, #0
 8002848:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800284a:	2300      	movs	r3, #0
 800284c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800284e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002852:	2200      	movs	r2, #0
 8002854:	4619      	mov	r1, r3
 8002856:	4818      	ldr	r0, [pc, #96]	; (80028b8 <MX_TIM1_Init+0x150>)
 8002858:	f008 fb68 	bl	800af2c <HAL_TIM_PWM_ConfigChannel>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002862:	f000 fcad 	bl	80031c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002866:	2300      	movs	r3, #0
 8002868:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800286a:	2300      	movs	r3, #0
 800286c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800287a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800287e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002884:	2300      	movs	r3, #0
 8002886:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002888:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002892:	2300      	movs	r3, #0
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002896:	1d3b      	adds	r3, r7, #4
 8002898:	4619      	mov	r1, r3
 800289a:	4807      	ldr	r0, [pc, #28]	; (80028b8 <MX_TIM1_Init+0x150>)
 800289c:	f009 f942 	bl	800bb24 <HAL_TIMEx_ConfigBreakDeadTime>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80028a6:	f000 fc8b 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80028aa:	4803      	ldr	r0, [pc, #12]	; (80028b8 <MX_TIM1_Init+0x150>)
 80028ac:	f001 f944 	bl	8003b38 <HAL_TIM_MspPostInit>

}
 80028b0:	bf00      	nop
 80028b2:	3768      	adds	r7, #104	; 0x68
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000e98 	.word	0x20000e98
 80028bc:	40010000 	.word	0x40010000

080028c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08e      	sub	sp, #56	; 0x38
 80028c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	605a      	str	r2, [r3, #4]
 80028d0:	609a      	str	r2, [r3, #8]
 80028d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028d4:	f107 031c 	add.w	r3, r7, #28
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028e0:	463b      	mov	r3, r7
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	605a      	str	r2, [r3, #4]
 80028e8:	609a      	str	r2, [r3, #8]
 80028ea:	60da      	str	r2, [r3, #12]
 80028ec:	611a      	str	r2, [r3, #16]
 80028ee:	615a      	str	r2, [r3, #20]
 80028f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028f2:	4b2d      	ldr	r3, [pc, #180]	; (80029a8 <MX_TIM2_Init+0xe8>)
 80028f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80028fa:	4b2b      	ldr	r3, [pc, #172]	; (80029a8 <MX_TIM2_Init+0xe8>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002900:	4b29      	ldr	r3, [pc, #164]	; (80029a8 <MX_TIM2_Init+0xe8>)
 8002902:	2200      	movs	r2, #0
 8002904:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002906:	4b28      	ldr	r3, [pc, #160]	; (80029a8 <MX_TIM2_Init+0xe8>)
 8002908:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800290c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800290e:	4b26      	ldr	r3, [pc, #152]	; (80029a8 <MX_TIM2_Init+0xe8>)
 8002910:	2200      	movs	r2, #0
 8002912:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002914:	4b24      	ldr	r3, [pc, #144]	; (80029a8 <MX_TIM2_Init+0xe8>)
 8002916:	2200      	movs	r2, #0
 8002918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800291a:	4823      	ldr	r0, [pc, #140]	; (80029a8 <MX_TIM2_Init+0xe8>)
 800291c:	f008 f9dc 	bl	800acd8 <HAL_TIM_Base_Init>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002926:	f000 fc4b 	bl	80031c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800292a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002930:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002934:	4619      	mov	r1, r3
 8002936:	481c      	ldr	r0, [pc, #112]	; (80029a8 <MX_TIM2_Init+0xe8>)
 8002938:	f008 fc08 	bl	800b14c <HAL_TIM_ConfigClockSource>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002942:	f000 fc3d 	bl	80031c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002946:	4818      	ldr	r0, [pc, #96]	; (80029a8 <MX_TIM2_Init+0xe8>)
 8002948:	f008 fa8e 	bl	800ae68 <HAL_TIM_PWM_Init>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002952:	f000 fc35 	bl	80031c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800295a:	2300      	movs	r3, #0
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800295e:	f107 031c 	add.w	r3, r7, #28
 8002962:	4619      	mov	r1, r3
 8002964:	4810      	ldr	r0, [pc, #64]	; (80029a8 <MX_TIM2_Init+0xe8>)
 8002966:	f009 f84f 	bl	800ba08 <HAL_TIMEx_MasterConfigSynchronization>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002970:	f000 fc26 	bl	80031c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002974:	2360      	movs	r3, #96	; 0x60
 8002976:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800297c:	2300      	movs	r3, #0
 800297e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002980:	2300      	movs	r3, #0
 8002982:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002984:	463b      	mov	r3, r7
 8002986:	2200      	movs	r2, #0
 8002988:	4619      	mov	r1, r3
 800298a:	4807      	ldr	r0, [pc, #28]	; (80029a8 <MX_TIM2_Init+0xe8>)
 800298c:	f008 face 	bl	800af2c <HAL_TIM_PWM_ConfigChannel>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002996:	f000 fc13 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800299a:	4803      	ldr	r0, [pc, #12]	; (80029a8 <MX_TIM2_Init+0xe8>)
 800299c:	f001 f8cc 	bl	8003b38 <HAL_TIM_MspPostInit>

}
 80029a0:	bf00      	nop
 80029a2:	3738      	adds	r7, #56	; 0x38
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20000fa8 	.word	0x20000fa8

080029ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08e      	sub	sp, #56	; 0x38
 80029b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	609a      	str	r2, [r3, #8]
 80029be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029c0:	f107 031c 	add.w	r3, r7, #28
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029cc:	463b      	mov	r3, r7
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	605a      	str	r2, [r3, #4]
 80029d4:	609a      	str	r2, [r3, #8]
 80029d6:	60da      	str	r2, [r3, #12]
 80029d8:	611a      	str	r2, [r3, #16]
 80029da:	615a      	str	r2, [r3, #20]
 80029dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029de:	4b2d      	ldr	r3, [pc, #180]	; (8002a94 <MX_TIM3_Init+0xe8>)
 80029e0:	4a2d      	ldr	r2, [pc, #180]	; (8002a98 <MX_TIM3_Init+0xec>)
 80029e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80029e4:	4b2b      	ldr	r3, [pc, #172]	; (8002a94 <MX_TIM3_Init+0xe8>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ea:	4b2a      	ldr	r3, [pc, #168]	; (8002a94 <MX_TIM3_Init+0xe8>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80029f0:	4b28      	ldr	r3, [pc, #160]	; (8002a94 <MX_TIM3_Init+0xe8>)
 80029f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029f8:	4b26      	ldr	r3, [pc, #152]	; (8002a94 <MX_TIM3_Init+0xe8>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029fe:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <MX_TIM3_Init+0xe8>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a04:	4823      	ldr	r0, [pc, #140]	; (8002a94 <MX_TIM3_Init+0xe8>)
 8002a06:	f008 f967 	bl	800acd8 <HAL_TIM_Base_Init>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002a10:	f000 fbd6 	bl	80031c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a1e:	4619      	mov	r1, r3
 8002a20:	481c      	ldr	r0, [pc, #112]	; (8002a94 <MX_TIM3_Init+0xe8>)
 8002a22:	f008 fb93 	bl	800b14c <HAL_TIM_ConfigClockSource>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002a2c:	f000 fbc8 	bl	80031c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a30:	4818      	ldr	r0, [pc, #96]	; (8002a94 <MX_TIM3_Init+0xe8>)
 8002a32:	f008 fa19 	bl	800ae68 <HAL_TIM_PWM_Init>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002a3c:	f000 fbc0 	bl	80031c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a44:	2300      	movs	r3, #0
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a48:	f107 031c 	add.w	r3, r7, #28
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4811      	ldr	r0, [pc, #68]	; (8002a94 <MX_TIM3_Init+0xe8>)
 8002a50:	f008 ffda 	bl	800ba08 <HAL_TIMEx_MasterConfigSynchronization>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002a5a:	f000 fbb1 	bl	80031c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a5e:	2360      	movs	r3, #96	; 0x60
 8002a60:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a6e:	463b      	mov	r3, r7
 8002a70:	2200      	movs	r2, #0
 8002a72:	4619      	mov	r1, r3
 8002a74:	4807      	ldr	r0, [pc, #28]	; (8002a94 <MX_TIM3_Init+0xe8>)
 8002a76:	f008 fa59 	bl	800af2c <HAL_TIM_PWM_ConfigChannel>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002a80:	f000 fb9e 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a84:	4803      	ldr	r0, [pc, #12]	; (8002a94 <MX_TIM3_Init+0xe8>)
 8002a86:	f001 f857 	bl	8003b38 <HAL_TIM_MspPostInit>

}
 8002a8a:	bf00      	nop
 8002a8c:	3738      	adds	r7, #56	; 0x38
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000c68 	.word	0x20000c68
 8002a98:	40000400 	.word	0x40000400

08002a9c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08e      	sub	sp, #56	; 0x38
 8002aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	605a      	str	r2, [r3, #4]
 8002aac:	609a      	str	r2, [r3, #8]
 8002aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ab0:	f107 031c 	add.w	r3, r7, #28
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002abc:	463b      	mov	r3, r7
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	605a      	str	r2, [r3, #4]
 8002ac4:	609a      	str	r2, [r3, #8]
 8002ac6:	60da      	str	r2, [r3, #12]
 8002ac8:	611a      	str	r2, [r3, #16]
 8002aca:	615a      	str	r2, [r3, #20]
 8002acc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002ace:	4b2d      	ldr	r3, [pc, #180]	; (8002b84 <MX_TIM5_Init+0xe8>)
 8002ad0:	4a2d      	ldr	r2, [pc, #180]	; (8002b88 <MX_TIM5_Init+0xec>)
 8002ad2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002ad4:	4b2b      	ldr	r3, [pc, #172]	; (8002b84 <MX_TIM5_Init+0xe8>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ada:	4b2a      	ldr	r3, [pc, #168]	; (8002b84 <MX_TIM5_Init+0xe8>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002ae0:	4b28      	ldr	r3, [pc, #160]	; (8002b84 <MX_TIM5_Init+0xe8>)
 8002ae2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ae6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ae8:	4b26      	ldr	r3, [pc, #152]	; (8002b84 <MX_TIM5_Init+0xe8>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aee:	4b25      	ldr	r3, [pc, #148]	; (8002b84 <MX_TIM5_Init+0xe8>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002af4:	4823      	ldr	r0, [pc, #140]	; (8002b84 <MX_TIM5_Init+0xe8>)
 8002af6:	f008 f8ef 	bl	800acd8 <HAL_TIM_Base_Init>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002b00:	f000 fb5e 	bl	80031c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b08:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002b0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b0e:	4619      	mov	r1, r3
 8002b10:	481c      	ldr	r0, [pc, #112]	; (8002b84 <MX_TIM5_Init+0xe8>)
 8002b12:	f008 fb1b 	bl	800b14c <HAL_TIM_ConfigClockSource>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002b1c:	f000 fb50 	bl	80031c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002b20:	4818      	ldr	r0, [pc, #96]	; (8002b84 <MX_TIM5_Init+0xe8>)
 8002b22:	f008 f9a1 	bl	800ae68 <HAL_TIM_PWM_Init>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002b2c:	f000 fb48 	bl	80031c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b38:	f107 031c 	add.w	r3, r7, #28
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4811      	ldr	r0, [pc, #68]	; (8002b84 <MX_TIM5_Init+0xe8>)
 8002b40:	f008 ff62 	bl	800ba08 <HAL_TIMEx_MasterConfigSynchronization>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002b4a:	f000 fb39 	bl	80031c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b4e:	2360      	movs	r3, #96	; 0x60
 8002b50:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002b52:	2300      	movs	r3, #0
 8002b54:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b56:	2300      	movs	r3, #0
 8002b58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b5e:	463b      	mov	r3, r7
 8002b60:	220c      	movs	r2, #12
 8002b62:	4619      	mov	r1, r3
 8002b64:	4807      	ldr	r0, [pc, #28]	; (8002b84 <MX_TIM5_Init+0xe8>)
 8002b66:	f008 f9e1 	bl	800af2c <HAL_TIM_PWM_ConfigChannel>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002b70:	f000 fb26 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002b74:	4803      	ldr	r0, [pc, #12]	; (8002b84 <MX_TIM5_Init+0xe8>)
 8002b76:	f000 ffdf 	bl	8003b38 <HAL_TIM_MspPostInit>

}
 8002b7a:	bf00      	nop
 8002b7c:	3738      	adds	r7, #56	; 0x38
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000c1c 	.word	0x20000c1c
 8002b88:	40000c00 	.word	0x40000c00

08002b8c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b92:	f107 0310 	add.w	r3, r7, #16
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	605a      	str	r2, [r3, #4]
 8002b9c:	609a      	str	r2, [r3, #8]
 8002b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ba0:	1d3b      	adds	r3, r7, #4
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	605a      	str	r2, [r3, #4]
 8002ba8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002baa:	4b20      	ldr	r3, [pc, #128]	; (8002c2c <MX_TIM8_Init+0xa0>)
 8002bac:	4a20      	ldr	r2, [pc, #128]	; (8002c30 <MX_TIM8_Init+0xa4>)
 8002bae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002bb0:	4b1e      	ldr	r3, [pc, #120]	; (8002c2c <MX_TIM8_Init+0xa0>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb6:	4b1d      	ldr	r3, [pc, #116]	; (8002c2c <MX_TIM8_Init+0xa0>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <MX_TIM8_Init+0xa0>)
 8002bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bc2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bc4:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <MX_TIM8_Init+0xa0>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002bca:	4b18      	ldr	r3, [pc, #96]	; (8002c2c <MX_TIM8_Init+0xa0>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bd0:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <MX_TIM8_Init+0xa0>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002bd6:	4815      	ldr	r0, [pc, #84]	; (8002c2c <MX_TIM8_Init+0xa0>)
 8002bd8:	f008 f87e 	bl	800acd8 <HAL_TIM_Base_Init>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002be2:	f000 faed 	bl	80031c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002bec:	f107 0310 	add.w	r3, r7, #16
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	480e      	ldr	r0, [pc, #56]	; (8002c2c <MX_TIM8_Init+0xa0>)
 8002bf4:	f008 faaa 	bl	800b14c <HAL_TIM_ConfigClockSource>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002bfe:	f000 fadf 	bl	80031c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c02:	2300      	movs	r3, #0
 8002c04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002c0e:	1d3b      	adds	r3, r7, #4
 8002c10:	4619      	mov	r1, r3
 8002c12:	4806      	ldr	r0, [pc, #24]	; (8002c2c <MX_TIM8_Init+0xa0>)
 8002c14:	f008 fef8 	bl	800ba08 <HAL_TIMEx_MasterConfigSynchronization>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002c1e:	f000 facf 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002c22:	bf00      	nop
 8002c24:	3720      	adds	r7, #32
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000a0c 	.word	0x20000a0c
 8002c30:	40010400 	.word	0x40010400

08002c34 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c3a:	463b      	mov	r3, r7
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	609a      	str	r2, [r3, #8]
 8002c44:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002c46:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <MX_TIM12_Init+0x6c>)
 8002c48:	4a16      	ldr	r2, [pc, #88]	; (8002ca4 <MX_TIM12_Init+0x70>)
 8002c4a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 80 - 1;
 8002c4c:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <MX_TIM12_Init+0x6c>)
 8002c4e:	224f      	movs	r2, #79	; 0x4f
 8002c50:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c52:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <MX_TIM12_Init+0x6c>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002c58:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <MX_TIM12_Init+0x6c>)
 8002c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c5e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c60:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <MX_TIM12_Init+0x6c>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c66:	4b0e      	ldr	r3, [pc, #56]	; (8002ca0 <MX_TIM12_Init+0x6c>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002c6c:	480c      	ldr	r0, [pc, #48]	; (8002ca0 <MX_TIM12_Init+0x6c>)
 8002c6e:	f008 f833 	bl	800acd8 <HAL_TIM_Base_Init>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8002c78:	f000 faa2 	bl	80031c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c80:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002c82:	463b      	mov	r3, r7
 8002c84:	4619      	mov	r1, r3
 8002c86:	4806      	ldr	r0, [pc, #24]	; (8002ca0 <MX_TIM12_Init+0x6c>)
 8002c88:	f008 fa60 	bl	800b14c <HAL_TIM_ConfigClockSource>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8002c92:	f000 fa95 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000ff4 	.word	0x20000ff4
 8002ca4:	40001800 	.word	0x40001800

08002ca8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002cac:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <MX_USART1_UART_Init+0x58>)
 8002cae:	4a15      	ldr	r2, [pc, #84]	; (8002d04 <MX_USART1_UART_Init+0x5c>)
 8002cb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002cb2:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <MX_USART1_UART_Init+0x58>)
 8002cb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cba:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <MX_USART1_UART_Init+0x58>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <MX_USART1_UART_Init+0x58>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <MX_USART1_UART_Init+0x58>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <MX_USART1_UART_Init+0x58>)
 8002cce:	220c      	movs	r2, #12
 8002cd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <MX_USART1_UART_Init+0x58>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cd8:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <MX_USART1_UART_Init+0x58>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cde:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <MX_USART1_UART_Init+0x58>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <MX_USART1_UART_Init+0x58>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002cea:	4805      	ldr	r0, [pc, #20]	; (8002d00 <MX_USART1_UART_Init+0x58>)
 8002cec:	f008 ff98 	bl	800bc20 <HAL_UART_Init>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002cf6:	f000 fa63 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000df4 	.word	0x20000df4
 8002d04:	40011000 	.word	0x40011000

08002d08 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002d0c:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <MX_USART6_UART_Init+0x58>)
 8002d0e:	4a15      	ldr	r2, [pc, #84]	; (8002d64 <MX_USART6_UART_Init+0x5c>)
 8002d10:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002d12:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <MX_USART6_UART_Init+0x58>)
 8002d14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d18:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002d1a:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <MX_USART6_UART_Init+0x58>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002d20:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <MX_USART6_UART_Init+0x58>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002d26:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <MX_USART6_UART_Init+0x58>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <MX_USART6_UART_Init+0x58>)
 8002d2e:	220c      	movs	r2, #12
 8002d30:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d32:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <MX_USART6_UART_Init+0x58>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <MX_USART6_UART_Init+0x58>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d3e:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <MX_USART6_UART_Init+0x58>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d44:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <MX_USART6_UART_Init+0x58>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002d4a:	4805      	ldr	r0, [pc, #20]	; (8002d60 <MX_USART6_UART_Init+0x58>)
 8002d4c:	f008 ff68 	bl	800bc20 <HAL_UART_Init>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002d56:	f000 fa33 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000ee4 	.word	0x20000ee4
 8002d64:	40011400 	.word	0x40011400

08002d68 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002d6e:	1d3b      	adds	r3, r7, #4
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	60da      	str	r2, [r3, #12]
 8002d7a:	611a      	str	r2, [r3, #16]
 8002d7c:	615a      	str	r2, [r3, #20]
 8002d7e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002d80:	4b1f      	ldr	r3, [pc, #124]	; (8002e00 <MX_FMC_Init+0x98>)
 8002d82:	4a20      	ldr	r2, [pc, #128]	; (8002e04 <MX_FMC_Init+0x9c>)
 8002d84:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002d86:	4b1e      	ldr	r3, [pc, #120]	; (8002e00 <MX_FMC_Init+0x98>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002d8c:	4b1c      	ldr	r3, [pc, #112]	; (8002e00 <MX_FMC_Init+0x98>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002d92:	4b1b      	ldr	r3, [pc, #108]	; (8002e00 <MX_FMC_Init+0x98>)
 8002d94:	2204      	movs	r2, #4
 8002d96:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002d98:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <MX_FMC_Init+0x98>)
 8002d9a:	2210      	movs	r2, #16
 8002d9c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002d9e:	4b18      	ldr	r3, [pc, #96]	; (8002e00 <MX_FMC_Init+0x98>)
 8002da0:	2240      	movs	r2, #64	; 0x40
 8002da2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002da4:	4b16      	ldr	r3, [pc, #88]	; (8002e00 <MX_FMC_Init+0x98>)
 8002da6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002daa:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002dac:	4b14      	ldr	r3, [pc, #80]	; (8002e00 <MX_FMC_Init+0x98>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002db2:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <MX_FMC_Init+0x98>)
 8002db4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002db8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002dba:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <MX_FMC_Init+0x98>)
 8002dbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002dc0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002dc2:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <MX_FMC_Init+0x98>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002dc8:	2302      	movs	r3, #2
 8002dca:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002dcc:	2307      	movs	r3, #7
 8002dce:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002dd0:	2304      	movs	r3, #4
 8002dd2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002dd4:	2307      	movs	r3, #7
 8002dd6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002de0:	2302      	movs	r3, #2
 8002de2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002de4:	1d3b      	adds	r3, r7, #4
 8002de6:	4619      	mov	r1, r3
 8002de8:	4805      	ldr	r0, [pc, #20]	; (8002e00 <MX_FMC_Init+0x98>)
 8002dea:	f007 fee4 	bl	800abb6 <HAL_SDRAM_Init>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002df4:	f000 f9e4 	bl	80031c0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002df8:	bf00      	nop
 8002dfa:	3720      	adds	r7, #32
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	20001040 	.word	0x20001040
 8002e04:	a0000140 	.word	0xa0000140

08002e08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b090      	sub	sp, #64	; 0x40
 8002e0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	605a      	str	r2, [r3, #4]
 8002e18:	609a      	str	r2, [r3, #8]
 8002e1a:	60da      	str	r2, [r3, #12]
 8002e1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e1e:	4baf      	ldr	r3, [pc, #700]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	4aae      	ldr	r2, [pc, #696]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002e24:	f043 0310 	orr.w	r3, r3, #16
 8002e28:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2a:	4bac      	ldr	r3, [pc, #688]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	f003 0310 	and.w	r3, r3, #16
 8002e32:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e36:	4ba9      	ldr	r3, [pc, #676]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	4aa8      	ldr	r2, [pc, #672]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e40:	6313      	str	r3, [r2, #48]	; 0x30
 8002e42:	4ba6      	ldr	r3, [pc, #664]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e4e:	4ba3      	ldr	r3, [pc, #652]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	4aa2      	ldr	r2, [pc, #648]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002e54:	f043 0302 	orr.w	r3, r3, #2
 8002e58:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5a:	4ba0      	ldr	r3, [pc, #640]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	623b      	str	r3, [r7, #32]
 8002e64:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e66:	4b9d      	ldr	r3, [pc, #628]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	4a9c      	ldr	r2, [pc, #624]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002e6c:	f043 0308 	orr.w	r3, r3, #8
 8002e70:	6313      	str	r3, [r2, #48]	; 0x30
 8002e72:	4b9a      	ldr	r3, [pc, #616]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	61fb      	str	r3, [r7, #28]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e7e:	4b97      	ldr	r3, [pc, #604]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	4a96      	ldr	r2, [pc, #600]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002e84:	f043 0304 	orr.w	r3, r3, #4
 8002e88:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8a:	4b94      	ldr	r3, [pc, #592]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	61bb      	str	r3, [r7, #24]
 8002e94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e96:	4b91      	ldr	r3, [pc, #580]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	4a90      	ldr	r2, [pc, #576]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea2:	4b8e      	ldr	r3, [pc, #568]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002eae:	4b8b      	ldr	r3, [pc, #556]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	4a8a      	ldr	r2, [pc, #552]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002eb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eba:	4b88      	ldr	r3, [pc, #544]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002ec6:	4b85      	ldr	r3, [pc, #532]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	4a84      	ldr	r2, [pc, #528]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed2:	4b82      	ldr	r3, [pc, #520]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002ede:	4b7f      	ldr	r3, [pc, #508]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	4a7e      	ldr	r2, [pc, #504]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002ee4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eea:	4b7c      	ldr	r3, [pc, #496]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef2:	60bb      	str	r3, [r7, #8]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ef6:	4b79      	ldr	r3, [pc, #484]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	4a78      	ldr	r2, [pc, #480]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002efc:	f043 0320 	orr.w	r3, r3, #32
 8002f00:	6313      	str	r3, [r2, #48]	; 0x30
 8002f02:	4b76      	ldr	r3, [pc, #472]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	607b      	str	r3, [r7, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f0e:	4b73      	ldr	r3, [pc, #460]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	4a72      	ldr	r2, [pc, #456]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f18:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1a:	4b70      	ldr	r3, [pc, #448]	; (80030dc <MX_GPIO_Init+0x2d4>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002f26:	2201      	movs	r2, #1
 8002f28:	2120      	movs	r1, #32
 8002f2a:	486d      	ldr	r0, [pc, #436]	; (80030e0 <MX_GPIO_Init+0x2d8>)
 8002f2c:	f002 fa2c 	bl	8005388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 8002f30:	2200      	movs	r2, #0
 8002f32:	210e      	movs	r1, #14
 8002f34:	486b      	ldr	r0, [pc, #428]	; (80030e4 <MX_GPIO_Init+0x2dc>)
 8002f36:	f002 fa27 	bl	8005388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	2108      	movs	r1, #8
 8002f3e:	486a      	ldr	r0, [pc, #424]	; (80030e8 <MX_GPIO_Init+0x2e0>)
 8002f40:	f002 fa22 	bl	8005388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002f44:	2201      	movs	r2, #1
 8002f46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f4a:	4866      	ldr	r0, [pc, #408]	; (80030e4 <MX_GPIO_Init+0x2dc>)
 8002f4c:	f002 fa1c 	bl	8005388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002f50:	2200      	movs	r2, #0
 8002f52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f56:	4865      	ldr	r0, [pc, #404]	; (80030ec <MX_GPIO_Init+0x2e4>)
 8002f58:	f002 fa16 	bl	8005388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	21c8      	movs	r1, #200	; 0xc8
 8002f60:	4863      	ldr	r0, [pc, #396]	; (80030f0 <MX_GPIO_Init+0x2e8>)
 8002f62:	f002 fa11 	bl	8005388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002f66:	2308      	movs	r3, #8
 8002f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002f72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f76:	4619      	mov	r1, r3
 8002f78:	485e      	ldr	r0, [pc, #376]	; (80030f4 <MX_GPIO_Init+0x2ec>)
 8002f7a:	f002 f841 	bl	8005000 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002f7e:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002f82:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f84:	2302      	movs	r3, #2
 8002f86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002f90:	230a      	movs	r3, #10
 8002f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4857      	ldr	r0, [pc, #348]	; (80030f8 <MX_GPIO_Init+0x2f0>)
 8002f9c:	f002 f830 	bl	8005000 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002fae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4851      	ldr	r0, [pc, #324]	; (80030fc <MX_GPIO_Init+0x2f4>)
 8002fb6:	f002 f823 	bl	8005000 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002fba:	2340      	movs	r3, #64	; 0x40
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002fbe:	4b50      	ldr	r3, [pc, #320]	; (8003100 <MX_GPIO_Init+0x2f8>)
 8002fc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002fc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4844      	ldr	r0, [pc, #272]	; (80030e0 <MX_GPIO_Init+0x2d8>)
 8002fce:	f002 f817 	bl	8005000 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002fd2:	2320      	movs	r3, #32
 8002fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002fe2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	483d      	ldr	r0, [pc, #244]	; (80030e0 <MX_GPIO_Init+0x2d8>)
 8002fea:	f002 f809 	bl	8005000 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 8002fee:	f241 030e 	movw	r3, #4110	; 0x100e
 8002ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003000:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003004:	4619      	mov	r1, r3
 8003006:	4837      	ldr	r0, [pc, #220]	; (80030e4 <MX_GPIO_Init+0x2dc>)
 8003008:	f001 fffa 	bl	8005000 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800300c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003012:	2300      	movs	r3, #0
 8003014:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	2300      	movs	r3, #0
 8003018:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800301a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800301e:	4619      	mov	r1, r3
 8003020:	4838      	ldr	r0, [pc, #224]	; (8003104 <MX_GPIO_Init+0x2fc>)
 8003022:	f001 ffed 	bl	8005000 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8003026:	2308      	movs	r3, #8
 8003028:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800302a:	2301      	movs	r3, #1
 800302c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302e:	2300      	movs	r3, #0
 8003030:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003032:	2300      	movs	r3, #0
 8003034:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8003036:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800303a:	4619      	mov	r1, r3
 800303c:	482a      	ldr	r0, [pc, #168]	; (80030e8 <MX_GPIO_Init+0x2e0>)
 800303e:	f001 ffdf 	bl	8005000 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003042:	2310      	movs	r3, #16
 8003044:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003046:	2300      	movs	r3, #0
 8003048:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304a:	2300      	movs	r3, #0
 800304c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800304e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003052:	4619      	mov	r1, r3
 8003054:	4822      	ldr	r0, [pc, #136]	; (80030e0 <MX_GPIO_Init+0x2d8>)
 8003056:	f001 ffd3 	bl	8005000 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800305a:	f248 0304 	movw	r3, #32772	; 0x8004
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003060:	2300      	movs	r3, #0
 8003062:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003064:	2300      	movs	r3, #0
 8003066:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003068:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800306c:	4619      	mov	r1, r3
 800306e:	481f      	ldr	r0, [pc, #124]	; (80030ec <MX_GPIO_Init+0x2e4>)
 8003070:	f001 ffc6 	bl	8005000 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8003074:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003078:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800307a:	2301      	movs	r3, #1
 800307c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307e:	2300      	movs	r3, #0
 8003080:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003082:	2300      	movs	r3, #0
 8003084:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8003086:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800308a:	4619      	mov	r1, r3
 800308c:	4817      	ldr	r0, [pc, #92]	; (80030ec <MX_GPIO_Init+0x2e4>)
 800308e:	f001 ffb7 	bl	8005000 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8003092:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003096:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003098:	4b19      	ldr	r3, [pc, #100]	; (8003100 <MX_GPIO_Init+0x2f8>)
 800309a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309c:	2300      	movs	r3, #0
 800309e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80030a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030a4:	4619      	mov	r1, r3
 80030a6:	480f      	ldr	r0, [pc, #60]	; (80030e4 <MX_GPIO_Init+0x2dc>)
 80030a8:	f001 ffaa 	bl	8005000 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80030ac:	2310      	movs	r3, #16
 80030ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b0:	2302      	movs	r3, #2
 80030b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030b8:	2303      	movs	r3, #3
 80030ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80030bc:	230a      	movs	r3, #10
 80030be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80030c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030c4:	4619      	mov	r1, r3
 80030c6:	4809      	ldr	r0, [pc, #36]	; (80030ec <MX_GPIO_Init+0x2e4>)
 80030c8:	f001 ff9a 	bl	8005000 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80030cc:	23c8      	movs	r3, #200	; 0xc8
 80030ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030d0:	2301      	movs	r3, #1
 80030d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	637b      	str	r3, [r7, #52]	; 0x34
 80030d8:	e016      	b.n	8003108 <MX_GPIO_Init+0x300>
 80030da:	bf00      	nop
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40020c00 	.word	0x40020c00
 80030e4:	40022000 	.word	0x40022000
 80030e8:	40022800 	.word	0x40022800
 80030ec:	40021c00 	.word	0x40021c00
 80030f0:	40021800 	.word	0x40021800
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40020400 	.word	0x40020400
 80030fc:	40022400 	.word	0x40022400
 8003100:	10120000 	.word	0x10120000
 8003104:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003108:	2300      	movs	r3, #0
 800310a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800310c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003110:	4619      	mov	r1, r3
 8003112:	4822      	ldr	r0, [pc, #136]	; (800319c <MX_GPIO_Init+0x394>)
 8003114:	f001 ff74 	bl	8005000 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8003118:	2305      	movs	r3, #5
 800311a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311c:	2302      	movs	r3, #2
 800311e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003124:	2303      	movs	r3, #3
 8003126:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003128:	230a      	movs	r3, #10
 800312a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800312c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003130:	4619      	mov	r1, r3
 8003132:	481b      	ldr	r0, [pc, #108]	; (80031a0 <MX_GPIO_Init+0x398>)
 8003134:	f001 ff64 	bl	8005000 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8003138:	2304      	movs	r3, #4
 800313a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800313c:	2300      	movs	r3, #0
 800313e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003140:	2300      	movs	r3, #0
 8003142:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8003144:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003148:	4619      	mov	r1, r3
 800314a:	4814      	ldr	r0, [pc, #80]	; (800319c <MX_GPIO_Init+0x394>)
 800314c:	f001 ff58 	bl	8005000 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8003150:	2328      	movs	r3, #40	; 0x28
 8003152:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003154:	2302      	movs	r3, #2
 8003156:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003158:	2300      	movs	r3, #0
 800315a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800315c:	2303      	movs	r3, #3
 800315e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003160:	230a      	movs	r3, #10
 8003162:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003164:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003168:	4619      	mov	r1, r3
 800316a:	480e      	ldr	r0, [pc, #56]	; (80031a4 <MX_GPIO_Init+0x39c>)
 800316c:	f001 ff48 	bl	8005000 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003170:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003176:	2302      	movs	r3, #2
 8003178:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317e:	2300      	movs	r3, #0
 8003180:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003182:	2305      	movs	r3, #5
 8003184:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003186:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800318a:	4619      	mov	r1, r3
 800318c:	4806      	ldr	r0, [pc, #24]	; (80031a8 <MX_GPIO_Init+0x3a0>)
 800318e:	f001 ff37 	bl	8005000 <HAL_GPIO_Init>

}
 8003192:	bf00      	nop
 8003194:	3740      	adds	r7, #64	; 0x40
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40021800 	.word	0x40021800
 80031a0:	40020800 	.word	0x40020800
 80031a4:	40020000 	.word	0x40020000
 80031a8:	40020400 	.word	0x40020400

080031ac <LED_Toggle>:
void LED_Off(){

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
}

void LED_Toggle(){
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 80031b0:	2102      	movs	r1, #2
 80031b2:	4802      	ldr	r0, [pc, #8]	; (80031bc <LED_Toggle+0x10>)
 80031b4:	f002 f901 	bl	80053ba <HAL_GPIO_TogglePin>
}
 80031b8:	bf00      	nop
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40022000 	.word	0x40022000

080031c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80031c4:	b672      	cpsid	i
}
 80031c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031c8:	e7fe      	b.n	80031c8 <Error_Handler+0x8>
	...

080031cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80031d2:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <HAL_MspInit+0x44>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	4a0e      	ldr	r2, [pc, #56]	; (8003210 <HAL_MspInit+0x44>)
 80031d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031dc:	6413      	str	r3, [r2, #64]	; 0x40
 80031de:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <HAL_MspInit+0x44>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e6:	607b      	str	r3, [r7, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ea:	4b09      	ldr	r3, [pc, #36]	; (8003210 <HAL_MspInit+0x44>)
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	4a08      	ldr	r2, [pc, #32]	; (8003210 <HAL_MspInit+0x44>)
 80031f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031f4:	6453      	str	r3, [r2, #68]	; 0x44
 80031f6:	4b06      	ldr	r3, [pc, #24]	; (8003210 <HAL_MspInit+0x44>)
 80031f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	40023800 	.word	0x40023800

08003214 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08a      	sub	sp, #40	; 0x28
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321c:	f107 0314 	add.w	r3, r7, #20
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	60da      	str	r2, [r3, #12]
 800322a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a21      	ldr	r2, [pc, #132]	; (80032b8 <HAL_ADC_MspInit+0xa4>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d13c      	bne.n	80032b0 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003236:	4b21      	ldr	r3, [pc, #132]	; (80032bc <HAL_ADC_MspInit+0xa8>)
 8003238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323a:	4a20      	ldr	r2, [pc, #128]	; (80032bc <HAL_ADC_MspInit+0xa8>)
 800323c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003240:	6453      	str	r3, [r2, #68]	; 0x44
 8003242:	4b1e      	ldr	r3, [pc, #120]	; (80032bc <HAL_ADC_MspInit+0xa8>)
 8003244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800324e:	4b1b      	ldr	r3, [pc, #108]	; (80032bc <HAL_ADC_MspInit+0xa8>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	4a1a      	ldr	r2, [pc, #104]	; (80032bc <HAL_ADC_MspInit+0xa8>)
 8003254:	f043 0320 	orr.w	r3, r3, #32
 8003258:	6313      	str	r3, [r2, #48]	; 0x30
 800325a:	4b18      	ldr	r3, [pc, #96]	; (80032bc <HAL_ADC_MspInit+0xa8>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	f003 0320 	and.w	r3, r3, #32
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003266:	4b15      	ldr	r3, [pc, #84]	; (80032bc <HAL_ADC_MspInit+0xa8>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a14      	ldr	r2, [pc, #80]	; (80032bc <HAL_ADC_MspInit+0xa8>)
 800326c:	f043 0301 	orr.w	r3, r3, #1
 8003270:	6313      	str	r3, [r2, #48]	; 0x30
 8003272:	4b12      	ldr	r3, [pc, #72]	; (80032bc <HAL_ADC_MspInit+0xa8>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800327e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8003282:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003284:	2303      	movs	r3, #3
 8003286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003288:	2300      	movs	r3, #0
 800328a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800328c:	f107 0314 	add.w	r3, r7, #20
 8003290:	4619      	mov	r1, r3
 8003292:	480b      	ldr	r0, [pc, #44]	; (80032c0 <HAL_ADC_MspInit+0xac>)
 8003294:	f001 feb4 	bl	8005000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8003298:	2301      	movs	r3, #1
 800329a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800329c:	2303      	movs	r3, #3
 800329e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80032a4:	f107 0314 	add.w	r3, r7, #20
 80032a8:	4619      	mov	r1, r3
 80032aa:	4806      	ldr	r0, [pc, #24]	; (80032c4 <HAL_ADC_MspInit+0xb0>)
 80032ac:	f001 fea8 	bl	8005000 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80032b0:	bf00      	nop
 80032b2:	3728      	adds	r7, #40	; 0x28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40012200 	.word	0x40012200
 80032bc:	40023800 	.word	0x40023800
 80032c0:	40021400 	.word	0x40021400
 80032c4:	40020000 	.word	0x40020000

080032c8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <HAL_CRC_MspInit+0x38>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d10b      	bne.n	80032f2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80032da:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <HAL_CRC_MspInit+0x3c>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	4a09      	ldr	r2, [pc, #36]	; (8003304 <HAL_CRC_MspInit+0x3c>)
 80032e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032e4:	6313      	str	r3, [r2, #48]	; 0x30
 80032e6:	4b07      	ldr	r3, [pc, #28]	; (8003304 <HAL_CRC_MspInit+0x3c>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80032f2:	bf00      	nop
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40023000 	.word	0x40023000
 8003304:	40023800 	.word	0x40023800

08003308 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08e      	sub	sp, #56	; 0x38
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	605a      	str	r2, [r3, #4]
 800331a:	609a      	str	r2, [r3, #8]
 800331c:	60da      	str	r2, [r3, #12]
 800331e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a50      	ldr	r2, [pc, #320]	; (8003468 <HAL_DCMI_MspInit+0x160>)
 8003326:	4293      	cmp	r3, r2
 8003328:	f040 809a 	bne.w	8003460 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800332c:	4b4f      	ldr	r3, [pc, #316]	; (800346c <HAL_DCMI_MspInit+0x164>)
 800332e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003330:	4a4e      	ldr	r2, [pc, #312]	; (800346c <HAL_DCMI_MspInit+0x164>)
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	6353      	str	r3, [r2, #52]	; 0x34
 8003338:	4b4c      	ldr	r3, [pc, #304]	; (800346c <HAL_DCMI_MspInit+0x164>)
 800333a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	623b      	str	r3, [r7, #32]
 8003342:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003344:	4b49      	ldr	r3, [pc, #292]	; (800346c <HAL_DCMI_MspInit+0x164>)
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	4a48      	ldr	r2, [pc, #288]	; (800346c <HAL_DCMI_MspInit+0x164>)
 800334a:	f043 0310 	orr.w	r3, r3, #16
 800334e:	6313      	str	r3, [r2, #48]	; 0x30
 8003350:	4b46      	ldr	r3, [pc, #280]	; (800346c <HAL_DCMI_MspInit+0x164>)
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	61fb      	str	r3, [r7, #28]
 800335a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800335c:	4b43      	ldr	r3, [pc, #268]	; (800346c <HAL_DCMI_MspInit+0x164>)
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	4a42      	ldr	r2, [pc, #264]	; (800346c <HAL_DCMI_MspInit+0x164>)
 8003362:	f043 0308 	orr.w	r3, r3, #8
 8003366:	6313      	str	r3, [r2, #48]	; 0x30
 8003368:	4b40      	ldr	r3, [pc, #256]	; (800346c <HAL_DCMI_MspInit+0x164>)
 800336a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003374:	4b3d      	ldr	r3, [pc, #244]	; (800346c <HAL_DCMI_MspInit+0x164>)
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	4a3c      	ldr	r2, [pc, #240]	; (800346c <HAL_DCMI_MspInit+0x164>)
 800337a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800337e:	6313      	str	r3, [r2, #48]	; 0x30
 8003380:	4b3a      	ldr	r3, [pc, #232]	; (800346c <HAL_DCMI_MspInit+0x164>)
 8003382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800338c:	4b37      	ldr	r3, [pc, #220]	; (800346c <HAL_DCMI_MspInit+0x164>)
 800338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003390:	4a36      	ldr	r2, [pc, #216]	; (800346c <HAL_DCMI_MspInit+0x164>)
 8003392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003396:	6313      	str	r3, [r2, #48]	; 0x30
 8003398:	4b34      	ldr	r3, [pc, #208]	; (800346c <HAL_DCMI_MspInit+0x164>)
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a0:	613b      	str	r3, [r7, #16]
 80033a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a4:	4b31      	ldr	r3, [pc, #196]	; (800346c <HAL_DCMI_MspInit+0x164>)
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	4a30      	ldr	r2, [pc, #192]	; (800346c <HAL_DCMI_MspInit+0x164>)
 80033aa:	f043 0301 	orr.w	r3, r3, #1
 80033ae:	6313      	str	r3, [r2, #48]	; 0x30
 80033b0:	4b2e      	ldr	r3, [pc, #184]	; (800346c <HAL_DCMI_MspInit+0x164>)
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80033bc:	2360      	movs	r3, #96	; 0x60
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c0:	2302      	movs	r3, #2
 80033c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c8:	2300      	movs	r3, #0
 80033ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80033cc:	230d      	movs	r3, #13
 80033ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033d4:	4619      	mov	r1, r3
 80033d6:	4826      	ldr	r0, [pc, #152]	; (8003470 <HAL_DCMI_MspInit+0x168>)
 80033d8:	f001 fe12 	bl	8005000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80033dc:	2308      	movs	r3, #8
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e0:	2302      	movs	r3, #2
 80033e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e4:	2300      	movs	r3, #0
 80033e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e8:	2300      	movs	r3, #0
 80033ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80033ec:	230d      	movs	r3, #13
 80033ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80033f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033f4:	4619      	mov	r1, r3
 80033f6:	481f      	ldr	r0, [pc, #124]	; (8003474 <HAL_DCMI_MspInit+0x16c>)
 80033f8:	f001 fe02 	bl	8005000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80033fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003402:	2302      	movs	r3, #2
 8003404:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003406:	2300      	movs	r3, #0
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340a:	2300      	movs	r3, #0
 800340c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800340e:	230d      	movs	r3, #13
 8003410:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8003412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003416:	4619      	mov	r1, r3
 8003418:	4817      	ldr	r0, [pc, #92]	; (8003478 <HAL_DCMI_MspInit+0x170>)
 800341a:	f001 fdf1 	bl	8005000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800341e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003424:	2302      	movs	r3, #2
 8003426:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003428:	2300      	movs	r3, #0
 800342a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342c:	2300      	movs	r3, #0
 800342e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003430:	230d      	movs	r3, #13
 8003432:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003438:	4619      	mov	r1, r3
 800343a:	4810      	ldr	r0, [pc, #64]	; (800347c <HAL_DCMI_MspInit+0x174>)
 800343c:	f001 fde0 	bl	8005000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8003440:	2350      	movs	r3, #80	; 0x50
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003444:	2302      	movs	r3, #2
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003448:	2300      	movs	r3, #0
 800344a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344c:	2300      	movs	r3, #0
 800344e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003450:	230d      	movs	r3, #13
 8003452:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003458:	4619      	mov	r1, r3
 800345a:	4809      	ldr	r0, [pc, #36]	; (8003480 <HAL_DCMI_MspInit+0x178>)
 800345c:	f001 fdd0 	bl	8005000 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8003460:	bf00      	nop
 8003462:	3738      	adds	r7, #56	; 0x38
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	50050000 	.word	0x50050000
 800346c:	40023800 	.word	0x40023800
 8003470:	40021000 	.word	0x40021000
 8003474:	40020c00 	.word	0x40020c00
 8003478:	40021800 	.word	0x40021800
 800347c:	40021c00 	.word	0x40021c00
 8003480:	40020000 	.word	0x40020000

08003484 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a0d      	ldr	r2, [pc, #52]	; (80034c8 <HAL_DMA2D_MspInit+0x44>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d113      	bne.n	80034be <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003496:	4b0d      	ldr	r3, [pc, #52]	; (80034cc <HAL_DMA2D_MspInit+0x48>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	4a0c      	ldr	r2, [pc, #48]	; (80034cc <HAL_DMA2D_MspInit+0x48>)
 800349c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034a0:	6313      	str	r3, [r2, #48]	; 0x30
 80034a2:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <HAL_DMA2D_MspInit+0x48>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80034ae:	2200      	movs	r2, #0
 80034b0:	2100      	movs	r1, #0
 80034b2:	205a      	movs	r0, #90	; 0x5a
 80034b4:	f001 fa1d 	bl	80048f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80034b8:	205a      	movs	r0, #90	; 0x5a
 80034ba:	f001 fa36 	bl	800492a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80034be:	bf00      	nop
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	4002b000 	.word	0x4002b000
 80034cc:	40023800 	.word	0x40023800

080034d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08c      	sub	sp, #48	; 0x30
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d8:	f107 031c 	add.w	r3, r7, #28
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	605a      	str	r2, [r3, #4]
 80034e2:	609a      	str	r2, [r3, #8]
 80034e4:	60da      	str	r2, [r3, #12]
 80034e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a2f      	ldr	r2, [pc, #188]	; (80035ac <HAL_I2C_MspInit+0xdc>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d129      	bne.n	8003546 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f2:	4b2f      	ldr	r3, [pc, #188]	; (80035b0 <HAL_I2C_MspInit+0xe0>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	4a2e      	ldr	r2, [pc, #184]	; (80035b0 <HAL_I2C_MspInit+0xe0>)
 80034f8:	f043 0302 	orr.w	r3, r3, #2
 80034fc:	6313      	str	r3, [r2, #48]	; 0x30
 80034fe:	4b2c      	ldr	r3, [pc, #176]	; (80035b0 <HAL_I2C_MspInit+0xe0>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	61bb      	str	r3, [r7, #24]
 8003508:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800350a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800350e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003510:	2312      	movs	r3, #18
 8003512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003514:	2301      	movs	r3, #1
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003518:	2300      	movs	r3, #0
 800351a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800351c:	2304      	movs	r3, #4
 800351e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003520:	f107 031c 	add.w	r3, r7, #28
 8003524:	4619      	mov	r1, r3
 8003526:	4823      	ldr	r0, [pc, #140]	; (80035b4 <HAL_I2C_MspInit+0xe4>)
 8003528:	f001 fd6a 	bl	8005000 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800352c:	4b20      	ldr	r3, [pc, #128]	; (80035b0 <HAL_I2C_MspInit+0xe0>)
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	4a1f      	ldr	r2, [pc, #124]	; (80035b0 <HAL_I2C_MspInit+0xe0>)
 8003532:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003536:	6413      	str	r3, [r2, #64]	; 0x40
 8003538:	4b1d      	ldr	r3, [pc, #116]	; (80035b0 <HAL_I2C_MspInit+0xe0>)
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003544:	e02d      	b.n	80035a2 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a1b      	ldr	r2, [pc, #108]	; (80035b8 <HAL_I2C_MspInit+0xe8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d128      	bne.n	80035a2 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003550:	4b17      	ldr	r3, [pc, #92]	; (80035b0 <HAL_I2C_MspInit+0xe0>)
 8003552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003554:	4a16      	ldr	r2, [pc, #88]	; (80035b0 <HAL_I2C_MspInit+0xe0>)
 8003556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800355a:	6313      	str	r3, [r2, #48]	; 0x30
 800355c:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <HAL_I2C_MspInit+0xe0>)
 800355e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003564:	613b      	str	r3, [r7, #16]
 8003566:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003568:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800356c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800356e:	2312      	movs	r3, #18
 8003570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003572:	2301      	movs	r3, #1
 8003574:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003576:	2303      	movs	r3, #3
 8003578:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800357a:	2304      	movs	r3, #4
 800357c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800357e:	f107 031c 	add.w	r3, r7, #28
 8003582:	4619      	mov	r1, r3
 8003584:	480d      	ldr	r0, [pc, #52]	; (80035bc <HAL_I2C_MspInit+0xec>)
 8003586:	f001 fd3b 	bl	8005000 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800358a:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <HAL_I2C_MspInit+0xe0>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	4a08      	ldr	r2, [pc, #32]	; (80035b0 <HAL_I2C_MspInit+0xe0>)
 8003590:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003594:	6413      	str	r3, [r2, #64]	; 0x40
 8003596:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <HAL_I2C_MspInit+0xe0>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]
}
 80035a2:	bf00      	nop
 80035a4:	3730      	adds	r7, #48	; 0x30
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40005400 	.word	0x40005400
 80035b0:	40023800 	.word	0x40023800
 80035b4:	40020400 	.word	0x40020400
 80035b8:	40005c00 	.word	0x40005c00
 80035bc:	40021c00 	.word	0x40021c00

080035c0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08e      	sub	sp, #56	; 0x38
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	605a      	str	r2, [r3, #4]
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	60da      	str	r2, [r3, #12]
 80035d6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a55      	ldr	r2, [pc, #340]	; (8003734 <HAL_LTDC_MspInit+0x174>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	f040 80a3 	bne.w	800372a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80035e4:	4b54      	ldr	r3, [pc, #336]	; (8003738 <HAL_LTDC_MspInit+0x178>)
 80035e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e8:	4a53      	ldr	r2, [pc, #332]	; (8003738 <HAL_LTDC_MspInit+0x178>)
 80035ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035ee:	6453      	str	r3, [r2, #68]	; 0x44
 80035f0:	4b51      	ldr	r3, [pc, #324]	; (8003738 <HAL_LTDC_MspInit+0x178>)
 80035f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035f8:	623b      	str	r3, [r7, #32]
 80035fa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80035fc:	4b4e      	ldr	r3, [pc, #312]	; (8003738 <HAL_LTDC_MspInit+0x178>)
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	4a4d      	ldr	r2, [pc, #308]	; (8003738 <HAL_LTDC_MspInit+0x178>)
 8003602:	f043 0310 	orr.w	r3, r3, #16
 8003606:	6313      	str	r3, [r2, #48]	; 0x30
 8003608:	4b4b      	ldr	r3, [pc, #300]	; (8003738 <HAL_LTDC_MspInit+0x178>)
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	f003 0310 	and.w	r3, r3, #16
 8003610:	61fb      	str	r3, [r7, #28]
 8003612:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003614:	4b48      	ldr	r3, [pc, #288]	; (8003738 <HAL_LTDC_MspInit+0x178>)
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003618:	4a47      	ldr	r2, [pc, #284]	; (8003738 <HAL_LTDC_MspInit+0x178>)
 800361a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800361e:	6313      	str	r3, [r2, #48]	; 0x30
 8003620:	4b45      	ldr	r3, [pc, #276]	; (8003738 <HAL_LTDC_MspInit+0x178>)
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003628:	61bb      	str	r3, [r7, #24]
 800362a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800362c:	4b42      	ldr	r3, [pc, #264]	; (8003738 <HAL_LTDC_MspInit+0x178>)
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	4a41      	ldr	r2, [pc, #260]	; (8003738 <HAL_LTDC_MspInit+0x178>)
 8003632:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003636:	6313      	str	r3, [r2, #48]	; 0x30
 8003638:	4b3f      	ldr	r3, [pc, #252]	; (8003738 <HAL_LTDC_MspInit+0x178>)
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003644:	4b3c      	ldr	r3, [pc, #240]	; (8003738 <HAL_LTDC_MspInit+0x178>)
 8003646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003648:	4a3b      	ldr	r2, [pc, #236]	; (8003738 <HAL_LTDC_MspInit+0x178>)
 800364a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800364e:	6313      	str	r3, [r2, #48]	; 0x30
 8003650:	4b39      	ldr	r3, [pc, #228]	; (8003738 <HAL_LTDC_MspInit+0x178>)
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800365c:	4b36      	ldr	r3, [pc, #216]	; (8003738 <HAL_LTDC_MspInit+0x178>)
 800365e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003660:	4a35      	ldr	r2, [pc, #212]	; (8003738 <HAL_LTDC_MspInit+0x178>)
 8003662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003666:	6313      	str	r3, [r2, #48]	; 0x30
 8003668:	4b33      	ldr	r3, [pc, #204]	; (8003738 <HAL_LTDC_MspInit+0x178>)
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003674:	2310      	movs	r3, #16
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003678:	2302      	movs	r3, #2
 800367a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	2300      	movs	r3, #0
 800367e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003680:	2300      	movs	r3, #0
 8003682:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003684:	230e      	movs	r3, #14
 8003686:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800368c:	4619      	mov	r1, r3
 800368e:	482b      	ldr	r0, [pc, #172]	; (800373c <HAL_LTDC_MspInit+0x17c>)
 8003690:	f001 fcb6 	bl	8005000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003694:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369a:	2302      	movs	r3, #2
 800369c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a2:	2300      	movs	r3, #0
 80036a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80036a6:	230e      	movs	r3, #14
 80036a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80036aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036ae:	4619      	mov	r1, r3
 80036b0:	4823      	ldr	r0, [pc, #140]	; (8003740 <HAL_LTDC_MspInit+0x180>)
 80036b2:	f001 fca5 	bl	8005000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80036b6:	23f7      	movs	r3, #247	; 0xf7
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ba:	2302      	movs	r3, #2
 80036bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c2:	2300      	movs	r3, #0
 80036c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80036c6:	230e      	movs	r3, #14
 80036c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80036ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036ce:	4619      	mov	r1, r3
 80036d0:	481c      	ldr	r0, [pc, #112]	; (8003744 <HAL_LTDC_MspInit+0x184>)
 80036d2:	f001 fc95 	bl	8005000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80036d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036dc:	2302      	movs	r3, #2
 80036de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e0:	2300      	movs	r3, #0
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e4:	2300      	movs	r3, #0
 80036e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80036e8:	2309      	movs	r3, #9
 80036ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80036ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036f0:	4619      	mov	r1, r3
 80036f2:	4815      	ldr	r0, [pc, #84]	; (8003748 <HAL_LTDC_MspInit+0x188>)
 80036f4:	f001 fc84 	bl	8005000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80036f8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fe:	2302      	movs	r3, #2
 8003700:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003702:	2300      	movs	r3, #0
 8003704:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003706:	2300      	movs	r3, #0
 8003708:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800370a:	230e      	movs	r3, #14
 800370c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800370e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003712:	4619      	mov	r1, r3
 8003714:	480d      	ldr	r0, [pc, #52]	; (800374c <HAL_LTDC_MspInit+0x18c>)
 8003716:	f001 fc73 	bl	8005000 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800371a:	2200      	movs	r2, #0
 800371c:	2100      	movs	r1, #0
 800371e:	2058      	movs	r0, #88	; 0x58
 8003720:	f001 f8e7 	bl	80048f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003724:	2058      	movs	r0, #88	; 0x58
 8003726:	f001 f900 	bl	800492a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800372a:	bf00      	nop
 800372c:	3738      	adds	r7, #56	; 0x38
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40016800 	.word	0x40016800
 8003738:	40023800 	.word	0x40023800
 800373c:	40021000 	.word	0x40021000
 8003740:	40022400 	.word	0x40022400
 8003744:	40022800 	.word	0x40022800
 8003748:	40021800 	.word	0x40021800
 800374c:	40022000 	.word	0x40022000

08003750 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08c      	sub	sp, #48	; 0x30
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003758:	f107 031c 	add.w	r3, r7, #28
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	605a      	str	r2, [r3, #4]
 8003762:	609a      	str	r2, [r3, #8]
 8003764:	60da      	str	r2, [r3, #12]
 8003766:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a3b      	ldr	r2, [pc, #236]	; (800385c <HAL_QSPI_MspInit+0x10c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d170      	bne.n	8003854 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003772:	4b3b      	ldr	r3, [pc, #236]	; (8003860 <HAL_QSPI_MspInit+0x110>)
 8003774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003776:	4a3a      	ldr	r2, [pc, #232]	; (8003860 <HAL_QSPI_MspInit+0x110>)
 8003778:	f043 0302 	orr.w	r3, r3, #2
 800377c:	6393      	str	r3, [r2, #56]	; 0x38
 800377e:	4b38      	ldr	r3, [pc, #224]	; (8003860 <HAL_QSPI_MspInit+0x110>)
 8003780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	61bb      	str	r3, [r7, #24]
 8003788:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800378a:	4b35      	ldr	r3, [pc, #212]	; (8003860 <HAL_QSPI_MspInit+0x110>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	4a34      	ldr	r2, [pc, #208]	; (8003860 <HAL_QSPI_MspInit+0x110>)
 8003790:	f043 0310 	orr.w	r3, r3, #16
 8003794:	6313      	str	r3, [r2, #48]	; 0x30
 8003796:	4b32      	ldr	r3, [pc, #200]	; (8003860 <HAL_QSPI_MspInit+0x110>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	f003 0310 	and.w	r3, r3, #16
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037a2:	4b2f      	ldr	r3, [pc, #188]	; (8003860 <HAL_QSPI_MspInit+0x110>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	4a2e      	ldr	r2, [pc, #184]	; (8003860 <HAL_QSPI_MspInit+0x110>)
 80037a8:	f043 0302 	orr.w	r3, r3, #2
 80037ac:	6313      	str	r3, [r2, #48]	; 0x30
 80037ae:	4b2c      	ldr	r3, [pc, #176]	; (8003860 <HAL_QSPI_MspInit+0x110>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	613b      	str	r3, [r7, #16]
 80037b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037ba:	4b29      	ldr	r3, [pc, #164]	; (8003860 <HAL_QSPI_MspInit+0x110>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	4a28      	ldr	r2, [pc, #160]	; (8003860 <HAL_QSPI_MspInit+0x110>)
 80037c0:	f043 0308 	orr.w	r3, r3, #8
 80037c4:	6313      	str	r3, [r2, #48]	; 0x30
 80037c6:	4b26      	ldr	r3, [pc, #152]	; (8003860 <HAL_QSPI_MspInit+0x110>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80037d2:	2304      	movs	r3, #4
 80037d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d6:	2302      	movs	r3, #2
 80037d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037da:	2300      	movs	r3, #0
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037de:	2303      	movs	r3, #3
 80037e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80037e2:	2309      	movs	r3, #9
 80037e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80037e6:	f107 031c 	add.w	r3, r7, #28
 80037ea:	4619      	mov	r1, r3
 80037ec:	481d      	ldr	r0, [pc, #116]	; (8003864 <HAL_QSPI_MspInit+0x114>)
 80037ee:	f001 fc07 	bl	8005000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80037f2:	2340      	movs	r3, #64	; 0x40
 80037f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f6:	2302      	movs	r3, #2
 80037f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037fe:	2303      	movs	r3, #3
 8003800:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003802:	230a      	movs	r3, #10
 8003804:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003806:	f107 031c 	add.w	r3, r7, #28
 800380a:	4619      	mov	r1, r3
 800380c:	4816      	ldr	r0, [pc, #88]	; (8003868 <HAL_QSPI_MspInit+0x118>)
 800380e:	f001 fbf7 	bl	8005000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003812:	2304      	movs	r3, #4
 8003814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003816:	2302      	movs	r3, #2
 8003818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381a:	2300      	movs	r3, #0
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800381e:	2303      	movs	r3, #3
 8003820:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003822:	2309      	movs	r3, #9
 8003824:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003826:	f107 031c 	add.w	r3, r7, #28
 800382a:	4619      	mov	r1, r3
 800382c:	480e      	ldr	r0, [pc, #56]	; (8003868 <HAL_QSPI_MspInit+0x118>)
 800382e:	f001 fbe7 	bl	8005000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003832:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003838:	2302      	movs	r3, #2
 800383a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383c:	2300      	movs	r3, #0
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003840:	2303      	movs	r3, #3
 8003842:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003844:	2309      	movs	r3, #9
 8003846:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003848:	f107 031c 	add.w	r3, r7, #28
 800384c:	4619      	mov	r1, r3
 800384e:	4807      	ldr	r0, [pc, #28]	; (800386c <HAL_QSPI_MspInit+0x11c>)
 8003850:	f001 fbd6 	bl	8005000 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003854:	bf00      	nop
 8003856:	3730      	adds	r7, #48	; 0x30
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	a0001000 	.word	0xa0001000
 8003860:	40023800 	.word	0x40023800
 8003864:	40021000 	.word	0x40021000
 8003868:	40020400 	.word	0x40020400
 800386c:	40020c00 	.word	0x40020c00

08003870 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a07      	ldr	r2, [pc, #28]	; (800389c <HAL_RTC_MspInit+0x2c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d105      	bne.n	800388e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003882:	4b07      	ldr	r3, [pc, #28]	; (80038a0 <HAL_RTC_MspInit+0x30>)
 8003884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003886:	4a06      	ldr	r2, [pc, #24]	; (80038a0 <HAL_RTC_MspInit+0x30>)
 8003888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800388c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40002800 	.word	0x40002800
 80038a0:	40023800 	.word	0x40023800

080038a4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	; 0x28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ac:	f107 0314 	add.w	r3, r7, #20
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	609a      	str	r2, [r3, #8]
 80038b8:	60da      	str	r2, [r3, #12]
 80038ba:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a25      	ldr	r2, [pc, #148]	; (8003958 <HAL_SD_MspInit+0xb4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d144      	bne.n	8003950 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80038c6:	4b25      	ldr	r3, [pc, #148]	; (800395c <HAL_SD_MspInit+0xb8>)
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	4a24      	ldr	r2, [pc, #144]	; (800395c <HAL_SD_MspInit+0xb8>)
 80038cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038d0:	6453      	str	r3, [r2, #68]	; 0x44
 80038d2:	4b22      	ldr	r3, [pc, #136]	; (800395c <HAL_SD_MspInit+0xb8>)
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038de:	4b1f      	ldr	r3, [pc, #124]	; (800395c <HAL_SD_MspInit+0xb8>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	4a1e      	ldr	r2, [pc, #120]	; (800395c <HAL_SD_MspInit+0xb8>)
 80038e4:	f043 0304 	orr.w	r3, r3, #4
 80038e8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ea:	4b1c      	ldr	r3, [pc, #112]	; (800395c <HAL_SD_MspInit+0xb8>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038f6:	4b19      	ldr	r3, [pc, #100]	; (800395c <HAL_SD_MspInit+0xb8>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	4a18      	ldr	r2, [pc, #96]	; (800395c <HAL_SD_MspInit+0xb8>)
 80038fc:	f043 0308 	orr.w	r3, r3, #8
 8003900:	6313      	str	r3, [r2, #48]	; 0x30
 8003902:	4b16      	ldr	r3, [pc, #88]	; (800395c <HAL_SD_MspInit+0xb8>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	60bb      	str	r3, [r7, #8]
 800390c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800390e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003912:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003914:	2302      	movs	r3, #2
 8003916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003918:	2300      	movs	r3, #0
 800391a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800391c:	2303      	movs	r3, #3
 800391e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003920:	230c      	movs	r3, #12
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003924:	f107 0314 	add.w	r3, r7, #20
 8003928:	4619      	mov	r1, r3
 800392a:	480d      	ldr	r0, [pc, #52]	; (8003960 <HAL_SD_MspInit+0xbc>)
 800392c:	f001 fb68 	bl	8005000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003930:	2304      	movs	r3, #4
 8003932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003934:	2302      	movs	r3, #2
 8003936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003938:	2300      	movs	r3, #0
 800393a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800393c:	2303      	movs	r3, #3
 800393e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003940:	230c      	movs	r3, #12
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8003944:	f107 0314 	add.w	r3, r7, #20
 8003948:	4619      	mov	r1, r3
 800394a:	4806      	ldr	r0, [pc, #24]	; (8003964 <HAL_SD_MspInit+0xc0>)
 800394c:	f001 fb58 	bl	8005000 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003950:	bf00      	nop
 8003952:	3728      	adds	r7, #40	; 0x28
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40012c00 	.word	0x40012c00
 800395c:	40023800 	.word	0x40023800
 8003960:	40020800 	.word	0x40020800
 8003964:	40020c00 	.word	0x40020c00

08003968 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08a      	sub	sp, #40	; 0x28
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003970:	f107 0314 	add.w	r3, r7, #20
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	605a      	str	r2, [r3, #4]
 800397a:	609a      	str	r2, [r3, #8]
 800397c:	60da      	str	r2, [r3, #12]
 800397e:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8003988:	d127      	bne.n	80039da <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800398a:	4b16      	ldr	r3, [pc, #88]	; (80039e4 <HAL_SPDIFRX_MspInit+0x7c>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	4a15      	ldr	r2, [pc, #84]	; (80039e4 <HAL_SPDIFRX_MspInit+0x7c>)
 8003990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003994:	6413      	str	r3, [r2, #64]	; 0x40
 8003996:	4b13      	ldr	r3, [pc, #76]	; (80039e4 <HAL_SPDIFRX_MspInit+0x7c>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399e:	613b      	str	r3, [r7, #16]
 80039a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039a2:	4b10      	ldr	r3, [pc, #64]	; (80039e4 <HAL_SPDIFRX_MspInit+0x7c>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	4a0f      	ldr	r2, [pc, #60]	; (80039e4 <HAL_SPDIFRX_MspInit+0x7c>)
 80039a8:	f043 0308 	orr.w	r3, r3, #8
 80039ac:	6313      	str	r3, [r2, #48]	; 0x30
 80039ae:	4b0d      	ldr	r3, [pc, #52]	; (80039e4 <HAL_SPDIFRX_MspInit+0x7c>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80039ba:	2380      	movs	r3, #128	; 0x80
 80039bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039be:	2302      	movs	r3, #2
 80039c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c6:	2300      	movs	r3, #0
 80039c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80039ca:	2308      	movs	r3, #8
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80039ce:	f107 0314 	add.w	r3, r7, #20
 80039d2:	4619      	mov	r1, r3
 80039d4:	4804      	ldr	r0, [pc, #16]	; (80039e8 <HAL_SPDIFRX_MspInit+0x80>)
 80039d6:	f001 fb13 	bl	8005000 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80039da:	bf00      	nop
 80039dc:	3728      	adds	r7, #40	; 0x28
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40023800 	.word	0x40023800
 80039e8:	40020c00 	.word	0x40020c00

080039ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08e      	sub	sp, #56	; 0x38
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	605a      	str	r2, [r3, #4]
 80039fe:	609a      	str	r2, [r3, #8]
 8003a00:	60da      	str	r2, [r3, #12]
 8003a02:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a44      	ldr	r2, [pc, #272]	; (8003b1c <HAL_TIM_Base_MspInit+0x130>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d10c      	bne.n	8003a28 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a0e:	4b44      	ldr	r3, [pc, #272]	; (8003b20 <HAL_TIM_Base_MspInit+0x134>)
 8003a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a12:	4a43      	ldr	r2, [pc, #268]	; (8003b20 <HAL_TIM_Base_MspInit+0x134>)
 8003a14:	f043 0301 	orr.w	r3, r3, #1
 8003a18:	6453      	str	r3, [r2, #68]	; 0x44
 8003a1a:	4b41      	ldr	r3, [pc, #260]	; (8003b20 <HAL_TIM_Base_MspInit+0x134>)
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	623b      	str	r3, [r7, #32]
 8003a24:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003a26:	e074      	b.n	8003b12 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM2)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a30:	d10c      	bne.n	8003a4c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a32:	4b3b      	ldr	r3, [pc, #236]	; (8003b20 <HAL_TIM_Base_MspInit+0x134>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	4a3a      	ldr	r2, [pc, #232]	; (8003b20 <HAL_TIM_Base_MspInit+0x134>)
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a3e:	4b38      	ldr	r3, [pc, #224]	; (8003b20 <HAL_TIM_Base_MspInit+0x134>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	61fb      	str	r3, [r7, #28]
 8003a48:	69fb      	ldr	r3, [r7, #28]
}
 8003a4a:	e062      	b.n	8003b12 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM3)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a34      	ldr	r2, [pc, #208]	; (8003b24 <HAL_TIM_Base_MspInit+0x138>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d10c      	bne.n	8003a70 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a56:	4b32      	ldr	r3, [pc, #200]	; (8003b20 <HAL_TIM_Base_MspInit+0x134>)
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	4a31      	ldr	r2, [pc, #196]	; (8003b20 <HAL_TIM_Base_MspInit+0x134>)
 8003a5c:	f043 0302 	orr.w	r3, r3, #2
 8003a60:	6413      	str	r3, [r2, #64]	; 0x40
 8003a62:	4b2f      	ldr	r3, [pc, #188]	; (8003b20 <HAL_TIM_Base_MspInit+0x134>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	61bb      	str	r3, [r7, #24]
 8003a6c:	69bb      	ldr	r3, [r7, #24]
}
 8003a6e:	e050      	b.n	8003b12 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM5)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a2c      	ldr	r2, [pc, #176]	; (8003b28 <HAL_TIM_Base_MspInit+0x13c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d10c      	bne.n	8003a94 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a7a:	4b29      	ldr	r3, [pc, #164]	; (8003b20 <HAL_TIM_Base_MspInit+0x134>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	4a28      	ldr	r2, [pc, #160]	; (8003b20 <HAL_TIM_Base_MspInit+0x134>)
 8003a80:	f043 0308 	orr.w	r3, r3, #8
 8003a84:	6413      	str	r3, [r2, #64]	; 0x40
 8003a86:	4b26      	ldr	r3, [pc, #152]	; (8003b20 <HAL_TIM_Base_MspInit+0x134>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	697b      	ldr	r3, [r7, #20]
}
 8003a92:	e03e      	b.n	8003b12 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM8)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a24      	ldr	r2, [pc, #144]	; (8003b2c <HAL_TIM_Base_MspInit+0x140>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003a9e:	4b20      	ldr	r3, [pc, #128]	; (8003b20 <HAL_TIM_Base_MspInit+0x134>)
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	4a1f      	ldr	r2, [pc, #124]	; (8003b20 <HAL_TIM_Base_MspInit+0x134>)
 8003aa4:	f043 0302 	orr.w	r3, r3, #2
 8003aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8003aaa:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <HAL_TIM_Base_MspInit+0x134>)
 8003aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	613b      	str	r3, [r7, #16]
 8003ab4:	693b      	ldr	r3, [r7, #16]
}
 8003ab6:	e02c      	b.n	8003b12 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM12)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a1c      	ldr	r2, [pc, #112]	; (8003b30 <HAL_TIM_Base_MspInit+0x144>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d127      	bne.n	8003b12 <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003ac2:	4b17      	ldr	r3, [pc, #92]	; (8003b20 <HAL_TIM_Base_MspInit+0x134>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	4a16      	ldr	r2, [pc, #88]	; (8003b20 <HAL_TIM_Base_MspInit+0x134>)
 8003ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003acc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ace:	4b14      	ldr	r3, [pc, #80]	; (8003b20 <HAL_TIM_Base_MspInit+0x134>)
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ada:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <HAL_TIM_Base_MspInit+0x134>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	4a10      	ldr	r2, [pc, #64]	; (8003b20 <HAL_TIM_Base_MspInit+0x134>)
 8003ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae6:	4b0e      	ldr	r3, [pc, #56]	; (8003b20 <HAL_TIM_Base_MspInit+0x134>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aee:	60bb      	str	r3, [r7, #8]
 8003af0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003af2:	2340      	movs	r3, #64	; 0x40
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af6:	2302      	movs	r3, #2
 8003af8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afe:	2300      	movs	r3, #0
 8003b00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003b02:	2309      	movs	r3, #9
 8003b04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4809      	ldr	r0, [pc, #36]	; (8003b34 <HAL_TIM_Base_MspInit+0x148>)
 8003b0e:	f001 fa77 	bl	8005000 <HAL_GPIO_Init>
}
 8003b12:	bf00      	nop
 8003b14:	3738      	adds	r7, #56	; 0x38
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40010000 	.word	0x40010000
 8003b20:	40023800 	.word	0x40023800
 8003b24:	40000400 	.word	0x40000400
 8003b28:	40000c00 	.word	0x40000c00
 8003b2c:	40010400 	.word	0x40010400
 8003b30:	40001800 	.word	0x40001800
 8003b34:	40021c00 	.word	0x40021c00

08003b38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08c      	sub	sp, #48	; 0x30
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b40:	f107 031c 	add.w	r3, r7, #28
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	605a      	str	r2, [r3, #4]
 8003b4a:	609a      	str	r2, [r3, #8]
 8003b4c:	60da      	str	r2, [r3, #12]
 8003b4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a45      	ldr	r2, [pc, #276]	; (8003c6c <HAL_TIM_MspPostInit+0x134>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d11d      	bne.n	8003b96 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b5a:	4b45      	ldr	r3, [pc, #276]	; (8003c70 <HAL_TIM_MspPostInit+0x138>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	4a44      	ldr	r2, [pc, #272]	; (8003c70 <HAL_TIM_MspPostInit+0x138>)
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	6313      	str	r3, [r2, #48]	; 0x30
 8003b66:	4b42      	ldr	r3, [pc, #264]	; (8003c70 <HAL_TIM_MspPostInit+0x138>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	61bb      	str	r3, [r7, #24]
 8003b70:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8003b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b80:	2300      	movs	r3, #0
 8003b82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b84:	2301      	movs	r3, #1
 8003b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003b88:	f107 031c 	add.w	r3, r7, #28
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4839      	ldr	r0, [pc, #228]	; (8003c74 <HAL_TIM_MspPostInit+0x13c>)
 8003b90:	f001 fa36 	bl	8005000 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003b94:	e065      	b.n	8003c62 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM2)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b9e:	d11d      	bne.n	8003bdc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ba0:	4b33      	ldr	r3, [pc, #204]	; (8003c70 <HAL_TIM_MspPostInit+0x138>)
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	4a32      	ldr	r2, [pc, #200]	; (8003c70 <HAL_TIM_MspPostInit+0x138>)
 8003ba6:	f043 0301 	orr.w	r3, r3, #1
 8003baa:	6313      	str	r3, [r2, #48]	; 0x30
 8003bac:	4b30      	ldr	r3, [pc, #192]	; (8003c70 <HAL_TIM_MspPostInit+0x138>)
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003bb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003bce:	f107 031c 	add.w	r3, r7, #28
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4827      	ldr	r0, [pc, #156]	; (8003c74 <HAL_TIM_MspPostInit+0x13c>)
 8003bd6:	f001 fa13 	bl	8005000 <HAL_GPIO_Init>
}
 8003bda:	e042      	b.n	8003c62 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM3)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a25      	ldr	r2, [pc, #148]	; (8003c78 <HAL_TIM_MspPostInit+0x140>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d11c      	bne.n	8003c20 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003be6:	4b22      	ldr	r3, [pc, #136]	; (8003c70 <HAL_TIM_MspPostInit+0x138>)
 8003be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bea:	4a21      	ldr	r2, [pc, #132]	; (8003c70 <HAL_TIM_MspPostInit+0x138>)
 8003bec:	f043 0302 	orr.w	r3, r3, #2
 8003bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bf2:	4b1f      	ldr	r3, [pc, #124]	; (8003c70 <HAL_TIM_MspPostInit+0x138>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8003bfe:	2310      	movs	r3, #16
 8003c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c02:	2302      	movs	r3, #2
 8003c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c0e:	2302      	movs	r3, #2
 8003c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003c12:	f107 031c 	add.w	r3, r7, #28
 8003c16:	4619      	mov	r1, r3
 8003c18:	4818      	ldr	r0, [pc, #96]	; (8003c7c <HAL_TIM_MspPostInit+0x144>)
 8003c1a:	f001 f9f1 	bl	8005000 <HAL_GPIO_Init>
}
 8003c1e:	e020      	b.n	8003c62 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a16      	ldr	r2, [pc, #88]	; (8003c80 <HAL_TIM_MspPostInit+0x148>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d11b      	bne.n	8003c62 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003c2a:	4b11      	ldr	r3, [pc, #68]	; (8003c70 <HAL_TIM_MspPostInit+0x138>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	4a10      	ldr	r2, [pc, #64]	; (8003c70 <HAL_TIM_MspPostInit+0x138>)
 8003c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c34:	6313      	str	r3, [r2, #48]	; 0x30
 8003c36:	4b0e      	ldr	r3, [pc, #56]	; (8003c70 <HAL_TIM_MspPostInit+0x138>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003c42:	2301      	movs	r3, #1
 8003c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c46:	2302      	movs	r3, #2
 8003c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003c52:	2302      	movs	r3, #2
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003c56:	f107 031c 	add.w	r3, r7, #28
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4809      	ldr	r0, [pc, #36]	; (8003c84 <HAL_TIM_MspPostInit+0x14c>)
 8003c5e:	f001 f9cf 	bl	8005000 <HAL_GPIO_Init>
}
 8003c62:	bf00      	nop
 8003c64:	3730      	adds	r7, #48	; 0x30
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40010000 	.word	0x40010000
 8003c70:	40023800 	.word	0x40023800
 8003c74:	40020000 	.word	0x40020000
 8003c78:	40000400 	.word	0x40000400
 8003c7c:	40020400 	.word	0x40020400
 8003c80:	40000c00 	.word	0x40000c00
 8003c84:	40022000 	.word	0x40022000

08003c88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08c      	sub	sp, #48	; 0x30
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c90:	f107 031c 	add.w	r3, r7, #28
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	605a      	str	r2, [r3, #4]
 8003c9a:	609a      	str	r2, [r3, #8]
 8003c9c:	60da      	str	r2, [r3, #12]
 8003c9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a3c      	ldr	r2, [pc, #240]	; (8003d98 <HAL_UART_MspInit+0x110>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d145      	bne.n	8003d36 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003caa:	4b3c      	ldr	r3, [pc, #240]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	4a3b      	ldr	r2, [pc, #236]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003cb0:	f043 0310 	orr.w	r3, r3, #16
 8003cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cb6:	4b39      	ldr	r3, [pc, #228]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	61bb      	str	r3, [r7, #24]
 8003cc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cc2:	4b36      	ldr	r3, [pc, #216]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	4a35      	ldr	r2, [pc, #212]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003cc8:	f043 0302 	orr.w	r3, r3, #2
 8003ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cce:	4b33      	ldr	r3, [pc, #204]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cda:	4b30      	ldr	r3, [pc, #192]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	4a2f      	ldr	r2, [pc, #188]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003ce0:	f043 0301 	orr.w	r3, r3, #1
 8003ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce6:	4b2d      	ldr	r3, [pc, #180]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003cf2:	2380      	movs	r3, #128	; 0x80
 8003cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d02:	2307      	movs	r3, #7
 8003d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003d06:	f107 031c 	add.w	r3, r7, #28
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4824      	ldr	r0, [pc, #144]	; (8003da0 <HAL_UART_MspInit+0x118>)
 8003d0e:	f001 f977 	bl	8005000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003d12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d18:	2302      	movs	r3, #2
 8003d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d20:	2300      	movs	r3, #0
 8003d22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d24:	2307      	movs	r3, #7
 8003d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003d28:	f107 031c 	add.w	r3, r7, #28
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	481d      	ldr	r0, [pc, #116]	; (8003da4 <HAL_UART_MspInit+0x11c>)
 8003d30:	f001 f966 	bl	8005000 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003d34:	e02c      	b.n	8003d90 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a1b      	ldr	r2, [pc, #108]	; (8003da8 <HAL_UART_MspInit+0x120>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d127      	bne.n	8003d90 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003d40:	4b16      	ldr	r3, [pc, #88]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d44:	4a15      	ldr	r2, [pc, #84]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003d46:	f043 0320 	orr.w	r3, r3, #32
 8003d4a:	6453      	str	r3, [r2, #68]	; 0x44
 8003d4c:	4b13      	ldr	r3, [pc, #76]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d50:	f003 0320 	and.w	r3, r3, #32
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d58:	4b10      	ldr	r3, [pc, #64]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5c:	4a0f      	ldr	r2, [pc, #60]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003d5e:	f043 0304 	orr.w	r3, r3, #4
 8003d62:	6313      	str	r3, [r2, #48]	; 0x30
 8003d64:	4b0d      	ldr	r3, [pc, #52]	; (8003d9c <HAL_UART_MspInit+0x114>)
 8003d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	60bb      	str	r3, [r7, #8]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003d70:	23c0      	movs	r3, #192	; 0xc0
 8003d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d74:	2302      	movs	r3, #2
 8003d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003d80:	2308      	movs	r3, #8
 8003d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d84:	f107 031c 	add.w	r3, r7, #28
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4808      	ldr	r0, [pc, #32]	; (8003dac <HAL_UART_MspInit+0x124>)
 8003d8c:	f001 f938 	bl	8005000 <HAL_GPIO_Init>
}
 8003d90:	bf00      	nop
 8003d92:	3730      	adds	r7, #48	; 0x30
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40011000 	.word	0x40011000
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	40020400 	.word	0x40020400
 8003da4:	40020000 	.word	0x40020000
 8003da8:	40011400 	.word	0x40011400
 8003dac:	40020800 	.word	0x40020800

08003db0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003db6:	1d3b      	adds	r3, r7, #4
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	609a      	str	r2, [r3, #8]
 8003dc0:	60da      	str	r2, [r3, #12]
 8003dc2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003dc4:	4b3a      	ldr	r3, [pc, #232]	; (8003eb0 <HAL_FMC_MspInit+0x100>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d16d      	bne.n	8003ea8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8003dcc:	4b38      	ldr	r3, [pc, #224]	; (8003eb0 <HAL_FMC_MspInit+0x100>)
 8003dce:	2201      	movs	r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003dd2:	4b38      	ldr	r3, [pc, #224]	; (8003eb4 <HAL_FMC_MspInit+0x104>)
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd6:	4a37      	ldr	r2, [pc, #220]	; (8003eb4 <HAL_FMC_MspInit+0x104>)
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	6393      	str	r3, [r2, #56]	; 0x38
 8003dde:	4b35      	ldr	r3, [pc, #212]	; (8003eb4 <HAL_FMC_MspInit+0x104>)
 8003de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	603b      	str	r3, [r7, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8003dea:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003dee:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df0:	2302      	movs	r3, #2
 8003df2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df4:	2300      	movs	r3, #0
 8003df6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003dfc:	230c      	movs	r3, #12
 8003dfe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e00:	1d3b      	adds	r3, r7, #4
 8003e02:	4619      	mov	r1, r3
 8003e04:	482c      	ldr	r0, [pc, #176]	; (8003eb8 <HAL_FMC_MspInit+0x108>)
 8003e06:	f001 f8fb 	bl	8005000 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8003e0a:	f248 1333 	movw	r3, #33075	; 0x8133
 8003e0e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e10:	2302      	movs	r3, #2
 8003e12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e14:	2300      	movs	r3, #0
 8003e16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e1c:	230c      	movs	r3, #12
 8003e1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003e20:	1d3b      	adds	r3, r7, #4
 8003e22:	4619      	mov	r1, r3
 8003e24:	4825      	ldr	r0, [pc, #148]	; (8003ebc <HAL_FMC_MspInit+0x10c>)
 8003e26:	f001 f8eb 	bl	8005000 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003e2a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003e2e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e30:	2302      	movs	r3, #2
 8003e32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e3c:	230c      	movs	r3, #12
 8003e3e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e40:	1d3b      	adds	r3, r7, #4
 8003e42:	4619      	mov	r1, r3
 8003e44:	481e      	ldr	r0, [pc, #120]	; (8003ec0 <HAL_FMC_MspInit+0x110>)
 8003e46:	f001 f8db 	bl	8005000 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003e4a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003e4e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e50:	2302      	movs	r3, #2
 8003e52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e5c:	230c      	movs	r3, #12
 8003e5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e60:	1d3b      	adds	r3, r7, #4
 8003e62:	4619      	mov	r1, r3
 8003e64:	4817      	ldr	r0, [pc, #92]	; (8003ec4 <HAL_FMC_MspInit+0x114>)
 8003e66:	f001 f8cb 	bl	8005000 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003e6a:	2328      	movs	r3, #40	; 0x28
 8003e6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e72:	2300      	movs	r3, #0
 8003e74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e76:	2303      	movs	r3, #3
 8003e78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e7a:	230c      	movs	r3, #12
 8003e7c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003e7e:	1d3b      	adds	r3, r7, #4
 8003e80:	4619      	mov	r1, r3
 8003e82:	4811      	ldr	r0, [pc, #68]	; (8003ec8 <HAL_FMC_MspInit+0x118>)
 8003e84:	f001 f8bc 	bl	8005000 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003e88:	2308      	movs	r3, #8
 8003e8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e94:	2303      	movs	r3, #3
 8003e96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e98:	230c      	movs	r3, #12
 8003e9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003e9c:	1d3b      	adds	r3, r7, #4
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	480a      	ldr	r0, [pc, #40]	; (8003ecc <HAL_FMC_MspInit+0x11c>)
 8003ea2:	f001 f8ad 	bl	8005000 <HAL_GPIO_Init>
 8003ea6:	e000      	b.n	8003eaa <HAL_FMC_MspInit+0xfa>
    return;
 8003ea8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	20000894 	.word	0x20000894
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	40021800 	.word	0x40021800
 8003ec0:	40020c00 	.word	0x40020c00
 8003ec4:	40021400 	.word	0x40021400
 8003ec8:	40021c00 	.word	0x40021c00
 8003ecc:	40020800 	.word	0x40020800

08003ed0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003ed8:	f7ff ff6a 	bl	8003db0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003edc:	bf00      	nop
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08a      	sub	sp, #40	; 0x28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a2b      	ldr	r2, [pc, #172]	; (8003fa0 <HAL_SAI_MspInit+0xbc>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d124      	bne.n	8003f40 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003ef6:	4b2b      	ldr	r3, [pc, #172]	; (8003fa4 <HAL_SAI_MspInit+0xc0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10b      	bne.n	8003f16 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003efe:	4b2a      	ldr	r3, [pc, #168]	; (8003fa8 <HAL_SAI_MspInit+0xc4>)
 8003f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f02:	4a29      	ldr	r2, [pc, #164]	; (8003fa8 <HAL_SAI_MspInit+0xc4>)
 8003f04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f08:	6453      	str	r3, [r2, #68]	; 0x44
 8003f0a:	4b27      	ldr	r3, [pc, #156]	; (8003fa8 <HAL_SAI_MspInit+0xc4>)
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f12:	613b      	str	r3, [r7, #16]
 8003f14:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003f16:	4b23      	ldr	r3, [pc, #140]	; (8003fa4 <HAL_SAI_MspInit+0xc0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	4a21      	ldr	r2, [pc, #132]	; (8003fa4 <HAL_SAI_MspInit+0xc0>)
 8003f1e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003f20:	23f0      	movs	r3, #240	; 0xf0
 8003f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f24:	2302      	movs	r3, #2
 8003f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003f30:	230a      	movs	r3, #10
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003f34:	f107 0314 	add.w	r3, r7, #20
 8003f38:	4619      	mov	r1, r3
 8003f3a:	481c      	ldr	r0, [pc, #112]	; (8003fac <HAL_SAI_MspInit+0xc8>)
 8003f3c:	f001 f860 	bl	8005000 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a1a      	ldr	r2, [pc, #104]	; (8003fb0 <HAL_SAI_MspInit+0xcc>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d125      	bne.n	8003f96 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003f4a:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <HAL_SAI_MspInit+0xc0>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10b      	bne.n	8003f6a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003f52:	4b15      	ldr	r3, [pc, #84]	; (8003fa8 <HAL_SAI_MspInit+0xc4>)
 8003f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f56:	4a14      	ldr	r2, [pc, #80]	; (8003fa8 <HAL_SAI_MspInit+0xc4>)
 8003f58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f5e:	4b12      	ldr	r3, [pc, #72]	; (8003fa8 <HAL_SAI_MspInit+0xc4>)
 8003f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003f6a:	4b0e      	ldr	r3, [pc, #56]	; (8003fa4 <HAL_SAI_MspInit+0xc0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	4a0c      	ldr	r2, [pc, #48]	; (8003fa4 <HAL_SAI_MspInit+0xc0>)
 8003f72:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f82:	2300      	movs	r3, #0
 8003f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003f86:	230a      	movs	r3, #10
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003f8a:	f107 0314 	add.w	r3, r7, #20
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4808      	ldr	r0, [pc, #32]	; (8003fb4 <HAL_SAI_MspInit+0xd0>)
 8003f92:	f001 f835 	bl	8005000 <HAL_GPIO_Init>

    }
}
 8003f96:	bf00      	nop
 8003f98:	3728      	adds	r7, #40	; 0x28
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40015c04 	.word	0x40015c04
 8003fa4:	20000898 	.word	0x20000898
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	40022000 	.word	0x40022000
 8003fb0:	40015c24 	.word	0x40015c24
 8003fb4:	40021800 	.word	0x40021800

08003fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003fbc:	e7fe      	b.n	8003fbc <NMI_Handler+0x4>

08003fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fc2:	e7fe      	b.n	8003fc2 <HardFault_Handler+0x4>

08003fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fc8:	e7fe      	b.n	8003fc8 <MemManage_Handler+0x4>

08003fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fce:	e7fe      	b.n	8003fce <BusFault_Handler+0x4>

08003fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fd4:	e7fe      	b.n	8003fd4 <UsageFault_Handler+0x4>

08003fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003fda:	bf00      	nop
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fe8:	bf00      	nop
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ff6:	bf00      	nop
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004004:	f000 f8ce 	bl	80041a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004008:	bf00      	nop
 800400a:	bd80      	pop	{r7, pc}

0800400c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8004010:	4802      	ldr	r0, [pc, #8]	; (800401c <OTG_FS_IRQHandler+0x10>)
 8004012:	f001 fc57 	bl	80058c4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004016:	bf00      	nop
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	2000194c 	.word	0x2000194c

08004020 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004024:	4802      	ldr	r0, [pc, #8]	; (8004030 <LTDC_IRQHandler+0x10>)
 8004026:	f003 f93f 	bl	80072a8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800402a:	bf00      	nop
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	20000cb4 	.word	0x20000cb4

08004034 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004038:	4802      	ldr	r0, [pc, #8]	; (8004044 <DMA2D_IRQHandler+0x10>)
 800403a:	f000 fe3f 	bl	8004cbc <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800403e:	bf00      	nop
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20000f68 	.word	0x20000f68

08004048 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004050:	4a14      	ldr	r2, [pc, #80]	; (80040a4 <_sbrk+0x5c>)
 8004052:	4b15      	ldr	r3, [pc, #84]	; (80040a8 <_sbrk+0x60>)
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800405c:	4b13      	ldr	r3, [pc, #76]	; (80040ac <_sbrk+0x64>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d102      	bne.n	800406a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004064:	4b11      	ldr	r3, [pc, #68]	; (80040ac <_sbrk+0x64>)
 8004066:	4a12      	ldr	r2, [pc, #72]	; (80040b0 <_sbrk+0x68>)
 8004068:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800406a:	4b10      	ldr	r3, [pc, #64]	; (80040ac <_sbrk+0x64>)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4413      	add	r3, r2
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	429a      	cmp	r2, r3
 8004076:	d207      	bcs.n	8004088 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004078:	f00e f9a0 	bl	80123bc <__errno>
 800407c:	4603      	mov	r3, r0
 800407e:	220c      	movs	r2, #12
 8004080:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004086:	e009      	b.n	800409c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004088:	4b08      	ldr	r3, [pc, #32]	; (80040ac <_sbrk+0x64>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800408e:	4b07      	ldr	r3, [pc, #28]	; (80040ac <_sbrk+0x64>)
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4413      	add	r3, r2
 8004096:	4a05      	ldr	r2, [pc, #20]	; (80040ac <_sbrk+0x64>)
 8004098:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800409a:	68fb      	ldr	r3, [r7, #12]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	20050000 	.word	0x20050000
 80040a8:	00000800 	.word	0x00000800
 80040ac:	2000089c 	.word	0x2000089c
 80040b0:	20001c60 	.word	0x20001c60

080040b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040b8:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <SystemInit+0x20>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040be:	4a05      	ldr	r2, [pc, #20]	; (80040d4 <SystemInit+0x20>)
 80040c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040c8:	bf00      	nop
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	e000ed00 	.word	0xe000ed00

080040d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80040d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004110 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80040dc:	480d      	ldr	r0, [pc, #52]	; (8004114 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80040de:	490e      	ldr	r1, [pc, #56]	; (8004118 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80040e0:	4a0e      	ldr	r2, [pc, #56]	; (800411c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80040e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040e4:	e002      	b.n	80040ec <LoopCopyDataInit>

080040e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040ea:	3304      	adds	r3, #4

080040ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040f0:	d3f9      	bcc.n	80040e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040f2:	4a0b      	ldr	r2, [pc, #44]	; (8004120 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80040f4:	4c0b      	ldr	r4, [pc, #44]	; (8004124 <LoopFillZerobss+0x26>)
  movs r3, #0
 80040f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040f8:	e001      	b.n	80040fe <LoopFillZerobss>

080040fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040fc:	3204      	adds	r2, #4

080040fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004100:	d3fb      	bcc.n	80040fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004102:	f7ff ffd7 	bl	80040b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004106:	f00e f95f 	bl	80123c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800410a:	f7fc ff63 	bl	8000fd4 <main>
  bx  lr    
 800410e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004110:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004118:	20000878 	.word	0x20000878
  ldr r2, =_sidata
 800411c:	08025478 	.word	0x08025478
  ldr r2, =_sbss
 8004120:	20000878 	.word	0x20000878
  ldr r4, =_ebss
 8004124:	20001c60 	.word	0x20001c60

08004128 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004128:	e7fe      	b.n	8004128 <ADC_IRQHandler>

0800412a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800412e:	2003      	movs	r0, #3
 8004130:	f000 fbd4 	bl	80048dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004134:	200f      	movs	r0, #15
 8004136:	f000 f805 	bl	8004144 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800413a:	f7ff f847 	bl	80031cc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800414c:	4b12      	ldr	r3, [pc, #72]	; (8004198 <HAL_InitTick+0x54>)
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	4b12      	ldr	r3, [pc, #72]	; (800419c <HAL_InitTick+0x58>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	4619      	mov	r1, r3
 8004156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800415a:	fbb3 f3f1 	udiv	r3, r3, r1
 800415e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004162:	4618      	mov	r0, r3
 8004164:	f000 fbef 	bl	8004946 <HAL_SYSTICK_Config>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e00e      	b.n	8004190 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b0f      	cmp	r3, #15
 8004176:	d80a      	bhi.n	800418e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004178:	2200      	movs	r2, #0
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004180:	f000 fbb7 	bl	80048f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004184:	4a06      	ldr	r2, [pc, #24]	; (80041a0 <HAL_InitTick+0x5c>)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	e000      	b.n	8004190 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
}
 8004190:	4618      	mov	r0, r3
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20000000 	.word	0x20000000
 800419c:	20000008 	.word	0x20000008
 80041a0:	20000004 	.word	0x20000004

080041a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041a8:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <HAL_IncTick+0x20>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <HAL_IncTick+0x24>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4413      	add	r3, r2
 80041b4:	4a04      	ldr	r2, [pc, #16]	; (80041c8 <HAL_IncTick+0x24>)
 80041b6:	6013      	str	r3, [r2, #0]
}
 80041b8:	bf00      	nop
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	20000008 	.word	0x20000008
 80041c8:	20001108 	.word	0x20001108

080041cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  return uwTick;
 80041d0:	4b03      	ldr	r3, [pc, #12]	; (80041e0 <HAL_GetTick+0x14>)
 80041d2:	681b      	ldr	r3, [r3, #0]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	20001108 	.word	0x20001108

080041e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041ec:	f7ff ffee 	bl	80041cc <HAL_GetTick>
 80041f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041fc:	d005      	beq.n	800420a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041fe:	4b0a      	ldr	r3, [pc, #40]	; (8004228 <HAL_Delay+0x44>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4413      	add	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800420a:	bf00      	nop
 800420c:	f7ff ffde 	bl	80041cc <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	429a      	cmp	r2, r3
 800421a:	d8f7      	bhi.n	800420c <HAL_Delay+0x28>
  {
  }
}
 800421c:	bf00      	nop
 800421e:	bf00      	nop
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20000008 	.word	0x20000008

0800422c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004234:	2300      	movs	r3, #0
 8004236:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e031      	b.n	80042a6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	2b00      	cmp	r3, #0
 8004248:	d109      	bne.n	800425e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7fe ffe2 	bl	8003214 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f003 0310 	and.w	r3, r3, #16
 8004266:	2b00      	cmp	r3, #0
 8004268:	d116      	bne.n	8004298 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800426e:	4b10      	ldr	r3, [pc, #64]	; (80042b0 <HAL_ADC_Init+0x84>)
 8004270:	4013      	ands	r3, r2
 8004272:	f043 0202 	orr.w	r2, r3, #2
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f964 	bl	8004548 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f023 0303 	bic.w	r3, r3, #3
 800428e:	f043 0201 	orr.w	r2, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	641a      	str	r2, [r3, #64]	; 0x40
 8004296:	e001      	b.n	800429c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	ffffeefd 	.word	0xffffeefd

080042b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x1c>
 80042cc:	2302      	movs	r3, #2
 80042ce:	e12a      	b.n	8004526 <HAL_ADC_ConfigChannel+0x272>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b09      	cmp	r3, #9
 80042de:	d93a      	bls.n	8004356 <HAL_ADC_ConfigChannel+0xa2>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042e8:	d035      	beq.n	8004356 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68d9      	ldr	r1, [r3, #12]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	461a      	mov	r2, r3
 80042f8:	4613      	mov	r3, r2
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	4413      	add	r3, r2
 80042fe:	3b1e      	subs	r3, #30
 8004300:	2207      	movs	r2, #7
 8004302:	fa02 f303 	lsl.w	r3, r2, r3
 8004306:	43da      	mvns	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	400a      	ands	r2, r1
 800430e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a87      	ldr	r2, [pc, #540]	; (8004534 <HAL_ADC_ConfigChannel+0x280>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d10a      	bne.n	8004330 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68d9      	ldr	r1, [r3, #12]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	061a      	lsls	r2, r3, #24
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800432e:	e035      	b.n	800439c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68d9      	ldr	r1, [r3, #12]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	b29b      	uxth	r3, r3
 8004340:	4618      	mov	r0, r3
 8004342:	4603      	mov	r3, r0
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	4403      	add	r3, r0
 8004348:	3b1e      	subs	r3, #30
 800434a:	409a      	lsls	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004354:	e022      	b.n	800439c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6919      	ldr	r1, [r3, #16]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	b29b      	uxth	r3, r3
 8004362:	461a      	mov	r2, r3
 8004364:	4613      	mov	r3, r2
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	4413      	add	r3, r2
 800436a:	2207      	movs	r2, #7
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	43da      	mvns	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	400a      	ands	r2, r1
 8004378:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6919      	ldr	r1, [r3, #16]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	b29b      	uxth	r3, r3
 800438a:	4618      	mov	r0, r3
 800438c:	4603      	mov	r3, r0
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	4403      	add	r3, r0
 8004392:	409a      	lsls	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b06      	cmp	r3, #6
 80043a2:	d824      	bhi.n	80043ee <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	3b05      	subs	r3, #5
 80043b6:	221f      	movs	r2, #31
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	43da      	mvns	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	400a      	ands	r2, r1
 80043c4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	4618      	mov	r0, r3
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	4613      	mov	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	3b05      	subs	r3, #5
 80043e0:	fa00 f203 	lsl.w	r2, r0, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	635a      	str	r2, [r3, #52]	; 0x34
 80043ec:	e04c      	b.n	8004488 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b0c      	cmp	r3, #12
 80043f4:	d824      	bhi.n	8004440 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	3b23      	subs	r3, #35	; 0x23
 8004408:	221f      	movs	r2, #31
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	43da      	mvns	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	400a      	ands	r2, r1
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	b29b      	uxth	r3, r3
 8004424:	4618      	mov	r0, r3
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	4613      	mov	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	3b23      	subs	r3, #35	; 0x23
 8004432:	fa00 f203 	lsl.w	r2, r0, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	631a      	str	r2, [r3, #48]	; 0x30
 800443e:	e023      	b.n	8004488 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	4613      	mov	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	3b41      	subs	r3, #65	; 0x41
 8004452:	221f      	movs	r2, #31
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	43da      	mvns	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	400a      	ands	r2, r1
 8004460:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	b29b      	uxth	r3, r3
 800446e:	4618      	mov	r0, r3
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	3b41      	subs	r3, #65	; 0x41
 800447c:	fa00 f203 	lsl.w	r2, r0, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a2a      	ldr	r2, [pc, #168]	; (8004538 <HAL_ADC_ConfigChannel+0x284>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d10a      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x1f4>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800449a:	d105      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800449c:	4b27      	ldr	r3, [pc, #156]	; (800453c <HAL_ADC_ConfigChannel+0x288>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	4a26      	ldr	r2, [pc, #152]	; (800453c <HAL_ADC_ConfigChannel+0x288>)
 80044a2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80044a6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a22      	ldr	r2, [pc, #136]	; (8004538 <HAL_ADC_ConfigChannel+0x284>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d109      	bne.n	80044c6 <HAL_ADC_ConfigChannel+0x212>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b12      	cmp	r3, #18
 80044b8:	d105      	bne.n	80044c6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80044ba:	4b20      	ldr	r3, [pc, #128]	; (800453c <HAL_ADC_ConfigChannel+0x288>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	4a1f      	ldr	r2, [pc, #124]	; (800453c <HAL_ADC_ConfigChannel+0x288>)
 80044c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044c4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a1b      	ldr	r2, [pc, #108]	; (8004538 <HAL_ADC_ConfigChannel+0x284>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d125      	bne.n	800451c <HAL_ADC_ConfigChannel+0x268>
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a17      	ldr	r2, [pc, #92]	; (8004534 <HAL_ADC_ConfigChannel+0x280>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d003      	beq.n	80044e2 <HAL_ADC_ConfigChannel+0x22e>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2b11      	cmp	r3, #17
 80044e0:	d11c      	bne.n	800451c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80044e2:	4b16      	ldr	r3, [pc, #88]	; (800453c <HAL_ADC_ConfigChannel+0x288>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	4a15      	ldr	r2, [pc, #84]	; (800453c <HAL_ADC_ConfigChannel+0x288>)
 80044e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044ec:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a10      	ldr	r2, [pc, #64]	; (8004534 <HAL_ADC_ConfigChannel+0x280>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d111      	bne.n	800451c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80044f8:	4b11      	ldr	r3, [pc, #68]	; (8004540 <HAL_ADC_ConfigChannel+0x28c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a11      	ldr	r2, [pc, #68]	; (8004544 <HAL_ADC_ConfigChannel+0x290>)
 80044fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004502:	0c9a      	lsrs	r2, r3, #18
 8004504:	4613      	mov	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800450e:	e002      	b.n	8004516 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3b01      	subs	r3, #1
 8004514:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1f9      	bne.n	8004510 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	10000012 	.word	0x10000012
 8004538:	40012000 	.word	0x40012000
 800453c:	40012300 	.word	0x40012300
 8004540:	20000000 	.word	0x20000000
 8004544:	431bde83 	.word	0x431bde83

08004548 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004550:	4b78      	ldr	r3, [pc, #480]	; (8004734 <ADC_Init+0x1ec>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	4a77      	ldr	r2, [pc, #476]	; (8004734 <ADC_Init+0x1ec>)
 8004556:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800455a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800455c:	4b75      	ldr	r3, [pc, #468]	; (8004734 <ADC_Init+0x1ec>)
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	4973      	ldr	r1, [pc, #460]	; (8004734 <ADC_Init+0x1ec>)
 8004566:	4313      	orrs	r3, r2
 8004568:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004578:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6859      	ldr	r1, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	021a      	lsls	r2, r3, #8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800459c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6859      	ldr	r1, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6899      	ldr	r1, [r3, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d6:	4a58      	ldr	r2, [pc, #352]	; (8004738 <ADC_Init+0x1f0>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d022      	beq.n	8004622 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689a      	ldr	r2, [r3, #8]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6899      	ldr	r1, [r3, #8]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800460c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6899      	ldr	r1, [r3, #8]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	609a      	str	r2, [r3, #8]
 8004620:	e00f      	b.n	8004642 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004630:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004640:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0202 	bic.w	r2, r2, #2
 8004650:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6899      	ldr	r1, [r3, #8]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	005a      	lsls	r2, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3020 	ldrb.w	r3, [r3, #32]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d01b      	beq.n	80046a8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800467e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800468e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6859      	ldr	r1, [r3, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	3b01      	subs	r3, #1
 800469c:	035a      	lsls	r2, r3, #13
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	605a      	str	r2, [r3, #4]
 80046a6:	e007      	b.n	80046b8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80046c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	051a      	lsls	r2, r3, #20
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80046ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6899      	ldr	r1, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046fa:	025a      	lsls	r2, r3, #9
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004712:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6899      	ldr	r1, [r3, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	029a      	lsls	r2, r3, #10
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	609a      	str	r2, [r3, #8]
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	40012300 	.word	0x40012300
 8004738:	0f000001 	.word	0x0f000001

0800473c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800474c:	4b0b      	ldr	r3, [pc, #44]	; (800477c <__NVIC_SetPriorityGrouping+0x40>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004758:	4013      	ands	r3, r2
 800475a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004764:	4b06      	ldr	r3, [pc, #24]	; (8004780 <__NVIC_SetPriorityGrouping+0x44>)
 8004766:	4313      	orrs	r3, r2
 8004768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800476a:	4a04      	ldr	r2, [pc, #16]	; (800477c <__NVIC_SetPriorityGrouping+0x40>)
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	60d3      	str	r3, [r2, #12]
}
 8004770:	bf00      	nop
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	e000ed00 	.word	0xe000ed00
 8004780:	05fa0000 	.word	0x05fa0000

08004784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004788:	4b04      	ldr	r3, [pc, #16]	; (800479c <__NVIC_GetPriorityGrouping+0x18>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	0a1b      	lsrs	r3, r3, #8
 800478e:	f003 0307 	and.w	r3, r3, #7
}
 8004792:	4618      	mov	r0, r3
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	e000ed00 	.word	0xe000ed00

080047a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	db0b      	blt.n	80047ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	f003 021f 	and.w	r2, r3, #31
 80047b8:	4907      	ldr	r1, [pc, #28]	; (80047d8 <__NVIC_EnableIRQ+0x38>)
 80047ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	2001      	movs	r0, #1
 80047c2:	fa00 f202 	lsl.w	r2, r0, r2
 80047c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	e000e100 	.word	0xe000e100

080047dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	6039      	str	r1, [r7, #0]
 80047e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	db0a      	blt.n	8004806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	490c      	ldr	r1, [pc, #48]	; (8004828 <__NVIC_SetPriority+0x4c>)
 80047f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fa:	0112      	lsls	r2, r2, #4
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	440b      	add	r3, r1
 8004800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004804:	e00a      	b.n	800481c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	b2da      	uxtb	r2, r3
 800480a:	4908      	ldr	r1, [pc, #32]	; (800482c <__NVIC_SetPriority+0x50>)
 800480c:	79fb      	ldrb	r3, [r7, #7]
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	3b04      	subs	r3, #4
 8004814:	0112      	lsls	r2, r2, #4
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	440b      	add	r3, r1
 800481a:	761a      	strb	r2, [r3, #24]
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	e000e100 	.word	0xe000e100
 800482c:	e000ed00 	.word	0xe000ed00

08004830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004830:	b480      	push	{r7}
 8004832:	b089      	sub	sp, #36	; 0x24
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f1c3 0307 	rsb	r3, r3, #7
 800484a:	2b04      	cmp	r3, #4
 800484c:	bf28      	it	cs
 800484e:	2304      	movcs	r3, #4
 8004850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	3304      	adds	r3, #4
 8004856:	2b06      	cmp	r3, #6
 8004858:	d902      	bls.n	8004860 <NVIC_EncodePriority+0x30>
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	3b03      	subs	r3, #3
 800485e:	e000      	b.n	8004862 <NVIC_EncodePriority+0x32>
 8004860:	2300      	movs	r3, #0
 8004862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004864:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	fa02 f303 	lsl.w	r3, r2, r3
 800486e:	43da      	mvns	r2, r3
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	401a      	ands	r2, r3
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004878:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	fa01 f303 	lsl.w	r3, r1, r3
 8004882:	43d9      	mvns	r1, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004888:	4313      	orrs	r3, r2
         );
}
 800488a:	4618      	mov	r0, r3
 800488c:	3724      	adds	r7, #36	; 0x24
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
	...

08004898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048a8:	d301      	bcc.n	80048ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048aa:	2301      	movs	r3, #1
 80048ac:	e00f      	b.n	80048ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048ae:	4a0a      	ldr	r2, [pc, #40]	; (80048d8 <SysTick_Config+0x40>)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048b6:	210f      	movs	r1, #15
 80048b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048bc:	f7ff ff8e 	bl	80047dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048c0:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <SysTick_Config+0x40>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048c6:	4b04      	ldr	r3, [pc, #16]	; (80048d8 <SysTick_Config+0x40>)
 80048c8:	2207      	movs	r2, #7
 80048ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	e000e010 	.word	0xe000e010

080048dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7ff ff29 	bl	800473c <__NVIC_SetPriorityGrouping>
}
 80048ea:	bf00      	nop
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b086      	sub	sp, #24
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	4603      	mov	r3, r0
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	607a      	str	r2, [r7, #4]
 80048fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004900:	2300      	movs	r3, #0
 8004902:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004904:	f7ff ff3e 	bl	8004784 <__NVIC_GetPriorityGrouping>
 8004908:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	68b9      	ldr	r1, [r7, #8]
 800490e:	6978      	ldr	r0, [r7, #20]
 8004910:	f7ff ff8e 	bl	8004830 <NVIC_EncodePriority>
 8004914:	4602      	mov	r2, r0
 8004916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800491a:	4611      	mov	r1, r2
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff ff5d 	bl	80047dc <__NVIC_SetPriority>
}
 8004922:	bf00      	nop
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	4603      	mov	r3, r0
 8004932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff ff31 	bl	80047a0 <__NVIC_EnableIRQ>
}
 800493e:	bf00      	nop
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b082      	sub	sp, #8
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff ffa2 	bl	8004898 <SysTick_Config>
 8004954:	4603      	mov	r3, r0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
	...

08004960 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e054      	b.n	8004a1c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	7f5b      	ldrb	r3, [r3, #29]
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	d105      	bne.n	8004988 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fe fca0 	bl	80032c8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	791b      	ldrb	r3, [r3, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10c      	bne.n	80049b0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a22      	ldr	r2, [pc, #136]	; (8004a24 <HAL_CRC_Init+0xc4>)
 800499c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0218 	bic.w	r2, r2, #24
 80049ac:	609a      	str	r2, [r3, #8]
 80049ae:	e00c      	b.n	80049ca <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6899      	ldr	r1, [r3, #8]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	461a      	mov	r2, r3
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f834 	bl	8004a28 <HAL_CRCEx_Polynomial_Set>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e028      	b.n	8004a1c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	795b      	ldrb	r3, [r3, #5]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d105      	bne.n	80049de <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049da:	611a      	str	r2, [r3, #16]
 80049dc:	e004      	b.n	80049e8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6912      	ldr	r2, [r2, #16]
 80049e6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695a      	ldr	r2, [r3, #20]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	699a      	ldr	r2, [r3, #24]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	04c11db7 	.word	0x04c11db7

08004a28 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004a38:	231f      	movs	r3, #31
 8004a3a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004a3c:	bf00      	nop
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1e5a      	subs	r2, r3, #1
 8004a42:	613a      	str	r2, [r7, #16]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d009      	beq.n	8004a5c <HAL_CRCEx_Polynomial_Set+0x34>
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	f003 031f 	and.w	r3, r3, #31
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	fa22 f303 	lsr.w	r3, r2, r3
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0f0      	beq.n	8004a3e <HAL_CRCEx_Polynomial_Set+0x16>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b18      	cmp	r3, #24
 8004a60:	d846      	bhi.n	8004af0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004a62:	a201      	add	r2, pc, #4	; (adr r2, 8004a68 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a68:	08004af7 	.word	0x08004af7
 8004a6c:	08004af1 	.word	0x08004af1
 8004a70:	08004af1 	.word	0x08004af1
 8004a74:	08004af1 	.word	0x08004af1
 8004a78:	08004af1 	.word	0x08004af1
 8004a7c:	08004af1 	.word	0x08004af1
 8004a80:	08004af1 	.word	0x08004af1
 8004a84:	08004af1 	.word	0x08004af1
 8004a88:	08004ae5 	.word	0x08004ae5
 8004a8c:	08004af1 	.word	0x08004af1
 8004a90:	08004af1 	.word	0x08004af1
 8004a94:	08004af1 	.word	0x08004af1
 8004a98:	08004af1 	.word	0x08004af1
 8004a9c:	08004af1 	.word	0x08004af1
 8004aa0:	08004af1 	.word	0x08004af1
 8004aa4:	08004af1 	.word	0x08004af1
 8004aa8:	08004ad9 	.word	0x08004ad9
 8004aac:	08004af1 	.word	0x08004af1
 8004ab0:	08004af1 	.word	0x08004af1
 8004ab4:	08004af1 	.word	0x08004af1
 8004ab8:	08004af1 	.word	0x08004af1
 8004abc:	08004af1 	.word	0x08004af1
 8004ac0:	08004af1 	.word	0x08004af1
 8004ac4:	08004af1 	.word	0x08004af1
 8004ac8:	08004acd 	.word	0x08004acd
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	2b06      	cmp	r3, #6
 8004ad0:	d913      	bls.n	8004afa <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004ad6:	e010      	b.n	8004afa <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	2b07      	cmp	r3, #7
 8004adc:	d90f      	bls.n	8004afe <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004ae2:	e00c      	b.n	8004afe <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	2b0f      	cmp	r3, #15
 8004ae8:	d90b      	bls.n	8004b02 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004aee:	e008      	b.n	8004b02 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	75fb      	strb	r3, [r7, #23]
      break;
 8004af4:	e006      	b.n	8004b04 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004af6:	bf00      	nop
 8004af8:	e004      	b.n	8004b04 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004afa:	bf00      	nop
 8004afc:	e002      	b.n	8004b04 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004afe:	bf00      	nop
 8004b00:	e000      	b.n	8004b04 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004b02:	bf00      	nop
  }
  if (status == HAL_OK)
 8004b04:	7dfb      	ldrb	r3, [r7, #23]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10d      	bne.n	8004b26 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f023 0118 	bic.w	r1, r3, #24
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	371c      	adds	r7, #28
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e069      	b.n	8004c1a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d102      	bne.n	8004b58 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fe fbd8 	bl	8003308 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6819      	ldr	r1, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	4b2a      	ldr	r3, [pc, #168]	; (8004c24 <HAL_DCMI_Init+0xf0>)
 8004b7a:	400b      	ands	r3, r1
 8004b7c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6819      	ldr	r1, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004b92:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004b9e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004baa:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004bb6:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004bc2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	2b10      	cmp	r3, #16
 8004bd2:	d112      	bne.n	8004bfa <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	7f1b      	ldrb	r3, [r3, #28]
 8004bd8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	7f5b      	ldrb	r3, [r3, #29]
 8004bde:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004be0:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	7f9b      	ldrb	r3, [r3, #30]
 8004be6:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004be8:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	7fdb      	ldrb	r3, [r3, #31]
 8004bf0:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004bf6:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004bf8:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68da      	ldr	r2, [r3, #12]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f042 021e 	orr.w	r2, r2, #30
 8004c08:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	ffe0f007 	.word	0xffe0f007

08004c28 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e039      	b.n	8004cae <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d106      	bne.n	8004c54 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fe fc18 	bl	8003484 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c78:	f023 0107 	bic.w	r1, r3, #7
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c8e:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <HAL_DMA2D_Init+0x90>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	68d1      	ldr	r1, [r2, #12]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6812      	ldr	r2, [r2, #0]
 8004c9a:	430b      	orrs	r3, r1
 8004c9c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	ffffc000 	.word	0xffffc000

08004cbc <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d026      	beq.n	8004d2c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d021      	beq.n	8004d2c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cf6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfc:	f043 0201 	orr.w	r2, r3, #1
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2204      	movs	r2, #4
 8004d10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f003 0320 	and.w	r3, r3, #32
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d026      	beq.n	8004d84 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d021      	beq.n	8004d84 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d4e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2220      	movs	r2, #32
 8004d56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5c:	f043 0202 	orr.w	r2, r3, #2
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2204      	movs	r2, #4
 8004d68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d003      	beq.n	8004d84 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f003 0308 	and.w	r3, r3, #8
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d026      	beq.n	8004ddc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d021      	beq.n	8004ddc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004da6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2208      	movs	r2, #8
 8004dae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db4:	f043 0204 	orr.w	r2, r3, #4
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2204      	movs	r2, #4
 8004dc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d013      	beq.n	8004e0e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00e      	beq.n	8004e0e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dfe:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2204      	movs	r2, #4
 8004e06:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f853 	bl	8004eb4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d024      	beq.n	8004e62 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d01f      	beq.n	8004e62 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e30:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2202      	movs	r2, #2
 8004e38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f003 0310 	and.w	r3, r3, #16
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d01f      	beq.n	8004eac <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d01a      	beq.n	8004eac <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e84:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2210      	movs	r2, #16
 8004e8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f80e 	bl	8004ec8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004eac:	bf00      	nop
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d101      	bne.n	8004efc <HAL_DMA2D_ConfigLayer+0x20>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	e079      	b.n	8004ff0 <HAL_DMA2D_ConfigLayer+0x114>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	011b      	lsls	r3, r3, #4
 8004f10:	3318      	adds	r3, #24
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	4413      	add	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	041b      	lsls	r3, r3, #16
 8004f22:	4313      	orrs	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004f26:	4b35      	ldr	r3, [pc, #212]	; (8004ffc <HAL_DMA2D_ConfigLayer+0x120>)
 8004f28:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2b0a      	cmp	r3, #10
 8004f30:	d003      	beq.n	8004f3a <HAL_DMA2D_ConfigLayer+0x5e>
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b09      	cmp	r3, #9
 8004f38:	d107      	bne.n	8004f4a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	e005      	b.n	8004f56 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	061b      	lsls	r3, r3, #24
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d120      	bne.n	8004f9e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	43db      	mvns	r3, r3
 8004f66:	ea02 0103 	and.w	r1, r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	6812      	ldr	r2, [r2, #0]
 8004f7c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b0a      	cmp	r3, #10
 8004f84:	d003      	beq.n	8004f8e <HAL_DMA2D_ConfigLayer+0xb2>
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b09      	cmp	r3, #9
 8004f8c:	d127      	bne.n	8004fde <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004f9a:	629a      	str	r2, [r3, #40]	; 0x28
 8004f9c:	e01f      	b.n	8004fde <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	69da      	ldr	r2, [r3, #28]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	43db      	mvns	r3, r3
 8004fa8:	ea02 0103 	and.w	r1, r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	6812      	ldr	r2, [r2, #0]
 8004fbe:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2b0a      	cmp	r3, #10
 8004fc6:	d003      	beq.n	8004fd0 <HAL_DMA2D_ConfigLayer+0xf4>
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b09      	cmp	r3, #9
 8004fce:	d106      	bne.n	8004fde <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	68da      	ldr	r2, [r3, #12]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004fdc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	371c      	adds	r7, #28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	ff03000f 	.word	0xff03000f

08005000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005000:	b480      	push	{r7}
 8005002:	b089      	sub	sp, #36	; 0x24
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800500a:	2300      	movs	r3, #0
 800500c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800500e:	2300      	movs	r3, #0
 8005010:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005012:	2300      	movs	r3, #0
 8005014:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005016:	2300      	movs	r3, #0
 8005018:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800501a:	2300      	movs	r3, #0
 800501c:	61fb      	str	r3, [r7, #28]
 800501e:	e175      	b.n	800530c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005020:	2201      	movs	r2, #1
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	fa02 f303 	lsl.w	r3, r2, r3
 8005028:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	4013      	ands	r3, r2
 8005032:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	429a      	cmp	r2, r3
 800503a:	f040 8164 	bne.w	8005306 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d00b      	beq.n	800505e <HAL_GPIO_Init+0x5e>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	2b02      	cmp	r3, #2
 800504c:	d007      	beq.n	800505e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005052:	2b11      	cmp	r3, #17
 8005054:	d003      	beq.n	800505e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2b12      	cmp	r3, #18
 800505c:	d130      	bne.n	80050c0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	2203      	movs	r2, #3
 800506a:	fa02 f303 	lsl.w	r3, r2, r3
 800506e:	43db      	mvns	r3, r3
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	4013      	ands	r3, r2
 8005074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	fa02 f303 	lsl.w	r3, r2, r3
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	4313      	orrs	r3, r2
 8005086:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005094:	2201      	movs	r2, #1
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	fa02 f303 	lsl.w	r3, r2, r3
 800509c:	43db      	mvns	r3, r3
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	4013      	ands	r3, r2
 80050a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	091b      	lsrs	r3, r3, #4
 80050aa:	f003 0201 	and.w	r2, r3, #1
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	2203      	movs	r2, #3
 80050cc:	fa02 f303 	lsl.w	r3, r2, r3
 80050d0:	43db      	mvns	r3, r3
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	4013      	ands	r3, r2
 80050d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d003      	beq.n	8005100 <HAL_GPIO_Init+0x100>
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2b12      	cmp	r3, #18
 80050fe:	d123      	bne.n	8005148 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	08da      	lsrs	r2, r3, #3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3208      	adds	r2, #8
 8005108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800510c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	220f      	movs	r2, #15
 8005118:	fa02 f303 	lsl.w	r3, r2, r3
 800511c:	43db      	mvns	r3, r3
 800511e:	69ba      	ldr	r2, [r7, #24]
 8005120:	4013      	ands	r3, r2
 8005122:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	691a      	ldr	r2, [r3, #16]
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	f003 0307 	and.w	r3, r3, #7
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	fa02 f303 	lsl.w	r3, r2, r3
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	4313      	orrs	r3, r2
 8005138:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	08da      	lsrs	r2, r3, #3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	3208      	adds	r2, #8
 8005142:	69b9      	ldr	r1, [r7, #24]
 8005144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	2203      	movs	r2, #3
 8005154:	fa02 f303 	lsl.w	r3, r2, r3
 8005158:	43db      	mvns	r3, r3
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	4013      	ands	r3, r2
 800515e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f003 0203 	and.w	r2, r3, #3
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	005b      	lsls	r3, r3, #1
 800516c:	fa02 f303 	lsl.w	r3, r2, r3
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	4313      	orrs	r3, r2
 8005174:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 80be 	beq.w	8005306 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800518a:	4b66      	ldr	r3, [pc, #408]	; (8005324 <HAL_GPIO_Init+0x324>)
 800518c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518e:	4a65      	ldr	r2, [pc, #404]	; (8005324 <HAL_GPIO_Init+0x324>)
 8005190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005194:	6453      	str	r3, [r2, #68]	; 0x44
 8005196:	4b63      	ldr	r3, [pc, #396]	; (8005324 <HAL_GPIO_Init+0x324>)
 8005198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80051a2:	4a61      	ldr	r2, [pc, #388]	; (8005328 <HAL_GPIO_Init+0x328>)
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	089b      	lsrs	r3, r3, #2
 80051a8:	3302      	adds	r3, #2
 80051aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	f003 0303 	and.w	r3, r3, #3
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	220f      	movs	r2, #15
 80051ba:	fa02 f303 	lsl.w	r3, r2, r3
 80051be:	43db      	mvns	r3, r3
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	4013      	ands	r3, r2
 80051c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a58      	ldr	r2, [pc, #352]	; (800532c <HAL_GPIO_Init+0x32c>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d037      	beq.n	800523e <HAL_GPIO_Init+0x23e>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a57      	ldr	r2, [pc, #348]	; (8005330 <HAL_GPIO_Init+0x330>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d031      	beq.n	800523a <HAL_GPIO_Init+0x23a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a56      	ldr	r2, [pc, #344]	; (8005334 <HAL_GPIO_Init+0x334>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d02b      	beq.n	8005236 <HAL_GPIO_Init+0x236>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a55      	ldr	r2, [pc, #340]	; (8005338 <HAL_GPIO_Init+0x338>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d025      	beq.n	8005232 <HAL_GPIO_Init+0x232>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a54      	ldr	r2, [pc, #336]	; (800533c <HAL_GPIO_Init+0x33c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d01f      	beq.n	800522e <HAL_GPIO_Init+0x22e>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a53      	ldr	r2, [pc, #332]	; (8005340 <HAL_GPIO_Init+0x340>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d019      	beq.n	800522a <HAL_GPIO_Init+0x22a>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a52      	ldr	r2, [pc, #328]	; (8005344 <HAL_GPIO_Init+0x344>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d013      	beq.n	8005226 <HAL_GPIO_Init+0x226>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a51      	ldr	r2, [pc, #324]	; (8005348 <HAL_GPIO_Init+0x348>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d00d      	beq.n	8005222 <HAL_GPIO_Init+0x222>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a50      	ldr	r2, [pc, #320]	; (800534c <HAL_GPIO_Init+0x34c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d007      	beq.n	800521e <HAL_GPIO_Init+0x21e>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a4f      	ldr	r2, [pc, #316]	; (8005350 <HAL_GPIO_Init+0x350>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d101      	bne.n	800521a <HAL_GPIO_Init+0x21a>
 8005216:	2309      	movs	r3, #9
 8005218:	e012      	b.n	8005240 <HAL_GPIO_Init+0x240>
 800521a:	230a      	movs	r3, #10
 800521c:	e010      	b.n	8005240 <HAL_GPIO_Init+0x240>
 800521e:	2308      	movs	r3, #8
 8005220:	e00e      	b.n	8005240 <HAL_GPIO_Init+0x240>
 8005222:	2307      	movs	r3, #7
 8005224:	e00c      	b.n	8005240 <HAL_GPIO_Init+0x240>
 8005226:	2306      	movs	r3, #6
 8005228:	e00a      	b.n	8005240 <HAL_GPIO_Init+0x240>
 800522a:	2305      	movs	r3, #5
 800522c:	e008      	b.n	8005240 <HAL_GPIO_Init+0x240>
 800522e:	2304      	movs	r3, #4
 8005230:	e006      	b.n	8005240 <HAL_GPIO_Init+0x240>
 8005232:	2303      	movs	r3, #3
 8005234:	e004      	b.n	8005240 <HAL_GPIO_Init+0x240>
 8005236:	2302      	movs	r3, #2
 8005238:	e002      	b.n	8005240 <HAL_GPIO_Init+0x240>
 800523a:	2301      	movs	r3, #1
 800523c:	e000      	b.n	8005240 <HAL_GPIO_Init+0x240>
 800523e:	2300      	movs	r3, #0
 8005240:	69fa      	ldr	r2, [r7, #28]
 8005242:	f002 0203 	and.w	r2, r2, #3
 8005246:	0092      	lsls	r2, r2, #2
 8005248:	4093      	lsls	r3, r2
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	4313      	orrs	r3, r2
 800524e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005250:	4935      	ldr	r1, [pc, #212]	; (8005328 <HAL_GPIO_Init+0x328>)
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	089b      	lsrs	r3, r3, #2
 8005256:	3302      	adds	r3, #2
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800525e:	4b3d      	ldr	r3, [pc, #244]	; (8005354 <HAL_GPIO_Init+0x354>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	43db      	mvns	r3, r3
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	4013      	ands	r3, r2
 800526c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	4313      	orrs	r3, r2
 8005280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005282:	4a34      	ldr	r2, [pc, #208]	; (8005354 <HAL_GPIO_Init+0x354>)
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005288:	4b32      	ldr	r3, [pc, #200]	; (8005354 <HAL_GPIO_Init+0x354>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	43db      	mvns	r3, r3
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	4013      	ands	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80052ac:	4a29      	ldr	r2, [pc, #164]	; (8005354 <HAL_GPIO_Init+0x354>)
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052b2:	4b28      	ldr	r3, [pc, #160]	; (8005354 <HAL_GPIO_Init+0x354>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	43db      	mvns	r3, r3
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	4013      	ands	r3, r2
 80052c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052d6:	4a1f      	ldr	r2, [pc, #124]	; (8005354 <HAL_GPIO_Init+0x354>)
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052dc:	4b1d      	ldr	r3, [pc, #116]	; (8005354 <HAL_GPIO_Init+0x354>)
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	43db      	mvns	r3, r3
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	4013      	ands	r3, r2
 80052ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d003      	beq.n	8005300 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005300:	4a14      	ldr	r2, [pc, #80]	; (8005354 <HAL_GPIO_Init+0x354>)
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	3301      	adds	r3, #1
 800530a:	61fb      	str	r3, [r7, #28]
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	2b0f      	cmp	r3, #15
 8005310:	f67f ae86 	bls.w	8005020 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005314:	bf00      	nop
 8005316:	bf00      	nop
 8005318:	3724      	adds	r7, #36	; 0x24
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	40023800 	.word	0x40023800
 8005328:	40013800 	.word	0x40013800
 800532c:	40020000 	.word	0x40020000
 8005330:	40020400 	.word	0x40020400
 8005334:	40020800 	.word	0x40020800
 8005338:	40020c00 	.word	0x40020c00
 800533c:	40021000 	.word	0x40021000
 8005340:	40021400 	.word	0x40021400
 8005344:	40021800 	.word	0x40021800
 8005348:	40021c00 	.word	0x40021c00
 800534c:	40022000 	.word	0x40022000
 8005350:	40022400 	.word	0x40022400
 8005354:	40013c00 	.word	0x40013c00

08005358 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691a      	ldr	r2, [r3, #16]
 8005368:	887b      	ldrh	r3, [r7, #2]
 800536a:	4013      	ands	r3, r2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005370:	2301      	movs	r3, #1
 8005372:	73fb      	strb	r3, [r7, #15]
 8005374:	e001      	b.n	800537a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005376:	2300      	movs	r3, #0
 8005378:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800537a:	7bfb      	ldrb	r3, [r7, #15]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	460b      	mov	r3, r1
 8005392:	807b      	strh	r3, [r7, #2]
 8005394:	4613      	mov	r3, r2
 8005396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005398:	787b      	ldrb	r3, [r7, #1]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800539e:	887a      	ldrh	r2, [r7, #2]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80053a4:	e003      	b.n	80053ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80053a6:	887b      	ldrh	r3, [r7, #2]
 80053a8:	041a      	lsls	r2, r3, #16
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	619a      	str	r2, [r3, #24]
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b085      	sub	sp, #20
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	460b      	mov	r3, r1
 80053c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053cc:	887a      	ldrh	r2, [r7, #2]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4013      	ands	r3, r2
 80053d2:	041a      	lsls	r2, r3, #16
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	43d9      	mvns	r1, r3
 80053d8:	887b      	ldrh	r3, [r7, #2]
 80053da:	400b      	ands	r3, r1
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	619a      	str	r2, [r3, #24]
}
 80053e2:	bf00      	nop
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80053ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053f0:	b08f      	sub	sp, #60	; 0x3c
 80053f2:	af0a      	add	r7, sp, #40	; 0x28
 80053f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e054      	b.n	80054aa <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d106      	bne.n	8005420 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f00a ffa2 	bl	8010364 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2203      	movs	r2, #3
 8005424:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005430:	2b00      	cmp	r3, #0
 8005432:	d102      	bne.n	800543a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f007 ff57 	bl	800d2f2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	603b      	str	r3, [r7, #0]
 800544a:	687e      	ldr	r6, [r7, #4]
 800544c:	466d      	mov	r5, sp
 800544e:	f106 0410 	add.w	r4, r6, #16
 8005452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005456:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005458:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800545a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800545e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005462:	1d33      	adds	r3, r6, #4
 8005464:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005466:	6838      	ldr	r0, [r7, #0]
 8005468:	f007 feda 	bl	800d220 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2101      	movs	r1, #1
 8005472:	4618      	mov	r0, r3
 8005474:	f007 ff4e 	bl	800d314 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	603b      	str	r3, [r7, #0]
 800547e:	687e      	ldr	r6, [r7, #4]
 8005480:	466d      	mov	r5, sp
 8005482:	f106 0410 	add.w	r4, r6, #16
 8005486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005488:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800548a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800548c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800548e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005492:	e885 0003 	stmia.w	r5, {r0, r1}
 8005496:	1d33      	adds	r3, r6, #4
 8005498:	cb0e      	ldmia	r3, {r1, r2, r3}
 800549a:	6838      	ldr	r0, [r7, #0]
 800549c:	f008 f860 	bl	800d560 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054b2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80054b2:	b590      	push	{r4, r7, lr}
 80054b4:	b089      	sub	sp, #36	; 0x24
 80054b6:	af04      	add	r7, sp, #16
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	4608      	mov	r0, r1
 80054bc:	4611      	mov	r1, r2
 80054be:	461a      	mov	r2, r3
 80054c0:	4603      	mov	r3, r0
 80054c2:	70fb      	strb	r3, [r7, #3]
 80054c4:	460b      	mov	r3, r1
 80054c6:	70bb      	strb	r3, [r7, #2]
 80054c8:	4613      	mov	r3, r2
 80054ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d101      	bne.n	80054da <HAL_HCD_HC_Init+0x28>
 80054d6:	2302      	movs	r3, #2
 80054d8:	e076      	b.n	80055c8 <HAL_HCD_HC_Init+0x116>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80054e2:	78fb      	ldrb	r3, [r7, #3]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	212c      	movs	r1, #44	; 0x2c
 80054e8:	fb01 f303 	mul.w	r3, r1, r3
 80054ec:	4413      	add	r3, r2
 80054ee:	333d      	adds	r3, #61	; 0x3d
 80054f0:	2200      	movs	r2, #0
 80054f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80054f4:	78fb      	ldrb	r3, [r7, #3]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	212c      	movs	r1, #44	; 0x2c
 80054fa:	fb01 f303 	mul.w	r3, r1, r3
 80054fe:	4413      	add	r3, r2
 8005500:	3338      	adds	r3, #56	; 0x38
 8005502:	787a      	ldrb	r2, [r7, #1]
 8005504:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8005506:	78fb      	ldrb	r3, [r7, #3]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	212c      	movs	r1, #44	; 0x2c
 800550c:	fb01 f303 	mul.w	r3, r1, r3
 8005510:	4413      	add	r3, r2
 8005512:	3340      	adds	r3, #64	; 0x40
 8005514:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005516:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005518:	78fb      	ldrb	r3, [r7, #3]
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	212c      	movs	r1, #44	; 0x2c
 800551e:	fb01 f303 	mul.w	r3, r1, r3
 8005522:	4413      	add	r3, r2
 8005524:	3339      	adds	r3, #57	; 0x39
 8005526:	78fa      	ldrb	r2, [r7, #3]
 8005528:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800552a:	78fb      	ldrb	r3, [r7, #3]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	212c      	movs	r1, #44	; 0x2c
 8005530:	fb01 f303 	mul.w	r3, r1, r3
 8005534:	4413      	add	r3, r2
 8005536:	333f      	adds	r3, #63	; 0x3f
 8005538:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800553c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800553e:	78fb      	ldrb	r3, [r7, #3]
 8005540:	78ba      	ldrb	r2, [r7, #2]
 8005542:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005546:	b2d0      	uxtb	r0, r2
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	212c      	movs	r1, #44	; 0x2c
 800554c:	fb01 f303 	mul.w	r3, r1, r3
 8005550:	4413      	add	r3, r2
 8005552:	333a      	adds	r3, #58	; 0x3a
 8005554:	4602      	mov	r2, r0
 8005556:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005558:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800555c:	2b00      	cmp	r3, #0
 800555e:	da09      	bge.n	8005574 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005560:	78fb      	ldrb	r3, [r7, #3]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	212c      	movs	r1, #44	; 0x2c
 8005566:	fb01 f303 	mul.w	r3, r1, r3
 800556a:	4413      	add	r3, r2
 800556c:	333b      	adds	r3, #59	; 0x3b
 800556e:	2201      	movs	r2, #1
 8005570:	701a      	strb	r2, [r3, #0]
 8005572:	e008      	b.n	8005586 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005574:	78fb      	ldrb	r3, [r7, #3]
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	212c      	movs	r1, #44	; 0x2c
 800557a:	fb01 f303 	mul.w	r3, r1, r3
 800557e:	4413      	add	r3, r2
 8005580:	333b      	adds	r3, #59	; 0x3b
 8005582:	2200      	movs	r2, #0
 8005584:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8005586:	78fb      	ldrb	r3, [r7, #3]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	212c      	movs	r1, #44	; 0x2c
 800558c:	fb01 f303 	mul.w	r3, r1, r3
 8005590:	4413      	add	r3, r2
 8005592:	333c      	adds	r3, #60	; 0x3c
 8005594:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005598:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	787c      	ldrb	r4, [r7, #1]
 80055a0:	78ba      	ldrb	r2, [r7, #2]
 80055a2:	78f9      	ldrb	r1, [r7, #3]
 80055a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055a6:	9302      	str	r3, [sp, #8]
 80055a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80055ac:	9301      	str	r3, [sp, #4]
 80055ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	4623      	mov	r3, r4
 80055b6:	f008 f949 	bl	800d84c <USB_HC_Init>
 80055ba:	4603      	mov	r3, r0
 80055bc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd90      	pop	{r4, r7, pc}

080055d0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	460b      	mov	r3, r1
 80055da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80055dc:	2300      	movs	r3, #0
 80055de:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d101      	bne.n	80055ee <HAL_HCD_HC_Halt+0x1e>
 80055ea:	2302      	movs	r3, #2
 80055ec:	e00f      	b.n	800560e <HAL_HCD_HC_Halt+0x3e>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	78fa      	ldrb	r2, [r7, #3]
 80055fc:	4611      	mov	r1, r2
 80055fe:	4618      	mov	r0, r3
 8005600:	f008 fb85 	bl	800dd0e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800560c:	7bfb      	ldrb	r3, [r7, #15]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	4608      	mov	r0, r1
 8005622:	4611      	mov	r1, r2
 8005624:	461a      	mov	r2, r3
 8005626:	4603      	mov	r3, r0
 8005628:	70fb      	strb	r3, [r7, #3]
 800562a:	460b      	mov	r3, r1
 800562c:	70bb      	strb	r3, [r7, #2]
 800562e:	4613      	mov	r3, r2
 8005630:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005632:	78fb      	ldrb	r3, [r7, #3]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	212c      	movs	r1, #44	; 0x2c
 8005638:	fb01 f303 	mul.w	r3, r1, r3
 800563c:	4413      	add	r3, r2
 800563e:	333b      	adds	r3, #59	; 0x3b
 8005640:	78ba      	ldrb	r2, [r7, #2]
 8005642:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005644:	78fb      	ldrb	r3, [r7, #3]
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	212c      	movs	r1, #44	; 0x2c
 800564a:	fb01 f303 	mul.w	r3, r1, r3
 800564e:	4413      	add	r3, r2
 8005650:	333f      	adds	r3, #63	; 0x3f
 8005652:	787a      	ldrb	r2, [r7, #1]
 8005654:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005656:	7c3b      	ldrb	r3, [r7, #16]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d112      	bne.n	8005682 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800565c:	78fb      	ldrb	r3, [r7, #3]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	212c      	movs	r1, #44	; 0x2c
 8005662:	fb01 f303 	mul.w	r3, r1, r3
 8005666:	4413      	add	r3, r2
 8005668:	3342      	adds	r3, #66	; 0x42
 800566a:	2203      	movs	r2, #3
 800566c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800566e:	78fb      	ldrb	r3, [r7, #3]
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	212c      	movs	r1, #44	; 0x2c
 8005674:	fb01 f303 	mul.w	r3, r1, r3
 8005678:	4413      	add	r3, r2
 800567a:	333d      	adds	r3, #61	; 0x3d
 800567c:	7f3a      	ldrb	r2, [r7, #28]
 800567e:	701a      	strb	r2, [r3, #0]
 8005680:	e008      	b.n	8005694 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005682:	78fb      	ldrb	r3, [r7, #3]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	212c      	movs	r1, #44	; 0x2c
 8005688:	fb01 f303 	mul.w	r3, r1, r3
 800568c:	4413      	add	r3, r2
 800568e:	3342      	adds	r3, #66	; 0x42
 8005690:	2202      	movs	r2, #2
 8005692:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005694:	787b      	ldrb	r3, [r7, #1]
 8005696:	2b03      	cmp	r3, #3
 8005698:	f200 80c6 	bhi.w	8005828 <HAL_HCD_HC_SubmitRequest+0x210>
 800569c:	a201      	add	r2, pc, #4	; (adr r2, 80056a4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800569e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a2:	bf00      	nop
 80056a4:	080056b5 	.word	0x080056b5
 80056a8:	08005815 	.word	0x08005815
 80056ac:	08005719 	.word	0x08005719
 80056b0:	08005797 	.word	0x08005797
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80056b4:	7c3b      	ldrb	r3, [r7, #16]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	f040 80b8 	bne.w	800582c <HAL_HCD_HC_SubmitRequest+0x214>
 80056bc:	78bb      	ldrb	r3, [r7, #2]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f040 80b4 	bne.w	800582c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80056c4:	8b3b      	ldrh	r3, [r7, #24]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d108      	bne.n	80056dc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80056ca:	78fb      	ldrb	r3, [r7, #3]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	212c      	movs	r1, #44	; 0x2c
 80056d0:	fb01 f303 	mul.w	r3, r1, r3
 80056d4:	4413      	add	r3, r2
 80056d6:	3355      	adds	r3, #85	; 0x55
 80056d8:	2201      	movs	r2, #1
 80056da:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	212c      	movs	r1, #44	; 0x2c
 80056e2:	fb01 f303 	mul.w	r3, r1, r3
 80056e6:	4413      	add	r3, r2
 80056e8:	3355      	adds	r3, #85	; 0x55
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d109      	bne.n	8005704 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80056f0:	78fb      	ldrb	r3, [r7, #3]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	212c      	movs	r1, #44	; 0x2c
 80056f6:	fb01 f303 	mul.w	r3, r1, r3
 80056fa:	4413      	add	r3, r2
 80056fc:	3342      	adds	r3, #66	; 0x42
 80056fe:	2200      	movs	r2, #0
 8005700:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005702:	e093      	b.n	800582c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	212c      	movs	r1, #44	; 0x2c
 800570a:	fb01 f303 	mul.w	r3, r1, r3
 800570e:	4413      	add	r3, r2
 8005710:	3342      	adds	r3, #66	; 0x42
 8005712:	2202      	movs	r2, #2
 8005714:	701a      	strb	r2, [r3, #0]
      break;
 8005716:	e089      	b.n	800582c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005718:	78bb      	ldrb	r3, [r7, #2]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d11d      	bne.n	800575a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800571e:	78fb      	ldrb	r3, [r7, #3]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	212c      	movs	r1, #44	; 0x2c
 8005724:	fb01 f303 	mul.w	r3, r1, r3
 8005728:	4413      	add	r3, r2
 800572a:	3355      	adds	r3, #85	; 0x55
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d109      	bne.n	8005746 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005732:	78fb      	ldrb	r3, [r7, #3]
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	212c      	movs	r1, #44	; 0x2c
 8005738:	fb01 f303 	mul.w	r3, r1, r3
 800573c:	4413      	add	r3, r2
 800573e:	3342      	adds	r3, #66	; 0x42
 8005740:	2200      	movs	r2, #0
 8005742:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005744:	e073      	b.n	800582e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005746:	78fb      	ldrb	r3, [r7, #3]
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	212c      	movs	r1, #44	; 0x2c
 800574c:	fb01 f303 	mul.w	r3, r1, r3
 8005750:	4413      	add	r3, r2
 8005752:	3342      	adds	r3, #66	; 0x42
 8005754:	2202      	movs	r2, #2
 8005756:	701a      	strb	r2, [r3, #0]
      break;
 8005758:	e069      	b.n	800582e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800575a:	78fb      	ldrb	r3, [r7, #3]
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	212c      	movs	r1, #44	; 0x2c
 8005760:	fb01 f303 	mul.w	r3, r1, r3
 8005764:	4413      	add	r3, r2
 8005766:	3354      	adds	r3, #84	; 0x54
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d109      	bne.n	8005782 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800576e:	78fb      	ldrb	r3, [r7, #3]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	212c      	movs	r1, #44	; 0x2c
 8005774:	fb01 f303 	mul.w	r3, r1, r3
 8005778:	4413      	add	r3, r2
 800577a:	3342      	adds	r3, #66	; 0x42
 800577c:	2200      	movs	r2, #0
 800577e:	701a      	strb	r2, [r3, #0]
      break;
 8005780:	e055      	b.n	800582e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005782:	78fb      	ldrb	r3, [r7, #3]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	212c      	movs	r1, #44	; 0x2c
 8005788:	fb01 f303 	mul.w	r3, r1, r3
 800578c:	4413      	add	r3, r2
 800578e:	3342      	adds	r3, #66	; 0x42
 8005790:	2202      	movs	r2, #2
 8005792:	701a      	strb	r2, [r3, #0]
      break;
 8005794:	e04b      	b.n	800582e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005796:	78bb      	ldrb	r3, [r7, #2]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d11d      	bne.n	80057d8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800579c:	78fb      	ldrb	r3, [r7, #3]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	212c      	movs	r1, #44	; 0x2c
 80057a2:	fb01 f303 	mul.w	r3, r1, r3
 80057a6:	4413      	add	r3, r2
 80057a8:	3355      	adds	r3, #85	; 0x55
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d109      	bne.n	80057c4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80057b0:	78fb      	ldrb	r3, [r7, #3]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	212c      	movs	r1, #44	; 0x2c
 80057b6:	fb01 f303 	mul.w	r3, r1, r3
 80057ba:	4413      	add	r3, r2
 80057bc:	3342      	adds	r3, #66	; 0x42
 80057be:	2200      	movs	r2, #0
 80057c0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80057c2:	e034      	b.n	800582e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80057c4:	78fb      	ldrb	r3, [r7, #3]
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	212c      	movs	r1, #44	; 0x2c
 80057ca:	fb01 f303 	mul.w	r3, r1, r3
 80057ce:	4413      	add	r3, r2
 80057d0:	3342      	adds	r3, #66	; 0x42
 80057d2:	2202      	movs	r2, #2
 80057d4:	701a      	strb	r2, [r3, #0]
      break;
 80057d6:	e02a      	b.n	800582e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80057d8:	78fb      	ldrb	r3, [r7, #3]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	212c      	movs	r1, #44	; 0x2c
 80057de:	fb01 f303 	mul.w	r3, r1, r3
 80057e2:	4413      	add	r3, r2
 80057e4:	3354      	adds	r3, #84	; 0x54
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d109      	bne.n	8005800 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80057ec:	78fb      	ldrb	r3, [r7, #3]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	212c      	movs	r1, #44	; 0x2c
 80057f2:	fb01 f303 	mul.w	r3, r1, r3
 80057f6:	4413      	add	r3, r2
 80057f8:	3342      	adds	r3, #66	; 0x42
 80057fa:	2200      	movs	r2, #0
 80057fc:	701a      	strb	r2, [r3, #0]
      break;
 80057fe:	e016      	b.n	800582e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005800:	78fb      	ldrb	r3, [r7, #3]
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	212c      	movs	r1, #44	; 0x2c
 8005806:	fb01 f303 	mul.w	r3, r1, r3
 800580a:	4413      	add	r3, r2
 800580c:	3342      	adds	r3, #66	; 0x42
 800580e:	2202      	movs	r2, #2
 8005810:	701a      	strb	r2, [r3, #0]
      break;
 8005812:	e00c      	b.n	800582e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005814:	78fb      	ldrb	r3, [r7, #3]
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	212c      	movs	r1, #44	; 0x2c
 800581a:	fb01 f303 	mul.w	r3, r1, r3
 800581e:	4413      	add	r3, r2
 8005820:	3342      	adds	r3, #66	; 0x42
 8005822:	2200      	movs	r2, #0
 8005824:	701a      	strb	r2, [r3, #0]
      break;
 8005826:	e002      	b.n	800582e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8005828:	bf00      	nop
 800582a:	e000      	b.n	800582e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800582c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800582e:	78fb      	ldrb	r3, [r7, #3]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	212c      	movs	r1, #44	; 0x2c
 8005834:	fb01 f303 	mul.w	r3, r1, r3
 8005838:	4413      	add	r3, r2
 800583a:	3344      	adds	r3, #68	; 0x44
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005840:	78fb      	ldrb	r3, [r7, #3]
 8005842:	8b3a      	ldrh	r2, [r7, #24]
 8005844:	6879      	ldr	r1, [r7, #4]
 8005846:	202c      	movs	r0, #44	; 0x2c
 8005848:	fb00 f303 	mul.w	r3, r0, r3
 800584c:	440b      	add	r3, r1
 800584e:	334c      	adds	r3, #76	; 0x4c
 8005850:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005852:	78fb      	ldrb	r3, [r7, #3]
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	212c      	movs	r1, #44	; 0x2c
 8005858:	fb01 f303 	mul.w	r3, r1, r3
 800585c:	4413      	add	r3, r2
 800585e:	3360      	adds	r3, #96	; 0x60
 8005860:	2200      	movs	r2, #0
 8005862:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005864:	78fb      	ldrb	r3, [r7, #3]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	212c      	movs	r1, #44	; 0x2c
 800586a:	fb01 f303 	mul.w	r3, r1, r3
 800586e:	4413      	add	r3, r2
 8005870:	3350      	adds	r3, #80	; 0x50
 8005872:	2200      	movs	r2, #0
 8005874:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005876:	78fb      	ldrb	r3, [r7, #3]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	212c      	movs	r1, #44	; 0x2c
 800587c:	fb01 f303 	mul.w	r3, r1, r3
 8005880:	4413      	add	r3, r2
 8005882:	3339      	adds	r3, #57	; 0x39
 8005884:	78fa      	ldrb	r2, [r7, #3]
 8005886:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005888:	78fb      	ldrb	r3, [r7, #3]
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	212c      	movs	r1, #44	; 0x2c
 800588e:	fb01 f303 	mul.w	r3, r1, r3
 8005892:	4413      	add	r3, r2
 8005894:	3361      	adds	r3, #97	; 0x61
 8005896:	2200      	movs	r2, #0
 8005898:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6818      	ldr	r0, [r3, #0]
 800589e:	78fb      	ldrb	r3, [r7, #3]
 80058a0:	222c      	movs	r2, #44	; 0x2c
 80058a2:	fb02 f303 	mul.w	r3, r2, r3
 80058a6:	3338      	adds	r3, #56	; 0x38
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	18d1      	adds	r1, r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	461a      	mov	r2, r3
 80058b4:	f008 f8d8 	bl	800da68 <USB_HC_StartXfer>
 80058b8:	4603      	mov	r3, r0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop

080058c4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4618      	mov	r0, r3
 80058dc:	f007 fdfd 	bl	800d4da <USB_GetMode>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	f040 80ef 	bne.w	8005ac6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f007 fde1 	bl	800d4b4 <USB_ReadInterrupts>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 80e5 	beq.w	8005ac4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4618      	mov	r0, r3
 8005900:	f007 fdd8 	bl	800d4b4 <USB_ReadInterrupts>
 8005904:	4603      	mov	r3, r0
 8005906:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800590a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800590e:	d104      	bne.n	800591a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005918:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4618      	mov	r0, r3
 8005920:	f007 fdc8 	bl	800d4b4 <USB_ReadInterrupts>
 8005924:	4603      	mov	r3, r0
 8005926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800592a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800592e:	d104      	bne.n	800593a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005938:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4618      	mov	r0, r3
 8005940:	f007 fdb8 	bl	800d4b4 <USB_ReadInterrupts>
 8005944:	4603      	mov	r3, r0
 8005946:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800594a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800594e:	d104      	bne.n	800595a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005958:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4618      	mov	r0, r3
 8005960:	f007 fda8 	bl	800d4b4 <USB_ReadInterrupts>
 8005964:	4603      	mov	r3, r0
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b02      	cmp	r3, #2
 800596c:	d103      	bne.n	8005976 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2202      	movs	r2, #2
 8005974:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4618      	mov	r0, r3
 800597c:	f007 fd9a 	bl	800d4b4 <USB_ReadInterrupts>
 8005980:	4603      	mov	r3, r0
 8005982:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800598a:	d115      	bne.n	80059b8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005994:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d108      	bne.n	80059b8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f00a fd4e 	bl	8010448 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2101      	movs	r1, #1
 80059b2:	4618      	mov	r0, r3
 80059b4:	f007 fe84 	bl	800d6c0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4618      	mov	r0, r3
 80059be:	f007 fd79 	bl	800d4b4 <USB_ReadInterrupts>
 80059c2:	4603      	mov	r3, r0
 80059c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059cc:	d102      	bne.n	80059d4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f001 f9ff 	bl	8006dd2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4618      	mov	r0, r3
 80059da:	f007 fd6b 	bl	800d4b4 <USB_ReadInterrupts>
 80059de:	4603      	mov	r3, r0
 80059e0:	f003 0308 	and.w	r3, r3, #8
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d106      	bne.n	80059f6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f00a fd11 	bl	8010410 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2208      	movs	r2, #8
 80059f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f007 fd5a 	bl	800d4b4 <USB_ReadInterrupts>
 8005a00:	4603      	mov	r3, r0
 8005a02:	f003 0310 	and.w	r3, r3, #16
 8005a06:	2b10      	cmp	r3, #16
 8005a08:	d101      	bne.n	8005a0e <HAL_HCD_IRQHandler+0x14a>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e000      	b.n	8005a10 <HAL_HCD_IRQHandler+0x14c>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d012      	beq.n	8005a3a <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699a      	ldr	r2, [r3, #24]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 0210 	bic.w	r2, r2, #16
 8005a22:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f001 f902 	bl	8006c2e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	699a      	ldr	r2, [r3, #24]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f042 0210 	orr.w	r2, r2, #16
 8005a38:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f007 fd38 	bl	800d4b4 <USB_ReadInterrupts>
 8005a44:	4603      	mov	r3, r0
 8005a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a4e:	d13a      	bne.n	8005ac6 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f008 f949 	bl	800dcec <USB_HC_ReadInterrupt>
 8005a5a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	e025      	b.n	8005aae <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f003 030f 	and.w	r3, r3, #15
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d018      	beq.n	8005aa8 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a8c:	d106      	bne.n	8005a9c <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	4619      	mov	r1, r3
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f8ab 	bl	8005bf0 <HCD_HC_IN_IRQHandler>
 8005a9a:	e005      	b.n	8005aa8 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fcc6 	bl	8006434 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d3d4      	bcc.n	8005a62 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ac0:	615a      	str	r2, [r3, #20]
 8005ac2:	e000      	b.n	8005ac6 <HAL_HCD_IRQHandler+0x202>
      return;
 8005ac4:	bf00      	nop
    }
  }
}
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d101      	bne.n	8005ae2 <HAL_HCD_Start+0x16>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	e013      	b.n	8005b0a <HAL_HCD_Start+0x3e>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f007 fbee 	bl	800d2d0 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2101      	movs	r1, #1
 8005afa:	4618      	mov	r0, r3
 8005afc:	f007 fe44 	bl	800d788 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b082      	sub	sp, #8
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d101      	bne.n	8005b28 <HAL_HCD_Stop+0x16>
 8005b24:	2302      	movs	r3, #2
 8005b26:	e00d      	b.n	8005b44 <HAL_HCD_Stop+0x32>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f008 fa43 	bl	800dfc0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f007 fdeb 	bl	800d734 <USB_ResetPort>
 8005b5e:	4603      	mov	r3, r0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	460b      	mov	r3, r1
 8005b72:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005b74:	78fb      	ldrb	r3, [r7, #3]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	212c      	movs	r1, #44	; 0x2c
 8005b7a:	fb01 f303 	mul.w	r3, r1, r3
 8005b7e:	4413      	add	r3, r2
 8005b80:	3360      	adds	r3, #96	; 0x60
 8005b82:	781b      	ldrb	r3, [r3, #0]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	460b      	mov	r3, r1
 8005b9a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005b9c:	78fb      	ldrb	r3, [r7, #3]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	212c      	movs	r1, #44	; 0x2c
 8005ba2:	fb01 f303 	mul.w	r3, r1, r3
 8005ba6:	4413      	add	r3, r2
 8005ba8:	3350      	adds	r3, #80	; 0x50
 8005baa:	681b      	ldr	r3, [r3, #0]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f007 fe2f 	bl	800d828 <USB_GetCurrentFrame>
 8005bca:	4603      	mov	r3, r0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4618      	mov	r0, r3
 8005be2:	f007 fe0a 	bl	800d7fa <USB_GetHostSpeed>
 8005be6:	4603      	mov	r3, r0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005c06:	78fb      	ldrb	r3, [r7, #3]
 8005c08:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f003 0304 	and.w	r3, r3, #4
 8005c1c:	2b04      	cmp	r3, #4
 8005c1e:	d119      	bne.n	8005c54 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	2304      	movs	r3, #4
 8005c30:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	0151      	lsls	r1, r2, #5
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	440a      	add	r2, r1
 8005c48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c4c:	f043 0302 	orr.w	r3, r3, #2
 8005c50:	60d3      	str	r3, [r2, #12]
 8005c52:	e101      	b.n	8005e58 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c6a:	d12b      	bne.n	8005cc4 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c78:	461a      	mov	r2, r3
 8005c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	212c      	movs	r1, #44	; 0x2c
 8005c86:	fb01 f303 	mul.w	r3, r1, r3
 8005c8a:	4413      	add	r3, r2
 8005c8c:	3361      	adds	r3, #97	; 0x61
 8005c8e:	2207      	movs	r2, #7
 8005c90:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	0151      	lsls	r1, r2, #5
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	440a      	add	r2, r1
 8005ca8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cac:	f043 0302 	orr.w	r3, r3, #2
 8005cb0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	b2d2      	uxtb	r2, r2
 8005cba:	4611      	mov	r1, r2
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f008 f826 	bl	800dd0e <USB_HC_Halt>
 8005cc2:	e0c9      	b.n	8005e58 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b20      	cmp	r3, #32
 8005cd8:	d109      	bne.n	8005cee <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	2320      	movs	r3, #32
 8005cea:	6093      	str	r3, [r2, #8]
 8005cec:	e0b4      	b.n	8005e58 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f003 0308 	and.w	r3, r3, #8
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d133      	bne.n	8005d6c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	0151      	lsls	r1, r2, #5
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	440a      	add	r2, r1
 8005d1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d1e:	f043 0302 	orr.w	r3, r3, #2
 8005d22:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	212c      	movs	r1, #44	; 0x2c
 8005d2a:	fb01 f303 	mul.w	r3, r1, r3
 8005d2e:	4413      	add	r3, r2
 8005d30:	3361      	adds	r3, #97	; 0x61
 8005d32:	2205      	movs	r2, #5
 8005d34:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d42:	461a      	mov	r2, r3
 8005d44:	2310      	movs	r3, #16
 8005d46:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d54:	461a      	mov	r2, r3
 8005d56:	2308      	movs	r3, #8
 8005d58:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	b2d2      	uxtb	r2, r2
 8005d62:	4611      	mov	r1, r2
 8005d64:	4618      	mov	r0, r3
 8005d66:	f007 ffd2 	bl	800dd0e <USB_HC_Halt>
 8005d6a:	e075      	b.n	8005e58 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d82:	d134      	bne.n	8005dee <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	0151      	lsls	r1, r2, #5
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	440a      	add	r2, r1
 8005d9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d9e:	f043 0302 	orr.w	r3, r3, #2
 8005da2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	212c      	movs	r1, #44	; 0x2c
 8005daa:	fb01 f303 	mul.w	r3, r1, r3
 8005dae:	4413      	add	r3, r2
 8005db0:	3361      	adds	r3, #97	; 0x61
 8005db2:	2208      	movs	r2, #8
 8005db4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	2310      	movs	r3, #16
 8005dc6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dda:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	b2d2      	uxtb	r2, r2
 8005de4:	4611      	mov	r1, r2
 8005de6:	4618      	mov	r0, r3
 8005de8:	f007 ff91 	bl	800dd0e <USB_HC_Halt>
 8005dec:	e034      	b.n	8005e58 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	015a      	lsls	r2, r3, #5
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e00:	2b80      	cmp	r3, #128	; 0x80
 8005e02:	d129      	bne.n	8005e58 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	0151      	lsls	r1, r2, #5
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	440a      	add	r2, r1
 8005e1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e1e:	f043 0302 	orr.w	r3, r3, #2
 8005e22:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	212c      	movs	r1, #44	; 0x2c
 8005e2a:	fb01 f303 	mul.w	r3, r1, r3
 8005e2e:	4413      	add	r3, r2
 8005e30:	3361      	adds	r3, #97	; 0x61
 8005e32:	2206      	movs	r2, #6
 8005e34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	b2d2      	uxtb	r2, r2
 8005e3e:	4611      	mov	r1, r2
 8005e40:	4618      	mov	r0, r3
 8005e42:	f007 ff64 	bl	800dd0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e52:	461a      	mov	r2, r3
 8005e54:	2380      	movs	r3, #128	; 0x80
 8005e56:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e6e:	d122      	bne.n	8005eb6 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	0151      	lsls	r1, r2, #5
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	440a      	add	r2, r1
 8005e86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e8a:	f043 0302 	orr.w	r3, r3, #2
 8005e8e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	4611      	mov	r1, r2
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f007 ff37 	bl	800dd0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eac:	461a      	mov	r2, r3
 8005eae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005eb2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005eb4:	e2ba      	b.n	800642c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	015a      	lsls	r2, r3, #5
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	f040 811b 	bne.w	8006104 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d019      	beq.n	8005f0a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	212c      	movs	r1, #44	; 0x2c
 8005edc:	fb01 f303 	mul.w	r3, r1, r3
 8005ee0:	4413      	add	r3, r2
 8005ee2:	3348      	adds	r3, #72	; 0x48
 8005ee4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	0159      	lsls	r1, r3, #5
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	440b      	add	r3, r1
 8005eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005ef8:	1ad2      	subs	r2, r2, r3
 8005efa:	6879      	ldr	r1, [r7, #4]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	202c      	movs	r0, #44	; 0x2c
 8005f00:	fb00 f303 	mul.w	r3, r0, r3
 8005f04:	440b      	add	r3, r1
 8005f06:	3350      	adds	r3, #80	; 0x50
 8005f08:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	212c      	movs	r1, #44	; 0x2c
 8005f10:	fb01 f303 	mul.w	r3, r1, r3
 8005f14:	4413      	add	r3, r2
 8005f16:	3361      	adds	r3, #97	; 0x61
 8005f18:	2201      	movs	r2, #1
 8005f1a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	212c      	movs	r1, #44	; 0x2c
 8005f22:	fb01 f303 	mul.w	r3, r1, r3
 8005f26:	4413      	add	r3, r2
 8005f28:	335c      	adds	r3, #92	; 0x5c
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	212c      	movs	r1, #44	; 0x2c
 8005f46:	fb01 f303 	mul.w	r3, r1, r3
 8005f4a:	4413      	add	r3, r2
 8005f4c:	333f      	adds	r3, #63	; 0x3f
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d009      	beq.n	8005f68 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	212c      	movs	r1, #44	; 0x2c
 8005f5a:	fb01 f303 	mul.w	r3, r1, r3
 8005f5e:	4413      	add	r3, r2
 8005f60:	333f      	adds	r3, #63	; 0x3f
 8005f62:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d121      	bne.n	8005fac <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	0151      	lsls	r1, r2, #5
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	440a      	add	r2, r1
 8005f7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f82:	f043 0302 	orr.w	r3, r3, #2
 8005f86:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	b2d2      	uxtb	r2, r2
 8005f90:	4611      	mov	r1, r2
 8005f92:	4618      	mov	r0, r3
 8005f94:	f007 febb 	bl	800dd0e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	2310      	movs	r3, #16
 8005fa8:	6093      	str	r3, [r2, #8]
 8005faa:	e066      	b.n	800607a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	212c      	movs	r1, #44	; 0x2c
 8005fb2:	fb01 f303 	mul.w	r3, r1, r3
 8005fb6:	4413      	add	r3, r2
 8005fb8:	333f      	adds	r3, #63	; 0x3f
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	2b03      	cmp	r3, #3
 8005fbe:	d127      	bne.n	8006010 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	0151      	lsls	r1, r2, #5
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	440a      	add	r2, r1
 8005fd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fde:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	212c      	movs	r1, #44	; 0x2c
 8005fe6:	fb01 f303 	mul.w	r3, r1, r3
 8005fea:	4413      	add	r3, r2
 8005fec:	3360      	adds	r3, #96	; 0x60
 8005fee:	2201      	movs	r2, #1
 8005ff0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	b2d9      	uxtb	r1, r3
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	202c      	movs	r0, #44	; 0x2c
 8005ffc:	fb00 f303 	mul.w	r3, r0, r3
 8006000:	4413      	add	r3, r2
 8006002:	3360      	adds	r3, #96	; 0x60
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f00a fa2b 	bl	8010464 <HAL_HCD_HC_NotifyURBChange_Callback>
 800600e:	e034      	b.n	800607a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	212c      	movs	r1, #44	; 0x2c
 8006016:	fb01 f303 	mul.w	r3, r1, r3
 800601a:	4413      	add	r3, r2
 800601c:	333f      	adds	r3, #63	; 0x3f
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d12a      	bne.n	800607a <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	212c      	movs	r1, #44	; 0x2c
 800602a:	fb01 f303 	mul.w	r3, r1, r3
 800602e:	4413      	add	r3, r2
 8006030:	3360      	adds	r3, #96	; 0x60
 8006032:	2201      	movs	r2, #1
 8006034:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	212c      	movs	r1, #44	; 0x2c
 800603c:	fb01 f303 	mul.w	r3, r1, r3
 8006040:	4413      	add	r3, r2
 8006042:	3354      	adds	r3, #84	; 0x54
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	f083 0301 	eor.w	r3, r3, #1
 800604a:	b2d8      	uxtb	r0, r3
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	212c      	movs	r1, #44	; 0x2c
 8006052:	fb01 f303 	mul.w	r3, r1, r3
 8006056:	4413      	add	r3, r2
 8006058:	3354      	adds	r3, #84	; 0x54
 800605a:	4602      	mov	r2, r0
 800605c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	b2d9      	uxtb	r1, r3
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	202c      	movs	r0, #44	; 0x2c
 8006068:	fb00 f303 	mul.w	r3, r0, r3
 800606c:	4413      	add	r3, r2
 800606e:	3360      	adds	r3, #96	; 0x60
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	461a      	mov	r2, r3
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f00a f9f5 	bl	8010464 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d12b      	bne.n	80060da <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	212c      	movs	r1, #44	; 0x2c
 8006088:	fb01 f303 	mul.w	r3, r1, r3
 800608c:	4413      	add	r3, r2
 800608e:	3348      	adds	r3, #72	; 0x48
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6879      	ldr	r1, [r7, #4]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	202c      	movs	r0, #44	; 0x2c
 8006098:	fb00 f202 	mul.w	r2, r0, r2
 800609c:	440a      	add	r2, r1
 800609e:	3240      	adds	r2, #64	; 0x40
 80060a0:	8812      	ldrh	r2, [r2, #0]
 80060a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f000 81be 	beq.w	800642c <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	212c      	movs	r1, #44	; 0x2c
 80060b6:	fb01 f303 	mul.w	r3, r1, r3
 80060ba:	4413      	add	r3, r2
 80060bc:	3354      	adds	r3, #84	; 0x54
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	f083 0301 	eor.w	r3, r3, #1
 80060c4:	b2d8      	uxtb	r0, r3
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	212c      	movs	r1, #44	; 0x2c
 80060cc:	fb01 f303 	mul.w	r3, r1, r3
 80060d0:	4413      	add	r3, r2
 80060d2:	3354      	adds	r3, #84	; 0x54
 80060d4:	4602      	mov	r2, r0
 80060d6:	701a      	strb	r2, [r3, #0]
}
 80060d8:	e1a8      	b.n	800642c <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	212c      	movs	r1, #44	; 0x2c
 80060e0:	fb01 f303 	mul.w	r3, r1, r3
 80060e4:	4413      	add	r3, r2
 80060e6:	3354      	adds	r3, #84	; 0x54
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	f083 0301 	eor.w	r3, r3, #1
 80060ee:	b2d8      	uxtb	r0, r3
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	212c      	movs	r1, #44	; 0x2c
 80060f6:	fb01 f303 	mul.w	r3, r1, r3
 80060fa:	4413      	add	r3, r2
 80060fc:	3354      	adds	r3, #84	; 0x54
 80060fe:	4602      	mov	r2, r0
 8006100:	701a      	strb	r2, [r3, #0]
}
 8006102:	e193      	b.n	800642c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	4413      	add	r3, r2
 800610c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b02      	cmp	r3, #2
 8006118:	f040 8106 	bne.w	8006328 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	4413      	add	r3, r2
 8006124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	0151      	lsls	r1, r2, #5
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	440a      	add	r2, r1
 8006132:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006136:	f023 0302 	bic.w	r3, r3, #2
 800613a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	212c      	movs	r1, #44	; 0x2c
 8006142:	fb01 f303 	mul.w	r3, r1, r3
 8006146:	4413      	add	r3, r2
 8006148:	3361      	adds	r3, #97	; 0x61
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d109      	bne.n	8006164 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	212c      	movs	r1, #44	; 0x2c
 8006156:	fb01 f303 	mul.w	r3, r1, r3
 800615a:	4413      	add	r3, r2
 800615c:	3360      	adds	r3, #96	; 0x60
 800615e:	2201      	movs	r2, #1
 8006160:	701a      	strb	r2, [r3, #0]
 8006162:	e0c9      	b.n	80062f8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	212c      	movs	r1, #44	; 0x2c
 800616a:	fb01 f303 	mul.w	r3, r1, r3
 800616e:	4413      	add	r3, r2
 8006170:	3361      	adds	r3, #97	; 0x61
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	2b05      	cmp	r3, #5
 8006176:	d109      	bne.n	800618c <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	212c      	movs	r1, #44	; 0x2c
 800617e:	fb01 f303 	mul.w	r3, r1, r3
 8006182:	4413      	add	r3, r2
 8006184:	3360      	adds	r3, #96	; 0x60
 8006186:	2205      	movs	r2, #5
 8006188:	701a      	strb	r2, [r3, #0]
 800618a:	e0b5      	b.n	80062f8 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	212c      	movs	r1, #44	; 0x2c
 8006192:	fb01 f303 	mul.w	r3, r1, r3
 8006196:	4413      	add	r3, r2
 8006198:	3361      	adds	r3, #97	; 0x61
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	2b06      	cmp	r3, #6
 800619e:	d009      	beq.n	80061b4 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	212c      	movs	r1, #44	; 0x2c
 80061a6:	fb01 f303 	mul.w	r3, r1, r3
 80061aa:	4413      	add	r3, r2
 80061ac:	3361      	adds	r3, #97	; 0x61
 80061ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80061b0:	2b08      	cmp	r3, #8
 80061b2:	d150      	bne.n	8006256 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	212c      	movs	r1, #44	; 0x2c
 80061ba:	fb01 f303 	mul.w	r3, r1, r3
 80061be:	4413      	add	r3, r2
 80061c0:	335c      	adds	r3, #92	; 0x5c
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	202c      	movs	r0, #44	; 0x2c
 80061cc:	fb00 f303 	mul.w	r3, r0, r3
 80061d0:	440b      	add	r3, r1
 80061d2:	335c      	adds	r3, #92	; 0x5c
 80061d4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	212c      	movs	r1, #44	; 0x2c
 80061dc:	fb01 f303 	mul.w	r3, r1, r3
 80061e0:	4413      	add	r3, r2
 80061e2:	335c      	adds	r3, #92	; 0x5c
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d912      	bls.n	8006210 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	212c      	movs	r1, #44	; 0x2c
 80061f0:	fb01 f303 	mul.w	r3, r1, r3
 80061f4:	4413      	add	r3, r2
 80061f6:	335c      	adds	r3, #92	; 0x5c
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	212c      	movs	r1, #44	; 0x2c
 8006202:	fb01 f303 	mul.w	r3, r1, r3
 8006206:	4413      	add	r3, r2
 8006208:	3360      	adds	r3, #96	; 0x60
 800620a:	2204      	movs	r2, #4
 800620c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800620e:	e073      	b.n	80062f8 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	212c      	movs	r1, #44	; 0x2c
 8006216:	fb01 f303 	mul.w	r3, r1, r3
 800621a:	4413      	add	r3, r2
 800621c:	3360      	adds	r3, #96	; 0x60
 800621e:	2202      	movs	r2, #2
 8006220:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	4413      	add	r3, r2
 800622a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006238:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006240:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	4413      	add	r3, r2
 800624a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624e:	461a      	mov	r2, r3
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006254:	e050      	b.n	80062f8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	212c      	movs	r1, #44	; 0x2c
 800625c:	fb01 f303 	mul.w	r3, r1, r3
 8006260:	4413      	add	r3, r2
 8006262:	3361      	adds	r3, #97	; 0x61
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	2b03      	cmp	r3, #3
 8006268:	d122      	bne.n	80062b0 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	212c      	movs	r1, #44	; 0x2c
 8006270:	fb01 f303 	mul.w	r3, r1, r3
 8006274:	4413      	add	r3, r2
 8006276:	3360      	adds	r3, #96	; 0x60
 8006278:	2202      	movs	r2, #2
 800627a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	4413      	add	r3, r2
 8006284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006292:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800629a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a8:	461a      	mov	r2, r3
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	e023      	b.n	80062f8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	212c      	movs	r1, #44	; 0x2c
 80062b6:	fb01 f303 	mul.w	r3, r1, r3
 80062ba:	4413      	add	r3, r2
 80062bc:	3361      	adds	r3, #97	; 0x61
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	2b07      	cmp	r3, #7
 80062c2:	d119      	bne.n	80062f8 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	212c      	movs	r1, #44	; 0x2c
 80062ca:	fb01 f303 	mul.w	r3, r1, r3
 80062ce:	4413      	add	r3, r2
 80062d0:	335c      	adds	r3, #92	; 0x5c
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	1c5a      	adds	r2, r3, #1
 80062d6:	6879      	ldr	r1, [r7, #4]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	202c      	movs	r0, #44	; 0x2c
 80062dc:	fb00 f303 	mul.w	r3, r0, r3
 80062e0:	440b      	add	r3, r1
 80062e2:	335c      	adds	r3, #92	; 0x5c
 80062e4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	212c      	movs	r1, #44	; 0x2c
 80062ec:	fb01 f303 	mul.w	r3, r1, r3
 80062f0:	4413      	add	r3, r2
 80062f2:	3360      	adds	r3, #96	; 0x60
 80062f4:	2204      	movs	r2, #4
 80062f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	015a      	lsls	r2, r3, #5
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006304:	461a      	mov	r2, r3
 8006306:	2302      	movs	r3, #2
 8006308:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	b2d9      	uxtb	r1, r3
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	202c      	movs	r0, #44	; 0x2c
 8006314:	fb00 f303 	mul.w	r3, r0, r3
 8006318:	4413      	add	r3, r2
 800631a:	3360      	adds	r3, #96	; 0x60
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	461a      	mov	r2, r3
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f00a f89f 	bl	8010464 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006326:	e081      	b.n	800642c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	4413      	add	r3, r2
 8006330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 0310 	and.w	r3, r3, #16
 800633a:	2b10      	cmp	r3, #16
 800633c:	d176      	bne.n	800642c <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	212c      	movs	r1, #44	; 0x2c
 8006344:	fb01 f303 	mul.w	r3, r1, r3
 8006348:	4413      	add	r3, r2
 800634a:	333f      	adds	r3, #63	; 0x3f
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	2b03      	cmp	r3, #3
 8006350:	d121      	bne.n	8006396 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	212c      	movs	r1, #44	; 0x2c
 8006358:	fb01 f303 	mul.w	r3, r1, r3
 800635c:	4413      	add	r3, r2
 800635e:	335c      	adds	r3, #92	; 0x5c
 8006360:	2200      	movs	r2, #0
 8006362:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	4413      	add	r3, r2
 800636c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	0151      	lsls	r1, r2, #5
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	440a      	add	r2, r1
 800637a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800637e:	f043 0302 	orr.w	r3, r3, #2
 8006382:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	b2d2      	uxtb	r2, r2
 800638c:	4611      	mov	r1, r2
 800638e:	4618      	mov	r0, r3
 8006390:	f007 fcbd 	bl	800dd0e <USB_HC_Halt>
 8006394:	e041      	b.n	800641a <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	212c      	movs	r1, #44	; 0x2c
 800639c:	fb01 f303 	mul.w	r3, r1, r3
 80063a0:	4413      	add	r3, r2
 80063a2:	333f      	adds	r3, #63	; 0x3f
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d009      	beq.n	80063be <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	212c      	movs	r1, #44	; 0x2c
 80063b0:	fb01 f303 	mul.w	r3, r1, r3
 80063b4:	4413      	add	r3, r2
 80063b6:	333f      	adds	r3, #63	; 0x3f
 80063b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d12d      	bne.n	800641a <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	212c      	movs	r1, #44	; 0x2c
 80063c4:	fb01 f303 	mul.w	r3, r1, r3
 80063c8:	4413      	add	r3, r2
 80063ca:	335c      	adds	r3, #92	; 0x5c
 80063cc:	2200      	movs	r2, #0
 80063ce:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d120      	bne.n	800641a <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	212c      	movs	r1, #44	; 0x2c
 80063de:	fb01 f303 	mul.w	r3, r1, r3
 80063e2:	4413      	add	r3, r2
 80063e4:	3361      	adds	r3, #97	; 0x61
 80063e6:	2203      	movs	r2, #3
 80063e8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	0151      	lsls	r1, r2, #5
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	440a      	add	r2, r1
 8006400:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006404:	f043 0302 	orr.w	r3, r3, #2
 8006408:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	b2d2      	uxtb	r2, r2
 8006412:	4611      	mov	r1, r2
 8006414:	4618      	mov	r0, r3
 8006416:	f007 fc7a 	bl	800dd0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	4413      	add	r3, r2
 8006422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006426:	461a      	mov	r2, r3
 8006428:	2310      	movs	r3, #16
 800642a:	6093      	str	r3, [r2, #8]
}
 800642c:	bf00      	nop
 800642e:	3718      	adds	r7, #24
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b088      	sub	sp, #32
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	460b      	mov	r3, r1
 800643e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800644a:	78fb      	ldrb	r3, [r7, #3]
 800644c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	4413      	add	r3, r2
 8006456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	2b04      	cmp	r3, #4
 8006462:	d119      	bne.n	8006498 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	4413      	add	r3, r2
 800646c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006470:	461a      	mov	r2, r3
 8006472:	2304      	movs	r3, #4
 8006474:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	4413      	add	r3, r2
 800647e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	0151      	lsls	r1, r2, #5
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	440a      	add	r2, r1
 800648c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006490:	f043 0302 	orr.w	r3, r3, #2
 8006494:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8006496:	e3c6      	b.n	8006c26 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f003 0320 	and.w	r3, r3, #32
 80064aa:	2b20      	cmp	r3, #32
 80064ac:	d13e      	bne.n	800652c <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ba:	461a      	mov	r2, r3
 80064bc:	2320      	movs	r3, #32
 80064be:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	212c      	movs	r1, #44	; 0x2c
 80064c6:	fb01 f303 	mul.w	r3, r1, r3
 80064ca:	4413      	add	r3, r2
 80064cc:	333d      	adds	r3, #61	; 0x3d
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	f040 83a8 	bne.w	8006c26 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	212c      	movs	r1, #44	; 0x2c
 80064dc:	fb01 f303 	mul.w	r3, r1, r3
 80064e0:	4413      	add	r3, r2
 80064e2:	333d      	adds	r3, #61	; 0x3d
 80064e4:	2200      	movs	r2, #0
 80064e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	212c      	movs	r1, #44	; 0x2c
 80064ee:	fb01 f303 	mul.w	r3, r1, r3
 80064f2:	4413      	add	r3, r2
 80064f4:	3360      	adds	r3, #96	; 0x60
 80064f6:	2202      	movs	r2, #2
 80064f8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	4413      	add	r3, r2
 8006502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	0151      	lsls	r1, r2, #5
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	440a      	add	r2, r1
 8006510:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006514:	f043 0302 	orr.w	r3, r3, #2
 8006518:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	b2d2      	uxtb	r2, r2
 8006522:	4611      	mov	r1, r2
 8006524:	4618      	mov	r0, r3
 8006526:	f007 fbf2 	bl	800dd0e <USB_HC_Halt>
}
 800652a:	e37c      	b.n	8006c26 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	4413      	add	r3, r2
 8006534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800653e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006542:	d122      	bne.n	800658a <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	4413      	add	r3, r2
 800654c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	0151      	lsls	r1, r2, #5
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	440a      	add	r2, r1
 800655a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800655e:	f043 0302 	orr.w	r3, r3, #2
 8006562:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	b2d2      	uxtb	r2, r2
 800656c:	4611      	mov	r1, r2
 800656e:	4618      	mov	r0, r3
 8006570:	f007 fbcd 	bl	800dd0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	4413      	add	r3, r2
 800657c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006580:	461a      	mov	r2, r3
 8006582:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006586:	6093      	str	r3, [r2, #8]
}
 8006588:	e34d      	b.n	8006c26 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	4413      	add	r3, r2
 8006592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	2b01      	cmp	r3, #1
 800659e:	d150      	bne.n	8006642 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	212c      	movs	r1, #44	; 0x2c
 80065a6:	fb01 f303 	mul.w	r3, r1, r3
 80065aa:	4413      	add	r3, r2
 80065ac:	335c      	adds	r3, #92	; 0x5c
 80065ae:	2200      	movs	r2, #0
 80065b0:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c4:	2b40      	cmp	r3, #64	; 0x40
 80065c6:	d111      	bne.n	80065ec <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	212c      	movs	r1, #44	; 0x2c
 80065ce:	fb01 f303 	mul.w	r3, r1, r3
 80065d2:	4413      	add	r3, r2
 80065d4:	333d      	adds	r3, #61	; 0x3d
 80065d6:	2201      	movs	r2, #1
 80065d8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e6:	461a      	mov	r2, r3
 80065e8:	2340      	movs	r3, #64	; 0x40
 80065ea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	0151      	lsls	r1, r2, #5
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	440a      	add	r2, r1
 8006602:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006606:	f043 0302 	orr.w	r3, r3, #2
 800660a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	b2d2      	uxtb	r2, r2
 8006614:	4611      	mov	r1, r2
 8006616:	4618      	mov	r0, r3
 8006618:	f007 fb79 	bl	800dd0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	4413      	add	r3, r2
 8006624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006628:	461a      	mov	r2, r3
 800662a:	2301      	movs	r3, #1
 800662c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	212c      	movs	r1, #44	; 0x2c
 8006634:	fb01 f303 	mul.w	r3, r1, r3
 8006638:	4413      	add	r3, r2
 800663a:	3361      	adds	r3, #97	; 0x61
 800663c:	2201      	movs	r2, #1
 800663e:	701a      	strb	r2, [r3, #0]
}
 8006640:	e2f1      	b.n	8006c26 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	4413      	add	r3, r2
 800664a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006654:	2b40      	cmp	r3, #64	; 0x40
 8006656:	d13c      	bne.n	80066d2 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	212c      	movs	r1, #44	; 0x2c
 800665e:	fb01 f303 	mul.w	r3, r1, r3
 8006662:	4413      	add	r3, r2
 8006664:	3361      	adds	r3, #97	; 0x61
 8006666:	2204      	movs	r2, #4
 8006668:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	212c      	movs	r1, #44	; 0x2c
 8006670:	fb01 f303 	mul.w	r3, r1, r3
 8006674:	4413      	add	r3, r2
 8006676:	333d      	adds	r3, #61	; 0x3d
 8006678:	2201      	movs	r2, #1
 800667a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	212c      	movs	r1, #44	; 0x2c
 8006682:	fb01 f303 	mul.w	r3, r1, r3
 8006686:	4413      	add	r3, r2
 8006688:	335c      	adds	r3, #92	; 0x5c
 800668a:	2200      	movs	r2, #0
 800668c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	4413      	add	r3, r2
 8006696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	0151      	lsls	r1, r2, #5
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	440a      	add	r2, r1
 80066a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066a8:	f043 0302 	orr.w	r3, r3, #2
 80066ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	b2d2      	uxtb	r2, r2
 80066b6:	4611      	mov	r1, r2
 80066b8:	4618      	mov	r0, r3
 80066ba:	f007 fb28 	bl	800dd0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ca:	461a      	mov	r2, r3
 80066cc:	2340      	movs	r3, #64	; 0x40
 80066ce:	6093      	str	r3, [r2, #8]
}
 80066d0:	e2a9      	b.n	8006c26 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f003 0308 	and.w	r3, r3, #8
 80066e4:	2b08      	cmp	r3, #8
 80066e6:	d12a      	bne.n	800673e <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f4:	461a      	mov	r2, r3
 80066f6:	2308      	movs	r3, #8
 80066f8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	4413      	add	r3, r2
 8006702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	0151      	lsls	r1, r2, #5
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	440a      	add	r2, r1
 8006710:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006714:	f043 0302 	orr.w	r3, r3, #2
 8006718:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	b2d2      	uxtb	r2, r2
 8006722:	4611      	mov	r1, r2
 8006724:	4618      	mov	r0, r3
 8006726:	f007 faf2 	bl	800dd0e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	212c      	movs	r1, #44	; 0x2c
 8006730:	fb01 f303 	mul.w	r3, r1, r3
 8006734:	4413      	add	r3, r2
 8006736:	3361      	adds	r3, #97	; 0x61
 8006738:	2205      	movs	r2, #5
 800673a:	701a      	strb	r2, [r3, #0]
}
 800673c:	e273      	b.n	8006c26 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	4413      	add	r3, r2
 8006746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f003 0310 	and.w	r3, r3, #16
 8006750:	2b10      	cmp	r3, #16
 8006752:	d150      	bne.n	80067f6 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	212c      	movs	r1, #44	; 0x2c
 800675a:	fb01 f303 	mul.w	r3, r1, r3
 800675e:	4413      	add	r3, r2
 8006760:	335c      	adds	r3, #92	; 0x5c
 8006762:	2200      	movs	r2, #0
 8006764:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	212c      	movs	r1, #44	; 0x2c
 800676c:	fb01 f303 	mul.w	r3, r1, r3
 8006770:	4413      	add	r3, r2
 8006772:	3361      	adds	r3, #97	; 0x61
 8006774:	2203      	movs	r2, #3
 8006776:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	212c      	movs	r1, #44	; 0x2c
 800677e:	fb01 f303 	mul.w	r3, r1, r3
 8006782:	4413      	add	r3, r2
 8006784:	333d      	adds	r3, #61	; 0x3d
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d112      	bne.n	80067b2 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	212c      	movs	r1, #44	; 0x2c
 8006792:	fb01 f303 	mul.w	r3, r1, r3
 8006796:	4413      	add	r3, r2
 8006798:	333c      	adds	r3, #60	; 0x3c
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d108      	bne.n	80067b2 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	212c      	movs	r1, #44	; 0x2c
 80067a6:	fb01 f303 	mul.w	r3, r1, r3
 80067aa:	4413      	add	r3, r2
 80067ac:	333d      	adds	r3, #61	; 0x3d
 80067ae:	2201      	movs	r2, #1
 80067b0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	0151      	lsls	r1, r2, #5
 80067c4:	69ba      	ldr	r2, [r7, #24]
 80067c6:	440a      	add	r2, r1
 80067c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067cc:	f043 0302 	orr.w	r3, r3, #2
 80067d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	b2d2      	uxtb	r2, r2
 80067da:	4611      	mov	r1, r2
 80067dc:	4618      	mov	r0, r3
 80067de:	f007 fa96 	bl	800dd0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ee:	461a      	mov	r2, r3
 80067f0:	2310      	movs	r3, #16
 80067f2:	6093      	str	r3, [r2, #8]
}
 80067f4:	e217      	b.n	8006c26 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006808:	2b80      	cmp	r3, #128	; 0x80
 800680a:	d174      	bne.n	80068f6 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d121      	bne.n	8006858 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	212c      	movs	r1, #44	; 0x2c
 800681a:	fb01 f303 	mul.w	r3, r1, r3
 800681e:	4413      	add	r3, r2
 8006820:	3361      	adds	r3, #97	; 0x61
 8006822:	2206      	movs	r2, #6
 8006824:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	015a      	lsls	r2, r3, #5
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	4413      	add	r3, r2
 800682e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	0151      	lsls	r1, r2, #5
 8006838:	69ba      	ldr	r2, [r7, #24]
 800683a:	440a      	add	r2, r1
 800683c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006840:	f043 0302 	orr.w	r3, r3, #2
 8006844:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	b2d2      	uxtb	r2, r2
 800684e:	4611      	mov	r1, r2
 8006850:	4618      	mov	r0, r3
 8006852:	f007 fa5c 	bl	800dd0e <USB_HC_Halt>
 8006856:	e044      	b.n	80068e2 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	212c      	movs	r1, #44	; 0x2c
 800685e:	fb01 f303 	mul.w	r3, r1, r3
 8006862:	4413      	add	r3, r2
 8006864:	335c      	adds	r3, #92	; 0x5c
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	1c5a      	adds	r2, r3, #1
 800686a:	6879      	ldr	r1, [r7, #4]
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	202c      	movs	r0, #44	; 0x2c
 8006870:	fb00 f303 	mul.w	r3, r0, r3
 8006874:	440b      	add	r3, r1
 8006876:	335c      	adds	r3, #92	; 0x5c
 8006878:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	212c      	movs	r1, #44	; 0x2c
 8006880:	fb01 f303 	mul.w	r3, r1, r3
 8006884:	4413      	add	r3, r2
 8006886:	335c      	adds	r3, #92	; 0x5c
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b02      	cmp	r3, #2
 800688c:	d920      	bls.n	80068d0 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	212c      	movs	r1, #44	; 0x2c
 8006894:	fb01 f303 	mul.w	r3, r1, r3
 8006898:	4413      	add	r3, r2
 800689a:	335c      	adds	r3, #92	; 0x5c
 800689c:	2200      	movs	r2, #0
 800689e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	212c      	movs	r1, #44	; 0x2c
 80068a6:	fb01 f303 	mul.w	r3, r1, r3
 80068aa:	4413      	add	r3, r2
 80068ac:	3360      	adds	r3, #96	; 0x60
 80068ae:	2204      	movs	r2, #4
 80068b0:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	b2d9      	uxtb	r1, r3
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	202c      	movs	r0, #44	; 0x2c
 80068bc:	fb00 f303 	mul.w	r3, r0, r3
 80068c0:	4413      	add	r3, r2
 80068c2:	3360      	adds	r3, #96	; 0x60
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f009 fdcb 	bl	8010464 <HAL_HCD_HC_NotifyURBChange_Callback>
 80068ce:	e008      	b.n	80068e2 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	212c      	movs	r1, #44	; 0x2c
 80068d6:	fb01 f303 	mul.w	r3, r1, r3
 80068da:	4413      	add	r3, r2
 80068dc:	3360      	adds	r3, #96	; 0x60
 80068de:	2202      	movs	r2, #2
 80068e0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ee:	461a      	mov	r2, r3
 80068f0:	2380      	movs	r3, #128	; 0x80
 80068f2:	6093      	str	r3, [r2, #8]
}
 80068f4:	e197      	b.n	8006c26 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800690c:	d134      	bne.n	8006978 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	4413      	add	r3, r2
 8006916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	0151      	lsls	r1, r2, #5
 8006920:	69ba      	ldr	r2, [r7, #24]
 8006922:	440a      	add	r2, r1
 8006924:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006928:	f043 0302 	orr.w	r3, r3, #2
 800692c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	b2d2      	uxtb	r2, r2
 8006936:	4611      	mov	r1, r2
 8006938:	4618      	mov	r0, r3
 800693a:	f007 f9e8 	bl	800dd0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	4413      	add	r3, r2
 8006946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800694a:	461a      	mov	r2, r3
 800694c:	2310      	movs	r3, #16
 800694e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	4413      	add	r3, r2
 8006958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800695c:	461a      	mov	r2, r3
 800695e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006962:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	212c      	movs	r1, #44	; 0x2c
 800696a:	fb01 f303 	mul.w	r3, r1, r3
 800696e:	4413      	add	r3, r2
 8006970:	3361      	adds	r3, #97	; 0x61
 8006972:	2208      	movs	r2, #8
 8006974:	701a      	strb	r2, [r3, #0]
}
 8006976:	e156      	b.n	8006c26 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	4413      	add	r3, r2
 8006980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	2b02      	cmp	r3, #2
 800698c:	f040 814b 	bne.w	8006c26 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	4413      	add	r3, r2
 8006998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	0151      	lsls	r1, r2, #5
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	440a      	add	r2, r1
 80069a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069aa:	f023 0302 	bic.w	r3, r3, #2
 80069ae:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	212c      	movs	r1, #44	; 0x2c
 80069b6:	fb01 f303 	mul.w	r3, r1, r3
 80069ba:	4413      	add	r3, r2
 80069bc:	3361      	adds	r3, #97	; 0x61
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d179      	bne.n	8006ab8 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	212c      	movs	r1, #44	; 0x2c
 80069ca:	fb01 f303 	mul.w	r3, r1, r3
 80069ce:	4413      	add	r3, r2
 80069d0:	3360      	adds	r3, #96	; 0x60
 80069d2:	2201      	movs	r2, #1
 80069d4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	212c      	movs	r1, #44	; 0x2c
 80069dc:	fb01 f303 	mul.w	r3, r1, r3
 80069e0:	4413      	add	r3, r2
 80069e2:	333f      	adds	r3, #63	; 0x3f
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d00a      	beq.n	8006a00 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	212c      	movs	r1, #44	; 0x2c
 80069f0:	fb01 f303 	mul.w	r3, r1, r3
 80069f4:	4413      	add	r3, r2
 80069f6:	333f      	adds	r3, #63	; 0x3f
 80069f8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	f040 80fc 	bne.w	8006bf8 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d142      	bne.n	8006a8e <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	212c      	movs	r1, #44	; 0x2c
 8006a0e:	fb01 f303 	mul.w	r3, r1, r3
 8006a12:	4413      	add	r3, r2
 8006a14:	334c      	adds	r3, #76	; 0x4c
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 80ed 	beq.w	8006bf8 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	212c      	movs	r1, #44	; 0x2c
 8006a24:	fb01 f303 	mul.w	r3, r1, r3
 8006a28:	4413      	add	r3, r2
 8006a2a:	334c      	adds	r3, #76	; 0x4c
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	6879      	ldr	r1, [r7, #4]
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	202c      	movs	r0, #44	; 0x2c
 8006a34:	fb00 f202 	mul.w	r2, r0, r2
 8006a38:	440a      	add	r2, r1
 8006a3a:	3240      	adds	r2, #64	; 0x40
 8006a3c:	8812      	ldrh	r2, [r2, #0]
 8006a3e:	4413      	add	r3, r2
 8006a40:	3b01      	subs	r3, #1
 8006a42:	6879      	ldr	r1, [r7, #4]
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	202c      	movs	r0, #44	; 0x2c
 8006a48:	fb00 f202 	mul.w	r2, r0, r2
 8006a4c:	440a      	add	r2, r1
 8006a4e:	3240      	adds	r2, #64	; 0x40
 8006a50:	8812      	ldrh	r2, [r2, #0]
 8006a52:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a56:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 80ca 	beq.w	8006bf8 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	212c      	movs	r1, #44	; 0x2c
 8006a6a:	fb01 f303 	mul.w	r3, r1, r3
 8006a6e:	4413      	add	r3, r2
 8006a70:	3355      	adds	r3, #85	; 0x55
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	f083 0301 	eor.w	r3, r3, #1
 8006a78:	b2d8      	uxtb	r0, r3
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	212c      	movs	r1, #44	; 0x2c
 8006a80:	fb01 f303 	mul.w	r3, r1, r3
 8006a84:	4413      	add	r3, r2
 8006a86:	3355      	adds	r3, #85	; 0x55
 8006a88:	4602      	mov	r2, r0
 8006a8a:	701a      	strb	r2, [r3, #0]
 8006a8c:	e0b4      	b.n	8006bf8 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	212c      	movs	r1, #44	; 0x2c
 8006a94:	fb01 f303 	mul.w	r3, r1, r3
 8006a98:	4413      	add	r3, r2
 8006a9a:	3355      	adds	r3, #85	; 0x55
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	f083 0301 	eor.w	r3, r3, #1
 8006aa2:	b2d8      	uxtb	r0, r3
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	212c      	movs	r1, #44	; 0x2c
 8006aaa:	fb01 f303 	mul.w	r3, r1, r3
 8006aae:	4413      	add	r3, r2
 8006ab0:	3355      	adds	r3, #85	; 0x55
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	701a      	strb	r2, [r3, #0]
 8006ab6:	e09f      	b.n	8006bf8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	212c      	movs	r1, #44	; 0x2c
 8006abe:	fb01 f303 	mul.w	r3, r1, r3
 8006ac2:	4413      	add	r3, r2
 8006ac4:	3361      	adds	r3, #97	; 0x61
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	2b03      	cmp	r3, #3
 8006aca:	d109      	bne.n	8006ae0 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	212c      	movs	r1, #44	; 0x2c
 8006ad2:	fb01 f303 	mul.w	r3, r1, r3
 8006ad6:	4413      	add	r3, r2
 8006ad8:	3360      	adds	r3, #96	; 0x60
 8006ada:	2202      	movs	r2, #2
 8006adc:	701a      	strb	r2, [r3, #0]
 8006ade:	e08b      	b.n	8006bf8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	212c      	movs	r1, #44	; 0x2c
 8006ae6:	fb01 f303 	mul.w	r3, r1, r3
 8006aea:	4413      	add	r3, r2
 8006aec:	3361      	adds	r3, #97	; 0x61
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	2b04      	cmp	r3, #4
 8006af2:	d109      	bne.n	8006b08 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	212c      	movs	r1, #44	; 0x2c
 8006afa:	fb01 f303 	mul.w	r3, r1, r3
 8006afe:	4413      	add	r3, r2
 8006b00:	3360      	adds	r3, #96	; 0x60
 8006b02:	2202      	movs	r2, #2
 8006b04:	701a      	strb	r2, [r3, #0]
 8006b06:	e077      	b.n	8006bf8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	212c      	movs	r1, #44	; 0x2c
 8006b0e:	fb01 f303 	mul.w	r3, r1, r3
 8006b12:	4413      	add	r3, r2
 8006b14:	3361      	adds	r3, #97	; 0x61
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	2b05      	cmp	r3, #5
 8006b1a:	d109      	bne.n	8006b30 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	212c      	movs	r1, #44	; 0x2c
 8006b22:	fb01 f303 	mul.w	r3, r1, r3
 8006b26:	4413      	add	r3, r2
 8006b28:	3360      	adds	r3, #96	; 0x60
 8006b2a:	2205      	movs	r2, #5
 8006b2c:	701a      	strb	r2, [r3, #0]
 8006b2e:	e063      	b.n	8006bf8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	212c      	movs	r1, #44	; 0x2c
 8006b36:	fb01 f303 	mul.w	r3, r1, r3
 8006b3a:	4413      	add	r3, r2
 8006b3c:	3361      	adds	r3, #97	; 0x61
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	2b06      	cmp	r3, #6
 8006b42:	d009      	beq.n	8006b58 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	212c      	movs	r1, #44	; 0x2c
 8006b4a:	fb01 f303 	mul.w	r3, r1, r3
 8006b4e:	4413      	add	r3, r2
 8006b50:	3361      	adds	r3, #97	; 0x61
 8006b52:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006b54:	2b08      	cmp	r3, #8
 8006b56:	d14f      	bne.n	8006bf8 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	212c      	movs	r1, #44	; 0x2c
 8006b5e:	fb01 f303 	mul.w	r3, r1, r3
 8006b62:	4413      	add	r3, r2
 8006b64:	335c      	adds	r3, #92	; 0x5c
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	1c5a      	adds	r2, r3, #1
 8006b6a:	6879      	ldr	r1, [r7, #4]
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	202c      	movs	r0, #44	; 0x2c
 8006b70:	fb00 f303 	mul.w	r3, r0, r3
 8006b74:	440b      	add	r3, r1
 8006b76:	335c      	adds	r3, #92	; 0x5c
 8006b78:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	212c      	movs	r1, #44	; 0x2c
 8006b80:	fb01 f303 	mul.w	r3, r1, r3
 8006b84:	4413      	add	r3, r2
 8006b86:	335c      	adds	r3, #92	; 0x5c
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d912      	bls.n	8006bb4 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	212c      	movs	r1, #44	; 0x2c
 8006b94:	fb01 f303 	mul.w	r3, r1, r3
 8006b98:	4413      	add	r3, r2
 8006b9a:	335c      	adds	r3, #92	; 0x5c
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	212c      	movs	r1, #44	; 0x2c
 8006ba6:	fb01 f303 	mul.w	r3, r1, r3
 8006baa:	4413      	add	r3, r2
 8006bac:	3360      	adds	r3, #96	; 0x60
 8006bae:	2204      	movs	r2, #4
 8006bb0:	701a      	strb	r2, [r3, #0]
 8006bb2:	e021      	b.n	8006bf8 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	212c      	movs	r1, #44	; 0x2c
 8006bba:	fb01 f303 	mul.w	r3, r1, r3
 8006bbe:	4413      	add	r3, r2
 8006bc0:	3360      	adds	r3, #96	; 0x60
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006bdc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006be4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c04:	461a      	mov	r2, r3
 8006c06:	2302      	movs	r3, #2
 8006c08:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	b2d9      	uxtb	r1, r3
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	202c      	movs	r0, #44	; 0x2c
 8006c14:	fb00 f303 	mul.w	r3, r0, r3
 8006c18:	4413      	add	r3, r2
 8006c1a:	3360      	adds	r3, #96	; 0x60
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f009 fc1f 	bl	8010464 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006c26:	bf00      	nop
 8006c28:	3720      	adds	r7, #32
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b08a      	sub	sp, #40	; 0x28
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	f003 030f 	and.w	r3, r3, #15
 8006c4e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	0c5b      	lsrs	r3, r3, #17
 8006c54:	f003 030f 	and.w	r3, r3, #15
 8006c58:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	091b      	lsrs	r3, r3, #4
 8006c5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c62:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d004      	beq.n	8006c74 <HCD_RXQLVL_IRQHandler+0x46>
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	2b05      	cmp	r3, #5
 8006c6e:	f000 80a9 	beq.w	8006dc4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006c72:	e0aa      	b.n	8006dca <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f000 80a6 	beq.w	8006dc8 <HCD_RXQLVL_IRQHandler+0x19a>
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	212c      	movs	r1, #44	; 0x2c
 8006c82:	fb01 f303 	mul.w	r3, r1, r3
 8006c86:	4413      	add	r3, r2
 8006c88:	3344      	adds	r3, #68	; 0x44
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 809b 	beq.w	8006dc8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	212c      	movs	r1, #44	; 0x2c
 8006c98:	fb01 f303 	mul.w	r3, r1, r3
 8006c9c:	4413      	add	r3, r2
 8006c9e:	3350      	adds	r3, #80	; 0x50
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	441a      	add	r2, r3
 8006ca6:	6879      	ldr	r1, [r7, #4]
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	202c      	movs	r0, #44	; 0x2c
 8006cac:	fb00 f303 	mul.w	r3, r0, r3
 8006cb0:	440b      	add	r3, r1
 8006cb2:	334c      	adds	r3, #76	; 0x4c
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d87a      	bhi.n	8006db0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6818      	ldr	r0, [r3, #0]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	212c      	movs	r1, #44	; 0x2c
 8006cc4:	fb01 f303 	mul.w	r3, r1, r3
 8006cc8:	4413      	add	r3, r2
 8006cca:	3344      	adds	r3, #68	; 0x44
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	b292      	uxth	r2, r2
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	f006 fbc5 	bl	800d462 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	212c      	movs	r1, #44	; 0x2c
 8006cde:	fb01 f303 	mul.w	r3, r1, r3
 8006ce2:	4413      	add	r3, r2
 8006ce4:	3344      	adds	r3, #68	; 0x44
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	441a      	add	r2, r3
 8006cec:	6879      	ldr	r1, [r7, #4]
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	202c      	movs	r0, #44	; 0x2c
 8006cf2:	fb00 f303 	mul.w	r3, r0, r3
 8006cf6:	440b      	add	r3, r1
 8006cf8:	3344      	adds	r3, #68	; 0x44
 8006cfa:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	212c      	movs	r1, #44	; 0x2c
 8006d02:	fb01 f303 	mul.w	r3, r1, r3
 8006d06:	4413      	add	r3, r2
 8006d08:	3350      	adds	r3, #80	; 0x50
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	441a      	add	r2, r3
 8006d10:	6879      	ldr	r1, [r7, #4]
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	202c      	movs	r0, #44	; 0x2c
 8006d16:	fb00 f303 	mul.w	r3, r0, r3
 8006d1a:	440b      	add	r3, r1
 8006d1c:	3350      	adds	r3, #80	; 0x50
 8006d1e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	0cdb      	lsrs	r3, r3, #19
 8006d30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d34:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	212c      	movs	r1, #44	; 0x2c
 8006d3c:	fb01 f303 	mul.w	r3, r1, r3
 8006d40:	4413      	add	r3, r2
 8006d42:	3340      	adds	r3, #64	; 0x40
 8006d44:	881b      	ldrh	r3, [r3, #0]
 8006d46:	461a      	mov	r2, r3
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d13c      	bne.n	8006dc8 <HCD_RXQLVL_IRQHandler+0x19a>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d039      	beq.n	8006dc8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d6a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d72:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d80:	461a      	mov	r2, r3
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	212c      	movs	r1, #44	; 0x2c
 8006d8c:	fb01 f303 	mul.w	r3, r1, r3
 8006d90:	4413      	add	r3, r2
 8006d92:	3354      	adds	r3, #84	; 0x54
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	f083 0301 	eor.w	r3, r3, #1
 8006d9a:	b2d8      	uxtb	r0, r3
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	212c      	movs	r1, #44	; 0x2c
 8006da2:	fb01 f303 	mul.w	r3, r1, r3
 8006da6:	4413      	add	r3, r2
 8006da8:	3354      	adds	r3, #84	; 0x54
 8006daa:	4602      	mov	r2, r0
 8006dac:	701a      	strb	r2, [r3, #0]
      break;
 8006dae:	e00b      	b.n	8006dc8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	212c      	movs	r1, #44	; 0x2c
 8006db6:	fb01 f303 	mul.w	r3, r1, r3
 8006dba:	4413      	add	r3, r2
 8006dbc:	3360      	adds	r3, #96	; 0x60
 8006dbe:	2204      	movs	r2, #4
 8006dc0:	701a      	strb	r2, [r3, #0]
      break;
 8006dc2:	e001      	b.n	8006dc8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006dc4:	bf00      	nop
 8006dc6:	e000      	b.n	8006dca <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006dc8:	bf00      	nop
  }
}
 8006dca:	bf00      	nop
 8006dcc:	3728      	adds	r7, #40	; 0x28
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b086      	sub	sp, #24
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006dfe:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f003 0302 	and.w	r3, r3, #2
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d10b      	bne.n	8006e22 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d102      	bne.n	8006e1a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f009 fb09 	bl	801042c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	f043 0302 	orr.w	r3, r3, #2
 8006e20:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f003 0308 	and.w	r3, r3, #8
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d132      	bne.n	8006e92 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	f043 0308 	orr.w	r3, r3, #8
 8006e32:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f003 0304 	and.w	r3, r3, #4
 8006e3a:	2b04      	cmp	r3, #4
 8006e3c:	d126      	bne.n	8006e8c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d113      	bne.n	8006e6e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006e4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e50:	d106      	bne.n	8006e60 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2102      	movs	r1, #2
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f006 fc31 	bl	800d6c0 <USB_InitFSLSPClkSel>
 8006e5e:	e011      	b.n	8006e84 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2101      	movs	r1, #1
 8006e66:	4618      	mov	r0, r3
 8006e68:	f006 fc2a 	bl	800d6c0 <USB_InitFSLSPClkSel>
 8006e6c:	e00a      	b.n	8006e84 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d106      	bne.n	8006e84 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006e82:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f009 fafb 	bl	8010480 <HAL_HCD_PortEnabled_Callback>
 8006e8a:	e002      	b.n	8006e92 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f009 fb05 	bl	801049c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f003 0320 	and.w	r3, r3, #32
 8006e98:	2b20      	cmp	r3, #32
 8006e9a:	d103      	bne.n	8006ea4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	f043 0320 	orr.w	r3, r3, #32
 8006ea2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006eaa:	461a      	mov	r2, r3
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	6013      	str	r3, [r2, #0]
}
 8006eb0:	bf00      	nop
 8006eb2:	3718      	adds	r7, #24
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e07f      	b.n	8006fca <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d106      	bne.n	8006ee4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7fc faf6 	bl	80034d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2224      	movs	r2, #36	; 0x24
 8006ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 0201 	bic.w	r2, r2, #1
 8006efa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685a      	ldr	r2, [r3, #4]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006f08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	689a      	ldr	r2, [r3, #8]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d107      	bne.n	8006f32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	689a      	ldr	r2, [r3, #8]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f2e:	609a      	str	r2, [r3, #8]
 8006f30:	e006      	b.n	8006f40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	689a      	ldr	r2, [r3, #8]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006f3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d104      	bne.n	8006f52 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6859      	ldr	r1, [r3, #4]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	4b1d      	ldr	r3, [pc, #116]	; (8006fd4 <HAL_I2C_Init+0x11c>)
 8006f5e:	430b      	orrs	r3, r1
 8006f60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68da      	ldr	r2, [r3, #12]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	691a      	ldr	r2, [r3, #16]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	ea42 0103 	orr.w	r1, r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	021a      	lsls	r2, r3, #8
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	69d9      	ldr	r1, [r3, #28]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a1a      	ldr	r2, [r3, #32]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f042 0201 	orr.w	r2, r2, #1
 8006faa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	02008000 	.word	0x02008000

08006fd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b20      	cmp	r3, #32
 8006fec:	d138      	bne.n	8007060 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d101      	bne.n	8006ffc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	e032      	b.n	8007062 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2224      	movs	r2, #36	; 0x24
 8007008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f022 0201 	bic.w	r2, r2, #1
 800701a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800702a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6819      	ldr	r1, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	430a      	orrs	r2, r1
 800703a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f042 0201 	orr.w	r2, r2, #1
 800704a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2220      	movs	r2, #32
 8007050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800705c:	2300      	movs	r3, #0
 800705e:	e000      	b.n	8007062 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007060:	2302      	movs	r3, #2
  }
}
 8007062:	4618      	mov	r0, r3
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr

0800706e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800706e:	b480      	push	{r7}
 8007070:	b085      	sub	sp, #20
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b20      	cmp	r3, #32
 8007082:	d139      	bne.n	80070f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800708a:	2b01      	cmp	r3, #1
 800708c:	d101      	bne.n	8007092 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800708e:	2302      	movs	r3, #2
 8007090:	e033      	b.n	80070fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2224      	movs	r2, #36	; 0x24
 800709e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f022 0201 	bic.w	r2, r2, #1
 80070b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80070c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	021b      	lsls	r3, r3, #8
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f042 0201 	orr.w	r2, r2, #1
 80070e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2220      	movs	r2, #32
 80070e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	e000      	b.n	80070fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80070f8:	2302      	movs	r3, #2
  }
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
	...

08007108 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e0bf      	b.n	800729a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d106      	bne.n	8007134 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7fc fa46 	bl	80035c0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2202      	movs	r2, #2
 8007138:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	699a      	ldr	r2, [r3, #24]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800714a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6999      	ldr	r1, [r3, #24]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007160:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	430a      	orrs	r2, r1
 800716e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6899      	ldr	r1, [r3, #8]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	4b4a      	ldr	r3, [pc, #296]	; (80072a4 <HAL_LTDC_Init+0x19c>)
 800717c:	400b      	ands	r3, r1
 800717e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	041b      	lsls	r3, r3, #16
 8007186:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6899      	ldr	r1, [r3, #8]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	699a      	ldr	r2, [r3, #24]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	431a      	orrs	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	430a      	orrs	r2, r1
 800719c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68d9      	ldr	r1, [r3, #12]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	4b3e      	ldr	r3, [pc, #248]	; (80072a4 <HAL_LTDC_Init+0x19c>)
 80071aa:	400b      	ands	r3, r1
 80071ac:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	041b      	lsls	r3, r3, #16
 80071b4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68d9      	ldr	r1, [r3, #12]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a1a      	ldr	r2, [r3, #32]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	431a      	orrs	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	430a      	orrs	r2, r1
 80071ca:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6919      	ldr	r1, [r3, #16]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	4b33      	ldr	r3, [pc, #204]	; (80072a4 <HAL_LTDC_Init+0x19c>)
 80071d8:	400b      	ands	r3, r1
 80071da:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e0:	041b      	lsls	r3, r3, #16
 80071e2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6919      	ldr	r1, [r3, #16]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	431a      	orrs	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	430a      	orrs	r2, r1
 80071f8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6959      	ldr	r1, [r3, #20]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	4b27      	ldr	r3, [pc, #156]	; (80072a4 <HAL_LTDC_Init+0x19c>)
 8007206:	400b      	ands	r3, r1
 8007208:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720e:	041b      	lsls	r3, r3, #16
 8007210:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6959      	ldr	r1, [r3, #20]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	431a      	orrs	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	430a      	orrs	r2, r1
 8007226:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800722e:	021b      	lsls	r3, r3, #8
 8007230:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007238:	041b      	lsls	r3, r3, #16
 800723a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800724a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	4313      	orrs	r3, r2
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800725e:	431a      	orrs	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	430a      	orrs	r2, r1
 8007266:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f042 0206 	orr.w	r2, r2, #6
 8007276:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	699a      	ldr	r2, [r3, #24]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f042 0201 	orr.w	r2, r2, #1
 8007286:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	f000f800 	.word	0xf000f800

080072a8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072be:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f003 0304 	and.w	r3, r3, #4
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d023      	beq.n	8007312 <HAL_LTDC_IRQHandler+0x6a>
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	f003 0304 	and.w	r3, r3, #4
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d01e      	beq.n	8007312 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f022 0204 	bic.w	r2, r2, #4
 80072e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2204      	movs	r2, #4
 80072ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80072f2:	f043 0201 	orr.w	r2, r3, #1
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2204      	movs	r2, #4
 8007300:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f86f 	bl	80073f0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f003 0302 	and.w	r3, r3, #2
 8007318:	2b00      	cmp	r3, #0
 800731a:	d023      	beq.n	8007364 <HAL_LTDC_IRQHandler+0xbc>
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f003 0302 	and.w	r3, r3, #2
 8007322:	2b00      	cmp	r3, #0
 8007324:	d01e      	beq.n	8007364 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 0202 	bic.w	r2, r2, #2
 8007334:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2202      	movs	r2, #2
 800733c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007344:	f043 0202 	orr.w	r2, r3, #2
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2204      	movs	r2, #4
 8007352:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f846 	bl	80073f0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	2b00      	cmp	r3, #0
 800736c:	d01b      	beq.n	80073a6 <HAL_LTDC_IRQHandler+0xfe>
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	f003 0301 	and.w	r3, r3, #1
 8007374:	2b00      	cmp	r3, #0
 8007376:	d016      	beq.n	80073a6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f022 0201 	bic.w	r2, r2, #1
 8007386:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2201      	movs	r2, #1
 800738e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f82f 	bl	8007404 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f003 0308 	and.w	r3, r3, #8
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d01b      	beq.n	80073e8 <HAL_LTDC_IRQHandler+0x140>
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	f003 0308 	and.w	r3, r3, #8
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d016      	beq.n	80073e8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f022 0208 	bic.w	r2, r2, #8
 80073c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2208      	movs	r2, #8
 80073d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f818 	bl	8007418 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80073e8:	bf00      	nop
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800742c:	b5b0      	push	{r4, r5, r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800743e:	2b01      	cmp	r3, #1
 8007440:	d101      	bne.n	8007446 <HAL_LTDC_ConfigLayer+0x1a>
 8007442:	2302      	movs	r3, #2
 8007444:	e02c      	b.n	80074a0 <HAL_LTDC_ConfigLayer+0x74>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2202      	movs	r2, #2
 8007452:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2134      	movs	r1, #52	; 0x34
 800745c:	fb01 f303 	mul.w	r3, r1, r3
 8007460:	4413      	add	r3, r2
 8007462:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	4614      	mov	r4, r2
 800746a:	461d      	mov	r5, r3
 800746c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800746e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007478:	682b      	ldr	r3, [r5, #0]
 800747a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	68b9      	ldr	r1, [r7, #8]
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f000 f811 	bl	80074a8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2201      	movs	r2, #1
 800748c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bdb0      	pop	{r4, r5, r7, pc}

080074a8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b089      	sub	sp, #36	; 0x24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	0c1b      	lsrs	r3, r3, #16
 80074c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074c4:	4413      	add	r3, r2
 80074c6:	041b      	lsls	r3, r3, #16
 80074c8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	461a      	mov	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	01db      	lsls	r3, r3, #7
 80074d4:	4413      	add	r3, r2
 80074d6:	3384      	adds	r3, #132	; 0x84
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	6812      	ldr	r2, [r2, #0]
 80074de:	4611      	mov	r1, r2
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	01d2      	lsls	r2, r2, #7
 80074e4:	440a      	add	r2, r1
 80074e6:	3284      	adds	r2, #132	; 0x84
 80074e8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80074ec:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	0c1b      	lsrs	r3, r3, #16
 80074fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074fe:	4413      	add	r3, r2
 8007500:	1c5a      	adds	r2, r3, #1
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4619      	mov	r1, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	01db      	lsls	r3, r3, #7
 800750c:	440b      	add	r3, r1
 800750e:	3384      	adds	r3, #132	; 0x84
 8007510:	4619      	mov	r1, r3
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	4313      	orrs	r3, r2
 8007516:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	68da      	ldr	r2, [r3, #12]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007526:	4413      	add	r3, r2
 8007528:	041b      	lsls	r3, r3, #16
 800752a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	461a      	mov	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	01db      	lsls	r3, r3, #7
 8007536:	4413      	add	r3, r2
 8007538:	3384      	adds	r3, #132	; 0x84
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	6812      	ldr	r2, [r2, #0]
 8007540:	4611      	mov	r1, r2
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	01d2      	lsls	r2, r2, #7
 8007546:	440a      	add	r2, r1
 8007548:	3284      	adds	r2, #132	; 0x84
 800754a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800754e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	689a      	ldr	r2, [r3, #8]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800755e:	4413      	add	r3, r2
 8007560:	1c5a      	adds	r2, r3, #1
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4619      	mov	r1, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	01db      	lsls	r3, r3, #7
 800756c:	440b      	add	r3, r1
 800756e:	3384      	adds	r3, #132	; 0x84
 8007570:	4619      	mov	r1, r3
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	4313      	orrs	r3, r2
 8007576:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	461a      	mov	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	01db      	lsls	r3, r3, #7
 8007582:	4413      	add	r3, r2
 8007584:	3384      	adds	r3, #132	; 0x84
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	6812      	ldr	r2, [r2, #0]
 800758c:	4611      	mov	r1, r2
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	01d2      	lsls	r2, r2, #7
 8007592:	440a      	add	r2, r1
 8007594:	3284      	adds	r2, #132	; 0x84
 8007596:	f023 0307 	bic.w	r3, r3, #7
 800759a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	461a      	mov	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	01db      	lsls	r3, r3, #7
 80075a6:	4413      	add	r3, r2
 80075a8:	3384      	adds	r3, #132	; 0x84
 80075aa:	461a      	mov	r2, r3
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80075b8:	021b      	lsls	r3, r3, #8
 80075ba:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80075c2:	041b      	lsls	r3, r3, #16
 80075c4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	061b      	lsls	r3, r3, #24
 80075cc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	461a      	mov	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	01db      	lsls	r3, r3, #7
 80075d8:	4413      	add	r3, r2
 80075da:	3384      	adds	r3, #132	; 0x84
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	461a      	mov	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	01db      	lsls	r3, r3, #7
 80075e8:	4413      	add	r3, r2
 80075ea:	3384      	adds	r3, #132	; 0x84
 80075ec:	461a      	mov	r2, r3
 80075ee:	2300      	movs	r3, #0
 80075f0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075f8:	461a      	mov	r2, r3
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	431a      	orrs	r2, r3
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	431a      	orrs	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4619      	mov	r1, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	01db      	lsls	r3, r3, #7
 800760c:	440b      	add	r3, r1
 800760e:	3384      	adds	r3, #132	; 0x84
 8007610:	4619      	mov	r1, r3
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	4313      	orrs	r3, r2
 8007616:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	461a      	mov	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	01db      	lsls	r3, r3, #7
 8007622:	4413      	add	r3, r2
 8007624:	3384      	adds	r3, #132	; 0x84
 8007626:	695b      	ldr	r3, [r3, #20]
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	6812      	ldr	r2, [r2, #0]
 800762c:	4611      	mov	r1, r2
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	01d2      	lsls	r2, r2, #7
 8007632:	440a      	add	r2, r1
 8007634:	3284      	adds	r2, #132	; 0x84
 8007636:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800763a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	461a      	mov	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	01db      	lsls	r3, r3, #7
 8007646:	4413      	add	r3, r2
 8007648:	3384      	adds	r3, #132	; 0x84
 800764a:	461a      	mov	r2, r3
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	461a      	mov	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	01db      	lsls	r3, r3, #7
 800765c:	4413      	add	r3, r2
 800765e:	3384      	adds	r3, #132	; 0x84
 8007660:	69da      	ldr	r2, [r3, #28]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4619      	mov	r1, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	01db      	lsls	r3, r3, #7
 800766c:	440b      	add	r3, r1
 800766e:	3384      	adds	r3, #132	; 0x84
 8007670:	4619      	mov	r1, r3
 8007672:	4b58      	ldr	r3, [pc, #352]	; (80077d4 <LTDC_SetConfig+0x32c>)
 8007674:	4013      	ands	r3, r2
 8007676:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	69da      	ldr	r2, [r3, #28]
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	68f9      	ldr	r1, [r7, #12]
 8007682:	6809      	ldr	r1, [r1, #0]
 8007684:	4608      	mov	r0, r1
 8007686:	6879      	ldr	r1, [r7, #4]
 8007688:	01c9      	lsls	r1, r1, #7
 800768a:	4401      	add	r1, r0
 800768c:	3184      	adds	r1, #132	; 0x84
 800768e:	4313      	orrs	r3, r2
 8007690:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	461a      	mov	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	01db      	lsls	r3, r3, #7
 800769c:	4413      	add	r3, r2
 800769e:	3384      	adds	r3, #132	; 0x84
 80076a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	461a      	mov	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	01db      	lsls	r3, r3, #7
 80076ac:	4413      	add	r3, r2
 80076ae:	3384      	adds	r3, #132	; 0x84
 80076b0:	461a      	mov	r2, r3
 80076b2:	2300      	movs	r3, #0
 80076b4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	461a      	mov	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	01db      	lsls	r3, r3, #7
 80076c0:	4413      	add	r3, r2
 80076c2:	3384      	adds	r3, #132	; 0x84
 80076c4:	461a      	mov	r2, r3
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ca:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d102      	bne.n	80076da <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80076d4:	2304      	movs	r3, #4
 80076d6:	61fb      	str	r3, [r7, #28]
 80076d8:	e01b      	b.n	8007712 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d102      	bne.n	80076e8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80076e2:	2303      	movs	r3, #3
 80076e4:	61fb      	str	r3, [r7, #28]
 80076e6:	e014      	b.n	8007712 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	2b04      	cmp	r3, #4
 80076ee:	d00b      	beq.n	8007708 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d007      	beq.n	8007708 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80076fc:	2b03      	cmp	r3, #3
 80076fe:	d003      	beq.n	8007708 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007704:	2b07      	cmp	r3, #7
 8007706:	d102      	bne.n	800770e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007708:	2302      	movs	r3, #2
 800770a:	61fb      	str	r3, [r7, #28]
 800770c:	e001      	b.n	8007712 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800770e:	2301      	movs	r3, #1
 8007710:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	461a      	mov	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	01db      	lsls	r3, r3, #7
 800771c:	4413      	add	r3, r2
 800771e:	3384      	adds	r3, #132	; 0x84
 8007720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	6812      	ldr	r2, [r2, #0]
 8007726:	4611      	mov	r1, r2
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	01d2      	lsls	r2, r2, #7
 800772c:	440a      	add	r2, r1
 800772e:	3284      	adds	r2, #132	; 0x84
 8007730:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007734:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773a:	69fa      	ldr	r2, [r7, #28]
 800773c:	fb02 f303 	mul.w	r3, r2, r3
 8007740:	041a      	lsls	r2, r3, #16
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	6859      	ldr	r1, [r3, #4]
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	1acb      	subs	r3, r1, r3
 800774c:	69f9      	ldr	r1, [r7, #28]
 800774e:	fb01 f303 	mul.w	r3, r1, r3
 8007752:	3303      	adds	r3, #3
 8007754:	68f9      	ldr	r1, [r7, #12]
 8007756:	6809      	ldr	r1, [r1, #0]
 8007758:	4608      	mov	r0, r1
 800775a:	6879      	ldr	r1, [r7, #4]
 800775c:	01c9      	lsls	r1, r1, #7
 800775e:	4401      	add	r1, r0
 8007760:	3184      	adds	r1, #132	; 0x84
 8007762:	4313      	orrs	r3, r2
 8007764:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	461a      	mov	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	01db      	lsls	r3, r3, #7
 8007770:	4413      	add	r3, r2
 8007772:	3384      	adds	r3, #132	; 0x84
 8007774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4619      	mov	r1, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	01db      	lsls	r3, r3, #7
 8007780:	440b      	add	r3, r1
 8007782:	3384      	adds	r3, #132	; 0x84
 8007784:	4619      	mov	r1, r3
 8007786:	4b14      	ldr	r3, [pc, #80]	; (80077d8 <LTDC_SetConfig+0x330>)
 8007788:	4013      	ands	r3, r2
 800778a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	461a      	mov	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	01db      	lsls	r3, r3, #7
 8007796:	4413      	add	r3, r2
 8007798:	3384      	adds	r3, #132	; 0x84
 800779a:	461a      	mov	r2, r3
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	461a      	mov	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	01db      	lsls	r3, r3, #7
 80077ac:	4413      	add	r3, r2
 80077ae:	3384      	adds	r3, #132	; 0x84
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	6812      	ldr	r2, [r2, #0]
 80077b6:	4611      	mov	r1, r2
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	01d2      	lsls	r2, r2, #7
 80077bc:	440a      	add	r2, r1
 80077be:	3284      	adds	r2, #132	; 0x84
 80077c0:	f043 0301 	orr.w	r3, r3, #1
 80077c4:	6013      	str	r3, [r2, #0]
}
 80077c6:	bf00      	nop
 80077c8:	3724      	adds	r7, #36	; 0x24
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	fffff8f8 	.word	0xfffff8f8
 80077d8:	fffff800 	.word	0xfffff800

080077dc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80077dc:	b480      	push	{r7}
 80077de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077e0:	4b05      	ldr	r3, [pc, #20]	; (80077f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a04      	ldr	r2, [pc, #16]	; (80077f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80077e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077ea:	6013      	str	r3, [r2, #0]
}
 80077ec:	bf00      	nop
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	40007000 	.word	0x40007000

080077fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007802:	2300      	movs	r3, #0
 8007804:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007806:	4b23      	ldr	r3, [pc, #140]	; (8007894 <HAL_PWREx_EnableOverDrive+0x98>)
 8007808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780a:	4a22      	ldr	r2, [pc, #136]	; (8007894 <HAL_PWREx_EnableOverDrive+0x98>)
 800780c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007810:	6413      	str	r3, [r2, #64]	; 0x40
 8007812:	4b20      	ldr	r3, [pc, #128]	; (8007894 <HAL_PWREx_EnableOverDrive+0x98>)
 8007814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800781a:	603b      	str	r3, [r7, #0]
 800781c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800781e:	4b1e      	ldr	r3, [pc, #120]	; (8007898 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a1d      	ldr	r2, [pc, #116]	; (8007898 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007828:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800782a:	f7fc fccf 	bl	80041cc <HAL_GetTick>
 800782e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007830:	e009      	b.n	8007846 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007832:	f7fc fccb 	bl	80041cc <HAL_GetTick>
 8007836:	4602      	mov	r2, r0
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007840:	d901      	bls.n	8007846 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e022      	b.n	800788c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007846:	4b14      	ldr	r3, [pc, #80]	; (8007898 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800784e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007852:	d1ee      	bne.n	8007832 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007854:	4b10      	ldr	r3, [pc, #64]	; (8007898 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a0f      	ldr	r2, [pc, #60]	; (8007898 <HAL_PWREx_EnableOverDrive+0x9c>)
 800785a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800785e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007860:	f7fc fcb4 	bl	80041cc <HAL_GetTick>
 8007864:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007866:	e009      	b.n	800787c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007868:	f7fc fcb0 	bl	80041cc <HAL_GetTick>
 800786c:	4602      	mov	r2, r0
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007876:	d901      	bls.n	800787c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e007      	b.n	800788c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800787c:	4b06      	ldr	r3, [pc, #24]	; (8007898 <HAL_PWREx_EnableOverDrive+0x9c>)
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007884:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007888:	d1ee      	bne.n	8007868 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	40023800 	.word	0x40023800
 8007898:	40007000 	.word	0x40007000

0800789c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af02      	add	r7, sp, #8
 80078a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80078a4:	f7fc fc92 	bl	80041cc <HAL_GetTick>
 80078a8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d101      	bne.n	80078b4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	e067      	b.n	8007984 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10b      	bne.n	80078d8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f7fb ff41 	bl	8003750 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80078ce:	f241 3188 	movw	r1, #5000	; 0x1388
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f85e 	bl	8007994 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	3b01      	subs	r3, #1
 80078e8:	021a      	lsls	r2, r3, #8
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	2120      	movs	r1, #32
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f856 	bl	80079b0 <QSPI_WaitFlagStateUntilTimeout>
 8007904:	4603      	mov	r3, r0
 8007906:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007908:	7afb      	ldrb	r3, [r7, #11]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d135      	bne.n	800797a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	4b1d      	ldr	r3, [pc, #116]	; (800798c <HAL_QSPI_Init+0xf0>)
 8007916:	4013      	ands	r3, r2
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	6852      	ldr	r2, [r2, #4]
 800791c:	0611      	lsls	r1, r2, #24
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	68d2      	ldr	r2, [r2, #12]
 8007922:	4311      	orrs	r1, r2
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	69d2      	ldr	r2, [r2, #28]
 8007928:	4311      	orrs	r1, r2
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	6a12      	ldr	r2, [r2, #32]
 800792e:	4311      	orrs	r1, r2
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	6812      	ldr	r2, [r2, #0]
 8007934:	430b      	orrs	r3, r1
 8007936:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	685a      	ldr	r2, [r3, #4]
 800793e:	4b14      	ldr	r3, [pc, #80]	; (8007990 <HAL_QSPI_Init+0xf4>)
 8007940:	4013      	ands	r3, r2
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	6912      	ldr	r2, [r2, #16]
 8007946:	0411      	lsls	r1, r2, #16
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	6952      	ldr	r2, [r2, #20]
 800794c:	4311      	orrs	r1, r2
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	6992      	ldr	r2, [r2, #24]
 8007952:	4311      	orrs	r1, r2
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	6812      	ldr	r2, [r2, #0]
 8007958:	430b      	orrs	r3, r1
 800795a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f042 0201 	orr.w	r2, r2, #1
 800796a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8007982:	7afb      	ldrb	r3, [r7, #11]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	00ffff2f 	.word	0x00ffff2f
 8007990:	ffe0f8fe 	.word	0xffe0f8fe

08007994 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	603b      	str	r3, [r7, #0]
 80079bc:	4613      	mov	r3, r2
 80079be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80079c0:	e01a      	b.n	80079f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079c8:	d016      	beq.n	80079f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079ca:	f7fc fbff 	bl	80041cc <HAL_GetTick>
 80079ce:	4602      	mov	r2, r0
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	69ba      	ldr	r2, [r7, #24]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d302      	bcc.n	80079e0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10b      	bne.n	80079f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2204      	movs	r2, #4
 80079e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ec:	f043 0201 	orr.w	r2, r3, #1
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e00e      	b.n	8007a16 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	689a      	ldr	r2, [r3, #8]
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	4013      	ands	r3, r2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	bf14      	ite	ne
 8007a06:	2301      	movne	r3, #1
 8007a08:	2300      	moveq	r3, #0
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	79fb      	ldrb	r3, [r7, #7]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d1d6      	bne.n	80079c2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
	...

08007a20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e291      	b.n	8007f5a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f000 8087 	beq.w	8007b52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007a44:	4b96      	ldr	r3, [pc, #600]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f003 030c 	and.w	r3, r3, #12
 8007a4c:	2b04      	cmp	r3, #4
 8007a4e:	d00c      	beq.n	8007a6a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a50:	4b93      	ldr	r3, [pc, #588]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f003 030c 	and.w	r3, r3, #12
 8007a58:	2b08      	cmp	r3, #8
 8007a5a:	d112      	bne.n	8007a82 <HAL_RCC_OscConfig+0x62>
 8007a5c:	4b90      	ldr	r3, [pc, #576]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a68:	d10b      	bne.n	8007a82 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a6a:	4b8d      	ldr	r3, [pc, #564]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d06c      	beq.n	8007b50 <HAL_RCC_OscConfig+0x130>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d168      	bne.n	8007b50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e26b      	b.n	8007f5a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a8a:	d106      	bne.n	8007a9a <HAL_RCC_OscConfig+0x7a>
 8007a8c:	4b84      	ldr	r3, [pc, #528]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a83      	ldr	r2, [pc, #524]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a96:	6013      	str	r3, [r2, #0]
 8007a98:	e02e      	b.n	8007af8 <HAL_RCC_OscConfig+0xd8>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10c      	bne.n	8007abc <HAL_RCC_OscConfig+0x9c>
 8007aa2:	4b7f      	ldr	r3, [pc, #508]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a7e      	ldr	r2, [pc, #504]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aac:	6013      	str	r3, [r2, #0]
 8007aae:	4b7c      	ldr	r3, [pc, #496]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a7b      	ldr	r2, [pc, #492]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007ab4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ab8:	6013      	str	r3, [r2, #0]
 8007aba:	e01d      	b.n	8007af8 <HAL_RCC_OscConfig+0xd8>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ac4:	d10c      	bne.n	8007ae0 <HAL_RCC_OscConfig+0xc0>
 8007ac6:	4b76      	ldr	r3, [pc, #472]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a75      	ldr	r2, [pc, #468]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ad0:	6013      	str	r3, [r2, #0]
 8007ad2:	4b73      	ldr	r3, [pc, #460]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a72      	ldr	r2, [pc, #456]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007adc:	6013      	str	r3, [r2, #0]
 8007ade:	e00b      	b.n	8007af8 <HAL_RCC_OscConfig+0xd8>
 8007ae0:	4b6f      	ldr	r3, [pc, #444]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a6e      	ldr	r2, [pc, #440]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aea:	6013      	str	r3, [r2, #0]
 8007aec:	4b6c      	ldr	r3, [pc, #432]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a6b      	ldr	r2, [pc, #428]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d013      	beq.n	8007b28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b00:	f7fc fb64 	bl	80041cc <HAL_GetTick>
 8007b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b06:	e008      	b.n	8007b1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b08:	f7fc fb60 	bl	80041cc <HAL_GetTick>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	2b64      	cmp	r3, #100	; 0x64
 8007b14:	d901      	bls.n	8007b1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	e21f      	b.n	8007f5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b1a:	4b61      	ldr	r3, [pc, #388]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d0f0      	beq.n	8007b08 <HAL_RCC_OscConfig+0xe8>
 8007b26:	e014      	b.n	8007b52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b28:	f7fc fb50 	bl	80041cc <HAL_GetTick>
 8007b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b2e:	e008      	b.n	8007b42 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b30:	f7fc fb4c 	bl	80041cc <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	2b64      	cmp	r3, #100	; 0x64
 8007b3c:	d901      	bls.n	8007b42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e20b      	b.n	8007f5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b42:	4b57      	ldr	r3, [pc, #348]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1f0      	bne.n	8007b30 <HAL_RCC_OscConfig+0x110>
 8007b4e:	e000      	b.n	8007b52 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 0302 	and.w	r3, r3, #2
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d069      	beq.n	8007c32 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007b5e:	4b50      	ldr	r3, [pc, #320]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f003 030c 	and.w	r3, r3, #12
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00b      	beq.n	8007b82 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b6a:	4b4d      	ldr	r3, [pc, #308]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f003 030c 	and.w	r3, r3, #12
 8007b72:	2b08      	cmp	r3, #8
 8007b74:	d11c      	bne.n	8007bb0 <HAL_RCC_OscConfig+0x190>
 8007b76:	4b4a      	ldr	r3, [pc, #296]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d116      	bne.n	8007bb0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b82:	4b47      	ldr	r3, [pc, #284]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0302 	and.w	r3, r3, #2
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d005      	beq.n	8007b9a <HAL_RCC_OscConfig+0x17a>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d001      	beq.n	8007b9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e1df      	b.n	8007f5a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b9a:	4b41      	ldr	r3, [pc, #260]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	00db      	lsls	r3, r3, #3
 8007ba8:	493d      	ldr	r1, [pc, #244]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bae:	e040      	b.n	8007c32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d023      	beq.n	8007c00 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007bb8:	4b39      	ldr	r3, [pc, #228]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a38      	ldr	r2, [pc, #224]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007bbe:	f043 0301 	orr.w	r3, r3, #1
 8007bc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bc4:	f7fc fb02 	bl	80041cc <HAL_GetTick>
 8007bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bca:	e008      	b.n	8007bde <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bcc:	f7fc fafe 	bl	80041cc <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d901      	bls.n	8007bde <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e1bd      	b.n	8007f5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bde:	4b30      	ldr	r3, [pc, #192]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0302 	and.w	r3, r3, #2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d0f0      	beq.n	8007bcc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bea:	4b2d      	ldr	r3, [pc, #180]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	00db      	lsls	r3, r3, #3
 8007bf8:	4929      	ldr	r1, [pc, #164]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	600b      	str	r3, [r1, #0]
 8007bfe:	e018      	b.n	8007c32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c00:	4b27      	ldr	r3, [pc, #156]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a26      	ldr	r2, [pc, #152]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007c06:	f023 0301 	bic.w	r3, r3, #1
 8007c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c0c:	f7fc fade 	bl	80041cc <HAL_GetTick>
 8007c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c12:	e008      	b.n	8007c26 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c14:	f7fc fada 	bl	80041cc <HAL_GetTick>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d901      	bls.n	8007c26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e199      	b.n	8007f5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c26:	4b1e      	ldr	r3, [pc, #120]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0302 	and.w	r3, r3, #2
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1f0      	bne.n	8007c14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0308 	and.w	r3, r3, #8
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d038      	beq.n	8007cb0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d019      	beq.n	8007c7a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c46:	4b16      	ldr	r3, [pc, #88]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c4a:	4a15      	ldr	r2, [pc, #84]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007c4c:	f043 0301 	orr.w	r3, r3, #1
 8007c50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c52:	f7fc fabb 	bl	80041cc <HAL_GetTick>
 8007c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c58:	e008      	b.n	8007c6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c5a:	f7fc fab7 	bl	80041cc <HAL_GetTick>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d901      	bls.n	8007c6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e176      	b.n	8007f5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c6c:	4b0c      	ldr	r3, [pc, #48]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c70:	f003 0302 	and.w	r3, r3, #2
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d0f0      	beq.n	8007c5a <HAL_RCC_OscConfig+0x23a>
 8007c78:	e01a      	b.n	8007cb0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c7a:	4b09      	ldr	r3, [pc, #36]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c7e:	4a08      	ldr	r2, [pc, #32]	; (8007ca0 <HAL_RCC_OscConfig+0x280>)
 8007c80:	f023 0301 	bic.w	r3, r3, #1
 8007c84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c86:	f7fc faa1 	bl	80041cc <HAL_GetTick>
 8007c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c8c:	e00a      	b.n	8007ca4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c8e:	f7fc fa9d 	bl	80041cc <HAL_GetTick>
 8007c92:	4602      	mov	r2, r0
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d903      	bls.n	8007ca4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e15c      	b.n	8007f5a <HAL_RCC_OscConfig+0x53a>
 8007ca0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ca4:	4b91      	ldr	r3, [pc, #580]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ca8:	f003 0302 	and.w	r3, r3, #2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1ee      	bne.n	8007c8e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 0304 	and.w	r3, r3, #4
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f000 80a4 	beq.w	8007e06 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007cbe:	4b8b      	ldr	r3, [pc, #556]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d10d      	bne.n	8007ce6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cca:	4b88      	ldr	r3, [pc, #544]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cce:	4a87      	ldr	r2, [pc, #540]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8007cd6:	4b85      	ldr	r3, [pc, #532]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cde:	60bb      	str	r3, [r7, #8]
 8007ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ce6:	4b82      	ldr	r3, [pc, #520]	; (8007ef0 <HAL_RCC_OscConfig+0x4d0>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d118      	bne.n	8007d24 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007cf2:	4b7f      	ldr	r3, [pc, #508]	; (8007ef0 <HAL_RCC_OscConfig+0x4d0>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a7e      	ldr	r2, [pc, #504]	; (8007ef0 <HAL_RCC_OscConfig+0x4d0>)
 8007cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cfe:	f7fc fa65 	bl	80041cc <HAL_GetTick>
 8007d02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d04:	e008      	b.n	8007d18 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d06:	f7fc fa61 	bl	80041cc <HAL_GetTick>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	2b64      	cmp	r3, #100	; 0x64
 8007d12:	d901      	bls.n	8007d18 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e120      	b.n	8007f5a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d18:	4b75      	ldr	r3, [pc, #468]	; (8007ef0 <HAL_RCC_OscConfig+0x4d0>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d0f0      	beq.n	8007d06 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d106      	bne.n	8007d3a <HAL_RCC_OscConfig+0x31a>
 8007d2c:	4b6f      	ldr	r3, [pc, #444]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d30:	4a6e      	ldr	r2, [pc, #440]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007d32:	f043 0301 	orr.w	r3, r3, #1
 8007d36:	6713      	str	r3, [r2, #112]	; 0x70
 8007d38:	e02d      	b.n	8007d96 <HAL_RCC_OscConfig+0x376>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d10c      	bne.n	8007d5c <HAL_RCC_OscConfig+0x33c>
 8007d42:	4b6a      	ldr	r3, [pc, #424]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d46:	4a69      	ldr	r2, [pc, #420]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007d48:	f023 0301 	bic.w	r3, r3, #1
 8007d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8007d4e:	4b67      	ldr	r3, [pc, #412]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d52:	4a66      	ldr	r2, [pc, #408]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007d54:	f023 0304 	bic.w	r3, r3, #4
 8007d58:	6713      	str	r3, [r2, #112]	; 0x70
 8007d5a:	e01c      	b.n	8007d96 <HAL_RCC_OscConfig+0x376>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	2b05      	cmp	r3, #5
 8007d62:	d10c      	bne.n	8007d7e <HAL_RCC_OscConfig+0x35e>
 8007d64:	4b61      	ldr	r3, [pc, #388]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d68:	4a60      	ldr	r2, [pc, #384]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007d6a:	f043 0304 	orr.w	r3, r3, #4
 8007d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8007d70:	4b5e      	ldr	r3, [pc, #376]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d74:	4a5d      	ldr	r2, [pc, #372]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007d76:	f043 0301 	orr.w	r3, r3, #1
 8007d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8007d7c:	e00b      	b.n	8007d96 <HAL_RCC_OscConfig+0x376>
 8007d7e:	4b5b      	ldr	r3, [pc, #364]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d82:	4a5a      	ldr	r2, [pc, #360]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007d84:	f023 0301 	bic.w	r3, r3, #1
 8007d88:	6713      	str	r3, [r2, #112]	; 0x70
 8007d8a:	4b58      	ldr	r3, [pc, #352]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d8e:	4a57      	ldr	r2, [pc, #348]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007d90:	f023 0304 	bic.w	r3, r3, #4
 8007d94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d015      	beq.n	8007dca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d9e:	f7fc fa15 	bl	80041cc <HAL_GetTick>
 8007da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007da4:	e00a      	b.n	8007dbc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007da6:	f7fc fa11 	bl	80041cc <HAL_GetTick>
 8007daa:	4602      	mov	r2, r0
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d901      	bls.n	8007dbc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007db8:	2303      	movs	r3, #3
 8007dba:	e0ce      	b.n	8007f5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dbc:	4b4b      	ldr	r3, [pc, #300]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dc0:	f003 0302 	and.w	r3, r3, #2
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d0ee      	beq.n	8007da6 <HAL_RCC_OscConfig+0x386>
 8007dc8:	e014      	b.n	8007df4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dca:	f7fc f9ff 	bl	80041cc <HAL_GetTick>
 8007dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007dd0:	e00a      	b.n	8007de8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dd2:	f7fc f9fb 	bl	80041cc <HAL_GetTick>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d901      	bls.n	8007de8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e0b8      	b.n	8007f5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007de8:	4b40      	ldr	r3, [pc, #256]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dec:	f003 0302 	and.w	r3, r3, #2
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d1ee      	bne.n	8007dd2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007df4:	7dfb      	ldrb	r3, [r7, #23]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d105      	bne.n	8007e06 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dfa:	4b3c      	ldr	r3, [pc, #240]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfe:	4a3b      	ldr	r2, [pc, #236]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f000 80a4 	beq.w	8007f58 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e10:	4b36      	ldr	r3, [pc, #216]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f003 030c 	and.w	r3, r3, #12
 8007e18:	2b08      	cmp	r3, #8
 8007e1a:	d06b      	beq.n	8007ef4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d149      	bne.n	8007eb8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e24:	4b31      	ldr	r3, [pc, #196]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a30      	ldr	r2, [pc, #192]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007e2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e30:	f7fc f9cc 	bl	80041cc <HAL_GetTick>
 8007e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e36:	e008      	b.n	8007e4a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e38:	f7fc f9c8 	bl	80041cc <HAL_GetTick>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d901      	bls.n	8007e4a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e087      	b.n	8007f5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e4a:	4b28      	ldr	r3, [pc, #160]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1f0      	bne.n	8007e38 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	69da      	ldr	r2, [r3, #28]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a1b      	ldr	r3, [r3, #32]
 8007e5e:	431a      	orrs	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e64:	019b      	lsls	r3, r3, #6
 8007e66:	431a      	orrs	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6c:	085b      	lsrs	r3, r3, #1
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	041b      	lsls	r3, r3, #16
 8007e72:	431a      	orrs	r2, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e78:	061b      	lsls	r3, r3, #24
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	4a1b      	ldr	r2, [pc, #108]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007e7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e82:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e84:	4b19      	ldr	r3, [pc, #100]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a18      	ldr	r2, [pc, #96]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e90:	f7fc f99c 	bl	80041cc <HAL_GetTick>
 8007e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e96:	e008      	b.n	8007eaa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e98:	f7fc f998 	bl	80041cc <HAL_GetTick>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d901      	bls.n	8007eaa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	e057      	b.n	8007f5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007eaa:	4b10      	ldr	r3, [pc, #64]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0f0      	beq.n	8007e98 <HAL_RCC_OscConfig+0x478>
 8007eb6:	e04f      	b.n	8007f58 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007eb8:	4b0c      	ldr	r3, [pc, #48]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a0b      	ldr	r2, [pc, #44]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007ebe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ec4:	f7fc f982 	bl	80041cc <HAL_GetTick>
 8007ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007eca:	e008      	b.n	8007ede <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ecc:	f7fc f97e 	bl	80041cc <HAL_GetTick>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d901      	bls.n	8007ede <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007eda:	2303      	movs	r3, #3
 8007edc:	e03d      	b.n	8007f5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ede:	4b03      	ldr	r3, [pc, #12]	; (8007eec <HAL_RCC_OscConfig+0x4cc>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1f0      	bne.n	8007ecc <HAL_RCC_OscConfig+0x4ac>
 8007eea:	e035      	b.n	8007f58 <HAL_RCC_OscConfig+0x538>
 8007eec:	40023800 	.word	0x40023800
 8007ef0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007ef4:	4b1b      	ldr	r3, [pc, #108]	; (8007f64 <HAL_RCC_OscConfig+0x544>)
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d028      	beq.n	8007f54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d121      	bne.n	8007f54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d11a      	bne.n	8007f54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007f24:	4013      	ands	r3, r2
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007f2a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d111      	bne.n	8007f54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3a:	085b      	lsrs	r3, r3, #1
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d107      	bne.n	8007f54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f4e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d001      	beq.n	8007f58 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e000      	b.n	8007f5a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3718      	adds	r7, #24
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	40023800 	.word	0x40023800

08007f68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007f72:	2300      	movs	r3, #0
 8007f74:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d101      	bne.n	8007f80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e0d0      	b.n	8008122 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f80:	4b6a      	ldr	r3, [pc, #424]	; (800812c <HAL_RCC_ClockConfig+0x1c4>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 030f 	and.w	r3, r3, #15
 8007f88:	683a      	ldr	r2, [r7, #0]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d910      	bls.n	8007fb0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f8e:	4b67      	ldr	r3, [pc, #412]	; (800812c <HAL_RCC_ClockConfig+0x1c4>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f023 020f 	bic.w	r2, r3, #15
 8007f96:	4965      	ldr	r1, [pc, #404]	; (800812c <HAL_RCC_ClockConfig+0x1c4>)
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f9e:	4b63      	ldr	r3, [pc, #396]	; (800812c <HAL_RCC_ClockConfig+0x1c4>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 030f 	and.w	r3, r3, #15
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d001      	beq.n	8007fb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e0b8      	b.n	8008122 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 0302 	and.w	r3, r3, #2
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d020      	beq.n	8007ffe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 0304 	and.w	r3, r3, #4
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d005      	beq.n	8007fd4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007fc8:	4b59      	ldr	r3, [pc, #356]	; (8008130 <HAL_RCC_ClockConfig+0x1c8>)
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	4a58      	ldr	r2, [pc, #352]	; (8008130 <HAL_RCC_ClockConfig+0x1c8>)
 8007fce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007fd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 0308 	and.w	r3, r3, #8
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d005      	beq.n	8007fec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007fe0:	4b53      	ldr	r3, [pc, #332]	; (8008130 <HAL_RCC_ClockConfig+0x1c8>)
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	4a52      	ldr	r2, [pc, #328]	; (8008130 <HAL_RCC_ClockConfig+0x1c8>)
 8007fe6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007fea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fec:	4b50      	ldr	r3, [pc, #320]	; (8008130 <HAL_RCC_ClockConfig+0x1c8>)
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	494d      	ldr	r1, [pc, #308]	; (8008130 <HAL_RCC_ClockConfig+0x1c8>)
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	2b00      	cmp	r3, #0
 8008008:	d040      	beq.n	800808c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d107      	bne.n	8008022 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008012:	4b47      	ldr	r3, [pc, #284]	; (8008130 <HAL_RCC_ClockConfig+0x1c8>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d115      	bne.n	800804a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e07f      	b.n	8008122 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	2b02      	cmp	r3, #2
 8008028:	d107      	bne.n	800803a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800802a:	4b41      	ldr	r3, [pc, #260]	; (8008130 <HAL_RCC_ClockConfig+0x1c8>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008032:	2b00      	cmp	r3, #0
 8008034:	d109      	bne.n	800804a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e073      	b.n	8008122 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800803a:	4b3d      	ldr	r3, [pc, #244]	; (8008130 <HAL_RCC_ClockConfig+0x1c8>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0302 	and.w	r3, r3, #2
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e06b      	b.n	8008122 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800804a:	4b39      	ldr	r3, [pc, #228]	; (8008130 <HAL_RCC_ClockConfig+0x1c8>)
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f023 0203 	bic.w	r2, r3, #3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	4936      	ldr	r1, [pc, #216]	; (8008130 <HAL_RCC_ClockConfig+0x1c8>)
 8008058:	4313      	orrs	r3, r2
 800805a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800805c:	f7fc f8b6 	bl	80041cc <HAL_GetTick>
 8008060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008062:	e00a      	b.n	800807a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008064:	f7fc f8b2 	bl	80041cc <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008072:	4293      	cmp	r3, r2
 8008074:	d901      	bls.n	800807a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e053      	b.n	8008122 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800807a:	4b2d      	ldr	r3, [pc, #180]	; (8008130 <HAL_RCC_ClockConfig+0x1c8>)
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	f003 020c 	and.w	r2, r3, #12
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	429a      	cmp	r2, r3
 800808a:	d1eb      	bne.n	8008064 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800808c:	4b27      	ldr	r3, [pc, #156]	; (800812c <HAL_RCC_ClockConfig+0x1c4>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 030f 	and.w	r3, r3, #15
 8008094:	683a      	ldr	r2, [r7, #0]
 8008096:	429a      	cmp	r2, r3
 8008098:	d210      	bcs.n	80080bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800809a:	4b24      	ldr	r3, [pc, #144]	; (800812c <HAL_RCC_ClockConfig+0x1c4>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f023 020f 	bic.w	r2, r3, #15
 80080a2:	4922      	ldr	r1, [pc, #136]	; (800812c <HAL_RCC_ClockConfig+0x1c4>)
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080aa:	4b20      	ldr	r3, [pc, #128]	; (800812c <HAL_RCC_ClockConfig+0x1c4>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 030f 	and.w	r3, r3, #15
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d001      	beq.n	80080bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e032      	b.n	8008122 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 0304 	and.w	r3, r3, #4
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d008      	beq.n	80080da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080c8:	4b19      	ldr	r3, [pc, #100]	; (8008130 <HAL_RCC_ClockConfig+0x1c8>)
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	4916      	ldr	r1, [pc, #88]	; (8008130 <HAL_RCC_ClockConfig+0x1c8>)
 80080d6:	4313      	orrs	r3, r2
 80080d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f003 0308 	and.w	r3, r3, #8
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d009      	beq.n	80080fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80080e6:	4b12      	ldr	r3, [pc, #72]	; (8008130 <HAL_RCC_ClockConfig+0x1c8>)
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	00db      	lsls	r3, r3, #3
 80080f4:	490e      	ldr	r1, [pc, #56]	; (8008130 <HAL_RCC_ClockConfig+0x1c8>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80080fa:	f000 f821 	bl	8008140 <HAL_RCC_GetSysClockFreq>
 80080fe:	4602      	mov	r2, r0
 8008100:	4b0b      	ldr	r3, [pc, #44]	; (8008130 <HAL_RCC_ClockConfig+0x1c8>)
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	091b      	lsrs	r3, r3, #4
 8008106:	f003 030f 	and.w	r3, r3, #15
 800810a:	490a      	ldr	r1, [pc, #40]	; (8008134 <HAL_RCC_ClockConfig+0x1cc>)
 800810c:	5ccb      	ldrb	r3, [r1, r3]
 800810e:	fa22 f303 	lsr.w	r3, r2, r3
 8008112:	4a09      	ldr	r2, [pc, #36]	; (8008138 <HAL_RCC_ClockConfig+0x1d0>)
 8008114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008116:	4b09      	ldr	r3, [pc, #36]	; (800813c <HAL_RCC_ClockConfig+0x1d4>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4618      	mov	r0, r3
 800811c:	f7fc f812 	bl	8004144 <HAL_InitTick>

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	40023c00 	.word	0x40023c00
 8008130:	40023800 	.word	0x40023800
 8008134:	0801609c 	.word	0x0801609c
 8008138:	20000000 	.word	0x20000000
 800813c:	20000004 	.word	0x20000004

08008140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008140:	b5b0      	push	{r4, r5, r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008146:	2100      	movs	r1, #0
 8008148:	6079      	str	r1, [r7, #4]
 800814a:	2100      	movs	r1, #0
 800814c:	60f9      	str	r1, [r7, #12]
 800814e:	2100      	movs	r1, #0
 8008150:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008152:	2100      	movs	r1, #0
 8008154:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008156:	4952      	ldr	r1, [pc, #328]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008158:	6889      	ldr	r1, [r1, #8]
 800815a:	f001 010c 	and.w	r1, r1, #12
 800815e:	2908      	cmp	r1, #8
 8008160:	d00d      	beq.n	800817e <HAL_RCC_GetSysClockFreq+0x3e>
 8008162:	2908      	cmp	r1, #8
 8008164:	f200 8094 	bhi.w	8008290 <HAL_RCC_GetSysClockFreq+0x150>
 8008168:	2900      	cmp	r1, #0
 800816a:	d002      	beq.n	8008172 <HAL_RCC_GetSysClockFreq+0x32>
 800816c:	2904      	cmp	r1, #4
 800816e:	d003      	beq.n	8008178 <HAL_RCC_GetSysClockFreq+0x38>
 8008170:	e08e      	b.n	8008290 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008172:	4b4c      	ldr	r3, [pc, #304]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8008174:	60bb      	str	r3, [r7, #8]
      break;
 8008176:	e08e      	b.n	8008296 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008178:	4b4b      	ldr	r3, [pc, #300]	; (80082a8 <HAL_RCC_GetSysClockFreq+0x168>)
 800817a:	60bb      	str	r3, [r7, #8]
      break;
 800817c:	e08b      	b.n	8008296 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800817e:	4948      	ldr	r1, [pc, #288]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008180:	6849      	ldr	r1, [r1, #4]
 8008182:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8008186:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008188:	4945      	ldr	r1, [pc, #276]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x160>)
 800818a:	6849      	ldr	r1, [r1, #4]
 800818c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8008190:	2900      	cmp	r1, #0
 8008192:	d024      	beq.n	80081de <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008194:	4942      	ldr	r1, [pc, #264]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008196:	6849      	ldr	r1, [r1, #4]
 8008198:	0989      	lsrs	r1, r1, #6
 800819a:	4608      	mov	r0, r1
 800819c:	f04f 0100 	mov.w	r1, #0
 80081a0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80081a4:	f04f 0500 	mov.w	r5, #0
 80081a8:	ea00 0204 	and.w	r2, r0, r4
 80081ac:	ea01 0305 	and.w	r3, r1, r5
 80081b0:	493d      	ldr	r1, [pc, #244]	; (80082a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80081b2:	fb01 f003 	mul.w	r0, r1, r3
 80081b6:	2100      	movs	r1, #0
 80081b8:	fb01 f102 	mul.w	r1, r1, r2
 80081bc:	1844      	adds	r4, r0, r1
 80081be:	493a      	ldr	r1, [pc, #232]	; (80082a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80081c0:	fba2 0101 	umull	r0, r1, r2, r1
 80081c4:	1863      	adds	r3, r4, r1
 80081c6:	4619      	mov	r1, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	461a      	mov	r2, r3
 80081cc:	f04f 0300 	mov.w	r3, #0
 80081d0:	f7f8 fd1a 	bl	8000c08 <__aeabi_uldivmod>
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	4613      	mov	r3, r2
 80081da:	60fb      	str	r3, [r7, #12]
 80081dc:	e04a      	b.n	8008274 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081de:	4b30      	ldr	r3, [pc, #192]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	099b      	lsrs	r3, r3, #6
 80081e4:	461a      	mov	r2, r3
 80081e6:	f04f 0300 	mov.w	r3, #0
 80081ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80081ee:	f04f 0100 	mov.w	r1, #0
 80081f2:	ea02 0400 	and.w	r4, r2, r0
 80081f6:	ea03 0501 	and.w	r5, r3, r1
 80081fa:	4620      	mov	r0, r4
 80081fc:	4629      	mov	r1, r5
 80081fe:	f04f 0200 	mov.w	r2, #0
 8008202:	f04f 0300 	mov.w	r3, #0
 8008206:	014b      	lsls	r3, r1, #5
 8008208:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800820c:	0142      	lsls	r2, r0, #5
 800820e:	4610      	mov	r0, r2
 8008210:	4619      	mov	r1, r3
 8008212:	1b00      	subs	r0, r0, r4
 8008214:	eb61 0105 	sbc.w	r1, r1, r5
 8008218:	f04f 0200 	mov.w	r2, #0
 800821c:	f04f 0300 	mov.w	r3, #0
 8008220:	018b      	lsls	r3, r1, #6
 8008222:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008226:	0182      	lsls	r2, r0, #6
 8008228:	1a12      	subs	r2, r2, r0
 800822a:	eb63 0301 	sbc.w	r3, r3, r1
 800822e:	f04f 0000 	mov.w	r0, #0
 8008232:	f04f 0100 	mov.w	r1, #0
 8008236:	00d9      	lsls	r1, r3, #3
 8008238:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800823c:	00d0      	lsls	r0, r2, #3
 800823e:	4602      	mov	r2, r0
 8008240:	460b      	mov	r3, r1
 8008242:	1912      	adds	r2, r2, r4
 8008244:	eb45 0303 	adc.w	r3, r5, r3
 8008248:	f04f 0000 	mov.w	r0, #0
 800824c:	f04f 0100 	mov.w	r1, #0
 8008250:	0299      	lsls	r1, r3, #10
 8008252:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008256:	0290      	lsls	r0, r2, #10
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	4610      	mov	r0, r2
 800825e:	4619      	mov	r1, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	461a      	mov	r2, r3
 8008264:	f04f 0300 	mov.w	r3, #0
 8008268:	f7f8 fcce 	bl	8000c08 <__aeabi_uldivmod>
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	4613      	mov	r3, r2
 8008272:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008274:	4b0a      	ldr	r3, [pc, #40]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	0c1b      	lsrs	r3, r3, #16
 800827a:	f003 0303 	and.w	r3, r3, #3
 800827e:	3301      	adds	r3, #1
 8008280:	005b      	lsls	r3, r3, #1
 8008282:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	fbb2 f3f3 	udiv	r3, r2, r3
 800828c:	60bb      	str	r3, [r7, #8]
      break;
 800828e:	e002      	b.n	8008296 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008290:	4b04      	ldr	r3, [pc, #16]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8008292:	60bb      	str	r3, [r7, #8]
      break;
 8008294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008296:	68bb      	ldr	r3, [r7, #8]
}
 8008298:	4618      	mov	r0, r3
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bdb0      	pop	{r4, r5, r7, pc}
 80082a0:	40023800 	.word	0x40023800
 80082a4:	00f42400 	.word	0x00f42400
 80082a8:	017d7840 	.word	0x017d7840

080082ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082ac:	b480      	push	{r7}
 80082ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082b0:	4b03      	ldr	r3, [pc, #12]	; (80082c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80082b2:	681b      	ldr	r3, [r3, #0]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	20000000 	.word	0x20000000

080082c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80082c8:	f7ff fff0 	bl	80082ac <HAL_RCC_GetHCLKFreq>
 80082cc:	4602      	mov	r2, r0
 80082ce:	4b05      	ldr	r3, [pc, #20]	; (80082e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	0a9b      	lsrs	r3, r3, #10
 80082d4:	f003 0307 	and.w	r3, r3, #7
 80082d8:	4903      	ldr	r1, [pc, #12]	; (80082e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80082da:	5ccb      	ldrb	r3, [r1, r3]
 80082dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	40023800 	.word	0x40023800
 80082e8:	080160ac 	.word	0x080160ac

080082ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80082f0:	f7ff ffdc 	bl	80082ac <HAL_RCC_GetHCLKFreq>
 80082f4:	4602      	mov	r2, r0
 80082f6:	4b05      	ldr	r3, [pc, #20]	; (800830c <HAL_RCC_GetPCLK2Freq+0x20>)
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	0b5b      	lsrs	r3, r3, #13
 80082fc:	f003 0307 	and.w	r3, r3, #7
 8008300:	4903      	ldr	r1, [pc, #12]	; (8008310 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008302:	5ccb      	ldrb	r3, [r1, r3]
 8008304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008308:	4618      	mov	r0, r3
 800830a:	bd80      	pop	{r7, pc}
 800830c:	40023800 	.word	0x40023800
 8008310:	080160ac 	.word	0x080160ac

08008314 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b088      	sub	sp, #32
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800831c:	2300      	movs	r3, #0
 800831e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008320:	2300      	movs	r3, #0
 8008322:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008324:	2300      	movs	r3, #0
 8008326:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008328:	2300      	movs	r3, #0
 800832a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800832c:	2300      	movs	r3, #0
 800832e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 0301 	and.w	r3, r3, #1
 8008338:	2b00      	cmp	r3, #0
 800833a:	d012      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800833c:	4b69      	ldr	r3, [pc, #420]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	4a68      	ldr	r2, [pc, #416]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008342:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008346:	6093      	str	r3, [r2, #8]
 8008348:	4b66      	ldr	r3, [pc, #408]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800834a:	689a      	ldr	r2, [r3, #8]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008350:	4964      	ldr	r1, [pc, #400]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008352:	4313      	orrs	r3, r2
 8008354:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800835a:	2b00      	cmp	r3, #0
 800835c:	d101      	bne.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800835e:	2301      	movs	r3, #1
 8008360:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d017      	beq.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800836e:	4b5d      	ldr	r3, [pc, #372]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008374:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800837c:	4959      	ldr	r1, [pc, #356]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800837e:	4313      	orrs	r3, r2
 8008380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008388:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800838c:	d101      	bne.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800838e:	2301      	movs	r3, #1
 8008390:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008396:	2b00      	cmp	r3, #0
 8008398:	d101      	bne.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800839a:	2301      	movs	r3, #1
 800839c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d017      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80083aa:	4b4e      	ldr	r3, [pc, #312]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b8:	494a      	ldr	r1, [pc, #296]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083ba:	4313      	orrs	r3, r2
 80083bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083c8:	d101      	bne.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80083ca:	2301      	movs	r3, #1
 80083cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d101      	bne.n	80083da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80083d6:	2301      	movs	r3, #1
 80083d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d001      	beq.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80083e6:	2301      	movs	r3, #1
 80083e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0320 	and.w	r3, r3, #32
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f000 808b 	beq.w	800850e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80083f8:	4b3a      	ldr	r3, [pc, #232]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fc:	4a39      	ldr	r2, [pc, #228]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008402:	6413      	str	r3, [r2, #64]	; 0x40
 8008404:	4b37      	ldr	r3, [pc, #220]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800840c:	60bb      	str	r3, [r7, #8]
 800840e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008410:	4b35      	ldr	r3, [pc, #212]	; (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a34      	ldr	r2, [pc, #208]	; (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800841a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800841c:	f7fb fed6 	bl	80041cc <HAL_GetTick>
 8008420:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008422:	e008      	b.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008424:	f7fb fed2 	bl	80041cc <HAL_GetTick>
 8008428:	4602      	mov	r2, r0
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	2b64      	cmp	r3, #100	; 0x64
 8008430:	d901      	bls.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	e357      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008436:	4b2c      	ldr	r3, [pc, #176]	; (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800843e:	2b00      	cmp	r3, #0
 8008440:	d0f0      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008442:	4b28      	ldr	r3, [pc, #160]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800844a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d035      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800845a:	693a      	ldr	r2, [r7, #16]
 800845c:	429a      	cmp	r2, r3
 800845e:	d02e      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008460:	4b20      	ldr	r3, [pc, #128]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008468:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800846a:	4b1e      	ldr	r3, [pc, #120]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800846c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800846e:	4a1d      	ldr	r2, [pc, #116]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008474:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008476:	4b1b      	ldr	r3, [pc, #108]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800847a:	4a1a      	ldr	r2, [pc, #104]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800847c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008480:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008482:	4a18      	ldr	r2, [pc, #96]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008488:	4b16      	ldr	r3, [pc, #88]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800848a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800848c:	f003 0301 	and.w	r3, r3, #1
 8008490:	2b01      	cmp	r3, #1
 8008492:	d114      	bne.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008494:	f7fb fe9a 	bl	80041cc <HAL_GetTick>
 8008498:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800849a:	e00a      	b.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800849c:	f7fb fe96 	bl	80041cc <HAL_GetTick>
 80084a0:	4602      	mov	r2, r0
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d901      	bls.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e319      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084b2:	4b0c      	ldr	r3, [pc, #48]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b6:	f003 0302 	and.w	r3, r3, #2
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d0ee      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084ca:	d111      	bne.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80084cc:	4b05      	ldr	r3, [pc, #20]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80084d8:	4b04      	ldr	r3, [pc, #16]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80084da:	400b      	ands	r3, r1
 80084dc:	4901      	ldr	r1, [pc, #4]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	608b      	str	r3, [r1, #8]
 80084e2:	e00b      	b.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80084e4:	40023800 	.word	0x40023800
 80084e8:	40007000 	.word	0x40007000
 80084ec:	0ffffcff 	.word	0x0ffffcff
 80084f0:	4bb1      	ldr	r3, [pc, #708]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	4ab0      	ldr	r2, [pc, #704]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80084f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80084fa:	6093      	str	r3, [r2, #8]
 80084fc:	4bae      	ldr	r3, [pc, #696]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80084fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008508:	49ab      	ldr	r1, [pc, #684]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800850a:	4313      	orrs	r3, r2
 800850c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 0310 	and.w	r3, r3, #16
 8008516:	2b00      	cmp	r3, #0
 8008518:	d010      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800851a:	4ba7      	ldr	r3, [pc, #668]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800851c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008520:	4aa5      	ldr	r2, [pc, #660]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008526:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800852a:	4ba3      	ldr	r3, [pc, #652]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800852c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008534:	49a0      	ldr	r1, [pc, #640]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008536:	4313      	orrs	r3, r2
 8008538:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00a      	beq.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008548:	4b9b      	ldr	r3, [pc, #620]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800854a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800854e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008556:	4998      	ldr	r1, [pc, #608]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008558:	4313      	orrs	r3, r2
 800855a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00a      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800856a:	4b93      	ldr	r3, [pc, #588]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800856c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008570:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008578:	498f      	ldr	r1, [pc, #572]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800857a:	4313      	orrs	r3, r2
 800857c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00a      	beq.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800858c:	4b8a      	ldr	r3, [pc, #552]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800858e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008592:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800859a:	4987      	ldr	r1, [pc, #540]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800859c:	4313      	orrs	r3, r2
 800859e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00a      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80085ae:	4b82      	ldr	r3, [pc, #520]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80085b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085bc:	497e      	ldr	r1, [pc, #504]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00a      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80085d0:	4b79      	ldr	r3, [pc, #484]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80085d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085d6:	f023 0203 	bic.w	r2, r3, #3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085de:	4976      	ldr	r1, [pc, #472]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80085e0:	4313      	orrs	r3, r2
 80085e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00a      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80085f2:	4b71      	ldr	r3, [pc, #452]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80085f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085f8:	f023 020c 	bic.w	r2, r3, #12
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008600:	496d      	ldr	r1, [pc, #436]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008602:	4313      	orrs	r3, r2
 8008604:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00a      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008614:	4b68      	ldr	r3, [pc, #416]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800861a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008622:	4965      	ldr	r1, [pc, #404]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008624:	4313      	orrs	r3, r2
 8008626:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00a      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008636:	4b60      	ldr	r3, [pc, #384]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800863c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008644:	495c      	ldr	r1, [pc, #368]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008646:	4313      	orrs	r3, r2
 8008648:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00a      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008658:	4b57      	ldr	r3, [pc, #348]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800865a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800865e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008666:	4954      	ldr	r1, [pc, #336]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008668:	4313      	orrs	r3, r2
 800866a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00a      	beq.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800867a:	4b4f      	ldr	r3, [pc, #316]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800867c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008680:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008688:	494b      	ldr	r1, [pc, #300]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800868a:	4313      	orrs	r3, r2
 800868c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008698:	2b00      	cmp	r3, #0
 800869a:	d00a      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800869c:	4b46      	ldr	r3, [pc, #280]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800869e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086aa:	4943      	ldr	r1, [pc, #268]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80086ac:	4313      	orrs	r3, r2
 80086ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00a      	beq.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80086be:	4b3e      	ldr	r3, [pc, #248]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80086c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086cc:	493a      	ldr	r1, [pc, #232]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80086ce:	4313      	orrs	r3, r2
 80086d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00a      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80086e0:	4b35      	ldr	r3, [pc, #212]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80086e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086ee:	4932      	ldr	r1, [pc, #200]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80086f0:	4313      	orrs	r3, r2
 80086f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d011      	beq.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008702:	4b2d      	ldr	r3, [pc, #180]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008708:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008710:	4929      	ldr	r1, [pc, #164]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008712:	4313      	orrs	r3, r2
 8008714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800871c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008720:	d101      	bne.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008722:	2301      	movs	r3, #1
 8008724:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f003 0308 	and.w	r3, r3, #8
 800872e:	2b00      	cmp	r3, #0
 8008730:	d001      	beq.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008732:	2301      	movs	r3, #1
 8008734:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00a      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008742:	4b1d      	ldr	r3, [pc, #116]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008748:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008750:	4919      	ldr	r1, [pc, #100]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008752:	4313      	orrs	r3, r2
 8008754:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00b      	beq.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008764:	4b14      	ldr	r3, [pc, #80]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800876a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008774:	4910      	ldr	r1, [pc, #64]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008776:	4313      	orrs	r3, r2
 8008778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	2b01      	cmp	r3, #1
 8008780:	d006      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800878a:	2b00      	cmp	r3, #0
 800878c:	f000 80d9 	beq.w	8008942 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008790:	4b09      	ldr	r3, [pc, #36]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a08      	ldr	r2, [pc, #32]	; (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008796:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800879a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800879c:	f7fb fd16 	bl	80041cc <HAL_GetTick>
 80087a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80087a2:	e00b      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80087a4:	f7fb fd12 	bl	80041cc <HAL_GetTick>
 80087a8:	4602      	mov	r2, r0
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	2b64      	cmp	r3, #100	; 0x64
 80087b0:	d904      	bls.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087b2:	2303      	movs	r3, #3
 80087b4:	e197      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80087b6:	bf00      	nop
 80087b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80087bc:	4b6c      	ldr	r3, [pc, #432]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1ed      	bne.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 0301 	and.w	r3, r3, #1
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d021      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d11d      	bne.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80087dc:	4b64      	ldr	r3, [pc, #400]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087e2:	0c1b      	lsrs	r3, r3, #16
 80087e4:	f003 0303 	and.w	r3, r3, #3
 80087e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80087ea:	4b61      	ldr	r3, [pc, #388]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087f0:	0e1b      	lsrs	r3, r3, #24
 80087f2:	f003 030f 	and.w	r3, r3, #15
 80087f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	019a      	lsls	r2, r3, #6
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	041b      	lsls	r3, r3, #16
 8008802:	431a      	orrs	r2, r3
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	061b      	lsls	r3, r3, #24
 8008808:	431a      	orrs	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	071b      	lsls	r3, r3, #28
 8008810:	4957      	ldr	r1, [pc, #348]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008812:	4313      	orrs	r3, r2
 8008814:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008820:	2b00      	cmp	r3, #0
 8008822:	d004      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008828:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800882c:	d00a      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008836:	2b00      	cmp	r3, #0
 8008838:	d02e      	beq.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008842:	d129      	bne.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008844:	4b4a      	ldr	r3, [pc, #296]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800884a:	0c1b      	lsrs	r3, r3, #16
 800884c:	f003 0303 	and.w	r3, r3, #3
 8008850:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008852:	4b47      	ldr	r3, [pc, #284]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008858:	0f1b      	lsrs	r3, r3, #28
 800885a:	f003 0307 	and.w	r3, r3, #7
 800885e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	019a      	lsls	r2, r3, #6
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	041b      	lsls	r3, r3, #16
 800886a:	431a      	orrs	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	061b      	lsls	r3, r3, #24
 8008872:	431a      	orrs	r2, r3
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	071b      	lsls	r3, r3, #28
 8008878:	493d      	ldr	r1, [pc, #244]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800887a:	4313      	orrs	r3, r2
 800887c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008880:	4b3b      	ldr	r3, [pc, #236]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008882:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008886:	f023 021f 	bic.w	r2, r3, #31
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888e:	3b01      	subs	r3, #1
 8008890:	4937      	ldr	r1, [pc, #220]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008892:	4313      	orrs	r3, r2
 8008894:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d01d      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80088a4:	4b32      	ldr	r3, [pc, #200]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088aa:	0e1b      	lsrs	r3, r3, #24
 80088ac:	f003 030f 	and.w	r3, r3, #15
 80088b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80088b2:	4b2f      	ldr	r3, [pc, #188]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088b8:	0f1b      	lsrs	r3, r3, #28
 80088ba:	f003 0307 	and.w	r3, r3, #7
 80088be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	019a      	lsls	r2, r3, #6
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	041b      	lsls	r3, r3, #16
 80088cc:	431a      	orrs	r2, r3
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	061b      	lsls	r3, r3, #24
 80088d2:	431a      	orrs	r2, r3
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	071b      	lsls	r3, r3, #28
 80088d8:	4925      	ldr	r1, [pc, #148]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d011      	beq.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	019a      	lsls	r2, r3, #6
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	041b      	lsls	r3, r3, #16
 80088f8:	431a      	orrs	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	061b      	lsls	r3, r3, #24
 8008900:	431a      	orrs	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	071b      	lsls	r3, r3, #28
 8008908:	4919      	ldr	r1, [pc, #100]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800890a:	4313      	orrs	r3, r2
 800890c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008910:	4b17      	ldr	r3, [pc, #92]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a16      	ldr	r2, [pc, #88]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008916:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800891a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800891c:	f7fb fc56 	bl	80041cc <HAL_GetTick>
 8008920:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008922:	e008      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008924:	f7fb fc52 	bl	80041cc <HAL_GetTick>
 8008928:	4602      	mov	r2, r0
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	2b64      	cmp	r3, #100	; 0x64
 8008930:	d901      	bls.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008932:	2303      	movs	r3, #3
 8008934:	e0d7      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008936:	4b0e      	ldr	r3, [pc, #56]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800893e:	2b00      	cmp	r3, #0
 8008940:	d0f0      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	2b01      	cmp	r3, #1
 8008946:	f040 80cd 	bne.w	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800894a:	4b09      	ldr	r3, [pc, #36]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a08      	ldr	r2, [pc, #32]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008954:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008956:	f7fb fc39 	bl	80041cc <HAL_GetTick>
 800895a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800895c:	e00a      	b.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800895e:	f7fb fc35 	bl	80041cc <HAL_GetTick>
 8008962:	4602      	mov	r2, r0
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	2b64      	cmp	r3, #100	; 0x64
 800896a:	d903      	bls.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800896c:	2303      	movs	r3, #3
 800896e:	e0ba      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008970:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008974:	4b5e      	ldr	r3, [pc, #376]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800897c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008980:	d0ed      	beq.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800898a:	2b00      	cmp	r3, #0
 800898c:	d003      	beq.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008992:	2b00      	cmp	r3, #0
 8008994:	d009      	beq.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d02e      	beq.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d12a      	bne.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80089aa:	4b51      	ldr	r3, [pc, #324]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089b0:	0c1b      	lsrs	r3, r3, #16
 80089b2:	f003 0303 	and.w	r3, r3, #3
 80089b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80089b8:	4b4d      	ldr	r3, [pc, #308]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089be:	0f1b      	lsrs	r3, r3, #28
 80089c0:	f003 0307 	and.w	r3, r3, #7
 80089c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	019a      	lsls	r2, r3, #6
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	041b      	lsls	r3, r3, #16
 80089d0:	431a      	orrs	r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	061b      	lsls	r3, r3, #24
 80089d8:	431a      	orrs	r2, r3
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	071b      	lsls	r3, r3, #28
 80089de:	4944      	ldr	r1, [pc, #272]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089e0:	4313      	orrs	r3, r2
 80089e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80089e6:	4b42      	ldr	r3, [pc, #264]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f4:	3b01      	subs	r3, #1
 80089f6:	021b      	lsls	r3, r3, #8
 80089f8:	493d      	ldr	r1, [pc, #244]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089fa:	4313      	orrs	r3, r2
 80089fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d022      	beq.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a14:	d11d      	bne.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008a16:	4b36      	ldr	r3, [pc, #216]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a1c:	0e1b      	lsrs	r3, r3, #24
 8008a1e:	f003 030f 	and.w	r3, r3, #15
 8008a22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008a24:	4b32      	ldr	r3, [pc, #200]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a2a:	0f1b      	lsrs	r3, r3, #28
 8008a2c:	f003 0307 	and.w	r3, r3, #7
 8008a30:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	695b      	ldr	r3, [r3, #20]
 8008a36:	019a      	lsls	r2, r3, #6
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6a1b      	ldr	r3, [r3, #32]
 8008a3c:	041b      	lsls	r3, r3, #16
 8008a3e:	431a      	orrs	r2, r3
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	061b      	lsls	r3, r3, #24
 8008a44:	431a      	orrs	r2, r3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	071b      	lsls	r3, r3, #28
 8008a4a:	4929      	ldr	r1, [pc, #164]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 0308 	and.w	r3, r3, #8
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d028      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008a5e:	4b24      	ldr	r3, [pc, #144]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a64:	0e1b      	lsrs	r3, r3, #24
 8008a66:	f003 030f 	and.w	r3, r3, #15
 8008a6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008a6c:	4b20      	ldr	r3, [pc, #128]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a72:	0c1b      	lsrs	r3, r3, #16
 8008a74:	f003 0303 	and.w	r3, r3, #3
 8008a78:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	695b      	ldr	r3, [r3, #20]
 8008a7e:	019a      	lsls	r2, r3, #6
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	041b      	lsls	r3, r3, #16
 8008a84:	431a      	orrs	r2, r3
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	061b      	lsls	r3, r3, #24
 8008a8a:	431a      	orrs	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	69db      	ldr	r3, [r3, #28]
 8008a90:	071b      	lsls	r3, r3, #28
 8008a92:	4917      	ldr	r1, [pc, #92]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a94:	4313      	orrs	r3, r2
 8008a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008a9a:	4b15      	ldr	r3, [pc, #84]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008aa0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa8:	4911      	ldr	r1, [pc, #68]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008ab0:	4b0f      	ldr	r3, [pc, #60]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a0e      	ldr	r2, [pc, #56]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008aba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008abc:	f7fb fb86 	bl	80041cc <HAL_GetTick>
 8008ac0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008ac2:	e008      	b.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008ac4:	f7fb fb82 	bl	80041cc <HAL_GetTick>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	2b64      	cmp	r3, #100	; 0x64
 8008ad0:	d901      	bls.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	e007      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008ad6:	4b06      	ldr	r3, [pc, #24]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ae2:	d1ef      	bne.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3720      	adds	r7, #32
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	40023800 	.word	0x40023800

08008af4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b087      	sub	sp, #28
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008afc:	2300      	movs	r3, #0
 8008afe:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8008b00:	2300      	movs	r3, #0
 8008b02:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8008b04:	2300      	movs	r3, #0
 8008b06:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008b12:	f040 808c 	bne.w	8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008b16:	4b95      	ldr	r3, [pc, #596]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b1c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008b24:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b2c:	d07c      	beq.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b34:	d87d      	bhi.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d004      	beq.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b42:	d039      	beq.n	8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008b44:	e075      	b.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008b46:	4b89      	ldr	r3, [pc, #548]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d108      	bne.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008b52:	4b86      	ldr	r3, [pc, #536]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b5a:	4a85      	ldr	r2, [pc, #532]	; (8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b60:	613b      	str	r3, [r7, #16]
 8008b62:	e007      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008b64:	4b81      	ldr	r3, [pc, #516]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b6c:	4a81      	ldr	r2, [pc, #516]	; (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b72:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008b74:	4b7d      	ldr	r3, [pc, #500]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b7a:	0e1b      	lsrs	r3, r3, #24
 8008b7c:	f003 030f 	and.w	r3, r3, #15
 8008b80:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008b82:	4b7a      	ldr	r3, [pc, #488]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b88:	099b      	lsrs	r3, r3, #6
 8008b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b8e:	693a      	ldr	r2, [r7, #16]
 8008b90:	fb02 f203 	mul.w	r2, r2, r3
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b9a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008b9c:	4b73      	ldr	r3, [pc, #460]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ba2:	0a1b      	lsrs	r3, r3, #8
 8008ba4:	f003 031f 	and.w	r3, r3, #31
 8008ba8:	3301      	adds	r3, #1
 8008baa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008bac:	697a      	ldr	r2, [r7, #20]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bb4:	617b      	str	r3, [r7, #20]
        break;
 8008bb6:	e03d      	b.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008bb8:	4b6c      	ldr	r3, [pc, #432]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d108      	bne.n	8008bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008bc4:	4b69      	ldr	r3, [pc, #420]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bcc:	4a68      	ldr	r2, [pc, #416]	; (8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bd2:	613b      	str	r3, [r7, #16]
 8008bd4:	e007      	b.n	8008be6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008bd6:	4b65      	ldr	r3, [pc, #404]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bde:	4a65      	ldr	r2, [pc, #404]	; (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008be4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008be6:	4b61      	ldr	r3, [pc, #388]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bec:	0e1b      	lsrs	r3, r3, #24
 8008bee:	f003 030f 	and.w	r3, r3, #15
 8008bf2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008bf4:	4b5d      	ldr	r3, [pc, #372]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bfa:	099b      	lsrs	r3, r3, #6
 8008bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c00:	693a      	ldr	r2, [r7, #16]
 8008c02:	fb02 f203 	mul.w	r2, r2, r3
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c0c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008c0e:	4b57      	ldr	r3, [pc, #348]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c14:	f003 031f 	and.w	r3, r3, #31
 8008c18:	3301      	adds	r3, #1
 8008c1a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008c1c:	697a      	ldr	r2, [r7, #20]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c24:	617b      	str	r3, [r7, #20]
        break;
 8008c26:	e005      	b.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c28:	4b53      	ldr	r3, [pc, #332]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008c2a:	617b      	str	r3, [r7, #20]
        break;
 8008c2c:	e002      	b.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 8008c2e:	bf00      	nop
 8008c30:	e000      	b.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 8008c32:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c3a:	f040 808c 	bne.w	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008c3e:	4b4b      	ldr	r3, [pc, #300]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c44:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008c4c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c54:	d07c      	beq.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c5c:	d87d      	bhi.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d004      	beq.n	8008c6e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c6a:	d039      	beq.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008c6c:	e075      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008c6e:	4b3f      	ldr	r3, [pc, #252]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d108      	bne.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008c7a:	4b3c      	ldr	r3, [pc, #240]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c82:	4a3b      	ldr	r2, [pc, #236]	; (8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c88:	613b      	str	r3, [r7, #16]
 8008c8a:	e007      	b.n	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008c8c:	4b37      	ldr	r3, [pc, #220]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c94:	4a37      	ldr	r2, [pc, #220]	; (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c9a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008c9c:	4b33      	ldr	r3, [pc, #204]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ca2:	0e1b      	lsrs	r3, r3, #24
 8008ca4:	f003 030f 	and.w	r3, r3, #15
 8008ca8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008caa:	4b30      	ldr	r3, [pc, #192]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cb0:	099b      	lsrs	r3, r3, #6
 8008cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cb6:	693a      	ldr	r2, [r7, #16]
 8008cb8:	fb02 f203 	mul.w	r2, r2, r3
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cc2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008cc4:	4b29      	ldr	r3, [pc, #164]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cca:	0a1b      	lsrs	r3, r3, #8
 8008ccc:	f003 031f 	and.w	r3, r3, #31
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008cd4:	697a      	ldr	r2, [r7, #20]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cdc:	617b      	str	r3, [r7, #20]
        break;
 8008cde:	e03d      	b.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008ce0:	4b22      	ldr	r3, [pc, #136]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d108      	bne.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008cec:	4b1f      	ldr	r3, [pc, #124]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cf4:	4a1e      	ldr	r2, [pc, #120]	; (8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cfa:	613b      	str	r3, [r7, #16]
 8008cfc:	e007      	b.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008cfe:	4b1b      	ldr	r3, [pc, #108]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d06:	4a1b      	ldr	r2, [pc, #108]	; (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d0c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008d0e:	4b17      	ldr	r3, [pc, #92]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d14:	0e1b      	lsrs	r3, r3, #24
 8008d16:	f003 030f 	and.w	r3, r3, #15
 8008d1a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008d1c:	4b13      	ldr	r3, [pc, #76]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d22:	099b      	lsrs	r3, r3, #6
 8008d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	fb02 f203 	mul.w	r2, r2, r3
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d34:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008d36:	4b0d      	ldr	r3, [pc, #52]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d3c:	f003 031f 	and.w	r3, r3, #31
 8008d40:	3301      	adds	r3, #1
 8008d42:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008d44:	697a      	ldr	r2, [r7, #20]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d4c:	617b      	str	r3, [r7, #20]
        break;
 8008d4e:	e005      	b.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008d50:	4b09      	ldr	r3, [pc, #36]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008d52:	617b      	str	r3, [r7, #20]
        break;
 8008d54:	e002      	b.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 8008d56:	bf00      	nop
 8008d58:	e000      	b.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 8008d5a:	bf00      	nop

  return frequency;
 8008d5c:	697b      	ldr	r3, [r7, #20]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	371c      	adds	r7, #28
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	40023800 	.word	0x40023800
 8008d70:	00f42400 	.word	0x00f42400
 8008d74:	017d7840 	.word	0x017d7840
 8008d78:	00bb8000 	.word	0x00bb8000

08008d7c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d101      	bne.n	8008d8e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e081      	b.n	8008e92 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	7f5b      	ldrb	r3, [r3, #29]
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d105      	bne.n	8008da4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7fa fd66 	bl	8003870 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2202      	movs	r2, #2
 8008da8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	22ca      	movs	r2, #202	; 0xca
 8008db0:	625a      	str	r2, [r3, #36]	; 0x24
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2253      	movs	r2, #83	; 0x53
 8008db8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fb16 	bl	80093ec <RTC_EnterInitMode>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d008      	beq.n	8008dd8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	22ff      	movs	r2, #255	; 0xff
 8008dcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2204      	movs	r2, #4
 8008dd2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e05c      	b.n	8008e92 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6899      	ldr	r1, [r3, #8]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	4b2e      	ldr	r3, [pc, #184]	; (8008e9c <HAL_RTC_Init+0x120>)
 8008de4:	400b      	ands	r3, r1
 8008de6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6899      	ldr	r1, [r3, #8]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	685a      	ldr	r2, [r3, #4]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	431a      	orrs	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	695b      	ldr	r3, [r3, #20]
 8008dfc:	431a      	orrs	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	430a      	orrs	r2, r1
 8008e04:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	68d2      	ldr	r2, [r2, #12]
 8008e0e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	6919      	ldr	r1, [r3, #16]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	041a      	lsls	r2, r3, #16
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	430a      	orrs	r2, r1
 8008e22:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68da      	ldr	r2, [r3, #12]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e32:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	f003 0320 	and.w	r3, r3, #32
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d10e      	bne.n	8008e60 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 faaa 	bl	800939c <HAL_RTC_WaitForSynchro>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d008      	beq.n	8008e60 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	22ff      	movs	r2, #255	; 0xff
 8008e54:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2204      	movs	r2, #4
 8008e5a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e018      	b.n	8008e92 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f022 0208 	bic.w	r2, r2, #8
 8008e6e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	699a      	ldr	r2, [r3, #24]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	430a      	orrs	r2, r1
 8008e80:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	22ff      	movs	r2, #255	; 0xff
 8008e88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008e90:	2300      	movs	r3, #0
  }
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3708      	adds	r7, #8
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	ff8fffbf 	.word	0xff8fffbf

08008ea0 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008ea0:	b590      	push	{r4, r7, lr}
 8008ea2:	b087      	sub	sp, #28
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008eac:	2300      	movs	r3, #0
 8008eae:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	7f1b      	ldrb	r3, [r3, #28]
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d101      	bne.n	8008ebc <HAL_RTC_SetTime+0x1c>
 8008eb8:	2302      	movs	r3, #2
 8008eba:	e0a8      	b.n	800900e <HAL_RTC_SetTime+0x16e>
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2202      	movs	r2, #2
 8008ec6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d126      	bne.n	8008f1c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d102      	bne.n	8008ee2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f000 faac 	bl	8009444 <RTC_ByteToBcd2>
 8008eec:	4603      	mov	r3, r0
 8008eee:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	785b      	ldrb	r3, [r3, #1]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f000 faa5 	bl	8009444 <RTC_ByteToBcd2>
 8008efa:	4603      	mov	r3, r0
 8008efc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008efe:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	789b      	ldrb	r3, [r3, #2]
 8008f04:	4618      	mov	r0, r3
 8008f06:	f000 fa9d 	bl	8009444 <RTC_ByteToBcd2>
 8008f0a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008f0c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	7b1b      	ldrb	r3, [r3, #12]
 8008f14:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008f16:	4313      	orrs	r3, r2
 8008f18:	617b      	str	r3, [r7, #20]
 8008f1a:	e018      	b.n	8008f4e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d102      	bne.n	8008f30 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	785b      	ldrb	r3, [r3, #1]
 8008f3a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008f3c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008f42:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	7b1b      	ldrb	r3, [r3, #12]
 8008f48:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	22ca      	movs	r2, #202	; 0xca
 8008f54:	625a      	str	r2, [r3, #36]	; 0x24
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2253      	movs	r2, #83	; 0x53
 8008f5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	f000 fa44 	bl	80093ec <RTC_EnterInitMode>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00b      	beq.n	8008f82 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	22ff      	movs	r2, #255	; 0xff
 8008f70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2204      	movs	r2, #4
 8008f76:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e045      	b.n	800900e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	6979      	ldr	r1, [r7, #20]
 8008f88:	4b23      	ldr	r3, [pc, #140]	; (8009018 <HAL_RTC_SetTime+0x178>)
 8008f8a:	400b      	ands	r3, r1
 8008f8c:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	689a      	ldr	r2, [r3, #8]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008f9c:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	6899      	ldr	r1, [r3, #8]
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	691a      	ldr	r2, [r3, #16]
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	695b      	ldr	r3, [r3, #20]
 8008fac:	431a      	orrs	r2, r3
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	430a      	orrs	r2, r1
 8008fb4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	68da      	ldr	r2, [r3, #12]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008fc4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	f003 0320 	and.w	r3, r3, #32
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d111      	bne.n	8008ff8 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f000 f9e1 	bl	800939c <HAL_RTC_WaitForSynchro>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00b      	beq.n	8008ff8 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	22ff      	movs	r2, #255	; 0xff
 8008fe6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2204      	movs	r2, #4
 8008fec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e00a      	b.n	800900e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	22ff      	movs	r2, #255	; 0xff
 8008ffe:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2201      	movs	r2, #1
 8009004:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2200      	movs	r2, #0
 800900a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800900c:	2300      	movs	r3, #0
  }
}
 800900e:	4618      	mov	r0, r3
 8009010:	371c      	adds	r7, #28
 8009012:	46bd      	mov	sp, r7
 8009014:	bd90      	pop	{r4, r7, pc}
 8009016:	bf00      	nop
 8009018:	007f7f7f 	.word	0x007f7f7f

0800901c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800901c:	b590      	push	{r4, r7, lr}
 800901e:	b087      	sub	sp, #28
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8009028:	2300      	movs	r3, #0
 800902a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	7f1b      	ldrb	r3, [r3, #28]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d101      	bne.n	8009038 <HAL_RTC_SetDate+0x1c>
 8009034:	2302      	movs	r3, #2
 8009036:	e092      	b.n	800915e <HAL_RTC_SetDate+0x142>
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2201      	movs	r2, #1
 800903c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2202      	movs	r2, #2
 8009042:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d10e      	bne.n	8009068 <HAL_RTC_SetDate+0x4c>
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	785b      	ldrb	r3, [r3, #1]
 800904e:	f003 0310 	and.w	r3, r3, #16
 8009052:	2b00      	cmp	r3, #0
 8009054:	d008      	beq.n	8009068 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	785b      	ldrb	r3, [r3, #1]
 800905a:	f023 0310 	bic.w	r3, r3, #16
 800905e:	b2db      	uxtb	r3, r3
 8009060:	330a      	adds	r3, #10
 8009062:	b2da      	uxtb	r2, r3
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d11c      	bne.n	80090a8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	78db      	ldrb	r3, [r3, #3]
 8009072:	4618      	mov	r0, r3
 8009074:	f000 f9e6 	bl	8009444 <RTC_ByteToBcd2>
 8009078:	4603      	mov	r3, r0
 800907a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	785b      	ldrb	r3, [r3, #1]
 8009080:	4618      	mov	r0, r3
 8009082:	f000 f9df 	bl	8009444 <RTC_ByteToBcd2>
 8009086:	4603      	mov	r3, r0
 8009088:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800908a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	789b      	ldrb	r3, [r3, #2]
 8009090:	4618      	mov	r0, r3
 8009092:	f000 f9d7 	bl	8009444 <RTC_ByteToBcd2>
 8009096:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009098:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80090a2:	4313      	orrs	r3, r2
 80090a4:	617b      	str	r3, [r7, #20]
 80090a6:	e00e      	b.n	80090c6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	78db      	ldrb	r3, [r3, #3]
 80090ac:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	785b      	ldrb	r3, [r3, #1]
 80090b2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80090b4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80090ba:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80090c2:	4313      	orrs	r3, r2
 80090c4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	22ca      	movs	r2, #202	; 0xca
 80090cc:	625a      	str	r2, [r3, #36]	; 0x24
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2253      	movs	r2, #83	; 0x53
 80090d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f000 f988 	bl	80093ec <RTC_EnterInitMode>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00b      	beq.n	80090fa <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	22ff      	movs	r2, #255	; 0xff
 80090e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2204      	movs	r2, #4
 80090ee:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e031      	b.n	800915e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	6979      	ldr	r1, [r7, #20]
 8009100:	4b19      	ldr	r3, [pc, #100]	; (8009168 <HAL_RTC_SetDate+0x14c>)
 8009102:	400b      	ands	r3, r1
 8009104:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68da      	ldr	r2, [r3, #12]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009114:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	f003 0320 	and.w	r3, r3, #32
 8009120:	2b00      	cmp	r3, #0
 8009122:	d111      	bne.n	8009148 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009124:	68f8      	ldr	r0, [r7, #12]
 8009126:	f000 f939 	bl	800939c <HAL_RTC_WaitForSynchro>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00b      	beq.n	8009148 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	22ff      	movs	r2, #255	; 0xff
 8009136:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2204      	movs	r2, #4
 800913c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	e00a      	b.n	800915e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	22ff      	movs	r2, #255	; 0xff
 800914e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2201      	movs	r2, #1
 8009154:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800915c:	2300      	movs	r3, #0
  }
}
 800915e:	4618      	mov	r0, r3
 8009160:	371c      	adds	r7, #28
 8009162:	46bd      	mov	sp, r7
 8009164:	bd90      	pop	{r4, r7, pc}
 8009166:	bf00      	nop
 8009168:	00ffff3f 	.word	0x00ffff3f

0800916c <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800916c:	b590      	push	{r4, r7, lr}
 800916e:	b089      	sub	sp, #36	; 0x24
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8009178:	2300      	movs	r3, #0
 800917a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800917c:	2300      	movs	r3, #0
 800917e:	61fb      	str	r3, [r7, #28]
 8009180:	2300      	movs	r3, #0
 8009182:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	7f1b      	ldrb	r3, [r3, #28]
 8009188:	2b01      	cmp	r3, #1
 800918a:	d101      	bne.n	8009190 <HAL_RTC_SetAlarm+0x24>
 800918c:	2302      	movs	r3, #2
 800918e:	e101      	b.n	8009394 <HAL_RTC_SetAlarm+0x228>
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2201      	movs	r2, #1
 8009194:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2202      	movs	r2, #2
 800919a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d137      	bne.n	8009212 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d102      	bne.n	80091b6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	2200      	movs	r2, #0
 80091b4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f000 f942 	bl	8009444 <RTC_ByteToBcd2>
 80091c0:	4603      	mov	r3, r0
 80091c2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	785b      	ldrb	r3, [r3, #1]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f000 f93b 	bl	8009444 <RTC_ByteToBcd2>
 80091ce:	4603      	mov	r3, r0
 80091d0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80091d2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	789b      	ldrb	r3, [r3, #2]
 80091d8:	4618      	mov	r0, r3
 80091da:	f000 f933 	bl	8009444 <RTC_ByteToBcd2>
 80091de:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80091e0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	7b1b      	ldrb	r3, [r3, #12]
 80091e8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80091ea:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80091f4:	4618      	mov	r0, r3
 80091f6:	f000 f925 	bl	8009444 <RTC_ByteToBcd2>
 80091fa:	4603      	mov	r3, r0
 80091fc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80091fe:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8009206:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800920c:	4313      	orrs	r3, r2
 800920e:	61fb      	str	r3, [r7, #28]
 8009210:	e023      	b.n	800925a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800921c:	2b00      	cmp	r3, #0
 800921e:	d102      	bne.n	8009226 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	2200      	movs	r2, #0
 8009224:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	785b      	ldrb	r3, [r3, #1]
 8009230:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009232:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009234:	68ba      	ldr	r2, [r7, #8]
 8009236:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009238:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	7b1b      	ldrb	r3, [r3, #12]
 800923e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009240:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009248:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800924a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009250:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009256:	4313      	orrs	r3, r2
 8009258:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	685a      	ldr	r2, [r3, #4]
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	69db      	ldr	r3, [r3, #28]
 8009262:	4313      	orrs	r3, r2
 8009264:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	22ca      	movs	r2, #202	; 0xca
 800926c:	625a      	str	r2, [r3, #36]	; 0x24
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2253      	movs	r2, #83	; 0x53
 8009274:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800927a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800927e:	d13f      	bne.n	8009300 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	689a      	ldr	r2, [r3, #8]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800928e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	689a      	ldr	r2, [r3, #8]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800929e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80092a0:	f7fa ff94 	bl	80041cc <HAL_GetTick>
 80092a4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80092a6:	e013      	b.n	80092d0 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80092a8:	f7fa ff90 	bl	80041cc <HAL_GetTick>
 80092ac:	4602      	mov	r2, r0
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	1ad3      	subs	r3, r2, r3
 80092b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092b6:	d90b      	bls.n	80092d0 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	22ff      	movs	r2, #255	; 0xff
 80092be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2203      	movs	r2, #3
 80092c4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2200      	movs	r2, #0
 80092ca:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e061      	b.n	8009394 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	f003 0301 	and.w	r3, r3, #1
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d0e4      	beq.n	80092a8 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	69fa      	ldr	r2, [r7, #28]
 80092e4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	697a      	ldr	r2, [r7, #20]
 80092ec:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	689a      	ldr	r2, [r3, #8]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092fc:	609a      	str	r2, [r3, #8]
 80092fe:	e03e      	b.n	800937e <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	689a      	ldr	r2, [r3, #8]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800930e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	689a      	ldr	r2, [r3, #8]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800931e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009320:	f7fa ff54 	bl	80041cc <HAL_GetTick>
 8009324:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009326:	e013      	b.n	8009350 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009328:	f7fa ff50 	bl	80041cc <HAL_GetTick>
 800932c:	4602      	mov	r2, r0
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009336:	d90b      	bls.n	8009350 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	22ff      	movs	r2, #255	; 0xff
 800933e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2203      	movs	r2, #3
 8009344:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800934c:	2303      	movs	r3, #3
 800934e:	e021      	b.n	8009394 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	f003 0302 	and.w	r3, r3, #2
 800935a:	2b00      	cmp	r3, #0
 800935c:	d0e4      	beq.n	8009328 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	69fa      	ldr	r2, [r7, #28]
 8009364:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	697a      	ldr	r2, [r7, #20]
 800936c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	689a      	ldr	r2, [r3, #8]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800937c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	22ff      	movs	r2, #255	; 0xff
 8009384:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2201      	movs	r2, #1
 800938a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2200      	movs	r2, #0
 8009390:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3724      	adds	r7, #36	; 0x24
 8009398:	46bd      	mov	sp, r7
 800939a:	bd90      	pop	{r4, r7, pc}

0800939c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80093a4:	2300      	movs	r3, #0
 80093a6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	68da      	ldr	r2, [r3, #12]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80093b6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80093b8:	f7fa ff08 	bl	80041cc <HAL_GetTick>
 80093bc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80093be:	e009      	b.n	80093d4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80093c0:	f7fa ff04 	bl	80041cc <HAL_GetTick>
 80093c4:	4602      	mov	r2, r0
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	1ad3      	subs	r3, r2, r3
 80093ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093ce:	d901      	bls.n	80093d4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80093d0:	2303      	movs	r3, #3
 80093d2:	e007      	b.n	80093e4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	f003 0320 	and.w	r3, r3, #32
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d0ee      	beq.n	80093c0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3710      	adds	r7, #16
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80093f4:	2300      	movs	r3, #0
 80093f6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009402:	2b00      	cmp	r3, #0
 8009404:	d119      	bne.n	800943a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800940e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009410:	f7fa fedc 	bl	80041cc <HAL_GetTick>
 8009414:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009416:	e009      	b.n	800942c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009418:	f7fa fed8 	bl	80041cc <HAL_GetTick>
 800941c:	4602      	mov	r2, r0
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	1ad3      	subs	r3, r2, r3
 8009422:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009426:	d901      	bls.n	800942c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009428:	2303      	movs	r3, #3
 800942a:	e007      	b.n	800943c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009436:	2b00      	cmp	r3, #0
 8009438:	d0ee      	beq.n	8009418 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009444:	b480      	push	{r7}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
 800944a:	4603      	mov	r3, r0
 800944c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800944e:	2300      	movs	r3, #0
 8009450:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8009452:	e005      	b.n	8009460 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	3301      	adds	r3, #1
 8009458:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800945a:	79fb      	ldrb	r3, [r7, #7]
 800945c:	3b0a      	subs	r3, #10
 800945e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8009460:	79fb      	ldrb	r3, [r7, #7]
 8009462:	2b09      	cmp	r3, #9
 8009464:	d8f6      	bhi.n	8009454 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	b2db      	uxtb	r3, r3
 800946a:	011b      	lsls	r3, r3, #4
 800946c:	b2da      	uxtb	r2, r3
 800946e:	79fb      	ldrb	r3, [r7, #7]
 8009470:	4313      	orrs	r3, r2
 8009472:	b2db      	uxtb	r3, r3
}
 8009474:	4618      	mov	r0, r3
 8009476:	3714      	adds	r7, #20
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009480:	b480      	push	{r7}
 8009482:	b087      	sub	sp, #28
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800948c:	2300      	movs	r3, #0
 800948e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	7f1b      	ldrb	r3, [r3, #28]
 8009494:	2b01      	cmp	r3, #1
 8009496:	d101      	bne.n	800949c <HAL_RTCEx_SetTimeStamp+0x1c>
 8009498:	2302      	movs	r3, #2
 800949a:	e03e      	b.n	800951a <HAL_RTCEx_SetTimeStamp+0x9a>
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2201      	movs	r2, #1
 80094a0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2202      	movs	r2, #2
 80094a6:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	689a      	ldr	r2, [r3, #8]
 80094ae:	4b1e      	ldr	r3, [pc, #120]	; (8009528 <HAL_RTCEx_SetTimeStamp+0xa8>)
 80094b0:	4013      	ands	r3, r2
 80094b2:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80094b4:	697a      	ldr	r2, [r7, #20]
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	22ca      	movs	r2, #202	; 0xca
 80094c2:	625a      	str	r2, [r3, #36]	; 0x24
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2253      	movs	r2, #83	; 0x53
 80094ca:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f022 0206 	bic.w	r2, r2, #6
 80094da:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	430a      	orrs	r2, r1
 80094ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	697a      	ldr	r2, [r7, #20]
 80094f2:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	689a      	ldr	r2, [r3, #8]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009502:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	22ff      	movs	r2, #255	; 0xff
 800950a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2201      	movs	r2, #1
 8009510:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	371c      	adds	r7, #28
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop
 8009528:	fffff7f7 	.word	0xfffff7f7

0800952c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b088      	sub	sp, #32
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8009534:	2300      	movs	r3, #0
 8009536:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8009538:	2300      	movs	r3, #0
 800953a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800953c:	2300      	movs	r3, #0
 800953e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d101      	bne.n	800954a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	e156      	b.n	80097f8 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009550:	b2db      	uxtb	r3, r3
 8009552:	2b00      	cmp	r3, #0
 8009554:	d106      	bne.n	8009564 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f7fa fcc0 	bl	8003ee4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2202      	movs	r2, #2
 8009568:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f95b 	bl	8009828 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	2b02      	cmp	r3, #2
 8009578:	d00c      	beq.n	8009594 <HAL_SAI_Init+0x68>
 800957a:	2b02      	cmp	r3, #2
 800957c:	d80d      	bhi.n	800959a <HAL_SAI_Init+0x6e>
 800957e:	2b00      	cmp	r3, #0
 8009580:	d002      	beq.n	8009588 <HAL_SAI_Init+0x5c>
 8009582:	2b01      	cmp	r3, #1
 8009584:	d003      	beq.n	800958e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8009586:	e008      	b.n	800959a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8009588:	2300      	movs	r3, #0
 800958a:	61fb      	str	r3, [r7, #28]
      break;
 800958c:	e006      	b.n	800959c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800958e:	2310      	movs	r3, #16
 8009590:	61fb      	str	r3, [r7, #28]
      break;
 8009592:	e003      	b.n	800959c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009594:	2320      	movs	r3, #32
 8009596:	61fb      	str	r3, [r7, #28]
      break;
 8009598:	e000      	b.n	800959c <HAL_SAI_Init+0x70>
      break;
 800959a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	2b03      	cmp	r3, #3
 80095a2:	d81e      	bhi.n	80095e2 <HAL_SAI_Init+0xb6>
 80095a4:	a201      	add	r2, pc, #4	; (adr r2, 80095ac <HAL_SAI_Init+0x80>)
 80095a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095aa:	bf00      	nop
 80095ac:	080095bd 	.word	0x080095bd
 80095b0:	080095c3 	.word	0x080095c3
 80095b4:	080095cb 	.word	0x080095cb
 80095b8:	080095d3 	.word	0x080095d3
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 80095bc:	2300      	movs	r3, #0
 80095be:	617b      	str	r3, [r7, #20]
    }
    break;
 80095c0:	e010      	b.n	80095e4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80095c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095c6:	617b      	str	r3, [r7, #20]
    }
    break;
 80095c8:	e00c      	b.n	80095e4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80095ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095ce:	617b      	str	r3, [r7, #20]
    }
    break;
 80095d0:	e008      	b.n	80095e4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80095d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095d6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	f043 0301 	orr.w	r3, r3, #1
 80095de:	61fb      	str	r3, [r7, #28]
    }
    break;
 80095e0:	e000      	b.n	80095e4 <HAL_SAI_Init+0xb8>
    default:
      break;
 80095e2:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a85      	ldr	r2, [pc, #532]	; (8009800 <HAL_SAI_Init+0x2d4>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d004      	beq.n	80095f8 <HAL_SAI_Init+0xcc>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a84      	ldr	r2, [pc, #528]	; (8009804 <HAL_SAI_Init+0x2d8>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d103      	bne.n	8009600 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80095f8:	4a83      	ldr	r2, [pc, #524]	; (8009808 <HAL_SAI_Init+0x2dc>)
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	6013      	str	r3, [r2, #0]
 80095fe:	e002      	b.n	8009606 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009600:	4a82      	ldr	r2, [pc, #520]	; (800980c <HAL_SAI_Init+0x2e0>)
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	69db      	ldr	r3, [r3, #28]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d04c      	beq.n	80096a8 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800960e:	2300      	movs	r3, #0
 8009610:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a7a      	ldr	r2, [pc, #488]	; (8009800 <HAL_SAI_Init+0x2d4>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d004      	beq.n	8009626 <HAL_SAI_Init+0xfa>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a78      	ldr	r2, [pc, #480]	; (8009804 <HAL_SAI_Init+0x2d8>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d104      	bne.n	8009630 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009626:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800962a:	f7ff fa63 	bl	8008af4 <HAL_RCCEx_GetPeriphCLKFreq>
 800962e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a76      	ldr	r2, [pc, #472]	; (8009810 <HAL_SAI_Init+0x2e4>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d004      	beq.n	8009644 <HAL_SAI_Init+0x118>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a75      	ldr	r2, [pc, #468]	; (8009814 <HAL_SAI_Init+0x2e8>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d104      	bne.n	800964e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009644:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009648:	f7ff fa54 	bl	8008af4 <HAL_RCCEx_GetPeriphCLKFreq>
 800964c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800964e:	693a      	ldr	r2, [r7, #16]
 8009650:	4613      	mov	r3, r2
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	4413      	add	r3, r2
 8009656:	005b      	lsls	r3, r3, #1
 8009658:	461a      	mov	r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	69db      	ldr	r3, [r3, #28]
 800965e:	025b      	lsls	r3, r3, #9
 8009660:	fbb2 f3f3 	udiv	r3, r2, r3
 8009664:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	4a6b      	ldr	r2, [pc, #428]	; (8009818 <HAL_SAI_Init+0x2ec>)
 800966a:	fba2 2303 	umull	r2, r3, r2, r3
 800966e:	08da      	lsrs	r2, r3, #3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8009674:	68f9      	ldr	r1, [r7, #12]
 8009676:	4b68      	ldr	r3, [pc, #416]	; (8009818 <HAL_SAI_Init+0x2ec>)
 8009678:	fba3 2301 	umull	r2, r3, r3, r1
 800967c:	08da      	lsrs	r2, r3, #3
 800967e:	4613      	mov	r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	4413      	add	r3, r2
 8009684:	005b      	lsls	r3, r3, #1
 8009686:	1aca      	subs	r2, r1, r3
 8009688:	2a08      	cmp	r2, #8
 800968a:	d904      	bls.n	8009696 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6a1b      	ldr	r3, [r3, #32]
 8009690:	1c5a      	adds	r2, r3, #1
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800969a:	2b04      	cmp	r3, #4
 800969c:	d104      	bne.n	80096a8 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a1b      	ldr	r3, [r3, #32]
 80096a2:	085a      	lsrs	r2, r3, #1
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d003      	beq.n	80096b8 <HAL_SAI_Init+0x18c>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d109      	bne.n	80096cc <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d101      	bne.n	80096c4 <HAL_SAI_Init+0x198>
 80096c0:	2300      	movs	r3, #0
 80096c2:	e001      	b.n	80096c8 <HAL_SAI_Init+0x19c>
 80096c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096c8:	61bb      	str	r3, [r7, #24]
 80096ca:	e008      	b.n	80096de <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d102      	bne.n	80096da <HAL_SAI_Init+0x1ae>
 80096d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096d8:	e000      	b.n	80096dc <HAL_SAI_Init+0x1b0>
 80096da:	2300      	movs	r3, #0
 80096dc:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	6819      	ldr	r1, [r3, #0]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	4b4c      	ldr	r3, [pc, #304]	; (800981c <HAL_SAI_Init+0x2f0>)
 80096ea:	400b      	ands	r3, r1
 80096ec:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	6819      	ldr	r1, [r3, #0]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	685a      	ldr	r2, [r3, #4]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009702:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009708:	431a      	orrs	r2, r3
 800970a:	69bb      	ldr	r3, [r7, #24]
 800970c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8009716:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	691b      	ldr	r3, [r3, #16]
 800971c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009722:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6a1b      	ldr	r3, [r3, #32]
 8009728:	051b      	lsls	r3, r3, #20
 800972a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	430a      	orrs	r2, r1
 8009732:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	6859      	ldr	r1, [r3, #4]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	4b38      	ldr	r3, [pc, #224]	; (8009820 <HAL_SAI_Init+0x2f4>)
 8009740:	400b      	ands	r3, r1
 8009742:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	6859      	ldr	r1, [r3, #4]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	699a      	ldr	r2, [r3, #24]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009752:	431a      	orrs	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009758:	431a      	orrs	r2, r3
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	430a      	orrs	r2, r1
 8009760:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	6899      	ldr	r1, [r3, #8]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	4b2d      	ldr	r3, [pc, #180]	; (8009824 <HAL_SAI_Init+0x2f8>)
 800976e:	400b      	ands	r3, r1
 8009770:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	6899      	ldr	r1, [r3, #8]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009782:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8009788:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800978e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009794:	3b01      	subs	r3, #1
 8009796:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009798:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	430a      	orrs	r2, r1
 80097a0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	68d9      	ldr	r1, [r3, #12]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	f24f 0320 	movw	r3, #61472	; 0xf020
 80097b0:	400b      	ands	r3, r1
 80097b2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	68d9      	ldr	r1, [r3, #12]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097c2:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097c8:	041b      	lsls	r3, r3, #16
 80097ca:	431a      	orrs	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097d0:	3b01      	subs	r3, #1
 80097d2:	021b      	lsls	r3, r3, #8
 80097d4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	430a      	orrs	r2, r1
 80097dc:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2201      	movs	r2, #1
 80097ea:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3720      	adds	r7, #32
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	40015804 	.word	0x40015804
 8009804:	40015824 	.word	0x40015824
 8009808:	40015800 	.word	0x40015800
 800980c:	40015c00 	.word	0x40015c00
 8009810:	40015c04 	.word	0x40015c04
 8009814:	40015c24 	.word	0x40015c24
 8009818:	cccccccd 	.word	0xcccccccd
 800981c:	ff05c010 	.word	0xff05c010
 8009820:	ffff1ff0 	.word	0xffff1ff0
 8009824:	fff88000 	.word	0xfff88000

08009828 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8009830:	4b17      	ldr	r3, [pc, #92]	; (8009890 <SAI_Disable+0x68>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a17      	ldr	r2, [pc, #92]	; (8009894 <SAI_Disable+0x6c>)
 8009836:	fba2 2303 	umull	r2, r3, r2, r3
 800983a:	0b1b      	lsrs	r3, r3, #12
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009840:	2300      	movs	r3, #0
 8009842:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009852:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	1e5a      	subs	r2, r3, #1
 8009858:	60fa      	str	r2, [r7, #12]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d10a      	bne.n	8009874 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009864:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800986e:	2303      	movs	r3, #3
 8009870:	72fb      	strb	r3, [r7, #11]
      break;
 8009872:	e006      	b.n	8009882 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1e8      	bne.n	8009854 <SAI_Disable+0x2c>

  return status;
 8009882:	7afb      	ldrb	r3, [r7, #11]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3714      	adds	r7, #20
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr
 8009890:	20000000 	.word	0x20000000
 8009894:	95cbec1b 	.word	0x95cbec1b

08009898 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d101      	bne.n	80098aa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	e022      	b.n	80098f0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d105      	bne.n	80098c2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f7f9 fff1 	bl	80038a4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2203      	movs	r2, #3
 80098c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 f814 	bl	80098f8 <HAL_SD_InitCard>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d001      	beq.n	80098da <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	e00a      	b.n	80098f0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80098ee:	2300      	movs	r3, #0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80098f8:	b5b0      	push	{r4, r5, r7, lr}
 80098fa:	b08e      	sub	sp, #56	; 0x38
 80098fc:	af04      	add	r7, sp, #16
 80098fe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009900:	2300      	movs	r3, #0
 8009902:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8009904:	2300      	movs	r3, #0
 8009906:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009908:	2300      	movs	r3, #0
 800990a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800990c:	2300      	movs	r3, #0
 800990e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009910:	2300      	movs	r3, #0
 8009912:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8009914:	2376      	movs	r3, #118	; 0x76
 8009916:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681d      	ldr	r5, [r3, #0]
 800991c:	466c      	mov	r4, sp
 800991e:	f107 0314 	add.w	r3, r7, #20
 8009922:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009926:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800992a:	f107 0308 	add.w	r3, r7, #8
 800992e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009930:	4628      	mov	r0, r5
 8009932:	f002 fefd 	bl	800c730 <SDMMC_Init>
 8009936:	4603      	mov	r3, r0
 8009938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800993c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009940:	2b00      	cmp	r3, #0
 8009942:	d001      	beq.n	8009948 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e056      	b.n	80099f6 <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	685a      	ldr	r2, [r3, #4]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009956:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4618      	mov	r0, r3
 800995e:	f002 ff31 	bl	800c7c4 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	685a      	ldr	r2, [r3, #4]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009970:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 ff00 	bl	800a778 <SD_PowerON>
 8009978:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d00b      	beq.n	8009998 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800998c:	6a3b      	ldr	r3, [r7, #32]
 800998e:	431a      	orrs	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009994:	2301      	movs	r3, #1
 8009996:	e02e      	b.n	80099f6 <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fe21 	bl	800a5e0 <SD_InitCard>
 800999e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80099a0:	6a3b      	ldr	r3, [r7, #32]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00b      	beq.n	80099be <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2201      	movs	r2, #1
 80099aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099b2:	6a3b      	ldr	r3, [r7, #32]
 80099b4:	431a      	orrs	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80099ba:	2301      	movs	r3, #1
 80099bc:	e01b      	b.n	80099f6 <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80099c6:	4618      	mov	r0, r3
 80099c8:	f002 ff90 	bl	800c8ec <SDMMC_CmdBlockLength>
 80099cc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80099ce:	6a3b      	ldr	r3, [r7, #32]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00f      	beq.n	80099f4 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a09      	ldr	r2, [pc, #36]	; (8009a00 <HAL_SD_InitCard+0x108>)
 80099da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099e0:	6a3b      	ldr	r3, [r7, #32]
 80099e2:	431a      	orrs	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	e000      	b.n	80099f6 <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 80099f4:	2300      	movs	r3, #0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3728      	adds	r7, #40	; 0x28
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bdb0      	pop	{r4, r5, r7, pc}
 80099fe:	bf00      	nop
 8009a00:	004005ff 	.word	0x004005ff

08009a04 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b092      	sub	sp, #72	; 0x48
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	607a      	str	r2, [r7, #4]
 8009a10:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009a12:	f7fa fbdb 	bl	80041cc <HAL_GetTick>
 8009a16:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d107      	bne.n	8009a36 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	e1bd      	b.n	8009db2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	f040 81b0 	bne.w	8009da4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2200      	movs	r2, #0
 8009a48:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009a4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	441a      	add	r2, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d907      	bls.n	8009a68 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	e1a4      	b.n	8009db2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2203      	movs	r2, #3
 8009a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2200      	movs	r2, #0
 8009a76:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d002      	beq.n	8009a86 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8009a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a82:	025b      	lsls	r3, r3, #9
 8009a84:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a8a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	025b      	lsls	r3, r3, #9
 8009a90:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009a92:	2390      	movs	r3, #144	; 0x90
 8009a94:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009a96:	2302      	movs	r3, #2
 8009a98:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f107 0214 	add.w	r2, r7, #20
 8009aaa:	4611      	mov	r1, r2
 8009aac:	4618      	mov	r0, r3
 8009aae:	f002 fef1 	bl	800c894 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d90a      	bls.n	8009ace <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2202      	movs	r2, #2
 8009abc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f002 ff55 	bl	800c974 <SDMMC_CmdReadMultiBlock>
 8009aca:	6478      	str	r0, [r7, #68]	; 0x44
 8009acc:	e009      	b.n	8009ae2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ada:	4618      	mov	r0, r3
 8009adc:	f002 ff28 	bl	800c930 <SDMMC_CmdReadSingleBlock>
 8009ae0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d012      	beq.n	8009b0e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a7a      	ldr	r2, [pc, #488]	; (8009cd8 <HAL_SD_ReadBlocks+0x2d4>)
 8009aee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009af6:	431a      	orrs	r2, r3
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2200      	movs	r2, #0
 8009b08:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e151      	b.n	8009db2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009b12:	e061      	b.n	8009bd8 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d03c      	beq.n	8009b9c <HAL_SD_ReadBlocks+0x198>
 8009b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d039      	beq.n	8009b9c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8009b28:	2300      	movs	r3, #0
 8009b2a:	643b      	str	r3, [r7, #64]	; 0x40
 8009b2c:	e033      	b.n	8009b96 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4618      	mov	r0, r3
 8009b34:	f002 fe28 	bl	800c788 <SDMMC_ReadFIFO>
 8009b38:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b3c:	b2da      	uxtb	r2, r3
 8009b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b40:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b44:	3301      	adds	r3, #1
 8009b46:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b50:	0a1b      	lsrs	r3, r3, #8
 8009b52:	b2da      	uxtb	r2, r3
 8009b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b56:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b60:	3b01      	subs	r3, #1
 8009b62:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b66:	0c1b      	lsrs	r3, r3, #16
 8009b68:	b2da      	uxtb	r2, r3
 8009b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b6c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b70:	3301      	adds	r3, #1
 8009b72:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b76:	3b01      	subs	r3, #1
 8009b78:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7c:	0e1b      	lsrs	r3, r3, #24
 8009b7e:	b2da      	uxtb	r2, r3
 8009b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b82:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b86:	3301      	adds	r3, #1
 8009b88:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8009b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b92:	3301      	adds	r3, #1
 8009b94:	643b      	str	r3, [r7, #64]	; 0x40
 8009b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b98:	2b07      	cmp	r3, #7
 8009b9a:	d9c8      	bls.n	8009b2e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009b9c:	f7fa fb16 	bl	80041cc <HAL_GetTick>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba4:	1ad3      	subs	r3, r2, r3
 8009ba6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d902      	bls.n	8009bb2 <HAL_SD_ReadBlocks+0x1ae>
 8009bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d112      	bne.n	8009bd8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a48      	ldr	r2, [pc, #288]	; (8009cd8 <HAL_SD_ReadBlocks+0x2d4>)
 8009bb8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bbe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	e0ec      	b.n	8009db2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bde:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d096      	beq.n	8009b14 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d022      	beq.n	8009c3a <HAL_SD_ReadBlocks+0x236>
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d91f      	bls.n	8009c3a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bfe:	2b03      	cmp	r3, #3
 8009c00:	d01b      	beq.n	8009c3a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4618      	mov	r0, r3
 8009c08:	f002 ff1a 	bl	800ca40 <SDMMC_CmdStopTransfer>
 8009c0c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d012      	beq.n	8009c3a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a2f      	ldr	r2, [pc, #188]	; (8009cd8 <HAL_SD_ReadBlocks+0x2d4>)
 8009c1a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c22:	431a      	orrs	r2, r3
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2200      	movs	r2, #0
 8009c34:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009c36:	2301      	movs	r3, #1
 8009c38:	e0bb      	b.n	8009db2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c40:	f003 0308 	and.w	r3, r3, #8
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d012      	beq.n	8009c6e <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a22      	ldr	r2, [pc, #136]	; (8009cd8 <HAL_SD_ReadBlocks+0x2d4>)
 8009c4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c54:	f043 0208 	orr.w	r2, r3, #8
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2200      	movs	r2, #0
 8009c68:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e0a1      	b.n	8009db2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c74:	f003 0302 	and.w	r3, r3, #2
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d012      	beq.n	8009ca2 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a15      	ldr	r2, [pc, #84]	; (8009cd8 <HAL_SD_ReadBlocks+0x2d4>)
 8009c82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c88:	f043 0202 	orr.w	r2, r3, #2
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e087      	b.n	8009db2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ca8:	f003 0320 	and.w	r3, r3, #32
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d064      	beq.n	8009d7a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a08      	ldr	r2, [pc, #32]	; (8009cd8 <HAL_SD_ReadBlocks+0x2d4>)
 8009cb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cbc:	f043 0220 	orr.w	r2, r3, #32
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e06d      	b.n	8009db2 <HAL_SD_ReadBlocks+0x3ae>
 8009cd6:	bf00      	nop
 8009cd8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f002 fd51 	bl	800c788 <SDMMC_ReadFIFO>
 8009ce6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8009ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cea:	b2da      	uxtb	r2, r3
 8009cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cee:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfe:	0a1b      	lsrs	r3, r3, #8
 8009d00:	b2da      	uxtb	r2, r3
 8009d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d04:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d08:	3301      	adds	r3, #1
 8009d0a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d0e:	3b01      	subs	r3, #1
 8009d10:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d14:	0c1b      	lsrs	r3, r3, #16
 8009d16:	b2da      	uxtb	r2, r3
 8009d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d1a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d1e:	3301      	adds	r3, #1
 8009d20:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d24:	3b01      	subs	r3, #1
 8009d26:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d2a:	0e1b      	lsrs	r3, r3, #24
 8009d2c:	b2da      	uxtb	r2, r3
 8009d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d30:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d34:	3301      	adds	r3, #1
 8009d36:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d3a:	3b01      	subs	r3, #1
 8009d3c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009d3e:	f7fa fa45 	bl	80041cc <HAL_GetTick>
 8009d42:	4602      	mov	r2, r0
 8009d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d902      	bls.n	8009d54 <HAL_SD_ReadBlocks+0x350>
 8009d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d112      	bne.n	8009d7a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a18      	ldr	r2, [pc, #96]	; (8009dbc <HAL_SD_ReadBlocks+0x3b8>)
 8009d5a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2200      	movs	r2, #0
 8009d74:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e01b      	b.n	8009db2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d002      	beq.n	8009d8e <HAL_SD_ReadBlocks+0x38a>
 8009d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d1a6      	bne.n	8009cdc <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f240 523a 	movw	r2, #1338	; 0x53a
 8009d96:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009da0:	2300      	movs	r3, #0
 8009da2:	e006      	b.n	8009db2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009db0:	2301      	movs	r3, #1
  }
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3748      	adds	r7, #72	; 0x48
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	004005ff 	.word	0x004005ff

08009dc0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b092      	sub	sp, #72	; 0x48
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
 8009dcc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009dce:	f7fa f9fd 	bl	80041cc <HAL_GetTick>
 8009dd2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d107      	bne.n	8009df2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009dee:	2301      	movs	r3, #1
 8009df0:	e165      	b.n	800a0be <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	f040 8158 	bne.w	800a0b0 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2200      	movs	r2, #0
 8009e04:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009e06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	441a      	add	r2, r3
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d907      	bls.n	8009e24 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e18:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	e14c      	b.n	800a0be <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2203      	movs	r2, #3
 8009e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2200      	movs	r2, #0
 8009e32:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d002      	beq.n	8009e42 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e3e:	025b      	lsls	r3, r3, #9
 8009e40:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e46:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	025b      	lsls	r3, r3, #9
 8009e4c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009e4e:	2390      	movs	r3, #144	; 0x90
 8009e50:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009e52:	2300      	movs	r3, #0
 8009e54:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009e56:	2300      	movs	r3, #0
 8009e58:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f107 0218 	add.w	r2, r7, #24
 8009e66:	4611      	mov	r1, r2
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f002 fd13 	bl	800c894 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d90a      	bls.n	8009e8a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2220      	movs	r2, #32
 8009e78:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e80:	4618      	mov	r0, r3
 8009e82:	f002 fdbb 	bl	800c9fc <SDMMC_CmdWriteMultiBlock>
 8009e86:	6478      	str	r0, [r7, #68]	; 0x44
 8009e88:	e009      	b.n	8009e9e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2210      	movs	r2, #16
 8009e8e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e96:	4618      	mov	r0, r3
 8009e98:	f002 fd8e 	bl	800c9b8 <SDMMC_CmdWriteSingleBlock>
 8009e9c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d012      	beq.n	8009eca <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a87      	ldr	r2, [pc, #540]	; (800a0c8 <HAL_SD_WriteBlocks+0x308>)
 8009eaa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009eb2:	431a      	orrs	r2, r3
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e0f9      	b.n	800a0be <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009eca:	69fb      	ldr	r3, [r7, #28]
 8009ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009ece:	e065      	b.n	8009f9c <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d040      	beq.n	8009f60 <HAL_SD_WriteBlocks+0x1a0>
 8009ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d03d      	beq.n	8009f60 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	643b      	str	r3, [r7, #64]	; 0x40
 8009ee8:	e037      	b.n	8009f5a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8009eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ef8:	3b01      	subs	r3, #1
 8009efa:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	021a      	lsls	r2, r3, #8
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f10:	3b01      	subs	r3, #1
 8009f12:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	041a      	lsls	r2, r3, #16
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f22:	3301      	adds	r3, #1
 8009f24:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f28:	3b01      	subs	r3, #1
 8009f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	061a      	lsls	r2, r3, #24
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	4313      	orrs	r3, r2
 8009f36:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f40:	3b01      	subs	r3, #1
 8009f42:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f107 0214 	add.w	r2, r7, #20
 8009f4c:	4611      	mov	r1, r2
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f002 fc27 	bl	800c7a2 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f56:	3301      	adds	r3, #1
 8009f58:	643b      	str	r3, [r7, #64]	; 0x40
 8009f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f5c:	2b07      	cmp	r3, #7
 8009f5e:	d9c4      	bls.n	8009eea <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009f60:	f7fa f934 	bl	80041cc <HAL_GetTick>
 8009f64:	4602      	mov	r2, r0
 8009f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f68:	1ad3      	subs	r3, r2, r3
 8009f6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d902      	bls.n	8009f76 <HAL_SD_WriteBlocks+0x1b6>
 8009f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d112      	bne.n	8009f9c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a53      	ldr	r2, [pc, #332]	; (800a0c8 <HAL_SD_WriteBlocks+0x308>)
 8009f7c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f84:	431a      	orrs	r2, r3
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2200      	movs	r2, #0
 8009f96:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009f98:	2303      	movs	r3, #3
 8009f9a:	e090      	b.n	800a0be <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fa2:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d092      	beq.n	8009ed0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d022      	beq.n	8009ffe <HAL_SD_WriteBlocks+0x23e>
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d91f      	bls.n	8009ffe <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fc2:	2b03      	cmp	r3, #3
 8009fc4:	d01b      	beq.n	8009ffe <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f002 fd38 	bl	800ca40 <SDMMC_CmdStopTransfer>
 8009fd0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d012      	beq.n	8009ffe <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a3a      	ldr	r2, [pc, #232]	; (800a0c8 <HAL_SD_WriteBlocks+0x308>)
 8009fde:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fe6:	431a      	orrs	r2, r3
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e05f      	b.n	800a0be <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a004:	f003 0308 	and.w	r3, r3, #8
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d012      	beq.n	800a032 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a2d      	ldr	r2, [pc, #180]	; (800a0c8 <HAL_SD_WriteBlocks+0x308>)
 800a012:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a018:	f043 0208 	orr.w	r2, r3, #8
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2200      	movs	r2, #0
 800a02c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	e045      	b.n	800a0be <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a038:	f003 0302 	and.w	r3, r3, #2
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d012      	beq.n	800a066 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a20      	ldr	r2, [pc, #128]	; (800a0c8 <HAL_SD_WriteBlocks+0x308>)
 800a046:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a04c:	f043 0202 	orr.w	r2, r3, #2
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2200      	movs	r2, #0
 800a060:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	e02b      	b.n	800a0be <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a06c:	f003 0310 	and.w	r3, r3, #16
 800a070:	2b00      	cmp	r3, #0
 800a072:	d012      	beq.n	800a09a <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a13      	ldr	r2, [pc, #76]	; (800a0c8 <HAL_SD_WriteBlocks+0x308>)
 800a07a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a080:	f043 0210 	orr.w	r2, r3, #16
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2200      	movs	r2, #0
 800a094:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	e011      	b.n	800a0be <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f240 523a 	movw	r2, #1338	; 0x53a
 800a0a2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	e006      	b.n	800a0be <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
  }
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3748      	adds	r7, #72	; 0x48
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	004005ff 	.word	0x004005ff

0800a0cc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0da:	0f9b      	lsrs	r3, r3, #30
 800a0dc:	b2da      	uxtb	r2, r3
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0e6:	0e9b      	lsrs	r3, r3, #26
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	f003 030f 	and.w	r3, r3, #15
 800a0ee:	b2da      	uxtb	r2, r3
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0f8:	0e1b      	lsrs	r3, r3, #24
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	f003 0303 	and.w	r3, r3, #3
 800a100:	b2da      	uxtb	r2, r3
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a10a:	0c1b      	lsrs	r3, r3, #16
 800a10c:	b2da      	uxtb	r2, r3
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a116:	0a1b      	lsrs	r3, r3, #8
 800a118:	b2da      	uxtb	r2, r3
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a122:	b2da      	uxtb	r2, r3
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a12c:	0d1b      	lsrs	r3, r3, #20
 800a12e:	b29a      	uxth	r2, r3
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a138:	0c1b      	lsrs	r3, r3, #16
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	f003 030f 	and.w	r3, r3, #15
 800a140:	b2da      	uxtb	r2, r3
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a14a:	0bdb      	lsrs	r3, r3, #15
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	f003 0301 	and.w	r3, r3, #1
 800a152:	b2da      	uxtb	r2, r3
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a15c:	0b9b      	lsrs	r3, r3, #14
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	f003 0301 	and.w	r3, r3, #1
 800a164:	b2da      	uxtb	r2, r3
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a16e:	0b5b      	lsrs	r3, r3, #13
 800a170:	b2db      	uxtb	r3, r3
 800a172:	f003 0301 	and.w	r3, r3, #1
 800a176:	b2da      	uxtb	r2, r3
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a180:	0b1b      	lsrs	r3, r3, #12
 800a182:	b2db      	uxtb	r3, r3
 800a184:	f003 0301 	and.w	r3, r3, #1
 800a188:	b2da      	uxtb	r2, r3
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	2200      	movs	r2, #0
 800a192:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d163      	bne.n	800a264 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1a0:	009a      	lsls	r2, r3, #2
 800a1a2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a1a6:	4013      	ands	r3, r2
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a1ac:	0f92      	lsrs	r2, r2, #30
 800a1ae:	431a      	orrs	r2, r3
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1b8:	0edb      	lsrs	r3, r3, #27
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	f003 0307 	and.w	r3, r3, #7
 800a1c0:	b2da      	uxtb	r2, r3
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1ca:	0e1b      	lsrs	r3, r3, #24
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	f003 0307 	and.w	r3, r3, #7
 800a1d2:	b2da      	uxtb	r2, r3
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1dc:	0d5b      	lsrs	r3, r3, #21
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	f003 0307 	and.w	r3, r3, #7
 800a1e4:	b2da      	uxtb	r2, r3
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1ee:	0c9b      	lsrs	r3, r3, #18
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	f003 0307 	and.w	r3, r3, #7
 800a1f6:	b2da      	uxtb	r2, r3
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a200:	0bdb      	lsrs	r3, r3, #15
 800a202:	b2db      	uxtb	r3, r3
 800a204:	f003 0307 	and.w	r3, r3, #7
 800a208:	b2da      	uxtb	r2, r3
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	691b      	ldr	r3, [r3, #16]
 800a212:	1c5a      	adds	r2, r3, #1
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	7e1b      	ldrb	r3, [r3, #24]
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	f003 0307 	and.w	r3, r3, #7
 800a222:	3302      	adds	r3, #2
 800a224:	2201      	movs	r2, #1
 800a226:	fa02 f303 	lsl.w	r3, r2, r3
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a22e:	fb02 f203 	mul.w	r2, r2, r3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	7a1b      	ldrb	r3, [r3, #8]
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	f003 030f 	and.w	r3, r3, #15
 800a240:	2201      	movs	r2, #1
 800a242:	409a      	lsls	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a250:	0a52      	lsrs	r2, r2, #9
 800a252:	fb02 f203 	mul.w	r2, r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a260:	661a      	str	r2, [r3, #96]	; 0x60
 800a262:	e031      	b.n	800a2c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d11d      	bne.n	800a2a8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a270:	041b      	lsls	r3, r3, #16
 800a272:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a27a:	0c1b      	lsrs	r3, r3, #16
 800a27c:	431a      	orrs	r2, r3
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	691b      	ldr	r3, [r3, #16]
 800a286:	3301      	adds	r3, #1
 800a288:	029a      	lsls	r2, r3, #10
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a29c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	661a      	str	r2, [r3, #96]	; 0x60
 800a2a6:	e00f      	b.n	800a2c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a58      	ldr	r2, [pc, #352]	; (800a410 <HAL_SD_GetCardCSD+0x344>)
 800a2ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e09d      	b.n	800a404 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2cc:	0b9b      	lsrs	r3, r3, #14
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	f003 0301 	and.w	r3, r3, #1
 800a2d4:	b2da      	uxtb	r2, r3
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2de:	09db      	lsrs	r3, r3, #7
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2e6:	b2da      	uxtb	r2, r3
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2f6:	b2da      	uxtb	r2, r3
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a300:	0fdb      	lsrs	r3, r3, #31
 800a302:	b2da      	uxtb	r2, r3
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a30c:	0f5b      	lsrs	r3, r3, #29
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	f003 0303 	and.w	r3, r3, #3
 800a314:	b2da      	uxtb	r2, r3
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a31e:	0e9b      	lsrs	r3, r3, #26
 800a320:	b2db      	uxtb	r3, r3
 800a322:	f003 0307 	and.w	r3, r3, #7
 800a326:	b2da      	uxtb	r2, r3
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a330:	0d9b      	lsrs	r3, r3, #22
 800a332:	b2db      	uxtb	r3, r3
 800a334:	f003 030f 	and.w	r3, r3, #15
 800a338:	b2da      	uxtb	r2, r3
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a342:	0d5b      	lsrs	r3, r3, #21
 800a344:	b2db      	uxtb	r3, r3
 800a346:	f003 0301 	and.w	r3, r3, #1
 800a34a:	b2da      	uxtb	r2, r3
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	2200      	movs	r2, #0
 800a356:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a35e:	0c1b      	lsrs	r3, r3, #16
 800a360:	b2db      	uxtb	r3, r3
 800a362:	f003 0301 	and.w	r3, r3, #1
 800a366:	b2da      	uxtb	r2, r3
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a372:	0bdb      	lsrs	r3, r3, #15
 800a374:	b2db      	uxtb	r3, r3
 800a376:	f003 0301 	and.w	r3, r3, #1
 800a37a:	b2da      	uxtb	r2, r3
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a386:	0b9b      	lsrs	r3, r3, #14
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	f003 0301 	and.w	r3, r3, #1
 800a38e:	b2da      	uxtb	r2, r3
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a39a:	0b5b      	lsrs	r3, r3, #13
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	f003 0301 	and.w	r3, r3, #1
 800a3a2:	b2da      	uxtb	r2, r3
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3ae:	0b1b      	lsrs	r3, r3, #12
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	f003 0301 	and.w	r3, r3, #1
 800a3b6:	b2da      	uxtb	r2, r3
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3c2:	0a9b      	lsrs	r3, r3, #10
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	f003 0303 	and.w	r3, r3, #3
 800a3ca:	b2da      	uxtb	r2, r3
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3d6:	0a1b      	lsrs	r3, r3, #8
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	f003 0303 	and.w	r3, r3, #3
 800a3de:	b2da      	uxtb	r2, r3
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3ea:	085b      	lsrs	r3, r3, #1
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3f2:	b2da      	uxtb	r2, r3
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a402:	2300      	movs	r3, #0
}
 800a404:	4618      	mov	r0, r3
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr
 800a410:	004005ff 	.word	0x004005ff

0800a414 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a46c:	b5b0      	push	{r4, r5, r7, lr}
 800a46e:	b08e      	sub	sp, #56	; 0x38
 800a470:	af04      	add	r7, sp, #16
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a476:	2300      	movs	r3, #0
 800a478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2203      	movs	r2, #3
 800a480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a488:	2b03      	cmp	r3, #3
 800a48a:	d02e      	beq.n	800a4ea <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a492:	d106      	bne.n	800a4a2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a498:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	639a      	str	r2, [r3, #56]	; 0x38
 800a4a0:	e029      	b.n	800a4f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4a8:	d10a      	bne.n	800a4c0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 fa1a 	bl	800a8e4 <SD_WideBus_Enable>
 800a4b0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4b6:	6a3b      	ldr	r3, [r7, #32]
 800a4b8:	431a      	orrs	r2, r3
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	639a      	str	r2, [r3, #56]	; 0x38
 800a4be:	e01a      	b.n	800a4f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d10a      	bne.n	800a4dc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 fa57 	bl	800a97a <SD_WideBus_Disable>
 800a4cc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4d2:	6a3b      	ldr	r3, [r7, #32]
 800a4d4:	431a      	orrs	r2, r3
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	639a      	str	r2, [r3, #56]	; 0x38
 800a4da:	e00c      	b.n	800a4f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	639a      	str	r2, [r3, #56]	; 0x38
 800a4e8:	e005      	b.n	800a4f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ee:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00b      	beq.n	800a516 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a26      	ldr	r2, [pc, #152]	; (800a59c <HAL_SD_ConfigWideBusOperation+0x130>)
 800a504:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2201      	movs	r2, #1
 800a50a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a50e:	2301      	movs	r3, #1
 800a510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a514:	e01f      	b.n	800a556 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	695b      	ldr	r3, [r3, #20]
 800a530:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	699b      	ldr	r3, [r3, #24]
 800a536:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681d      	ldr	r5, [r3, #0]
 800a53c:	466c      	mov	r4, sp
 800a53e:	f107 0314 	add.w	r3, r7, #20
 800a542:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a546:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a54a:	f107 0308 	add.w	r3, r7, #8
 800a54e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a550:	4628      	mov	r0, r5
 800a552:	f002 f8ed 	bl	800c730 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a55e:	4618      	mov	r0, r3
 800a560:	f002 f9c4 	bl	800c8ec <SDMMC_CmdBlockLength>
 800a564:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a566:	6a3b      	ldr	r3, [r7, #32]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00c      	beq.n	800a586 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a0a      	ldr	r2, [pc, #40]	; (800a59c <HAL_SD_ConfigWideBusOperation+0x130>)
 800a572:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a578:	6a3b      	ldr	r3, [r7, #32]
 800a57a:	431a      	orrs	r2, r3
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a580:	2301      	movs	r3, #1
 800a582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2201      	movs	r2, #1
 800a58a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800a58e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a592:	4618      	mov	r0, r3
 800a594:	3728      	adds	r7, #40	; 0x28
 800a596:	46bd      	mov	sp, r7
 800a598:	bdb0      	pop	{r4, r5, r7, pc}
 800a59a:	bf00      	nop
 800a59c:	004005ff 	.word	0x004005ff

0800a5a0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b086      	sub	sp, #24
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a5ac:	f107 030c 	add.w	r3, r7, #12
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 f96e 	bl	800a894 <SD_SendStatus>
 800a5b8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d005      	beq.n	800a5cc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	431a      	orrs	r2, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	0a5b      	lsrs	r3, r3, #9
 800a5d0:	f003 030f 	and.w	r3, r3, #15
 800a5d4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a5d6:	693b      	ldr	r3, [r7, #16]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3718      	adds	r7, #24
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a5e0:	b5b0      	push	{r4, r5, r7, lr}
 800a5e2:	b094      	sub	sp, #80	; 0x50
 800a5e4:	af04      	add	r7, sp, #16
 800a5e6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f002 f8f6 	bl	800c7e2 <SDMMC_GetPowerState>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d102      	bne.n	800a602 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a5fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a600:	e0b6      	b.n	800a770 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a606:	2b03      	cmp	r3, #3
 800a608:	d02f      	beq.n	800a66a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4618      	mov	r0, r3
 800a610:	f002 fb21 	bl	800cc56 <SDMMC_CmdSendCID>
 800a614:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d001      	beq.n	800a620 <SD_InitCard+0x40>
    {
      return errorstate;
 800a61c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a61e:	e0a7      	b.n	800a770 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2100      	movs	r1, #0
 800a626:	4618      	mov	r0, r3
 800a628:	f002 f921 	bl	800c86e <SDMMC_GetResponse>
 800a62c:	4602      	mov	r2, r0
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2104      	movs	r1, #4
 800a638:	4618      	mov	r0, r3
 800a63a:	f002 f918 	bl	800c86e <SDMMC_GetResponse>
 800a63e:	4602      	mov	r2, r0
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2108      	movs	r1, #8
 800a64a:	4618      	mov	r0, r3
 800a64c:	f002 f90f 	bl	800c86e <SDMMC_GetResponse>
 800a650:	4602      	mov	r2, r0
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	210c      	movs	r1, #12
 800a65c:	4618      	mov	r0, r3
 800a65e:	f002 f906 	bl	800c86e <SDMMC_GetResponse>
 800a662:	4602      	mov	r2, r0
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a66e:	2b03      	cmp	r3, #3
 800a670:	d00d      	beq.n	800a68e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f107 020e 	add.w	r2, r7, #14
 800a67a:	4611      	mov	r1, r2
 800a67c:	4618      	mov	r0, r3
 800a67e:	f002 fb27 	bl	800ccd0 <SDMMC_CmdSetRelAdd>
 800a682:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a686:	2b00      	cmp	r3, #0
 800a688:	d001      	beq.n	800a68e <SD_InitCard+0xae>
    {
      return errorstate;
 800a68a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a68c:	e070      	b.n	800a770 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a692:	2b03      	cmp	r3, #3
 800a694:	d036      	beq.n	800a704 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a696:	89fb      	ldrh	r3, [r7, #14]
 800a698:	461a      	mov	r2, r3
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6a6:	041b      	lsls	r3, r3, #16
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	4610      	mov	r0, r2
 800a6ac:	f002 faf1 	bl	800cc92 <SDMMC_CmdSendCSD>
 800a6b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d001      	beq.n	800a6bc <SD_InitCard+0xdc>
    {
      return errorstate;
 800a6b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ba:	e059      	b.n	800a770 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f002 f8d3 	bl	800c86e <SDMMC_GetResponse>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2104      	movs	r1, #4
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f002 f8ca 	bl	800c86e <SDMMC_GetResponse>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2108      	movs	r1, #8
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f002 f8c1 	bl	800c86e <SDMMC_GetResponse>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	210c      	movs	r1, #12
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f002 f8b8 	bl	800c86e <SDMMC_GetResponse>
 800a6fe:	4602      	mov	r2, r0
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2104      	movs	r1, #4
 800a70a:	4618      	mov	r0, r3
 800a70c:	f002 f8af 	bl	800c86e <SDMMC_GetResponse>
 800a710:	4603      	mov	r3, r0
 800a712:	0d1a      	lsrs	r2, r3, #20
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a718:	f107 0310 	add.w	r3, r7, #16
 800a71c:	4619      	mov	r1, r3
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f7ff fcd4 	bl	800a0cc <HAL_SD_GetCardCSD>
 800a724:	4603      	mov	r3, r0
 800a726:	2b00      	cmp	r3, #0
 800a728:	d002      	beq.n	800a730 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a72a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a72e:	e01f      	b.n	800a770 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6819      	ldr	r1, [r3, #0]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a738:	041b      	lsls	r3, r3, #16
 800a73a:	461a      	mov	r2, r3
 800a73c:	f04f 0300 	mov.w	r3, #0
 800a740:	4608      	mov	r0, r1
 800a742:	f002 f99f 	bl	800ca84 <SDMMC_CmdSelDesel>
 800a746:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d001      	beq.n	800a752 <SD_InitCard+0x172>
  {
    return errorstate;
 800a74e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a750:	e00e      	b.n	800a770 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681d      	ldr	r5, [r3, #0]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	466c      	mov	r4, sp
 800a75a:	f103 0210 	add.w	r2, r3, #16
 800a75e:	ca07      	ldmia	r2, {r0, r1, r2}
 800a760:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a764:	3304      	adds	r3, #4
 800a766:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a768:	4628      	mov	r0, r5
 800a76a:	f001 ffe1 	bl	800c730 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a76e:	2300      	movs	r3, #0
}
 800a770:	4618      	mov	r0, r3
 800a772:	3740      	adds	r7, #64	; 0x40
 800a774:	46bd      	mov	sp, r7
 800a776:	bdb0      	pop	{r4, r5, r7, pc}

0800a778 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b086      	sub	sp, #24
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a780:	2300      	movs	r3, #0
 800a782:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a784:	2300      	movs	r3, #0
 800a786:	617b      	str	r3, [r7, #20]
 800a788:	2300      	movs	r3, #0
 800a78a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4618      	mov	r0, r3
 800a792:	f002 f99a 	bl	800caca <SDMMC_CmdGoIdleState>
 800a796:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d001      	beq.n	800a7a2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	e072      	b.n	800a888 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f002 f9ad 	bl	800cb06 <SDMMC_CmdOperCond>
 800a7ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d00d      	beq.n	800a7d0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f002 f983 	bl	800caca <SDMMC_CmdGoIdleState>
 800a7c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d004      	beq.n	800a7d6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	e05b      	b.n	800a888 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d137      	bne.n	800a84e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	2100      	movs	r1, #0
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f002 f9ad 	bl	800cb44 <SDMMC_CmdAppCommand>
 800a7ea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d02d      	beq.n	800a84e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a7f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a7f6:	e047      	b.n	800a888 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	4618      	mov	r0, r3
 800a800:	f002 f9a0 	bl	800cb44 <SDMMC_CmdAppCommand>
 800a804:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d001      	beq.n	800a810 <SD_PowerON+0x98>
    {
      return errorstate;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	e03b      	b.n	800a888 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	491e      	ldr	r1, [pc, #120]	; (800a890 <SD_PowerON+0x118>)
 800a816:	4618      	mov	r0, r3
 800a818:	f002 f9b6 	bl	800cb88 <SDMMC_CmdAppOperCommand>
 800a81c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d002      	beq.n	800a82a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a824:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a828:	e02e      	b.n	800a888 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2100      	movs	r1, #0
 800a830:	4618      	mov	r0, r3
 800a832:	f002 f81c 	bl	800c86e <SDMMC_GetResponse>
 800a836:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	0fdb      	lsrs	r3, r3, #31
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d101      	bne.n	800a844 <SD_PowerON+0xcc>
 800a840:	2301      	movs	r3, #1
 800a842:	e000      	b.n	800a846 <SD_PowerON+0xce>
 800a844:	2300      	movs	r3, #0
 800a846:	613b      	str	r3, [r7, #16]

    count++;
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	3301      	adds	r3, #1
 800a84c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a854:	4293      	cmp	r3, r2
 800a856:	d802      	bhi.n	800a85e <SD_PowerON+0xe6>
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d0cc      	beq.n	800a7f8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a864:	4293      	cmp	r3, r2
 800a866:	d902      	bls.n	800a86e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a868:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a86c:	e00c      	b.n	800a888 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a874:	2b00      	cmp	r3, #0
 800a876:	d003      	beq.n	800a880 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2201      	movs	r2, #1
 800a87c:	645a      	str	r2, [r3, #68]	; 0x44
 800a87e:	e002      	b.n	800a886 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2200      	movs	r2, #0
 800a884:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3718      	adds	r7, #24
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	c1100000 	.word	0xc1100000

0800a894 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d102      	bne.n	800a8aa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a8a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a8a8:	e018      	b.n	800a8dc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681a      	ldr	r2, [r3, #0]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8b2:	041b      	lsls	r3, r3, #16
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	4610      	mov	r0, r2
 800a8b8:	f002 fa2b 	bl	800cd12 <SDMMC_CmdSendStatus>
 800a8bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d001      	beq.n	800a8c8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	e009      	b.n	800a8dc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2100      	movs	r1, #0
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f001 ffcd 	bl	800c86e <SDMMC_GetResponse>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a8da:	2300      	movs	r3, #0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b086      	sub	sp, #24
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	60fb      	str	r3, [r7, #12]
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	2100      	movs	r1, #0
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f001 ffb7 	bl	800c86e <SDMMC_GetResponse>
 800a900:	4603      	mov	r3, r0
 800a902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a906:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a90a:	d102      	bne.n	800a912 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a90c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a910:	e02f      	b.n	800a972 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a912:	f107 030c 	add.w	r3, r7, #12
 800a916:	4619      	mov	r1, r3
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 f879 	bl	800aa10 <SD_FindSCR>
 800a91e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d001      	beq.n	800a92a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	e023      	b.n	800a972 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a930:	2b00      	cmp	r3, #0
 800a932:	d01c      	beq.n	800a96e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a93c:	041b      	lsls	r3, r3, #16
 800a93e:	4619      	mov	r1, r3
 800a940:	4610      	mov	r0, r2
 800a942:	f002 f8ff 	bl	800cb44 <SDMMC_CmdAppCommand>
 800a946:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d001      	beq.n	800a952 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	e00f      	b.n	800a972 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2102      	movs	r1, #2
 800a958:	4618      	mov	r0, r3
 800a95a:	f002 f939 	bl	800cbd0 <SDMMC_CmdBusWidth>
 800a95e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d001      	beq.n	800a96a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	e003      	b.n	800a972 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a96a:	2300      	movs	r3, #0
 800a96c:	e001      	b.n	800a972 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a96e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a972:	4618      	mov	r0, r3
 800a974:	3718      	adds	r7, #24
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b086      	sub	sp, #24
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a982:	2300      	movs	r3, #0
 800a984:	60fb      	str	r3, [r7, #12]
 800a986:	2300      	movs	r3, #0
 800a988:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2100      	movs	r1, #0
 800a990:	4618      	mov	r0, r3
 800a992:	f001 ff6c 	bl	800c86e <SDMMC_GetResponse>
 800a996:	4603      	mov	r3, r0
 800a998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a99c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9a0:	d102      	bne.n	800a9a8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a9a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a9a6:	e02f      	b.n	800aa08 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a9a8:	f107 030c 	add.w	r3, r7, #12
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 f82e 	bl	800aa10 <SD_FindSCR>
 800a9b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d001      	beq.n	800a9c0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	e023      	b.n	800aa08 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d01c      	beq.n	800aa04 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9d2:	041b      	lsls	r3, r3, #16
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	4610      	mov	r0, r2
 800a9d8:	f002 f8b4 	bl	800cb44 <SDMMC_CmdAppCommand>
 800a9dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d001      	beq.n	800a9e8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	e00f      	b.n	800aa08 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2100      	movs	r1, #0
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f002 f8ee 	bl	800cbd0 <SDMMC_CmdBusWidth>
 800a9f4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d001      	beq.n	800aa00 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	e003      	b.n	800aa08 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800aa00:	2300      	movs	r3, #0
 800aa02:	e001      	b.n	800aa08 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aa04:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3718      	adds	r7, #24
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800aa10:	b590      	push	{r4, r7, lr}
 800aa12:	b08f      	sub	sp, #60	; 0x3c
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800aa1a:	f7f9 fbd7 	bl	80041cc <HAL_GetTick>
 800aa1e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800aa20:	2300      	movs	r3, #0
 800aa22:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800aa24:	2300      	movs	r3, #0
 800aa26:	60bb      	str	r3, [r7, #8]
 800aa28:	2300      	movs	r3, #0
 800aa2a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2108      	movs	r1, #8
 800aa36:	4618      	mov	r0, r3
 800aa38:	f001 ff58 	bl	800c8ec <SDMMC_CmdBlockLength>
 800aa3c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d001      	beq.n	800aa48 <SD_FindSCR+0x38>
  {
    return errorstate;
 800aa44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa46:	e0b2      	b.n	800abae <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa50:	041b      	lsls	r3, r3, #16
 800aa52:	4619      	mov	r1, r3
 800aa54:	4610      	mov	r0, r2
 800aa56:	f002 f875 	bl	800cb44 <SDMMC_CmdAppCommand>
 800aa5a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d001      	beq.n	800aa66 <SD_FindSCR+0x56>
  {
    return errorstate;
 800aa62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa64:	e0a3      	b.n	800abae <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aa66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa6a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800aa6c:	2308      	movs	r3, #8
 800aa6e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800aa70:	2330      	movs	r3, #48	; 0x30
 800aa72:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800aa74:	2302      	movs	r3, #2
 800aa76:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f107 0210 	add.w	r2, r7, #16
 800aa88:	4611      	mov	r1, r2
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f001 ff02 	bl	800c894 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4618      	mov	r0, r3
 800aa96:	f002 f8bd 	bl	800cc14 <SDMMC_CmdSendSCR>
 800aa9a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d02a      	beq.n	800aaf8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800aaa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa4:	e083      	b.n	800abae <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d00f      	beq.n	800aad4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6819      	ldr	r1, [r3, #0]
 800aab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	f107 0208 	add.w	r2, r7, #8
 800aac0:	18d4      	adds	r4, r2, r3
 800aac2:	4608      	mov	r0, r1
 800aac4:	f001 fe60 	bl	800c788 <SDMMC_ReadFIFO>
 800aac8:	4603      	mov	r3, r0
 800aaca:	6023      	str	r3, [r4, #0]
      index++;
 800aacc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aace:	3301      	adds	r3, #1
 800aad0:	637b      	str	r3, [r7, #52]	; 0x34
 800aad2:	e006      	b.n	800aae2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aada:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d012      	beq.n	800ab08 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800aae2:	f7f9 fb73 	bl	80041cc <HAL_GetTick>
 800aae6:	4602      	mov	r2, r0
 800aae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaea:	1ad3      	subs	r3, r2, r3
 800aaec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aaf0:	d102      	bne.n	800aaf8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800aaf2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aaf6:	e05a      	b.n	800abae <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aafe:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d0cf      	beq.n	800aaa6 <SD_FindSCR+0x96>
 800ab06:	e000      	b.n	800ab0a <SD_FindSCR+0xfa>
      break;
 800ab08:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab10:	f003 0308 	and.w	r3, r3, #8
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d005      	beq.n	800ab24 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	2208      	movs	r2, #8
 800ab1e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ab20:	2308      	movs	r3, #8
 800ab22:	e044      	b.n	800abae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab2a:	f003 0302 	and.w	r3, r3, #2
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d005      	beq.n	800ab3e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2202      	movs	r2, #2
 800ab38:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ab3a:	2302      	movs	r3, #2
 800ab3c:	e037      	b.n	800abae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab44:	f003 0320 	and.w	r3, r3, #32
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d005      	beq.n	800ab58 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2220      	movs	r2, #32
 800ab52:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ab54:	2320      	movs	r3, #32
 800ab56:	e02a      	b.n	800abae <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f240 523a 	movw	r2, #1338	; 0x53a
 800ab60:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	061a      	lsls	r2, r3, #24
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	021b      	lsls	r3, r3, #8
 800ab6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ab6e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	0a1b      	lsrs	r3, r3, #8
 800ab74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ab78:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	0e1b      	lsrs	r3, r3, #24
 800ab7e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ab80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab82:	601a      	str	r2, [r3, #0]
    scr++;
 800ab84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab86:	3304      	adds	r3, #4
 800ab88:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	061a      	lsls	r2, r3, #24
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	021b      	lsls	r3, r3, #8
 800ab92:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ab96:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	0a1b      	lsrs	r3, r3, #8
 800ab9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800aba0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	0e1b      	lsrs	r3, r3, #24
 800aba6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800aba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abaa:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800abac:	2300      	movs	r3, #0
}
 800abae:	4618      	mov	r0, r3
 800abb0:	373c      	adds	r7, #60	; 0x3c
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd90      	pop	{r4, r7, pc}

0800abb6 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b082      	sub	sp, #8
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
 800abbe:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d101      	bne.n	800abca <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800abc6:	2301      	movs	r3, #1
 800abc8:	e025      	b.n	800ac16 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d106      	bne.n	800abe4 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f7f9 f976 	bl	8003ed0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2202      	movs	r2, #2
 800abe8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	3304      	adds	r3, #4
 800abf4:	4619      	mov	r1, r3
 800abf6:	4610      	mov	r0, r2
 800abf8:	f001 fca8 	bl	800c54c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6818      	ldr	r0, [r3, #0]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	461a      	mov	r2, r3
 800ac06:	6839      	ldr	r1, [r7, #0]
 800ac08:	f001 fd12 	bl	800c630 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3708      	adds	r7, #8
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
	...

0800ac20 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d101      	bne.n	800ac32 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	e04c      	b.n	800accc <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d106      	bne.n	800ac4c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2200      	movs	r2, #0
 800ac42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f7f8 fe8e 	bl	8003968 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2202      	movs	r2, #2
 800ac50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f022 0203 	bic.w	r2, r2, #3
 800ac62:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	4b19      	ldr	r3, [pc, #100]	; (800acd4 <HAL_SPDIFRX_Init+0xb4>)
 800ac70:	4013      	ands	r3, r2
 800ac72:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800ac7c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800ac82:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800ac88:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800ac8e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800ac94:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800ac9a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800aca0:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800aca6:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800acac:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800acae:	68fa      	ldr	r2, [r7, #12]
 800acb0:	4313      	orrs	r3, r2
 800acb2:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2200      	movs	r2, #0
 800acc0:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2201      	movs	r2, #1
 800acc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800acca:	2300      	movs	r3, #0
}
 800accc:	4618      	mov	r0, r3
 800acce:	3710      	adds	r7, #16
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	fff88407 	.word	0xfff88407

0800acd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d101      	bne.n	800acea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ace6:	2301      	movs	r3, #1
 800ace8:	e049      	b.n	800ad7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d106      	bne.n	800ad04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2200      	movs	r2, #0
 800acfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f7f8 fe74 	bl	80039ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2202      	movs	r2, #2
 800ad08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	3304      	adds	r3, #4
 800ad14:	4619      	mov	r1, r3
 800ad16:	4610      	mov	r0, r2
 800ad18:	f000 fade 	bl	800b2d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2201      	movs	r2, #1
 800ad28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2201      	movs	r2, #1
 800ad38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2201      	movs	r2, #1
 800ad40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2201      	movs	r2, #1
 800ad48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2201      	movs	r2, #1
 800ad58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2201      	movs	r2, #1
 800ad68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2201      	movs	r2, #1
 800ad78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3708      	adds	r7, #8
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
	...

0800ad88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad96:	b2db      	uxtb	r3, r3
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d001      	beq.n	800ada0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	e04c      	b.n	800ae3a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2202      	movs	r2, #2
 800ada4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4a26      	ldr	r2, [pc, #152]	; (800ae48 <HAL_TIM_Base_Start+0xc0>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d022      	beq.n	800adf8 <HAL_TIM_Base_Start+0x70>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adba:	d01d      	beq.n	800adf8 <HAL_TIM_Base_Start+0x70>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a22      	ldr	r2, [pc, #136]	; (800ae4c <HAL_TIM_Base_Start+0xc4>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d018      	beq.n	800adf8 <HAL_TIM_Base_Start+0x70>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a21      	ldr	r2, [pc, #132]	; (800ae50 <HAL_TIM_Base_Start+0xc8>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d013      	beq.n	800adf8 <HAL_TIM_Base_Start+0x70>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a1f      	ldr	r2, [pc, #124]	; (800ae54 <HAL_TIM_Base_Start+0xcc>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d00e      	beq.n	800adf8 <HAL_TIM_Base_Start+0x70>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4a1e      	ldr	r2, [pc, #120]	; (800ae58 <HAL_TIM_Base_Start+0xd0>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d009      	beq.n	800adf8 <HAL_TIM_Base_Start+0x70>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a1c      	ldr	r2, [pc, #112]	; (800ae5c <HAL_TIM_Base_Start+0xd4>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d004      	beq.n	800adf8 <HAL_TIM_Base_Start+0x70>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a1b      	ldr	r2, [pc, #108]	; (800ae60 <HAL_TIM_Base_Start+0xd8>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d115      	bne.n	800ae24 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	689a      	ldr	r2, [r3, #8]
 800adfe:	4b19      	ldr	r3, [pc, #100]	; (800ae64 <HAL_TIM_Base_Start+0xdc>)
 800ae00:	4013      	ands	r3, r2
 800ae02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2b06      	cmp	r3, #6
 800ae08:	d015      	beq.n	800ae36 <HAL_TIM_Base_Start+0xae>
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae10:	d011      	beq.n	800ae36 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	681a      	ldr	r2, [r3, #0]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f042 0201 	orr.w	r2, r2, #1
 800ae20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae22:	e008      	b.n	800ae36 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f042 0201 	orr.w	r2, r2, #1
 800ae32:	601a      	str	r2, [r3, #0]
 800ae34:	e000      	b.n	800ae38 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3714      	adds	r7, #20
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr
 800ae46:	bf00      	nop
 800ae48:	40010000 	.word	0x40010000
 800ae4c:	40000400 	.word	0x40000400
 800ae50:	40000800 	.word	0x40000800
 800ae54:	40000c00 	.word	0x40000c00
 800ae58:	40010400 	.word	0x40010400
 800ae5c:	40014000 	.word	0x40014000
 800ae60:	40001800 	.word	0x40001800
 800ae64:	00010007 	.word	0x00010007

0800ae68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d101      	bne.n	800ae7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ae76:	2301      	movs	r3, #1
 800ae78:	e049      	b.n	800af0e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d106      	bne.n	800ae94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 f841 	bl	800af16 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2202      	movs	r2, #2
 800ae98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	3304      	adds	r3, #4
 800aea4:	4619      	mov	r1, r3
 800aea6:	4610      	mov	r0, r2
 800aea8:	f000 fa16 	bl	800b2d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2201      	movs	r2, #1
 800aec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2201      	movs	r2, #1
 800aec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2201      	movs	r2, #1
 800aed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2201      	movs	r2, #1
 800aed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2201      	movs	r2, #1
 800aee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2201      	movs	r2, #1
 800aee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2201      	movs	r2, #1
 800aef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2201      	movs	r2, #1
 800aef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2201      	movs	r2, #1
 800af00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3708      	adds	r7, #8
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800af16:	b480      	push	{r7}
 800af18:	b083      	sub	sp, #12
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800af1e:	bf00      	nop
 800af20:	370c      	adds	r7, #12
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr
	...

0800af2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d101      	bne.n	800af46 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800af42:	2302      	movs	r3, #2
 800af44:	e0fd      	b.n	800b142 <HAL_TIM_PWM_ConfigChannel+0x216>
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2201      	movs	r2, #1
 800af4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2b14      	cmp	r3, #20
 800af52:	f200 80f0 	bhi.w	800b136 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800af56:	a201      	add	r2, pc, #4	; (adr r2, 800af5c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800af58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af5c:	0800afb1 	.word	0x0800afb1
 800af60:	0800b137 	.word	0x0800b137
 800af64:	0800b137 	.word	0x0800b137
 800af68:	0800b137 	.word	0x0800b137
 800af6c:	0800aff1 	.word	0x0800aff1
 800af70:	0800b137 	.word	0x0800b137
 800af74:	0800b137 	.word	0x0800b137
 800af78:	0800b137 	.word	0x0800b137
 800af7c:	0800b033 	.word	0x0800b033
 800af80:	0800b137 	.word	0x0800b137
 800af84:	0800b137 	.word	0x0800b137
 800af88:	0800b137 	.word	0x0800b137
 800af8c:	0800b073 	.word	0x0800b073
 800af90:	0800b137 	.word	0x0800b137
 800af94:	0800b137 	.word	0x0800b137
 800af98:	0800b137 	.word	0x0800b137
 800af9c:	0800b0b5 	.word	0x0800b0b5
 800afa0:	0800b137 	.word	0x0800b137
 800afa4:	0800b137 	.word	0x0800b137
 800afa8:	0800b137 	.word	0x0800b137
 800afac:	0800b0f5 	.word	0x0800b0f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	68b9      	ldr	r1, [r7, #8]
 800afb6:	4618      	mov	r0, r3
 800afb8:	f000 fa2e 	bl	800b418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	699a      	ldr	r2, [r3, #24]
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f042 0208 	orr.w	r2, r2, #8
 800afca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	699a      	ldr	r2, [r3, #24]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f022 0204 	bic.w	r2, r2, #4
 800afda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	6999      	ldr	r1, [r3, #24]
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	691a      	ldr	r2, [r3, #16]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	430a      	orrs	r2, r1
 800afec:	619a      	str	r2, [r3, #24]
      break;
 800afee:	e0a3      	b.n	800b138 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	68b9      	ldr	r1, [r7, #8]
 800aff6:	4618      	mov	r0, r3
 800aff8:	f000 fa80 	bl	800b4fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	699a      	ldr	r2, [r3, #24]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b00a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	699a      	ldr	r2, [r3, #24]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b01a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	6999      	ldr	r1, [r3, #24]
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	691b      	ldr	r3, [r3, #16]
 800b026:	021a      	lsls	r2, r3, #8
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	430a      	orrs	r2, r1
 800b02e:	619a      	str	r2, [r3, #24]
      break;
 800b030:	e082      	b.n	800b138 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	68b9      	ldr	r1, [r7, #8]
 800b038:	4618      	mov	r0, r3
 800b03a:	f000 fad7 	bl	800b5ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	69da      	ldr	r2, [r3, #28]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f042 0208 	orr.w	r2, r2, #8
 800b04c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	69da      	ldr	r2, [r3, #28]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f022 0204 	bic.w	r2, r2, #4
 800b05c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	69d9      	ldr	r1, [r3, #28]
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	691a      	ldr	r2, [r3, #16]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	430a      	orrs	r2, r1
 800b06e:	61da      	str	r2, [r3, #28]
      break;
 800b070:	e062      	b.n	800b138 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	68b9      	ldr	r1, [r7, #8]
 800b078:	4618      	mov	r0, r3
 800b07a:	f000 fb2d 	bl	800b6d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	69da      	ldr	r2, [r3, #28]
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b08c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	69da      	ldr	r2, [r3, #28]
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b09c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	69d9      	ldr	r1, [r3, #28]
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	691b      	ldr	r3, [r3, #16]
 800b0a8:	021a      	lsls	r2, r3, #8
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	430a      	orrs	r2, r1
 800b0b0:	61da      	str	r2, [r3, #28]
      break;
 800b0b2:	e041      	b.n	800b138 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	68b9      	ldr	r1, [r7, #8]
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f000 fb64 	bl	800b788 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f042 0208 	orr.w	r2, r2, #8
 800b0ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f022 0204 	bic.w	r2, r2, #4
 800b0de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	691a      	ldr	r2, [r3, #16]
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	430a      	orrs	r2, r1
 800b0f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b0f2:	e021      	b.n	800b138 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	68b9      	ldr	r1, [r7, #8]
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f000 fb96 	bl	800b82c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b10e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b11e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	691b      	ldr	r3, [r3, #16]
 800b12a:	021a      	lsls	r2, r3, #8
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	430a      	orrs	r2, r1
 800b132:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b134:	e000      	b.n	800b138 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800b136:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2200      	movs	r2, #0
 800b13c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b140:	2300      	movs	r3, #0
}
 800b142:	4618      	mov	r0, r3
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop

0800b14c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d101      	bne.n	800b164 <HAL_TIM_ConfigClockSource+0x18>
 800b160:	2302      	movs	r3, #2
 800b162:	e0b3      	b.n	800b2cc <HAL_TIM_ConfigClockSource+0x180>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2201      	movs	r2, #1
 800b168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2202      	movs	r2, #2
 800b170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	689b      	ldr	r3, [r3, #8]
 800b17a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	4b55      	ldr	r3, [pc, #340]	; (800b2d4 <HAL_TIM_ConfigClockSource+0x188>)
 800b180:	4013      	ands	r3, r2
 800b182:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b18a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68fa      	ldr	r2, [r7, #12]
 800b192:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b19c:	d03e      	beq.n	800b21c <HAL_TIM_ConfigClockSource+0xd0>
 800b19e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1a2:	f200 8087 	bhi.w	800b2b4 <HAL_TIM_ConfigClockSource+0x168>
 800b1a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1aa:	f000 8085 	beq.w	800b2b8 <HAL_TIM_ConfigClockSource+0x16c>
 800b1ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1b2:	d87f      	bhi.n	800b2b4 <HAL_TIM_ConfigClockSource+0x168>
 800b1b4:	2b70      	cmp	r3, #112	; 0x70
 800b1b6:	d01a      	beq.n	800b1ee <HAL_TIM_ConfigClockSource+0xa2>
 800b1b8:	2b70      	cmp	r3, #112	; 0x70
 800b1ba:	d87b      	bhi.n	800b2b4 <HAL_TIM_ConfigClockSource+0x168>
 800b1bc:	2b60      	cmp	r3, #96	; 0x60
 800b1be:	d050      	beq.n	800b262 <HAL_TIM_ConfigClockSource+0x116>
 800b1c0:	2b60      	cmp	r3, #96	; 0x60
 800b1c2:	d877      	bhi.n	800b2b4 <HAL_TIM_ConfigClockSource+0x168>
 800b1c4:	2b50      	cmp	r3, #80	; 0x50
 800b1c6:	d03c      	beq.n	800b242 <HAL_TIM_ConfigClockSource+0xf6>
 800b1c8:	2b50      	cmp	r3, #80	; 0x50
 800b1ca:	d873      	bhi.n	800b2b4 <HAL_TIM_ConfigClockSource+0x168>
 800b1cc:	2b40      	cmp	r3, #64	; 0x40
 800b1ce:	d058      	beq.n	800b282 <HAL_TIM_ConfigClockSource+0x136>
 800b1d0:	2b40      	cmp	r3, #64	; 0x40
 800b1d2:	d86f      	bhi.n	800b2b4 <HAL_TIM_ConfigClockSource+0x168>
 800b1d4:	2b30      	cmp	r3, #48	; 0x30
 800b1d6:	d064      	beq.n	800b2a2 <HAL_TIM_ConfigClockSource+0x156>
 800b1d8:	2b30      	cmp	r3, #48	; 0x30
 800b1da:	d86b      	bhi.n	800b2b4 <HAL_TIM_ConfigClockSource+0x168>
 800b1dc:	2b20      	cmp	r3, #32
 800b1de:	d060      	beq.n	800b2a2 <HAL_TIM_ConfigClockSource+0x156>
 800b1e0:	2b20      	cmp	r3, #32
 800b1e2:	d867      	bhi.n	800b2b4 <HAL_TIM_ConfigClockSource+0x168>
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d05c      	beq.n	800b2a2 <HAL_TIM_ConfigClockSource+0x156>
 800b1e8:	2b10      	cmp	r3, #16
 800b1ea:	d05a      	beq.n	800b2a2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b1ec:	e062      	b.n	800b2b4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6818      	ldr	r0, [r3, #0]
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	6899      	ldr	r1, [r3, #8]
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	685a      	ldr	r2, [r3, #4]
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	f000 fbe3 	bl	800b9c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b210:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	68fa      	ldr	r2, [r7, #12]
 800b218:	609a      	str	r2, [r3, #8]
      break;
 800b21a:	e04e      	b.n	800b2ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6818      	ldr	r0, [r3, #0]
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	6899      	ldr	r1, [r3, #8]
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	685a      	ldr	r2, [r3, #4]
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	68db      	ldr	r3, [r3, #12]
 800b22c:	f000 fbcc 	bl	800b9c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	689a      	ldr	r2, [r3, #8]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b23e:	609a      	str	r2, [r3, #8]
      break;
 800b240:	e03b      	b.n	800b2ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6818      	ldr	r0, [r3, #0]
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	6859      	ldr	r1, [r3, #4]
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	68db      	ldr	r3, [r3, #12]
 800b24e:	461a      	mov	r2, r3
 800b250:	f000 fb40 	bl	800b8d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2150      	movs	r1, #80	; 0x50
 800b25a:	4618      	mov	r0, r3
 800b25c:	f000 fb99 	bl	800b992 <TIM_ITRx_SetConfig>
      break;
 800b260:	e02b      	b.n	800b2ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6818      	ldr	r0, [r3, #0]
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	6859      	ldr	r1, [r3, #4]
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	68db      	ldr	r3, [r3, #12]
 800b26e:	461a      	mov	r2, r3
 800b270:	f000 fb5f 	bl	800b932 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2160      	movs	r1, #96	; 0x60
 800b27a:	4618      	mov	r0, r3
 800b27c:	f000 fb89 	bl	800b992 <TIM_ITRx_SetConfig>
      break;
 800b280:	e01b      	b.n	800b2ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6818      	ldr	r0, [r3, #0]
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	6859      	ldr	r1, [r3, #4]
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	68db      	ldr	r3, [r3, #12]
 800b28e:	461a      	mov	r2, r3
 800b290:	f000 fb20 	bl	800b8d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2140      	movs	r1, #64	; 0x40
 800b29a:	4618      	mov	r0, r3
 800b29c:	f000 fb79 	bl	800b992 <TIM_ITRx_SetConfig>
      break;
 800b2a0:	e00b      	b.n	800b2ba <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681a      	ldr	r2, [r3, #0]
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	4610      	mov	r0, r2
 800b2ae:	f000 fb70 	bl	800b992 <TIM_ITRx_SetConfig>
        break;
 800b2b2:	e002      	b.n	800b2ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b2b4:	bf00      	nop
 800b2b6:	e000      	b.n	800b2ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b2b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2201      	movs	r2, #1
 800b2be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b2ca:	2300      	movs	r3, #0
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3710      	adds	r7, #16
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}
 800b2d4:	fffeff88 	.word	0xfffeff88

0800b2d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b085      	sub	sp, #20
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	4a40      	ldr	r2, [pc, #256]	; (800b3ec <TIM_Base_SetConfig+0x114>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d013      	beq.n	800b318 <TIM_Base_SetConfig+0x40>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2f6:	d00f      	beq.n	800b318 <TIM_Base_SetConfig+0x40>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	4a3d      	ldr	r2, [pc, #244]	; (800b3f0 <TIM_Base_SetConfig+0x118>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d00b      	beq.n	800b318 <TIM_Base_SetConfig+0x40>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	4a3c      	ldr	r2, [pc, #240]	; (800b3f4 <TIM_Base_SetConfig+0x11c>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d007      	beq.n	800b318 <TIM_Base_SetConfig+0x40>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	4a3b      	ldr	r2, [pc, #236]	; (800b3f8 <TIM_Base_SetConfig+0x120>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d003      	beq.n	800b318 <TIM_Base_SetConfig+0x40>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	4a3a      	ldr	r2, [pc, #232]	; (800b3fc <TIM_Base_SetConfig+0x124>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d108      	bne.n	800b32a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b31e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	68fa      	ldr	r2, [r7, #12]
 800b326:	4313      	orrs	r3, r2
 800b328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	4a2f      	ldr	r2, [pc, #188]	; (800b3ec <TIM_Base_SetConfig+0x114>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d02b      	beq.n	800b38a <TIM_Base_SetConfig+0xb2>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b338:	d027      	beq.n	800b38a <TIM_Base_SetConfig+0xb2>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	4a2c      	ldr	r2, [pc, #176]	; (800b3f0 <TIM_Base_SetConfig+0x118>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d023      	beq.n	800b38a <TIM_Base_SetConfig+0xb2>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4a2b      	ldr	r2, [pc, #172]	; (800b3f4 <TIM_Base_SetConfig+0x11c>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d01f      	beq.n	800b38a <TIM_Base_SetConfig+0xb2>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4a2a      	ldr	r2, [pc, #168]	; (800b3f8 <TIM_Base_SetConfig+0x120>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d01b      	beq.n	800b38a <TIM_Base_SetConfig+0xb2>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4a29      	ldr	r2, [pc, #164]	; (800b3fc <TIM_Base_SetConfig+0x124>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d017      	beq.n	800b38a <TIM_Base_SetConfig+0xb2>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	4a28      	ldr	r2, [pc, #160]	; (800b400 <TIM_Base_SetConfig+0x128>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d013      	beq.n	800b38a <TIM_Base_SetConfig+0xb2>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	4a27      	ldr	r2, [pc, #156]	; (800b404 <TIM_Base_SetConfig+0x12c>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d00f      	beq.n	800b38a <TIM_Base_SetConfig+0xb2>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	4a26      	ldr	r2, [pc, #152]	; (800b408 <TIM_Base_SetConfig+0x130>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d00b      	beq.n	800b38a <TIM_Base_SetConfig+0xb2>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	4a25      	ldr	r2, [pc, #148]	; (800b40c <TIM_Base_SetConfig+0x134>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d007      	beq.n	800b38a <TIM_Base_SetConfig+0xb2>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	4a24      	ldr	r2, [pc, #144]	; (800b410 <TIM_Base_SetConfig+0x138>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d003      	beq.n	800b38a <TIM_Base_SetConfig+0xb2>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	4a23      	ldr	r2, [pc, #140]	; (800b414 <TIM_Base_SetConfig+0x13c>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d108      	bne.n	800b39c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	68fa      	ldr	r2, [r7, #12]
 800b398:	4313      	orrs	r3, r2
 800b39a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	695b      	ldr	r3, [r3, #20]
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	68fa      	ldr	r2, [r7, #12]
 800b3ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	689a      	ldr	r2, [r3, #8]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	4a0a      	ldr	r2, [pc, #40]	; (800b3ec <TIM_Base_SetConfig+0x114>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d003      	beq.n	800b3d0 <TIM_Base_SetConfig+0xf8>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	4a0c      	ldr	r2, [pc, #48]	; (800b3fc <TIM_Base_SetConfig+0x124>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d103      	bne.n	800b3d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	691a      	ldr	r2, [r3, #16]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2201      	movs	r2, #1
 800b3dc:	615a      	str	r2, [r3, #20]
}
 800b3de:	bf00      	nop
 800b3e0:	3714      	adds	r7, #20
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr
 800b3ea:	bf00      	nop
 800b3ec:	40010000 	.word	0x40010000
 800b3f0:	40000400 	.word	0x40000400
 800b3f4:	40000800 	.word	0x40000800
 800b3f8:	40000c00 	.word	0x40000c00
 800b3fc:	40010400 	.word	0x40010400
 800b400:	40014000 	.word	0x40014000
 800b404:	40014400 	.word	0x40014400
 800b408:	40014800 	.word	0x40014800
 800b40c:	40001800 	.word	0x40001800
 800b410:	40001c00 	.word	0x40001c00
 800b414:	40002000 	.word	0x40002000

0800b418 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b418:	b480      	push	{r7}
 800b41a:	b087      	sub	sp, #28
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6a1b      	ldr	r3, [r3, #32]
 800b426:	f023 0201 	bic.w	r2, r3, #1
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6a1b      	ldr	r3, [r3, #32]
 800b432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	699b      	ldr	r3, [r3, #24]
 800b43e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b440:	68fa      	ldr	r2, [r7, #12]
 800b442:	4b2b      	ldr	r3, [pc, #172]	; (800b4f0 <TIM_OC1_SetConfig+0xd8>)
 800b444:	4013      	ands	r3, r2
 800b446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f023 0303 	bic.w	r3, r3, #3
 800b44e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	68fa      	ldr	r2, [r7, #12]
 800b456:	4313      	orrs	r3, r2
 800b458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	f023 0302 	bic.w	r3, r3, #2
 800b460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	689b      	ldr	r3, [r3, #8]
 800b466:	697a      	ldr	r2, [r7, #20]
 800b468:	4313      	orrs	r3, r2
 800b46a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	4a21      	ldr	r2, [pc, #132]	; (800b4f4 <TIM_OC1_SetConfig+0xdc>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d003      	beq.n	800b47c <TIM_OC1_SetConfig+0x64>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	4a20      	ldr	r2, [pc, #128]	; (800b4f8 <TIM_OC1_SetConfig+0xe0>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d10c      	bne.n	800b496 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	f023 0308 	bic.w	r3, r3, #8
 800b482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	68db      	ldr	r3, [r3, #12]
 800b488:	697a      	ldr	r2, [r7, #20]
 800b48a:	4313      	orrs	r3, r2
 800b48c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	f023 0304 	bic.w	r3, r3, #4
 800b494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4a16      	ldr	r2, [pc, #88]	; (800b4f4 <TIM_OC1_SetConfig+0xdc>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d003      	beq.n	800b4a6 <TIM_OC1_SetConfig+0x8e>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4a15      	ldr	r2, [pc, #84]	; (800b4f8 <TIM_OC1_SetConfig+0xe0>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d111      	bne.n	800b4ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b4b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	695b      	ldr	r3, [r3, #20]
 800b4ba:	693a      	ldr	r2, [r7, #16]
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	699b      	ldr	r3, [r3, #24]
 800b4c4:	693a      	ldr	r2, [r7, #16]
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	693a      	ldr	r2, [r7, #16]
 800b4ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	68fa      	ldr	r2, [r7, #12]
 800b4d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	685a      	ldr	r2, [r3, #4]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	697a      	ldr	r2, [r7, #20]
 800b4e2:	621a      	str	r2, [r3, #32]
}
 800b4e4:	bf00      	nop
 800b4e6:	371c      	adds	r7, #28
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr
 800b4f0:	fffeff8f 	.word	0xfffeff8f
 800b4f4:	40010000 	.word	0x40010000
 800b4f8:	40010400 	.word	0x40010400

0800b4fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b087      	sub	sp, #28
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6a1b      	ldr	r3, [r3, #32]
 800b50a:	f023 0210 	bic.w	r2, r3, #16
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6a1b      	ldr	r3, [r3, #32]
 800b516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	699b      	ldr	r3, [r3, #24]
 800b522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b524:	68fa      	ldr	r2, [r7, #12]
 800b526:	4b2e      	ldr	r3, [pc, #184]	; (800b5e0 <TIM_OC2_SetConfig+0xe4>)
 800b528:	4013      	ands	r3, r2
 800b52a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	021b      	lsls	r3, r3, #8
 800b53a:	68fa      	ldr	r2, [r7, #12]
 800b53c:	4313      	orrs	r3, r2
 800b53e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	f023 0320 	bic.w	r3, r3, #32
 800b546:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	011b      	lsls	r3, r3, #4
 800b54e:	697a      	ldr	r2, [r7, #20]
 800b550:	4313      	orrs	r3, r2
 800b552:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	4a23      	ldr	r2, [pc, #140]	; (800b5e4 <TIM_OC2_SetConfig+0xe8>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d003      	beq.n	800b564 <TIM_OC2_SetConfig+0x68>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	4a22      	ldr	r2, [pc, #136]	; (800b5e8 <TIM_OC2_SetConfig+0xec>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d10d      	bne.n	800b580 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b56a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	011b      	lsls	r3, r3, #4
 800b572:	697a      	ldr	r2, [r7, #20]
 800b574:	4313      	orrs	r3, r2
 800b576:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b57e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	4a18      	ldr	r2, [pc, #96]	; (800b5e4 <TIM_OC2_SetConfig+0xe8>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d003      	beq.n	800b590 <TIM_OC2_SetConfig+0x94>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	4a17      	ldr	r2, [pc, #92]	; (800b5e8 <TIM_OC2_SetConfig+0xec>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d113      	bne.n	800b5b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b596:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b59e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	695b      	ldr	r3, [r3, #20]
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	693a      	ldr	r2, [r7, #16]
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	699b      	ldr	r3, [r3, #24]
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	693a      	ldr	r2, [r7, #16]
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	693a      	ldr	r2, [r7, #16]
 800b5bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	68fa      	ldr	r2, [r7, #12]
 800b5c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	685a      	ldr	r2, [r3, #4]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	697a      	ldr	r2, [r7, #20]
 800b5d0:	621a      	str	r2, [r3, #32]
}
 800b5d2:	bf00      	nop
 800b5d4:	371c      	adds	r7, #28
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr
 800b5de:	bf00      	nop
 800b5e0:	feff8fff 	.word	0xfeff8fff
 800b5e4:	40010000 	.word	0x40010000
 800b5e8:	40010400 	.word	0x40010400

0800b5ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b087      	sub	sp, #28
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6a1b      	ldr	r3, [r3, #32]
 800b5fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6a1b      	ldr	r3, [r3, #32]
 800b606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	69db      	ldr	r3, [r3, #28]
 800b612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b614:	68fa      	ldr	r2, [r7, #12]
 800b616:	4b2d      	ldr	r3, [pc, #180]	; (800b6cc <TIM_OC3_SetConfig+0xe0>)
 800b618:	4013      	ands	r3, r2
 800b61a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	f023 0303 	bic.w	r3, r3, #3
 800b622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	68fa      	ldr	r2, [r7, #12]
 800b62a:	4313      	orrs	r3, r2
 800b62c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	689b      	ldr	r3, [r3, #8]
 800b63a:	021b      	lsls	r3, r3, #8
 800b63c:	697a      	ldr	r2, [r7, #20]
 800b63e:	4313      	orrs	r3, r2
 800b640:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4a22      	ldr	r2, [pc, #136]	; (800b6d0 <TIM_OC3_SetConfig+0xe4>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d003      	beq.n	800b652 <TIM_OC3_SetConfig+0x66>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	4a21      	ldr	r2, [pc, #132]	; (800b6d4 <TIM_OC3_SetConfig+0xe8>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d10d      	bne.n	800b66e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b658:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	021b      	lsls	r3, r3, #8
 800b660:	697a      	ldr	r2, [r7, #20]
 800b662:	4313      	orrs	r3, r2
 800b664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b66c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	4a17      	ldr	r2, [pc, #92]	; (800b6d0 <TIM_OC3_SetConfig+0xe4>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d003      	beq.n	800b67e <TIM_OC3_SetConfig+0x92>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	4a16      	ldr	r2, [pc, #88]	; (800b6d4 <TIM_OC3_SetConfig+0xe8>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d113      	bne.n	800b6a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b68c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	695b      	ldr	r3, [r3, #20]
 800b692:	011b      	lsls	r3, r3, #4
 800b694:	693a      	ldr	r2, [r7, #16]
 800b696:	4313      	orrs	r3, r2
 800b698:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	699b      	ldr	r3, [r3, #24]
 800b69e:	011b      	lsls	r3, r3, #4
 800b6a0:	693a      	ldr	r2, [r7, #16]
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	693a      	ldr	r2, [r7, #16]
 800b6aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	68fa      	ldr	r2, [r7, #12]
 800b6b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	685a      	ldr	r2, [r3, #4]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	697a      	ldr	r2, [r7, #20]
 800b6be:	621a      	str	r2, [r3, #32]
}
 800b6c0:	bf00      	nop
 800b6c2:	371c      	adds	r7, #28
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr
 800b6cc:	fffeff8f 	.word	0xfffeff8f
 800b6d0:	40010000 	.word	0x40010000
 800b6d4:	40010400 	.word	0x40010400

0800b6d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b087      	sub	sp, #28
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6a1b      	ldr	r3, [r3, #32]
 800b6e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6a1b      	ldr	r3, [r3, #32]
 800b6f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	69db      	ldr	r3, [r3, #28]
 800b6fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b700:	68fa      	ldr	r2, [r7, #12]
 800b702:	4b1e      	ldr	r3, [pc, #120]	; (800b77c <TIM_OC4_SetConfig+0xa4>)
 800b704:	4013      	ands	r3, r2
 800b706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b70e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	021b      	lsls	r3, r3, #8
 800b716:	68fa      	ldr	r2, [r7, #12]
 800b718:	4313      	orrs	r3, r2
 800b71a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b722:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	689b      	ldr	r3, [r3, #8]
 800b728:	031b      	lsls	r3, r3, #12
 800b72a:	693a      	ldr	r2, [r7, #16]
 800b72c:	4313      	orrs	r3, r2
 800b72e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	4a13      	ldr	r2, [pc, #76]	; (800b780 <TIM_OC4_SetConfig+0xa8>)
 800b734:	4293      	cmp	r3, r2
 800b736:	d003      	beq.n	800b740 <TIM_OC4_SetConfig+0x68>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	4a12      	ldr	r2, [pc, #72]	; (800b784 <TIM_OC4_SetConfig+0xac>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d109      	bne.n	800b754 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b746:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	695b      	ldr	r3, [r3, #20]
 800b74c:	019b      	lsls	r3, r3, #6
 800b74e:	697a      	ldr	r2, [r7, #20]
 800b750:	4313      	orrs	r3, r2
 800b752:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	697a      	ldr	r2, [r7, #20]
 800b758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	68fa      	ldr	r2, [r7, #12]
 800b75e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	685a      	ldr	r2, [r3, #4]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	693a      	ldr	r2, [r7, #16]
 800b76c:	621a      	str	r2, [r3, #32]
}
 800b76e:	bf00      	nop
 800b770:	371c      	adds	r7, #28
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr
 800b77a:	bf00      	nop
 800b77c:	feff8fff 	.word	0xfeff8fff
 800b780:	40010000 	.word	0x40010000
 800b784:	40010400 	.word	0x40010400

0800b788 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b788:	b480      	push	{r7}
 800b78a:	b087      	sub	sp, #28
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a1b      	ldr	r3, [r3, #32]
 800b796:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6a1b      	ldr	r3, [r3, #32]
 800b7a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b7b0:	68fa      	ldr	r2, [r7, #12]
 800b7b2:	4b1b      	ldr	r3, [pc, #108]	; (800b820 <TIM_OC5_SetConfig+0x98>)
 800b7b4:	4013      	ands	r3, r2
 800b7b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	68fa      	ldr	r2, [r7, #12]
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b7c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	689b      	ldr	r3, [r3, #8]
 800b7ce:	041b      	lsls	r3, r3, #16
 800b7d0:	693a      	ldr	r2, [r7, #16]
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	4a12      	ldr	r2, [pc, #72]	; (800b824 <TIM_OC5_SetConfig+0x9c>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d003      	beq.n	800b7e6 <TIM_OC5_SetConfig+0x5e>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4a11      	ldr	r2, [pc, #68]	; (800b828 <TIM_OC5_SetConfig+0xa0>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d109      	bne.n	800b7fa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	695b      	ldr	r3, [r3, #20]
 800b7f2:	021b      	lsls	r3, r3, #8
 800b7f4:	697a      	ldr	r2, [r7, #20]
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	697a      	ldr	r2, [r7, #20]
 800b7fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	68fa      	ldr	r2, [r7, #12]
 800b804:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	685a      	ldr	r2, [r3, #4]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	693a      	ldr	r2, [r7, #16]
 800b812:	621a      	str	r2, [r3, #32]
}
 800b814:	bf00      	nop
 800b816:	371c      	adds	r7, #28
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr
 800b820:	fffeff8f 	.word	0xfffeff8f
 800b824:	40010000 	.word	0x40010000
 800b828:	40010400 	.word	0x40010400

0800b82c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b087      	sub	sp, #28
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6a1b      	ldr	r3, [r3, #32]
 800b83a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6a1b      	ldr	r3, [r3, #32]
 800b846:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b854:	68fa      	ldr	r2, [r7, #12]
 800b856:	4b1c      	ldr	r3, [pc, #112]	; (800b8c8 <TIM_OC6_SetConfig+0x9c>)
 800b858:	4013      	ands	r3, r2
 800b85a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	021b      	lsls	r3, r3, #8
 800b862:	68fa      	ldr	r2, [r7, #12]
 800b864:	4313      	orrs	r3, r2
 800b866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b86e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	689b      	ldr	r3, [r3, #8]
 800b874:	051b      	lsls	r3, r3, #20
 800b876:	693a      	ldr	r2, [r7, #16]
 800b878:	4313      	orrs	r3, r2
 800b87a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	4a13      	ldr	r2, [pc, #76]	; (800b8cc <TIM_OC6_SetConfig+0xa0>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d003      	beq.n	800b88c <TIM_OC6_SetConfig+0x60>
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	4a12      	ldr	r2, [pc, #72]	; (800b8d0 <TIM_OC6_SetConfig+0xa4>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d109      	bne.n	800b8a0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b892:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	695b      	ldr	r3, [r3, #20]
 800b898:	029b      	lsls	r3, r3, #10
 800b89a:	697a      	ldr	r2, [r7, #20]
 800b89c:	4313      	orrs	r3, r2
 800b89e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	697a      	ldr	r2, [r7, #20]
 800b8a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	68fa      	ldr	r2, [r7, #12]
 800b8aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	685a      	ldr	r2, [r3, #4]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	693a      	ldr	r2, [r7, #16]
 800b8b8:	621a      	str	r2, [r3, #32]
}
 800b8ba:	bf00      	nop
 800b8bc:	371c      	adds	r7, #28
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	feff8fff 	.word	0xfeff8fff
 800b8cc:	40010000 	.word	0x40010000
 800b8d0:	40010400 	.word	0x40010400

0800b8d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b087      	sub	sp, #28
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	60b9      	str	r1, [r7, #8]
 800b8de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6a1b      	ldr	r3, [r3, #32]
 800b8e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	6a1b      	ldr	r3, [r3, #32]
 800b8ea:	f023 0201 	bic.w	r2, r3, #1
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	699b      	ldr	r3, [r3, #24]
 800b8f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b8fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	011b      	lsls	r3, r3, #4
 800b904:	693a      	ldr	r2, [r7, #16]
 800b906:	4313      	orrs	r3, r2
 800b908:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	f023 030a 	bic.w	r3, r3, #10
 800b910:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b912:	697a      	ldr	r2, [r7, #20]
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	4313      	orrs	r3, r2
 800b918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	693a      	ldr	r2, [r7, #16]
 800b91e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	697a      	ldr	r2, [r7, #20]
 800b924:	621a      	str	r2, [r3, #32]
}
 800b926:	bf00      	nop
 800b928:	371c      	adds	r7, #28
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr

0800b932 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b932:	b480      	push	{r7}
 800b934:	b087      	sub	sp, #28
 800b936:	af00      	add	r7, sp, #0
 800b938:	60f8      	str	r0, [r7, #12]
 800b93a:	60b9      	str	r1, [r7, #8]
 800b93c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	6a1b      	ldr	r3, [r3, #32]
 800b942:	f023 0210 	bic.w	r2, r3, #16
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	699b      	ldr	r3, [r3, #24]
 800b94e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	6a1b      	ldr	r3, [r3, #32]
 800b954:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b95c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	031b      	lsls	r3, r3, #12
 800b962:	697a      	ldr	r2, [r7, #20]
 800b964:	4313      	orrs	r3, r2
 800b966:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b96e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	011b      	lsls	r3, r3, #4
 800b974:	693a      	ldr	r2, [r7, #16]
 800b976:	4313      	orrs	r3, r2
 800b978:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	697a      	ldr	r2, [r7, #20]
 800b97e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	693a      	ldr	r2, [r7, #16]
 800b984:	621a      	str	r2, [r3, #32]
}
 800b986:	bf00      	nop
 800b988:	371c      	adds	r7, #28
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr

0800b992 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b992:	b480      	push	{r7}
 800b994:	b085      	sub	sp, #20
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
 800b99a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b9aa:	683a      	ldr	r2, [r7, #0]
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	f043 0307 	orr.w	r3, r3, #7
 800b9b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	609a      	str	r2, [r3, #8]
}
 800b9bc:	bf00      	nop
 800b9be:	3714      	adds	r7, #20
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr

0800b9c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b087      	sub	sp, #28
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	60f8      	str	r0, [r7, #12]
 800b9d0:	60b9      	str	r1, [r7, #8]
 800b9d2:	607a      	str	r2, [r7, #4]
 800b9d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	689b      	ldr	r3, [r3, #8]
 800b9da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b9e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	021a      	lsls	r2, r3, #8
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	431a      	orrs	r2, r3
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	697a      	ldr	r2, [r7, #20]
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	697a      	ldr	r2, [r7, #20]
 800b9fa:	609a      	str	r2, [r3, #8]
}
 800b9fc:	bf00      	nop
 800b9fe:	371c      	adds	r7, #28
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d101      	bne.n	800ba20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba1c:	2302      	movs	r3, #2
 800ba1e:	e06d      	b.n	800bafc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2201      	movs	r2, #1
 800ba24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2202      	movs	r2, #2
 800ba2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	689b      	ldr	r3, [r3, #8]
 800ba3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a30      	ldr	r2, [pc, #192]	; (800bb08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d004      	beq.n	800ba54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4a2f      	ldr	r2, [pc, #188]	; (800bb0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d108      	bne.n	800ba66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ba5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	4313      	orrs	r3, r2
 800ba64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	68fa      	ldr	r2, [r7, #12]
 800ba74:	4313      	orrs	r3, r2
 800ba76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4a20      	ldr	r2, [pc, #128]	; (800bb08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d022      	beq.n	800bad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba92:	d01d      	beq.n	800bad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4a1d      	ldr	r2, [pc, #116]	; (800bb10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d018      	beq.n	800bad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4a1c      	ldr	r2, [pc, #112]	; (800bb14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d013      	beq.n	800bad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4a1a      	ldr	r2, [pc, #104]	; (800bb18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d00e      	beq.n	800bad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4a15      	ldr	r2, [pc, #84]	; (800bb0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d009      	beq.n	800bad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a16      	ldr	r2, [pc, #88]	; (800bb1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d004      	beq.n	800bad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a15      	ldr	r2, [pc, #84]	; (800bb20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d10c      	bne.n	800baea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bad6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	689b      	ldr	r3, [r3, #8]
 800badc:	68ba      	ldr	r2, [r7, #8]
 800bade:	4313      	orrs	r3, r2
 800bae0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	68ba      	ldr	r2, [r7, #8]
 800bae8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2201      	movs	r2, #1
 800baee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2200      	movs	r2, #0
 800baf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bafa:	2300      	movs	r3, #0
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3714      	adds	r7, #20
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr
 800bb08:	40010000 	.word	0x40010000
 800bb0c:	40010400 	.word	0x40010400
 800bb10:	40000400 	.word	0x40000400
 800bb14:	40000800 	.word	0x40000800
 800bb18:	40000c00 	.word	0x40000c00
 800bb1c:	40014000 	.word	0x40014000
 800bb20:	40001800 	.word	0x40001800

0800bb24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b085      	sub	sp, #20
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	d101      	bne.n	800bb40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bb3c:	2302      	movs	r3, #2
 800bb3e:	e065      	b.n	800bc0c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2201      	movs	r2, #1
 800bb44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	4313      	orrs	r3, r2
 800bb54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	689b      	ldr	r3, [r3, #8]
 800bb60:	4313      	orrs	r3, r2
 800bb62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	691b      	ldr	r3, [r3, #16]
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	695b      	ldr	r3, [r3, #20]
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bba6:	4313      	orrs	r3, r2
 800bba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	699b      	ldr	r3, [r3, #24]
 800bbb4:	041b      	lsls	r3, r3, #16
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4a16      	ldr	r2, [pc, #88]	; (800bc18 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d004      	beq.n	800bbce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4a14      	ldr	r2, [pc, #80]	; (800bc1c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d115      	bne.n	800bbfa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd8:	051b      	lsls	r3, r3, #20
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	69db      	ldr	r3, [r3, #28]
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	6a1b      	ldr	r3, [r3, #32]
 800bbf6:	4313      	orrs	r3, r2
 800bbf8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	68fa      	ldr	r2, [r7, #12]
 800bc00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2200      	movs	r2, #0
 800bc06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc0a:	2300      	movs	r3, #0
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3714      	adds	r7, #20
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr
 800bc18:	40010000 	.word	0x40010000
 800bc1c:	40010400 	.word	0x40010400

0800bc20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d101      	bne.n	800bc32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	e040      	b.n	800bcb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d106      	bne.n	800bc48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f7f8 f820 	bl	8003c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2224      	movs	r2, #36	; 0x24
 800bc4c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f022 0201 	bic.w	r2, r2, #1
 800bc5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f000 f8c0 	bl	800bde4 <UART_SetConfig>
 800bc64:	4603      	mov	r3, r0
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d101      	bne.n	800bc6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	e022      	b.n	800bcb4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d002      	beq.n	800bc7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 fb16 	bl	800c2a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	685a      	ldr	r2, [r3, #4]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bc8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	689a      	ldr	r2, [r3, #8]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bc9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f042 0201 	orr.w	r2, r2, #1
 800bcaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f000 fb9d 	bl	800c3ec <UART_CheckIdleState>
 800bcb2:	4603      	mov	r3, r0
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3708      	adds	r7, #8
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b08a      	sub	sp, #40	; 0x28
 800bcc0:	af02      	add	r7, sp, #8
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	603b      	str	r3, [r7, #0]
 800bcc8:	4613      	mov	r3, r2
 800bcca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bcd0:	2b20      	cmp	r3, #32
 800bcd2:	f040 8081 	bne.w	800bdd8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d002      	beq.n	800bce2 <HAL_UART_Transmit+0x26>
 800bcdc:	88fb      	ldrh	r3, [r7, #6]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d101      	bne.n	800bce6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bce2:	2301      	movs	r3, #1
 800bce4:	e079      	b.n	800bdda <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d101      	bne.n	800bcf4 <HAL_UART_Transmit+0x38>
 800bcf0:	2302      	movs	r3, #2
 800bcf2:	e072      	b.n	800bdda <HAL_UART_Transmit+0x11e>
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2221      	movs	r2, #33	; 0x21
 800bd08:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bd0a:	f7f8 fa5f 	bl	80041cc <HAL_GetTick>
 800bd0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	88fa      	ldrh	r2, [r7, #6]
 800bd14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	88fa      	ldrh	r2, [r7, #6]
 800bd1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	689b      	ldr	r3, [r3, #8]
 800bd24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd28:	d108      	bne.n	800bd3c <HAL_UART_Transmit+0x80>
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	691b      	ldr	r3, [r3, #16]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d104      	bne.n	800bd3c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800bd32:	2300      	movs	r3, #0
 800bd34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	61bb      	str	r3, [r7, #24]
 800bd3a:	e003      	b.n	800bd44 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bd40:	2300      	movs	r3, #0
 800bd42:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2200      	movs	r2, #0
 800bd48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800bd4c:	e02c      	b.n	800bda8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	9300      	str	r3, [sp, #0]
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	2200      	movs	r2, #0
 800bd56:	2180      	movs	r1, #128	; 0x80
 800bd58:	68f8      	ldr	r0, [r7, #12]
 800bd5a:	f000 fb7a 	bl	800c452 <UART_WaitOnFlagUntilTimeout>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d001      	beq.n	800bd68 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800bd64:	2303      	movs	r3, #3
 800bd66:	e038      	b.n	800bdda <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800bd68:	69fb      	ldr	r3, [r7, #28]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d10b      	bne.n	800bd86 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bd6e:	69bb      	ldr	r3, [r7, #24]
 800bd70:	881b      	ldrh	r3, [r3, #0]
 800bd72:	461a      	mov	r2, r3
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd7c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bd7e:	69bb      	ldr	r3, [r7, #24]
 800bd80:	3302      	adds	r3, #2
 800bd82:	61bb      	str	r3, [r7, #24]
 800bd84:	e007      	b.n	800bd96 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bd86:	69fb      	ldr	r3, [r7, #28]
 800bd88:	781a      	ldrb	r2, [r3, #0]
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bd90:	69fb      	ldr	r3, [r7, #28]
 800bd92:	3301      	adds	r3, #1
 800bd94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bd9c:	b29b      	uxth	r3, r3
 800bd9e:	3b01      	subs	r3, #1
 800bda0:	b29a      	uxth	r2, r3
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bdae:	b29b      	uxth	r3, r3
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d1cc      	bne.n	800bd4e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	9300      	str	r3, [sp, #0]
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	2140      	movs	r1, #64	; 0x40
 800bdbe:	68f8      	ldr	r0, [r7, #12]
 800bdc0:	f000 fb47 	bl	800c452 <UART_WaitOnFlagUntilTimeout>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d001      	beq.n	800bdce <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800bdca:	2303      	movs	r3, #3
 800bdcc:	e005      	b.n	800bdda <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2220      	movs	r2, #32
 800bdd2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	e000      	b.n	800bdda <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800bdd8:	2302      	movs	r3, #2
  }
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3720      	adds	r7, #32
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
	...

0800bde4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b088      	sub	sp, #32
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bdec:	2300      	movs	r3, #0
 800bdee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	689a      	ldr	r2, [r3, #8]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	691b      	ldr	r3, [r3, #16]
 800bdf8:	431a      	orrs	r2, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	695b      	ldr	r3, [r3, #20]
 800bdfe:	431a      	orrs	r2, r3
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	69db      	ldr	r3, [r3, #28]
 800be04:	4313      	orrs	r3, r2
 800be06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	681a      	ldr	r2, [r3, #0]
 800be0e:	4ba7      	ldr	r3, [pc, #668]	; (800c0ac <UART_SetConfig+0x2c8>)
 800be10:	4013      	ands	r3, r2
 800be12:	687a      	ldr	r2, [r7, #4]
 800be14:	6812      	ldr	r2, [r2, #0]
 800be16:	6979      	ldr	r1, [r7, #20]
 800be18:	430b      	orrs	r3, r1
 800be1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	68da      	ldr	r2, [r3, #12]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	430a      	orrs	r2, r1
 800be30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	699b      	ldr	r3, [r3, #24]
 800be36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6a1b      	ldr	r3, [r3, #32]
 800be3c:	697a      	ldr	r2, [r7, #20]
 800be3e:	4313      	orrs	r3, r2
 800be40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	689b      	ldr	r3, [r3, #8]
 800be48:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	697a      	ldr	r2, [r7, #20]
 800be52:	430a      	orrs	r2, r1
 800be54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4a95      	ldr	r2, [pc, #596]	; (800c0b0 <UART_SetConfig+0x2cc>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d120      	bne.n	800bea2 <UART_SetConfig+0xbe>
 800be60:	4b94      	ldr	r3, [pc, #592]	; (800c0b4 <UART_SetConfig+0x2d0>)
 800be62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be66:	f003 0303 	and.w	r3, r3, #3
 800be6a:	2b03      	cmp	r3, #3
 800be6c:	d816      	bhi.n	800be9c <UART_SetConfig+0xb8>
 800be6e:	a201      	add	r2, pc, #4	; (adr r2, 800be74 <UART_SetConfig+0x90>)
 800be70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be74:	0800be85 	.word	0x0800be85
 800be78:	0800be91 	.word	0x0800be91
 800be7c:	0800be8b 	.word	0x0800be8b
 800be80:	0800be97 	.word	0x0800be97
 800be84:	2301      	movs	r3, #1
 800be86:	77fb      	strb	r3, [r7, #31]
 800be88:	e14f      	b.n	800c12a <UART_SetConfig+0x346>
 800be8a:	2302      	movs	r3, #2
 800be8c:	77fb      	strb	r3, [r7, #31]
 800be8e:	e14c      	b.n	800c12a <UART_SetConfig+0x346>
 800be90:	2304      	movs	r3, #4
 800be92:	77fb      	strb	r3, [r7, #31]
 800be94:	e149      	b.n	800c12a <UART_SetConfig+0x346>
 800be96:	2308      	movs	r3, #8
 800be98:	77fb      	strb	r3, [r7, #31]
 800be9a:	e146      	b.n	800c12a <UART_SetConfig+0x346>
 800be9c:	2310      	movs	r3, #16
 800be9e:	77fb      	strb	r3, [r7, #31]
 800bea0:	e143      	b.n	800c12a <UART_SetConfig+0x346>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	4a84      	ldr	r2, [pc, #528]	; (800c0b8 <UART_SetConfig+0x2d4>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d132      	bne.n	800bf12 <UART_SetConfig+0x12e>
 800beac:	4b81      	ldr	r3, [pc, #516]	; (800c0b4 <UART_SetConfig+0x2d0>)
 800beae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800beb2:	f003 030c 	and.w	r3, r3, #12
 800beb6:	2b0c      	cmp	r3, #12
 800beb8:	d828      	bhi.n	800bf0c <UART_SetConfig+0x128>
 800beba:	a201      	add	r2, pc, #4	; (adr r2, 800bec0 <UART_SetConfig+0xdc>)
 800bebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bec0:	0800bef5 	.word	0x0800bef5
 800bec4:	0800bf0d 	.word	0x0800bf0d
 800bec8:	0800bf0d 	.word	0x0800bf0d
 800becc:	0800bf0d 	.word	0x0800bf0d
 800bed0:	0800bf01 	.word	0x0800bf01
 800bed4:	0800bf0d 	.word	0x0800bf0d
 800bed8:	0800bf0d 	.word	0x0800bf0d
 800bedc:	0800bf0d 	.word	0x0800bf0d
 800bee0:	0800befb 	.word	0x0800befb
 800bee4:	0800bf0d 	.word	0x0800bf0d
 800bee8:	0800bf0d 	.word	0x0800bf0d
 800beec:	0800bf0d 	.word	0x0800bf0d
 800bef0:	0800bf07 	.word	0x0800bf07
 800bef4:	2300      	movs	r3, #0
 800bef6:	77fb      	strb	r3, [r7, #31]
 800bef8:	e117      	b.n	800c12a <UART_SetConfig+0x346>
 800befa:	2302      	movs	r3, #2
 800befc:	77fb      	strb	r3, [r7, #31]
 800befe:	e114      	b.n	800c12a <UART_SetConfig+0x346>
 800bf00:	2304      	movs	r3, #4
 800bf02:	77fb      	strb	r3, [r7, #31]
 800bf04:	e111      	b.n	800c12a <UART_SetConfig+0x346>
 800bf06:	2308      	movs	r3, #8
 800bf08:	77fb      	strb	r3, [r7, #31]
 800bf0a:	e10e      	b.n	800c12a <UART_SetConfig+0x346>
 800bf0c:	2310      	movs	r3, #16
 800bf0e:	77fb      	strb	r3, [r7, #31]
 800bf10:	e10b      	b.n	800c12a <UART_SetConfig+0x346>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4a69      	ldr	r2, [pc, #420]	; (800c0bc <UART_SetConfig+0x2d8>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d120      	bne.n	800bf5e <UART_SetConfig+0x17a>
 800bf1c:	4b65      	ldr	r3, [pc, #404]	; (800c0b4 <UART_SetConfig+0x2d0>)
 800bf1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf22:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bf26:	2b30      	cmp	r3, #48	; 0x30
 800bf28:	d013      	beq.n	800bf52 <UART_SetConfig+0x16e>
 800bf2a:	2b30      	cmp	r3, #48	; 0x30
 800bf2c:	d814      	bhi.n	800bf58 <UART_SetConfig+0x174>
 800bf2e:	2b20      	cmp	r3, #32
 800bf30:	d009      	beq.n	800bf46 <UART_SetConfig+0x162>
 800bf32:	2b20      	cmp	r3, #32
 800bf34:	d810      	bhi.n	800bf58 <UART_SetConfig+0x174>
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d002      	beq.n	800bf40 <UART_SetConfig+0x15c>
 800bf3a:	2b10      	cmp	r3, #16
 800bf3c:	d006      	beq.n	800bf4c <UART_SetConfig+0x168>
 800bf3e:	e00b      	b.n	800bf58 <UART_SetConfig+0x174>
 800bf40:	2300      	movs	r3, #0
 800bf42:	77fb      	strb	r3, [r7, #31]
 800bf44:	e0f1      	b.n	800c12a <UART_SetConfig+0x346>
 800bf46:	2302      	movs	r3, #2
 800bf48:	77fb      	strb	r3, [r7, #31]
 800bf4a:	e0ee      	b.n	800c12a <UART_SetConfig+0x346>
 800bf4c:	2304      	movs	r3, #4
 800bf4e:	77fb      	strb	r3, [r7, #31]
 800bf50:	e0eb      	b.n	800c12a <UART_SetConfig+0x346>
 800bf52:	2308      	movs	r3, #8
 800bf54:	77fb      	strb	r3, [r7, #31]
 800bf56:	e0e8      	b.n	800c12a <UART_SetConfig+0x346>
 800bf58:	2310      	movs	r3, #16
 800bf5a:	77fb      	strb	r3, [r7, #31]
 800bf5c:	e0e5      	b.n	800c12a <UART_SetConfig+0x346>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	4a57      	ldr	r2, [pc, #348]	; (800c0c0 <UART_SetConfig+0x2dc>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d120      	bne.n	800bfaa <UART_SetConfig+0x1c6>
 800bf68:	4b52      	ldr	r3, [pc, #328]	; (800c0b4 <UART_SetConfig+0x2d0>)
 800bf6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bf72:	2bc0      	cmp	r3, #192	; 0xc0
 800bf74:	d013      	beq.n	800bf9e <UART_SetConfig+0x1ba>
 800bf76:	2bc0      	cmp	r3, #192	; 0xc0
 800bf78:	d814      	bhi.n	800bfa4 <UART_SetConfig+0x1c0>
 800bf7a:	2b80      	cmp	r3, #128	; 0x80
 800bf7c:	d009      	beq.n	800bf92 <UART_SetConfig+0x1ae>
 800bf7e:	2b80      	cmp	r3, #128	; 0x80
 800bf80:	d810      	bhi.n	800bfa4 <UART_SetConfig+0x1c0>
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d002      	beq.n	800bf8c <UART_SetConfig+0x1a8>
 800bf86:	2b40      	cmp	r3, #64	; 0x40
 800bf88:	d006      	beq.n	800bf98 <UART_SetConfig+0x1b4>
 800bf8a:	e00b      	b.n	800bfa4 <UART_SetConfig+0x1c0>
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	77fb      	strb	r3, [r7, #31]
 800bf90:	e0cb      	b.n	800c12a <UART_SetConfig+0x346>
 800bf92:	2302      	movs	r3, #2
 800bf94:	77fb      	strb	r3, [r7, #31]
 800bf96:	e0c8      	b.n	800c12a <UART_SetConfig+0x346>
 800bf98:	2304      	movs	r3, #4
 800bf9a:	77fb      	strb	r3, [r7, #31]
 800bf9c:	e0c5      	b.n	800c12a <UART_SetConfig+0x346>
 800bf9e:	2308      	movs	r3, #8
 800bfa0:	77fb      	strb	r3, [r7, #31]
 800bfa2:	e0c2      	b.n	800c12a <UART_SetConfig+0x346>
 800bfa4:	2310      	movs	r3, #16
 800bfa6:	77fb      	strb	r3, [r7, #31]
 800bfa8:	e0bf      	b.n	800c12a <UART_SetConfig+0x346>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	4a45      	ldr	r2, [pc, #276]	; (800c0c4 <UART_SetConfig+0x2e0>)
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d125      	bne.n	800c000 <UART_SetConfig+0x21c>
 800bfb4:	4b3f      	ldr	r3, [pc, #252]	; (800c0b4 <UART_SetConfig+0x2d0>)
 800bfb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfc2:	d017      	beq.n	800bff4 <UART_SetConfig+0x210>
 800bfc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfc8:	d817      	bhi.n	800bffa <UART_SetConfig+0x216>
 800bfca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfce:	d00b      	beq.n	800bfe8 <UART_SetConfig+0x204>
 800bfd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfd4:	d811      	bhi.n	800bffa <UART_SetConfig+0x216>
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d003      	beq.n	800bfe2 <UART_SetConfig+0x1fe>
 800bfda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfde:	d006      	beq.n	800bfee <UART_SetConfig+0x20a>
 800bfe0:	e00b      	b.n	800bffa <UART_SetConfig+0x216>
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	77fb      	strb	r3, [r7, #31]
 800bfe6:	e0a0      	b.n	800c12a <UART_SetConfig+0x346>
 800bfe8:	2302      	movs	r3, #2
 800bfea:	77fb      	strb	r3, [r7, #31]
 800bfec:	e09d      	b.n	800c12a <UART_SetConfig+0x346>
 800bfee:	2304      	movs	r3, #4
 800bff0:	77fb      	strb	r3, [r7, #31]
 800bff2:	e09a      	b.n	800c12a <UART_SetConfig+0x346>
 800bff4:	2308      	movs	r3, #8
 800bff6:	77fb      	strb	r3, [r7, #31]
 800bff8:	e097      	b.n	800c12a <UART_SetConfig+0x346>
 800bffa:	2310      	movs	r3, #16
 800bffc:	77fb      	strb	r3, [r7, #31]
 800bffe:	e094      	b.n	800c12a <UART_SetConfig+0x346>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	4a30      	ldr	r2, [pc, #192]	; (800c0c8 <UART_SetConfig+0x2e4>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d125      	bne.n	800c056 <UART_SetConfig+0x272>
 800c00a:	4b2a      	ldr	r3, [pc, #168]	; (800c0b4 <UART_SetConfig+0x2d0>)
 800c00c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c010:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c014:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c018:	d017      	beq.n	800c04a <UART_SetConfig+0x266>
 800c01a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c01e:	d817      	bhi.n	800c050 <UART_SetConfig+0x26c>
 800c020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c024:	d00b      	beq.n	800c03e <UART_SetConfig+0x25a>
 800c026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c02a:	d811      	bhi.n	800c050 <UART_SetConfig+0x26c>
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d003      	beq.n	800c038 <UART_SetConfig+0x254>
 800c030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c034:	d006      	beq.n	800c044 <UART_SetConfig+0x260>
 800c036:	e00b      	b.n	800c050 <UART_SetConfig+0x26c>
 800c038:	2301      	movs	r3, #1
 800c03a:	77fb      	strb	r3, [r7, #31]
 800c03c:	e075      	b.n	800c12a <UART_SetConfig+0x346>
 800c03e:	2302      	movs	r3, #2
 800c040:	77fb      	strb	r3, [r7, #31]
 800c042:	e072      	b.n	800c12a <UART_SetConfig+0x346>
 800c044:	2304      	movs	r3, #4
 800c046:	77fb      	strb	r3, [r7, #31]
 800c048:	e06f      	b.n	800c12a <UART_SetConfig+0x346>
 800c04a:	2308      	movs	r3, #8
 800c04c:	77fb      	strb	r3, [r7, #31]
 800c04e:	e06c      	b.n	800c12a <UART_SetConfig+0x346>
 800c050:	2310      	movs	r3, #16
 800c052:	77fb      	strb	r3, [r7, #31]
 800c054:	e069      	b.n	800c12a <UART_SetConfig+0x346>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4a1c      	ldr	r2, [pc, #112]	; (800c0cc <UART_SetConfig+0x2e8>)
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d137      	bne.n	800c0d0 <UART_SetConfig+0x2ec>
 800c060:	4b14      	ldr	r3, [pc, #80]	; (800c0b4 <UART_SetConfig+0x2d0>)
 800c062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c066:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c06a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c06e:	d017      	beq.n	800c0a0 <UART_SetConfig+0x2bc>
 800c070:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c074:	d817      	bhi.n	800c0a6 <UART_SetConfig+0x2c2>
 800c076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c07a:	d00b      	beq.n	800c094 <UART_SetConfig+0x2b0>
 800c07c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c080:	d811      	bhi.n	800c0a6 <UART_SetConfig+0x2c2>
 800c082:	2b00      	cmp	r3, #0
 800c084:	d003      	beq.n	800c08e <UART_SetConfig+0x2aa>
 800c086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c08a:	d006      	beq.n	800c09a <UART_SetConfig+0x2b6>
 800c08c:	e00b      	b.n	800c0a6 <UART_SetConfig+0x2c2>
 800c08e:	2300      	movs	r3, #0
 800c090:	77fb      	strb	r3, [r7, #31]
 800c092:	e04a      	b.n	800c12a <UART_SetConfig+0x346>
 800c094:	2302      	movs	r3, #2
 800c096:	77fb      	strb	r3, [r7, #31]
 800c098:	e047      	b.n	800c12a <UART_SetConfig+0x346>
 800c09a:	2304      	movs	r3, #4
 800c09c:	77fb      	strb	r3, [r7, #31]
 800c09e:	e044      	b.n	800c12a <UART_SetConfig+0x346>
 800c0a0:	2308      	movs	r3, #8
 800c0a2:	77fb      	strb	r3, [r7, #31]
 800c0a4:	e041      	b.n	800c12a <UART_SetConfig+0x346>
 800c0a6:	2310      	movs	r3, #16
 800c0a8:	77fb      	strb	r3, [r7, #31]
 800c0aa:	e03e      	b.n	800c12a <UART_SetConfig+0x346>
 800c0ac:	efff69f3 	.word	0xefff69f3
 800c0b0:	40011000 	.word	0x40011000
 800c0b4:	40023800 	.word	0x40023800
 800c0b8:	40004400 	.word	0x40004400
 800c0bc:	40004800 	.word	0x40004800
 800c0c0:	40004c00 	.word	0x40004c00
 800c0c4:	40005000 	.word	0x40005000
 800c0c8:	40011400 	.word	0x40011400
 800c0cc:	40007800 	.word	0x40007800
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4a71      	ldr	r2, [pc, #452]	; (800c29c <UART_SetConfig+0x4b8>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d125      	bne.n	800c126 <UART_SetConfig+0x342>
 800c0da:	4b71      	ldr	r3, [pc, #452]	; (800c2a0 <UART_SetConfig+0x4bc>)
 800c0dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c0e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c0e8:	d017      	beq.n	800c11a <UART_SetConfig+0x336>
 800c0ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c0ee:	d817      	bhi.n	800c120 <UART_SetConfig+0x33c>
 800c0f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0f4:	d00b      	beq.n	800c10e <UART_SetConfig+0x32a>
 800c0f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0fa:	d811      	bhi.n	800c120 <UART_SetConfig+0x33c>
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d003      	beq.n	800c108 <UART_SetConfig+0x324>
 800c100:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c104:	d006      	beq.n	800c114 <UART_SetConfig+0x330>
 800c106:	e00b      	b.n	800c120 <UART_SetConfig+0x33c>
 800c108:	2300      	movs	r3, #0
 800c10a:	77fb      	strb	r3, [r7, #31]
 800c10c:	e00d      	b.n	800c12a <UART_SetConfig+0x346>
 800c10e:	2302      	movs	r3, #2
 800c110:	77fb      	strb	r3, [r7, #31]
 800c112:	e00a      	b.n	800c12a <UART_SetConfig+0x346>
 800c114:	2304      	movs	r3, #4
 800c116:	77fb      	strb	r3, [r7, #31]
 800c118:	e007      	b.n	800c12a <UART_SetConfig+0x346>
 800c11a:	2308      	movs	r3, #8
 800c11c:	77fb      	strb	r3, [r7, #31]
 800c11e:	e004      	b.n	800c12a <UART_SetConfig+0x346>
 800c120:	2310      	movs	r3, #16
 800c122:	77fb      	strb	r3, [r7, #31]
 800c124:	e001      	b.n	800c12a <UART_SetConfig+0x346>
 800c126:	2310      	movs	r3, #16
 800c128:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	69db      	ldr	r3, [r3, #28]
 800c12e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c132:	d15b      	bne.n	800c1ec <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800c134:	7ffb      	ldrb	r3, [r7, #31]
 800c136:	2b08      	cmp	r3, #8
 800c138:	d827      	bhi.n	800c18a <UART_SetConfig+0x3a6>
 800c13a:	a201      	add	r2, pc, #4	; (adr r2, 800c140 <UART_SetConfig+0x35c>)
 800c13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c140:	0800c165 	.word	0x0800c165
 800c144:	0800c16d 	.word	0x0800c16d
 800c148:	0800c175 	.word	0x0800c175
 800c14c:	0800c18b 	.word	0x0800c18b
 800c150:	0800c17b 	.word	0x0800c17b
 800c154:	0800c18b 	.word	0x0800c18b
 800c158:	0800c18b 	.word	0x0800c18b
 800c15c:	0800c18b 	.word	0x0800c18b
 800c160:	0800c183 	.word	0x0800c183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c164:	f7fc f8ae 	bl	80082c4 <HAL_RCC_GetPCLK1Freq>
 800c168:	61b8      	str	r0, [r7, #24]
        break;
 800c16a:	e013      	b.n	800c194 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c16c:	f7fc f8be 	bl	80082ec <HAL_RCC_GetPCLK2Freq>
 800c170:	61b8      	str	r0, [r7, #24]
        break;
 800c172:	e00f      	b.n	800c194 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c174:	4b4b      	ldr	r3, [pc, #300]	; (800c2a4 <UART_SetConfig+0x4c0>)
 800c176:	61bb      	str	r3, [r7, #24]
        break;
 800c178:	e00c      	b.n	800c194 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c17a:	f7fb ffe1 	bl	8008140 <HAL_RCC_GetSysClockFreq>
 800c17e:	61b8      	str	r0, [r7, #24]
        break;
 800c180:	e008      	b.n	800c194 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c186:	61bb      	str	r3, [r7, #24]
        break;
 800c188:	e004      	b.n	800c194 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800c18a:	2300      	movs	r3, #0
 800c18c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c18e:	2301      	movs	r3, #1
 800c190:	77bb      	strb	r3, [r7, #30]
        break;
 800c192:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c194:	69bb      	ldr	r3, [r7, #24]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d074      	beq.n	800c284 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	005a      	lsls	r2, r3, #1
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	085b      	lsrs	r3, r3, #1
 800c1a4:	441a      	add	r2, r3
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	685b      	ldr	r3, [r3, #4]
 800c1aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	2b0f      	cmp	r3, #15
 800c1b6:	d916      	bls.n	800c1e6 <UART_SetConfig+0x402>
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1be:	d212      	bcs.n	800c1e6 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	f023 030f 	bic.w	r3, r3, #15
 800c1c8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	085b      	lsrs	r3, r3, #1
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	f003 0307 	and.w	r3, r3, #7
 800c1d4:	b29a      	uxth	r2, r3
 800c1d6:	89fb      	ldrh	r3, [r7, #14]
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	89fa      	ldrh	r2, [r7, #14]
 800c1e2:	60da      	str	r2, [r3, #12]
 800c1e4:	e04e      	b.n	800c284 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	77bb      	strb	r3, [r7, #30]
 800c1ea:	e04b      	b.n	800c284 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c1ec:	7ffb      	ldrb	r3, [r7, #31]
 800c1ee:	2b08      	cmp	r3, #8
 800c1f0:	d827      	bhi.n	800c242 <UART_SetConfig+0x45e>
 800c1f2:	a201      	add	r2, pc, #4	; (adr r2, 800c1f8 <UART_SetConfig+0x414>)
 800c1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1f8:	0800c21d 	.word	0x0800c21d
 800c1fc:	0800c225 	.word	0x0800c225
 800c200:	0800c22d 	.word	0x0800c22d
 800c204:	0800c243 	.word	0x0800c243
 800c208:	0800c233 	.word	0x0800c233
 800c20c:	0800c243 	.word	0x0800c243
 800c210:	0800c243 	.word	0x0800c243
 800c214:	0800c243 	.word	0x0800c243
 800c218:	0800c23b 	.word	0x0800c23b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c21c:	f7fc f852 	bl	80082c4 <HAL_RCC_GetPCLK1Freq>
 800c220:	61b8      	str	r0, [r7, #24]
        break;
 800c222:	e013      	b.n	800c24c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c224:	f7fc f862 	bl	80082ec <HAL_RCC_GetPCLK2Freq>
 800c228:	61b8      	str	r0, [r7, #24]
        break;
 800c22a:	e00f      	b.n	800c24c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c22c:	4b1d      	ldr	r3, [pc, #116]	; (800c2a4 <UART_SetConfig+0x4c0>)
 800c22e:	61bb      	str	r3, [r7, #24]
        break;
 800c230:	e00c      	b.n	800c24c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c232:	f7fb ff85 	bl	8008140 <HAL_RCC_GetSysClockFreq>
 800c236:	61b8      	str	r0, [r7, #24]
        break;
 800c238:	e008      	b.n	800c24c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c23a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c23e:	61bb      	str	r3, [r7, #24]
        break;
 800c240:	e004      	b.n	800c24c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800c242:	2300      	movs	r3, #0
 800c244:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c246:	2301      	movs	r3, #1
 800c248:	77bb      	strb	r3, [r7, #30]
        break;
 800c24a:	bf00      	nop
    }

    if (pclk != 0U)
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d018      	beq.n	800c284 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	085a      	lsrs	r2, r3, #1
 800c258:	69bb      	ldr	r3, [r7, #24]
 800c25a:	441a      	add	r2, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	fbb2 f3f3 	udiv	r3, r2, r3
 800c264:	b29b      	uxth	r3, r3
 800c266:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	2b0f      	cmp	r3, #15
 800c26c:	d908      	bls.n	800c280 <UART_SetConfig+0x49c>
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c274:	d204      	bcs.n	800c280 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	693a      	ldr	r2, [r7, #16]
 800c27c:	60da      	str	r2, [r3, #12]
 800c27e:	e001      	b.n	800c284 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800c280:	2301      	movs	r3, #1
 800c282:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2200      	movs	r2, #0
 800c288:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2200      	movs	r2, #0
 800c28e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c290:	7fbb      	ldrb	r3, [r7, #30]
}
 800c292:	4618      	mov	r0, r3
 800c294:	3720      	adds	r7, #32
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	40007c00 	.word	0x40007c00
 800c2a0:	40023800 	.word	0x40023800
 800c2a4:	00f42400 	.word	0x00f42400

0800c2a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b083      	sub	sp, #12
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b4:	f003 0301 	and.w	r3, r3, #1
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d00a      	beq.n	800c2d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	430a      	orrs	r2, r1
 800c2d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d6:	f003 0302 	and.w	r3, r3, #2
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d00a      	beq.n	800c2f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	430a      	orrs	r2, r1
 800c2f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f8:	f003 0304 	and.w	r3, r3, #4
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d00a      	beq.n	800c316 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	430a      	orrs	r2, r1
 800c314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c31a:	f003 0308 	and.w	r3, r3, #8
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d00a      	beq.n	800c338 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	430a      	orrs	r2, r1
 800c336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c33c:	f003 0310 	and.w	r3, r3, #16
 800c340:	2b00      	cmp	r3, #0
 800c342:	d00a      	beq.n	800c35a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	689b      	ldr	r3, [r3, #8]
 800c34a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	430a      	orrs	r2, r1
 800c358:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c35e:	f003 0320 	and.w	r3, r3, #32
 800c362:	2b00      	cmp	r3, #0
 800c364:	d00a      	beq.n	800c37c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	689b      	ldr	r3, [r3, #8]
 800c36c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	430a      	orrs	r2, r1
 800c37a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c384:	2b00      	cmp	r3, #0
 800c386:	d01a      	beq.n	800c3be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	430a      	orrs	r2, r1
 800c39c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3a6:	d10a      	bne.n	800c3be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	685b      	ldr	r3, [r3, #4]
 800c3ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	430a      	orrs	r2, r1
 800c3bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d00a      	beq.n	800c3e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	430a      	orrs	r2, r1
 800c3de:	605a      	str	r2, [r3, #4]
  }
}
 800c3e0:	bf00      	nop
 800c3e2:	370c      	adds	r7, #12
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr

0800c3ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b086      	sub	sp, #24
 800c3f0:	af02      	add	r7, sp, #8
 800c3f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c3fc:	f7f7 fee6 	bl	80041cc <HAL_GetTick>
 800c400:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f003 0308 	and.w	r3, r3, #8
 800c40c:	2b08      	cmp	r3, #8
 800c40e:	d10e      	bne.n	800c42e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c410:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c414:	9300      	str	r3, [sp, #0]
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2200      	movs	r2, #0
 800c41a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f000 f817 	bl	800c452 <UART_WaitOnFlagUntilTimeout>
 800c424:	4603      	mov	r3, r0
 800c426:	2b00      	cmp	r3, #0
 800c428:	d001      	beq.n	800c42e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c42a:	2303      	movs	r3, #3
 800c42c:	e00d      	b.n	800c44a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2220      	movs	r2, #32
 800c432:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2220      	movs	r2, #32
 800c438:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2200      	movs	r2, #0
 800c43e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2200      	movs	r2, #0
 800c444:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c448:	2300      	movs	r3, #0
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3710      	adds	r7, #16
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}

0800c452 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c452:	b580      	push	{r7, lr}
 800c454:	b084      	sub	sp, #16
 800c456:	af00      	add	r7, sp, #0
 800c458:	60f8      	str	r0, [r7, #12]
 800c45a:	60b9      	str	r1, [r7, #8]
 800c45c:	603b      	str	r3, [r7, #0]
 800c45e:	4613      	mov	r3, r2
 800c460:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c462:	e05e      	b.n	800c522 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c464:	69bb      	ldr	r3, [r7, #24]
 800c466:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c46a:	d05a      	beq.n	800c522 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c46c:	f7f7 feae 	bl	80041cc <HAL_GetTick>
 800c470:	4602      	mov	r2, r0
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	1ad3      	subs	r3, r2, r3
 800c476:	69ba      	ldr	r2, [r7, #24]
 800c478:	429a      	cmp	r2, r3
 800c47a:	d302      	bcc.n	800c482 <UART_WaitOnFlagUntilTimeout+0x30>
 800c47c:	69bb      	ldr	r3, [r7, #24]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d11b      	bne.n	800c4ba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	681a      	ldr	r2, [r3, #0]
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c490:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	689a      	ldr	r2, [r3, #8]
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f022 0201 	bic.w	r2, r2, #1
 800c4a0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2220      	movs	r2, #32
 800c4a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2220      	movs	r2, #32
 800c4ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c4b6:	2303      	movs	r3, #3
 800c4b8:	e043      	b.n	800c542 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f003 0304 	and.w	r3, r3, #4
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d02c      	beq.n	800c522 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	69db      	ldr	r3, [r3, #28]
 800c4ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c4d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c4d6:	d124      	bne.n	800c522 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c4e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	681a      	ldr	r2, [r3, #0]
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c4f0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	689a      	ldr	r2, [r3, #8]
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f022 0201 	bic.w	r2, r2, #1
 800c500:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	2220      	movs	r2, #32
 800c506:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2220      	movs	r2, #32
 800c50c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2220      	movs	r2, #32
 800c512:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2200      	movs	r2, #0
 800c51a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c51e:	2303      	movs	r3, #3
 800c520:	e00f      	b.n	800c542 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	69da      	ldr	r2, [r3, #28]
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	4013      	ands	r3, r2
 800c52c:	68ba      	ldr	r2, [r7, #8]
 800c52e:	429a      	cmp	r2, r3
 800c530:	bf0c      	ite	eq
 800c532:	2301      	moveq	r3, #1
 800c534:	2300      	movne	r3, #0
 800c536:	b2db      	uxtb	r3, r3
 800c538:	461a      	mov	r2, r3
 800c53a:	79fb      	ldrb	r3, [r7, #7]
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d091      	beq.n	800c464 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c540:	2300      	movs	r3, #0
}
 800c542:	4618      	mov	r0, r3
 800c544:	3710      	adds	r7, #16
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
	...

0800c54c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c54c:	b480      	push	{r7}
 800c54e:	b085      	sub	sp, #20
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800c556:	2300      	movs	r3, #0
 800c558:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800c55a:	2300      	movs	r3, #0
 800c55c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	2b01      	cmp	r3, #1
 800c564:	d027      	beq.n	800c5b6 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c56c:	68fa      	ldr	r2, [r7, #12]
 800c56e:	4b2f      	ldr	r3, [pc, #188]	; (800c62c <FMC_SDRAM_Init+0xe0>)
 800c570:	4013      	ands	r3, r2
 800c572:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c57c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800c582:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800c588:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800c58e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800c594:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800c59a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800c5a0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c5a6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c5a8:	68fa      	ldr	r2, [r7, #12]
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	68fa      	ldr	r2, [r7, #12]
 800c5b2:	601a      	str	r2, [r3, #0]
 800c5b4:	e032      	b.n	800c61c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c5c2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c5cc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c5d2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c5d4:	68fa      	ldr	r2, [r7, #12]
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c5e0:	68ba      	ldr	r2, [r7, #8]
 800c5e2:	4b12      	ldr	r3, [pc, #72]	; (800c62c <FMC_SDRAM_Init+0xe0>)
 800c5e4:	4013      	ands	r3, r2
 800c5e6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c5f0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800c5f6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800c5fc:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800c602:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800c608:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c60a:	68ba      	ldr	r2, [r7, #8]
 800c60c:	4313      	orrs	r3, r2
 800c60e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	68ba      	ldr	r2, [r7, #8]
 800c61a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800c61c:	2300      	movs	r3, #0
}
 800c61e:	4618      	mov	r0, r3
 800c620:	3714      	adds	r7, #20
 800c622:	46bd      	mov	sp, r7
 800c624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c628:	4770      	bx	lr
 800c62a:	bf00      	nop
 800c62c:	ffff8000 	.word	0xffff8000

0800c630 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c630:	b480      	push	{r7}
 800c632:	b087      	sub	sp, #28
 800c634:	af00      	add	r7, sp, #0
 800c636:	60f8      	str	r0, [r7, #12]
 800c638:	60b9      	str	r1, [r7, #8]
 800c63a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800c63c:	2300      	movs	r3, #0
 800c63e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800c640:	2300      	movs	r3, #0
 800c642:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2b01      	cmp	r3, #1
 800c648:	d02e      	beq.n	800c6a8 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	689b      	ldr	r3, [r3, #8]
 800c64e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c656:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	3b01      	subs	r3, #1
 800c664:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c666:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	689b      	ldr	r3, [r3, #8]
 800c66c:	3b01      	subs	r3, #1
 800c66e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c670:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	3b01      	subs	r3, #1
 800c678:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c67a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	691b      	ldr	r3, [r3, #16]
 800c680:	3b01      	subs	r3, #1
 800c682:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c684:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	695b      	ldr	r3, [r3, #20]
 800c68a:	3b01      	subs	r3, #1
 800c68c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c68e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	699b      	ldr	r3, [r3, #24]
 800c694:	3b01      	subs	r3, #1
 800c696:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c698:	4313      	orrs	r3, r2
 800c69a:	697a      	ldr	r2, [r7, #20]
 800c69c:	4313      	orrs	r3, r2
 800c69e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	697a      	ldr	r2, [r7, #20]
 800c6a4:	609a      	str	r2, [r3, #8]
 800c6a6:	e039      	b.n	800c71c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	689b      	ldr	r3, [r3, #8]
 800c6ac:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800c6ae:	697a      	ldr	r2, [r7, #20]
 800c6b0:	4b1e      	ldr	r3, [pc, #120]	; (800c72c <FMC_SDRAM_Timing_Init+0xfc>)
 800c6b2:	4013      	ands	r3, r2
 800c6b4:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	68db      	ldr	r3, [r3, #12]
 800c6ba:	3b01      	subs	r3, #1
 800c6bc:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	695b      	ldr	r3, [r3, #20]
 800c6c2:	3b01      	subs	r3, #1
 800c6c4:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	697a      	ldr	r2, [r7, #20]
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	68db      	ldr	r3, [r3, #12]
 800c6d2:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c6da:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	3b01      	subs	r3, #1
 800c6e8:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c6ea:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	689b      	ldr	r3, [r3, #8]
 800c6f0:	3b01      	subs	r3, #1
 800c6f2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c6f4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	691b      	ldr	r3, [r3, #16]
 800c6fa:	3b01      	subs	r3, #1
 800c6fc:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c6fe:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	699b      	ldr	r3, [r3, #24]
 800c704:	3b01      	subs	r3, #1
 800c706:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c708:	4313      	orrs	r3, r2
 800c70a:	693a      	ldr	r2, [r7, #16]
 800c70c:	4313      	orrs	r3, r2
 800c70e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	697a      	ldr	r2, [r7, #20]
 800c714:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	693a      	ldr	r2, [r7, #16]
 800c71a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800c71c:	2300      	movs	r3, #0
}
 800c71e:	4618      	mov	r0, r3
 800c720:	371c      	adds	r7, #28
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr
 800c72a:	bf00      	nop
 800c72c:	ff0f0fff 	.word	0xff0f0fff

0800c730 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c730:	b084      	sub	sp, #16
 800c732:	b480      	push	{r7}
 800c734:	b085      	sub	sp, #20
 800c736:	af00      	add	r7, sp, #0
 800c738:	6078      	str	r0, [r7, #4]
 800c73a:	f107 001c 	add.w	r0, r7, #28
 800c73e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c742:	2300      	movs	r3, #0
 800c744:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c746:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c748:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c74a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c74e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c750:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c752:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c756:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c75a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c75c:	68fa      	ldr	r2, [r7, #12]
 800c75e:	4313      	orrs	r3, r2
 800c760:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	685a      	ldr	r2, [r3, #4]
 800c766:	4b07      	ldr	r3, [pc, #28]	; (800c784 <SDMMC_Init+0x54>)
 800c768:	4013      	ands	r3, r2
 800c76a:	68fa      	ldr	r2, [r7, #12]
 800c76c:	431a      	orrs	r2, r3
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c772:	2300      	movs	r3, #0
}
 800c774:	4618      	mov	r0, r3
 800c776:	3714      	adds	r7, #20
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	b004      	add	sp, #16
 800c780:	4770      	bx	lr
 800c782:	bf00      	nop
 800c784:	ffff8100 	.word	0xffff8100

0800c788 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c788:	b480      	push	{r7}
 800c78a:	b083      	sub	sp, #12
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c796:	4618      	mov	r0, r3
 800c798:	370c      	adds	r7, #12
 800c79a:	46bd      	mov	sp, r7
 800c79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a0:	4770      	bx	lr

0800c7a2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800c7a2:	b480      	push	{r7}
 800c7a4:	b083      	sub	sp, #12
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	6078      	str	r0, [r7, #4]
 800c7aa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2203      	movs	r2, #3
 800c7d0:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c7d2:	2002      	movs	r0, #2
 800c7d4:	f7f7 fd06 	bl	80041e4 <HAL_Delay>
  
  return HAL_OK;
 800c7d8:	2300      	movs	r3, #0
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800c7e2:	b480      	push	{r7}
 800c7e4:	b083      	sub	sp, #12
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f003 0303 	and.w	r3, r3, #3
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	370c      	adds	r7, #12
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fc:	4770      	bx	lr
	...

0800c800 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c800:	b480      	push	{r7}
 800c802:	b085      	sub	sp, #20
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c80a:	2300      	movs	r3, #0
 800c80c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c81e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c824:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c82a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c82c:	68fa      	ldr	r2, [r7, #12]
 800c82e:	4313      	orrs	r3, r2
 800c830:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	68da      	ldr	r2, [r3, #12]
 800c836:	4b06      	ldr	r3, [pc, #24]	; (800c850 <SDMMC_SendCommand+0x50>)
 800c838:	4013      	ands	r3, r2
 800c83a:	68fa      	ldr	r2, [r7, #12]
 800c83c:	431a      	orrs	r2, r3
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c842:	2300      	movs	r3, #0
}
 800c844:	4618      	mov	r0, r3
 800c846:	3714      	adds	r7, #20
 800c848:	46bd      	mov	sp, r7
 800c84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84e:	4770      	bx	lr
 800c850:	fffff000 	.word	0xfffff000

0800c854 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c854:	b480      	push	{r7}
 800c856:	b083      	sub	sp, #12
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	691b      	ldr	r3, [r3, #16]
 800c860:	b2db      	uxtb	r3, r3
}
 800c862:	4618      	mov	r0, r3
 800c864:	370c      	adds	r7, #12
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr

0800c86e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c86e:	b480      	push	{r7}
 800c870:	b085      	sub	sp, #20
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
 800c876:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	3314      	adds	r3, #20
 800c87c:	461a      	mov	r2, r3
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	4413      	add	r3, r2
 800c882:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
}  
 800c888:	4618      	mov	r0, r3
 800c88a:	3714      	adds	r7, #20
 800c88c:	46bd      	mov	sp, r7
 800c88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c892:	4770      	bx	lr

0800c894 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c894:	b480      	push	{r7}
 800c896:	b085      	sub	sp, #20
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	681a      	ldr	r2, [r3, #0]
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	685a      	ldr	r2, [r3, #4]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c8ba:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c8c0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c8c6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c8c8:	68fa      	ldr	r2, [r7, #12]
 800c8ca:	4313      	orrs	r3, r2
 800c8cc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	431a      	orrs	r2, r3
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c8de:	2300      	movs	r3, #0

}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3714      	adds	r7, #20
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr

0800c8ec <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b088      	sub	sp, #32
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c8fa:	2310      	movs	r3, #16
 800c8fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c8fe:	2340      	movs	r3, #64	; 0x40
 800c900:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c902:	2300      	movs	r3, #0
 800c904:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c90a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c90c:	f107 0308 	add.w	r3, r7, #8
 800c910:	4619      	mov	r1, r3
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f7ff ff74 	bl	800c800 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c918:	f241 3288 	movw	r2, #5000	; 0x1388
 800c91c:	2110      	movs	r1, #16
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 fa46 	bl	800cdb0 <SDMMC_GetCmdResp1>
 800c924:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c926:	69fb      	ldr	r3, [r7, #28]
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3720      	adds	r7, #32
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b088      	sub	sp, #32
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c93e:	2311      	movs	r3, #17
 800c940:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c942:	2340      	movs	r3, #64	; 0x40
 800c944:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c946:	2300      	movs	r3, #0
 800c948:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c94a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c94e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c950:	f107 0308 	add.w	r3, r7, #8
 800c954:	4619      	mov	r1, r3
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f7ff ff52 	bl	800c800 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c95c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c960:	2111      	movs	r1, #17
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f000 fa24 	bl	800cdb0 <SDMMC_GetCmdResp1>
 800c968:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c96a:	69fb      	ldr	r3, [r7, #28]
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3720      	adds	r7, #32
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}

0800c974 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b088      	sub	sp, #32
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
 800c97c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c982:	2312      	movs	r3, #18
 800c984:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c986:	2340      	movs	r3, #64	; 0x40
 800c988:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c98a:	2300      	movs	r3, #0
 800c98c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c98e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c992:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c994:	f107 0308 	add.w	r3, r7, #8
 800c998:	4619      	mov	r1, r3
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f7ff ff30 	bl	800c800 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c9a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9a4:	2112      	movs	r1, #18
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f000 fa02 	bl	800cdb0 <SDMMC_GetCmdResp1>
 800c9ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9ae:	69fb      	ldr	r3, [r7, #28]
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3720      	adds	r7, #32
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b088      	sub	sp, #32
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c9c6:	2318      	movs	r3, #24
 800c9c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9ca:	2340      	movs	r3, #64	; 0x40
 800c9cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9d8:	f107 0308 	add.w	r3, r7, #8
 800c9dc:	4619      	mov	r1, r3
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f7ff ff0e 	bl	800c800 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c9e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9e8:	2118      	movs	r1, #24
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f000 f9e0 	bl	800cdb0 <SDMMC_GetCmdResp1>
 800c9f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9f2:	69fb      	ldr	r3, [r7, #28]
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3720      	adds	r7, #32
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b088      	sub	sp, #32
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ca0a:	2319      	movs	r3, #25
 800ca0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca0e:	2340      	movs	r3, #64	; 0x40
 800ca10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca12:	2300      	movs	r3, #0
 800ca14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca1c:	f107 0308 	add.w	r3, r7, #8
 800ca20:	4619      	mov	r1, r3
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f7ff feec 	bl	800c800 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ca28:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca2c:	2119      	movs	r1, #25
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f000 f9be 	bl	800cdb0 <SDMMC_GetCmdResp1>
 800ca34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca36:	69fb      	ldr	r3, [r7, #28]
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3720      	adds	r7, #32
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}

0800ca40 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b088      	sub	sp, #32
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ca4c:	230c      	movs	r3, #12
 800ca4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca50:	2340      	movs	r3, #64	; 0x40
 800ca52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca54:	2300      	movs	r3, #0
 800ca56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca5e:	f107 0308 	add.w	r3, r7, #8
 800ca62:	4619      	mov	r1, r3
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f7ff fecb 	bl	800c800 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ca6a:	4a05      	ldr	r2, [pc, #20]	; (800ca80 <SDMMC_CmdStopTransfer+0x40>)
 800ca6c:	210c      	movs	r1, #12
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f000 f99e 	bl	800cdb0 <SDMMC_GetCmdResp1>
 800ca74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca76:	69fb      	ldr	r3, [r7, #28]
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3720      	adds	r7, #32
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}
 800ca80:	05f5e100 	.word	0x05f5e100

0800ca84 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b08a      	sub	sp, #40	; 0x28
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ca94:	2307      	movs	r3, #7
 800ca96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca98:	2340      	movs	r3, #64	; 0x40
 800ca9a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800caa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800caa4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800caa6:	f107 0310 	add.w	r3, r7, #16
 800caaa:	4619      	mov	r1, r3
 800caac:	68f8      	ldr	r0, [r7, #12]
 800caae:	f7ff fea7 	bl	800c800 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800cab2:	f241 3288 	movw	r2, #5000	; 0x1388
 800cab6:	2107      	movs	r1, #7
 800cab8:	68f8      	ldr	r0, [r7, #12]
 800caba:	f000 f979 	bl	800cdb0 <SDMMC_GetCmdResp1>
 800cabe:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800cac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3728      	adds	r7, #40	; 0x28
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}

0800caca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800caca:	b580      	push	{r7, lr}
 800cacc:	b088      	sub	sp, #32
 800cace:	af00      	add	r7, sp, #0
 800cad0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800cad2:	2300      	movs	r3, #0
 800cad4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cad6:	2300      	movs	r3, #0
 800cad8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800cada:	2300      	movs	r3, #0
 800cadc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cade:	2300      	movs	r3, #0
 800cae0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cae6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cae8:	f107 0308 	add.w	r3, r7, #8
 800caec:	4619      	mov	r1, r3
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f7ff fe86 	bl	800c800 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 f92f 	bl	800cd58 <SDMMC_GetCmdError>
 800cafa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cafc:	69fb      	ldr	r3, [r7, #28]
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3720      	adds	r7, #32
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}

0800cb06 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b088      	sub	sp, #32
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cb0e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800cb12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cb14:	2308      	movs	r3, #8
 800cb16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb18:	2340      	movs	r3, #64	; 0x40
 800cb1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb26:	f107 0308 	add.w	r3, r7, #8
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f7ff fe67 	bl	800c800 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 fb26 	bl	800d184 <SDMMC_GetCmdResp7>
 800cb38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb3a:	69fb      	ldr	r3, [r7, #28]
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3720      	adds	r7, #32
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b088      	sub	sp, #32
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cb52:	2337      	movs	r3, #55	; 0x37
 800cb54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb56:	2340      	movs	r3, #64	; 0x40
 800cb58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb64:	f107 0308 	add.w	r3, r7, #8
 800cb68:	4619      	mov	r1, r3
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f7ff fe48 	bl	800c800 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800cb70:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb74:	2137      	movs	r1, #55	; 0x37
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f000 f91a 	bl	800cdb0 <SDMMC_GetCmdResp1>
 800cb7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb7e:	69fb      	ldr	r3, [r7, #28]
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3720      	adds	r7, #32
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}

0800cb88 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b088      	sub	sp, #32
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800cb92:	683a      	ldr	r2, [r7, #0]
 800cb94:	4b0d      	ldr	r3, [pc, #52]	; (800cbcc <SDMMC_CmdAppOperCommand+0x44>)
 800cb96:	4313      	orrs	r3, r2
 800cb98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cb9a:	2329      	movs	r3, #41	; 0x29
 800cb9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb9e:	2340      	movs	r3, #64	; 0x40
 800cba0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cba2:	2300      	movs	r3, #0
 800cba4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbac:	f107 0308 	add.w	r3, r7, #8
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f7ff fe24 	bl	800c800 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f000 fa2f 	bl	800d01c <SDMMC_GetCmdResp3>
 800cbbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbc0:	69fb      	ldr	r3, [r7, #28]
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3720      	adds	r7, #32
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	80100000 	.word	0x80100000

0800cbd0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b088      	sub	sp, #32
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800cbde:	2306      	movs	r3, #6
 800cbe0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbe2:	2340      	movs	r3, #64	; 0x40
 800cbe4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbf0:	f107 0308 	add.w	r3, r7, #8
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f7ff fe02 	bl	800c800 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800cbfc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc00:	2106      	movs	r1, #6
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f000 f8d4 	bl	800cdb0 <SDMMC_GetCmdResp1>
 800cc08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc0a:	69fb      	ldr	r3, [r7, #28]
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3720      	adds	r7, #32
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b088      	sub	sp, #32
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cc20:	2333      	movs	r3, #51	; 0x33
 800cc22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc24:	2340      	movs	r3, #64	; 0x40
 800cc26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc32:	f107 0308 	add.w	r3, r7, #8
 800cc36:	4619      	mov	r1, r3
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f7ff fde1 	bl	800c800 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800cc3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc42:	2133      	movs	r1, #51	; 0x33
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 f8b3 	bl	800cdb0 <SDMMC_GetCmdResp1>
 800cc4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc4c:	69fb      	ldr	r3, [r7, #28]
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3720      	adds	r7, #32
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}

0800cc56 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800cc56:	b580      	push	{r7, lr}
 800cc58:	b088      	sub	sp, #32
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cc62:	2302      	movs	r3, #2
 800cc64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cc66:	23c0      	movs	r3, #192	; 0xc0
 800cc68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc74:	f107 0308 	add.w	r3, r7, #8
 800cc78:	4619      	mov	r1, r3
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f7ff fdc0 	bl	800c800 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f000 f983 	bl	800cf8c <SDMMC_GetCmdResp2>
 800cc86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc88:	69fb      	ldr	r3, [r7, #28]
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3720      	adds	r7, #32
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}

0800cc92 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cc92:	b580      	push	{r7, lr}
 800cc94:	b088      	sub	sp, #32
 800cc96:	af00      	add	r7, sp, #0
 800cc98:	6078      	str	r0, [r7, #4]
 800cc9a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cca0:	2309      	movs	r3, #9
 800cca2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cca4:	23c0      	movs	r3, #192	; 0xc0
 800cca6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccb2:	f107 0308 	add.w	r3, r7, #8
 800ccb6:	4619      	mov	r1, r3
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f7ff fda1 	bl	800c800 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 f964 	bl	800cf8c <SDMMC_GetCmdResp2>
 800ccc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccc6:	69fb      	ldr	r3, [r7, #28]
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3720      	adds	r7, #32
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b088      	sub	sp, #32
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ccde:	2303      	movs	r3, #3
 800cce0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cce2:	2340      	movs	r3, #64	; 0x40
 800cce4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cce6:	2300      	movs	r3, #0
 800cce8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccf0:	f107 0308 	add.w	r3, r7, #8
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f7ff fd82 	bl	800c800 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ccfc:	683a      	ldr	r2, [r7, #0]
 800ccfe:	2103      	movs	r1, #3
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 f9c9 	bl	800d098 <SDMMC_GetCmdResp6>
 800cd06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd08:	69fb      	ldr	r3, [r7, #28]
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3720      	adds	r7, #32
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}

0800cd12 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cd12:	b580      	push	{r7, lr}
 800cd14:	b088      	sub	sp, #32
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]
 800cd1a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cd20:	230d      	movs	r3, #13
 800cd22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd24:	2340      	movs	r3, #64	; 0x40
 800cd26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd32:	f107 0308 	add.w	r3, r7, #8
 800cd36:	4619      	mov	r1, r3
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f7ff fd61 	bl	800c800 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800cd3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd42:	210d      	movs	r1, #13
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f000 f833 	bl	800cdb0 <SDMMC_GetCmdResp1>
 800cd4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd4c:	69fb      	ldr	r3, [r7, #28]
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3720      	adds	r7, #32
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}
	...

0800cd58 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b085      	sub	sp, #20
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cd60:	4b11      	ldr	r3, [pc, #68]	; (800cda8 <SDMMC_GetCmdError+0x50>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4a11      	ldr	r2, [pc, #68]	; (800cdac <SDMMC_GetCmdError+0x54>)
 800cd66:	fba2 2303 	umull	r2, r3, r2, r3
 800cd6a:	0a5b      	lsrs	r3, r3, #9
 800cd6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd70:	fb02 f303 	mul.w	r3, r2, r3
 800cd74:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	1e5a      	subs	r2, r3, #1
 800cd7a:	60fa      	str	r2, [r7, #12]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d102      	bne.n	800cd86 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd84:	e009      	b.n	800cd9a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d0f1      	beq.n	800cd76 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	22c5      	movs	r2, #197	; 0xc5
 800cd96:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800cd98:	2300      	movs	r3, #0
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3714      	adds	r7, #20
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda4:	4770      	bx	lr
 800cda6:	bf00      	nop
 800cda8:	20000000 	.word	0x20000000
 800cdac:	10624dd3 	.word	0x10624dd3

0800cdb0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b088      	sub	sp, #32
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	60f8      	str	r0, [r7, #12]
 800cdb8:	460b      	mov	r3, r1
 800cdba:	607a      	str	r2, [r7, #4]
 800cdbc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cdbe:	4b70      	ldr	r3, [pc, #448]	; (800cf80 <SDMMC_GetCmdResp1+0x1d0>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	4a70      	ldr	r2, [pc, #448]	; (800cf84 <SDMMC_GetCmdResp1+0x1d4>)
 800cdc4:	fba2 2303 	umull	r2, r3, r2, r3
 800cdc8:	0a5a      	lsrs	r2, r3, #9
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	fb02 f303 	mul.w	r3, r2, r3
 800cdd0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800cdd2:	69fb      	ldr	r3, [r7, #28]
 800cdd4:	1e5a      	subs	r2, r3, #1
 800cdd6:	61fa      	str	r2, [r7, #28]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d102      	bne.n	800cde2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cddc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cde0:	e0c9      	b.n	800cf76 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cde6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cde8:	69bb      	ldr	r3, [r7, #24]
 800cdea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d0ef      	beq.n	800cdd2 <SDMMC_GetCmdResp1+0x22>
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d1ea      	bne.n	800cdd2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce00:	f003 0304 	and.w	r3, r3, #4
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d004      	beq.n	800ce12 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	2204      	movs	r2, #4
 800ce0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce0e:	2304      	movs	r3, #4
 800ce10:	e0b1      	b.n	800cf76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce16:	f003 0301 	and.w	r3, r3, #1
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d004      	beq.n	800ce28 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	2201      	movs	r2, #1
 800ce22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce24:	2301      	movs	r3, #1
 800ce26:	e0a6      	b.n	800cf76 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	22c5      	movs	r2, #197	; 0xc5
 800ce2c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ce2e:	68f8      	ldr	r0, [r7, #12]
 800ce30:	f7ff fd10 	bl	800c854 <SDMMC_GetCommandResponse>
 800ce34:	4603      	mov	r3, r0
 800ce36:	461a      	mov	r2, r3
 800ce38:	7afb      	ldrb	r3, [r7, #11]
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d001      	beq.n	800ce42 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	e099      	b.n	800cf76 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ce42:	2100      	movs	r1, #0
 800ce44:	68f8      	ldr	r0, [r7, #12]
 800ce46:	f7ff fd12 	bl	800c86e <SDMMC_GetResponse>
 800ce4a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ce4c:	697a      	ldr	r2, [r7, #20]
 800ce4e:	4b4e      	ldr	r3, [pc, #312]	; (800cf88 <SDMMC_GetCmdResp1+0x1d8>)
 800ce50:	4013      	ands	r3, r2
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d101      	bne.n	800ce5a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ce56:	2300      	movs	r3, #0
 800ce58:	e08d      	b.n	800cf76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	da02      	bge.n	800ce66 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ce60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ce64:	e087      	b.n	800cf76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d001      	beq.n	800ce74 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ce70:	2340      	movs	r3, #64	; 0x40
 800ce72:	e080      	b.n	800cf76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d001      	beq.n	800ce82 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ce7e:	2380      	movs	r3, #128	; 0x80
 800ce80:	e079      	b.n	800cf76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d002      	beq.n	800ce92 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ce8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce90:	e071      	b.n	800cf76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d002      	beq.n	800cea2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ce9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cea0:	e069      	b.n	800cf76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d002      	beq.n	800ceb2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ceac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ceb0:	e061      	b.n	800cf76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d002      	beq.n	800cec2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cebc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cec0:	e059      	b.n	800cf76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d002      	beq.n	800ced2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ced0:	e051      	b.n	800cf76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d002      	beq.n	800cee2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cedc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cee0:	e049      	b.n	800cf76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d002      	beq.n	800cef2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ceec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cef0:	e041      	b.n	800cf76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d002      	beq.n	800cf02 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800cefc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf00:	e039      	b.n	800cf76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d002      	beq.n	800cf12 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cf0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cf10:	e031      	b.n	800cf76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d002      	beq.n	800cf22 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cf1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cf20:	e029      	b.n	800cf76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d002      	beq.n	800cf32 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cf2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cf30:	e021      	b.n	800cf76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d002      	beq.n	800cf42 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cf3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cf40:	e019      	b.n	800cf76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d002      	beq.n	800cf52 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cf4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cf50:	e011      	b.n	800cf76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d002      	beq.n	800cf62 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cf5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cf60:	e009      	b.n	800cf76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	f003 0308 	and.w	r3, r3, #8
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d002      	beq.n	800cf72 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cf6c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cf70:	e001      	b.n	800cf76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cf72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3720      	adds	r7, #32
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	20000000 	.word	0x20000000
 800cf84:	10624dd3 	.word	0x10624dd3
 800cf88:	fdffe008 	.word	0xfdffe008

0800cf8c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b085      	sub	sp, #20
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cf94:	4b1f      	ldr	r3, [pc, #124]	; (800d014 <SDMMC_GetCmdResp2+0x88>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	4a1f      	ldr	r2, [pc, #124]	; (800d018 <SDMMC_GetCmdResp2+0x8c>)
 800cf9a:	fba2 2303 	umull	r2, r3, r2, r3
 800cf9e:	0a5b      	lsrs	r3, r3, #9
 800cfa0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfa4:	fb02 f303 	mul.w	r3, r2, r3
 800cfa8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	1e5a      	subs	r2, r3, #1
 800cfae:	60fa      	str	r2, [r7, #12]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d102      	bne.n	800cfba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cfb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cfb8:	e026      	b.n	800d008 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfbe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d0ef      	beq.n	800cfaa <SDMMC_GetCmdResp2+0x1e>
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d1ea      	bne.n	800cfaa <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfd8:	f003 0304 	and.w	r3, r3, #4
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d004      	beq.n	800cfea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2204      	movs	r2, #4
 800cfe4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cfe6:	2304      	movs	r3, #4
 800cfe8:	e00e      	b.n	800d008 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfee:	f003 0301 	and.w	r3, r3, #1
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d004      	beq.n	800d000 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2201      	movs	r2, #1
 800cffa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cffc:	2301      	movs	r3, #1
 800cffe:	e003      	b.n	800d008 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	22c5      	movs	r2, #197	; 0xc5
 800d004:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d006:	2300      	movs	r3, #0
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3714      	adds	r7, #20
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr
 800d014:	20000000 	.word	0x20000000
 800d018:	10624dd3 	.word	0x10624dd3

0800d01c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d01c:	b480      	push	{r7}
 800d01e:	b085      	sub	sp, #20
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d024:	4b1a      	ldr	r3, [pc, #104]	; (800d090 <SDMMC_GetCmdResp3+0x74>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4a1a      	ldr	r2, [pc, #104]	; (800d094 <SDMMC_GetCmdResp3+0x78>)
 800d02a:	fba2 2303 	umull	r2, r3, r2, r3
 800d02e:	0a5b      	lsrs	r3, r3, #9
 800d030:	f241 3288 	movw	r2, #5000	; 0x1388
 800d034:	fb02 f303 	mul.w	r3, r2, r3
 800d038:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	1e5a      	subs	r2, r3, #1
 800d03e:	60fa      	str	r2, [r7, #12]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d102      	bne.n	800d04a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d044:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d048:	e01b      	b.n	800d082 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d04e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d056:	2b00      	cmp	r3, #0
 800d058:	d0ef      	beq.n	800d03a <SDMMC_GetCmdResp3+0x1e>
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d060:	2b00      	cmp	r3, #0
 800d062:	d1ea      	bne.n	800d03a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d068:	f003 0304 	and.w	r3, r3, #4
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d004      	beq.n	800d07a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2204      	movs	r2, #4
 800d074:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d076:	2304      	movs	r3, #4
 800d078:	e003      	b.n	800d082 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	22c5      	movs	r2, #197	; 0xc5
 800d07e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d080:	2300      	movs	r3, #0
}
 800d082:	4618      	mov	r0, r3
 800d084:	3714      	adds	r7, #20
 800d086:	46bd      	mov	sp, r7
 800d088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08c:	4770      	bx	lr
 800d08e:	bf00      	nop
 800d090:	20000000 	.word	0x20000000
 800d094:	10624dd3 	.word	0x10624dd3

0800d098 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b088      	sub	sp, #32
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	60f8      	str	r0, [r7, #12]
 800d0a0:	460b      	mov	r3, r1
 800d0a2:	607a      	str	r2, [r7, #4]
 800d0a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d0a6:	4b35      	ldr	r3, [pc, #212]	; (800d17c <SDMMC_GetCmdResp6+0xe4>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4a35      	ldr	r2, [pc, #212]	; (800d180 <SDMMC_GetCmdResp6+0xe8>)
 800d0ac:	fba2 2303 	umull	r2, r3, r2, r3
 800d0b0:	0a5b      	lsrs	r3, r3, #9
 800d0b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0b6:	fb02 f303 	mul.w	r3, r2, r3
 800d0ba:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d0bc:	69fb      	ldr	r3, [r7, #28]
 800d0be:	1e5a      	subs	r2, r3, #1
 800d0c0:	61fa      	str	r2, [r7, #28]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d102      	bne.n	800d0cc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d0c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d0ca:	e052      	b.n	800d172 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0d0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d0d2:	69bb      	ldr	r3, [r7, #24]
 800d0d4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d0ef      	beq.n	800d0bc <SDMMC_GetCmdResp6+0x24>
 800d0dc:	69bb      	ldr	r3, [r7, #24]
 800d0de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d1ea      	bne.n	800d0bc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0ea:	f003 0304 	and.w	r3, r3, #4
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d004      	beq.n	800d0fc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	2204      	movs	r2, #4
 800d0f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d0f8:	2304      	movs	r3, #4
 800d0fa:	e03a      	b.n	800d172 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d100:	f003 0301 	and.w	r3, r3, #1
 800d104:	2b00      	cmp	r3, #0
 800d106:	d004      	beq.n	800d112 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	2201      	movs	r2, #1
 800d10c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d10e:	2301      	movs	r3, #1
 800d110:	e02f      	b.n	800d172 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d112:	68f8      	ldr	r0, [r7, #12]
 800d114:	f7ff fb9e 	bl	800c854 <SDMMC_GetCommandResponse>
 800d118:	4603      	mov	r3, r0
 800d11a:	461a      	mov	r2, r3
 800d11c:	7afb      	ldrb	r3, [r7, #11]
 800d11e:	4293      	cmp	r3, r2
 800d120:	d001      	beq.n	800d126 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d122:	2301      	movs	r3, #1
 800d124:	e025      	b.n	800d172 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	22c5      	movs	r2, #197	; 0xc5
 800d12a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d12c:	2100      	movs	r1, #0
 800d12e:	68f8      	ldr	r0, [r7, #12]
 800d130:	f7ff fb9d 	bl	800c86e <SDMMC_GetResponse>
 800d134:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d106      	bne.n	800d14e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	0c1b      	lsrs	r3, r3, #16
 800d144:	b29a      	uxth	r2, r3
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d14a:	2300      	movs	r3, #0
 800d14c:	e011      	b.n	800d172 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d154:	2b00      	cmp	r3, #0
 800d156:	d002      	beq.n	800d15e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d158:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d15c:	e009      	b.n	800d172 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d164:	2b00      	cmp	r3, #0
 800d166:	d002      	beq.n	800d16e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d16c:	e001      	b.n	800d172 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d16e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d172:	4618      	mov	r0, r3
 800d174:	3720      	adds	r7, #32
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	bf00      	nop
 800d17c:	20000000 	.word	0x20000000
 800d180:	10624dd3 	.word	0x10624dd3

0800d184 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d184:	b480      	push	{r7}
 800d186:	b085      	sub	sp, #20
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d18c:	4b22      	ldr	r3, [pc, #136]	; (800d218 <SDMMC_GetCmdResp7+0x94>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4a22      	ldr	r2, [pc, #136]	; (800d21c <SDMMC_GetCmdResp7+0x98>)
 800d192:	fba2 2303 	umull	r2, r3, r2, r3
 800d196:	0a5b      	lsrs	r3, r3, #9
 800d198:	f241 3288 	movw	r2, #5000	; 0x1388
 800d19c:	fb02 f303 	mul.w	r3, r2, r3
 800d1a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	1e5a      	subs	r2, r3, #1
 800d1a6:	60fa      	str	r2, [r7, #12]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d102      	bne.n	800d1b2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d1ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d1b0:	e02c      	b.n	800d20c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d0ef      	beq.n	800d1a2 <SDMMC_GetCmdResp7+0x1e>
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d1ea      	bne.n	800d1a2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1d0:	f003 0304 	and.w	r3, r3, #4
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d004      	beq.n	800d1e2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2204      	movs	r2, #4
 800d1dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d1de:	2304      	movs	r3, #4
 800d1e0:	e014      	b.n	800d20c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1e6:	f003 0301 	and.w	r3, r3, #1
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d004      	beq.n	800d1f8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	e009      	b.n	800d20c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d200:	2b00      	cmp	r3, #0
 800d202:	d002      	beq.n	800d20a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2240      	movs	r2, #64	; 0x40
 800d208:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d20a:	2300      	movs	r3, #0
  
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3714      	adds	r7, #20
 800d210:	46bd      	mov	sp, r7
 800d212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d216:	4770      	bx	lr
 800d218:	20000000 	.word	0x20000000
 800d21c:	10624dd3 	.word	0x10624dd3

0800d220 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d220:	b084      	sub	sp, #16
 800d222:	b580      	push	{r7, lr}
 800d224:	b084      	sub	sp, #16
 800d226:	af00      	add	r7, sp, #0
 800d228:	6078      	str	r0, [r7, #4]
 800d22a:	f107 001c 	add.w	r0, r7, #28
 800d22e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d234:	2b01      	cmp	r3, #1
 800d236:	d120      	bne.n	800d27a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d23c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	68da      	ldr	r2, [r3, #12]
 800d248:	4b20      	ldr	r3, [pc, #128]	; (800d2cc <USB_CoreInit+0xac>)
 800d24a:	4013      	ands	r3, r2
 800d24c:	687a      	ldr	r2, [r7, #4]
 800d24e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	68db      	ldr	r3, [r3, #12]
 800d254:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d25c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d25e:	2b01      	cmp	r3, #1
 800d260:	d105      	bne.n	800d26e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	68db      	ldr	r3, [r3, #12]
 800d266:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f000 f942 	bl	800d4f8 <USB_CoreReset>
 800d274:	4603      	mov	r3, r0
 800d276:	73fb      	strb	r3, [r7, #15]
 800d278:	e010      	b.n	800d29c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	68db      	ldr	r3, [r3, #12]
 800d27e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f000 f936 	bl	800d4f8 <USB_CoreReset>
 800d28c:	4603      	mov	r3, r0
 800d28e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d294:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800d29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29e:	2b01      	cmp	r3, #1
 800d2a0:	d10b      	bne.n	800d2ba <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	689b      	ldr	r3, [r3, #8]
 800d2a6:	f043 0206 	orr.w	r2, r3, #6
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	689b      	ldr	r3, [r3, #8]
 800d2b2:	f043 0220 	orr.w	r2, r3, #32
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d2ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3710      	adds	r7, #16
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d2c6:	b004      	add	sp, #16
 800d2c8:	4770      	bx	lr
 800d2ca:	bf00      	nop
 800d2cc:	ffbdffbf 	.word	0xffbdffbf

0800d2d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b083      	sub	sp, #12
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	689b      	ldr	r3, [r3, #8]
 800d2dc:	f043 0201 	orr.w	r2, r3, #1
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d2e4:	2300      	movs	r3, #0
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	370c      	adds	r7, #12
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f0:	4770      	bx	lr

0800d2f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d2f2:	b480      	push	{r7}
 800d2f4:	b083      	sub	sp, #12
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	689b      	ldr	r3, [r3, #8]
 800d2fe:	f023 0201 	bic.w	r2, r3, #1
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d306:	2300      	movs	r3, #0
}
 800d308:	4618      	mov	r0, r3
 800d30a:	370c      	adds	r7, #12
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr

0800d314 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b082      	sub	sp, #8
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	460b      	mov	r3, r1
 800d31e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	68db      	ldr	r3, [r3, #12]
 800d324:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d32c:	78fb      	ldrb	r3, [r7, #3]
 800d32e:	2b01      	cmp	r3, #1
 800d330:	d106      	bne.n	800d340 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	68db      	ldr	r3, [r3, #12]
 800d336:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	60da      	str	r2, [r3, #12]
 800d33e:	e00b      	b.n	800d358 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d340:	78fb      	ldrb	r3, [r7, #3]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d106      	bne.n	800d354 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	60da      	str	r2, [r3, #12]
 800d352:	e001      	b.n	800d358 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d354:	2301      	movs	r3, #1
 800d356:	e003      	b.n	800d360 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d358:	2032      	movs	r0, #50	; 0x32
 800d35a:	f7f6 ff43 	bl	80041e4 <HAL_Delay>

  return HAL_OK;
 800d35e:	2300      	movs	r3, #0
}
 800d360:	4618      	mov	r0, r3
 800d362:	3708      	adds	r7, #8
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}

0800d368 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d368:	b480      	push	{r7}
 800d36a:	b085      	sub	sp, #20
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d372:	2300      	movs	r3, #0
 800d374:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	019b      	lsls	r3, r3, #6
 800d37a:	f043 0220 	orr.w	r2, r3, #32
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	3301      	adds	r3, #1
 800d386:	60fb      	str	r3, [r7, #12]
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	4a09      	ldr	r2, [pc, #36]	; (800d3b0 <USB_FlushTxFifo+0x48>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d901      	bls.n	800d394 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d390:	2303      	movs	r3, #3
 800d392:	e006      	b.n	800d3a2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	691b      	ldr	r3, [r3, #16]
 800d398:	f003 0320 	and.w	r3, r3, #32
 800d39c:	2b20      	cmp	r3, #32
 800d39e:	d0f0      	beq.n	800d382 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d3a0:	2300      	movs	r3, #0
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3714      	adds	r7, #20
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr
 800d3ae:	bf00      	nop
 800d3b0:	00030d40 	.word	0x00030d40

0800d3b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b085      	sub	sp, #20
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2210      	movs	r2, #16
 800d3c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	60fb      	str	r3, [r7, #12]
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	4a09      	ldr	r2, [pc, #36]	; (800d3f4 <USB_FlushRxFifo+0x40>)
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	d901      	bls.n	800d3d8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d3d4:	2303      	movs	r3, #3
 800d3d6:	e006      	b.n	800d3e6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	691b      	ldr	r3, [r3, #16]
 800d3dc:	f003 0310 	and.w	r3, r3, #16
 800d3e0:	2b10      	cmp	r3, #16
 800d3e2:	d0f0      	beq.n	800d3c6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d3e4:	2300      	movs	r3, #0
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3714      	adds	r7, #20
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr
 800d3f2:	bf00      	nop
 800d3f4:	00030d40 	.word	0x00030d40

0800d3f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b089      	sub	sp, #36	; 0x24
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	60f8      	str	r0, [r7, #12]
 800d400:	60b9      	str	r1, [r7, #8]
 800d402:	4611      	mov	r1, r2
 800d404:	461a      	mov	r2, r3
 800d406:	460b      	mov	r3, r1
 800d408:	71fb      	strb	r3, [r7, #7]
 800d40a:	4613      	mov	r3, r2
 800d40c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d416:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d11a      	bne.n	800d454 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d41e:	88bb      	ldrh	r3, [r7, #4]
 800d420:	3303      	adds	r3, #3
 800d422:	089b      	lsrs	r3, r3, #2
 800d424:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d426:	2300      	movs	r3, #0
 800d428:	61bb      	str	r3, [r7, #24]
 800d42a:	e00f      	b.n	800d44c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d42c:	79fb      	ldrb	r3, [r7, #7]
 800d42e:	031a      	lsls	r2, r3, #12
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	4413      	add	r3, r2
 800d434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d438:	461a      	mov	r2, r3
 800d43a:	69fb      	ldr	r3, [r7, #28]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d440:	69fb      	ldr	r3, [r7, #28]
 800d442:	3304      	adds	r3, #4
 800d444:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d446:	69bb      	ldr	r3, [r7, #24]
 800d448:	3301      	adds	r3, #1
 800d44a:	61bb      	str	r3, [r7, #24]
 800d44c:	69ba      	ldr	r2, [r7, #24]
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	429a      	cmp	r2, r3
 800d452:	d3eb      	bcc.n	800d42c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d454:	2300      	movs	r3, #0
}
 800d456:	4618      	mov	r0, r3
 800d458:	3724      	adds	r7, #36	; 0x24
 800d45a:	46bd      	mov	sp, r7
 800d45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d460:	4770      	bx	lr

0800d462 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d462:	b480      	push	{r7}
 800d464:	b089      	sub	sp, #36	; 0x24
 800d466:	af00      	add	r7, sp, #0
 800d468:	60f8      	str	r0, [r7, #12]
 800d46a:	60b9      	str	r1, [r7, #8]
 800d46c:	4613      	mov	r3, r2
 800d46e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d478:	88fb      	ldrh	r3, [r7, #6]
 800d47a:	3303      	adds	r3, #3
 800d47c:	089b      	lsrs	r3, r3, #2
 800d47e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d480:	2300      	movs	r3, #0
 800d482:	61bb      	str	r3, [r7, #24]
 800d484:	e00b      	b.n	800d49e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d48c:	681a      	ldr	r2, [r3, #0]
 800d48e:	69fb      	ldr	r3, [r7, #28]
 800d490:	601a      	str	r2, [r3, #0]
    pDest++;
 800d492:	69fb      	ldr	r3, [r7, #28]
 800d494:	3304      	adds	r3, #4
 800d496:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d498:	69bb      	ldr	r3, [r7, #24]
 800d49a:	3301      	adds	r3, #1
 800d49c:	61bb      	str	r3, [r7, #24]
 800d49e:	69ba      	ldr	r2, [r7, #24]
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d3ef      	bcc.n	800d486 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d4a6:	69fb      	ldr	r3, [r7, #28]
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3724      	adds	r7, #36	; 0x24
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr

0800d4b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b085      	sub	sp, #20
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	695b      	ldr	r3, [r3, #20]
 800d4c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	699b      	ldr	r3, [r3, #24]
 800d4c6:	68fa      	ldr	r2, [r7, #12]
 800d4c8:	4013      	ands	r3, r2
 800d4ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3714      	adds	r7, #20
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d8:	4770      	bx	lr

0800d4da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d4da:	b480      	push	{r7}
 800d4dc:	b083      	sub	sp, #12
 800d4de:	af00      	add	r7, sp, #0
 800d4e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	695b      	ldr	r3, [r3, #20]
 800d4e6:	f003 0301 	and.w	r3, r3, #1
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	370c      	adds	r7, #12
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f4:	4770      	bx	lr
	...

0800d4f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b085      	sub	sp, #20
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d500:	2300      	movs	r3, #0
 800d502:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	3301      	adds	r3, #1
 800d508:	60fb      	str	r3, [r7, #12]
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	4a13      	ldr	r2, [pc, #76]	; (800d55c <USB_CoreReset+0x64>)
 800d50e:	4293      	cmp	r3, r2
 800d510:	d901      	bls.n	800d516 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d512:	2303      	movs	r3, #3
 800d514:	e01b      	b.n	800d54e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	691b      	ldr	r3, [r3, #16]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	daf2      	bge.n	800d504 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d51e:	2300      	movs	r3, #0
 800d520:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	691b      	ldr	r3, [r3, #16]
 800d526:	f043 0201 	orr.w	r2, r3, #1
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	3301      	adds	r3, #1
 800d532:	60fb      	str	r3, [r7, #12]
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	4a09      	ldr	r2, [pc, #36]	; (800d55c <USB_CoreReset+0x64>)
 800d538:	4293      	cmp	r3, r2
 800d53a:	d901      	bls.n	800d540 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d53c:	2303      	movs	r3, #3
 800d53e:	e006      	b.n	800d54e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	691b      	ldr	r3, [r3, #16]
 800d544:	f003 0301 	and.w	r3, r3, #1
 800d548:	2b01      	cmp	r3, #1
 800d54a:	d0f0      	beq.n	800d52e <USB_CoreReset+0x36>

  return HAL_OK;
 800d54c:	2300      	movs	r3, #0
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3714      	adds	r7, #20
 800d552:	46bd      	mov	sp, r7
 800d554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d558:	4770      	bx	lr
 800d55a:	bf00      	nop
 800d55c:	00030d40 	.word	0x00030d40

0800d560 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d560:	b084      	sub	sp, #16
 800d562:	b580      	push	{r7, lr}
 800d564:	b084      	sub	sp, #16
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
 800d56a:	f107 001c 	add.w	r0, r7, #28
 800d56e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d57c:	461a      	mov	r2, r3
 800d57e:	2300      	movs	r3, #0
 800d580:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d586:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d596:	2b00      	cmp	r3, #0
 800d598:	d018      	beq.n	800d5cc <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d10a      	bne.n	800d5b6 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	68ba      	ldr	r2, [r7, #8]
 800d5aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d5ae:	f043 0304 	orr.w	r3, r3, #4
 800d5b2:	6013      	str	r3, [r2, #0]
 800d5b4:	e014      	b.n	800d5e0 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	68ba      	ldr	r2, [r7, #8]
 800d5c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d5c4:	f023 0304 	bic.w	r3, r3, #4
 800d5c8:	6013      	str	r3, [r2, #0]
 800d5ca:	e009      	b.n	800d5e0 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	68ba      	ldr	r2, [r7, #8]
 800d5d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d5da:	f023 0304 	bic.w	r3, r3, #4
 800d5de:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800d5e0:	2110      	movs	r1, #16
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f7ff fec0 	bl	800d368 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f7ff fee3 	bl	800d3b4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	60fb      	str	r3, [r7, #12]
 800d5f2:	e015      	b.n	800d620 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	015a      	lsls	r2, r3, #5
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	4413      	add	r3, r2
 800d5fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d600:	461a      	mov	r2, r3
 800d602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d606:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	015a      	lsls	r2, r3, #5
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	4413      	add	r3, r2
 800d610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d614:	461a      	mov	r2, r3
 800d616:	2300      	movs	r3, #0
 800d618:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	3301      	adds	r3, #1
 800d61e:	60fb      	str	r3, [r7, #12]
 800d620:	6a3b      	ldr	r3, [r7, #32]
 800d622:	68fa      	ldr	r2, [r7, #12]
 800d624:	429a      	cmp	r2, r3
 800d626:	d3e5      	bcc.n	800d5f4 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800d628:	2101      	movs	r1, #1
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f000 f8ac 	bl	800d788 <USB_DriveVbus>

  HAL_Delay(200U);
 800d630:	20c8      	movs	r0, #200	; 0xc8
 800d632:	f7f6 fdd7 	bl	80041e4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2200      	movs	r2, #0
 800d63a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d642:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d00b      	beq.n	800d668 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d656:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	4a14      	ldr	r2, [pc, #80]	; (800d6ac <USB_HostInit+0x14c>)
 800d65c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	4a13      	ldr	r2, [pc, #76]	; (800d6b0 <USB_HostInit+0x150>)
 800d662:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800d666:	e009      	b.n	800d67c <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2280      	movs	r2, #128	; 0x80
 800d66c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	4a10      	ldr	r2, [pc, #64]	; (800d6b4 <USB_HostInit+0x154>)
 800d672:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	4a10      	ldr	r2, [pc, #64]	; (800d6b8 <USB_HostInit+0x158>)
 800d678:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d105      	bne.n	800d68e <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	699b      	ldr	r3, [r3, #24]
 800d686:	f043 0210 	orr.w	r2, r3, #16
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	699a      	ldr	r2, [r3, #24]
 800d692:	4b0a      	ldr	r3, [pc, #40]	; (800d6bc <USB_HostInit+0x15c>)
 800d694:	4313      	orrs	r3, r2
 800d696:	687a      	ldr	r2, [r7, #4]
 800d698:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800d69a:	2300      	movs	r3, #0
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3710      	adds	r7, #16
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d6a6:	b004      	add	sp, #16
 800d6a8:	4770      	bx	lr
 800d6aa:	bf00      	nop
 800d6ac:	01000200 	.word	0x01000200
 800d6b0:	00e00300 	.word	0x00e00300
 800d6b4:	00600080 	.word	0x00600080
 800d6b8:	004000e0 	.word	0x004000e0
 800d6bc:	a3200008 	.word	0xa3200008

0800d6c0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b085      	sub	sp, #20
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	68fa      	ldr	r2, [r7, #12]
 800d6da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d6de:	f023 0303 	bic.w	r3, r3, #3
 800d6e2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d6ea:	681a      	ldr	r2, [r3, #0]
 800d6ec:	78fb      	ldrb	r3, [r7, #3]
 800d6ee:	f003 0303 	and.w	r3, r3, #3
 800d6f2:	68f9      	ldr	r1, [r7, #12]
 800d6f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d6f8:	4313      	orrs	r3, r2
 800d6fa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d6fc:	78fb      	ldrb	r3, [r7, #3]
 800d6fe:	2b01      	cmp	r3, #1
 800d700:	d107      	bne.n	800d712 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d708:	461a      	mov	r2, r3
 800d70a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d70e:	6053      	str	r3, [r2, #4]
 800d710:	e009      	b.n	800d726 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800d712:	78fb      	ldrb	r3, [r7, #3]
 800d714:	2b02      	cmp	r3, #2
 800d716:	d106      	bne.n	800d726 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d71e:	461a      	mov	r2, r3
 800d720:	f241 7370 	movw	r3, #6000	; 0x1770
 800d724:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800d726:	2300      	movs	r3, #0
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3714      	adds	r7, #20
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr

0800d734 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b084      	sub	sp, #16
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800d740:	2300      	movs	r3, #0
 800d742:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d754:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	68fa      	ldr	r2, [r7, #12]
 800d75a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d75e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d762:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800d764:	2064      	movs	r0, #100	; 0x64
 800d766:	f7f6 fd3d 	bl	80041e4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	68fa      	ldr	r2, [r7, #12]
 800d76e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d772:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d776:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800d778:	200a      	movs	r0, #10
 800d77a:	f7f6 fd33 	bl	80041e4 <HAL_Delay>

  return HAL_OK;
 800d77e:	2300      	movs	r3, #0
}
 800d780:	4618      	mov	r0, r3
 800d782:	3710      	adds	r7, #16
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d788:	b480      	push	{r7}
 800d78a:	b085      	sub	sp, #20
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	460b      	mov	r3, r1
 800d792:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d798:	2300      	movs	r3, #0
 800d79a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d7ac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d109      	bne.n	800d7cc <USB_DriveVbus+0x44>
 800d7b8:	78fb      	ldrb	r3, [r7, #3]
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	d106      	bne.n	800d7cc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	68fa      	ldr	r2, [r7, #12]
 800d7c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d7c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d7ca:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d7d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7d6:	d109      	bne.n	800d7ec <USB_DriveVbus+0x64>
 800d7d8:	78fb      	ldrb	r3, [r7, #3]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d106      	bne.n	800d7ec <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	68fa      	ldr	r2, [r7, #12]
 800d7e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d7e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d7ea:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800d7ec:	2300      	movs	r3, #0
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3714      	adds	r7, #20
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f8:	4770      	bx	lr

0800d7fa <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d7fa:	b480      	push	{r7}
 800d7fc:	b085      	sub	sp, #20
 800d7fe:	af00      	add	r7, sp, #0
 800d800:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d806:	2300      	movs	r3, #0
 800d808:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	0c5b      	lsrs	r3, r3, #17
 800d818:	f003 0303 	and.w	r3, r3, #3
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3714      	adds	r7, #20
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr

0800d828 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800d828:	b480      	push	{r7}
 800d82a:	b085      	sub	sp, #20
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d83a:	689b      	ldr	r3, [r3, #8]
 800d83c:	b29b      	uxth	r3, r3
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3714      	adds	r7, #20
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr
	...

0800d84c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b088      	sub	sp, #32
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
 800d854:	4608      	mov	r0, r1
 800d856:	4611      	mov	r1, r2
 800d858:	461a      	mov	r2, r3
 800d85a:	4603      	mov	r3, r0
 800d85c:	70fb      	strb	r3, [r7, #3]
 800d85e:	460b      	mov	r3, r1
 800d860:	70bb      	strb	r3, [r7, #2]
 800d862:	4613      	mov	r3, r2
 800d864:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800d866:	2300      	movs	r3, #0
 800d868:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800d86e:	78fb      	ldrb	r3, [r7, #3]
 800d870:	015a      	lsls	r2, r3, #5
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	4413      	add	r3, r2
 800d876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d87a:	461a      	mov	r2, r3
 800d87c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d880:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d882:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d886:	2b03      	cmp	r3, #3
 800d888:	d87e      	bhi.n	800d988 <USB_HC_Init+0x13c>
 800d88a:	a201      	add	r2, pc, #4	; (adr r2, 800d890 <USB_HC_Init+0x44>)
 800d88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d890:	0800d8a1 	.word	0x0800d8a1
 800d894:	0800d94b 	.word	0x0800d94b
 800d898:	0800d8a1 	.word	0x0800d8a1
 800d89c:	0800d90d 	.word	0x0800d90d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d8a0:	78fb      	ldrb	r3, [r7, #3]
 800d8a2:	015a      	lsls	r2, r3, #5
 800d8a4:	693b      	ldr	r3, [r7, #16]
 800d8a6:	4413      	add	r3, r2
 800d8a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	f240 439d 	movw	r3, #1181	; 0x49d
 800d8b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d8b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	da10      	bge.n	800d8de <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d8bc:	78fb      	ldrb	r3, [r7, #3]
 800d8be:	015a      	lsls	r2, r3, #5
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	4413      	add	r3, r2
 800d8c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8c8:	68db      	ldr	r3, [r3, #12]
 800d8ca:	78fa      	ldrb	r2, [r7, #3]
 800d8cc:	0151      	lsls	r1, r2, #5
 800d8ce:	693a      	ldr	r2, [r7, #16]
 800d8d0:	440a      	add	r2, r1
 800d8d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d8d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d8da:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800d8dc:	e057      	b.n	800d98e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d051      	beq.n	800d98e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800d8ea:	78fb      	ldrb	r3, [r7, #3]
 800d8ec:	015a      	lsls	r2, r3, #5
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	4413      	add	r3, r2
 800d8f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8f6:	68db      	ldr	r3, [r3, #12]
 800d8f8:	78fa      	ldrb	r2, [r7, #3]
 800d8fa:	0151      	lsls	r1, r2, #5
 800d8fc:	693a      	ldr	r2, [r7, #16]
 800d8fe:	440a      	add	r2, r1
 800d900:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d904:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d908:	60d3      	str	r3, [r2, #12]
      break;
 800d90a:	e040      	b.n	800d98e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d90c:	78fb      	ldrb	r3, [r7, #3]
 800d90e:	015a      	lsls	r2, r3, #5
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	4413      	add	r3, r2
 800d914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d918:	461a      	mov	r2, r3
 800d91a:	f240 639d 	movw	r3, #1693	; 0x69d
 800d91e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d920:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d924:	2b00      	cmp	r3, #0
 800d926:	da34      	bge.n	800d992 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d928:	78fb      	ldrb	r3, [r7, #3]
 800d92a:	015a      	lsls	r2, r3, #5
 800d92c:	693b      	ldr	r3, [r7, #16]
 800d92e:	4413      	add	r3, r2
 800d930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d934:	68db      	ldr	r3, [r3, #12]
 800d936:	78fa      	ldrb	r2, [r7, #3]
 800d938:	0151      	lsls	r1, r2, #5
 800d93a:	693a      	ldr	r2, [r7, #16]
 800d93c:	440a      	add	r2, r1
 800d93e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d946:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d948:	e023      	b.n	800d992 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d94a:	78fb      	ldrb	r3, [r7, #3]
 800d94c:	015a      	lsls	r2, r3, #5
 800d94e:	693b      	ldr	r3, [r7, #16]
 800d950:	4413      	add	r3, r2
 800d952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d956:	461a      	mov	r2, r3
 800d958:	f240 2325 	movw	r3, #549	; 0x225
 800d95c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d95e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d962:	2b00      	cmp	r3, #0
 800d964:	da17      	bge.n	800d996 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d966:	78fb      	ldrb	r3, [r7, #3]
 800d968:	015a      	lsls	r2, r3, #5
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	4413      	add	r3, r2
 800d96e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d972:	68db      	ldr	r3, [r3, #12]
 800d974:	78fa      	ldrb	r2, [r7, #3]
 800d976:	0151      	lsls	r1, r2, #5
 800d978:	693a      	ldr	r2, [r7, #16]
 800d97a:	440a      	add	r2, r1
 800d97c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d980:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800d984:	60d3      	str	r3, [r2, #12]
      }
      break;
 800d986:	e006      	b.n	800d996 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800d988:	2301      	movs	r3, #1
 800d98a:	77fb      	strb	r3, [r7, #31]
      break;
 800d98c:	e004      	b.n	800d998 <USB_HC_Init+0x14c>
      break;
 800d98e:	bf00      	nop
 800d990:	e002      	b.n	800d998 <USB_HC_Init+0x14c>
      break;
 800d992:	bf00      	nop
 800d994:	e000      	b.n	800d998 <USB_HC_Init+0x14c>
      break;
 800d996:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d99e:	699a      	ldr	r2, [r3, #24]
 800d9a0:	78fb      	ldrb	r3, [r7, #3]
 800d9a2:	f003 030f 	and.w	r3, r3, #15
 800d9a6:	2101      	movs	r1, #1
 800d9a8:	fa01 f303 	lsl.w	r3, r1, r3
 800d9ac:	6939      	ldr	r1, [r7, #16]
 800d9ae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d9b2:	4313      	orrs	r3, r2
 800d9b4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	699b      	ldr	r3, [r3, #24]
 800d9ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800d9c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	da03      	bge.n	800d9d2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800d9ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d9ce:	61bb      	str	r3, [r7, #24]
 800d9d0:	e001      	b.n	800d9d6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f7ff ff0f 	bl	800d7fa <USB_GetHostSpeed>
 800d9dc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800d9de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d9e2:	2b02      	cmp	r3, #2
 800d9e4:	d106      	bne.n	800d9f4 <USB_HC_Init+0x1a8>
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2b02      	cmp	r3, #2
 800d9ea:	d003      	beq.n	800d9f4 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800d9ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d9f0:	617b      	str	r3, [r7, #20]
 800d9f2:	e001      	b.n	800d9f8 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d9f8:	787b      	ldrb	r3, [r7, #1]
 800d9fa:	059b      	lsls	r3, r3, #22
 800d9fc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800da00:	78bb      	ldrb	r3, [r7, #2]
 800da02:	02db      	lsls	r3, r3, #11
 800da04:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800da08:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800da0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800da0e:	049b      	lsls	r3, r3, #18
 800da10:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800da14:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800da16:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800da18:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800da1c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800da1e:	69bb      	ldr	r3, [r7, #24]
 800da20:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800da22:	78fb      	ldrb	r3, [r7, #3]
 800da24:	0159      	lsls	r1, r3, #5
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	440b      	add	r3, r1
 800da2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da2e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800da34:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800da36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800da3a:	2b03      	cmp	r3, #3
 800da3c:	d10f      	bne.n	800da5e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800da3e:	78fb      	ldrb	r3, [r7, #3]
 800da40:	015a      	lsls	r2, r3, #5
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	4413      	add	r3, r2
 800da46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	78fa      	ldrb	r2, [r7, #3]
 800da4e:	0151      	lsls	r1, r2, #5
 800da50:	693a      	ldr	r2, [r7, #16]
 800da52:	440a      	add	r2, r1
 800da54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800da5c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800da5e:	7ffb      	ldrb	r3, [r7, #31]
}
 800da60:	4618      	mov	r0, r3
 800da62:	3720      	adds	r7, #32
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b08c      	sub	sp, #48	; 0x30
 800da6c:	af02      	add	r7, sp, #8
 800da6e:	60f8      	str	r0, [r7, #12]
 800da70:	60b9      	str	r1, [r7, #8]
 800da72:	4613      	mov	r3, r2
 800da74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	785b      	ldrb	r3, [r3, #1]
 800da7e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800da80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da84:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d02d      	beq.n	800daee <USB_HC_StartXfer+0x86>
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	791b      	ldrb	r3, [r3, #4]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d129      	bne.n	800daee <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800da9a:	79fb      	ldrb	r3, [r7, #7]
 800da9c:	2b01      	cmp	r3, #1
 800da9e:	d117      	bne.n	800dad0 <USB_HC_StartXfer+0x68>
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	79db      	ldrb	r3, [r3, #7]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d003      	beq.n	800dab0 <USB_HC_StartXfer+0x48>
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	79db      	ldrb	r3, [r3, #7]
 800daac:	2b02      	cmp	r3, #2
 800daae:	d10f      	bne.n	800dad0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800dab0:	69fb      	ldr	r3, [r7, #28]
 800dab2:	015a      	lsls	r2, r3, #5
 800dab4:	6a3b      	ldr	r3, [r7, #32]
 800dab6:	4413      	add	r3, r2
 800dab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dabc:	68db      	ldr	r3, [r3, #12]
 800dabe:	69fa      	ldr	r2, [r7, #28]
 800dac0:	0151      	lsls	r1, r2, #5
 800dac2:	6a3a      	ldr	r2, [r7, #32]
 800dac4:	440a      	add	r2, r1
 800dac6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800daca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dace:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800dad0:	79fb      	ldrb	r3, [r7, #7]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d10b      	bne.n	800daee <USB_HC_StartXfer+0x86>
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	795b      	ldrb	r3, [r3, #5]
 800dada:	2b01      	cmp	r3, #1
 800dadc:	d107      	bne.n	800daee <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	785b      	ldrb	r3, [r3, #1]
 800dae2:	4619      	mov	r1, r3
 800dae4:	68f8      	ldr	r0, [r7, #12]
 800dae6:	f000 fa2f 	bl	800df48 <USB_DoPing>
      return HAL_OK;
 800daea:	2300      	movs	r3, #0
 800daec:	e0f8      	b.n	800dce0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	695b      	ldr	r3, [r3, #20]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d018      	beq.n	800db28 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	695b      	ldr	r3, [r3, #20]
 800dafa:	68ba      	ldr	r2, [r7, #8]
 800dafc:	8912      	ldrh	r2, [r2, #8]
 800dafe:	4413      	add	r3, r2
 800db00:	3b01      	subs	r3, #1
 800db02:	68ba      	ldr	r2, [r7, #8]
 800db04:	8912      	ldrh	r2, [r2, #8]
 800db06:	fbb3 f3f2 	udiv	r3, r3, r2
 800db0a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800db0c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800db0e:	8b7b      	ldrh	r3, [r7, #26]
 800db10:	429a      	cmp	r2, r3
 800db12:	d90b      	bls.n	800db2c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800db14:	8b7b      	ldrh	r3, [r7, #26]
 800db16:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800db18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800db1a:	68ba      	ldr	r2, [r7, #8]
 800db1c:	8912      	ldrh	r2, [r2, #8]
 800db1e:	fb02 f203 	mul.w	r2, r2, r3
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	611a      	str	r2, [r3, #16]
 800db26:	e001      	b.n	800db2c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800db28:	2301      	movs	r3, #1
 800db2a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	78db      	ldrb	r3, [r3, #3]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d007      	beq.n	800db44 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800db34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800db36:	68ba      	ldr	r2, [r7, #8]
 800db38:	8912      	ldrh	r2, [r2, #8]
 800db3a:	fb02 f203 	mul.w	r2, r2, r3
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	611a      	str	r2, [r3, #16]
 800db42:	e003      	b.n	800db4c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	695a      	ldr	r2, [r3, #20]
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	691b      	ldr	r3, [r3, #16]
 800db50:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800db54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800db56:	04d9      	lsls	r1, r3, #19
 800db58:	4b63      	ldr	r3, [pc, #396]	; (800dce8 <USB_HC_StartXfer+0x280>)
 800db5a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800db5c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	7a9b      	ldrb	r3, [r3, #10]
 800db62:	075b      	lsls	r3, r3, #29
 800db64:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800db68:	69f9      	ldr	r1, [r7, #28]
 800db6a:	0148      	lsls	r0, r1, #5
 800db6c:	6a39      	ldr	r1, [r7, #32]
 800db6e:	4401      	add	r1, r0
 800db70:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800db74:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800db76:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800db78:	79fb      	ldrb	r3, [r7, #7]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d009      	beq.n	800db92 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	68d9      	ldr	r1, [r3, #12]
 800db82:	69fb      	ldr	r3, [r7, #28]
 800db84:	015a      	lsls	r2, r3, #5
 800db86:	6a3b      	ldr	r3, [r7, #32]
 800db88:	4413      	add	r3, r2
 800db8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db8e:	460a      	mov	r2, r1
 800db90:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800db92:	6a3b      	ldr	r3, [r7, #32]
 800db94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800db98:	689b      	ldr	r3, [r3, #8]
 800db9a:	f003 0301 	and.w	r3, r3, #1
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	bf0c      	ite	eq
 800dba2:	2301      	moveq	r3, #1
 800dba4:	2300      	movne	r3, #0
 800dba6:	b2db      	uxtb	r3, r3
 800dba8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800dbaa:	69fb      	ldr	r3, [r7, #28]
 800dbac:	015a      	lsls	r2, r3, #5
 800dbae:	6a3b      	ldr	r3, [r7, #32]
 800dbb0:	4413      	add	r3, r2
 800dbb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	69fa      	ldr	r2, [r7, #28]
 800dbba:	0151      	lsls	r1, r2, #5
 800dbbc:	6a3a      	ldr	r2, [r7, #32]
 800dbbe:	440a      	add	r2, r1
 800dbc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dbc4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dbc8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800dbca:	69fb      	ldr	r3, [r7, #28]
 800dbcc:	015a      	lsls	r2, r3, #5
 800dbce:	6a3b      	ldr	r3, [r7, #32]
 800dbd0:	4413      	add	r3, r2
 800dbd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbd6:	681a      	ldr	r2, [r3, #0]
 800dbd8:	7e7b      	ldrb	r3, [r7, #25]
 800dbda:	075b      	lsls	r3, r3, #29
 800dbdc:	69f9      	ldr	r1, [r7, #28]
 800dbde:	0148      	lsls	r0, r1, #5
 800dbe0:	6a39      	ldr	r1, [r7, #32]
 800dbe2:	4401      	add	r1, r0
 800dbe4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800dbe8:	4313      	orrs	r3, r2
 800dbea:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800dbec:	69fb      	ldr	r3, [r7, #28]
 800dbee:	015a      	lsls	r2, r3, #5
 800dbf0:	6a3b      	ldr	r3, [r7, #32]
 800dbf2:	4413      	add	r3, r2
 800dbf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dc02:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	78db      	ldrb	r3, [r3, #3]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d004      	beq.n	800dc16 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc12:	613b      	str	r3, [r7, #16]
 800dc14:	e003      	b.n	800dc1e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dc1c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dc24:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800dc26:	69fb      	ldr	r3, [r7, #28]
 800dc28:	015a      	lsls	r2, r3, #5
 800dc2a:	6a3b      	ldr	r3, [r7, #32]
 800dc2c:	4413      	add	r3, r2
 800dc2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc32:	461a      	mov	r2, r3
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800dc38:	79fb      	ldrb	r3, [r7, #7]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d001      	beq.n	800dc42 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	e04e      	b.n	800dce0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	78db      	ldrb	r3, [r3, #3]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d149      	bne.n	800dcde <USB_HC_StartXfer+0x276>
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	695b      	ldr	r3, [r3, #20]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d045      	beq.n	800dcde <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	79db      	ldrb	r3, [r3, #7]
 800dc56:	2b03      	cmp	r3, #3
 800dc58:	d830      	bhi.n	800dcbc <USB_HC_StartXfer+0x254>
 800dc5a:	a201      	add	r2, pc, #4	; (adr r2, 800dc60 <USB_HC_StartXfer+0x1f8>)
 800dc5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc60:	0800dc71 	.word	0x0800dc71
 800dc64:	0800dc95 	.word	0x0800dc95
 800dc68:	0800dc71 	.word	0x0800dc71
 800dc6c:	0800dc95 	.word	0x0800dc95
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	695b      	ldr	r3, [r3, #20]
 800dc74:	3303      	adds	r3, #3
 800dc76:	089b      	lsrs	r3, r3, #2
 800dc78:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800dc7a:	8afa      	ldrh	r2, [r7, #22]
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d91c      	bls.n	800dcc0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	699b      	ldr	r3, [r3, #24]
 800dc8a:	f043 0220 	orr.w	r2, r3, #32
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	619a      	str	r2, [r3, #24]
        }
        break;
 800dc92:	e015      	b.n	800dcc0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	695b      	ldr	r3, [r3, #20]
 800dc98:	3303      	adds	r3, #3
 800dc9a:	089b      	lsrs	r3, r3, #2
 800dc9c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800dc9e:	8afa      	ldrh	r2, [r7, #22]
 800dca0:	6a3b      	ldr	r3, [r7, #32]
 800dca2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dca6:	691b      	ldr	r3, [r3, #16]
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d90a      	bls.n	800dcc4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	699b      	ldr	r3, [r3, #24]
 800dcb2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	619a      	str	r2, [r3, #24]
        }
        break;
 800dcba:	e003      	b.n	800dcc4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800dcbc:	bf00      	nop
 800dcbe:	e002      	b.n	800dcc6 <USB_HC_StartXfer+0x25e>
        break;
 800dcc0:	bf00      	nop
 800dcc2:	e000      	b.n	800dcc6 <USB_HC_StartXfer+0x25e>
        break;
 800dcc4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	68d9      	ldr	r1, [r3, #12]
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	785a      	ldrb	r2, [r3, #1]
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	695b      	ldr	r3, [r3, #20]
 800dcd2:	b29b      	uxth	r3, r3
 800dcd4:	2000      	movs	r0, #0
 800dcd6:	9000      	str	r0, [sp, #0]
 800dcd8:	68f8      	ldr	r0, [r7, #12]
 800dcda:	f7ff fb8d 	bl	800d3f8 <USB_WritePacket>
  }

  return HAL_OK;
 800dcde:	2300      	movs	r3, #0
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3728      	adds	r7, #40	; 0x28
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}
 800dce8:	1ff80000 	.word	0x1ff80000

0800dcec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dcec:	b480      	push	{r7}
 800dcee:	b085      	sub	sp, #20
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dcfe:	695b      	ldr	r3, [r3, #20]
 800dd00:	b29b      	uxth	r3, r3
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3714      	adds	r7, #20
 800dd06:	46bd      	mov	sp, r7
 800dd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0c:	4770      	bx	lr

0800dd0e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800dd0e:	b480      	push	{r7}
 800dd10:	b089      	sub	sp, #36	; 0x24
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	6078      	str	r0, [r7, #4]
 800dd16:	460b      	mov	r3, r1
 800dd18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800dd1e:	78fb      	ldrb	r3, [r7, #3]
 800dd20:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800dd22:	2300      	movs	r3, #0
 800dd24:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	015a      	lsls	r2, r3, #5
 800dd2a:	69bb      	ldr	r3, [r7, #24]
 800dd2c:	4413      	add	r3, r2
 800dd2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	0c9b      	lsrs	r3, r3, #18
 800dd36:	f003 0303 	and.w	r3, r3, #3
 800dd3a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	015a      	lsls	r2, r3, #5
 800dd40:	69bb      	ldr	r3, [r7, #24]
 800dd42:	4413      	add	r3, r2
 800dd44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	0fdb      	lsrs	r3, r3, #31
 800dd4c:	f003 0301 	and.w	r3, r3, #1
 800dd50:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	689b      	ldr	r3, [r3, #8]
 800dd56:	f003 0320 	and.w	r3, r3, #32
 800dd5a:	2b20      	cmp	r3, #32
 800dd5c:	d104      	bne.n	800dd68 <USB_HC_Halt+0x5a>
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d101      	bne.n	800dd68 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800dd64:	2300      	movs	r3, #0
 800dd66:	e0e8      	b.n	800df3a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d002      	beq.n	800dd74 <USB_HC_Halt+0x66>
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	2b02      	cmp	r3, #2
 800dd72:	d173      	bne.n	800de5c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	015a      	lsls	r2, r3, #5
 800dd78:	69bb      	ldr	r3, [r7, #24]
 800dd7a:	4413      	add	r3, r2
 800dd7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	697a      	ldr	r2, [r7, #20]
 800dd84:	0151      	lsls	r1, r2, #5
 800dd86:	69ba      	ldr	r2, [r7, #24]
 800dd88:	440a      	add	r2, r1
 800dd8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dd8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dd92:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	689b      	ldr	r3, [r3, #8]
 800dd98:	f003 0320 	and.w	r3, r3, #32
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	f040 80cb 	bne.w	800df38 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dda6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d143      	bne.n	800de36 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	015a      	lsls	r2, r3, #5
 800ddb2:	69bb      	ldr	r3, [r7, #24]
 800ddb4:	4413      	add	r3, r2
 800ddb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	697a      	ldr	r2, [r7, #20]
 800ddbe:	0151      	lsls	r1, r2, #5
 800ddc0:	69ba      	ldr	r2, [r7, #24]
 800ddc2:	440a      	add	r2, r1
 800ddc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ddc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ddcc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	015a      	lsls	r2, r3, #5
 800ddd2:	69bb      	ldr	r3, [r7, #24]
 800ddd4:	4413      	add	r3, r2
 800ddd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	697a      	ldr	r2, [r7, #20]
 800ddde:	0151      	lsls	r1, r2, #5
 800dde0:	69ba      	ldr	r2, [r7, #24]
 800dde2:	440a      	add	r2, r1
 800dde4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dde8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ddec:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	015a      	lsls	r2, r3, #5
 800ddf2:	69bb      	ldr	r3, [r7, #24]
 800ddf4:	4413      	add	r3, r2
 800ddf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	697a      	ldr	r2, [r7, #20]
 800ddfe:	0151      	lsls	r1, r2, #5
 800de00:	69ba      	ldr	r2, [r7, #24]
 800de02:	440a      	add	r2, r1
 800de04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800de08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800de0c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800de0e:	69fb      	ldr	r3, [r7, #28]
 800de10:	3301      	adds	r3, #1
 800de12:	61fb      	str	r3, [r7, #28]
 800de14:	69fb      	ldr	r3, [r7, #28]
 800de16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de1a:	d81d      	bhi.n	800de58 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800de1c:	697b      	ldr	r3, [r7, #20]
 800de1e:	015a      	lsls	r2, r3, #5
 800de20:	69bb      	ldr	r3, [r7, #24]
 800de22:	4413      	add	r3, r2
 800de24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de32:	d0ec      	beq.n	800de0e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800de34:	e080      	b.n	800df38 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	015a      	lsls	r2, r3, #5
 800de3a:	69bb      	ldr	r3, [r7, #24]
 800de3c:	4413      	add	r3, r2
 800de3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	697a      	ldr	r2, [r7, #20]
 800de46:	0151      	lsls	r1, r2, #5
 800de48:	69ba      	ldr	r2, [r7, #24]
 800de4a:	440a      	add	r2, r1
 800de4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800de50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800de54:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800de56:	e06f      	b.n	800df38 <USB_HC_Halt+0x22a>
            break;
 800de58:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800de5a:	e06d      	b.n	800df38 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	015a      	lsls	r2, r3, #5
 800de60:	69bb      	ldr	r3, [r7, #24]
 800de62:	4413      	add	r3, r2
 800de64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	697a      	ldr	r2, [r7, #20]
 800de6c:	0151      	lsls	r1, r2, #5
 800de6e:	69ba      	ldr	r2, [r7, #24]
 800de70:	440a      	add	r2, r1
 800de72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800de76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de7a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800de7c:	69bb      	ldr	r3, [r7, #24]
 800de7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800de82:	691b      	ldr	r3, [r3, #16]
 800de84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d143      	bne.n	800df14 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	015a      	lsls	r2, r3, #5
 800de90:	69bb      	ldr	r3, [r7, #24]
 800de92:	4413      	add	r3, r2
 800de94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	697a      	ldr	r2, [r7, #20]
 800de9c:	0151      	lsls	r1, r2, #5
 800de9e:	69ba      	ldr	r2, [r7, #24]
 800dea0:	440a      	add	r2, r1
 800dea2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dea6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800deaa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800deac:	697b      	ldr	r3, [r7, #20]
 800deae:	015a      	lsls	r2, r3, #5
 800deb0:	69bb      	ldr	r3, [r7, #24]
 800deb2:	4413      	add	r3, r2
 800deb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	697a      	ldr	r2, [r7, #20]
 800debc:	0151      	lsls	r1, r2, #5
 800debe:	69ba      	ldr	r2, [r7, #24]
 800dec0:	440a      	add	r2, r1
 800dec2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dec6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800deca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	015a      	lsls	r2, r3, #5
 800ded0:	69bb      	ldr	r3, [r7, #24]
 800ded2:	4413      	add	r3, r2
 800ded4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	697a      	ldr	r2, [r7, #20]
 800dedc:	0151      	lsls	r1, r2, #5
 800dede:	69ba      	ldr	r2, [r7, #24]
 800dee0:	440a      	add	r2, r1
 800dee2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dee6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800deea:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800deec:	69fb      	ldr	r3, [r7, #28]
 800deee:	3301      	adds	r3, #1
 800def0:	61fb      	str	r3, [r7, #28]
 800def2:	69fb      	ldr	r3, [r7, #28]
 800def4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800def8:	d81d      	bhi.n	800df36 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	015a      	lsls	r2, r3, #5
 800defe:	69bb      	ldr	r3, [r7, #24]
 800df00:	4413      	add	r3, r2
 800df02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800df0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df10:	d0ec      	beq.n	800deec <USB_HC_Halt+0x1de>
 800df12:	e011      	b.n	800df38 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	015a      	lsls	r2, r3, #5
 800df18:	69bb      	ldr	r3, [r7, #24]
 800df1a:	4413      	add	r3, r2
 800df1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	697a      	ldr	r2, [r7, #20]
 800df24:	0151      	lsls	r1, r2, #5
 800df26:	69ba      	ldr	r2, [r7, #24]
 800df28:	440a      	add	r2, r1
 800df2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800df2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800df32:	6013      	str	r3, [r2, #0]
 800df34:	e000      	b.n	800df38 <USB_HC_Halt+0x22a>
          break;
 800df36:	bf00      	nop
    }
  }

  return HAL_OK;
 800df38:	2300      	movs	r3, #0
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3724      	adds	r7, #36	; 0x24
 800df3e:	46bd      	mov	sp, r7
 800df40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df44:	4770      	bx	lr
	...

0800df48 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800df48:	b480      	push	{r7}
 800df4a:	b087      	sub	sp, #28
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	460b      	mov	r3, r1
 800df52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800df58:	78fb      	ldrb	r3, [r7, #3]
 800df5a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800df5c:	2301      	movs	r3, #1
 800df5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	04da      	lsls	r2, r3, #19
 800df64:	4b15      	ldr	r3, [pc, #84]	; (800dfbc <USB_DoPing+0x74>)
 800df66:	4013      	ands	r3, r2
 800df68:	693a      	ldr	r2, [r7, #16]
 800df6a:	0151      	lsls	r1, r2, #5
 800df6c:	697a      	ldr	r2, [r7, #20]
 800df6e:	440a      	add	r2, r1
 800df70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800df74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800df78:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800df7a:	693b      	ldr	r3, [r7, #16]
 800df7c:	015a      	lsls	r2, r3, #5
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	4413      	add	r3, r2
 800df82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800df90:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800df98:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	015a      	lsls	r2, r3, #5
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	4413      	add	r3, r2
 800dfa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dfa6:	461a      	mov	r2, r3
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800dfac:	2300      	movs	r3, #0
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	371c      	adds	r7, #28
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb8:	4770      	bx	lr
 800dfba:	bf00      	nop
 800dfbc:	1ff80000 	.word	0x1ff80000

0800dfc0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b086      	sub	sp, #24
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f7ff f98e 	bl	800d2f2 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800dfd6:	2110      	movs	r1, #16
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f7ff f9c5 	bl	800d368 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f7ff f9e8 	bl	800d3b4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	613b      	str	r3, [r7, #16]
 800dfe8:	e01f      	b.n	800e02a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	015a      	lsls	r2, r3, #5
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	4413      	add	r3, r2
 800dff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e000:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e008:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e010:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e012:	693b      	ldr	r3, [r7, #16]
 800e014:	015a      	lsls	r2, r3, #5
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	4413      	add	r3, r2
 800e01a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e01e:	461a      	mov	r2, r3
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	3301      	adds	r3, #1
 800e028:	613b      	str	r3, [r7, #16]
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	2b0f      	cmp	r3, #15
 800e02e:	d9dc      	bls.n	800dfea <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e030:	2300      	movs	r3, #0
 800e032:	613b      	str	r3, [r7, #16]
 800e034:	e034      	b.n	800e0a0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	015a      	lsls	r2, r3, #5
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	4413      	add	r3, r2
 800e03e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e04c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e054:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e05c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	015a      	lsls	r2, r3, #5
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	4413      	add	r3, r2
 800e066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e06a:	461a      	mov	r2, r3
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	3301      	adds	r3, #1
 800e074:	617b      	str	r3, [r7, #20]
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e07c:	d80c      	bhi.n	800e098 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	015a      	lsls	r2, r3, #5
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	4413      	add	r3, r2
 800e086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e090:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e094:	d0ec      	beq.n	800e070 <USB_StopHost+0xb0>
 800e096:	e000      	b.n	800e09a <USB_StopHost+0xda>
        break;
 800e098:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e09a:	693b      	ldr	r3, [r7, #16]
 800e09c:	3301      	adds	r3, #1
 800e09e:	613b      	str	r3, [r7, #16]
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	2b0f      	cmp	r3, #15
 800e0a4:	d9c7      	bls.n	800e036 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e0ac:	461a      	mov	r2, r3
 800e0ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e0b2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e0ba:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f7ff f907 	bl	800d2d0 <USB_EnableGlobalInt>

  return HAL_OK;
 800e0c2:	2300      	movs	r3, #0
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3718      	adds	r7, #24
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}

0800e0cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e0d0:	4904      	ldr	r1, [pc, #16]	; (800e0e4 <MX_FATFS_Init+0x18>)
 800e0d2:	4805      	ldr	r0, [pc, #20]	; (800e0e8 <MX_FATFS_Init+0x1c>)
 800e0d4:	f002 f8d8 	bl	8010288 <FATFS_LinkDriver>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	461a      	mov	r2, r3
 800e0dc:	4b03      	ldr	r3, [pc, #12]	; (800e0ec <MX_FATFS_Init+0x20>)
 800e0de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e0e0:	bf00      	nop
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	20001110 	.word	0x20001110
 800e0e8:	080160b4 	.word	0x080160b4
 800e0ec:	2000110c 	.word	0x2000110c

0800e0f0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b082      	sub	sp, #8
 800e0f4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e0fa:	f000 f879 	bl	800e1f0 <BSP_SD_IsDetected>
 800e0fe:	4603      	mov	r3, r0
 800e100:	2b01      	cmp	r3, #1
 800e102:	d001      	beq.n	800e108 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800e104:	2302      	movs	r3, #2
 800e106:	e012      	b.n	800e12e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800e108:	480b      	ldr	r0, [pc, #44]	; (800e138 <BSP_SD_Init+0x48>)
 800e10a:	f7fb fbc5 	bl	8009898 <HAL_SD_Init>
 800e10e:	4603      	mov	r3, r0
 800e110:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e112:	79fb      	ldrb	r3, [r7, #7]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d109      	bne.n	800e12c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800e118:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e11c:	4806      	ldr	r0, [pc, #24]	; (800e138 <BSP_SD_Init+0x48>)
 800e11e:	f7fc f9a5 	bl	800a46c <HAL_SD_ConfigWideBusOperation>
 800e122:	4603      	mov	r3, r0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d001      	beq.n	800e12c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e128:	2301      	movs	r3, #1
 800e12a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e12c:	79fb      	ldrb	r3, [r7, #7]
}
 800e12e:	4618      	mov	r0, r3
 800e130:	3708      	adds	r7, #8
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}
 800e136:	bf00      	nop
 800e138:	20000b98 	.word	0x20000b98

0800e13c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b088      	sub	sp, #32
 800e140:	af02      	add	r7, sp, #8
 800e142:	60f8      	str	r0, [r7, #12]
 800e144:	60b9      	str	r1, [r7, #8]
 800e146:	607a      	str	r2, [r7, #4]
 800e148:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e14a:	2300      	movs	r3, #0
 800e14c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	9300      	str	r3, [sp, #0]
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	68ba      	ldr	r2, [r7, #8]
 800e156:	68f9      	ldr	r1, [r7, #12]
 800e158:	4806      	ldr	r0, [pc, #24]	; (800e174 <BSP_SD_ReadBlocks+0x38>)
 800e15a:	f7fb fc53 	bl	8009a04 <HAL_SD_ReadBlocks>
 800e15e:	4603      	mov	r3, r0
 800e160:	2b00      	cmp	r3, #0
 800e162:	d001      	beq.n	800e168 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e164:	2301      	movs	r3, #1
 800e166:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e168:	7dfb      	ldrb	r3, [r7, #23]
}
 800e16a:	4618      	mov	r0, r3
 800e16c:	3718      	adds	r7, #24
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}
 800e172:	bf00      	nop
 800e174:	20000b98 	.word	0x20000b98

0800e178 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b088      	sub	sp, #32
 800e17c:	af02      	add	r7, sp, #8
 800e17e:	60f8      	str	r0, [r7, #12]
 800e180:	60b9      	str	r1, [r7, #8]
 800e182:	607a      	str	r2, [r7, #4]
 800e184:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e186:	2300      	movs	r3, #0
 800e188:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	9300      	str	r3, [sp, #0]
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	68ba      	ldr	r2, [r7, #8]
 800e192:	68f9      	ldr	r1, [r7, #12]
 800e194:	4806      	ldr	r0, [pc, #24]	; (800e1b0 <BSP_SD_WriteBlocks+0x38>)
 800e196:	f7fb fe13 	bl	8009dc0 <HAL_SD_WriteBlocks>
 800e19a:	4603      	mov	r3, r0
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d001      	beq.n	800e1a4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e1a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3718      	adds	r7, #24
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop
 800e1b0:	20000b98 	.word	0x20000b98

0800e1b4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e1b8:	4805      	ldr	r0, [pc, #20]	; (800e1d0 <BSP_SD_GetCardState+0x1c>)
 800e1ba:	f7fc f9f1 	bl	800a5a0 <HAL_SD_GetCardState>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	2b04      	cmp	r3, #4
 800e1c2:	bf14      	ite	ne
 800e1c4:	2301      	movne	r3, #1
 800e1c6:	2300      	moveq	r3, #0
 800e1c8:	b2db      	uxtb	r3, r3
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	bd80      	pop	{r7, pc}
 800e1ce:	bf00      	nop
 800e1d0:	20000b98 	.word	0x20000b98

0800e1d4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800e1dc:	6879      	ldr	r1, [r7, #4]
 800e1de:	4803      	ldr	r0, [pc, #12]	; (800e1ec <BSP_SD_GetCardInfo+0x18>)
 800e1e0:	f7fc f918 	bl	800a414 <HAL_SD_GetCardInfo>
}
 800e1e4:	bf00      	nop
 800e1e6:	3708      	adds	r7, #8
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}
 800e1ec:	20000b98 	.word	0x20000b98

0800e1f0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e1fa:	f000 f80b 	bl	800e214 <BSP_PlatformIsDetected>
 800e1fe:	4603      	mov	r3, r0
 800e200:	2b00      	cmp	r3, #0
 800e202:	d101      	bne.n	800e208 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e204:	2300      	movs	r3, #0
 800e206:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e208:	79fb      	ldrb	r3, [r7, #7]
 800e20a:	b2db      	uxtb	r3, r3
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3708      	adds	r7, #8
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}

0800e214 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e214:	b580      	push	{r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e21a:	2301      	movs	r3, #1
 800e21c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e21e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e222:	4806      	ldr	r0, [pc, #24]	; (800e23c <BSP_PlatformIsDetected+0x28>)
 800e224:	f7f7 f898 	bl	8005358 <HAL_GPIO_ReadPin>
 800e228:	4603      	mov	r3, r0
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d001      	beq.n	800e232 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800e22e:	2300      	movs	r3, #0
 800e230:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e232:	79fb      	ldrb	r3, [r7, #7]
}
 800e234:	4618      	mov	r0, r3
 800e236:	3708      	adds	r7, #8
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}
 800e23c:	40020800 	.word	0x40020800

0800e240 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b082      	sub	sp, #8
 800e244:	af00      	add	r7, sp, #0
 800e246:	4603      	mov	r3, r0
 800e248:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e24a:	4b0b      	ldr	r3, [pc, #44]	; (800e278 <SD_CheckStatus+0x38>)
 800e24c:	2201      	movs	r2, #1
 800e24e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e250:	f7ff ffb0 	bl	800e1b4 <BSP_SD_GetCardState>
 800e254:	4603      	mov	r3, r0
 800e256:	2b00      	cmp	r3, #0
 800e258:	d107      	bne.n	800e26a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e25a:	4b07      	ldr	r3, [pc, #28]	; (800e278 <SD_CheckStatus+0x38>)
 800e25c:	781b      	ldrb	r3, [r3, #0]
 800e25e:	b2db      	uxtb	r3, r3
 800e260:	f023 0301 	bic.w	r3, r3, #1
 800e264:	b2da      	uxtb	r2, r3
 800e266:	4b04      	ldr	r3, [pc, #16]	; (800e278 <SD_CheckStatus+0x38>)
 800e268:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e26a:	4b03      	ldr	r3, [pc, #12]	; (800e278 <SD_CheckStatus+0x38>)
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	b2db      	uxtb	r3, r3
}
 800e270:	4618      	mov	r0, r3
 800e272:	3708      	adds	r7, #8
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}
 800e278:	20000009 	.word	0x20000009

0800e27c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
 800e282:	4603      	mov	r3, r0
 800e284:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800e286:	4b0b      	ldr	r3, [pc, #44]	; (800e2b4 <SD_initialize+0x38>)
 800e288:	2201      	movs	r2, #1
 800e28a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e28c:	f7ff ff30 	bl	800e0f0 <BSP_SD_Init>
 800e290:	4603      	mov	r3, r0
 800e292:	2b00      	cmp	r3, #0
 800e294:	d107      	bne.n	800e2a6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800e296:	79fb      	ldrb	r3, [r7, #7]
 800e298:	4618      	mov	r0, r3
 800e29a:	f7ff ffd1 	bl	800e240 <SD_CheckStatus>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	461a      	mov	r2, r3
 800e2a2:	4b04      	ldr	r3, [pc, #16]	; (800e2b4 <SD_initialize+0x38>)
 800e2a4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e2a6:	4b03      	ldr	r3, [pc, #12]	; (800e2b4 <SD_initialize+0x38>)
 800e2a8:	781b      	ldrb	r3, [r3, #0]
 800e2aa:	b2db      	uxtb	r3, r3
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3708      	adds	r7, #8
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	20000009 	.word	0x20000009

0800e2b8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b082      	sub	sp, #8
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	4603      	mov	r3, r0
 800e2c0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e2c2:	79fb      	ldrb	r3, [r7, #7]
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7ff ffbb 	bl	800e240 <SD_CheckStatus>
 800e2ca:	4603      	mov	r3, r0
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3708      	adds	r7, #8
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}

0800e2d4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b086      	sub	sp, #24
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	60b9      	str	r1, [r7, #8]
 800e2dc:	607a      	str	r2, [r7, #4]
 800e2de:	603b      	str	r3, [r7, #0]
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800e2e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e2ec:	683a      	ldr	r2, [r7, #0]
 800e2ee:	6879      	ldr	r1, [r7, #4]
 800e2f0:	68b8      	ldr	r0, [r7, #8]
 800e2f2:	f7ff ff23 	bl	800e13c <BSP_SD_ReadBlocks>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d107      	bne.n	800e30c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800e2fc:	bf00      	nop
 800e2fe:	f7ff ff59 	bl	800e1b4 <BSP_SD_GetCardState>
 800e302:	4603      	mov	r3, r0
 800e304:	2b00      	cmp	r3, #0
 800e306:	d1fa      	bne.n	800e2fe <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800e308:	2300      	movs	r3, #0
 800e30a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e30c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e30e:	4618      	mov	r0, r3
 800e310:	3718      	adds	r7, #24
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}

0800e316 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e316:	b580      	push	{r7, lr}
 800e318:	b086      	sub	sp, #24
 800e31a:	af00      	add	r7, sp, #0
 800e31c:	60b9      	str	r1, [r7, #8]
 800e31e:	607a      	str	r2, [r7, #4]
 800e320:	603b      	str	r3, [r7, #0]
 800e322:	4603      	mov	r3, r0
 800e324:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e326:	2301      	movs	r3, #1
 800e328:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800e32a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e32e:	683a      	ldr	r2, [r7, #0]
 800e330:	6879      	ldr	r1, [r7, #4]
 800e332:	68b8      	ldr	r0, [r7, #8]
 800e334:	f7ff ff20 	bl	800e178 <BSP_SD_WriteBlocks>
 800e338:	4603      	mov	r3, r0
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d107      	bne.n	800e34e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800e33e:	bf00      	nop
 800e340:	f7ff ff38 	bl	800e1b4 <BSP_SD_GetCardState>
 800e344:	4603      	mov	r3, r0
 800e346:	2b00      	cmp	r3, #0
 800e348:	d1fa      	bne.n	800e340 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800e34a:	2300      	movs	r3, #0
 800e34c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e34e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e350:	4618      	mov	r0, r3
 800e352:	3718      	adds	r7, #24
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}

0800e358 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b08c      	sub	sp, #48	; 0x30
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	4603      	mov	r3, r0
 800e360:	603a      	str	r2, [r7, #0]
 800e362:	71fb      	strb	r3, [r7, #7]
 800e364:	460b      	mov	r3, r1
 800e366:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e368:	2301      	movs	r3, #1
 800e36a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e36e:	4b25      	ldr	r3, [pc, #148]	; (800e404 <SD_ioctl+0xac>)
 800e370:	781b      	ldrb	r3, [r3, #0]
 800e372:	b2db      	uxtb	r3, r3
 800e374:	f003 0301 	and.w	r3, r3, #1
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d001      	beq.n	800e380 <SD_ioctl+0x28>
 800e37c:	2303      	movs	r3, #3
 800e37e:	e03c      	b.n	800e3fa <SD_ioctl+0xa2>

  switch (cmd)
 800e380:	79bb      	ldrb	r3, [r7, #6]
 800e382:	2b03      	cmp	r3, #3
 800e384:	d834      	bhi.n	800e3f0 <SD_ioctl+0x98>
 800e386:	a201      	add	r2, pc, #4	; (adr r2, 800e38c <SD_ioctl+0x34>)
 800e388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e38c:	0800e39d 	.word	0x0800e39d
 800e390:	0800e3a5 	.word	0x0800e3a5
 800e394:	0800e3bd 	.word	0x0800e3bd
 800e398:	0800e3d7 	.word	0x0800e3d7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e39c:	2300      	movs	r3, #0
 800e39e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e3a2:	e028      	b.n	800e3f6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e3a4:	f107 030c 	add.w	r3, r7, #12
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f7ff ff13 	bl	800e1d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e3ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e3ba:	e01c      	b.n	800e3f6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e3bc:	f107 030c 	add.w	r3, r7, #12
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7ff ff07 	bl	800e1d4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c8:	b29a      	uxth	r2, r3
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e3d4:	e00f      	b.n	800e3f6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e3d6:	f107 030c 	add.w	r3, r7, #12
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f7ff fefa 	bl	800e1d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e2:	0a5a      	lsrs	r2, r3, #9
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e3ee:	e002      	b.n	800e3f6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e3f0:	2304      	movs	r3, #4
 800e3f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e3f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3730      	adds	r7, #48	; 0x30
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop
 800e404:	20000009 	.word	0x20000009

0800e408 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800e408:	b590      	push	{r4, r7, lr}
 800e40a:	b089      	sub	sp, #36	; 0x24
 800e40c:	af04      	add	r7, sp, #16
 800e40e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800e410:	2301      	movs	r3, #1
 800e412:	2202      	movs	r2, #2
 800e414:	2102      	movs	r1, #2
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f000 fc66 	bl	800ece8 <USBH_FindInterface>
 800e41c:	4603      	mov	r3, r0
 800e41e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e420:	7bfb      	ldrb	r3, [r7, #15]
 800e422:	2bff      	cmp	r3, #255	; 0xff
 800e424:	d002      	beq.n	800e42c <USBH_CDC_InterfaceInit+0x24>
 800e426:	7bfb      	ldrb	r3, [r7, #15]
 800e428:	2b01      	cmp	r3, #1
 800e42a:	d901      	bls.n	800e430 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e42c:	2302      	movs	r3, #2
 800e42e:	e13d      	b.n	800e6ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800e430:	7bfb      	ldrb	r3, [r7, #15]
 800e432:	4619      	mov	r1, r3
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f000 fc3b 	bl	800ecb0 <USBH_SelectInterface>
 800e43a:	4603      	mov	r3, r0
 800e43c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800e43e:	7bbb      	ldrb	r3, [r7, #14]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d001      	beq.n	800e448 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800e444:	2302      	movs	r3, #2
 800e446:	e131      	b.n	800e6ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800e44e:	2050      	movs	r0, #80	; 0x50
 800e450:	f003 ffde 	bl	8012410 <malloc>
 800e454:	4603      	mov	r3, r0
 800e456:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e45e:	69db      	ldr	r3, [r3, #28]
 800e460:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d101      	bne.n	800e46c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800e468:	2302      	movs	r3, #2
 800e46a:	e11f      	b.n	800e6ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800e46c:	2250      	movs	r2, #80	; 0x50
 800e46e:	2100      	movs	r1, #0
 800e470:	68b8      	ldr	r0, [r7, #8]
 800e472:	f003 ffeb 	bl	801244c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e476:	7bfb      	ldrb	r3, [r7, #15]
 800e478:	687a      	ldr	r2, [r7, #4]
 800e47a:	211a      	movs	r1, #26
 800e47c:	fb01 f303 	mul.w	r3, r1, r3
 800e480:	4413      	add	r3, r2
 800e482:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e486:	781b      	ldrb	r3, [r3, #0]
 800e488:	b25b      	sxtb	r3, r3
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	da15      	bge.n	800e4ba <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e48e:	7bfb      	ldrb	r3, [r7, #15]
 800e490:	687a      	ldr	r2, [r7, #4]
 800e492:	211a      	movs	r1, #26
 800e494:	fb01 f303 	mul.w	r3, r1, r3
 800e498:	4413      	add	r3, r2
 800e49a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e49e:	781a      	ldrb	r2, [r3, #0]
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e4a4:	7bfb      	ldrb	r3, [r7, #15]
 800e4a6:	687a      	ldr	r2, [r7, #4]
 800e4a8:	211a      	movs	r1, #26
 800e4aa:	fb01 f303 	mul.w	r3, r1, r3
 800e4ae:	4413      	add	r3, r2
 800e4b0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e4b4:	881a      	ldrh	r2, [r3, #0]
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	785b      	ldrb	r3, [r3, #1]
 800e4be:	4619      	mov	r1, r3
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f001 fe32 	bl	801012a <USBH_AllocPipe>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	461a      	mov	r2, r3
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	7819      	ldrb	r1, [r3, #0]
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	7858      	ldrb	r0, [r3, #1]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e4e2:	68ba      	ldr	r2, [r7, #8]
 800e4e4:	8952      	ldrh	r2, [r2, #10]
 800e4e6:	9202      	str	r2, [sp, #8]
 800e4e8:	2203      	movs	r2, #3
 800e4ea:	9201      	str	r2, [sp, #4]
 800e4ec:	9300      	str	r3, [sp, #0]
 800e4ee:	4623      	mov	r3, r4
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f001 fdea 	bl	80100cc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	781b      	ldrb	r3, [r3, #0]
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	4619      	mov	r1, r3
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f002 f949 	bl	8010798 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800e506:	2300      	movs	r3, #0
 800e508:	2200      	movs	r2, #0
 800e50a:	210a      	movs	r1, #10
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f000 fbeb 	bl	800ece8 <USBH_FindInterface>
 800e512:	4603      	mov	r3, r0
 800e514:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e516:	7bfb      	ldrb	r3, [r7, #15]
 800e518:	2bff      	cmp	r3, #255	; 0xff
 800e51a:	d002      	beq.n	800e522 <USBH_CDC_InterfaceInit+0x11a>
 800e51c:	7bfb      	ldrb	r3, [r7, #15]
 800e51e:	2b01      	cmp	r3, #1
 800e520:	d901      	bls.n	800e526 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e522:	2302      	movs	r3, #2
 800e524:	e0c2      	b.n	800e6ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e526:	7bfb      	ldrb	r3, [r7, #15]
 800e528:	687a      	ldr	r2, [r7, #4]
 800e52a:	211a      	movs	r1, #26
 800e52c:	fb01 f303 	mul.w	r3, r1, r3
 800e530:	4413      	add	r3, r2
 800e532:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e536:	781b      	ldrb	r3, [r3, #0]
 800e538:	b25b      	sxtb	r3, r3
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	da16      	bge.n	800e56c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e53e:	7bfb      	ldrb	r3, [r7, #15]
 800e540:	687a      	ldr	r2, [r7, #4]
 800e542:	211a      	movs	r1, #26
 800e544:	fb01 f303 	mul.w	r3, r1, r3
 800e548:	4413      	add	r3, r2
 800e54a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e54e:	781a      	ldrb	r2, [r3, #0]
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e554:	7bfb      	ldrb	r3, [r7, #15]
 800e556:	687a      	ldr	r2, [r7, #4]
 800e558:	211a      	movs	r1, #26
 800e55a:	fb01 f303 	mul.w	r3, r1, r3
 800e55e:	4413      	add	r3, r2
 800e560:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e564:	881a      	ldrh	r2, [r3, #0]
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	835a      	strh	r2, [r3, #26]
 800e56a:	e015      	b.n	800e598 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e56c:	7bfb      	ldrb	r3, [r7, #15]
 800e56e:	687a      	ldr	r2, [r7, #4]
 800e570:	211a      	movs	r1, #26
 800e572:	fb01 f303 	mul.w	r3, r1, r3
 800e576:	4413      	add	r3, r2
 800e578:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e57c:	781a      	ldrb	r2, [r3, #0]
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e582:	7bfb      	ldrb	r3, [r7, #15]
 800e584:	687a      	ldr	r2, [r7, #4]
 800e586:	211a      	movs	r1, #26
 800e588:	fb01 f303 	mul.w	r3, r1, r3
 800e58c:	4413      	add	r3, r2
 800e58e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e592:	881a      	ldrh	r2, [r3, #0]
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800e598:	7bfb      	ldrb	r3, [r7, #15]
 800e59a:	687a      	ldr	r2, [r7, #4]
 800e59c:	211a      	movs	r1, #26
 800e59e:	fb01 f303 	mul.w	r3, r1, r3
 800e5a2:	4413      	add	r3, r2
 800e5a4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e5a8:	781b      	ldrb	r3, [r3, #0]
 800e5aa:	b25b      	sxtb	r3, r3
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	da16      	bge.n	800e5de <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e5b0:	7bfb      	ldrb	r3, [r7, #15]
 800e5b2:	687a      	ldr	r2, [r7, #4]
 800e5b4:	211a      	movs	r1, #26
 800e5b6:	fb01 f303 	mul.w	r3, r1, r3
 800e5ba:	4413      	add	r3, r2
 800e5bc:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e5c0:	781a      	ldrb	r2, [r3, #0]
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e5c6:	7bfb      	ldrb	r3, [r7, #15]
 800e5c8:	687a      	ldr	r2, [r7, #4]
 800e5ca:	211a      	movs	r1, #26
 800e5cc:	fb01 f303 	mul.w	r3, r1, r3
 800e5d0:	4413      	add	r3, r2
 800e5d2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e5d6:	881a      	ldrh	r2, [r3, #0]
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	835a      	strh	r2, [r3, #26]
 800e5dc:	e015      	b.n	800e60a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e5de:	7bfb      	ldrb	r3, [r7, #15]
 800e5e0:	687a      	ldr	r2, [r7, #4]
 800e5e2:	211a      	movs	r1, #26
 800e5e4:	fb01 f303 	mul.w	r3, r1, r3
 800e5e8:	4413      	add	r3, r2
 800e5ea:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e5ee:	781a      	ldrb	r2, [r3, #0]
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e5f4:	7bfb      	ldrb	r3, [r7, #15]
 800e5f6:	687a      	ldr	r2, [r7, #4]
 800e5f8:	211a      	movs	r1, #26
 800e5fa:	fb01 f303 	mul.w	r3, r1, r3
 800e5fe:	4413      	add	r3, r2
 800e600:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e604:	881a      	ldrh	r2, [r3, #0]
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	7b9b      	ldrb	r3, [r3, #14]
 800e60e:	4619      	mov	r1, r3
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	f001 fd8a 	bl	801012a <USBH_AllocPipe>
 800e616:	4603      	mov	r3, r0
 800e618:	461a      	mov	r2, r3
 800e61a:	68bb      	ldr	r3, [r7, #8]
 800e61c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	7bdb      	ldrb	r3, [r3, #15]
 800e622:	4619      	mov	r1, r3
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f001 fd80 	bl	801012a <USBH_AllocPipe>
 800e62a:	4603      	mov	r3, r0
 800e62c:	461a      	mov	r2, r3
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	7b59      	ldrb	r1, [r3, #13]
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	7b98      	ldrb	r0, [r3, #14]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e646:	68ba      	ldr	r2, [r7, #8]
 800e648:	8b12      	ldrh	r2, [r2, #24]
 800e64a:	9202      	str	r2, [sp, #8]
 800e64c:	2202      	movs	r2, #2
 800e64e:	9201      	str	r2, [sp, #4]
 800e650:	9300      	str	r3, [sp, #0]
 800e652:	4623      	mov	r3, r4
 800e654:	4602      	mov	r2, r0
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f001 fd38 	bl	80100cc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	7b19      	ldrb	r1, [r3, #12]
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	7bd8      	ldrb	r0, [r3, #15]
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e670:	68ba      	ldr	r2, [r7, #8]
 800e672:	8b52      	ldrh	r2, [r2, #26]
 800e674:	9202      	str	r2, [sp, #8]
 800e676:	2202      	movs	r2, #2
 800e678:	9201      	str	r2, [sp, #4]
 800e67a:	9300      	str	r3, [sp, #0]
 800e67c:	4623      	mov	r3, r4
 800e67e:	4602      	mov	r2, r0
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f001 fd23 	bl	80100cc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800e686:	68bb      	ldr	r3, [r7, #8]
 800e688:	2200      	movs	r2, #0
 800e68a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	7b5b      	ldrb	r3, [r3, #13]
 800e692:	2200      	movs	r2, #0
 800e694:	4619      	mov	r1, r3
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f002 f87e 	bl	8010798 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	7b1b      	ldrb	r3, [r3, #12]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	4619      	mov	r1, r3
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f002 f877 	bl	8010798 <USBH_LL_SetToggle>

  return USBH_OK;
 800e6aa:	2300      	movs	r3, #0
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3714      	adds	r7, #20
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd90      	pop	{r4, r7, pc}

0800e6b4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b084      	sub	sp, #16
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e6c2:	69db      	ldr	r3, [r3, #28]
 800e6c4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	781b      	ldrb	r3, [r3, #0]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d00e      	beq.n	800e6ec <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	781b      	ldrb	r3, [r3, #0]
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f001 fd18 	bl	801010a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	781b      	ldrb	r3, [r3, #0]
 800e6de:	4619      	mov	r1, r3
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f001 fd43 	bl	801016c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	7b1b      	ldrb	r3, [r3, #12]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d00e      	beq.n	800e712 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	7b1b      	ldrb	r3, [r3, #12]
 800e6f8:	4619      	mov	r1, r3
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f001 fd05 	bl	801010a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	7b1b      	ldrb	r3, [r3, #12]
 800e704:	4619      	mov	r1, r3
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f001 fd30 	bl	801016c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	2200      	movs	r2, #0
 800e710:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	7b5b      	ldrb	r3, [r3, #13]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d00e      	beq.n	800e738 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	7b5b      	ldrb	r3, [r3, #13]
 800e71e:	4619      	mov	r1, r3
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f001 fcf2 	bl	801010a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	7b5b      	ldrb	r3, [r3, #13]
 800e72a:	4619      	mov	r1, r3
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f001 fd1d 	bl	801016c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	2200      	movs	r2, #0
 800e736:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e73e:	69db      	ldr	r3, [r3, #28]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d00b      	beq.n	800e75c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e74a:	69db      	ldr	r3, [r3, #28]
 800e74c:	4618      	mov	r0, r3
 800e74e:	f003 fe67 	bl	8012420 <free>
    phost->pActiveClass->pData = 0U;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e758:	2200      	movs	r2, #0
 800e75a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800e75c:	2300      	movs	r3, #0
}
 800e75e:	4618      	mov	r0, r3
 800e760:	3710      	adds	r7, #16
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}

0800e766 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800e766:	b580      	push	{r7, lr}
 800e768:	b084      	sub	sp, #16
 800e76a:	af00      	add	r7, sp, #0
 800e76c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e774:	69db      	ldr	r3, [r3, #28]
 800e776:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	3340      	adds	r3, #64	; 0x40
 800e77c:	4619      	mov	r1, r3
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f000 f8b1 	bl	800e8e6 <GetLineCoding>
 800e784:	4603      	mov	r3, r0
 800e786:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800e788:	7afb      	ldrb	r3, [r7, #11]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d105      	bne.n	800e79a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e794:	2102      	movs	r1, #2
 800e796:	6878      	ldr	r0, [r7, #4]
 800e798:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800e79a:	7afb      	ldrb	r3, [r7, #11]
}
 800e79c:	4618      	mov	r0, r3
 800e79e:	3710      	adds	r7, #16
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}

0800e7a4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b084      	sub	sp, #16
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e7ba:	69db      	ldr	r3, [r3, #28]
 800e7bc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e7c4:	2b04      	cmp	r3, #4
 800e7c6:	d877      	bhi.n	800e8b8 <USBH_CDC_Process+0x114>
 800e7c8:	a201      	add	r2, pc, #4	; (adr r2, 800e7d0 <USBH_CDC_Process+0x2c>)
 800e7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7ce:	bf00      	nop
 800e7d0:	0800e7e5 	.word	0x0800e7e5
 800e7d4:	0800e7eb 	.word	0x0800e7eb
 800e7d8:	0800e81b 	.word	0x0800e81b
 800e7dc:	0800e88f 	.word	0x0800e88f
 800e7e0:	0800e89d 	.word	0x0800e89d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	73fb      	strb	r3, [r7, #15]
      break;
 800e7e8:	e06d      	b.n	800e8c6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f000 f897 	bl	800e924 <SetLineCoding>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e7fa:	7bbb      	ldrb	r3, [r7, #14]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d104      	bne.n	800e80a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	2202      	movs	r2, #2
 800e804:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e808:	e058      	b.n	800e8bc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800e80a:	7bbb      	ldrb	r3, [r7, #14]
 800e80c:	2b01      	cmp	r3, #1
 800e80e:	d055      	beq.n	800e8bc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	2204      	movs	r2, #4
 800e814:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e818:	e050      	b.n	800e8bc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	3340      	adds	r3, #64	; 0x40
 800e81e:	4619      	mov	r1, r3
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f000 f860 	bl	800e8e6 <GetLineCoding>
 800e826:	4603      	mov	r3, r0
 800e828:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e82a:	7bbb      	ldrb	r3, [r7, #14]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d126      	bne.n	800e87e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	2200      	movs	r2, #0
 800e834:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e842:	791b      	ldrb	r3, [r3, #4]
 800e844:	429a      	cmp	r2, r3
 800e846:	d13b      	bne.n	800e8c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e852:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e854:	429a      	cmp	r2, r3
 800e856:	d133      	bne.n	800e8c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e858:	68bb      	ldr	r3, [r7, #8]
 800e85a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e862:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e864:	429a      	cmp	r2, r3
 800e866:	d12b      	bne.n	800e8c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e86c:	68bb      	ldr	r3, [r7, #8]
 800e86e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e870:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e872:	429a      	cmp	r2, r3
 800e874:	d124      	bne.n	800e8c0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f000 f958 	bl	800eb2c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e87c:	e020      	b.n	800e8c0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800e87e:	7bbb      	ldrb	r3, [r7, #14]
 800e880:	2b01      	cmp	r3, #1
 800e882:	d01d      	beq.n	800e8c0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	2204      	movs	r2, #4
 800e888:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e88c:	e018      	b.n	800e8c0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f000 f867 	bl	800e962 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f000 f8da 	bl	800ea4e <CDC_ProcessReception>
      break;
 800e89a:	e014      	b.n	800e8c6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800e89c:	2100      	movs	r1, #0
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f000 ffe3 	bl	800f86a <USBH_ClrFeature>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e8a8:	7bbb      	ldrb	r3, [r7, #14]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d10a      	bne.n	800e8c4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800e8b6:	e005      	b.n	800e8c4 <USBH_CDC_Process+0x120>

    default:
      break;
 800e8b8:	bf00      	nop
 800e8ba:	e004      	b.n	800e8c6 <USBH_CDC_Process+0x122>
      break;
 800e8bc:	bf00      	nop
 800e8be:	e002      	b.n	800e8c6 <USBH_CDC_Process+0x122>
      break;
 800e8c0:	bf00      	nop
 800e8c2:	e000      	b.n	800e8c6 <USBH_CDC_Process+0x122>
      break;
 800e8c4:	bf00      	nop

  }

  return status;
 800e8c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3710      	adds	r7, #16
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}

0800e8d0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b083      	sub	sp, #12
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800e8d8:	2300      	movs	r3, #0
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	370c      	adds	r7, #12
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e4:	4770      	bx	lr

0800e8e6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800e8e6:	b580      	push	{r7, lr}
 800e8e8:	b082      	sub	sp, #8
 800e8ea:	af00      	add	r7, sp, #0
 800e8ec:	6078      	str	r0, [r7, #4]
 800e8ee:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	22a1      	movs	r2, #161	; 0xa1
 800e8f4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2221      	movs	r2, #33	; 0x21
 800e8fa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2200      	movs	r2, #0
 800e900:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2200      	movs	r2, #0
 800e906:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2207      	movs	r2, #7
 800e90c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	2207      	movs	r2, #7
 800e912:	4619      	mov	r1, r3
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f001 f988 	bl	800fc2a <USBH_CtlReq>
 800e91a:	4603      	mov	r3, r0
}
 800e91c:	4618      	mov	r0, r3
 800e91e:	3708      	adds	r7, #8
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}

0800e924 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b082      	sub	sp, #8
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2221      	movs	r2, #33	; 0x21
 800e932:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2220      	movs	r2, #32
 800e938:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2200      	movs	r2, #0
 800e93e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2200      	movs	r2, #0
 800e944:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2207      	movs	r2, #7
 800e94a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	2207      	movs	r2, #7
 800e950:	4619      	mov	r1, r3
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	f001 f969 	bl	800fc2a <USBH_CtlReq>
 800e958:	4603      	mov	r3, r0
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3708      	adds	r7, #8
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}

0800e962 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800e962:	b580      	push	{r7, lr}
 800e964:	b086      	sub	sp, #24
 800e966:	af02      	add	r7, sp, #8
 800e968:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e970:	69db      	ldr	r3, [r3, #28]
 800e972:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e974:	2300      	movs	r3, #0
 800e976:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e97e:	2b01      	cmp	r3, #1
 800e980:	d002      	beq.n	800e988 <CDC_ProcessTransmission+0x26>
 800e982:	2b02      	cmp	r3, #2
 800e984:	d023      	beq.n	800e9ce <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800e986:	e05e      	b.n	800ea46 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e98c:	68fa      	ldr	r2, [r7, #12]
 800e98e:	8b12      	ldrh	r2, [r2, #24]
 800e990:	4293      	cmp	r3, r2
 800e992:	d90b      	bls.n	800e9ac <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	69d9      	ldr	r1, [r3, #28]
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	8b1a      	ldrh	r2, [r3, #24]
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	7b5b      	ldrb	r3, [r3, #13]
 800e9a0:	2001      	movs	r0, #1
 800e9a2:	9000      	str	r0, [sp, #0]
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f001 fb4e 	bl	8010046 <USBH_BulkSendData>
 800e9aa:	e00b      	b.n	800e9c4 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800e9b4:	b29a      	uxth	r2, r3
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	7b5b      	ldrb	r3, [r3, #13]
 800e9ba:	2001      	movs	r0, #1
 800e9bc:	9000      	str	r0, [sp, #0]
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f001 fb41 	bl	8010046 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	2202      	movs	r2, #2
 800e9c8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e9cc:	e03b      	b.n	800ea46 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	7b5b      	ldrb	r3, [r3, #13]
 800e9d2:	4619      	mov	r1, r3
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f001 feb5 	bl	8010744 <USBH_LL_GetURBState>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800e9de:	7afb      	ldrb	r3, [r7, #11]
 800e9e0:	2b01      	cmp	r3, #1
 800e9e2:	d128      	bne.n	800ea36 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9e8:	68fa      	ldr	r2, [r7, #12]
 800e9ea:	8b12      	ldrh	r2, [r2, #24]
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	d90e      	bls.n	800ea0e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f4:	68fa      	ldr	r2, [r7, #12]
 800e9f6:	8b12      	ldrh	r2, [r2, #24]
 800e9f8:	1a9a      	subs	r2, r3, r2
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	69db      	ldr	r3, [r3, #28]
 800ea02:	68fa      	ldr	r2, [r7, #12]
 800ea04:	8b12      	ldrh	r2, [r2, #24]
 800ea06:	441a      	add	r2, r3
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	61da      	str	r2, [r3, #28]
 800ea0c:	e002      	b.n	800ea14 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	2200      	movs	r2, #0
 800ea12:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d004      	beq.n	800ea26 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	2201      	movs	r2, #1
 800ea20:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ea24:	e00e      	b.n	800ea44 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	2200      	movs	r2, #0
 800ea2a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f000 f868 	bl	800eb04 <USBH_CDC_TransmitCallback>
      break;
 800ea34:	e006      	b.n	800ea44 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800ea36:	7afb      	ldrb	r3, [r7, #11]
 800ea38:	2b02      	cmp	r3, #2
 800ea3a:	d103      	bne.n	800ea44 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	2201      	movs	r2, #1
 800ea40:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ea44:	bf00      	nop
  }
}
 800ea46:	bf00      	nop
 800ea48:	3710      	adds	r7, #16
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}

0800ea4e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ea4e:	b580      	push	{r7, lr}
 800ea50:	b086      	sub	sp, #24
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ea5c:	69db      	ldr	r3, [r3, #28]
 800ea5e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ea60:	2300      	movs	r3, #0
 800ea62:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ea6a:	2b03      	cmp	r3, #3
 800ea6c:	d002      	beq.n	800ea74 <CDC_ProcessReception+0x26>
 800ea6e:	2b04      	cmp	r3, #4
 800ea70:	d00e      	beq.n	800ea90 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800ea72:	e043      	b.n	800eafc <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	6a19      	ldr	r1, [r3, #32]
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	8b5a      	ldrh	r2, [r3, #26]
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	7b1b      	ldrb	r3, [r3, #12]
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f001 fb05 	bl	8010090 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	2204      	movs	r2, #4
 800ea8a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800ea8e:	e035      	b.n	800eafc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800ea90:	697b      	ldr	r3, [r7, #20]
 800ea92:	7b1b      	ldrb	r3, [r3, #12]
 800ea94:	4619      	mov	r1, r3
 800ea96:	6878      	ldr	r0, [r7, #4]
 800ea98:	f001 fe54 	bl	8010744 <USBH_LL_GetURBState>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800eaa0:	7cfb      	ldrb	r3, [r7, #19]
 800eaa2:	2b01      	cmp	r3, #1
 800eaa4:	d129      	bne.n	800eafa <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	7b1b      	ldrb	r3, [r3, #12]
 800eaaa:	4619      	mov	r1, r3
 800eaac:	6878      	ldr	r0, [r7, #4]
 800eaae:	f001 fdb7 	bl	8010620 <USBH_LL_GetLastXferSize>
 800eab2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800eab4:	697b      	ldr	r3, [r7, #20]
 800eab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eab8:	68fa      	ldr	r2, [r7, #12]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d016      	beq.n	800eaec <CDC_ProcessReception+0x9e>
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	8b5b      	ldrh	r3, [r3, #26]
 800eac2:	461a      	mov	r2, r3
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	4293      	cmp	r3, r2
 800eac8:	d910      	bls.n	800eaec <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	1ad2      	subs	r2, r2, r3
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	6a1a      	ldr	r2, [r3, #32]
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	441a      	add	r2, r3
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	2203      	movs	r2, #3
 800eae6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800eaea:	e006      	b.n	800eafa <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f000 f80f 	bl	800eb18 <USBH_CDC_ReceiveCallback>
      break;
 800eafa:	bf00      	nop
  }
}
 800eafc:	bf00      	nop
 800eafe:	3718      	adds	r7, #24
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}

0800eb04 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800eb04:	b480      	push	{r7}
 800eb06:	b083      	sub	sp, #12
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800eb0c:	bf00      	nop
 800eb0e:	370c      	adds	r7, #12
 800eb10:	46bd      	mov	sp, r7
 800eb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb16:	4770      	bx	lr

0800eb18 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b083      	sub	sp, #12
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800eb20:	bf00      	nop
 800eb22:	370c      	adds	r7, #12
 800eb24:	46bd      	mov	sp, r7
 800eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2a:	4770      	bx	lr

0800eb2c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800eb2c:	b480      	push	{r7}
 800eb2e:	b083      	sub	sp, #12
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800eb34:	bf00      	nop
 800eb36:	370c      	adds	r7, #12
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3e:	4770      	bx	lr

0800eb40 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b084      	sub	sp, #16
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	60f8      	str	r0, [r7, #12]
 800eb48:	60b9      	str	r1, [r7, #8]
 800eb4a:	4613      	mov	r3, r2
 800eb4c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d101      	bne.n	800eb58 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800eb54:	2302      	movs	r3, #2
 800eb56:	e029      	b.n	800ebac <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	79fa      	ldrb	r2, [r7, #7]
 800eb5c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2200      	movs	r2, #0
 800eb64:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800eb70:	68f8      	ldr	r0, [r7, #12]
 800eb72:	f000 f81f 	bl	800ebb4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	2200      	movs	r2, #0
 800eb7a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	2200      	movs	r2, #0
 800eb82:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	2200      	movs	r2, #0
 800eb92:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d003      	beq.n	800eba4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	68ba      	ldr	r2, [r7, #8]
 800eba0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800eba4:	68f8      	ldr	r0, [r7, #12]
 800eba6:	f001 fc87 	bl	80104b8 <USBH_LL_Init>

  return USBH_OK;
 800ebaa:	2300      	movs	r3, #0
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3710      	adds	r7, #16
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}

0800ebb4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b085      	sub	sp, #20
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	60fb      	str	r3, [r7, #12]
 800ebc4:	e009      	b.n	800ebda <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ebc6:	687a      	ldr	r2, [r7, #4]
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	33e0      	adds	r3, #224	; 0xe0
 800ebcc:	009b      	lsls	r3, r3, #2
 800ebce:	4413      	add	r3, r2
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	3301      	adds	r3, #1
 800ebd8:	60fb      	str	r3, [r7, #12]
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	2b0e      	cmp	r3, #14
 800ebde:	d9f2      	bls.n	800ebc6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	60fb      	str	r3, [r7, #12]
 800ebe4:	e009      	b.n	800ebfa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ebe6:	687a      	ldr	r2, [r7, #4]
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	4413      	add	r3, r2
 800ebec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	3301      	adds	r3, #1
 800ebf8:	60fb      	str	r3, [r7, #12]
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec00:	d3f1      	bcc.n	800ebe6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2200      	movs	r2, #0
 800ec06:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2201      	movs	r2, #1
 800ec12:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2200      	movs	r2, #0
 800ec18:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2201      	movs	r2, #1
 800ec20:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2240      	movs	r2, #64	; 0x40
 800ec26:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2200      	movs	r2, #0
 800ec32:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2201      	movs	r2, #1
 800ec3a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2200      	movs	r2, #0
 800ec42:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2200      	movs	r2, #0
 800ec4a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800ec4e:	2300      	movs	r3, #0
}
 800ec50:	4618      	mov	r0, r3
 800ec52:	3714      	adds	r7, #20
 800ec54:	46bd      	mov	sp, r7
 800ec56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5a:	4770      	bx	lr

0800ec5c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ec5c:	b480      	push	{r7}
 800ec5e:	b085      	sub	sp, #20
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
 800ec64:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ec66:	2300      	movs	r3, #0
 800ec68:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d016      	beq.n	800ec9e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d10e      	bne.n	800ec98 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ec80:	1c59      	adds	r1, r3, #1
 800ec82:	687a      	ldr	r2, [r7, #4]
 800ec84:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800ec88:	687a      	ldr	r2, [r7, #4]
 800ec8a:	33de      	adds	r3, #222	; 0xde
 800ec8c:	6839      	ldr	r1, [r7, #0]
 800ec8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ec92:	2300      	movs	r3, #0
 800ec94:	73fb      	strb	r3, [r7, #15]
 800ec96:	e004      	b.n	800eca2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ec98:	2302      	movs	r3, #2
 800ec9a:	73fb      	strb	r3, [r7, #15]
 800ec9c:	e001      	b.n	800eca2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ec9e:	2302      	movs	r3, #2
 800eca0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800eca2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eca4:	4618      	mov	r0, r3
 800eca6:	3714      	adds	r7, #20
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecae:	4770      	bx	lr

0800ecb0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ecb0:	b480      	push	{r7}
 800ecb2:	b085      	sub	sp, #20
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
 800ecb8:	460b      	mov	r3, r1
 800ecba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800ecc6:	78fa      	ldrb	r2, [r7, #3]
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	d204      	bcs.n	800ecd6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	78fa      	ldrb	r2, [r7, #3]
 800ecd0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800ecd4:	e001      	b.n	800ecda <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ecd6:	2302      	movs	r3, #2
 800ecd8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ecda:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3714      	adds	r7, #20
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr

0800ece8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b087      	sub	sp, #28
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
 800ecf0:	4608      	mov	r0, r1
 800ecf2:	4611      	mov	r1, r2
 800ecf4:	461a      	mov	r2, r3
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	70fb      	strb	r3, [r7, #3]
 800ecfa:	460b      	mov	r3, r1
 800ecfc:	70bb      	strb	r3, [r7, #2]
 800ecfe:	4613      	mov	r3, r2
 800ed00:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ed02:	2300      	movs	r3, #0
 800ed04:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800ed06:	2300      	movs	r3, #0
 800ed08:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ed10:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ed12:	e025      	b.n	800ed60 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ed14:	7dfb      	ldrb	r3, [r7, #23]
 800ed16:	221a      	movs	r2, #26
 800ed18:	fb02 f303 	mul.w	r3, r2, r3
 800ed1c:	3308      	adds	r3, #8
 800ed1e:	68fa      	ldr	r2, [r7, #12]
 800ed20:	4413      	add	r3, r2
 800ed22:	3302      	adds	r3, #2
 800ed24:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	795b      	ldrb	r3, [r3, #5]
 800ed2a:	78fa      	ldrb	r2, [r7, #3]
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	d002      	beq.n	800ed36 <USBH_FindInterface+0x4e>
 800ed30:	78fb      	ldrb	r3, [r7, #3]
 800ed32:	2bff      	cmp	r3, #255	; 0xff
 800ed34:	d111      	bne.n	800ed5a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ed3a:	78ba      	ldrb	r2, [r7, #2]
 800ed3c:	429a      	cmp	r2, r3
 800ed3e:	d002      	beq.n	800ed46 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ed40:	78bb      	ldrb	r3, [r7, #2]
 800ed42:	2bff      	cmp	r3, #255	; 0xff
 800ed44:	d109      	bne.n	800ed5a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ed4a:	787a      	ldrb	r2, [r7, #1]
 800ed4c:	429a      	cmp	r2, r3
 800ed4e:	d002      	beq.n	800ed56 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ed50:	787b      	ldrb	r3, [r7, #1]
 800ed52:	2bff      	cmp	r3, #255	; 0xff
 800ed54:	d101      	bne.n	800ed5a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ed56:	7dfb      	ldrb	r3, [r7, #23]
 800ed58:	e006      	b.n	800ed68 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ed5a:	7dfb      	ldrb	r3, [r7, #23]
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ed60:	7dfb      	ldrb	r3, [r7, #23]
 800ed62:	2b01      	cmp	r3, #1
 800ed64:	d9d6      	bls.n	800ed14 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ed66:	23ff      	movs	r3, #255	; 0xff
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	371c      	adds	r7, #28
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed72:	4770      	bx	lr

0800ed74 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b082      	sub	sp, #8
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800ed7c:	6878      	ldr	r0, [r7, #4]
 800ed7e:	f001 fbd7 	bl	8010530 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800ed82:	2101      	movs	r1, #1
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f001 fcf0 	bl	801076a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ed8a:	2300      	movs	r3, #0
}
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	3708      	adds	r7, #8
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}

0800ed94 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b088      	sub	sp, #32
 800ed98:	af04      	add	r7, sp, #16
 800ed9a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ed9c:	2302      	movs	r3, #2
 800ed9e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800eda0:	2300      	movs	r3, #0
 800eda2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800edaa:	b2db      	uxtb	r3, r3
 800edac:	2b01      	cmp	r3, #1
 800edae:	d102      	bne.n	800edb6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2203      	movs	r2, #3
 800edb4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	781b      	ldrb	r3, [r3, #0]
 800edba:	b2db      	uxtb	r3, r3
 800edbc:	2b0b      	cmp	r3, #11
 800edbe:	f200 81b3 	bhi.w	800f128 <USBH_Process+0x394>
 800edc2:	a201      	add	r2, pc, #4	; (adr r2, 800edc8 <USBH_Process+0x34>)
 800edc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edc8:	0800edf9 	.word	0x0800edf9
 800edcc:	0800ee2b 	.word	0x0800ee2b
 800edd0:	0800ee93 	.word	0x0800ee93
 800edd4:	0800f0c3 	.word	0x0800f0c3
 800edd8:	0800f129 	.word	0x0800f129
 800eddc:	0800ef37 	.word	0x0800ef37
 800ede0:	0800f069 	.word	0x0800f069
 800ede4:	0800ef6d 	.word	0x0800ef6d
 800ede8:	0800ef8d 	.word	0x0800ef8d
 800edec:	0800efad 	.word	0x0800efad
 800edf0:	0800efdb 	.word	0x0800efdb
 800edf4:	0800f0ab 	.word	0x0800f0ab
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800edfe:	b2db      	uxtb	r3, r3
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	f000 8193 	beq.w	800f12c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2201      	movs	r2, #1
 800ee0a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ee0c:	20c8      	movs	r0, #200	; 0xc8
 800ee0e:	f001 fcf3 	bl	80107f8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f001 fbe9 	bl	80105ea <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2200      	movs	r2, #0
 800ee24:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ee28:	e180      	b.n	800f12c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d107      	bne.n	800ee44 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2200      	movs	r2, #0
 800ee38:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2202      	movs	r2, #2
 800ee40:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ee42:	e182      	b.n	800f14a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ee4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ee4e:	d914      	bls.n	800ee7a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ee56:	3301      	adds	r3, #1
 800ee58:	b2da      	uxtb	r2, r3
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ee66:	2b03      	cmp	r3, #3
 800ee68:	d903      	bls.n	800ee72 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	220d      	movs	r2, #13
 800ee6e:	701a      	strb	r2, [r3, #0]
      break;
 800ee70:	e16b      	b.n	800f14a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2200      	movs	r2, #0
 800ee76:	701a      	strb	r2, [r3, #0]
      break;
 800ee78:	e167      	b.n	800f14a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ee80:	f103 020a 	add.w	r2, r3, #10
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ee8a:	200a      	movs	r0, #10
 800ee8c:	f001 fcb4 	bl	80107f8 <USBH_Delay>
      break;
 800ee90:	e15b      	b.n	800f14a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d005      	beq.n	800eea8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eea2:	2104      	movs	r1, #4
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800eea8:	2064      	movs	r0, #100	; 0x64
 800eeaa:	f001 fca5 	bl	80107f8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f001 fb74 	bl	801059c <USBH_LL_GetSpeed>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	461a      	mov	r2, r3
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2205      	movs	r2, #5
 800eec2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800eec4:	2100      	movs	r1, #0
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f001 f92f 	bl	801012a <USBH_AllocPipe>
 800eecc:	4603      	mov	r3, r0
 800eece:	461a      	mov	r2, r3
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800eed4:	2180      	movs	r1, #128	; 0x80
 800eed6:	6878      	ldr	r0, [r7, #4]
 800eed8:	f001 f927 	bl	801012a <USBH_AllocPipe>
 800eedc:	4603      	mov	r3, r0
 800eede:	461a      	mov	r2, r3
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	7919      	ldrb	r1, [r3, #4]
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800eef4:	687a      	ldr	r2, [r7, #4]
 800eef6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800eef8:	b292      	uxth	r2, r2
 800eefa:	9202      	str	r2, [sp, #8]
 800eefc:	2200      	movs	r2, #0
 800eefe:	9201      	str	r2, [sp, #4]
 800ef00:	9300      	str	r3, [sp, #0]
 800ef02:	4603      	mov	r3, r0
 800ef04:	2280      	movs	r2, #128	; 0x80
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f001 f8e0 	bl	80100cc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	7959      	ldrb	r1, [r3, #5]
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ef1c:	687a      	ldr	r2, [r7, #4]
 800ef1e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ef20:	b292      	uxth	r2, r2
 800ef22:	9202      	str	r2, [sp, #8]
 800ef24:	2200      	movs	r2, #0
 800ef26:	9201      	str	r2, [sp, #4]
 800ef28:	9300      	str	r3, [sp, #0]
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	f001 f8cc 	bl	80100cc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ef34:	e109      	b.n	800f14a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f000 f90c 	bl	800f154 <USBH_HandleEnum>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ef40:	7bbb      	ldrb	r3, [r7, #14]
 800ef42:	b2db      	uxtb	r3, r3
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	f040 80f3 	bne.w	800f130 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ef58:	2b01      	cmp	r3, #1
 800ef5a:	d103      	bne.n	800ef64 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2208      	movs	r2, #8
 800ef60:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ef62:	e0e5      	b.n	800f130 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2207      	movs	r2, #7
 800ef68:	701a      	strb	r2, [r3, #0]
      break;
 800ef6a:	e0e1      	b.n	800f130 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	f000 80de 	beq.w	800f134 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ef7e:	2101      	movs	r1, #1
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2208      	movs	r2, #8
 800ef88:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ef8a:	e0d3      	b.n	800f134 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ef92:	b29b      	uxth	r3, r3
 800ef94:	4619      	mov	r1, r3
 800ef96:	6878      	ldr	r0, [r7, #4]
 800ef98:	f000 fc20 	bl	800f7dc <USBH_SetCfg>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	f040 80ca 	bne.w	800f138 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2209      	movs	r2, #9
 800efa8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800efaa:	e0c5      	b.n	800f138 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800efb2:	f003 0320 	and.w	r3, r3, #32
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d00b      	beq.n	800efd2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800efba:	2101      	movs	r1, #1
 800efbc:	6878      	ldr	r0, [r7, #4]
 800efbe:	f000 fc30 	bl	800f822 <USBH_SetFeature>
 800efc2:	4603      	mov	r3, r0
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	f040 80b9 	bne.w	800f13c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	220a      	movs	r2, #10
 800efce:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800efd0:	e0b4      	b.n	800f13c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	220a      	movs	r2, #10
 800efd6:	701a      	strb	r2, [r3, #0]
      break;
 800efd8:	e0b0      	b.n	800f13c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	f000 80ad 	beq.w	800f140 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2200      	movs	r2, #0
 800efea:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800efee:	2300      	movs	r3, #0
 800eff0:	73fb      	strb	r3, [r7, #15]
 800eff2:	e016      	b.n	800f022 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800eff4:	7bfa      	ldrb	r2, [r7, #15]
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	32de      	adds	r2, #222	; 0xde
 800effa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800effe:	791a      	ldrb	r2, [r3, #4]
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800f006:	429a      	cmp	r2, r3
 800f008:	d108      	bne.n	800f01c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800f00a:	7bfa      	ldrb	r2, [r7, #15]
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	32de      	adds	r2, #222	; 0xde
 800f010:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800f01a:	e005      	b.n	800f028 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f01c:	7bfb      	ldrb	r3, [r7, #15]
 800f01e:	3301      	adds	r3, #1
 800f020:	73fb      	strb	r3, [r7, #15]
 800f022:	7bfb      	ldrb	r3, [r7, #15]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d0e5      	beq.n	800eff4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d016      	beq.n	800f060 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f038:	689b      	ldr	r3, [r3, #8]
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	4798      	blx	r3
 800f03e:	4603      	mov	r3, r0
 800f040:	2b00      	cmp	r3, #0
 800f042:	d109      	bne.n	800f058 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2206      	movs	r2, #6
 800f048:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f050:	2103      	movs	r1, #3
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f056:	e073      	b.n	800f140 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	220d      	movs	r2, #13
 800f05c:	701a      	strb	r2, [r3, #0]
      break;
 800f05e:	e06f      	b.n	800f140 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	220d      	movs	r2, #13
 800f064:	701a      	strb	r2, [r3, #0]
      break;
 800f066:	e06b      	b.n	800f140 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d017      	beq.n	800f0a2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f078:	691b      	ldr	r3, [r3, #16]
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	4798      	blx	r3
 800f07e:	4603      	mov	r3, r0
 800f080:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f082:	7bbb      	ldrb	r3, [r7, #14]
 800f084:	b2db      	uxtb	r3, r3
 800f086:	2b00      	cmp	r3, #0
 800f088:	d103      	bne.n	800f092 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	220b      	movs	r2, #11
 800f08e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f090:	e058      	b.n	800f144 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800f092:	7bbb      	ldrb	r3, [r7, #14]
 800f094:	b2db      	uxtb	r3, r3
 800f096:	2b02      	cmp	r3, #2
 800f098:	d154      	bne.n	800f144 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	220d      	movs	r2, #13
 800f09e:	701a      	strb	r2, [r3, #0]
      break;
 800f0a0:	e050      	b.n	800f144 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	220d      	movs	r2, #13
 800f0a6:	701a      	strb	r2, [r3, #0]
      break;
 800f0a8:	e04c      	b.n	800f144 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d049      	beq.n	800f148 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f0ba:	695b      	ldr	r3, [r3, #20]
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	4798      	blx	r3
      }
      break;
 800f0c0:	e042      	b.n	800f148 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	f7ff fd72 	bl	800ebb4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d009      	beq.n	800f0ee <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f0e0:	68db      	ldr	r3, [r3, #12]
 800f0e2:	6878      	ldr	r0, [r7, #4]
 800f0e4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d005      	beq.n	800f104 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f0fe:	2105      	movs	r1, #5
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800f10a:	b2db      	uxtb	r3, r3
 800f10c:	2b01      	cmp	r3, #1
 800f10e:	d107      	bne.n	800f120 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2200      	movs	r2, #0
 800f114:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	f7ff fe2b 	bl	800ed74 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f11e:	e014      	b.n	800f14a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f001 fa05 	bl	8010530 <USBH_LL_Start>
      break;
 800f126:	e010      	b.n	800f14a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800f128:	bf00      	nop
 800f12a:	e00e      	b.n	800f14a <USBH_Process+0x3b6>
      break;
 800f12c:	bf00      	nop
 800f12e:	e00c      	b.n	800f14a <USBH_Process+0x3b6>
      break;
 800f130:	bf00      	nop
 800f132:	e00a      	b.n	800f14a <USBH_Process+0x3b6>
    break;
 800f134:	bf00      	nop
 800f136:	e008      	b.n	800f14a <USBH_Process+0x3b6>
      break;
 800f138:	bf00      	nop
 800f13a:	e006      	b.n	800f14a <USBH_Process+0x3b6>
      break;
 800f13c:	bf00      	nop
 800f13e:	e004      	b.n	800f14a <USBH_Process+0x3b6>
      break;
 800f140:	bf00      	nop
 800f142:	e002      	b.n	800f14a <USBH_Process+0x3b6>
      break;
 800f144:	bf00      	nop
 800f146:	e000      	b.n	800f14a <USBH_Process+0x3b6>
      break;
 800f148:	bf00      	nop
  }
  return USBH_OK;
 800f14a:	2300      	movs	r3, #0
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	3710      	adds	r7, #16
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}

0800f154 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b088      	sub	sp, #32
 800f158:	af04      	add	r7, sp, #16
 800f15a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f15c:	2301      	movs	r3, #1
 800f15e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800f160:	2301      	movs	r3, #1
 800f162:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	785b      	ldrb	r3, [r3, #1]
 800f168:	2b07      	cmp	r3, #7
 800f16a:	f200 81c1 	bhi.w	800f4f0 <USBH_HandleEnum+0x39c>
 800f16e:	a201      	add	r2, pc, #4	; (adr r2, 800f174 <USBH_HandleEnum+0x20>)
 800f170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f174:	0800f195 	.word	0x0800f195
 800f178:	0800f253 	.word	0x0800f253
 800f17c:	0800f2bd 	.word	0x0800f2bd
 800f180:	0800f34b 	.word	0x0800f34b
 800f184:	0800f3b5 	.word	0x0800f3b5
 800f188:	0800f425 	.word	0x0800f425
 800f18c:	0800f46b 	.word	0x0800f46b
 800f190:	0800f4b1 	.word	0x0800f4b1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800f194:	2108      	movs	r1, #8
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f000 fa50 	bl	800f63c <USBH_Get_DevDesc>
 800f19c:	4603      	mov	r3, r0
 800f19e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f1a0:	7bbb      	ldrb	r3, [r7, #14]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d130      	bne.n	800f208 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2201      	movs	r2, #1
 800f1b4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	7919      	ldrb	r1, [r3, #4]
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f1c6:	687a      	ldr	r2, [r7, #4]
 800f1c8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f1ca:	b292      	uxth	r2, r2
 800f1cc:	9202      	str	r2, [sp, #8]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	9201      	str	r2, [sp, #4]
 800f1d2:	9300      	str	r3, [sp, #0]
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	2280      	movs	r2, #128	; 0x80
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f000 ff77 	bl	80100cc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	7959      	ldrb	r1, [r3, #5]
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f1ee:	687a      	ldr	r2, [r7, #4]
 800f1f0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f1f2:	b292      	uxth	r2, r2
 800f1f4:	9202      	str	r2, [sp, #8]
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	9201      	str	r2, [sp, #4]
 800f1fa:	9300      	str	r3, [sp, #0]
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	2200      	movs	r2, #0
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f000 ff63 	bl	80100cc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f206:	e175      	b.n	800f4f4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f208:	7bbb      	ldrb	r3, [r7, #14]
 800f20a:	2b03      	cmp	r3, #3
 800f20c:	f040 8172 	bne.w	800f4f4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f216:	3301      	adds	r3, #1
 800f218:	b2da      	uxtb	r2, r3
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f226:	2b03      	cmp	r3, #3
 800f228:	d903      	bls.n	800f232 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	220d      	movs	r2, #13
 800f22e:	701a      	strb	r2, [r3, #0]
      break;
 800f230:	e160      	b.n	800f4f4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	795b      	ldrb	r3, [r3, #5]
 800f236:	4619      	mov	r1, r3
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f000 ff97 	bl	801016c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	791b      	ldrb	r3, [r3, #4]
 800f242:	4619      	mov	r1, r3
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f000 ff91 	bl	801016c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	2200      	movs	r2, #0
 800f24e:	701a      	strb	r2, [r3, #0]
      break;
 800f250:	e150      	b.n	800f4f4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800f252:	2112      	movs	r1, #18
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f000 f9f1 	bl	800f63c <USBH_Get_DevDesc>
 800f25a:	4603      	mov	r3, r0
 800f25c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f25e:	7bbb      	ldrb	r3, [r7, #14]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d103      	bne.n	800f26c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2202      	movs	r2, #2
 800f268:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f26a:	e145      	b.n	800f4f8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f26c:	7bbb      	ldrb	r3, [r7, #14]
 800f26e:	2b03      	cmp	r3, #3
 800f270:	f040 8142 	bne.w	800f4f8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f27a:	3301      	adds	r3, #1
 800f27c:	b2da      	uxtb	r2, r3
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f28a:	2b03      	cmp	r3, #3
 800f28c:	d903      	bls.n	800f296 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	220d      	movs	r2, #13
 800f292:	701a      	strb	r2, [r3, #0]
      break;
 800f294:	e130      	b.n	800f4f8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	795b      	ldrb	r3, [r3, #5]
 800f29a:	4619      	mov	r1, r3
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	f000 ff65 	bl	801016c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	791b      	ldrb	r3, [r3, #4]
 800f2a6:	4619      	mov	r1, r3
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f000 ff5f 	bl	801016c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	701a      	strb	r2, [r3, #0]
      break;
 800f2ba:	e11d      	b.n	800f4f8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800f2bc:	2101      	movs	r1, #1
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f000 fa68 	bl	800f794 <USBH_SetAddress>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f2c8:	7bbb      	ldrb	r3, [r7, #14]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d132      	bne.n	800f334 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800f2ce:	2002      	movs	r0, #2
 800f2d0:	f001 fa92 	bl	80107f8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2203      	movs	r2, #3
 800f2e0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	7919      	ldrb	r1, [r3, #4]
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f2f2:	687a      	ldr	r2, [r7, #4]
 800f2f4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f2f6:	b292      	uxth	r2, r2
 800f2f8:	9202      	str	r2, [sp, #8]
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	9201      	str	r2, [sp, #4]
 800f2fe:	9300      	str	r3, [sp, #0]
 800f300:	4603      	mov	r3, r0
 800f302:	2280      	movs	r2, #128	; 0x80
 800f304:	6878      	ldr	r0, [r7, #4]
 800f306:	f000 fee1 	bl	80100cc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	7959      	ldrb	r1, [r3, #5]
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f31a:	687a      	ldr	r2, [r7, #4]
 800f31c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f31e:	b292      	uxth	r2, r2
 800f320:	9202      	str	r2, [sp, #8]
 800f322:	2200      	movs	r2, #0
 800f324:	9201      	str	r2, [sp, #4]
 800f326:	9300      	str	r3, [sp, #0]
 800f328:	4603      	mov	r3, r0
 800f32a:	2200      	movs	r2, #0
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f000 fecd 	bl	80100cc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f332:	e0e3      	b.n	800f4fc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f334:	7bbb      	ldrb	r3, [r7, #14]
 800f336:	2b03      	cmp	r3, #3
 800f338:	f040 80e0 	bne.w	800f4fc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	220d      	movs	r2, #13
 800f340:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	2200      	movs	r2, #0
 800f346:	705a      	strb	r2, [r3, #1]
      break;
 800f348:	e0d8      	b.n	800f4fc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800f34a:	2109      	movs	r1, #9
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	f000 f99d 	bl	800f68c <USBH_Get_CfgDesc>
 800f352:	4603      	mov	r3, r0
 800f354:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f356:	7bbb      	ldrb	r3, [r7, #14]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d103      	bne.n	800f364 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2204      	movs	r2, #4
 800f360:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f362:	e0cd      	b.n	800f500 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f364:	7bbb      	ldrb	r3, [r7, #14]
 800f366:	2b03      	cmp	r3, #3
 800f368:	f040 80ca 	bne.w	800f500 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f372:	3301      	adds	r3, #1
 800f374:	b2da      	uxtb	r2, r3
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f382:	2b03      	cmp	r3, #3
 800f384:	d903      	bls.n	800f38e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	220d      	movs	r2, #13
 800f38a:	701a      	strb	r2, [r3, #0]
      break;
 800f38c:	e0b8      	b.n	800f500 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	795b      	ldrb	r3, [r3, #5]
 800f392:	4619      	mov	r1, r3
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f000 fee9 	bl	801016c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	791b      	ldrb	r3, [r3, #4]
 800f39e:	4619      	mov	r1, r3
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f000 fee3 	bl	801016c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	701a      	strb	r2, [r3, #0]
      break;
 800f3b2:	e0a5      	b.n	800f500 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800f3ba:	4619      	mov	r1, r3
 800f3bc:	6878      	ldr	r0, [r7, #4]
 800f3be:	f000 f965 	bl	800f68c <USBH_Get_CfgDesc>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f3c6:	7bbb      	ldrb	r3, [r7, #14]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d103      	bne.n	800f3d4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2205      	movs	r2, #5
 800f3d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f3d2:	e097      	b.n	800f504 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f3d4:	7bbb      	ldrb	r3, [r7, #14]
 800f3d6:	2b03      	cmp	r3, #3
 800f3d8:	f040 8094 	bne.w	800f504 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f3e2:	3301      	adds	r3, #1
 800f3e4:	b2da      	uxtb	r2, r3
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f3f2:	2b03      	cmp	r3, #3
 800f3f4:	d903      	bls.n	800f3fe <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	220d      	movs	r2, #13
 800f3fa:	701a      	strb	r2, [r3, #0]
      break;
 800f3fc:	e082      	b.n	800f504 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	795b      	ldrb	r3, [r3, #5]
 800f402:	4619      	mov	r1, r3
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f000 feb1 	bl	801016c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	791b      	ldrb	r3, [r3, #4]
 800f40e:	4619      	mov	r1, r3
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f000 feab 	bl	801016c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2200      	movs	r2, #0
 800f41a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	2200      	movs	r2, #0
 800f420:	701a      	strb	r2, [r3, #0]
      break;
 800f422:	e06f      	b.n	800f504 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d019      	beq.n	800f462 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f43a:	23ff      	movs	r3, #255	; 0xff
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f000 f949 	bl	800f6d4 <USBH_Get_StringDesc>
 800f442:	4603      	mov	r3, r0
 800f444:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f446:	7bbb      	ldrb	r3, [r7, #14]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d103      	bne.n	800f454 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2206      	movs	r2, #6
 800f450:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f452:	e059      	b.n	800f508 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f454:	7bbb      	ldrb	r3, [r7, #14]
 800f456:	2b03      	cmp	r3, #3
 800f458:	d156      	bne.n	800f508 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2206      	movs	r2, #6
 800f45e:	705a      	strb	r2, [r3, #1]
      break;
 800f460:	e052      	b.n	800f508 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2206      	movs	r2, #6
 800f466:	705a      	strb	r2, [r3, #1]
      break;
 800f468:	e04e      	b.n	800f508 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800f470:	2b00      	cmp	r3, #0
 800f472:	d019      	beq.n	800f4a8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f480:	23ff      	movs	r3, #255	; 0xff
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f000 f926 	bl	800f6d4 <USBH_Get_StringDesc>
 800f488:	4603      	mov	r3, r0
 800f48a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f48c:	7bbb      	ldrb	r3, [r7, #14]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d103      	bne.n	800f49a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2207      	movs	r2, #7
 800f496:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f498:	e038      	b.n	800f50c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f49a:	7bbb      	ldrb	r3, [r7, #14]
 800f49c:	2b03      	cmp	r3, #3
 800f49e:	d135      	bne.n	800f50c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2207      	movs	r2, #7
 800f4a4:	705a      	strb	r2, [r3, #1]
      break;
 800f4a6:	e031      	b.n	800f50c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2207      	movs	r2, #7
 800f4ac:	705a      	strb	r2, [r3, #1]
      break;
 800f4ae:	e02d      	b.n	800f50c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d017      	beq.n	800f4ea <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f4c6:	23ff      	movs	r3, #255	; 0xff
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f000 f903 	bl	800f6d4 <USBH_Get_StringDesc>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f4d2:	7bbb      	ldrb	r3, [r7, #14]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d102      	bne.n	800f4de <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800f4d8:	2300      	movs	r3, #0
 800f4da:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800f4dc:	e018      	b.n	800f510 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f4de:	7bbb      	ldrb	r3, [r7, #14]
 800f4e0:	2b03      	cmp	r3, #3
 800f4e2:	d115      	bne.n	800f510 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	73fb      	strb	r3, [r7, #15]
      break;
 800f4e8:	e012      	b.n	800f510 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	73fb      	strb	r3, [r7, #15]
      break;
 800f4ee:	e00f      	b.n	800f510 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800f4f0:	bf00      	nop
 800f4f2:	e00e      	b.n	800f512 <USBH_HandleEnum+0x3be>
      break;
 800f4f4:	bf00      	nop
 800f4f6:	e00c      	b.n	800f512 <USBH_HandleEnum+0x3be>
      break;
 800f4f8:	bf00      	nop
 800f4fa:	e00a      	b.n	800f512 <USBH_HandleEnum+0x3be>
      break;
 800f4fc:	bf00      	nop
 800f4fe:	e008      	b.n	800f512 <USBH_HandleEnum+0x3be>
      break;
 800f500:	bf00      	nop
 800f502:	e006      	b.n	800f512 <USBH_HandleEnum+0x3be>
      break;
 800f504:	bf00      	nop
 800f506:	e004      	b.n	800f512 <USBH_HandleEnum+0x3be>
      break;
 800f508:	bf00      	nop
 800f50a:	e002      	b.n	800f512 <USBH_HandleEnum+0x3be>
      break;
 800f50c:	bf00      	nop
 800f50e:	e000      	b.n	800f512 <USBH_HandleEnum+0x3be>
      break;
 800f510:	bf00      	nop
  }
  return Status;
 800f512:	7bfb      	ldrb	r3, [r7, #15]
}
 800f514:	4618      	mov	r0, r3
 800f516:	3710      	adds	r7, #16
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}

0800f51c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800f51c:	b480      	push	{r7}
 800f51e:	b083      	sub	sp, #12
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	683a      	ldr	r2, [r7, #0]
 800f52a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800f52e:	bf00      	nop
 800f530:	370c      	adds	r7, #12
 800f532:	46bd      	mov	sp, r7
 800f534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f538:	4770      	bx	lr

0800f53a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800f53a:	b580      	push	{r7, lr}
 800f53c:	b082      	sub	sp, #8
 800f53e:	af00      	add	r7, sp, #0
 800f540:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f548:	1c5a      	adds	r2, r3, #1
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f000 f804 	bl	800f55e <USBH_HandleSof>
}
 800f556:	bf00      	nop
 800f558:	3708      	adds	r7, #8
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}

0800f55e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800f55e:	b580      	push	{r7, lr}
 800f560:	b082      	sub	sp, #8
 800f562:	af00      	add	r7, sp, #0
 800f564:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	b2db      	uxtb	r3, r3
 800f56c:	2b0b      	cmp	r3, #11
 800f56e:	d10a      	bne.n	800f586 <USBH_HandleSof+0x28>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f576:	2b00      	cmp	r3, #0
 800f578:	d005      	beq.n	800f586 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f580:	699b      	ldr	r3, [r3, #24]
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	4798      	blx	r3
  }
}
 800f586:	bf00      	nop
 800f588:	3708      	adds	r7, #8
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}

0800f58e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800f58e:	b480      	push	{r7}
 800f590:	b083      	sub	sp, #12
 800f592:	af00      	add	r7, sp, #0
 800f594:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	2201      	movs	r2, #1
 800f59a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800f59e:	bf00      	nop
}
 800f5a0:	370c      	adds	r7, #12
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a8:	4770      	bx	lr

0800f5aa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800f5aa:	b480      	push	{r7}
 800f5ac:	b083      	sub	sp, #12
 800f5ae:	af00      	add	r7, sp, #0
 800f5b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800f5ba:	bf00      	nop
}
 800f5bc:	370c      	adds	r7, #12
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c4:	4770      	bx	lr

0800f5c6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f5c6:	b480      	push	{r7}
 800f5c8:	b083      	sub	sp, #12
 800f5ca:	af00      	add	r7, sp, #0
 800f5cc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	2201      	movs	r2, #1
 800f5d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2200      	movs	r2, #0
 800f5da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f5e6:	2300      	movs	r3, #0
}
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	370c      	adds	r7, #12
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f2:	4770      	bx	lr

0800f5f4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b082      	sub	sp, #8
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2201      	movs	r2, #1
 800f600:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2200      	movs	r2, #0
 800f608:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2200      	movs	r2, #0
 800f610:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	f000 ffa6 	bl	8010566 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	791b      	ldrb	r3, [r3, #4]
 800f61e:	4619      	mov	r1, r3
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f000 fda3 	bl	801016c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	795b      	ldrb	r3, [r3, #5]
 800f62a:	4619      	mov	r1, r3
 800f62c:	6878      	ldr	r0, [r7, #4]
 800f62e:	f000 fd9d 	bl	801016c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f632:	2300      	movs	r3, #0
}
 800f634:	4618      	mov	r0, r3
 800f636:	3708      	adds	r7, #8
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}

0800f63c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b086      	sub	sp, #24
 800f640:	af02      	add	r7, sp, #8
 800f642:	6078      	str	r0, [r7, #4]
 800f644:	460b      	mov	r3, r1
 800f646:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f64e:	78fb      	ldrb	r3, [r7, #3]
 800f650:	b29b      	uxth	r3, r3
 800f652:	9300      	str	r3, [sp, #0]
 800f654:	4613      	mov	r3, r2
 800f656:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f65a:	2100      	movs	r1, #0
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f000 f864 	bl	800f72a <USBH_GetDescriptor>
 800f662:	4603      	mov	r3, r0
 800f664:	73fb      	strb	r3, [r7, #15]
 800f666:	7bfb      	ldrb	r3, [r7, #15]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d10a      	bne.n	800f682 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f678:	78fa      	ldrb	r2, [r7, #3]
 800f67a:	b292      	uxth	r2, r2
 800f67c:	4619      	mov	r1, r3
 800f67e:	f000 f918 	bl	800f8b2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800f682:	7bfb      	ldrb	r3, [r7, #15]
}
 800f684:	4618      	mov	r0, r3
 800f686:	3710      	adds	r7, #16
 800f688:	46bd      	mov	sp, r7
 800f68a:	bd80      	pop	{r7, pc}

0800f68c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b086      	sub	sp, #24
 800f690:	af02      	add	r7, sp, #8
 800f692:	6078      	str	r0, [r7, #4]
 800f694:	460b      	mov	r3, r1
 800f696:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	331c      	adds	r3, #28
 800f69c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800f69e:	887b      	ldrh	r3, [r7, #2]
 800f6a0:	9300      	str	r3, [sp, #0]
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f6a8:	2100      	movs	r1, #0
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f000 f83d 	bl	800f72a <USBH_GetDescriptor>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	72fb      	strb	r3, [r7, #11]
 800f6b4:	7afb      	ldrb	r3, [r7, #11]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d107      	bne.n	800f6ca <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f6c0:	887a      	ldrh	r2, [r7, #2]
 800f6c2:	68f9      	ldr	r1, [r7, #12]
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f000 f964 	bl	800f992 <USBH_ParseCfgDesc>
  }

  return status;
 800f6ca:	7afb      	ldrb	r3, [r7, #11]
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3710      	adds	r7, #16
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}

0800f6d4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b088      	sub	sp, #32
 800f6d8:	af02      	add	r7, sp, #8
 800f6da:	60f8      	str	r0, [r7, #12]
 800f6dc:	607a      	str	r2, [r7, #4]
 800f6de:	461a      	mov	r2, r3
 800f6e0:	460b      	mov	r3, r1
 800f6e2:	72fb      	strb	r3, [r7, #11]
 800f6e4:	4613      	mov	r3, r2
 800f6e6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800f6e8:	7afb      	ldrb	r3, [r7, #11]
 800f6ea:	b29b      	uxth	r3, r3
 800f6ec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f6f0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f6f8:	893b      	ldrh	r3, [r7, #8]
 800f6fa:	9300      	str	r3, [sp, #0]
 800f6fc:	460b      	mov	r3, r1
 800f6fe:	2100      	movs	r1, #0
 800f700:	68f8      	ldr	r0, [r7, #12]
 800f702:	f000 f812 	bl	800f72a <USBH_GetDescriptor>
 800f706:	4603      	mov	r3, r0
 800f708:	75fb      	strb	r3, [r7, #23]
 800f70a:	7dfb      	ldrb	r3, [r7, #23]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d107      	bne.n	800f720 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f716:	893a      	ldrh	r2, [r7, #8]
 800f718:	6879      	ldr	r1, [r7, #4]
 800f71a:	4618      	mov	r0, r3
 800f71c:	f000 fa37 	bl	800fb8e <USBH_ParseStringDesc>
  }

  return status;
 800f720:	7dfb      	ldrb	r3, [r7, #23]
}
 800f722:	4618      	mov	r0, r3
 800f724:	3718      	adds	r7, #24
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}

0800f72a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800f72a:	b580      	push	{r7, lr}
 800f72c:	b084      	sub	sp, #16
 800f72e:	af00      	add	r7, sp, #0
 800f730:	60f8      	str	r0, [r7, #12]
 800f732:	607b      	str	r3, [r7, #4]
 800f734:	460b      	mov	r3, r1
 800f736:	72fb      	strb	r3, [r7, #11]
 800f738:	4613      	mov	r3, r2
 800f73a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	789b      	ldrb	r3, [r3, #2]
 800f740:	2b01      	cmp	r3, #1
 800f742:	d11c      	bne.n	800f77e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f744:	7afb      	ldrb	r3, [r7, #11]
 800f746:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f74a:	b2da      	uxtb	r2, r3
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	2206      	movs	r2, #6
 800f754:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	893a      	ldrh	r2, [r7, #8]
 800f75a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f75c:	893b      	ldrh	r3, [r7, #8]
 800f75e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f762:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f766:	d104      	bne.n	800f772 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	f240 4209 	movw	r2, #1033	; 0x409
 800f76e:	829a      	strh	r2, [r3, #20]
 800f770:	e002      	b.n	800f778 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	2200      	movs	r2, #0
 800f776:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	8b3a      	ldrh	r2, [r7, #24]
 800f77c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800f77e:	8b3b      	ldrh	r3, [r7, #24]
 800f780:	461a      	mov	r2, r3
 800f782:	6879      	ldr	r1, [r7, #4]
 800f784:	68f8      	ldr	r0, [r7, #12]
 800f786:	f000 fa50 	bl	800fc2a <USBH_CtlReq>
 800f78a:	4603      	mov	r3, r0
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	3710      	adds	r7, #16
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}

0800f794 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b082      	sub	sp, #8
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	460b      	mov	r3, r1
 800f79e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	789b      	ldrb	r3, [r3, #2]
 800f7a4:	2b01      	cmp	r3, #1
 800f7a6:	d10f      	bne.n	800f7c8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	2205      	movs	r2, #5
 800f7b2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f7b4:	78fb      	ldrb	r3, [r7, #3]
 800f7b6:	b29a      	uxth	r2, r3
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2200      	movs	r2, #0
 800f7c0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	2100      	movs	r1, #0
 800f7cc:	6878      	ldr	r0, [r7, #4]
 800f7ce:	f000 fa2c 	bl	800fc2a <USBH_CtlReq>
 800f7d2:	4603      	mov	r3, r0
}
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	3708      	adds	r7, #8
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}

0800f7dc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b082      	sub	sp, #8
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
 800f7e4:	460b      	mov	r3, r1
 800f7e6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	789b      	ldrb	r3, [r3, #2]
 800f7ec:	2b01      	cmp	r3, #1
 800f7ee:	d10e      	bne.n	800f80e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	2209      	movs	r2, #9
 800f7fa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	887a      	ldrh	r2, [r7, #2]
 800f800:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	2200      	movs	r2, #0
 800f806:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2200      	movs	r2, #0
 800f80c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f80e:	2200      	movs	r2, #0
 800f810:	2100      	movs	r1, #0
 800f812:	6878      	ldr	r0, [r7, #4]
 800f814:	f000 fa09 	bl	800fc2a <USBH_CtlReq>
 800f818:	4603      	mov	r3, r0
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	3708      	adds	r7, #8
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}

0800f822 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800f822:	b580      	push	{r7, lr}
 800f824:	b082      	sub	sp, #8
 800f826:	af00      	add	r7, sp, #0
 800f828:	6078      	str	r0, [r7, #4]
 800f82a:	460b      	mov	r3, r1
 800f82c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	789b      	ldrb	r3, [r3, #2]
 800f832:	2b01      	cmp	r3, #1
 800f834:	d10f      	bne.n	800f856 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2200      	movs	r2, #0
 800f83a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2203      	movs	r2, #3
 800f840:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800f842:	78fb      	ldrb	r3, [r7, #3]
 800f844:	b29a      	uxth	r2, r3
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	2200      	movs	r2, #0
 800f84e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2200      	movs	r2, #0
 800f854:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f856:	2200      	movs	r2, #0
 800f858:	2100      	movs	r1, #0
 800f85a:	6878      	ldr	r0, [r7, #4]
 800f85c:	f000 f9e5 	bl	800fc2a <USBH_CtlReq>
 800f860:	4603      	mov	r3, r0
}
 800f862:	4618      	mov	r0, r3
 800f864:	3708      	adds	r7, #8
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}

0800f86a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800f86a:	b580      	push	{r7, lr}
 800f86c:	b082      	sub	sp, #8
 800f86e:	af00      	add	r7, sp, #0
 800f870:	6078      	str	r0, [r7, #4]
 800f872:	460b      	mov	r3, r1
 800f874:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	789b      	ldrb	r3, [r3, #2]
 800f87a:	2b01      	cmp	r3, #1
 800f87c:	d10f      	bne.n	800f89e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2202      	movs	r2, #2
 800f882:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2201      	movs	r2, #1
 800f888:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2200      	movs	r2, #0
 800f88e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800f890:	78fb      	ldrb	r3, [r7, #3]
 800f892:	b29a      	uxth	r2, r3
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2200      	movs	r2, #0
 800f89c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800f89e:	2200      	movs	r2, #0
 800f8a0:	2100      	movs	r1, #0
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f000 f9c1 	bl	800fc2a <USBH_CtlReq>
 800f8a8:	4603      	mov	r3, r0
}
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	3708      	adds	r7, #8
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}

0800f8b2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800f8b2:	b480      	push	{r7}
 800f8b4:	b085      	sub	sp, #20
 800f8b6:	af00      	add	r7, sp, #0
 800f8b8:	60f8      	str	r0, [r7, #12]
 800f8ba:	60b9      	str	r1, [r7, #8]
 800f8bc:	4613      	mov	r3, r2
 800f8be:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800f8c0:	68bb      	ldr	r3, [r7, #8]
 800f8c2:	781a      	ldrb	r2, [r3, #0]
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	785a      	ldrb	r2, [r3, #1]
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	3302      	adds	r3, #2
 800f8d4:	781b      	ldrb	r3, [r3, #0]
 800f8d6:	b29a      	uxth	r2, r3
 800f8d8:	68bb      	ldr	r3, [r7, #8]
 800f8da:	3303      	adds	r3, #3
 800f8dc:	781b      	ldrb	r3, [r3, #0]
 800f8de:	b29b      	uxth	r3, r3
 800f8e0:	021b      	lsls	r3, r3, #8
 800f8e2:	b29b      	uxth	r3, r3
 800f8e4:	4313      	orrs	r3, r2
 800f8e6:	b29a      	uxth	r2, r3
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	791a      	ldrb	r2, [r3, #4]
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800f8f4:	68bb      	ldr	r3, [r7, #8]
 800f8f6:	795a      	ldrb	r2, [r3, #5]
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	799a      	ldrb	r2, [r3, #6]
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800f904:	68bb      	ldr	r3, [r7, #8]
 800f906:	79da      	ldrb	r2, [r3, #7]
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800f90c:	88fb      	ldrh	r3, [r7, #6]
 800f90e:	2b08      	cmp	r3, #8
 800f910:	d939      	bls.n	800f986 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	3308      	adds	r3, #8
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	b29a      	uxth	r2, r3
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	3309      	adds	r3, #9
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	b29b      	uxth	r3, r3
 800f922:	021b      	lsls	r3, r3, #8
 800f924:	b29b      	uxth	r3, r3
 800f926:	4313      	orrs	r3, r2
 800f928:	b29a      	uxth	r2, r3
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800f92e:	68bb      	ldr	r3, [r7, #8]
 800f930:	330a      	adds	r3, #10
 800f932:	781b      	ldrb	r3, [r3, #0]
 800f934:	b29a      	uxth	r2, r3
 800f936:	68bb      	ldr	r3, [r7, #8]
 800f938:	330b      	adds	r3, #11
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	b29b      	uxth	r3, r3
 800f93e:	021b      	lsls	r3, r3, #8
 800f940:	b29b      	uxth	r3, r3
 800f942:	4313      	orrs	r3, r2
 800f944:	b29a      	uxth	r2, r3
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800f94a:	68bb      	ldr	r3, [r7, #8]
 800f94c:	330c      	adds	r3, #12
 800f94e:	781b      	ldrb	r3, [r3, #0]
 800f950:	b29a      	uxth	r2, r3
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	330d      	adds	r3, #13
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	b29b      	uxth	r3, r3
 800f95a:	021b      	lsls	r3, r3, #8
 800f95c:	b29b      	uxth	r3, r3
 800f95e:	4313      	orrs	r3, r2
 800f960:	b29a      	uxth	r2, r3
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	7b9a      	ldrb	r2, [r3, #14]
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800f96e:	68bb      	ldr	r3, [r7, #8]
 800f970:	7bda      	ldrb	r2, [r3, #15]
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800f976:	68bb      	ldr	r3, [r7, #8]
 800f978:	7c1a      	ldrb	r2, [r3, #16]
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	7c5a      	ldrb	r2, [r3, #17]
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	745a      	strb	r2, [r3, #17]
  }
}
 800f986:	bf00      	nop
 800f988:	3714      	adds	r7, #20
 800f98a:	46bd      	mov	sp, r7
 800f98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f990:	4770      	bx	lr

0800f992 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800f992:	b580      	push	{r7, lr}
 800f994:	b08a      	sub	sp, #40	; 0x28
 800f996:	af00      	add	r7, sp, #0
 800f998:	60f8      	str	r0, [r7, #12]
 800f99a:	60b9      	str	r1, [r7, #8]
 800f99c:	4613      	mov	r3, r2
 800f99e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	781a      	ldrb	r2, [r3, #0]
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	785a      	ldrb	r2, [r3, #1]
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	3302      	adds	r3, #2
 800f9c8:	781b      	ldrb	r3, [r3, #0]
 800f9ca:	b29a      	uxth	r2, r3
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	3303      	adds	r3, #3
 800f9d0:	781b      	ldrb	r3, [r3, #0]
 800f9d2:	b29b      	uxth	r3, r3
 800f9d4:	021b      	lsls	r3, r3, #8
 800f9d6:	b29b      	uxth	r3, r3
 800f9d8:	4313      	orrs	r3, r2
 800f9da:	b29a      	uxth	r2, r3
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800f9e0:	68bb      	ldr	r3, [r7, #8]
 800f9e2:	791a      	ldrb	r2, [r3, #4]
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	795a      	ldrb	r2, [r3, #5]
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800f9f0:	68bb      	ldr	r3, [r7, #8]
 800f9f2:	799a      	ldrb	r2, [r3, #6]
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	79da      	ldrb	r2, [r3, #7]
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	7a1a      	ldrb	r2, [r3, #8]
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800fa08:	88fb      	ldrh	r3, [r7, #6]
 800fa0a:	2b09      	cmp	r3, #9
 800fa0c:	d95f      	bls.n	800face <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800fa0e:	2309      	movs	r3, #9
 800fa10:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800fa12:	2300      	movs	r3, #0
 800fa14:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fa16:	e051      	b.n	800fabc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800fa18:	f107 0316 	add.w	r3, r7, #22
 800fa1c:	4619      	mov	r1, r3
 800fa1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa20:	f000 f8e8 	bl	800fbf4 <USBH_GetNextDesc>
 800fa24:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800fa26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa28:	785b      	ldrb	r3, [r3, #1]
 800fa2a:	2b04      	cmp	r3, #4
 800fa2c:	d146      	bne.n	800fabc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800fa2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fa32:	221a      	movs	r2, #26
 800fa34:	fb02 f303 	mul.w	r3, r2, r3
 800fa38:	3308      	adds	r3, #8
 800fa3a:	68fa      	ldr	r2, [r7, #12]
 800fa3c:	4413      	add	r3, r2
 800fa3e:	3302      	adds	r3, #2
 800fa40:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800fa42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa44:	69f8      	ldr	r0, [r7, #28]
 800fa46:	f000 f846 	bl	800fad6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800fa50:	2300      	movs	r3, #0
 800fa52:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800fa54:	e022      	b.n	800fa9c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800fa56:	f107 0316 	add.w	r3, r7, #22
 800fa5a:	4619      	mov	r1, r3
 800fa5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa5e:	f000 f8c9 	bl	800fbf4 <USBH_GetNextDesc>
 800fa62:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800fa64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa66:	785b      	ldrb	r3, [r3, #1]
 800fa68:	2b05      	cmp	r3, #5
 800fa6a:	d117      	bne.n	800fa9c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800fa6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fa70:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800fa74:	3201      	adds	r2, #1
 800fa76:	00d2      	lsls	r2, r2, #3
 800fa78:	211a      	movs	r1, #26
 800fa7a:	fb01 f303 	mul.w	r3, r1, r3
 800fa7e:	4413      	add	r3, r2
 800fa80:	3308      	adds	r3, #8
 800fa82:	68fa      	ldr	r2, [r7, #12]
 800fa84:	4413      	add	r3, r2
 800fa86:	3304      	adds	r3, #4
 800fa88:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800fa8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa8c:	69b8      	ldr	r0, [r7, #24]
 800fa8e:	f000 f851 	bl	800fb34 <USBH_ParseEPDesc>
            ep_ix++;
 800fa92:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fa96:	3301      	adds	r3, #1
 800fa98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800fa9c:	69fb      	ldr	r3, [r7, #28]
 800fa9e:	791b      	ldrb	r3, [r3, #4]
 800faa0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800faa4:	429a      	cmp	r2, r3
 800faa6:	d204      	bcs.n	800fab2 <USBH_ParseCfgDesc+0x120>
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	885a      	ldrh	r2, [r3, #2]
 800faac:	8afb      	ldrh	r3, [r7, #22]
 800faae:	429a      	cmp	r2, r3
 800fab0:	d8d1      	bhi.n	800fa56 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800fab2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fab6:	3301      	adds	r3, #1
 800fab8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fabc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fac0:	2b01      	cmp	r3, #1
 800fac2:	d804      	bhi.n	800face <USBH_ParseCfgDesc+0x13c>
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	885a      	ldrh	r2, [r3, #2]
 800fac8:	8afb      	ldrh	r3, [r7, #22]
 800faca:	429a      	cmp	r2, r3
 800facc:	d8a4      	bhi.n	800fa18 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800face:	bf00      	nop
 800fad0:	3728      	adds	r7, #40	; 0x28
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}

0800fad6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800fad6:	b480      	push	{r7}
 800fad8:	b083      	sub	sp, #12
 800fada:	af00      	add	r7, sp, #0
 800fadc:	6078      	str	r0, [r7, #4]
 800fade:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	781a      	ldrb	r2, [r3, #0]
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	785a      	ldrb	r2, [r3, #1]
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	789a      	ldrb	r2, [r3, #2]
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	78da      	ldrb	r2, [r3, #3]
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	791a      	ldrb	r2, [r3, #4]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	795a      	ldrb	r2, [r3, #5]
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	799a      	ldrb	r2, [r3, #6]
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	79da      	ldrb	r2, [r3, #7]
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	7a1a      	ldrb	r2, [r3, #8]
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	721a      	strb	r2, [r3, #8]
}
 800fb28:	bf00      	nop
 800fb2a:	370c      	adds	r7, #12
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb32:	4770      	bx	lr

0800fb34 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800fb34:	b480      	push	{r7}
 800fb36:	b083      	sub	sp, #12
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
 800fb3c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	781a      	ldrb	r2, [r3, #0]
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	785a      	ldrb	r2, [r3, #1]
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	789a      	ldrb	r2, [r3, #2]
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	78da      	ldrb	r2, [r3, #3]
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	3304      	adds	r3, #4
 800fb62:	781b      	ldrb	r3, [r3, #0]
 800fb64:	b29a      	uxth	r2, r3
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	3305      	adds	r3, #5
 800fb6a:	781b      	ldrb	r3, [r3, #0]
 800fb6c:	b29b      	uxth	r3, r3
 800fb6e:	021b      	lsls	r3, r3, #8
 800fb70:	b29b      	uxth	r3, r3
 800fb72:	4313      	orrs	r3, r2
 800fb74:	b29a      	uxth	r2, r3
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	799a      	ldrb	r2, [r3, #6]
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	719a      	strb	r2, [r3, #6]
}
 800fb82:	bf00      	nop
 800fb84:	370c      	adds	r7, #12
 800fb86:	46bd      	mov	sp, r7
 800fb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8c:	4770      	bx	lr

0800fb8e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800fb8e:	b480      	push	{r7}
 800fb90:	b087      	sub	sp, #28
 800fb92:	af00      	add	r7, sp, #0
 800fb94:	60f8      	str	r0, [r7, #12]
 800fb96:	60b9      	str	r1, [r7, #8]
 800fb98:	4613      	mov	r3, r2
 800fb9a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	3301      	adds	r3, #1
 800fba0:	781b      	ldrb	r3, [r3, #0]
 800fba2:	2b03      	cmp	r3, #3
 800fba4:	d120      	bne.n	800fbe8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	781b      	ldrb	r3, [r3, #0]
 800fbaa:	1e9a      	subs	r2, r3, #2
 800fbac:	88fb      	ldrh	r3, [r7, #6]
 800fbae:	4293      	cmp	r3, r2
 800fbb0:	bf28      	it	cs
 800fbb2:	4613      	movcs	r3, r2
 800fbb4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	3302      	adds	r3, #2
 800fbba:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	82fb      	strh	r3, [r7, #22]
 800fbc0:	e00b      	b.n	800fbda <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800fbc2:	8afb      	ldrh	r3, [r7, #22]
 800fbc4:	68fa      	ldr	r2, [r7, #12]
 800fbc6:	4413      	add	r3, r2
 800fbc8:	781a      	ldrb	r2, [r3, #0]
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	701a      	strb	r2, [r3, #0]
      pdest++;
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	3301      	adds	r3, #1
 800fbd2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800fbd4:	8afb      	ldrh	r3, [r7, #22]
 800fbd6:	3302      	adds	r3, #2
 800fbd8:	82fb      	strh	r3, [r7, #22]
 800fbda:	8afa      	ldrh	r2, [r7, #22]
 800fbdc:	8abb      	ldrh	r3, [r7, #20]
 800fbde:	429a      	cmp	r2, r3
 800fbe0:	d3ef      	bcc.n	800fbc2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	701a      	strb	r2, [r3, #0]
  }
}
 800fbe8:	bf00      	nop
 800fbea:	371c      	adds	r7, #28
 800fbec:	46bd      	mov	sp, r7
 800fbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf2:	4770      	bx	lr

0800fbf4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800fbf4:	b480      	push	{r7}
 800fbf6:	b085      	sub	sp, #20
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
 800fbfc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	881a      	ldrh	r2, [r3, #0]
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	781b      	ldrb	r3, [r3, #0]
 800fc06:	b29b      	uxth	r3, r3
 800fc08:	4413      	add	r3, r2
 800fc0a:	b29a      	uxth	r2, r3
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	781b      	ldrb	r3, [r3, #0]
 800fc14:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	4413      	add	r3, r2
 800fc1a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800fc1c:	68fb      	ldr	r3, [r7, #12]
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3714      	adds	r7, #20
 800fc22:	46bd      	mov	sp, r7
 800fc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc28:	4770      	bx	lr

0800fc2a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800fc2a:	b580      	push	{r7, lr}
 800fc2c:	b086      	sub	sp, #24
 800fc2e:	af00      	add	r7, sp, #0
 800fc30:	60f8      	str	r0, [r7, #12]
 800fc32:	60b9      	str	r1, [r7, #8]
 800fc34:	4613      	mov	r3, r2
 800fc36:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800fc38:	2301      	movs	r3, #1
 800fc3a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	789b      	ldrb	r3, [r3, #2]
 800fc40:	2b01      	cmp	r3, #1
 800fc42:	d002      	beq.n	800fc4a <USBH_CtlReq+0x20>
 800fc44:	2b02      	cmp	r3, #2
 800fc46:	d00f      	beq.n	800fc68 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800fc48:	e027      	b.n	800fc9a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	68ba      	ldr	r2, [r7, #8]
 800fc4e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	88fa      	ldrh	r2, [r7, #6]
 800fc54:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	2201      	movs	r2, #1
 800fc5a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	2202      	movs	r2, #2
 800fc60:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800fc62:	2301      	movs	r3, #1
 800fc64:	75fb      	strb	r3, [r7, #23]
      break;
 800fc66:	e018      	b.n	800fc9a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800fc68:	68f8      	ldr	r0, [r7, #12]
 800fc6a:	f000 f81b 	bl	800fca4 <USBH_HandleControl>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800fc72:	7dfb      	ldrb	r3, [r7, #23]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d002      	beq.n	800fc7e <USBH_CtlReq+0x54>
 800fc78:	7dfb      	ldrb	r3, [r7, #23]
 800fc7a:	2b03      	cmp	r3, #3
 800fc7c:	d106      	bne.n	800fc8c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	2201      	movs	r2, #1
 800fc82:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	2200      	movs	r2, #0
 800fc88:	761a      	strb	r2, [r3, #24]
      break;
 800fc8a:	e005      	b.n	800fc98 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800fc8c:	7dfb      	ldrb	r3, [r7, #23]
 800fc8e:	2b02      	cmp	r3, #2
 800fc90:	d102      	bne.n	800fc98 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	2201      	movs	r2, #1
 800fc96:	709a      	strb	r2, [r3, #2]
      break;
 800fc98:	bf00      	nop
  }
  return status;
 800fc9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	3718      	adds	r7, #24
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd80      	pop	{r7, pc}

0800fca4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b086      	sub	sp, #24
 800fca8:	af02      	add	r7, sp, #8
 800fcaa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800fcac:	2301      	movs	r3, #1
 800fcae:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	7e1b      	ldrb	r3, [r3, #24]
 800fcb8:	3b01      	subs	r3, #1
 800fcba:	2b0a      	cmp	r3, #10
 800fcbc:	f200 8156 	bhi.w	800ff6c <USBH_HandleControl+0x2c8>
 800fcc0:	a201      	add	r2, pc, #4	; (adr r2, 800fcc8 <USBH_HandleControl+0x24>)
 800fcc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcc6:	bf00      	nop
 800fcc8:	0800fcf5 	.word	0x0800fcf5
 800fccc:	0800fd0f 	.word	0x0800fd0f
 800fcd0:	0800fd79 	.word	0x0800fd79
 800fcd4:	0800fd9f 	.word	0x0800fd9f
 800fcd8:	0800fdd7 	.word	0x0800fdd7
 800fcdc:	0800fe01 	.word	0x0800fe01
 800fce0:	0800fe53 	.word	0x0800fe53
 800fce4:	0800fe75 	.word	0x0800fe75
 800fce8:	0800feb1 	.word	0x0800feb1
 800fcec:	0800fed7 	.word	0x0800fed7
 800fcf0:	0800ff15 	.word	0x0800ff15
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f103 0110 	add.w	r1, r3, #16
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	795b      	ldrb	r3, [r3, #5]
 800fcfe:	461a      	mov	r2, r3
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f000 f943 	bl	800ff8c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	2202      	movs	r2, #2
 800fd0a:	761a      	strb	r2, [r3, #24]
      break;
 800fd0c:	e139      	b.n	800ff82 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	795b      	ldrb	r3, [r3, #5]
 800fd12:	4619      	mov	r1, r3
 800fd14:	6878      	ldr	r0, [r7, #4]
 800fd16:	f000 fd15 	bl	8010744 <USBH_LL_GetURBState>
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800fd1e:	7bbb      	ldrb	r3, [r7, #14]
 800fd20:	2b01      	cmp	r3, #1
 800fd22:	d11e      	bne.n	800fd62 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	7c1b      	ldrb	r3, [r3, #16]
 800fd28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fd2c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	8adb      	ldrh	r3, [r3, #22]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d00a      	beq.n	800fd4c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800fd36:	7b7b      	ldrb	r3, [r7, #13]
 800fd38:	2b80      	cmp	r3, #128	; 0x80
 800fd3a:	d103      	bne.n	800fd44 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	2203      	movs	r2, #3
 800fd40:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fd42:	e115      	b.n	800ff70 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2205      	movs	r2, #5
 800fd48:	761a      	strb	r2, [r3, #24]
      break;
 800fd4a:	e111      	b.n	800ff70 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800fd4c:	7b7b      	ldrb	r3, [r7, #13]
 800fd4e:	2b80      	cmp	r3, #128	; 0x80
 800fd50:	d103      	bne.n	800fd5a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	2209      	movs	r2, #9
 800fd56:	761a      	strb	r2, [r3, #24]
      break;
 800fd58:	e10a      	b.n	800ff70 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2207      	movs	r2, #7
 800fd5e:	761a      	strb	r2, [r3, #24]
      break;
 800fd60:	e106      	b.n	800ff70 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800fd62:	7bbb      	ldrb	r3, [r7, #14]
 800fd64:	2b04      	cmp	r3, #4
 800fd66:	d003      	beq.n	800fd70 <USBH_HandleControl+0xcc>
 800fd68:	7bbb      	ldrb	r3, [r7, #14]
 800fd6a:	2b02      	cmp	r3, #2
 800fd6c:	f040 8100 	bne.w	800ff70 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	220b      	movs	r2, #11
 800fd74:	761a      	strb	r2, [r3, #24]
      break;
 800fd76:	e0fb      	b.n	800ff70 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fd7e:	b29a      	uxth	r2, r3
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	6899      	ldr	r1, [r3, #8]
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	899a      	ldrh	r2, [r3, #12]
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	791b      	ldrb	r3, [r3, #4]
 800fd90:	6878      	ldr	r0, [r7, #4]
 800fd92:	f000 f93a 	bl	801000a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	2204      	movs	r2, #4
 800fd9a:	761a      	strb	r2, [r3, #24]
      break;
 800fd9c:	e0f1      	b.n	800ff82 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	791b      	ldrb	r3, [r3, #4]
 800fda2:	4619      	mov	r1, r3
 800fda4:	6878      	ldr	r0, [r7, #4]
 800fda6:	f000 fccd 	bl	8010744 <USBH_LL_GetURBState>
 800fdaa:	4603      	mov	r3, r0
 800fdac:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800fdae:	7bbb      	ldrb	r3, [r7, #14]
 800fdb0:	2b01      	cmp	r3, #1
 800fdb2:	d102      	bne.n	800fdba <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2209      	movs	r2, #9
 800fdb8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800fdba:	7bbb      	ldrb	r3, [r7, #14]
 800fdbc:	2b05      	cmp	r3, #5
 800fdbe:	d102      	bne.n	800fdc6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800fdc0:	2303      	movs	r3, #3
 800fdc2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fdc4:	e0d6      	b.n	800ff74 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800fdc6:	7bbb      	ldrb	r3, [r7, #14]
 800fdc8:	2b04      	cmp	r3, #4
 800fdca:	f040 80d3 	bne.w	800ff74 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	220b      	movs	r2, #11
 800fdd2:	761a      	strb	r2, [r3, #24]
      break;
 800fdd4:	e0ce      	b.n	800ff74 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6899      	ldr	r1, [r3, #8]
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	899a      	ldrh	r2, [r3, #12]
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	795b      	ldrb	r3, [r3, #5]
 800fde2:	2001      	movs	r0, #1
 800fde4:	9000      	str	r0, [sp, #0]
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f000 f8ea 	bl	800ffc0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fdf2:	b29a      	uxth	r2, r3
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2206      	movs	r2, #6
 800fdfc:	761a      	strb	r2, [r3, #24]
      break;
 800fdfe:	e0c0      	b.n	800ff82 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	795b      	ldrb	r3, [r3, #5]
 800fe04:	4619      	mov	r1, r3
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f000 fc9c 	bl	8010744 <USBH_LL_GetURBState>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800fe10:	7bbb      	ldrb	r3, [r7, #14]
 800fe12:	2b01      	cmp	r3, #1
 800fe14:	d103      	bne.n	800fe1e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2207      	movs	r2, #7
 800fe1a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fe1c:	e0ac      	b.n	800ff78 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800fe1e:	7bbb      	ldrb	r3, [r7, #14]
 800fe20:	2b05      	cmp	r3, #5
 800fe22:	d105      	bne.n	800fe30 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	220c      	movs	r2, #12
 800fe28:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800fe2a:	2303      	movs	r3, #3
 800fe2c:	73fb      	strb	r3, [r7, #15]
      break;
 800fe2e:	e0a3      	b.n	800ff78 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fe30:	7bbb      	ldrb	r3, [r7, #14]
 800fe32:	2b02      	cmp	r3, #2
 800fe34:	d103      	bne.n	800fe3e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	2205      	movs	r2, #5
 800fe3a:	761a      	strb	r2, [r3, #24]
      break;
 800fe3c:	e09c      	b.n	800ff78 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800fe3e:	7bbb      	ldrb	r3, [r7, #14]
 800fe40:	2b04      	cmp	r3, #4
 800fe42:	f040 8099 	bne.w	800ff78 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	220b      	movs	r2, #11
 800fe4a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800fe4c:	2302      	movs	r3, #2
 800fe4e:	73fb      	strb	r3, [r7, #15]
      break;
 800fe50:	e092      	b.n	800ff78 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	791b      	ldrb	r3, [r3, #4]
 800fe56:	2200      	movs	r2, #0
 800fe58:	2100      	movs	r1, #0
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f000 f8d5 	bl	801000a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fe66:	b29a      	uxth	r2, r3
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2208      	movs	r2, #8
 800fe70:	761a      	strb	r2, [r3, #24]

      break;
 800fe72:	e086      	b.n	800ff82 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	791b      	ldrb	r3, [r3, #4]
 800fe78:	4619      	mov	r1, r3
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	f000 fc62 	bl	8010744 <USBH_LL_GetURBState>
 800fe80:	4603      	mov	r3, r0
 800fe82:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800fe84:	7bbb      	ldrb	r3, [r7, #14]
 800fe86:	2b01      	cmp	r3, #1
 800fe88:	d105      	bne.n	800fe96 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	220d      	movs	r2, #13
 800fe8e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800fe90:	2300      	movs	r3, #0
 800fe92:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fe94:	e072      	b.n	800ff7c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800fe96:	7bbb      	ldrb	r3, [r7, #14]
 800fe98:	2b04      	cmp	r3, #4
 800fe9a:	d103      	bne.n	800fea4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	220b      	movs	r2, #11
 800fea0:	761a      	strb	r2, [r3, #24]
      break;
 800fea2:	e06b      	b.n	800ff7c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800fea4:	7bbb      	ldrb	r3, [r7, #14]
 800fea6:	2b05      	cmp	r3, #5
 800fea8:	d168      	bne.n	800ff7c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800feaa:	2303      	movs	r3, #3
 800feac:	73fb      	strb	r3, [r7, #15]
      break;
 800feae:	e065      	b.n	800ff7c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	795b      	ldrb	r3, [r3, #5]
 800feb4:	2201      	movs	r2, #1
 800feb6:	9200      	str	r2, [sp, #0]
 800feb8:	2200      	movs	r2, #0
 800feba:	2100      	movs	r1, #0
 800febc:	6878      	ldr	r0, [r7, #4]
 800febe:	f000 f87f 	bl	800ffc0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fec8:	b29a      	uxth	r2, r3
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	220a      	movs	r2, #10
 800fed2:	761a      	strb	r2, [r3, #24]
      break;
 800fed4:	e055      	b.n	800ff82 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	795b      	ldrb	r3, [r3, #5]
 800feda:	4619      	mov	r1, r3
 800fedc:	6878      	ldr	r0, [r7, #4]
 800fede:	f000 fc31 	bl	8010744 <USBH_LL_GetURBState>
 800fee2:	4603      	mov	r3, r0
 800fee4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800fee6:	7bbb      	ldrb	r3, [r7, #14]
 800fee8:	2b01      	cmp	r3, #1
 800feea:	d105      	bne.n	800fef8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800feec:	2300      	movs	r3, #0
 800feee:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	220d      	movs	r2, #13
 800fef4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fef6:	e043      	b.n	800ff80 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fef8:	7bbb      	ldrb	r3, [r7, #14]
 800fefa:	2b02      	cmp	r3, #2
 800fefc:	d103      	bne.n	800ff06 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2209      	movs	r2, #9
 800ff02:	761a      	strb	r2, [r3, #24]
      break;
 800ff04:	e03c      	b.n	800ff80 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800ff06:	7bbb      	ldrb	r3, [r7, #14]
 800ff08:	2b04      	cmp	r3, #4
 800ff0a:	d139      	bne.n	800ff80 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	220b      	movs	r2, #11
 800ff10:	761a      	strb	r2, [r3, #24]
      break;
 800ff12:	e035      	b.n	800ff80 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	7e5b      	ldrb	r3, [r3, #25]
 800ff18:	3301      	adds	r3, #1
 800ff1a:	b2da      	uxtb	r2, r3
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	765a      	strb	r2, [r3, #25]
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	7e5b      	ldrb	r3, [r3, #25]
 800ff24:	2b02      	cmp	r3, #2
 800ff26:	d806      	bhi.n	800ff36 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2201      	movs	r2, #1
 800ff2c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2201      	movs	r2, #1
 800ff32:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ff34:	e025      	b.n	800ff82 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ff3c:	2106      	movs	r1, #6
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2200      	movs	r2, #0
 800ff46:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	795b      	ldrb	r3, [r3, #5]
 800ff4c:	4619      	mov	r1, r3
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f000 f90c 	bl	801016c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	791b      	ldrb	r3, [r3, #4]
 800ff58:	4619      	mov	r1, r3
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f000 f906 	bl	801016c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2200      	movs	r2, #0
 800ff64:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ff66:	2302      	movs	r3, #2
 800ff68:	73fb      	strb	r3, [r7, #15]
      break;
 800ff6a:	e00a      	b.n	800ff82 <USBH_HandleControl+0x2de>

    default:
      break;
 800ff6c:	bf00      	nop
 800ff6e:	e008      	b.n	800ff82 <USBH_HandleControl+0x2de>
      break;
 800ff70:	bf00      	nop
 800ff72:	e006      	b.n	800ff82 <USBH_HandleControl+0x2de>
      break;
 800ff74:	bf00      	nop
 800ff76:	e004      	b.n	800ff82 <USBH_HandleControl+0x2de>
      break;
 800ff78:	bf00      	nop
 800ff7a:	e002      	b.n	800ff82 <USBH_HandleControl+0x2de>
      break;
 800ff7c:	bf00      	nop
 800ff7e:	e000      	b.n	800ff82 <USBH_HandleControl+0x2de>
      break;
 800ff80:	bf00      	nop
  }

  return status;
 800ff82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff84:	4618      	mov	r0, r3
 800ff86:	3710      	adds	r7, #16
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}

0800ff8c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b088      	sub	sp, #32
 800ff90:	af04      	add	r7, sp, #16
 800ff92:	60f8      	str	r0, [r7, #12]
 800ff94:	60b9      	str	r1, [r7, #8]
 800ff96:	4613      	mov	r3, r2
 800ff98:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ff9a:	79f9      	ldrb	r1, [r7, #7]
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	9303      	str	r3, [sp, #12]
 800ffa0:	2308      	movs	r3, #8
 800ffa2:	9302      	str	r3, [sp, #8]
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	9301      	str	r3, [sp, #4]
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	9300      	str	r3, [sp, #0]
 800ffac:	2300      	movs	r3, #0
 800ffae:	2200      	movs	r2, #0
 800ffb0:	68f8      	ldr	r0, [r7, #12]
 800ffb2:	f000 fb96 	bl	80106e2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800ffb6:	2300      	movs	r3, #0
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3710      	adds	r7, #16
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}

0800ffc0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b088      	sub	sp, #32
 800ffc4:	af04      	add	r7, sp, #16
 800ffc6:	60f8      	str	r0, [r7, #12]
 800ffc8:	60b9      	str	r1, [r7, #8]
 800ffca:	4611      	mov	r1, r2
 800ffcc:	461a      	mov	r2, r3
 800ffce:	460b      	mov	r3, r1
 800ffd0:	80fb      	strh	r3, [r7, #6]
 800ffd2:	4613      	mov	r3, r2
 800ffd4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d001      	beq.n	800ffe4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ffe4:	7979      	ldrb	r1, [r7, #5]
 800ffe6:	7e3b      	ldrb	r3, [r7, #24]
 800ffe8:	9303      	str	r3, [sp, #12]
 800ffea:	88fb      	ldrh	r3, [r7, #6]
 800ffec:	9302      	str	r3, [sp, #8]
 800ffee:	68bb      	ldr	r3, [r7, #8]
 800fff0:	9301      	str	r3, [sp, #4]
 800fff2:	2301      	movs	r3, #1
 800fff4:	9300      	str	r3, [sp, #0]
 800fff6:	2300      	movs	r3, #0
 800fff8:	2200      	movs	r2, #0
 800fffa:	68f8      	ldr	r0, [r7, #12]
 800fffc:	f000 fb71 	bl	80106e2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8010000:	2300      	movs	r3, #0
}
 8010002:	4618      	mov	r0, r3
 8010004:	3710      	adds	r7, #16
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}

0801000a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801000a:	b580      	push	{r7, lr}
 801000c:	b088      	sub	sp, #32
 801000e:	af04      	add	r7, sp, #16
 8010010:	60f8      	str	r0, [r7, #12]
 8010012:	60b9      	str	r1, [r7, #8]
 8010014:	4611      	mov	r1, r2
 8010016:	461a      	mov	r2, r3
 8010018:	460b      	mov	r3, r1
 801001a:	80fb      	strh	r3, [r7, #6]
 801001c:	4613      	mov	r3, r2
 801001e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010020:	7979      	ldrb	r1, [r7, #5]
 8010022:	2300      	movs	r3, #0
 8010024:	9303      	str	r3, [sp, #12]
 8010026:	88fb      	ldrh	r3, [r7, #6]
 8010028:	9302      	str	r3, [sp, #8]
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	9301      	str	r3, [sp, #4]
 801002e:	2301      	movs	r3, #1
 8010030:	9300      	str	r3, [sp, #0]
 8010032:	2300      	movs	r3, #0
 8010034:	2201      	movs	r2, #1
 8010036:	68f8      	ldr	r0, [r7, #12]
 8010038:	f000 fb53 	bl	80106e2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 801003c:	2300      	movs	r3, #0

}
 801003e:	4618      	mov	r0, r3
 8010040:	3710      	adds	r7, #16
 8010042:	46bd      	mov	sp, r7
 8010044:	bd80      	pop	{r7, pc}

08010046 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8010046:	b580      	push	{r7, lr}
 8010048:	b088      	sub	sp, #32
 801004a:	af04      	add	r7, sp, #16
 801004c:	60f8      	str	r0, [r7, #12]
 801004e:	60b9      	str	r1, [r7, #8]
 8010050:	4611      	mov	r1, r2
 8010052:	461a      	mov	r2, r3
 8010054:	460b      	mov	r3, r1
 8010056:	80fb      	strh	r3, [r7, #6]
 8010058:	4613      	mov	r3, r2
 801005a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010062:	2b00      	cmp	r3, #0
 8010064:	d001      	beq.n	801006a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8010066:	2300      	movs	r3, #0
 8010068:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801006a:	7979      	ldrb	r1, [r7, #5]
 801006c:	7e3b      	ldrb	r3, [r7, #24]
 801006e:	9303      	str	r3, [sp, #12]
 8010070:	88fb      	ldrh	r3, [r7, #6]
 8010072:	9302      	str	r3, [sp, #8]
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	9301      	str	r3, [sp, #4]
 8010078:	2301      	movs	r3, #1
 801007a:	9300      	str	r3, [sp, #0]
 801007c:	2302      	movs	r3, #2
 801007e:	2200      	movs	r2, #0
 8010080:	68f8      	ldr	r0, [r7, #12]
 8010082:	f000 fb2e 	bl	80106e2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8010086:	2300      	movs	r3, #0
}
 8010088:	4618      	mov	r0, r3
 801008a:	3710      	adds	r7, #16
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}

08010090 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b088      	sub	sp, #32
 8010094:	af04      	add	r7, sp, #16
 8010096:	60f8      	str	r0, [r7, #12]
 8010098:	60b9      	str	r1, [r7, #8]
 801009a:	4611      	mov	r1, r2
 801009c:	461a      	mov	r2, r3
 801009e:	460b      	mov	r3, r1
 80100a0:	80fb      	strh	r3, [r7, #6]
 80100a2:	4613      	mov	r3, r2
 80100a4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80100a6:	7979      	ldrb	r1, [r7, #5]
 80100a8:	2300      	movs	r3, #0
 80100aa:	9303      	str	r3, [sp, #12]
 80100ac:	88fb      	ldrh	r3, [r7, #6]
 80100ae:	9302      	str	r3, [sp, #8]
 80100b0:	68bb      	ldr	r3, [r7, #8]
 80100b2:	9301      	str	r3, [sp, #4]
 80100b4:	2301      	movs	r3, #1
 80100b6:	9300      	str	r3, [sp, #0]
 80100b8:	2302      	movs	r3, #2
 80100ba:	2201      	movs	r2, #1
 80100bc:	68f8      	ldr	r0, [r7, #12]
 80100be:	f000 fb10 	bl	80106e2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80100c2:	2300      	movs	r3, #0
}
 80100c4:	4618      	mov	r0, r3
 80100c6:	3710      	adds	r7, #16
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}

080100cc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b086      	sub	sp, #24
 80100d0:	af04      	add	r7, sp, #16
 80100d2:	6078      	str	r0, [r7, #4]
 80100d4:	4608      	mov	r0, r1
 80100d6:	4611      	mov	r1, r2
 80100d8:	461a      	mov	r2, r3
 80100da:	4603      	mov	r3, r0
 80100dc:	70fb      	strb	r3, [r7, #3]
 80100de:	460b      	mov	r3, r1
 80100e0:	70bb      	strb	r3, [r7, #2]
 80100e2:	4613      	mov	r3, r2
 80100e4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80100e6:	7878      	ldrb	r0, [r7, #1]
 80100e8:	78ba      	ldrb	r2, [r7, #2]
 80100ea:	78f9      	ldrb	r1, [r7, #3]
 80100ec:	8b3b      	ldrh	r3, [r7, #24]
 80100ee:	9302      	str	r3, [sp, #8]
 80100f0:	7d3b      	ldrb	r3, [r7, #20]
 80100f2:	9301      	str	r3, [sp, #4]
 80100f4:	7c3b      	ldrb	r3, [r7, #16]
 80100f6:	9300      	str	r3, [sp, #0]
 80100f8:	4603      	mov	r3, r0
 80100fa:	6878      	ldr	r0, [r7, #4]
 80100fc:	f000 faa3 	bl	8010646 <USBH_LL_OpenPipe>

  return USBH_OK;
 8010100:	2300      	movs	r3, #0
}
 8010102:	4618      	mov	r0, r3
 8010104:	3708      	adds	r7, #8
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}

0801010a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801010a:	b580      	push	{r7, lr}
 801010c:	b082      	sub	sp, #8
 801010e:	af00      	add	r7, sp, #0
 8010110:	6078      	str	r0, [r7, #4]
 8010112:	460b      	mov	r3, r1
 8010114:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8010116:	78fb      	ldrb	r3, [r7, #3]
 8010118:	4619      	mov	r1, r3
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f000 fac2 	bl	80106a4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8010120:	2300      	movs	r3, #0
}
 8010122:	4618      	mov	r0, r3
 8010124:	3708      	adds	r7, #8
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}

0801012a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801012a:	b580      	push	{r7, lr}
 801012c:	b084      	sub	sp, #16
 801012e:	af00      	add	r7, sp, #0
 8010130:	6078      	str	r0, [r7, #4]
 8010132:	460b      	mov	r3, r1
 8010134:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8010136:	6878      	ldr	r0, [r7, #4]
 8010138:	f000 f836 	bl	80101a8 <USBH_GetFreePipe>
 801013c:	4603      	mov	r3, r0
 801013e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8010140:	89fb      	ldrh	r3, [r7, #14]
 8010142:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010146:	4293      	cmp	r3, r2
 8010148:	d00a      	beq.n	8010160 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 801014a:	78fa      	ldrb	r2, [r7, #3]
 801014c:	89fb      	ldrh	r3, [r7, #14]
 801014e:	f003 030f 	and.w	r3, r3, #15
 8010152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010156:	6879      	ldr	r1, [r7, #4]
 8010158:	33e0      	adds	r3, #224	; 0xe0
 801015a:	009b      	lsls	r3, r3, #2
 801015c:	440b      	add	r3, r1
 801015e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8010160:	89fb      	ldrh	r3, [r7, #14]
 8010162:	b2db      	uxtb	r3, r3
}
 8010164:	4618      	mov	r0, r3
 8010166:	3710      	adds	r7, #16
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}

0801016c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 801016c:	b480      	push	{r7}
 801016e:	b083      	sub	sp, #12
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
 8010174:	460b      	mov	r3, r1
 8010176:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8010178:	78fb      	ldrb	r3, [r7, #3]
 801017a:	2b0a      	cmp	r3, #10
 801017c:	d80d      	bhi.n	801019a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801017e:	78fb      	ldrb	r3, [r7, #3]
 8010180:	687a      	ldr	r2, [r7, #4]
 8010182:	33e0      	adds	r3, #224	; 0xe0
 8010184:	009b      	lsls	r3, r3, #2
 8010186:	4413      	add	r3, r2
 8010188:	685a      	ldr	r2, [r3, #4]
 801018a:	78fb      	ldrb	r3, [r7, #3]
 801018c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8010190:	6879      	ldr	r1, [r7, #4]
 8010192:	33e0      	adds	r3, #224	; 0xe0
 8010194:	009b      	lsls	r3, r3, #2
 8010196:	440b      	add	r3, r1
 8010198:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 801019a:	2300      	movs	r3, #0
}
 801019c:	4618      	mov	r0, r3
 801019e:	370c      	adds	r7, #12
 80101a0:	46bd      	mov	sp, r7
 80101a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a6:	4770      	bx	lr

080101a8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80101a8:	b480      	push	{r7}
 80101aa:	b085      	sub	sp, #20
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80101b0:	2300      	movs	r3, #0
 80101b2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80101b4:	2300      	movs	r3, #0
 80101b6:	73fb      	strb	r3, [r7, #15]
 80101b8:	e00f      	b.n	80101da <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80101ba:	7bfb      	ldrb	r3, [r7, #15]
 80101bc:	687a      	ldr	r2, [r7, #4]
 80101be:	33e0      	adds	r3, #224	; 0xe0
 80101c0:	009b      	lsls	r3, r3, #2
 80101c2:	4413      	add	r3, r2
 80101c4:	685b      	ldr	r3, [r3, #4]
 80101c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d102      	bne.n	80101d4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80101ce:	7bfb      	ldrb	r3, [r7, #15]
 80101d0:	b29b      	uxth	r3, r3
 80101d2:	e007      	b.n	80101e4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80101d4:	7bfb      	ldrb	r3, [r7, #15]
 80101d6:	3301      	adds	r3, #1
 80101d8:	73fb      	strb	r3, [r7, #15]
 80101da:	7bfb      	ldrb	r3, [r7, #15]
 80101dc:	2b0a      	cmp	r3, #10
 80101de:	d9ec      	bls.n	80101ba <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80101e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3714      	adds	r7, #20
 80101e8:	46bd      	mov	sp, r7
 80101ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ee:	4770      	bx	lr

080101f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80101f0:	b480      	push	{r7}
 80101f2:	b087      	sub	sp, #28
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	60f8      	str	r0, [r7, #12]
 80101f8:	60b9      	str	r1, [r7, #8]
 80101fa:	4613      	mov	r3, r2
 80101fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80101fe:	2301      	movs	r3, #1
 8010200:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010202:	2300      	movs	r3, #0
 8010204:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010206:	4b1f      	ldr	r3, [pc, #124]	; (8010284 <FATFS_LinkDriverEx+0x94>)
 8010208:	7a5b      	ldrb	r3, [r3, #9]
 801020a:	b2db      	uxtb	r3, r3
 801020c:	2b00      	cmp	r3, #0
 801020e:	d131      	bne.n	8010274 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010210:	4b1c      	ldr	r3, [pc, #112]	; (8010284 <FATFS_LinkDriverEx+0x94>)
 8010212:	7a5b      	ldrb	r3, [r3, #9]
 8010214:	b2db      	uxtb	r3, r3
 8010216:	461a      	mov	r2, r3
 8010218:	4b1a      	ldr	r3, [pc, #104]	; (8010284 <FATFS_LinkDriverEx+0x94>)
 801021a:	2100      	movs	r1, #0
 801021c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801021e:	4b19      	ldr	r3, [pc, #100]	; (8010284 <FATFS_LinkDriverEx+0x94>)
 8010220:	7a5b      	ldrb	r3, [r3, #9]
 8010222:	b2db      	uxtb	r3, r3
 8010224:	4a17      	ldr	r2, [pc, #92]	; (8010284 <FATFS_LinkDriverEx+0x94>)
 8010226:	009b      	lsls	r3, r3, #2
 8010228:	4413      	add	r3, r2
 801022a:	68fa      	ldr	r2, [r7, #12]
 801022c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801022e:	4b15      	ldr	r3, [pc, #84]	; (8010284 <FATFS_LinkDriverEx+0x94>)
 8010230:	7a5b      	ldrb	r3, [r3, #9]
 8010232:	b2db      	uxtb	r3, r3
 8010234:	461a      	mov	r2, r3
 8010236:	4b13      	ldr	r3, [pc, #76]	; (8010284 <FATFS_LinkDriverEx+0x94>)
 8010238:	4413      	add	r3, r2
 801023a:	79fa      	ldrb	r2, [r7, #7]
 801023c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801023e:	4b11      	ldr	r3, [pc, #68]	; (8010284 <FATFS_LinkDriverEx+0x94>)
 8010240:	7a5b      	ldrb	r3, [r3, #9]
 8010242:	b2db      	uxtb	r3, r3
 8010244:	1c5a      	adds	r2, r3, #1
 8010246:	b2d1      	uxtb	r1, r2
 8010248:	4a0e      	ldr	r2, [pc, #56]	; (8010284 <FATFS_LinkDriverEx+0x94>)
 801024a:	7251      	strb	r1, [r2, #9]
 801024c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801024e:	7dbb      	ldrb	r3, [r7, #22]
 8010250:	3330      	adds	r3, #48	; 0x30
 8010252:	b2da      	uxtb	r2, r3
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	3301      	adds	r3, #1
 801025c:	223a      	movs	r2, #58	; 0x3a
 801025e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010260:	68bb      	ldr	r3, [r7, #8]
 8010262:	3302      	adds	r3, #2
 8010264:	222f      	movs	r2, #47	; 0x2f
 8010266:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010268:	68bb      	ldr	r3, [r7, #8]
 801026a:	3303      	adds	r3, #3
 801026c:	2200      	movs	r2, #0
 801026e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010270:	2300      	movs	r3, #0
 8010272:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010274:	7dfb      	ldrb	r3, [r7, #23]
}
 8010276:	4618      	mov	r0, r3
 8010278:	371c      	adds	r7, #28
 801027a:	46bd      	mov	sp, r7
 801027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010280:	4770      	bx	lr
 8010282:	bf00      	nop
 8010284:	200008a0 	.word	0x200008a0

08010288 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b082      	sub	sp, #8
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
 8010290:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010292:	2200      	movs	r2, #0
 8010294:	6839      	ldr	r1, [r7, #0]
 8010296:	6878      	ldr	r0, [r7, #4]
 8010298:	f7ff ffaa 	bl	80101f0 <FATFS_LinkDriverEx>
 801029c:	4603      	mov	r3, r0
}
 801029e:	4618      	mov	r0, r3
 80102a0:	3708      	adds	r7, #8
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}
	...

080102a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80102ac:	2201      	movs	r2, #1
 80102ae:	490e      	ldr	r1, [pc, #56]	; (80102e8 <MX_USB_HOST_Init+0x40>)
 80102b0:	480e      	ldr	r0, [pc, #56]	; (80102ec <MX_USB_HOST_Init+0x44>)
 80102b2:	f7fe fc45 	bl	800eb40 <USBH_Init>
 80102b6:	4603      	mov	r3, r0
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d001      	beq.n	80102c0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80102bc:	f7f2 ff80 	bl	80031c0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80102c0:	490b      	ldr	r1, [pc, #44]	; (80102f0 <MX_USB_HOST_Init+0x48>)
 80102c2:	480a      	ldr	r0, [pc, #40]	; (80102ec <MX_USB_HOST_Init+0x44>)
 80102c4:	f7fe fcca 	bl	800ec5c <USBH_RegisterClass>
 80102c8:	4603      	mov	r3, r0
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d001      	beq.n	80102d2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80102ce:	f7f2 ff77 	bl	80031c0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80102d2:	4806      	ldr	r0, [pc, #24]	; (80102ec <MX_USB_HOST_Init+0x44>)
 80102d4:	f7fe fd4e 	bl	800ed74 <USBH_Start>
 80102d8:	4603      	mov	r3, r0
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d001      	beq.n	80102e2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80102de:	f7f2 ff6f 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80102e2:	bf00      	nop
 80102e4:	bd80      	pop	{r7, pc}
 80102e6:	bf00      	nop
 80102e8:	08010309 	.word	0x08010309
 80102ec:	20001574 	.word	0x20001574
 80102f0:	2000000c 	.word	0x2000000c

080102f4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80102f8:	4802      	ldr	r0, [pc, #8]	; (8010304 <MX_USB_HOST_Process+0x10>)
 80102fa:	f7fe fd4b 	bl	800ed94 <USBH_Process>
}
 80102fe:	bf00      	nop
 8010300:	bd80      	pop	{r7, pc}
 8010302:	bf00      	nop
 8010304:	20001574 	.word	0x20001574

08010308 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010308:	b480      	push	{r7}
 801030a:	b083      	sub	sp, #12
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
 8010310:	460b      	mov	r3, r1
 8010312:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010314:	78fb      	ldrb	r3, [r7, #3]
 8010316:	3b01      	subs	r3, #1
 8010318:	2b04      	cmp	r3, #4
 801031a:	d819      	bhi.n	8010350 <USBH_UserProcess+0x48>
 801031c:	a201      	add	r2, pc, #4	; (adr r2, 8010324 <USBH_UserProcess+0x1c>)
 801031e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010322:	bf00      	nop
 8010324:	08010351 	.word	0x08010351
 8010328:	08010341 	.word	0x08010341
 801032c:	08010351 	.word	0x08010351
 8010330:	08010349 	.word	0x08010349
 8010334:	08010339 	.word	0x08010339
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010338:	4b09      	ldr	r3, [pc, #36]	; (8010360 <USBH_UserProcess+0x58>)
 801033a:	2203      	movs	r2, #3
 801033c:	701a      	strb	r2, [r3, #0]
  break;
 801033e:	e008      	b.n	8010352 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010340:	4b07      	ldr	r3, [pc, #28]	; (8010360 <USBH_UserProcess+0x58>)
 8010342:	2202      	movs	r2, #2
 8010344:	701a      	strb	r2, [r3, #0]
  break;
 8010346:	e004      	b.n	8010352 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010348:	4b05      	ldr	r3, [pc, #20]	; (8010360 <USBH_UserProcess+0x58>)
 801034a:	2201      	movs	r2, #1
 801034c:	701a      	strb	r2, [r3, #0]
  break;
 801034e:	e000      	b.n	8010352 <USBH_UserProcess+0x4a>

  default:
  break;
 8010350:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010352:	bf00      	nop
 8010354:	370c      	adds	r7, #12
 8010356:	46bd      	mov	sp, r7
 8010358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035c:	4770      	bx	lr
 801035e:	bf00      	nop
 8010360:	200008ac 	.word	0x200008ac

08010364 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b08a      	sub	sp, #40	; 0x28
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801036c:	f107 0314 	add.w	r3, r7, #20
 8010370:	2200      	movs	r2, #0
 8010372:	601a      	str	r2, [r3, #0]
 8010374:	605a      	str	r2, [r3, #4]
 8010376:	609a      	str	r2, [r3, #8]
 8010378:	60da      	str	r2, [r3, #12]
 801037a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010384:	d13c      	bne.n	8010400 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010386:	4b20      	ldr	r3, [pc, #128]	; (8010408 <HAL_HCD_MspInit+0xa4>)
 8010388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801038a:	4a1f      	ldr	r2, [pc, #124]	; (8010408 <HAL_HCD_MspInit+0xa4>)
 801038c:	f043 0301 	orr.w	r3, r3, #1
 8010390:	6313      	str	r3, [r2, #48]	; 0x30
 8010392:	4b1d      	ldr	r3, [pc, #116]	; (8010408 <HAL_HCD_MspInit+0xa4>)
 8010394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010396:	f003 0301 	and.w	r3, r3, #1
 801039a:	613b      	str	r3, [r7, #16]
 801039c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 801039e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80103a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80103a4:	2302      	movs	r3, #2
 80103a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103a8:	2300      	movs	r3, #0
 80103aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80103ac:	2303      	movs	r3, #3
 80103ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80103b0:	230a      	movs	r3, #10
 80103b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80103b4:	f107 0314 	add.w	r3, r7, #20
 80103b8:	4619      	mov	r1, r3
 80103ba:	4814      	ldr	r0, [pc, #80]	; (801040c <HAL_HCD_MspInit+0xa8>)
 80103bc:	f7f4 fe20 	bl	8005000 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80103c0:	4b11      	ldr	r3, [pc, #68]	; (8010408 <HAL_HCD_MspInit+0xa4>)
 80103c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103c4:	4a10      	ldr	r2, [pc, #64]	; (8010408 <HAL_HCD_MspInit+0xa4>)
 80103c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103ca:	6353      	str	r3, [r2, #52]	; 0x34
 80103cc:	4b0e      	ldr	r3, [pc, #56]	; (8010408 <HAL_HCD_MspInit+0xa4>)
 80103ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103d4:	60fb      	str	r3, [r7, #12]
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	4b0b      	ldr	r3, [pc, #44]	; (8010408 <HAL_HCD_MspInit+0xa4>)
 80103da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103dc:	4a0a      	ldr	r2, [pc, #40]	; (8010408 <HAL_HCD_MspInit+0xa4>)
 80103de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80103e2:	6453      	str	r3, [r2, #68]	; 0x44
 80103e4:	4b08      	ldr	r3, [pc, #32]	; (8010408 <HAL_HCD_MspInit+0xa4>)
 80103e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80103ec:	60bb      	str	r3, [r7, #8]
 80103ee:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80103f0:	2200      	movs	r2, #0
 80103f2:	2100      	movs	r1, #0
 80103f4:	2043      	movs	r0, #67	; 0x43
 80103f6:	f7f4 fa7c 	bl	80048f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80103fa:	2043      	movs	r0, #67	; 0x43
 80103fc:	f7f4 fa95 	bl	800492a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010400:	bf00      	nop
 8010402:	3728      	adds	r7, #40	; 0x28
 8010404:	46bd      	mov	sp, r7
 8010406:	bd80      	pop	{r7, pc}
 8010408:	40023800 	.word	0x40023800
 801040c:	40020000 	.word	0x40020000

08010410 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b082      	sub	sp, #8
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801041e:	4618      	mov	r0, r3
 8010420:	f7ff f88b 	bl	800f53a <USBH_LL_IncTimer>
}
 8010424:	bf00      	nop
 8010426:	3708      	adds	r7, #8
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}

0801042c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b082      	sub	sp, #8
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801043a:	4618      	mov	r0, r3
 801043c:	f7ff f8c3 	bl	800f5c6 <USBH_LL_Connect>
}
 8010440:	bf00      	nop
 8010442:	3708      	adds	r7, #8
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}

08010448 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b082      	sub	sp, #8
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010456:	4618      	mov	r0, r3
 8010458:	f7ff f8cc 	bl	800f5f4 <USBH_LL_Disconnect>
}
 801045c:	bf00      	nop
 801045e:	3708      	adds	r7, #8
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}

08010464 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010464:	b480      	push	{r7}
 8010466:	b083      	sub	sp, #12
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
 801046c:	460b      	mov	r3, r1
 801046e:	70fb      	strb	r3, [r7, #3]
 8010470:	4613      	mov	r3, r2
 8010472:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8010474:	bf00      	nop
 8010476:	370c      	adds	r7, #12
 8010478:	46bd      	mov	sp, r7
 801047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047e:	4770      	bx	lr

08010480 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b082      	sub	sp, #8
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801048e:	4618      	mov	r0, r3
 8010490:	f7ff f87d 	bl	800f58e <USBH_LL_PortEnabled>
}
 8010494:	bf00      	nop
 8010496:	3708      	adds	r7, #8
 8010498:	46bd      	mov	sp, r7
 801049a:	bd80      	pop	{r7, pc}

0801049c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b082      	sub	sp, #8
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7ff f87d 	bl	800f5aa <USBH_LL_PortDisabled>
}
 80104b0:	bf00      	nop
 80104b2:	3708      	adds	r7, #8
 80104b4:	46bd      	mov	sp, r7
 80104b6:	bd80      	pop	{r7, pc}

080104b8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b082      	sub	sp, #8
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80104c6:	2b01      	cmp	r3, #1
 80104c8:	d12a      	bne.n	8010520 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80104ca:	4a18      	ldr	r2, [pc, #96]	; (801052c <USBH_LL_Init+0x74>)
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	4a15      	ldr	r2, [pc, #84]	; (801052c <USBH_LL_Init+0x74>)
 80104d6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80104da:	4b14      	ldr	r3, [pc, #80]	; (801052c <USBH_LL_Init+0x74>)
 80104dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80104e0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80104e2:	4b12      	ldr	r3, [pc, #72]	; (801052c <USBH_LL_Init+0x74>)
 80104e4:	2208      	movs	r2, #8
 80104e6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80104e8:	4b10      	ldr	r3, [pc, #64]	; (801052c <USBH_LL_Init+0x74>)
 80104ea:	2201      	movs	r2, #1
 80104ec:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80104ee:	4b0f      	ldr	r3, [pc, #60]	; (801052c <USBH_LL_Init+0x74>)
 80104f0:	2200      	movs	r2, #0
 80104f2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80104f4:	4b0d      	ldr	r3, [pc, #52]	; (801052c <USBH_LL_Init+0x74>)
 80104f6:	2202      	movs	r2, #2
 80104f8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80104fa:	4b0c      	ldr	r3, [pc, #48]	; (801052c <USBH_LL_Init+0x74>)
 80104fc:	2200      	movs	r2, #0
 80104fe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010500:	480a      	ldr	r0, [pc, #40]	; (801052c <USBH_LL_Init+0x74>)
 8010502:	f7f4 ff74 	bl	80053ee <HAL_HCD_Init>
 8010506:	4603      	mov	r3, r0
 8010508:	2b00      	cmp	r3, #0
 801050a:	d001      	beq.n	8010510 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801050c:	f7f2 fe58 	bl	80031c0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010510:	4806      	ldr	r0, [pc, #24]	; (801052c <USBH_LL_Init+0x74>)
 8010512:	f7f5 fb51 	bl	8005bb8 <HAL_HCD_GetCurrentFrame>
 8010516:	4603      	mov	r3, r0
 8010518:	4619      	mov	r1, r3
 801051a:	6878      	ldr	r0, [r7, #4]
 801051c:	f7fe fffe 	bl	800f51c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010520:	2300      	movs	r3, #0
}
 8010522:	4618      	mov	r0, r3
 8010524:	3708      	adds	r7, #8
 8010526:	46bd      	mov	sp, r7
 8010528:	bd80      	pop	{r7, pc}
 801052a:	bf00      	nop
 801052c:	2000194c 	.word	0x2000194c

08010530 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b084      	sub	sp, #16
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010538:	2300      	movs	r3, #0
 801053a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801053c:	2300      	movs	r3, #0
 801053e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010546:	4618      	mov	r0, r3
 8010548:	f7f5 fac0 	bl	8005acc <HAL_HCD_Start>
 801054c:	4603      	mov	r3, r0
 801054e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010550:	7bfb      	ldrb	r3, [r7, #15]
 8010552:	4618      	mov	r0, r3
 8010554:	f000 f95c 	bl	8010810 <USBH_Get_USB_Status>
 8010558:	4603      	mov	r3, r0
 801055a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801055c:	7bbb      	ldrb	r3, [r7, #14]
}
 801055e:	4618      	mov	r0, r3
 8010560:	3710      	adds	r7, #16
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}

08010566 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010566:	b580      	push	{r7, lr}
 8010568:	b084      	sub	sp, #16
 801056a:	af00      	add	r7, sp, #0
 801056c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801056e:	2300      	movs	r3, #0
 8010570:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010572:	2300      	movs	r3, #0
 8010574:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801057c:	4618      	mov	r0, r3
 801057e:	f7f5 fac8 	bl	8005b12 <HAL_HCD_Stop>
 8010582:	4603      	mov	r3, r0
 8010584:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010586:	7bfb      	ldrb	r3, [r7, #15]
 8010588:	4618      	mov	r0, r3
 801058a:	f000 f941 	bl	8010810 <USBH_Get_USB_Status>
 801058e:	4603      	mov	r3, r0
 8010590:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010592:	7bbb      	ldrb	r3, [r7, #14]
}
 8010594:	4618      	mov	r0, r3
 8010596:	3710      	adds	r7, #16
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}

0801059c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b084      	sub	sp, #16
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80105a4:	2301      	movs	r3, #1
 80105a6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80105ae:	4618      	mov	r0, r3
 80105b0:	f7f5 fb10 	bl	8005bd4 <HAL_HCD_GetCurrentSpeed>
 80105b4:	4603      	mov	r3, r0
 80105b6:	2b02      	cmp	r3, #2
 80105b8:	d00c      	beq.n	80105d4 <USBH_LL_GetSpeed+0x38>
 80105ba:	2b02      	cmp	r3, #2
 80105bc:	d80d      	bhi.n	80105da <USBH_LL_GetSpeed+0x3e>
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d002      	beq.n	80105c8 <USBH_LL_GetSpeed+0x2c>
 80105c2:	2b01      	cmp	r3, #1
 80105c4:	d003      	beq.n	80105ce <USBH_LL_GetSpeed+0x32>
 80105c6:	e008      	b.n	80105da <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80105c8:	2300      	movs	r3, #0
 80105ca:	73fb      	strb	r3, [r7, #15]
    break;
 80105cc:	e008      	b.n	80105e0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80105ce:	2301      	movs	r3, #1
 80105d0:	73fb      	strb	r3, [r7, #15]
    break;
 80105d2:	e005      	b.n	80105e0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80105d4:	2302      	movs	r3, #2
 80105d6:	73fb      	strb	r3, [r7, #15]
    break;
 80105d8:	e002      	b.n	80105e0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80105da:	2301      	movs	r3, #1
 80105dc:	73fb      	strb	r3, [r7, #15]
    break;
 80105de:	bf00      	nop
  }
  return  speed;
 80105e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80105e2:	4618      	mov	r0, r3
 80105e4:	3710      	adds	r7, #16
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}

080105ea <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80105ea:	b580      	push	{r7, lr}
 80105ec:	b084      	sub	sp, #16
 80105ee:	af00      	add	r7, sp, #0
 80105f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105f2:	2300      	movs	r3, #0
 80105f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80105f6:	2300      	movs	r3, #0
 80105f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010600:	4618      	mov	r0, r3
 8010602:	f7f5 faa3 	bl	8005b4c <HAL_HCD_ResetPort>
 8010606:	4603      	mov	r3, r0
 8010608:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801060a:	7bfb      	ldrb	r3, [r7, #15]
 801060c:	4618      	mov	r0, r3
 801060e:	f000 f8ff 	bl	8010810 <USBH_Get_USB_Status>
 8010612:	4603      	mov	r3, r0
 8010614:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010616:	7bbb      	ldrb	r3, [r7, #14]
}
 8010618:	4618      	mov	r0, r3
 801061a:	3710      	adds	r7, #16
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}

08010620 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b082      	sub	sp, #8
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
 8010628:	460b      	mov	r3, r1
 801062a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010632:	78fa      	ldrb	r2, [r7, #3]
 8010634:	4611      	mov	r1, r2
 8010636:	4618      	mov	r0, r3
 8010638:	f7f5 faaa 	bl	8005b90 <HAL_HCD_HC_GetXferCount>
 801063c:	4603      	mov	r3, r0
}
 801063e:	4618      	mov	r0, r3
 8010640:	3708      	adds	r7, #8
 8010642:	46bd      	mov	sp, r7
 8010644:	bd80      	pop	{r7, pc}

08010646 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010646:	b590      	push	{r4, r7, lr}
 8010648:	b089      	sub	sp, #36	; 0x24
 801064a:	af04      	add	r7, sp, #16
 801064c:	6078      	str	r0, [r7, #4]
 801064e:	4608      	mov	r0, r1
 8010650:	4611      	mov	r1, r2
 8010652:	461a      	mov	r2, r3
 8010654:	4603      	mov	r3, r0
 8010656:	70fb      	strb	r3, [r7, #3]
 8010658:	460b      	mov	r3, r1
 801065a:	70bb      	strb	r3, [r7, #2]
 801065c:	4613      	mov	r3, r2
 801065e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010660:	2300      	movs	r3, #0
 8010662:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010664:	2300      	movs	r3, #0
 8010666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801066e:	787c      	ldrb	r4, [r7, #1]
 8010670:	78ba      	ldrb	r2, [r7, #2]
 8010672:	78f9      	ldrb	r1, [r7, #3]
 8010674:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010676:	9302      	str	r3, [sp, #8]
 8010678:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801067c:	9301      	str	r3, [sp, #4]
 801067e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010682:	9300      	str	r3, [sp, #0]
 8010684:	4623      	mov	r3, r4
 8010686:	f7f4 ff14 	bl	80054b2 <HAL_HCD_HC_Init>
 801068a:	4603      	mov	r3, r0
 801068c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801068e:	7bfb      	ldrb	r3, [r7, #15]
 8010690:	4618      	mov	r0, r3
 8010692:	f000 f8bd 	bl	8010810 <USBH_Get_USB_Status>
 8010696:	4603      	mov	r3, r0
 8010698:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801069a:	7bbb      	ldrb	r3, [r7, #14]
}
 801069c:	4618      	mov	r0, r3
 801069e:	3714      	adds	r7, #20
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd90      	pop	{r4, r7, pc}

080106a4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b084      	sub	sp, #16
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
 80106ac:	460b      	mov	r3, r1
 80106ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106b0:	2300      	movs	r3, #0
 80106b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80106b4:	2300      	movs	r3, #0
 80106b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80106be:	78fa      	ldrb	r2, [r7, #3]
 80106c0:	4611      	mov	r1, r2
 80106c2:	4618      	mov	r0, r3
 80106c4:	f7f4 ff84 	bl	80055d0 <HAL_HCD_HC_Halt>
 80106c8:	4603      	mov	r3, r0
 80106ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80106cc:	7bfb      	ldrb	r3, [r7, #15]
 80106ce:	4618      	mov	r0, r3
 80106d0:	f000 f89e 	bl	8010810 <USBH_Get_USB_Status>
 80106d4:	4603      	mov	r3, r0
 80106d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80106da:	4618      	mov	r0, r3
 80106dc:	3710      	adds	r7, #16
 80106de:	46bd      	mov	sp, r7
 80106e0:	bd80      	pop	{r7, pc}

080106e2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80106e2:	b590      	push	{r4, r7, lr}
 80106e4:	b089      	sub	sp, #36	; 0x24
 80106e6:	af04      	add	r7, sp, #16
 80106e8:	6078      	str	r0, [r7, #4]
 80106ea:	4608      	mov	r0, r1
 80106ec:	4611      	mov	r1, r2
 80106ee:	461a      	mov	r2, r3
 80106f0:	4603      	mov	r3, r0
 80106f2:	70fb      	strb	r3, [r7, #3]
 80106f4:	460b      	mov	r3, r1
 80106f6:	70bb      	strb	r3, [r7, #2]
 80106f8:	4613      	mov	r3, r2
 80106fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106fc:	2300      	movs	r3, #0
 80106fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010700:	2300      	movs	r3, #0
 8010702:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801070a:	787c      	ldrb	r4, [r7, #1]
 801070c:	78ba      	ldrb	r2, [r7, #2]
 801070e:	78f9      	ldrb	r1, [r7, #3]
 8010710:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010714:	9303      	str	r3, [sp, #12]
 8010716:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010718:	9302      	str	r3, [sp, #8]
 801071a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801071c:	9301      	str	r3, [sp, #4]
 801071e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010722:	9300      	str	r3, [sp, #0]
 8010724:	4623      	mov	r3, r4
 8010726:	f7f4 ff77 	bl	8005618 <HAL_HCD_HC_SubmitRequest>
 801072a:	4603      	mov	r3, r0
 801072c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801072e:	7bfb      	ldrb	r3, [r7, #15]
 8010730:	4618      	mov	r0, r3
 8010732:	f000 f86d 	bl	8010810 <USBH_Get_USB_Status>
 8010736:	4603      	mov	r3, r0
 8010738:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801073a:	7bbb      	ldrb	r3, [r7, #14]
}
 801073c:	4618      	mov	r0, r3
 801073e:	3714      	adds	r7, #20
 8010740:	46bd      	mov	sp, r7
 8010742:	bd90      	pop	{r4, r7, pc}

08010744 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b082      	sub	sp, #8
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
 801074c:	460b      	mov	r3, r1
 801074e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010756:	78fa      	ldrb	r2, [r7, #3]
 8010758:	4611      	mov	r1, r2
 801075a:	4618      	mov	r0, r3
 801075c:	f7f5 fa04 	bl	8005b68 <HAL_HCD_HC_GetURBState>
 8010760:	4603      	mov	r3, r0
}
 8010762:	4618      	mov	r0, r3
 8010764:	3708      	adds	r7, #8
 8010766:	46bd      	mov	sp, r7
 8010768:	bd80      	pop	{r7, pc}

0801076a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801076a:	b580      	push	{r7, lr}
 801076c:	b082      	sub	sp, #8
 801076e:	af00      	add	r7, sp, #0
 8010770:	6078      	str	r0, [r7, #4]
 8010772:	460b      	mov	r3, r1
 8010774:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801077c:	2b01      	cmp	r3, #1
 801077e:	d103      	bne.n	8010788 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8010780:	78fb      	ldrb	r3, [r7, #3]
 8010782:	4618      	mov	r0, r3
 8010784:	f000 f870 	bl	8010868 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010788:	20c8      	movs	r0, #200	; 0xc8
 801078a:	f7f3 fd2b 	bl	80041e4 <HAL_Delay>
  return USBH_OK;
 801078e:	2300      	movs	r3, #0
}
 8010790:	4618      	mov	r0, r3
 8010792:	3708      	adds	r7, #8
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}

08010798 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010798:	b480      	push	{r7}
 801079a:	b085      	sub	sp, #20
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
 80107a0:	460b      	mov	r3, r1
 80107a2:	70fb      	strb	r3, [r7, #3]
 80107a4:	4613      	mov	r3, r2
 80107a6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80107ae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80107b0:	78fb      	ldrb	r3, [r7, #3]
 80107b2:	68fa      	ldr	r2, [r7, #12]
 80107b4:	212c      	movs	r1, #44	; 0x2c
 80107b6:	fb01 f303 	mul.w	r3, r1, r3
 80107ba:	4413      	add	r3, r2
 80107bc:	333b      	adds	r3, #59	; 0x3b
 80107be:	781b      	ldrb	r3, [r3, #0]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d009      	beq.n	80107d8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80107c4:	78fb      	ldrb	r3, [r7, #3]
 80107c6:	68fa      	ldr	r2, [r7, #12]
 80107c8:	212c      	movs	r1, #44	; 0x2c
 80107ca:	fb01 f303 	mul.w	r3, r1, r3
 80107ce:	4413      	add	r3, r2
 80107d0:	3354      	adds	r3, #84	; 0x54
 80107d2:	78ba      	ldrb	r2, [r7, #2]
 80107d4:	701a      	strb	r2, [r3, #0]
 80107d6:	e008      	b.n	80107ea <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80107d8:	78fb      	ldrb	r3, [r7, #3]
 80107da:	68fa      	ldr	r2, [r7, #12]
 80107dc:	212c      	movs	r1, #44	; 0x2c
 80107de:	fb01 f303 	mul.w	r3, r1, r3
 80107e2:	4413      	add	r3, r2
 80107e4:	3355      	adds	r3, #85	; 0x55
 80107e6:	78ba      	ldrb	r2, [r7, #2]
 80107e8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80107ea:	2300      	movs	r3, #0
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	3714      	adds	r7, #20
 80107f0:	46bd      	mov	sp, r7
 80107f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f6:	4770      	bx	lr

080107f8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b082      	sub	sp, #8
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f7f3 fcef 	bl	80041e4 <HAL_Delay>
}
 8010806:	bf00      	nop
 8010808:	3708      	adds	r7, #8
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}
	...

08010810 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010810:	b480      	push	{r7}
 8010812:	b085      	sub	sp, #20
 8010814:	af00      	add	r7, sp, #0
 8010816:	4603      	mov	r3, r0
 8010818:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801081a:	2300      	movs	r3, #0
 801081c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801081e:	79fb      	ldrb	r3, [r7, #7]
 8010820:	2b03      	cmp	r3, #3
 8010822:	d817      	bhi.n	8010854 <USBH_Get_USB_Status+0x44>
 8010824:	a201      	add	r2, pc, #4	; (adr r2, 801082c <USBH_Get_USB_Status+0x1c>)
 8010826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801082a:	bf00      	nop
 801082c:	0801083d 	.word	0x0801083d
 8010830:	08010843 	.word	0x08010843
 8010834:	08010849 	.word	0x08010849
 8010838:	0801084f 	.word	0x0801084f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801083c:	2300      	movs	r3, #0
 801083e:	73fb      	strb	r3, [r7, #15]
    break;
 8010840:	e00b      	b.n	801085a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010842:	2302      	movs	r3, #2
 8010844:	73fb      	strb	r3, [r7, #15]
    break;
 8010846:	e008      	b.n	801085a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010848:	2301      	movs	r3, #1
 801084a:	73fb      	strb	r3, [r7, #15]
    break;
 801084c:	e005      	b.n	801085a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801084e:	2302      	movs	r3, #2
 8010850:	73fb      	strb	r3, [r7, #15]
    break;
 8010852:	e002      	b.n	801085a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010854:	2302      	movs	r3, #2
 8010856:	73fb      	strb	r3, [r7, #15]
    break;
 8010858:	bf00      	nop
  }
  return usb_status;
 801085a:	7bfb      	ldrb	r3, [r7, #15]
}
 801085c:	4618      	mov	r0, r3
 801085e:	3714      	adds	r7, #20
 8010860:	46bd      	mov	sp, r7
 8010862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010866:	4770      	bx	lr

08010868 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b084      	sub	sp, #16
 801086c:	af00      	add	r7, sp, #0
 801086e:	4603      	mov	r3, r0
 8010870:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010872:	79fb      	ldrb	r3, [r7, #7]
 8010874:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010876:	79fb      	ldrb	r3, [r7, #7]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d102      	bne.n	8010882 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 801087c:	2301      	movs	r3, #1
 801087e:	73fb      	strb	r3, [r7, #15]
 8010880:	e001      	b.n	8010886 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8010882:	2300      	movs	r3, #0
 8010884:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8010886:	7bfb      	ldrb	r3, [r7, #15]
 8010888:	461a      	mov	r2, r3
 801088a:	2120      	movs	r1, #32
 801088c:	4803      	ldr	r0, [pc, #12]	; (801089c <MX_DriverVbusFS+0x34>)
 801088e:	f7f4 fd7b 	bl	8005388 <HAL_GPIO_WritePin>
}
 8010892:	bf00      	nop
 8010894:	3710      	adds	r7, #16
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}
 801089a:	bf00      	nop
 801089c:	40020c00 	.word	0x40020c00

080108a0 <chatbot_configure_activations>:


AI_DECLARE_STATIC
ai_bool chatbot_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 80108a0:	b480      	push	{r7}
 80108a2:	b085      	sub	sp, #20
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	691b      	ldr	r3, [r3, #16]
 80108ae:	3303      	adds	r3, #3
 80108b0:	f023 0303 	bic.w	r3, r3, #3
 80108b4:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 80108b6:	4b1c      	ldr	r3, [pc, #112]	; (8010928 <chatbot_configure_activations+0x88>)
 80108b8:	2200      	movs	r2, #0
 80108ba:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 80108bc:	4b1a      	ldr	r3, [pc, #104]	; (8010928 <chatbot_configure_activations+0x88>)
 80108be:	2200      	movs	r2, #0
 80108c0:	60da      	str	r2, [r3, #12]
    dense_output_array.data = AI_PTR(activations + 0);
 80108c2:	4a1a      	ldr	r2, [pc, #104]	; (801092c <chatbot_configure_activations+0x8c>)
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(activations + 0);
 80108c8:	4a18      	ldr	r2, [pc, #96]	; (801092c <chatbot_configure_activations+0x8c>)
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	60d3      	str	r3, [r2, #12]
    dense_nl_output_array.data = AI_PTR(activations + 0);
 80108ce:	4a18      	ldr	r2, [pc, #96]	; (8010930 <chatbot_configure_activations+0x90>)
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	6093      	str	r3, [r2, #8]
    dense_nl_output_array.data_start = AI_PTR(activations + 0);
 80108d4:	4a16      	ldr	r2, [pc, #88]	; (8010930 <chatbot_configure_activations+0x90>)
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 512);
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80108e0:	4a14      	ldr	r2, [pc, #80]	; (8010934 <chatbot_configure_activations+0x94>)
 80108e2:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 512);
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80108ea:	4a12      	ldr	r2, [pc, #72]	; (8010934 <chatbot_configure_activations+0x94>)
 80108ec:	60d3      	str	r3, [r2, #12]
    dense_1_nl_output_array.data = AI_PTR(activations + 0);
 80108ee:	4a12      	ldr	r2, [pc, #72]	; (8010938 <chatbot_configure_activations+0x98>)
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	6093      	str	r3, [r2, #8]
    dense_1_nl_output_array.data_start = AI_PTR(activations + 0);
 80108f4:	4a10      	ldr	r2, [pc, #64]	; (8010938 <chatbot_configure_activations+0x98>)
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 256);
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8010900:	4a0e      	ldr	r2, [pc, #56]	; (801093c <chatbot_configure_activations+0x9c>)
 8010902:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 256);
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801090a:	4a0c      	ldr	r2, [pc, #48]	; (801093c <chatbot_configure_activations+0x9c>)
 801090c:	60d3      	str	r3, [r2, #12]
    dense_2_nl_output_array.data = AI_PTR(NULL);
 801090e:	4b0c      	ldr	r3, [pc, #48]	; (8010940 <chatbot_configure_activations+0xa0>)
 8010910:	2200      	movs	r2, #0
 8010912:	609a      	str	r2, [r3, #8]
    dense_2_nl_output_array.data_start = AI_PTR(NULL);
 8010914:	4b0a      	ldr	r3, [pc, #40]	; (8010940 <chatbot_configure_activations+0xa0>)
 8010916:	2200      	movs	r2, #0
 8010918:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 801091a:	2301      	movs	r3, #1
}
 801091c:	4618      	mov	r0, r3
 801091e:	3714      	adds	r7, #20
 8010920:	46bd      	mov	sp, r7
 8010922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010926:	4770      	bx	lr
 8010928:	200000ec 	.word	0x200000ec
 801092c:	200000fc 	.word	0x200000fc
 8010930:	2000010c 	.word	0x2000010c
 8010934:	2000011c 	.word	0x2000011c
 8010938:	2000012c 	.word	0x2000012c
 801093c:	2000013c 	.word	0x2000013c
 8010940:	2000014c 	.word	0x2000014c

08010944 <chatbot_configure_weights>:


AI_DECLARE_STATIC
ai_bool chatbot_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8010944:	b480      	push	{r7}
 8010946:	b085      	sub	sp, #20
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	691b      	ldr	r3, [r3, #16]
 8010952:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8010954:	4b31      	ldr	r3, [pc, #196]	; (8010a1c <chatbot_configure_weights+0xd8>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801095c:	4a2f      	ldr	r2, [pc, #188]	; (8010a1c <chatbot_configure_weights+0xd8>)
 801095e:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 61184);
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	f503 436f 	add.w	r3, r3, #61184	; 0xef00
 8010966:	4a2d      	ldr	r2, [pc, #180]	; (8010a1c <chatbot_configure_weights+0xd8>)
 8010968:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 61184);
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	f503 436f 	add.w	r3, r3, #61184	; 0xef00
 8010970:	4a2a      	ldr	r2, [pc, #168]	; (8010a1c <chatbot_configure_weights+0xd8>)
 8010972:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8010974:	4b2a      	ldr	r3, [pc, #168]	; (8010a20 <chatbot_configure_weights+0xdc>)
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801097c:	4a28      	ldr	r2, [pc, #160]	; (8010a20 <chatbot_configure_weights+0xdc>)
 801097e:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 59648);
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	f503 4369 	add.w	r3, r3, #59648	; 0xe900
 8010986:	4a26      	ldr	r2, [pc, #152]	; (8010a20 <chatbot_configure_weights+0xdc>)
 8010988:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 59648);
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	f503 4369 	add.w	r3, r3, #59648	; 0xe900
 8010990:	4a23      	ldr	r2, [pc, #140]	; (8010a20 <chatbot_configure_weights+0xdc>)
 8010992:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8010994:	4b23      	ldr	r3, [pc, #140]	; (8010a24 <chatbot_configure_weights+0xe0>)
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801099c:	4a21      	ldr	r2, [pc, #132]	; (8010a24 <chatbot_configure_weights+0xe0>)
 801099e:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 59392);
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 80109a6:	4a1f      	ldr	r2, [pc, #124]	; (8010a24 <chatbot_configure_weights+0xe0>)
 80109a8:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 59392);
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 80109b0:	4a1c      	ldr	r2, [pc, #112]	; (8010a24 <chatbot_configure_weights+0xe0>)
 80109b2:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80109b4:	4b1c      	ldr	r3, [pc, #112]	; (8010a28 <chatbot_configure_weights+0xe4>)
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80109bc:	4a1a      	ldr	r2, [pc, #104]	; (8010a28 <chatbot_configure_weights+0xe4>)
 80109be:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 26624);
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	f503 43d0 	add.w	r3, r3, #26624	; 0x6800
 80109c6:	4a18      	ldr	r2, [pc, #96]	; (8010a28 <chatbot_configure_weights+0xe4>)
 80109c8:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 26624);
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	f503 43d0 	add.w	r3, r3, #26624	; 0x6800
 80109d0:	4a15      	ldr	r2, [pc, #84]	; (8010a28 <chatbot_configure_weights+0xe4>)
 80109d2:	60d3      	str	r3, [r2, #12]
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80109d4:	4b15      	ldr	r3, [pc, #84]	; (8010a2c <chatbot_configure_weights+0xe8>)
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80109dc:	4a13      	ldr	r2, [pc, #76]	; (8010a2c <chatbot_configure_weights+0xe8>)
 80109de:	6013      	str	r3, [r2, #0]
    dense_bias_array.data = AI_PTR(weights + 26112);
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	f503 43cc 	add.w	r3, r3, #26112	; 0x6600
 80109e6:	4a11      	ldr	r2, [pc, #68]	; (8010a2c <chatbot_configure_weights+0xe8>)
 80109e8:	6093      	str	r3, [r2, #8]
    dense_bias_array.data_start = AI_PTR(weights + 26112);
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	f503 43cc 	add.w	r3, r3, #26112	; 0x6600
 80109f0:	4a0e      	ldr	r2, [pc, #56]	; (8010a2c <chatbot_configure_weights+0xe8>)
 80109f2:	60d3      	str	r3, [r2, #12]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80109f4:	4b0e      	ldr	r3, [pc, #56]	; (8010a30 <chatbot_configure_weights+0xec>)
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80109fc:	4a0c      	ldr	r2, [pc, #48]	; (8010a30 <chatbot_configure_weights+0xec>)
 80109fe:	6013      	str	r3, [r2, #0]
    dense_weights_array.data = AI_PTR(weights + 0);
 8010a00:	4a0b      	ldr	r2, [pc, #44]	; (8010a30 <chatbot_configure_weights+0xec>)
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	6093      	str	r3, [r2, #8]
    dense_weights_array.data_start = AI_PTR(weights + 0);
 8010a06:	4a0a      	ldr	r2, [pc, #40]	; (8010a30 <chatbot_configure_weights+0xec>)
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8010a0c:	2301      	movs	r3, #1
}
 8010a0e:	4618      	mov	r0, r3
 8010a10:	3714      	adds	r7, #20
 8010a12:	46bd      	mov	sp, r7
 8010a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a18:	4770      	bx	lr
 8010a1a:	bf00      	nop
 8010a1c:	2000008c 	.word	0x2000008c
 8010a20:	2000009c 	.word	0x2000009c
 8010a24:	200000ac 	.word	0x200000ac
 8010a28:	200000bc 	.word	0x200000bc
 8010a2c:	200000cc 	.word	0x200000cc
 8010a30:	200000dc 	.word	0x200000dc

08010a34 <ai_chatbot_create>:
}

AI_API_ENTRY
ai_error ai_chatbot_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b084      	sub	sp, #16
 8010a38:	af02      	add	r7, sp, #8
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8010a3e:	2300      	movs	r3, #0
 8010a40:	9301      	str	r3, [sp, #4]
 8010a42:	2303      	movs	r3, #3
 8010a44:	9300      	str	r3, [sp, #0]
 8010a46:	2301      	movs	r3, #1
 8010a48:	4a04      	ldr	r2, [pc, #16]	; (8010a5c <ai_chatbot_create+0x28>)
 8010a4a:	6839      	ldr	r1, [r7, #0]
 8010a4c:	6878      	ldr	r0, [r7, #4]
 8010a4e:	f000 f861 	bl	8010b14 <ai_platform_network_create>
 8010a52:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8010a54:	4618      	mov	r0, r3
 8010a56:	3708      	adds	r7, #8
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}
 8010a5c:	2000002c 	.word	0x2000002c

08010a60 <ai_chatbot_init>:
}

AI_API_ENTRY
ai_bool ai_chatbot_init(
  ai_handle network, const ai_network_params* params)
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b084      	sub	sp, #16
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
 8010a68:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8010a6a:	6839      	ldr	r1, [r7, #0]
 8010a6c:	6878      	ldr	r0, [r7, #4]
 8010a6e:	f000 f8d5 	bl	8010c1c <ai_platform_network_init>
 8010a72:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d101      	bne.n	8010a7e <ai_chatbot_init+0x1e>
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	e02b      	b.n	8010ad6 <ai_chatbot_init+0x76>

  ai_bool ok = true;
 8010a7e:	2301      	movs	r3, #1
 8010a80:	72fb      	strb	r3, [r7, #11]
  ok &= chatbot_configure_weights(net_ctx, &params->params);
 8010a82:	683b      	ldr	r3, [r7, #0]
 8010a84:	4619      	mov	r1, r3
 8010a86:	68f8      	ldr	r0, [r7, #12]
 8010a88:	f7ff ff5c 	bl	8010944 <chatbot_configure_weights>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	461a      	mov	r2, r3
 8010a90:	7afb      	ldrb	r3, [r7, #11]
 8010a92:	4013      	ands	r3, r2
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	bf14      	ite	ne
 8010a98:	2301      	movne	r3, #1
 8010a9a:	2300      	moveq	r3, #0
 8010a9c:	72fb      	strb	r3, [r7, #11]
  ok &= chatbot_configure_activations(net_ctx, &params->activations);
 8010a9e:	683b      	ldr	r3, [r7, #0]
 8010aa0:	3318      	adds	r3, #24
 8010aa2:	4619      	mov	r1, r3
 8010aa4:	68f8      	ldr	r0, [r7, #12]
 8010aa6:	f7ff fefb 	bl	80108a0 <chatbot_configure_activations>
 8010aaa:	4603      	mov	r3, r0
 8010aac:	461a      	mov	r2, r3
 8010aae:	7afb      	ldrb	r3, [r7, #11]
 8010ab0:	4013      	ands	r3, r2
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	bf14      	ite	ne
 8010ab6:	2301      	movne	r3, #1
 8010ab8:	2300      	moveq	r3, #0
 8010aba:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8010abc:	6878      	ldr	r0, [r7, #4]
 8010abe:	f000 f995 	bl	8010dec <ai_platform_network_post_init>
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	461a      	mov	r2, r3
 8010ac6:	7afb      	ldrb	r3, [r7, #11]
 8010ac8:	4013      	ands	r3, r2
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	bf14      	ite	ne
 8010ace:	2301      	movne	r3, #1
 8010ad0:	2300      	moveq	r3, #0
 8010ad2:	72fb      	strb	r3, [r7, #11]

  return ok;
 8010ad4:	7afb      	ldrb	r3, [r7, #11]
}
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	3710      	adds	r7, #16
 8010ada:	46bd      	mov	sp, r7
 8010adc:	bd80      	pop	{r7, pc}

08010ade <ai_chatbot_run>:


AI_API_ENTRY
ai_i32 ai_chatbot_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8010ade:	b580      	push	{r7, lr}
 8010ae0:	b084      	sub	sp, #16
 8010ae2:	af00      	add	r7, sp, #0
 8010ae4:	60f8      	str	r0, [r7, #12]
 8010ae6:	60b9      	str	r1, [r7, #8]
 8010ae8:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8010aea:	687a      	ldr	r2, [r7, #4]
 8010aec:	68b9      	ldr	r1, [r7, #8]
 8010aee:	68f8      	ldr	r0, [r7, #12]
 8010af0:	f000 fa28 	bl	8010f44 <ai_platform_network_process>
 8010af4:	4603      	mov	r3, r0
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	3710      	adds	r7, #16
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}
	...

08010b00 <ai_chatbot_data_weights_get>:
#include "chatbot_data.h"

ai_handle ai_chatbot_data_weights_get(void)
{
 8010b00:	b480      	push	{r7}
 8010b02:	af00      	add	r7, sp, #0
    0xaa, 0xbc, 0x80, 0x3d, 0x8f, 0x8a, 0x3b, 0xbe, 0x18, 0x13,
    0x34, 0xbe, 0x81, 0xa7, 0x22, 0x3e, 0xfc, 0x82, 0x23,
    0x3e, 0xb1, 0x8a, 0x44, 0x3e, 0x71, 0xc0, 0x0b, 0xbe
  };

  return AI_HANDLE_PTR(s_chatbot_weights);
 8010b04:	4b02      	ldr	r3, [pc, #8]	; (8010b10 <ai_chatbot_data_weights_get+0x10>)

}
 8010b06:	4618      	mov	r0, r3
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0e:	4770      	bx	lr
 8010b10:	080160f8 	.word	0x080160f8

08010b14 <ai_platform_network_create>:
 8010b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b16:	4d36      	ldr	r5, [pc, #216]	; (8010bf0 <ai_platform_network_create+0xdc>)
 8010b18:	b083      	sub	sp, #12
 8010b1a:	4e36      	ldr	r6, [pc, #216]	; (8010bf4 <ai_platform_network_create+0xe0>)
 8010b1c:	6829      	ldr	r1, [r5, #0]
 8010b1e:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8010b22:	f021 0101 	bic.w	r1, r1, #1
 8010b26:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8010b2a:	6029      	str	r1, [r5, #0]
 8010b2c:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 8010b30:	6831      	ldr	r1, [r6, #0]
 8010b32:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8010b36:	194d      	adds	r5, r1, r5
 8010b38:	2d01      	cmp	r5, #1
 8010b3a:	d92f      	bls.n	8010b9c <ai_platform_network_create+0x88>
 8010b3c:	f240 4549 	movw	r5, #1097	; 0x449
 8010b40:	42a9      	cmp	r1, r5
 8010b42:	d02b      	beq.n	8010b9c <ai_platform_network_create+0x88>
 8010b44:	492c      	ldr	r1, [pc, #176]	; (8010bf8 <ai_platform_network_create+0xe4>)
 8010b46:	6809      	ldr	r1, [r1, #0]
 8010b48:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8010b4c:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8010b50:	d015      	beq.n	8010b7e <ai_platform_network_create+0x6a>
 8010b52:	2800      	cmp	r0, #0
 8010b54:	d031      	beq.n	8010bba <ai_platform_network_create+0xa6>
 8010b56:	461e      	mov	r6, r3
 8010b58:	4613      	mov	r3, r2
 8010b5a:	4a28      	ldr	r2, [pc, #160]	; (8010bfc <ai_platform_network_create+0xe8>)
 8010b5c:	4605      	mov	r5, r0
 8010b5e:	601a      	str	r2, [r3, #0]
 8010b60:	6003      	str	r3, [r0, #0]
 8010b62:	f000 fc9f 	bl	80114a4 <core_init>
 8010b66:	2800      	cmp	r0, #0
 8010b68:	d02b      	beq.n	8010bc2 <ai_platform_network_create+0xae>
 8010b6a:	0223      	lsls	r3, r4, #8
 8010b6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010b70:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8010b74:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8010b78:	d92e      	bls.n	8010bd8 <ai_platform_network_create+0xc4>
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	e022      	b.n	8010bc4 <ai_platform_network_create+0xb0>
 8010b7e:	4920      	ldr	r1, [pc, #128]	; (8010c00 <ai_platform_network_create+0xec>)
 8010b80:	2501      	movs	r5, #1
 8010b82:	460e      	mov	r6, r1
 8010b84:	600d      	str	r5, [r1, #0]
 8010b86:	6831      	ldr	r1, [r6, #0]
 8010b88:	2900      	cmp	r1, #0
 8010b8a:	d1fc      	bne.n	8010b86 <ai_platform_network_create+0x72>
 8010b8c:	491d      	ldr	r1, [pc, #116]	; (8010c04 <ai_platform_network_create+0xf0>)
 8010b8e:	4e1e      	ldr	r6, [pc, #120]	; (8010c08 <ai_platform_network_create+0xf4>)
 8010b90:	4d1e      	ldr	r5, [pc, #120]	; (8010c0c <ai_platform_network_create+0xf8>)
 8010b92:	600e      	str	r6, [r1, #0]
 8010b94:	6809      	ldr	r1, [r1, #0]
 8010b96:	42a9      	cmp	r1, r5
 8010b98:	d0db      	beq.n	8010b52 <ai_platform_network_create+0x3e>
 8010b9a:	e7fe      	b.n	8010b9a <ai_platform_network_create+0x86>
 8010b9c:	491c      	ldr	r1, [pc, #112]	; (8010c10 <ai_platform_network_create+0xfc>)
 8010b9e:	2501      	movs	r5, #1
 8010ba0:	460e      	mov	r6, r1
 8010ba2:	600d      	str	r5, [r1, #0]
 8010ba4:	6831      	ldr	r1, [r6, #0]
 8010ba6:	2900      	cmp	r1, #0
 8010ba8:	d1fc      	bne.n	8010ba4 <ai_platform_network_create+0x90>
 8010baa:	491a      	ldr	r1, [pc, #104]	; (8010c14 <ai_platform_network_create+0x100>)
 8010bac:	4e16      	ldr	r6, [pc, #88]	; (8010c08 <ai_platform_network_create+0xf4>)
 8010bae:	4d17      	ldr	r5, [pc, #92]	; (8010c0c <ai_platform_network_create+0xf8>)
 8010bb0:	600e      	str	r6, [r1, #0]
 8010bb2:	6809      	ldr	r1, [r1, #0]
 8010bb4:	42a9      	cmp	r1, r5
 8010bb6:	d0cc      	beq.n	8010b52 <ai_platform_network_create+0x3e>
 8010bb8:	e7fe      	b.n	8010bb8 <ai_platform_network_create+0xa4>
 8010bba:	f241 0010 	movw	r0, #4112	; 0x1010
 8010bbe:	b003      	add	sp, #12
 8010bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bc2:	2330      	movs	r3, #48	; 0x30
 8010bc4:	2100      	movs	r1, #0
 8010bc6:	2210      	movs	r2, #16
 8010bc8:	6029      	str	r1, [r5, #0]
 8010bca:	2000      	movs	r0, #0
 8010bcc:	f363 0007 	bfi	r0, r3, #0, #8
 8010bd0:	f362 201f 	bfi	r0, r2, #8, #24
 8010bd4:	b003      	add	sp, #12
 8010bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bd8:	4b0f      	ldr	r3, [pc, #60]	; (8010c18 <ai_platform_network_create+0x104>)
 8010bda:	a802      	add	r0, sp, #8
 8010bdc:	f840 3d04 	str.w	r3, [r0, #-4]!
 8010be0:	f001 fb14 	bl	801220c <ai_check_custom_types>
 8010be4:	b110      	cbz	r0, 8010bec <ai_platform_network_create+0xd8>
 8010be6:	2200      	movs	r2, #0
 8010be8:	4613      	mov	r3, r2
 8010bea:	e7ee      	b.n	8010bca <ai_platform_network_create+0xb6>
 8010bec:	2302      	movs	r3, #2
 8010bee:	e7e9      	b.n	8010bc4 <ai_platform_network_create+0xb0>
 8010bf0:	e0002000 	.word	0xe0002000
 8010bf4:	e0042000 	.word	0xe0042000
 8010bf8:	5c001000 	.word	0x5c001000
 8010bfc:	a1c00100 	.word	0xa1c00100
 8010c00:	58024c08 	.word	0x58024c08
 8010c04:	58024c00 	.word	0x58024c00
 8010c08:	f407a5c2 	.word	0xf407a5c2
 8010c0c:	b5e8b5cd 	.word	0xb5e8b5cd
 8010c10:	40023008 	.word	0x40023008
 8010c14:	40023000 	.word	0x40023000
 8010c18:	84048403 	.word	0x84048403

08010c1c <ai_platform_network_init>:
 8010c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c1e:	2800      	cmp	r0, #0
 8010c20:	d05e      	beq.n	8010ce0 <ai_platform_network_init+0xc4>
 8010c22:	4b68      	ldr	r3, [pc, #416]	; (8010dc4 <ai_platform_network_init+0x1a8>)
 8010c24:	6802      	ldr	r2, [r0, #0]
 8010c26:	429a      	cmp	r2, r3
 8010c28:	d15a      	bne.n	8010ce0 <ai_platform_network_init+0xc4>
 8010c2a:	4a67      	ldr	r2, [pc, #412]	; (8010dc8 <ai_platform_network_init+0x1ac>)
 8010c2c:	4c67      	ldr	r4, [pc, #412]	; (8010dcc <ai_platform_network_init+0x1b0>)
 8010c2e:	6813      	ldr	r3, [r2, #0]
 8010c30:	f023 0301 	bic.w	r3, r3, #1
 8010c34:	6013      	str	r3, [r2, #0]
 8010c36:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8010c3a:	6823      	ldr	r3, [r4, #0]
 8010c3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010c40:	189a      	adds	r2, r3, r2
 8010c42:	2a01      	cmp	r2, #1
 8010c44:	d93d      	bls.n	8010cc2 <ai_platform_network_init+0xa6>
 8010c46:	f240 4249 	movw	r2, #1097	; 0x449
 8010c4a:	4293      	cmp	r3, r2
 8010c4c:	d039      	beq.n	8010cc2 <ai_platform_network_init+0xa6>
 8010c4e:	4b60      	ldr	r3, [pc, #384]	; (8010dd0 <ai_platform_network_init+0x1b4>)
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010c56:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010c5a:	d06b      	beq.n	8010d34 <ai_platform_network_init+0x118>
 8010c5c:	4605      	mov	r5, r0
 8010c5e:	460c      	mov	r4, r1
 8010c60:	2900      	cmp	r1, #0
 8010c62:	f000 80a8 	beq.w	8010db6 <ai_platform_network_init+0x19a>
 8010c66:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 8010c68:	690e      	ldr	r6, [r1, #16]
 8010c6a:	2f00      	cmp	r7, #0
 8010c6c:	f000 8092 	beq.w	8010d94 <ai_platform_network_init+0x178>
 8010c70:	2e00      	cmp	r6, #0
 8010c72:	d07d      	beq.n	8010d70 <ai_platform_network_init+0x154>
 8010c74:	f104 0718 	add.w	r7, r4, #24
 8010c78:	f105 0c18 	add.w	ip, r5, #24
 8010c7c:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8010c80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010c82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010c86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010c8a:	2403      	movs	r4, #3
 8010c8c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010c90:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010c92:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010c94:	e897 0003 	ldmia.w	r7, {r0, r1}
 8010c98:	e886 0003 	stmia.w	r6, {r0, r1}
 8010c9c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8010c9e:	60ec      	str	r4, [r5, #12]
 8010ca0:	b16a      	cbz	r2, 8010cbe <ai_platform_network_init+0xa2>
 8010ca2:	68d3      	ldr	r3, [r2, #12]
 8010ca4:	6095      	str	r5, [r2, #8]
 8010ca6:	b153      	cbz	r3, 8010cbe <ai_platform_network_init+0xa2>
 8010ca8:	429a      	cmp	r2, r3
 8010caa:	d104      	bne.n	8010cb6 <ai_platform_network_init+0x9a>
 8010cac:	e007      	b.n	8010cbe <ai_platform_network_init+0xa2>
 8010cae:	429a      	cmp	r2, r3
 8010cb0:	4613      	mov	r3, r2
 8010cb2:	d004      	beq.n	8010cbe <ai_platform_network_init+0xa2>
 8010cb4:	b11a      	cbz	r2, 8010cbe <ai_platform_network_init+0xa2>
 8010cb6:	68da      	ldr	r2, [r3, #12]
 8010cb8:	609d      	str	r5, [r3, #8]
 8010cba:	2a00      	cmp	r2, #0
 8010cbc:	d1f7      	bne.n	8010cae <ai_platform_network_init+0x92>
 8010cbe:	4628      	mov	r0, r5
 8010cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cc2:	4b44      	ldr	r3, [pc, #272]	; (8010dd4 <ai_platform_network_init+0x1b8>)
 8010cc4:	2201      	movs	r2, #1
 8010cc6:	461c      	mov	r4, r3
 8010cc8:	601a      	str	r2, [r3, #0]
 8010cca:	6823      	ldr	r3, [r4, #0]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d1fc      	bne.n	8010cca <ai_platform_network_init+0xae>
 8010cd0:	4b41      	ldr	r3, [pc, #260]	; (8010dd8 <ai_platform_network_init+0x1bc>)
 8010cd2:	4c42      	ldr	r4, [pc, #264]	; (8010ddc <ai_platform_network_init+0x1c0>)
 8010cd4:	4a42      	ldr	r2, [pc, #264]	; (8010de0 <ai_platform_network_init+0x1c4>)
 8010cd6:	601c      	str	r4, [r3, #0]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	4293      	cmp	r3, r2
 8010cdc:	d0be      	beq.n	8010c5c <ai_platform_network_init+0x40>
 8010cde:	e7fe      	b.n	8010cde <ai_platform_network_init+0xc2>
 8010ce0:	4a39      	ldr	r2, [pc, #228]	; (8010dc8 <ai_platform_network_init+0x1ac>)
 8010ce2:	493a      	ldr	r1, [pc, #232]	; (8010dcc <ai_platform_network_init+0x1b0>)
 8010ce4:	6813      	ldr	r3, [r2, #0]
 8010ce6:	f023 0301 	bic.w	r3, r3, #1
 8010cea:	6013      	str	r3, [r2, #0]
 8010cec:	680b      	ldr	r3, [r1, #0]
 8010cee:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8010cf2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010cf6:	185a      	adds	r2, r3, r1
 8010cf8:	2a01      	cmp	r2, #1
 8010cfa:	d90c      	bls.n	8010d16 <ai_platform_network_init+0xfa>
 8010cfc:	f240 4249 	movw	r2, #1097	; 0x449
 8010d00:	4293      	cmp	r3, r2
 8010d02:	d008      	beq.n	8010d16 <ai_platform_network_init+0xfa>
 8010d04:	4b32      	ldr	r3, [pc, #200]	; (8010dd0 <ai_platform_network_init+0x1b4>)
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010d0c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010d10:	d01f      	beq.n	8010d52 <ai_platform_network_init+0x136>
 8010d12:	2000      	movs	r0, #0
 8010d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d16:	4b2f      	ldr	r3, [pc, #188]	; (8010dd4 <ai_platform_network_init+0x1b8>)
 8010d18:	2201      	movs	r2, #1
 8010d1a:	4619      	mov	r1, r3
 8010d1c:	601a      	str	r2, [r3, #0]
 8010d1e:	680b      	ldr	r3, [r1, #0]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d1fc      	bne.n	8010d1e <ai_platform_network_init+0x102>
 8010d24:	4b2c      	ldr	r3, [pc, #176]	; (8010dd8 <ai_platform_network_init+0x1bc>)
 8010d26:	492d      	ldr	r1, [pc, #180]	; (8010ddc <ai_platform_network_init+0x1c0>)
 8010d28:	4a2d      	ldr	r2, [pc, #180]	; (8010de0 <ai_platform_network_init+0x1c4>)
 8010d2a:	6019      	str	r1, [r3, #0]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	4293      	cmp	r3, r2
 8010d30:	d0ef      	beq.n	8010d12 <ai_platform_network_init+0xf6>
 8010d32:	e7fe      	b.n	8010d32 <ai_platform_network_init+0x116>
 8010d34:	4b2b      	ldr	r3, [pc, #172]	; (8010de4 <ai_platform_network_init+0x1c8>)
 8010d36:	2201      	movs	r2, #1
 8010d38:	461c      	mov	r4, r3
 8010d3a:	601a      	str	r2, [r3, #0]
 8010d3c:	6823      	ldr	r3, [r4, #0]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d1fc      	bne.n	8010d3c <ai_platform_network_init+0x120>
 8010d42:	4b29      	ldr	r3, [pc, #164]	; (8010de8 <ai_platform_network_init+0x1cc>)
 8010d44:	4c25      	ldr	r4, [pc, #148]	; (8010ddc <ai_platform_network_init+0x1c0>)
 8010d46:	4a26      	ldr	r2, [pc, #152]	; (8010de0 <ai_platform_network_init+0x1c4>)
 8010d48:	601c      	str	r4, [r3, #0]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	4293      	cmp	r3, r2
 8010d4e:	d085      	beq.n	8010c5c <ai_platform_network_init+0x40>
 8010d50:	e7fe      	b.n	8010d50 <ai_platform_network_init+0x134>
 8010d52:	4b24      	ldr	r3, [pc, #144]	; (8010de4 <ai_platform_network_init+0x1c8>)
 8010d54:	2201      	movs	r2, #1
 8010d56:	4619      	mov	r1, r3
 8010d58:	601a      	str	r2, [r3, #0]
 8010d5a:	680b      	ldr	r3, [r1, #0]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d1fc      	bne.n	8010d5a <ai_platform_network_init+0x13e>
 8010d60:	4b21      	ldr	r3, [pc, #132]	; (8010de8 <ai_platform_network_init+0x1cc>)
 8010d62:	491e      	ldr	r1, [pc, #120]	; (8010ddc <ai_platform_network_init+0x1c0>)
 8010d64:	4a1e      	ldr	r2, [pc, #120]	; (8010de0 <ai_platform_network_init+0x1c4>)
 8010d66:	6019      	str	r1, [r3, #0]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	4293      	cmp	r3, r2
 8010d6c:	d0d1      	beq.n	8010d12 <ai_platform_network_init+0xf6>
 8010d6e:	e7fe      	b.n	8010d6e <ai_platform_network_init+0x152>
 8010d70:	8921      	ldrh	r1, [r4, #8]
 8010d72:	88e2      	ldrh	r2, [r4, #6]
 8010d74:	68e3      	ldr	r3, [r4, #12]
 8010d76:	fb02 f201 	mul.w	r2, r2, r1
 8010d7a:	fb03 f302 	mul.w	r3, r3, r2
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	f43f af78 	beq.w	8010c74 <ai_platform_network_init+0x58>
 8010d84:	f105 0010 	add.w	r0, r5, #16
 8010d88:	2212      	movs	r2, #18
 8010d8a:	2110      	movs	r1, #16
 8010d8c:	f000 fb8c 	bl	80114a8 <core_set_error>
 8010d90:	4630      	mov	r0, r6
 8010d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d94:	8c09      	ldrh	r1, [r1, #32]
 8010d96:	8be2      	ldrh	r2, [r4, #30]
 8010d98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d9a:	fb02 f201 	mul.w	r2, r2, r1
 8010d9e:	fb03 f302 	mul.w	r3, r3, r2
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	f43f af64 	beq.w	8010c70 <ai_platform_network_init+0x54>
 8010da8:	2213      	movs	r2, #19
 8010daa:	2110      	movs	r1, #16
 8010dac:	3010      	adds	r0, #16
 8010dae:	f000 fb7b 	bl	80114a8 <core_set_error>
 8010db2:	4638      	mov	r0, r7
 8010db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010db6:	2211      	movs	r2, #17
 8010db8:	2110      	movs	r1, #16
 8010dba:	3010      	adds	r0, #16
 8010dbc:	f000 fb74 	bl	80114a8 <core_set_error>
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010dc4:	a1c00100 	.word	0xa1c00100
 8010dc8:	e0002000 	.word	0xe0002000
 8010dcc:	e0042000 	.word	0xe0042000
 8010dd0:	5c001000 	.word	0x5c001000
 8010dd4:	40023008 	.word	0x40023008
 8010dd8:	40023000 	.word	0x40023000
 8010ddc:	f407a5c2 	.word	0xf407a5c2
 8010de0:	b5e8b5cd 	.word	0xb5e8b5cd
 8010de4:	58024c08 	.word	0x58024c08
 8010de8:	58024c00 	.word	0x58024c00

08010dec <ai_platform_network_post_init>:
 8010dec:	b538      	push	{r3, r4, r5, lr}
 8010dee:	b118      	cbz	r0, 8010df8 <ai_platform_network_post_init+0xc>
 8010df0:	4b4a      	ldr	r3, [pc, #296]	; (8010f1c <ai_platform_network_post_init+0x130>)
 8010df2:	6802      	ldr	r2, [r0, #0]
 8010df4:	429a      	cmp	r2, r3
 8010df6:	d029      	beq.n	8010e4c <ai_platform_network_post_init+0x60>
 8010df8:	4a49      	ldr	r2, [pc, #292]	; (8010f20 <ai_platform_network_post_init+0x134>)
 8010dfa:	494a      	ldr	r1, [pc, #296]	; (8010f24 <ai_platform_network_post_init+0x138>)
 8010dfc:	6813      	ldr	r3, [r2, #0]
 8010dfe:	f023 0301 	bic.w	r3, r3, #1
 8010e02:	6013      	str	r3, [r2, #0]
 8010e04:	680b      	ldr	r3, [r1, #0]
 8010e06:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8010e0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010e0e:	185a      	adds	r2, r3, r1
 8010e10:	2a01      	cmp	r2, #1
 8010e12:	d90c      	bls.n	8010e2e <ai_platform_network_post_init+0x42>
 8010e14:	f240 4249 	movw	r2, #1097	; 0x449
 8010e18:	4293      	cmp	r3, r2
 8010e1a:	d008      	beq.n	8010e2e <ai_platform_network_post_init+0x42>
 8010e1c:	4b42      	ldr	r3, [pc, #264]	; (8010f28 <ai_platform_network_post_init+0x13c>)
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010e24:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010e28:	d044      	beq.n	8010eb4 <ai_platform_network_post_init+0xc8>
 8010e2a:	2000      	movs	r0, #0
 8010e2c:	bd38      	pop	{r3, r4, r5, pc}
 8010e2e:	4b3f      	ldr	r3, [pc, #252]	; (8010f2c <ai_platform_network_post_init+0x140>)
 8010e30:	2201      	movs	r2, #1
 8010e32:	4619      	mov	r1, r3
 8010e34:	601a      	str	r2, [r3, #0]
 8010e36:	680b      	ldr	r3, [r1, #0]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d1fc      	bne.n	8010e36 <ai_platform_network_post_init+0x4a>
 8010e3c:	4b3c      	ldr	r3, [pc, #240]	; (8010f30 <ai_platform_network_post_init+0x144>)
 8010e3e:	493d      	ldr	r1, [pc, #244]	; (8010f34 <ai_platform_network_post_init+0x148>)
 8010e40:	4a3d      	ldr	r2, [pc, #244]	; (8010f38 <ai_platform_network_post_init+0x14c>)
 8010e42:	6019      	str	r1, [r3, #0]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	4293      	cmp	r3, r2
 8010e48:	d0ef      	beq.n	8010e2a <ai_platform_network_post_init+0x3e>
 8010e4a:	e7fe      	b.n	8010e4a <ai_platform_network_post_init+0x5e>
 8010e4c:	4a34      	ldr	r2, [pc, #208]	; (8010f20 <ai_platform_network_post_init+0x134>)
 8010e4e:	4935      	ldr	r1, [pc, #212]	; (8010f24 <ai_platform_network_post_init+0x138>)
 8010e50:	6813      	ldr	r3, [r2, #0]
 8010e52:	f023 0301 	bic.w	r3, r3, #1
 8010e56:	6013      	str	r3, [r2, #0]
 8010e58:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8010e5c:	680b      	ldr	r3, [r1, #0]
 8010e5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010e62:	189a      	adds	r2, r3, r2
 8010e64:	2a01      	cmp	r2, #1
 8010e66:	d94a      	bls.n	8010efe <ai_platform_network_post_init+0x112>
 8010e68:	f240 4249 	movw	r2, #1097	; 0x449
 8010e6c:	4293      	cmp	r3, r2
 8010e6e:	d046      	beq.n	8010efe <ai_platform_network_post_init+0x112>
 8010e70:	4b2d      	ldr	r3, [pc, #180]	; (8010f28 <ai_platform_network_post_init+0x13c>)
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010e78:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010e7c:	d030      	beq.n	8010ee0 <ai_platform_network_post_init+0xf4>
 8010e7e:	68c3      	ldr	r3, [r0, #12]
 8010e80:	4604      	mov	r4, r0
 8010e82:	f013 0502 	ands.w	r5, r3, #2
 8010e86:	d024      	beq.n	8010ed2 <ai_platform_network_post_init+0xe6>
 8010e88:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8010e8a:	b18b      	cbz	r3, 8010eb0 <ai_platform_network_post_init+0xc4>
 8010e8c:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8010e8e:	b90d      	cbnz	r5, 8010e94 <ai_platform_network_post_init+0xa8>
 8010e90:	e00e      	b.n	8010eb0 <ai_platform_network_post_init+0xc4>
 8010e92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010e94:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8010e96:	4629      	mov	r1, r5
 8010e98:	2000      	movs	r0, #0
 8010e9a:	4798      	blx	r3
 8010e9c:	68ea      	ldr	r2, [r5, #12]
 8010e9e:	1b53      	subs	r3, r2, r5
 8010ea0:	4615      	mov	r5, r2
 8010ea2:	bf18      	it	ne
 8010ea4:	2301      	movne	r3, #1
 8010ea6:	2a00      	cmp	r2, #0
 8010ea8:	bf08      	it	eq
 8010eaa:	2300      	moveq	r3, #0
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d1f0      	bne.n	8010e92 <ai_platform_network_post_init+0xa6>
 8010eb0:	2001      	movs	r0, #1
 8010eb2:	bd38      	pop	{r3, r4, r5, pc}
 8010eb4:	4b21      	ldr	r3, [pc, #132]	; (8010f3c <ai_platform_network_post_init+0x150>)
 8010eb6:	2201      	movs	r2, #1
 8010eb8:	4619      	mov	r1, r3
 8010eba:	601a      	str	r2, [r3, #0]
 8010ebc:	680b      	ldr	r3, [r1, #0]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d1fc      	bne.n	8010ebc <ai_platform_network_post_init+0xd0>
 8010ec2:	4b1f      	ldr	r3, [pc, #124]	; (8010f40 <ai_platform_network_post_init+0x154>)
 8010ec4:	491b      	ldr	r1, [pc, #108]	; (8010f34 <ai_platform_network_post_init+0x148>)
 8010ec6:	4a1c      	ldr	r2, [pc, #112]	; (8010f38 <ai_platform_network_post_init+0x14c>)
 8010ec8:	6019      	str	r1, [r3, #0]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	4293      	cmp	r3, r2
 8010ece:	d0ac      	beq.n	8010e2a <ai_platform_network_post_init+0x3e>
 8010ed0:	e7fe      	b.n	8010ed0 <ai_platform_network_post_init+0xe4>
 8010ed2:	2210      	movs	r2, #16
 8010ed4:	2111      	movs	r1, #17
 8010ed6:	3010      	adds	r0, #16
 8010ed8:	f000 fae6 	bl	80114a8 <core_set_error>
 8010edc:	4628      	mov	r0, r5
 8010ede:	bd38      	pop	{r3, r4, r5, pc}
 8010ee0:	4b16      	ldr	r3, [pc, #88]	; (8010f3c <ai_platform_network_post_init+0x150>)
 8010ee2:	2201      	movs	r2, #1
 8010ee4:	4619      	mov	r1, r3
 8010ee6:	601a      	str	r2, [r3, #0]
 8010ee8:	680b      	ldr	r3, [r1, #0]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d1fc      	bne.n	8010ee8 <ai_platform_network_post_init+0xfc>
 8010eee:	4b14      	ldr	r3, [pc, #80]	; (8010f40 <ai_platform_network_post_init+0x154>)
 8010ef0:	4910      	ldr	r1, [pc, #64]	; (8010f34 <ai_platform_network_post_init+0x148>)
 8010ef2:	4a11      	ldr	r2, [pc, #68]	; (8010f38 <ai_platform_network_post_init+0x14c>)
 8010ef4:	6019      	str	r1, [r3, #0]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	4293      	cmp	r3, r2
 8010efa:	d0c0      	beq.n	8010e7e <ai_platform_network_post_init+0x92>
 8010efc:	e7fe      	b.n	8010efc <ai_platform_network_post_init+0x110>
 8010efe:	4b0b      	ldr	r3, [pc, #44]	; (8010f2c <ai_platform_network_post_init+0x140>)
 8010f00:	2201      	movs	r2, #1
 8010f02:	4619      	mov	r1, r3
 8010f04:	601a      	str	r2, [r3, #0]
 8010f06:	680b      	ldr	r3, [r1, #0]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d1fc      	bne.n	8010f06 <ai_platform_network_post_init+0x11a>
 8010f0c:	4b08      	ldr	r3, [pc, #32]	; (8010f30 <ai_platform_network_post_init+0x144>)
 8010f0e:	4909      	ldr	r1, [pc, #36]	; (8010f34 <ai_platform_network_post_init+0x148>)
 8010f10:	4a09      	ldr	r2, [pc, #36]	; (8010f38 <ai_platform_network_post_init+0x14c>)
 8010f12:	6019      	str	r1, [r3, #0]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	4293      	cmp	r3, r2
 8010f18:	d0b1      	beq.n	8010e7e <ai_platform_network_post_init+0x92>
 8010f1a:	e7fe      	b.n	8010f1a <ai_platform_network_post_init+0x12e>
 8010f1c:	a1c00100 	.word	0xa1c00100
 8010f20:	e0002000 	.word	0xe0002000
 8010f24:	e0042000 	.word	0xe0042000
 8010f28:	5c001000 	.word	0x5c001000
 8010f2c:	40023008 	.word	0x40023008
 8010f30:	40023000 	.word	0x40023000
 8010f34:	f407a5c2 	.word	0xf407a5c2
 8010f38:	b5e8b5cd 	.word	0xb5e8b5cd
 8010f3c:	58024c08 	.word	0x58024c08
 8010f40:	58024c00 	.word	0x58024c00

08010f44 <ai_platform_network_process>:
 8010f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f48:	4692      	mov	sl, r2
 8010f4a:	b083      	sub	sp, #12
 8010f4c:	4604      	mov	r4, r0
 8010f4e:	b120      	cbz	r0, 8010f5a <ai_platform_network_process+0x16>
 8010f50:	4b86      	ldr	r3, [pc, #536]	; (801116c <ai_platform_network_process+0x228>)
 8010f52:	6802      	ldr	r2, [r0, #0]
 8010f54:	429a      	cmp	r2, r3
 8010f56:	bf18      	it	ne
 8010f58:	2400      	movne	r4, #0
 8010f5a:	4a85      	ldr	r2, [pc, #532]	; (8011170 <ai_platform_network_process+0x22c>)
 8010f5c:	4885      	ldr	r0, [pc, #532]	; (8011174 <ai_platform_network_process+0x230>)
 8010f5e:	6813      	ldr	r3, [r2, #0]
 8010f60:	f023 0301 	bic.w	r3, r3, #1
 8010f64:	6013      	str	r3, [r2, #0]
 8010f66:	6803      	ldr	r3, [r0, #0]
 8010f68:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 8010f6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010f70:	181a      	adds	r2, r3, r0
 8010f72:	2a01      	cmp	r2, #1
 8010f74:	f240 80c6 	bls.w	8011104 <ai_platform_network_process+0x1c0>
 8010f78:	f240 4249 	movw	r2, #1097	; 0x449
 8010f7c:	4293      	cmp	r3, r2
 8010f7e:	f000 80c1 	beq.w	8011104 <ai_platform_network_process+0x1c0>
 8010f82:	4b7d      	ldr	r3, [pc, #500]	; (8011178 <ai_platform_network_process+0x234>)
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010f8a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010f8e:	f000 80a9 	beq.w	80110e4 <ai_platform_network_process+0x1a0>
 8010f92:	2c00      	cmp	r4, #0
 8010f94:	f000 80db 	beq.w	801114e <ai_platform_network_process+0x20a>
 8010f98:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8010f9c:	68e0      	ldr	r0, [r4, #12]
 8010f9e:	461a      	mov	r2, r3
 8010fa0:	f000 0003 	and.w	r0, r0, #3
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	f000 80bd 	beq.w	8011124 <ai_platform_network_process+0x1e0>
 8010faa:	2600      	movs	r6, #0
 8010fac:	2803      	cmp	r0, #3
 8010fae:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8010fb0:	6166      	str	r6, [r4, #20]
 8010fb2:	f040 80c6 	bne.w	8011142 <ai_platform_network_process+0x1fe>
 8010fb6:	2900      	cmp	r1, #0
 8010fb8:	f000 80b7 	beq.w	801112a <ai_platform_network_process+0x1e6>
 8010fbc:	fab5 f085 	clz	r0, r5
 8010fc0:	0940      	lsrs	r0, r0, #5
 8010fc2:	2800      	cmp	r0, #0
 8010fc4:	f040 80b1 	bne.w	801112a <ai_platform_network_process+0x1e6>
 8010fc8:	882e      	ldrh	r6, [r5, #0]
 8010fca:	2e00      	cmp	r6, #0
 8010fcc:	f000 80ad 	beq.w	801112a <ai_platform_network_process+0x1e6>
 8010fd0:	888f      	ldrh	r7, [r1, #4]
 8010fd2:	686e      	ldr	r6, [r5, #4]
 8010fd4:	9701      	str	r7, [sp, #4]
 8010fd6:	2e00      	cmp	r6, #0
 8010fd8:	f000 825f 	beq.w	801149a <ai_platform_network_process+0x556>
 8010fdc:	6836      	ldr	r6, [r6, #0]
 8010fde:	2e00      	cmp	r6, #0
 8010fe0:	f000 825b 	beq.w	801149a <ai_platform_network_process+0x556>
 8010fe4:	68ab      	ldr	r3, [r5, #8]
 8010fe6:	f8d3 9000 	ldr.w	r9, [r3]
 8010fea:	f1b9 0f00 	cmp.w	r9, #0
 8010fee:	f000 809c 	beq.w	801112a <ai_platform_network_process+0x1e6>
 8010ff2:	460f      	mov	r7, r1
 8010ff4:	4680      	mov	r8, r0
 8010ff6:	e05e      	b.n	80110b6 <ai_platform_network_process+0x172>
 8010ff8:	68f3      	ldr	r3, [r6, #12]
 8010ffa:	68da      	ldr	r2, [r3, #12]
 8010ffc:	455a      	cmp	r2, fp
 8010ffe:	d168      	bne.n	80110d2 <ai_platform_network_process+0x18e>
 8011000:	689a      	ldr	r2, [r3, #8]
 8011002:	4572      	cmp	r2, lr
 8011004:	d165      	bne.n	80110d2 <ai_platform_network_process+0x18e>
 8011006:	685b      	ldr	r3, [r3, #4]
 8011008:	459c      	cmp	ip, r3
 801100a:	d162      	bne.n	80110d2 <ai_platform_network_process+0x18e>
 801100c:	6800      	ldr	r0, [r0, #0]
 801100e:	f001 f9ad 	bl	801236c <ai_array_get_byte_size>
 8011012:	68f2      	ldr	r2, [r6, #12]
 8011014:	6973      	ldr	r3, [r6, #20]
 8011016:	68d2      	ldr	r2, [r2, #12]
 8011018:	68db      	ldr	r3, [r3, #12]
 801101a:	fb03 f302 	mul.w	r3, r3, r2
 801101e:	4298      	cmp	r0, r3
 8011020:	d357      	bcc.n	80110d2 <ai_platform_network_process+0x18e>
 8011022:	69b3      	ldr	r3, [r6, #24]
 8011024:	6818      	ldr	r0, [r3, #0]
 8011026:	f001 f955 	bl	80122d4 <ai_array_to_buffer_fmt>
 801102a:	683b      	ldr	r3, [r7, #0]
 801102c:	4043      	eors	r3, r0
 801102e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8011032:	f040 8229 	bne.w	8011488 <ai_platform_network_process+0x544>
 8011036:	693b      	ldr	r3, [r7, #16]
 8011038:	2b00      	cmp	r3, #0
 801103a:	f000 821d 	beq.w	8011478 <ai_platform_network_process+0x534>
 801103e:	88bb      	ldrh	r3, [r7, #4]
 8011040:	2b00      	cmp	r3, #0
 8011042:	f000 808a 	beq.w	801115a <ai_platform_network_process+0x216>
 8011046:	9a01      	ldr	r2, [sp, #4]
 8011048:	68f1      	ldr	r1, [r6, #12]
 801104a:	429a      	cmp	r2, r3
 801104c:	68c9      	ldr	r1, [r1, #12]
 801104e:	bf38      	it	cc
 8011050:	461a      	movcc	r2, r3
 8011052:	9201      	str	r2, [sp, #4]
 8011054:	6972      	ldr	r2, [r6, #20]
 8011056:	68d3      	ldr	r3, [r2, #12]
 8011058:	fb03 f301 	mul.w	r3, r3, r1
 801105c:	f8c9 3008 	str.w	r3, [r9, #8]
 8011060:	88ba      	ldrh	r2, [r7, #4]
 8011062:	fb03 f302 	mul.w	r3, r3, r2
 8011066:	f8c9 300c 	str.w	r3, [r9, #12]
 801106a:	6939      	ldr	r1, [r7, #16]
 801106c:	f8c9 1004 	str.w	r1, [r9, #4]
 8011070:	693a      	ldr	r2, [r7, #16]
 8011072:	4413      	add	r3, r2
 8011074:	f8c9 3000 	str.w	r3, [r9]
 8011078:	69b0      	ldr	r0, [r6, #24]
 801107a:	6803      	ldr	r3, [r0, #0]
 801107c:	009a      	lsls	r2, r3, #2
 801107e:	d408      	bmi.n	8011092 <ai_platform_network_process+0x14e>
 8011080:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8011084:	1a9b      	subs	r3, r3, r2
 8011086:	4419      	add	r1, r3
 8011088:	6081      	str	r1, [r0, #8]
 801108a:	69b3      	ldr	r3, [r6, #24]
 801108c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8011090:	60da      	str	r2, [r3, #12]
 8011092:	f108 0801 	add.w	r8, r8, #1
 8011096:	882b      	ldrh	r3, [r5, #0]
 8011098:	4598      	cmp	r8, r3
 801109a:	d27b      	bcs.n	8011194 <ai_platform_network_process+0x250>
 801109c:	686b      	ldr	r3, [r5, #4]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d078      	beq.n	8011194 <ai_platform_network_process+0x250>
 80110a2:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 80110a6:	2e00      	cmp	r6, #0
 80110a8:	d074      	beq.n	8011194 <ai_platform_network_process+0x250>
 80110aa:	68ab      	ldr	r3, [r5, #8]
 80110ac:	3718      	adds	r7, #24
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 80110b4:	d039      	beq.n	801112a <ai_platform_network_process+0x1e6>
 80110b6:	f8b7 e008 	ldrh.w	lr, [r7, #8]
 80110ba:	f8b7 b006 	ldrh.w	fp, [r7, #6]
 80110be:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 80110c2:	fb0b f30e 	mul.w	r3, fp, lr
 80110c6:	69b0      	ldr	r0, [r6, #24]
 80110c8:	fb0c f303 	mul.w	r3, ip, r3
 80110cc:	6841      	ldr	r1, [r0, #4]
 80110ce:	4299      	cmp	r1, r3
 80110d0:	d292      	bcs.n	8010ff8 <ai_platform_network_process+0xb4>
 80110d2:	f104 0010 	add.w	r0, r4, #16
 80110d6:	2218      	movs	r2, #24
 80110d8:	2112      	movs	r1, #18
 80110da:	f04f 0b00 	mov.w	fp, #0
 80110de:	f000 f9e3 	bl	80114a8 <core_set_error>
 80110e2:	e02a      	b.n	801113a <ai_platform_network_process+0x1f6>
 80110e4:	4b25      	ldr	r3, [pc, #148]	; (801117c <ai_platform_network_process+0x238>)
 80110e6:	2201      	movs	r2, #1
 80110e8:	4618      	mov	r0, r3
 80110ea:	601a      	str	r2, [r3, #0]
 80110ec:	6803      	ldr	r3, [r0, #0]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d1fc      	bne.n	80110ec <ai_platform_network_process+0x1a8>
 80110f2:	4b23      	ldr	r3, [pc, #140]	; (8011180 <ai_platform_network_process+0x23c>)
 80110f4:	4823      	ldr	r0, [pc, #140]	; (8011184 <ai_platform_network_process+0x240>)
 80110f6:	4a24      	ldr	r2, [pc, #144]	; (8011188 <ai_platform_network_process+0x244>)
 80110f8:	6018      	str	r0, [r3, #0]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	4293      	cmp	r3, r2
 80110fe:	f43f af48 	beq.w	8010f92 <ai_platform_network_process+0x4e>
 8011102:	e7fe      	b.n	8011102 <ai_platform_network_process+0x1be>
 8011104:	4b21      	ldr	r3, [pc, #132]	; (801118c <ai_platform_network_process+0x248>)
 8011106:	2201      	movs	r2, #1
 8011108:	4618      	mov	r0, r3
 801110a:	601a      	str	r2, [r3, #0]
 801110c:	6803      	ldr	r3, [r0, #0]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d1fc      	bne.n	801110c <ai_platform_network_process+0x1c8>
 8011112:	4b1f      	ldr	r3, [pc, #124]	; (8011190 <ai_platform_network_process+0x24c>)
 8011114:	481b      	ldr	r0, [pc, #108]	; (8011184 <ai_platform_network_process+0x240>)
 8011116:	4a1c      	ldr	r2, [pc, #112]	; (8011188 <ai_platform_network_process+0x244>)
 8011118:	6018      	str	r0, [r3, #0]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	4293      	cmp	r3, r2
 801111e:	f43f af38 	beq.w	8010f92 <ai_platform_network_process+0x4e>
 8011122:	e7fe      	b.n	8011122 <ai_platform_network_process+0x1de>
 8011124:	2803      	cmp	r0, #3
 8011126:	6163      	str	r3, [r4, #20]
 8011128:	d10b      	bne.n	8011142 <ai_platform_network_process+0x1fe>
 801112a:	f04f 0b00 	mov.w	fp, #0
 801112e:	f104 0010 	add.w	r0, r4, #16
 8011132:	2217      	movs	r2, #23
 8011134:	2112      	movs	r1, #18
 8011136:	f000 f9b7 	bl	80114a8 <core_set_error>
 801113a:	4658      	mov	r0, fp
 801113c:	b003      	add	sp, #12
 801113e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011142:	f104 0010 	add.w	r0, r4, #16
 8011146:	2230      	movs	r2, #48	; 0x30
 8011148:	2111      	movs	r1, #17
 801114a:	f000 f9ad 	bl	80114a8 <core_set_error>
 801114e:	f04f 0b00 	mov.w	fp, #0
 8011152:	4658      	mov	r0, fp
 8011154:	b003      	add	sp, #12
 8011156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801115a:	f104 0010 	add.w	r0, r4, #16
 801115e:	2221      	movs	r2, #33	; 0x21
 8011160:	2112      	movs	r1, #18
 8011162:	469b      	mov	fp, r3
 8011164:	f000 f9a0 	bl	80114a8 <core_set_error>
 8011168:	e7e7      	b.n	801113a <ai_platform_network_process+0x1f6>
 801116a:	bf00      	nop
 801116c:	a1c00100 	.word	0xa1c00100
 8011170:	e0002000 	.word	0xe0002000
 8011174:	e0042000 	.word	0xe0042000
 8011178:	5c001000 	.word	0x5c001000
 801117c:	58024c08 	.word	0x58024c08
 8011180:	58024c00 	.word	0x58024c00
 8011184:	f407a5c2 	.word	0xf407a5c2
 8011188:	b5e8b5cd 	.word	0xb5e8b5cd
 801118c:	40023008 	.word	0x40023008
 8011190:	40023000 	.word	0x40023000
 8011194:	f1ba 0f00 	cmp.w	sl, #0
 8011198:	f000 808c 	beq.w	80112b4 <ai_platform_network_process+0x370>
 801119c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80111a0:	2b01      	cmp	r3, #1
 80111a2:	f240 813b 	bls.w	801141c <ai_platform_network_process+0x4d8>
 80111a6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80111a8:	f115 0f0c 	cmn.w	r5, #12
 80111ac:	f000 8136 	beq.w	801141c <ai_platform_network_process+0x4d8>
 80111b0:	89ab      	ldrh	r3, [r5, #12]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	f000 8132 	beq.w	801141c <ai_platform_network_process+0x4d8>
 80111b8:	4656      	mov	r6, sl
 80111ba:	f04f 0900 	mov.w	r9, #0
 80111be:	9400      	str	r4, [sp, #0]
 80111c0:	4599      	cmp	r9, r3
 80111c2:	d274      	bcs.n	80112ae <ai_platform_network_process+0x36a>
 80111c4:	692b      	ldr	r3, [r5, #16]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d071      	beq.n	80112ae <ai_platform_network_process+0x36a>
 80111ca:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
 80111ce:	2f00      	cmp	r7, #0
 80111d0:	d06d      	beq.n	80112ae <ai_platform_network_process+0x36a>
 80111d2:	696b      	ldr	r3, [r5, #20]
 80111d4:	ea4f 1409 	mov.w	r4, r9, lsl #4
 80111d8:	f8d3 8000 	ldr.w	r8, [r3]
 80111dc:	eb18 0a04 	adds.w	sl, r8, r4
 80111e0:	f000 8125 	beq.w	801142e <ai_platform_network_process+0x4ea>
 80111e4:	f8b6 e008 	ldrh.w	lr, [r6, #8]
 80111e8:	f8b6 b006 	ldrh.w	fp, [r6, #6]
 80111ec:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 80111f0:	fb0b f30e 	mul.w	r3, fp, lr
 80111f4:	69b8      	ldr	r0, [r7, #24]
 80111f6:	fb0c f303 	mul.w	r3, ip, r3
 80111fa:	6841      	ldr	r1, [r0, #4]
 80111fc:	4299      	cmp	r1, r3
 80111fe:	f0c0 810c 	bcc.w	801141a <ai_platform_network_process+0x4d6>
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	68da      	ldr	r2, [r3, #12]
 8011206:	455a      	cmp	r2, fp
 8011208:	f040 8107 	bne.w	801141a <ai_platform_network_process+0x4d6>
 801120c:	689a      	ldr	r2, [r3, #8]
 801120e:	4572      	cmp	r2, lr
 8011210:	f040 8103 	bne.w	801141a <ai_platform_network_process+0x4d6>
 8011214:	685b      	ldr	r3, [r3, #4]
 8011216:	459c      	cmp	ip, r3
 8011218:	f040 80ff 	bne.w	801141a <ai_platform_network_process+0x4d6>
 801121c:	6800      	ldr	r0, [r0, #0]
 801121e:	f001 f8a5 	bl	801236c <ai_array_get_byte_size>
 8011222:	68fa      	ldr	r2, [r7, #12]
 8011224:	697b      	ldr	r3, [r7, #20]
 8011226:	68d2      	ldr	r2, [r2, #12]
 8011228:	68db      	ldr	r3, [r3, #12]
 801122a:	fb03 f302 	mul.w	r3, r3, r2
 801122e:	4298      	cmp	r0, r3
 8011230:	f0c0 80f3 	bcc.w	801141a <ai_platform_network_process+0x4d6>
 8011234:	69bb      	ldr	r3, [r7, #24]
 8011236:	6818      	ldr	r0, [r3, #0]
 8011238:	f001 f84c 	bl	80122d4 <ai_array_to_buffer_fmt>
 801123c:	6833      	ldr	r3, [r6, #0]
 801123e:	4043      	eors	r3, r0
 8011240:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8011244:	f040 810e 	bne.w	8011464 <ai_platform_network_process+0x520>
 8011248:	6933      	ldr	r3, [r6, #16]
 801124a:	2b00      	cmp	r3, #0
 801124c:	f000 8101 	beq.w	8011452 <ai_platform_network_process+0x50e>
 8011250:	88b3      	ldrh	r3, [r6, #4]
 8011252:	2b00      	cmp	r3, #0
 8011254:	f000 80f4 	beq.w	8011440 <ai_platform_network_process+0x4fc>
 8011258:	9a01      	ldr	r2, [sp, #4]
 801125a:	68f9      	ldr	r1, [r7, #12]
 801125c:	429a      	cmp	r2, r3
 801125e:	68c9      	ldr	r1, [r1, #12]
 8011260:	bf38      	it	cc
 8011262:	461a      	movcc	r2, r3
 8011264:	9201      	str	r2, [sp, #4]
 8011266:	697a      	ldr	r2, [r7, #20]
 8011268:	68d3      	ldr	r3, [r2, #12]
 801126a:	fb03 f301 	mul.w	r3, r3, r1
 801126e:	f8ca 3008 	str.w	r3, [sl, #8]
 8011272:	88b2      	ldrh	r2, [r6, #4]
 8011274:	fb03 f302 	mul.w	r3, r3, r2
 8011278:	f8ca 300c 	str.w	r3, [sl, #12]
 801127c:	6931      	ldr	r1, [r6, #16]
 801127e:	f8ca 1004 	str.w	r1, [sl, #4]
 8011282:	6932      	ldr	r2, [r6, #16]
 8011284:	4413      	add	r3, r2
 8011286:	f848 3004 	str.w	r3, [r8, r4]
 801128a:	69b8      	ldr	r0, [r7, #24]
 801128c:	6803      	ldr	r3, [r0, #0]
 801128e:	009b      	lsls	r3, r3, #2
 8011290:	d408      	bmi.n	80112a4 <ai_platform_network_process+0x360>
 8011292:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8011296:	1a9b      	subs	r3, r3, r2
 8011298:	4419      	add	r1, r3
 801129a:	6081      	str	r1, [r0, #8]
 801129c:	69bb      	ldr	r3, [r7, #24]
 801129e:	f8da 2004 	ldr.w	r2, [sl, #4]
 80112a2:	60da      	str	r2, [r3, #12]
 80112a4:	f109 0901 	add.w	r9, r9, #1
 80112a8:	3618      	adds	r6, #24
 80112aa:	89ab      	ldrh	r3, [r5, #12]
 80112ac:	e788      	b.n	80111c0 <ai_platform_network_process+0x27c>
 80112ae:	e9dd 4300 	ldrd	r4, r3, [sp]
 80112b2:	82a3      	strh	r3, [r4, #20]
 80112b4:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80112b8:	2a00      	cmp	r2, #0
 80112ba:	f000 80a9 	beq.w	8011410 <ai_platform_network_process+0x4cc>
 80112be:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80112c0:	2a01      	cmp	r2, #1
 80112c2:	f240 80a8 	bls.w	8011416 <ai_platform_network_process+0x4d2>
 80112c6:	f105 060c 	add.w	r6, r5, #12
 80112ca:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 80112ce:	8aa3      	ldrh	r3, [r4, #20]
 80112d0:	455b      	cmp	r3, fp
 80112d2:	f67f af32 	bls.w	801113a <ai_platform_network_process+0x1f6>
 80112d6:	9400      	str	r4, [sp, #0]
 80112d8:	2d00      	cmp	r5, #0
 80112da:	d037      	beq.n	801134c <ai_platform_network_process+0x408>
 80112dc:	882b      	ldrh	r3, [r5, #0]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d034      	beq.n	801134c <ai_platform_network_process+0x408>
 80112e2:	686b      	ldr	r3, [r5, #4]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d031      	beq.n	801134c <ai_platform_network_process+0x408>
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d02e      	beq.n	801134c <ai_platform_network_process+0x408>
 80112ee:	f04f 0800 	mov.w	r8, #0
 80112f2:	e01a      	b.n	801132a <ai_platform_network_process+0x3e6>
 80112f4:	68d4      	ldr	r4, [r2, #12]
 80112f6:	1b00      	subs	r0, r0, r4
 80112f8:	4401      	add	r1, r0
 80112fa:	6091      	str	r1, [r2, #8]
 80112fc:	687a      	ldr	r2, [r7, #4]
 80112fe:	699b      	ldr	r3, [r3, #24]
 8011300:	60da      	str	r2, [r3, #12]
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	f108 0801 	add.w	r8, r8, #1
 8011308:	68b9      	ldr	r1, [r7, #8]
 801130a:	f85a 2009 	ldr.w	r2, [sl, r9]
 801130e:	440b      	add	r3, r1
 8011310:	4293      	cmp	r3, r2
 8011312:	d301      	bcc.n	8011318 <ai_platform_network_process+0x3d4>
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	1ad3      	subs	r3, r2, r3
 8011318:	607b      	str	r3, [r7, #4]
 801131a:	882b      	ldrh	r3, [r5, #0]
 801131c:	4598      	cmp	r8, r3
 801131e:	d215      	bcs.n	801134c <ai_platform_network_process+0x408>
 8011320:	686b      	ldr	r3, [r5, #4]
 8011322:	b19b      	cbz	r3, 801134c <ai_platform_network_process+0x408>
 8011324:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8011328:	b183      	cbz	r3, 801134c <ai_platform_network_process+0x408>
 801132a:	68a9      	ldr	r1, [r5, #8]
 801132c:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8011330:	699a      	ldr	r2, [r3, #24]
 8011332:	f8d1 a000 	ldr.w	sl, [r1]
 8011336:	6814      	ldr	r4, [r2, #0]
 8011338:	eb0a 0709 	add.w	r7, sl, r9
 801133c:	6890      	ldr	r0, [r2, #8]
 801133e:	00a4      	lsls	r4, r4, #2
 8011340:	6879      	ldr	r1, [r7, #4]
 8011342:	d5d7      	bpl.n	80112f4 <ai_platform_network_process+0x3b0>
 8011344:	68ba      	ldr	r2, [r7, #8]
 8011346:	f001 f873 	bl	8012430 <memcpy>
 801134a:	e7da      	b.n	8011302 <ai_platform_network_process+0x3be>
 801134c:	9800      	ldr	r0, [sp, #0]
 801134e:	f000 ff87 	bl	8012260 <ai_layers_forward_all>
 8011352:	2e00      	cmp	r6, #0
 8011354:	d04a      	beq.n	80113ec <ai_platform_network_process+0x4a8>
 8011356:	8833      	ldrh	r3, [r6, #0]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d047      	beq.n	80113ec <ai_platform_network_process+0x4a8>
 801135c:	6873      	ldr	r3, [r6, #4]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d044      	beq.n	80113ec <ai_platform_network_process+0x4a8>
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d041      	beq.n	80113ec <ai_platform_network_process+0x4a8>
 8011368:	f04f 0800 	mov.w	r8, #0
 801136c:	e019      	b.n	80113a2 <ai_platform_network_process+0x45e>
 801136e:	f85a 2009 	ldr.w	r2, [sl, r9]
 8011372:	4291      	cmp	r1, r2
 8011374:	d301      	bcc.n	801137a <ai_platform_network_process+0x436>
 8011376:	68f9      	ldr	r1, [r7, #12]
 8011378:	1a51      	subs	r1, r2, r1
 801137a:	6079      	str	r1, [r7, #4]
 801137c:	f108 0801 	add.w	r8, r8, #1
 8011380:	6998      	ldr	r0, [r3, #24]
 8011382:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 8011386:	1b12      	subs	r2, r2, r4
 8011388:	440a      	add	r2, r1
 801138a:	6082      	str	r2, [r0, #8]
 801138c:	687a      	ldr	r2, [r7, #4]
 801138e:	699b      	ldr	r3, [r3, #24]
 8011390:	60da      	str	r2, [r3, #12]
 8011392:	8833      	ldrh	r3, [r6, #0]
 8011394:	4598      	cmp	r8, r3
 8011396:	d229      	bcs.n	80113ec <ai_platform_network_process+0x4a8>
 8011398:	6873      	ldr	r3, [r6, #4]
 801139a:	b33b      	cbz	r3, 80113ec <ai_platform_network_process+0x4a8>
 801139c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80113a0:	b323      	cbz	r3, 80113ec <ai_platform_network_process+0x4a8>
 80113a2:	68b2      	ldr	r2, [r6, #8]
 80113a4:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80113a8:	f8d3 e018 	ldr.w	lr, [r3, #24]
 80113ac:	f8d2 a000 	ldr.w	sl, [r2]
 80113b0:	f8de 1000 	ldr.w	r1, [lr]
 80113b4:	eb0a 0709 	add.w	r7, sl, r9
 80113b8:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 80113bc:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 80113c0:	eb00 0102 	add.w	r1, r0, r2
 80113c4:	d0d3      	beq.n	801136e <ai_platform_network_process+0x42a>
 80113c6:	f8de 1008 	ldr.w	r1, [lr, #8]
 80113ca:	f001 f831 	bl	8012430 <memcpy>
 80113ce:	f85a 2009 	ldr.w	r2, [sl, r9]
 80113d2:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 80113d6:	440b      	add	r3, r1
 80113d8:	4293      	cmp	r3, r2
 80113da:	d301      	bcc.n	80113e0 <ai_platform_network_process+0x49c>
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	1ad3      	subs	r3, r2, r3
 80113e0:	607b      	str	r3, [r7, #4]
 80113e2:	f108 0801 	add.w	r8, r8, #1
 80113e6:	8833      	ldrh	r3, [r6, #0]
 80113e8:	4598      	cmp	r8, r3
 80113ea:	d3d5      	bcc.n	8011398 <ai_platform_network_process+0x454>
 80113ec:	9b00      	ldr	r3, [sp, #0]
 80113ee:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 80113f2:	461a      	mov	r2, r3
 80113f4:	8a9b      	ldrh	r3, [r3, #20]
 80113f6:	f10b 0b01 	add.w	fp, fp, #1
 80113fa:	fa1f fb8b 	uxth.w	fp, fp
 80113fe:	455b      	cmp	r3, fp
 8011400:	f8a2 b016 	strh.w	fp, [r2, #22]
 8011404:	f63f af68 	bhi.w	80112d8 <ai_platform_network_process+0x394>
 8011408:	4658      	mov	r0, fp
 801140a:	b003      	add	sp, #12
 801140c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011410:	4615      	mov	r5, r2
 8011412:	4616      	mov	r6, r2
 8011414:	e759      	b.n	80112ca <ai_platform_network_process+0x386>
 8011416:	2600      	movs	r6, #0
 8011418:	e757      	b.n	80112ca <ai_platform_network_process+0x386>
 801141a:	9c00      	ldr	r4, [sp, #0]
 801141c:	f104 0010 	add.w	r0, r4, #16
 8011420:	2218      	movs	r2, #24
 8011422:	2113      	movs	r1, #19
 8011424:	f04f 0b00 	mov.w	fp, #0
 8011428:	f000 f83e 	bl	80114a8 <core_set_error>
 801142c:	e685      	b.n	801113a <ai_platform_network_process+0x1f6>
 801142e:	9c00      	ldr	r4, [sp, #0]
 8011430:	2217      	movs	r2, #23
 8011432:	2113      	movs	r1, #19
 8011434:	46d3      	mov	fp, sl
 8011436:	f104 0010 	add.w	r0, r4, #16
 801143a:	f000 f835 	bl	80114a8 <core_set_error>
 801143e:	e67c      	b.n	801113a <ai_platform_network_process+0x1f6>
 8011440:	9c00      	ldr	r4, [sp, #0]
 8011442:	2221      	movs	r2, #33	; 0x21
 8011444:	2113      	movs	r1, #19
 8011446:	469b      	mov	fp, r3
 8011448:	f104 0010 	add.w	r0, r4, #16
 801144c:	f000 f82c 	bl	80114a8 <core_set_error>
 8011450:	e673      	b.n	801113a <ai_platform_network_process+0x1f6>
 8011452:	9c00      	ldr	r4, [sp, #0]
 8011454:	2217      	movs	r2, #23
 8011456:	2113      	movs	r1, #19
 8011458:	469b      	mov	fp, r3
 801145a:	f104 0010 	add.w	r0, r4, #16
 801145e:	f000 f823 	bl	80114a8 <core_set_error>
 8011462:	e66a      	b.n	801113a <ai_platform_network_process+0x1f6>
 8011464:	9c00      	ldr	r4, [sp, #0]
 8011466:	2219      	movs	r2, #25
 8011468:	2113      	movs	r1, #19
 801146a:	f04f 0b00 	mov.w	fp, #0
 801146e:	f104 0010 	add.w	r0, r4, #16
 8011472:	f000 f819 	bl	80114a8 <core_set_error>
 8011476:	e660      	b.n	801113a <ai_platform_network_process+0x1f6>
 8011478:	f104 0010 	add.w	r0, r4, #16
 801147c:	2217      	movs	r2, #23
 801147e:	2112      	movs	r1, #18
 8011480:	469b      	mov	fp, r3
 8011482:	f000 f811 	bl	80114a8 <core_set_error>
 8011486:	e658      	b.n	801113a <ai_platform_network_process+0x1f6>
 8011488:	f104 0010 	add.w	r0, r4, #16
 801148c:	2219      	movs	r2, #25
 801148e:	2112      	movs	r1, #18
 8011490:	f04f 0b00 	mov.w	fp, #0
 8011494:	f000 f808 	bl	80114a8 <core_set_error>
 8011498:	e64f      	b.n	801113a <ai_platform_network_process+0x1f6>
 801149a:	f1ba 0f00 	cmp.w	sl, #0
 801149e:	f47f ae7f 	bne.w	80111a0 <ai_platform_network_process+0x25c>
 80114a2:	e70d      	b.n	80112c0 <ai_platform_network_process+0x37c>

080114a4 <core_init>:
 80114a4:	2001      	movs	r0, #1
 80114a6:	4770      	bx	lr

080114a8 <core_set_error>:
 80114a8:	4603      	mov	r3, r0
 80114aa:	7800      	ldrb	r0, [r0, #0]
 80114ac:	b930      	cbnz	r0, 80114bc <core_set_error+0x14>
 80114ae:	7019      	strb	r1, [r3, #0]
 80114b0:	2001      	movs	r0, #1
 80114b2:	6819      	ldr	r1, [r3, #0]
 80114b4:	f362 211f 	bfi	r1, r2, #8, #24
 80114b8:	6019      	str	r1, [r3, #0]
 80114ba:	4770      	bx	lr
 80114bc:	2000      	movs	r0, #0
 80114be:	4770      	bx	lr

080114c0 <ai_dict8_dot_array_f32>:
 80114c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114c4:	9d06      	ldr	r5, [sp, #24]
 80114c6:	4c88      	ldr	r4, [pc, #544]	; (80116e8 <ai_dict8_dot_array_f32+0x228>)
 80114c8:	2d07      	cmp	r5, #7
 80114ca:	442c      	add	r4, r5
 80114cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80114d0:	f104 0620 	add.w	r6, r4, #32
 80114d4:	d817      	bhi.n	8011506 <ai_dict8_dot_array_f32+0x46>
 80114d6:	42b3      	cmp	r3, r6
 80114d8:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80116ec <ai_dict8_dot_array_f32+0x22c>
 80114dc:	d20b      	bcs.n	80114f6 <ai_dict8_dot_array_f32+0x36>
 80114de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80114e2:	ecf3 7a01 	vldmia	r3!, {s15}
 80114e6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80114ea:	42b3      	cmp	r3, r6
 80114ec:	edd4 6a00 	vldr	s13, [r4]
 80114f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80114f4:	d3f3      	bcc.n	80114de <ai_dict8_dot_array_f32+0x1e>
 80114f6:	edd0 7a00 	vldr	s15, [r0]
 80114fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80114fe:	ed80 7a00 	vstr	s14, [r0]
 8011502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011506:	f001 0503 	and.w	r5, r1, #3
 801150a:	2d02      	cmp	r5, #2
 801150c:	f000 80f0 	beq.w	80116f0 <ai_dict8_dot_array_f32+0x230>
 8011510:	2d03      	cmp	r5, #3
 8011512:	f000 81ff 	beq.w	8011914 <ai_dict8_dot_array_f32+0x454>
 8011516:	2d01      	cmp	r5, #1
 8011518:	f000 81f0 	beq.w	80118fc <ai_dict8_dot_array_f32+0x43c>
 801151c:	42a3      	cmp	r3, r4
 801151e:	f200 81fc 	bhi.w	801191a <ai_dict8_dot_array_f32+0x45a>
 8011522:	1ae4      	subs	r4, r4, r3
 8011524:	f101 0810 	add.w	r8, r1, #16
 8011528:	f101 0508 	add.w	r5, r1, #8
 801152c:	f103 0720 	add.w	r7, r3, #32
 8011530:	0964      	lsrs	r4, r4, #5
 8011532:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80116ec <ai_dict8_dot_array_f32+0x22c>
 8011536:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 801153a:	f815 ec07 	ldrb.w	lr, [r5, #-7]
 801153e:	3508      	adds	r5, #8
 8011540:	f815 cc10 	ldrb.w	ip, [r5, #-16]
 8011544:	3720      	adds	r7, #32
 8011546:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 801154a:	ed57 5a0f 	vldr	s11, [r7, #-60]	; 0xffffffc4
 801154e:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8011552:	ed17 6a10 	vldr	s12, [r7, #-64]	; 0xffffffc0
 8011556:	edde 7a00 	vldr	s15, [lr]
 801155a:	ed57 6a0e 	vldr	s13, [r7, #-56]	; 0xffffffc8
 801155e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011562:	eddc 5a00 	vldr	s11, [ip]
 8011566:	f815 cc0e 	ldrb.w	ip, [r5, #-14]
 801156a:	ed17 5a0d 	vldr	s10, [r7, #-52]	; 0xffffffcc
 801156e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8011572:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8011576:	f815 ec0c 	ldrb.w	lr, [r5, #-12]
 801157a:	ed9c 4a00 	vldr	s8, [ip]
 801157e:	f815 cc0d 	ldrb.w	ip, [r5, #-13]
 8011582:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8011586:	ed17 6a0c 	vldr	s12, [r7, #-48]	; 0xffffffd0
 801158a:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 801158e:	ed57 4a0b 	vldr	s9, [r7, #-44]	; 0xffffffd4
 8011592:	eee4 7a26 	vfma.f32	s15, s8, s13
 8011596:	ed57 5a0a 	vldr	s11, [r7, #-40]	; 0xffffffd8
 801159a:	ed9c 4a00 	vldr	s8, [ip]
 801159e:	f815 cc0b 	ldrb.w	ip, [r5, #-11]
 80115a2:	ed57 6a09 	vldr	s13, [r7, #-36]	; 0xffffffdc
 80115a6:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80115aa:	eee4 7a05 	vfma.f32	s15, s8, s10
 80115ae:	ed9e 5a00 	vldr	s10, [lr]
 80115b2:	ed9c 4a00 	vldr	s8, [ip]
 80115b6:	f815 ec0a 	ldrb.w	lr, [r5, #-10]
 80115ba:	f815 cc09 	ldrb.w	ip, [r5, #-9]
 80115be:	4545      	cmp	r5, r8
 80115c0:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 80115c4:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80115c8:	eee5 7a06 	vfma.f32	s15, s10, s12
 80115cc:	ed9e 5a00 	vldr	s10, [lr]
 80115d0:	ed9c 6a00 	vldr	s12, [ip]
 80115d4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80115d8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80115dc:	eee6 7a26 	vfma.f32	s15, s12, s13
 80115e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80115e4:	d1a9      	bne.n	801153a <ai_dict8_dot_array_f32+0x7a>
 80115e6:	3401      	adds	r4, #1
 80115e8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80115ec:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80115f0:	42b3      	cmp	r3, r6
 80115f2:	d280      	bcs.n	80114f6 <ai_dict8_dot_array_f32+0x36>
 80115f4:	461c      	mov	r4, r3
 80115f6:	780d      	ldrb	r5, [r1, #0]
 80115f8:	ecf4 6a01 	vldmia	r4!, {s13}
 80115fc:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8011600:	42a6      	cmp	r6, r4
 8011602:	edd5 7a00 	vldr	s15, [r5]
 8011606:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801160a:	f67f af74 	bls.w	80114f6 <ai_dict8_dot_array_f32+0x36>
 801160e:	784d      	ldrb	r5, [r1, #1]
 8011610:	f103 0408 	add.w	r4, r3, #8
 8011614:	edd3 6a01 	vldr	s13, [r3, #4]
 8011618:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801161c:	42a6      	cmp	r6, r4
 801161e:	edd5 7a00 	vldr	s15, [r5]
 8011622:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011626:	f67f af66 	bls.w	80114f6 <ai_dict8_dot_array_f32+0x36>
 801162a:	788d      	ldrb	r5, [r1, #2]
 801162c:	f103 040c 	add.w	r4, r3, #12
 8011630:	edd3 6a02 	vldr	s13, [r3, #8]
 8011634:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8011638:	42a6      	cmp	r6, r4
 801163a:	edd5 7a00 	vldr	s15, [r5]
 801163e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011642:	f67f af58 	bls.w	80114f6 <ai_dict8_dot_array_f32+0x36>
 8011646:	78cd      	ldrb	r5, [r1, #3]
 8011648:	f103 0410 	add.w	r4, r3, #16
 801164c:	edd3 6a03 	vldr	s13, [r3, #12]
 8011650:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8011654:	42a6      	cmp	r6, r4
 8011656:	edd5 7a00 	vldr	s15, [r5]
 801165a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801165e:	f67f af4a 	bls.w	80114f6 <ai_dict8_dot_array_f32+0x36>
 8011662:	790d      	ldrb	r5, [r1, #4]
 8011664:	f103 0414 	add.w	r4, r3, #20
 8011668:	edd3 6a04 	vldr	s13, [r3, #16]
 801166c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8011670:	42a6      	cmp	r6, r4
 8011672:	edd5 7a00 	vldr	s15, [r5]
 8011676:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801167a:	f67f af3c 	bls.w	80114f6 <ai_dict8_dot_array_f32+0x36>
 801167e:	794d      	ldrb	r5, [r1, #5]
 8011680:	f103 0418 	add.w	r4, r3, #24
 8011684:	edd3 6a05 	vldr	s13, [r3, #20]
 8011688:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801168c:	42a6      	cmp	r6, r4
 801168e:	edd5 7a00 	vldr	s15, [r5]
 8011692:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011696:	f67f af2e 	bls.w	80114f6 <ai_dict8_dot_array_f32+0x36>
 801169a:	798d      	ldrb	r5, [r1, #6]
 801169c:	f103 041c 	add.w	r4, r3, #28
 80116a0:	edd3 6a06 	vldr	s13, [r3, #24]
 80116a4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80116a8:	42a6      	cmp	r6, r4
 80116aa:	edd5 7a00 	vldr	s15, [r5]
 80116ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80116b2:	f67f af20 	bls.w	80114f6 <ai_dict8_dot_array_f32+0x36>
 80116b6:	79cd      	ldrb	r5, [r1, #7]
 80116b8:	f103 0420 	add.w	r4, r3, #32
 80116bc:	edd3 6a07 	vldr	s13, [r3, #28]
 80116c0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80116c4:	42a6      	cmp	r6, r4
 80116c6:	edd5 7a00 	vldr	s15, [r5]
 80116ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80116ce:	f67f af12 	bls.w	80114f6 <ai_dict8_dot_array_f32+0x36>
 80116d2:	7a09      	ldrb	r1, [r1, #8]
 80116d4:	edd3 7a08 	vldr	s15, [r3, #32]
 80116d8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80116dc:	edd2 6a00 	vldr	s13, [r2]
 80116e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80116e4:	e707      	b.n	80114f6 <ai_dict8_dot_array_f32+0x36>
 80116e6:	bf00      	nop
 80116e8:	3ffffff8 	.word	0x3ffffff8
 80116ec:	00000000 	.word	0x00000000
 80116f0:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 80116ec <ai_dict8_dot_array_f32+0x22c>
 80116f4:	780d      	ldrb	r5, [r1, #0]
 80116f6:	3304      	adds	r3, #4
 80116f8:	ed53 7a01 	vldr	s15, [r3, #-4]
 80116fc:	3101      	adds	r1, #1
 80116fe:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8011702:	edd5 6a00 	vldr	s13, [r5]
 8011706:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801170a:	780d      	ldrb	r5, [r1, #0]
 801170c:	1d1f      	adds	r7, r3, #4
 801170e:	edd3 7a00 	vldr	s15, [r3]
 8011712:	f101 0c01 	add.w	ip, r1, #1
 8011716:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801171a:	42bc      	cmp	r4, r7
 801171c:	edd5 6a00 	vldr	s13, [r5]
 8011720:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011724:	d365      	bcc.n	80117f2 <ai_dict8_dot_array_f32+0x332>
 8011726:	3324      	adds	r3, #36	; 0x24
 8011728:	f101 0e11 	add.w	lr, r1, #17
 801172c:	3109      	adds	r1, #9
 801172e:	eba6 0803 	sub.w	r8, r6, r3
 8011732:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8011736:	eb0e 0ec8 	add.w	lr, lr, r8, lsl #3
 801173a:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 801173e:	3108      	adds	r1, #8
 8011740:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 8011744:	3320      	adds	r3, #32
 8011746:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801174a:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 801174e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8011752:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 8011756:	edd5 7a00 	vldr	s15, [r5]
 801175a:	ed53 6a0e 	vldr	s13, [r3, #-56]	; 0xffffffc8
 801175e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011762:	edd4 5a00 	vldr	s11, [r4]
 8011766:	f811 4c0e 	ldrb.w	r4, [r1, #-14]
 801176a:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 801176e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8011772:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8011776:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 801177a:	ed94 4a00 	vldr	s8, [r4]
 801177e:	f811 4c0d 	ldrb.w	r4, [r1, #-13]
 8011782:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8011786:	ed13 6a0c 	vldr	s12, [r3, #-48]	; 0xffffffd0
 801178a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801178e:	ed53 4a0b 	vldr	s9, [r3, #-44]	; 0xffffffd4
 8011792:	eee4 7a26 	vfma.f32	s15, s8, s13
 8011796:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 801179a:	ed94 4a00 	vldr	s8, [r4]
 801179e:	f811 4c0b 	ldrb.w	r4, [r1, #-11]
 80117a2:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 80117a6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80117aa:	eee4 7a05 	vfma.f32	s15, s8, s10
 80117ae:	ed95 5a00 	vldr	s10, [r5]
 80117b2:	ed94 4a00 	vldr	s8, [r4]
 80117b6:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 80117ba:	f811 4c09 	ldrb.w	r4, [r1, #-9]
 80117be:	458e      	cmp	lr, r1
 80117c0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80117c4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80117c8:	eee5 7a06 	vfma.f32	s15, s10, s12
 80117cc:	ed95 5a00 	vldr	s10, [r5]
 80117d0:	ed94 6a00 	vldr	s12, [r4]
 80117d4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80117d8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80117dc:	eee6 7a26 	vfma.f32	s15, s12, s13
 80117e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80117e4:	d1a9      	bne.n	801173a <ai_dict8_dot_array_f32+0x27a>
 80117e6:	f108 0801 	add.w	r8, r8, #1
 80117ea:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 80117ee:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 80117f2:	42b7      	cmp	r7, r6
 80117f4:	f4bf ae7f 	bcs.w	80114f6 <ai_dict8_dot_array_f32+0x36>
 80117f8:	463b      	mov	r3, r7
 80117fa:	f89c 1000 	ldrb.w	r1, [ip]
 80117fe:	ecf3 6a01 	vldmia	r3!, {s13}
 8011802:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8011806:	429e      	cmp	r6, r3
 8011808:	edd1 7a00 	vldr	s15, [r1]
 801180c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011810:	f67f ae71 	bls.w	80114f6 <ai_dict8_dot_array_f32+0x36>
 8011814:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8011818:	f107 0308 	add.w	r3, r7, #8
 801181c:	edd7 6a01 	vldr	s13, [r7, #4]
 8011820:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8011824:	429e      	cmp	r6, r3
 8011826:	edd1 7a00 	vldr	s15, [r1]
 801182a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801182e:	f67f ae62 	bls.w	80114f6 <ai_dict8_dot_array_f32+0x36>
 8011832:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8011836:	f107 030c 	add.w	r3, r7, #12
 801183a:	edd7 6a02 	vldr	s13, [r7, #8]
 801183e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8011842:	429e      	cmp	r6, r3
 8011844:	edd1 7a00 	vldr	s15, [r1]
 8011848:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801184c:	f67f ae53 	bls.w	80114f6 <ai_dict8_dot_array_f32+0x36>
 8011850:	f89c 1003 	ldrb.w	r1, [ip, #3]
 8011854:	f107 0310 	add.w	r3, r7, #16
 8011858:	edd7 6a03 	vldr	s13, [r7, #12]
 801185c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8011860:	429e      	cmp	r6, r3
 8011862:	edd1 7a00 	vldr	s15, [r1]
 8011866:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801186a:	f67f ae44 	bls.w	80114f6 <ai_dict8_dot_array_f32+0x36>
 801186e:	f89c 1004 	ldrb.w	r1, [ip, #4]
 8011872:	f107 0314 	add.w	r3, r7, #20
 8011876:	edd7 6a04 	vldr	s13, [r7, #16]
 801187a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 801187e:	429e      	cmp	r6, r3
 8011880:	edd1 7a00 	vldr	s15, [r1]
 8011884:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011888:	f67f ae35 	bls.w	80114f6 <ai_dict8_dot_array_f32+0x36>
 801188c:	f89c 1005 	ldrb.w	r1, [ip, #5]
 8011890:	f107 0318 	add.w	r3, r7, #24
 8011894:	edd7 6a05 	vldr	s13, [r7, #20]
 8011898:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 801189c:	429e      	cmp	r6, r3
 801189e:	edd1 7a00 	vldr	s15, [r1]
 80118a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80118a6:	f67f ae26 	bls.w	80114f6 <ai_dict8_dot_array_f32+0x36>
 80118aa:	f89c 1006 	ldrb.w	r1, [ip, #6]
 80118ae:	f107 031c 	add.w	r3, r7, #28
 80118b2:	edd7 6a06 	vldr	s13, [r7, #24]
 80118b6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80118ba:	429e      	cmp	r6, r3
 80118bc:	edd1 7a00 	vldr	s15, [r1]
 80118c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80118c4:	f67f ae17 	bls.w	80114f6 <ai_dict8_dot_array_f32+0x36>
 80118c8:	f89c 1007 	ldrb.w	r1, [ip, #7]
 80118cc:	f107 0320 	add.w	r3, r7, #32
 80118d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80118d4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80118d8:	429e      	cmp	r6, r3
 80118da:	edd1 7a00 	vldr	s15, [r1]
 80118de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80118e2:	f67f ae08 	bls.w	80114f6 <ai_dict8_dot_array_f32+0x36>
 80118e6:	f89c 3008 	ldrb.w	r3, [ip, #8]
 80118ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80118ee:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80118f2:	edd2 6a00 	vldr	s13, [r2]
 80118f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80118fa:	e5fc      	b.n	80114f6 <ai_dict8_dot_array_f32+0x36>
 80118fc:	780d      	ldrb	r5, [r1, #0]
 80118fe:	3304      	adds	r3, #4
 8011900:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011904:	3101      	adds	r1, #1
 8011906:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801190a:	ed95 7a00 	vldr	s14, [r5]
 801190e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011912:	e6ef      	b.n	80116f4 <ai_dict8_dot_array_f32+0x234>
 8011914:	ed1f 7a8b 	vldr	s14, [pc, #-556]	; 80116ec <ai_dict8_dot_array_f32+0x22c>
 8011918:	e6f7      	b.n	801170a <ai_dict8_dot_array_f32+0x24a>
 801191a:	ed1f 7a8c 	vldr	s14, [pc, #-560]	; 80116ec <ai_dict8_dot_array_f32+0x22c>
 801191e:	e667      	b.n	80115f0 <ai_dict8_dot_array_f32+0x130>

08011920 <ai_dict4_dot_array_f32>:
 8011920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011924:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011926:	f027 0c01 	bic.w	ip, r7, #1
 801192a:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 801192e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8011932:	f000 80ad 	beq.w	8011a90 <ai_dict4_dot_array_f32+0x170>
 8011936:	1d0d      	adds	r5, r1, #4
 8011938:	ea4f 0988 	mov.w	r9, r8, lsl #2
 801193c:	f103 0420 	add.w	r4, r3, #32
 8011940:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8011a98 <ai_dict4_dot_array_f32+0x178>
 8011944:	eb05 0e09 	add.w	lr, r5, r9
 8011948:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 801194c:	3504      	adds	r5, #4
 801194e:	ed14 5a07 	vldr	s10, [r4, #-28]	; 0xffffffe4
 8011952:	3420      	adds	r4, #32
 8011954:	f006 0a0f 	and.w	sl, r6, #15
 8011958:	0936      	lsrs	r6, r6, #4
 801195a:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 801195e:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8011962:	ed14 4a0e 	vldr	s8, [r4, #-56]	; 0xffffffc8
 8011966:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801196a:	ed14 6a0d 	vldr	s12, [r4, #-52]	; 0xffffffcc
 801196e:	edda 7a00 	vldr	s15, [sl]
 8011972:	edd6 5a00 	vldr	s11, [r6]
 8011976:	ee67 7a85 	vmul.f32	s15, s15, s10
 801197a:	f815 6c07 	ldrb.w	r6, [r5, #-7]
 801197e:	ed54 3a0c 	vldr	s7, [r4, #-48]	; 0xffffffd0
 8011982:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8011986:	f006 060f 	and.w	r6, r6, #15
 801198a:	eee5 7aa6 	vfma.f32	s15, s11, s13
 801198e:	ed54 4a0b 	vldr	s9, [r4, #-44]	; 0xffffffd4
 8011992:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8011996:	ed54 5a0a 	vldr	s11, [r4, #-40]	; 0xffffffd8
 801199a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801199e:	ed54 6a09 	vldr	s13, [r4, #-36]	; 0xffffffdc
 80119a2:	ed9a 3a00 	vldr	s6, [sl]
 80119a6:	ed96 5a00 	vldr	s10, [r6]
 80119aa:	f815 ac06 	ldrb.w	sl, [r5, #-6]
 80119ae:	eee3 7a04 	vfma.f32	s15, s6, s8
 80119b2:	f815 6c05 	ldrb.w	r6, [r5, #-5]
 80119b6:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 80119ba:	f00a 0a0f 	and.w	sl, sl, #15
 80119be:	45ae      	cmp	lr, r5
 80119c0:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80119c4:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80119c8:	ed9b 3a00 	vldr	s6, [fp]
 80119cc:	ea4f 1b16 	mov.w	fp, r6, lsr #4
 80119d0:	eee5 7a06 	vfma.f32	s15, s10, s12
 80119d4:	ed9a 4a00 	vldr	s8, [sl]
 80119d8:	eb02 0a8b 	add.w	sl, r2, fp, lsl #2
 80119dc:	f006 060f 	and.w	r6, r6, #15
 80119e0:	ed9a 5a00 	vldr	s10, [sl]
 80119e4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80119e8:	ed96 6a00 	vldr	s12, [r6]
 80119ec:	eee3 7a23 	vfma.f32	s15, s6, s7
 80119f0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80119f4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80119f8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80119fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011a00:	d1a2      	bne.n	8011948 <ai_dict4_dot_array_f32+0x28>
 8011a02:	4449      	add	r1, r9
 8011a04:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8011a08:	459c      	cmp	ip, r3
 8011a0a:	d92d      	bls.n	8011a68 <ai_dict4_dot_array_f32+0x148>
 8011a0c:	f10c 0c07 	add.w	ip, ip, #7
 8011a10:	f103 0508 	add.w	r5, r3, #8
 8011a14:	f103 0810 	add.w	r8, r3, #16
 8011a18:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8011a1c:	ebac 0c05 	sub.w	ip, ip, r5
 8011a20:	f02c 0407 	bic.w	r4, ip, #7
 8011a24:	44a0      	add	r8, r4
 8011a26:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8011a2a:	3508      	adds	r5, #8
 8011a2c:	ed55 5a03 	vldr	s11, [r5, #-12]
 8011a30:	f004 060f 	and.w	r6, r4, #15
 8011a34:	0924      	lsrs	r4, r4, #4
 8011a36:	ed55 6a04 	vldr	s13, [r5, #-16]
 8011a3a:	45a8      	cmp	r8, r5
 8011a3c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011a40:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8011a44:	edd6 7a00 	vldr	s15, [r6]
 8011a48:	ed94 6a00 	vldr	s12, [r4]
 8011a4c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011a50:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011a54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011a58:	d1e5      	bne.n	8011a26 <ai_dict4_dot_array_f32+0x106>
 8011a5a:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8011a5e:	f10c 0c01 	add.w	ip, ip, #1
 8011a62:	4461      	add	r1, ip
 8011a64:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8011a68:	07fc      	lsls	r4, r7, #31
 8011a6a:	d509      	bpl.n	8011a80 <ai_dict4_dot_array_f32+0x160>
 8011a6c:	7809      	ldrb	r1, [r1, #0]
 8011a6e:	edd3 7a00 	vldr	s15, [r3]
 8011a72:	090b      	lsrs	r3, r1, #4
 8011a74:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011a78:	edd2 6a00 	vldr	s13, [r2]
 8011a7c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011a80:	edd0 7a00 	vldr	s15, [r0]
 8011a84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011a88:	ed80 7a00 	vstr	s14, [r0]
 8011a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a90:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8011a98 <ai_dict4_dot_array_f32+0x178>
 8011a94:	e7b8      	b.n	8011a08 <ai_dict4_dot_array_f32+0xe8>
 8011a96:	bf00      	nop
 8011a98:	00000000 	.word	0x00000000

08011a9c <forward_dense>:
 8011a9c:	6942      	ldr	r2, [r0, #20]
 8011a9e:	8813      	ldrh	r3, [r2, #0]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	f000 81c8 	beq.w	8011e36 <forward_dense+0x39a>
 8011aa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aaa:	ed2d 8b08 	vpush	{d8-d11}
 8011aae:	6851      	ldr	r1, [r2, #4]
 8011ab0:	b091      	sub	sp, #68	; 0x44
 8011ab2:	684d      	ldr	r5, [r1, #4]
 8011ab4:	b105      	cbz	r5, 8011ab8 <forward_dense+0x1c>
 8011ab6:	682d      	ldr	r5, [r5, #0]
 8011ab8:	2b01      	cmp	r3, #1
 8011aba:	f240 81b9 	bls.w	8011e30 <forward_dense+0x394>
 8011abe:	690a      	ldr	r2, [r1, #16]
 8011ac0:	b102      	cbz	r2, 8011ac4 <forward_dense+0x28>
 8011ac2:	6812      	ldr	r2, [r2, #0]
 8011ac4:	2b02      	cmp	r3, #2
 8011ac6:	f000 81b8 	beq.w	8011e3a <forward_dense+0x39e>
 8011aca:	69cb      	ldr	r3, [r1, #28]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	f000 8209 	beq.w	8011ee4 <forward_dense+0x448>
 8011ad2:	6818      	ldr	r0, [r3, #0]
 8011ad4:	9008      	str	r0, [sp, #32]
 8011ad6:	f111 0018 	adds.w	r0, r1, #24
 8011ada:	f000 81dc 	beq.w	8011e96 <forward_dense+0x3fa>
 8011ade:	8b09      	ldrh	r1, [r1, #24]
 8011ae0:	2901      	cmp	r1, #1
 8011ae2:	f240 81fc 	bls.w	8011ede <forward_dense+0x442>
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	f000 81d7 	beq.w	8011e9a <forward_dense+0x3fe>
 8011aec:	685b      	ldr	r3, [r3, #4]
 8011aee:	9306      	str	r3, [sp, #24]
 8011af0:	9b08      	ldr	r3, [sp, #32]
 8011af2:	68d6      	ldr	r6, [r2, #12]
 8011af4:	699b      	ldr	r3, [r3, #24]
 8011af6:	68b0      	ldr	r0, [r6, #8]
 8011af8:	681f      	ldr	r7, [r3, #0]
 8011afa:	68f4      	ldr	r4, [r6, #12]
 8011afc:	f3c7 1ec6 	ubfx	lr, r7, #7, #7
 8011b00:	f3c7 5c41 	ubfx	ip, r7, #21, #2
 8011b04:	f3c7 4743 	ubfx	r7, r7, #17, #4
 8011b08:	fb04 f000 	mul.w	r0, r4, r0
 8011b0c:	fa4e f10c 	asr.w	r1, lr, ip
 8011b10:	2f04      	cmp	r7, #4
 8011b12:	9007      	str	r0, [sp, #28]
 8011b14:	910b      	str	r1, [sp, #44]	; 0x2c
 8011b16:	68e9      	ldr	r1, [r5, #12]
 8011b18:	6870      	ldr	r0, [r6, #4]
 8011b1a:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8011b1e:	f000 81db 	beq.w	8011ed8 <forward_dense+0x43c>
 8011b22:	2f08      	cmp	r7, #8
 8011b24:	f000 81d8 	beq.w	8011ed8 <forward_dense+0x43c>
 8011b28:	f04f 0a00 	mov.w	sl, #0
 8011b2c:	6992      	ldr	r2, [r2, #24]
 8011b2e:	0080      	lsls	r0, r0, #2
 8011b30:	69a9      	ldr	r1, [r5, #24]
 8011b32:	6894      	ldr	r4, [r2, #8]
 8011b34:	9a08      	ldr	r2, [sp, #32]
 8011b36:	9009      	str	r0, [sp, #36]	; 0x24
 8011b38:	1826      	adds	r6, r4, r0
 8011b3a:	6952      	ldr	r2, [r2, #20]
 8011b3c:	9404      	str	r4, [sp, #16]
 8011b3e:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8011b42:	9a07      	ldr	r2, [sp, #28]
 8011b44:	688f      	ldr	r7, [r1, #8]
 8011b46:	2a00      	cmp	r2, #0
 8011b48:	f000 81c1 	beq.w	8011ece <forward_dense+0x432>
 8011b4c:	f1a8 0210 	sub.w	r2, r8, #16
 8011b50:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8011b54:	689d      	ldr	r5, [r3, #8]
 8011b56:	0912      	lsrs	r2, r2, #4
 8011b58:	910a      	str	r1, [sp, #40]	; 0x28
 8011b5a:	2100      	movs	r1, #0
 8011b5c:	9b06      	ldr	r3, [sp, #24]
 8011b5e:	3201      	adds	r2, #1
 8011b60:	eddf 2acf 	vldr	s5, [pc, #828]	; 8011ea0 <forward_dense+0x404>
 8011b64:	9105      	str	r1, [sp, #20]
 8011b66:	f008 010f 	and.w	r1, r8, #15
 8011b6a:	0192      	lsls	r2, r2, #6
 8011b6c:	910d      	str	r1, [sp, #52]	; 0x34
 8011b6e:	920c      	str	r2, [sp, #48]	; 0x30
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d042      	beq.n	8011bfa <forward_dense+0x15e>
 8011b74:	699b      	ldr	r3, [r3, #24]
 8011b76:	689c      	ldr	r4, [r3, #8]
 8011b78:	9b04      	ldr	r3, [sp, #16]
 8011b7a:	f1ba 0f00 	cmp.w	sl, #0
 8011b7e:	d041      	beq.n	8011c04 <forward_dense+0x168>
 8011b80:	42b3      	cmp	r3, r6
 8011b82:	d229      	bcs.n	8011bd8 <forward_dense+0x13c>
 8011b84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011b86:	469b      	mov	fp, r3
 8011b88:	ab0f      	add	r3, sp, #60	; 0x3c
 8011b8a:	2a04      	cmp	r2, #4
 8011b8c:	9303      	str	r3, [sp, #12]
 8011b8e:	4633      	mov	r3, r6
 8011b90:	4646      	mov	r6, r8
 8011b92:	4698      	mov	r8, r3
 8011b94:	f000 8154 	beq.w	8011e40 <forward_dense+0x3a4>
 8011b98:	2c00      	cmp	r4, #0
 8011b9a:	f000 8183 	beq.w	8011ea4 <forward_dense+0x408>
 8011b9e:	f8d4 c000 	ldr.w	ip, [r4]
 8011ba2:	463b      	mov	r3, r7
 8011ba4:	4629      	mov	r1, r5
 8011ba6:	9600      	str	r6, [sp, #0]
 8011ba8:	4652      	mov	r2, sl
 8011baa:	9803      	ldr	r0, [sp, #12]
 8011bac:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8011bb0:	f7ff fc86 	bl	80114c0 <ai_dict8_dot_array_f32>
 8011bb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011bb6:	3404      	adds	r4, #4
 8011bb8:	444d      	add	r5, r9
 8011bba:	f84b 3b04 	str.w	r3, [fp], #4
 8011bbe:	45c3      	cmp	fp, r8
 8011bc0:	d3ea      	bcc.n	8011b98 <forward_dense+0xfc>
 8011bc2:	4643      	mov	r3, r8
 8011bc4:	46b0      	mov	r8, r6
 8011bc6:	461e      	mov	r6, r3
 8011bc8:	9a04      	ldr	r2, [sp, #16]
 8011bca:	43d3      	mvns	r3, r2
 8011bcc:	4433      	add	r3, r6
 8011bce:	f023 0303 	bic.w	r3, r3, #3
 8011bd2:	3304      	adds	r3, #4
 8011bd4:	18d3      	adds	r3, r2, r3
 8011bd6:	9304      	str	r3, [sp, #16]
 8011bd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011bda:	9b05      	ldr	r3, [sp, #20]
 8011bdc:	4417      	add	r7, r2
 8011bde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011be0:	3301      	adds	r3, #1
 8011be2:	4416      	add	r6, r2
 8011be4:	9a07      	ldr	r2, [sp, #28]
 8011be6:	9305      	str	r3, [sp, #20]
 8011be8:	4293      	cmp	r3, r2
 8011bea:	f000 8170 	beq.w	8011ece <forward_dense+0x432>
 8011bee:	9b08      	ldr	r3, [sp, #32]
 8011bf0:	699b      	ldr	r3, [r3, #24]
 8011bf2:	689d      	ldr	r5, [r3, #8]
 8011bf4:	9b06      	ldr	r3, [sp, #24]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d1bc      	bne.n	8011b74 <forward_dense+0xd8>
 8011bfa:	461c      	mov	r4, r3
 8011bfc:	9b04      	ldr	r3, [sp, #16]
 8011bfe:	f1ba 0f00 	cmp.w	sl, #0
 8011c02:	d1bd      	bne.n	8011b80 <forward_dense+0xe4>
 8011c04:	42b3      	cmp	r3, r6
 8011c06:	d2e7      	bcs.n	8011bd8 <forward_dense+0x13c>
 8011c08:	4618      	mov	r0, r3
 8011c0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011c0c:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8011c10:	eb07 0c03 	add.w	ip, r7, r3
 8011c14:	469e      	mov	lr, r3
 8011c16:	2c00      	cmp	r4, #0
 8011c18:	f000 80fe 	beq.w	8011e18 <forward_dense+0x37c>
 8011c1c:	f1b8 0f0f 	cmp.w	r8, #15
 8011c20:	ed94 6a00 	vldr	s12, [r4]
 8011c24:	f104 0404 	add.w	r4, r4, #4
 8011c28:	f240 80fc 	bls.w	8011e24 <forward_dense+0x388>
 8011c2c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8011c30:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8011c34:	4641      	mov	r1, r8
 8011c36:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8011ea0 <forward_dense+0x404>
 8011c3a:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 8011c3e:	3910      	subs	r1, #16
 8011c40:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8011c44:	3240      	adds	r2, #64	; 0x40
 8011c46:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 8011c4a:	290f      	cmp	r1, #15
 8011c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011c50:	ed12 7a20 	vldr	s14, [r2, #-128]	; 0xffffff80
 8011c54:	ed12 2a1e 	vldr	s4, [r2, #-120]	; 0xffffff88
 8011c58:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8011c5c:	ed13 3a1e 	vldr	s6, [r3, #-120]	; 0xffffff88
 8011c60:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011c64:	ed52 3a1d 	vldr	s7, [r2, #-116]	; 0xffffff8c
 8011c68:	ed13 4a1d 	vldr	s8, [r3, #-116]	; 0xffffff8c
 8011c6c:	ed52 4a1c 	vldr	s9, [r2, #-112]	; 0xffffff90
 8011c70:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 8011c74:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8011c78:	ed12 7a1b 	vldr	s14, [r2, #-108]	; 0xffffff94
 8011c7c:	eee2 7a03 	vfma.f32	s15, s4, s6
 8011c80:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 8011c84:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 8011c88:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 8011c8c:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 8011c90:	ed53 9a18 	vldr	s19, [r3, #-96]	; 0xffffffa0
 8011c94:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 8011c98:	eee3 7a84 	vfma.f32	s15, s7, s8
 8011c9c:	ed53 8a17 	vldr	s17, [r3, #-92]	; 0xffffffa4
 8011ca0:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 8011ca4:	ed13 0a16 	vldr	s0, [r3, #-88]	; 0xffffffa8
 8011ca8:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 8011cac:	ed12 1a15 	vldr	s2, [r2, #-84]	; 0xffffffac
 8011cb0:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 8011cb4:	eee4 7a85 	vfma.f32	s15, s9, s10
 8011cb8:	ed13 2a14 	vldr	s4, [r3, #-80]	; 0xffffffb0
 8011cbc:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8011cc0:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 8011cc4:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 8011cc8:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 8011ccc:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 8011cd0:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011cd4:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 8011cd8:	ed12 7a11 	vldr	s14, [r2, #-68]	; 0xffffffbc
 8011cdc:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8011ce0:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8011ce4:	eee9 7a89 	vfma.f32	s15, s19, s18
 8011ce8:	eee8 7a88 	vfma.f32	s15, s17, s16
 8011cec:	eee0 7a20 	vfma.f32	s15, s0, s1
 8011cf0:	eee1 7a21 	vfma.f32	s15, s2, s3
 8011cf4:	eee2 7a03 	vfma.f32	s15, s4, s6
 8011cf8:	eee3 7a84 	vfma.f32	s15, s7, s8
 8011cfc:	eee4 7a85 	vfma.f32	s15, s9, s10
 8011d00:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011d04:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011d08:	d897      	bhi.n	8011c3a <forward_dense+0x19e>
 8011d0a:	eb05 010e 	add.w	r1, r5, lr
 8011d0e:	465b      	mov	r3, fp
 8011d10:	4662      	mov	r2, ip
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d075      	beq.n	8011e02 <forward_dense+0x366>
 8011d16:	ed91 7a00 	vldr	s14, [r1]
 8011d1a:	2b01      	cmp	r3, #1
 8011d1c:	edd2 7a00 	vldr	s15, [r2]
 8011d20:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011d24:	d06d      	beq.n	8011e02 <forward_dense+0x366>
 8011d26:	ed91 7a01 	vldr	s14, [r1, #4]
 8011d2a:	2b02      	cmp	r3, #2
 8011d2c:	edd2 7a01 	vldr	s15, [r2, #4]
 8011d30:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011d34:	d065      	beq.n	8011e02 <forward_dense+0x366>
 8011d36:	ed91 7a02 	vldr	s14, [r1, #8]
 8011d3a:	2b03      	cmp	r3, #3
 8011d3c:	edd2 7a02 	vldr	s15, [r2, #8]
 8011d40:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011d44:	d05d      	beq.n	8011e02 <forward_dense+0x366>
 8011d46:	ed91 7a03 	vldr	s14, [r1, #12]
 8011d4a:	2b04      	cmp	r3, #4
 8011d4c:	edd2 7a03 	vldr	s15, [r2, #12]
 8011d50:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011d54:	d055      	beq.n	8011e02 <forward_dense+0x366>
 8011d56:	ed91 7a04 	vldr	s14, [r1, #16]
 8011d5a:	2b05      	cmp	r3, #5
 8011d5c:	edd2 7a04 	vldr	s15, [r2, #16]
 8011d60:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011d64:	d04d      	beq.n	8011e02 <forward_dense+0x366>
 8011d66:	ed91 7a05 	vldr	s14, [r1, #20]
 8011d6a:	2b06      	cmp	r3, #6
 8011d6c:	edd2 7a05 	vldr	s15, [r2, #20]
 8011d70:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011d74:	d045      	beq.n	8011e02 <forward_dense+0x366>
 8011d76:	ed91 7a06 	vldr	s14, [r1, #24]
 8011d7a:	2b07      	cmp	r3, #7
 8011d7c:	edd2 7a06 	vldr	s15, [r2, #24]
 8011d80:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011d84:	d03d      	beq.n	8011e02 <forward_dense+0x366>
 8011d86:	ed91 7a07 	vldr	s14, [r1, #28]
 8011d8a:	2b08      	cmp	r3, #8
 8011d8c:	edd2 7a07 	vldr	s15, [r2, #28]
 8011d90:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011d94:	d035      	beq.n	8011e02 <forward_dense+0x366>
 8011d96:	ed91 7a08 	vldr	s14, [r1, #32]
 8011d9a:	2b09      	cmp	r3, #9
 8011d9c:	edd2 7a08 	vldr	s15, [r2, #32]
 8011da0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011da4:	d02d      	beq.n	8011e02 <forward_dense+0x366>
 8011da6:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8011daa:	2b0a      	cmp	r3, #10
 8011dac:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8011db0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011db4:	d025      	beq.n	8011e02 <forward_dense+0x366>
 8011db6:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8011dba:	2b0b      	cmp	r3, #11
 8011dbc:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8011dc0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011dc4:	d01d      	beq.n	8011e02 <forward_dense+0x366>
 8011dc6:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8011dca:	2b0c      	cmp	r3, #12
 8011dcc:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8011dd0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011dd4:	d015      	beq.n	8011e02 <forward_dense+0x366>
 8011dd6:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8011dda:	2b0d      	cmp	r3, #13
 8011ddc:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8011de0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011de4:	d00d      	beq.n	8011e02 <forward_dense+0x366>
 8011de6:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8011dea:	2b0e      	cmp	r3, #14
 8011dec:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8011df0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011df4:	d005      	beq.n	8011e02 <forward_dense+0x366>
 8011df6:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8011dfa:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8011dfe:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011e02:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011e06:	444d      	add	r5, r9
 8011e08:	ece0 6a01 	vstmia	r0!, {s13}
 8011e0c:	42b0      	cmp	r0, r6
 8011e0e:	f4bf aedb 	bcs.w	8011bc8 <forward_dense+0x12c>
 8011e12:	2c00      	cmp	r4, #0
 8011e14:	f47f af02 	bne.w	8011c1c <forward_dense+0x180>
 8011e18:	f1b8 0f0f 	cmp.w	r8, #15
 8011e1c:	eeb0 6a62 	vmov.f32	s12, s5
 8011e20:	f63f af04 	bhi.w	8011c2c <forward_dense+0x190>
 8011e24:	4643      	mov	r3, r8
 8011e26:	4629      	mov	r1, r5
 8011e28:	463a      	mov	r2, r7
 8011e2a:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8011ea0 <forward_dense+0x404>
 8011e2e:	e770      	b.n	8011d12 <forward_dense+0x276>
 8011e30:	2300      	movs	r3, #0
 8011e32:	685b      	ldr	r3, [r3, #4]
 8011e34:	deff      	udf	#255	; 0xff
 8011e36:	685b      	ldr	r3, [r3, #4]
 8011e38:	deff      	udf	#255	; 0xff
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	685b      	ldr	r3, [r3, #4]
 8011e3e:	deff      	udf	#255	; 0xff
 8011e40:	b1a4      	cbz	r4, 8011e6c <forward_dense+0x3d0>
 8011e42:	f8d4 c000 	ldr.w	ip, [r4]
 8011e46:	463b      	mov	r3, r7
 8011e48:	4629      	mov	r1, r5
 8011e4a:	9600      	str	r6, [sp, #0]
 8011e4c:	4652      	mov	r2, sl
 8011e4e:	9803      	ldr	r0, [sp, #12]
 8011e50:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8011e54:	f7ff fd64 	bl	8011920 <ai_dict4_dot_array_f32>
 8011e58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011e5a:	3404      	adds	r4, #4
 8011e5c:	444d      	add	r5, r9
 8011e5e:	f84b 3b04 	str.w	r3, [fp], #4
 8011e62:	45c3      	cmp	fp, r8
 8011e64:	f4bf aead 	bcs.w	8011bc2 <forward_dense+0x126>
 8011e68:	2c00      	cmp	r4, #0
 8011e6a:	d1ea      	bne.n	8011e42 <forward_dense+0x3a6>
 8011e6c:	4634      	mov	r4, r6
 8011e6e:	4646      	mov	r6, r8
 8011e70:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011e74:	463b      	mov	r3, r7
 8011e76:	4629      	mov	r1, r5
 8011e78:	9400      	str	r4, [sp, #0]
 8011e7a:	4652      	mov	r2, sl
 8011e7c:	4640      	mov	r0, r8
 8011e7e:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 8011e82:	f7ff fd4d 	bl	8011920 <ai_dict4_dot_array_f32>
 8011e86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011e88:	444d      	add	r5, r9
 8011e8a:	f84b 3b04 	str.w	r3, [fp], #4
 8011e8e:	45b3      	cmp	fp, r6
 8011e90:	d3f0      	bcc.n	8011e74 <forward_dense+0x3d8>
 8011e92:	46a0      	mov	r8, r4
 8011e94:	e698      	b.n	8011bc8 <forward_dense+0x12c>
 8011e96:	9006      	str	r0, [sp, #24]
 8011e98:	e62a      	b.n	8011af0 <forward_dense+0x54>
 8011e9a:	9306      	str	r3, [sp, #24]
 8011e9c:	e628      	b.n	8011af0 <forward_dense+0x54>
 8011e9e:	bf00      	nop
 8011ea0:	00000000 	.word	0x00000000
 8011ea4:	4634      	mov	r4, r6
 8011ea6:	4646      	mov	r6, r8
 8011ea8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011eac:	463b      	mov	r3, r7
 8011eae:	4629      	mov	r1, r5
 8011eb0:	9400      	str	r4, [sp, #0]
 8011eb2:	4652      	mov	r2, sl
 8011eb4:	4640      	mov	r0, r8
 8011eb6:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 8011eba:	f7ff fb01 	bl	80114c0 <ai_dict8_dot_array_f32>
 8011ebe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011ec0:	444d      	add	r5, r9
 8011ec2:	f84b 3b04 	str.w	r3, [fp], #4
 8011ec6:	45b3      	cmp	fp, r6
 8011ec8:	d3f0      	bcc.n	8011eac <forward_dense+0x410>
 8011eca:	46a0      	mov	r8, r4
 8011ecc:	e67c      	b.n	8011bc8 <forward_dense+0x12c>
 8011ece:	b011      	add	sp, #68	; 0x44
 8011ed0:	ecbd 8b08 	vpop	{d8-d11}
 8011ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ed8:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8011edc:	e626      	b.n	8011b2c <forward_dense+0x90>
 8011ede:	2300      	movs	r3, #0
 8011ee0:	9306      	str	r3, [sp, #24]
 8011ee2:	e605      	b.n	8011af0 <forward_dense+0x54>
 8011ee4:	9308      	str	r3, [sp, #32]
 8011ee6:	e5f6      	b.n	8011ad6 <forward_dense+0x3a>

08011ee8 <nl_func_relu_generic_array_f32>:
 8011ee8:	b470      	push	{r4, r5, r6}
 8011eea:	edd3 6a02 	vldr	s13, [r3, #8]
 8011eee:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 8011ef2:	6880      	ldr	r0, [r0, #8]
 8011ef4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8011ef8:	4414      	add	r4, r2
 8011efa:	688d      	ldr	r5, [r1, #8]
 8011efc:	00a4      	lsls	r4, r4, #2
 8011efe:	ed93 7a00 	vldr	s14, [r3]
 8011f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f06:	ed93 6a01 	vldr	s12, [r3, #4]
 8011f0a:	eb00 0204 	add.w	r2, r0, r4
 8011f0e:	442c      	add	r4, r5
 8011f10:	d420      	bmi.n	8011f54 <nl_func_relu_generic_array_f32+0x6c>
 8011f12:	42ac      	cmp	r4, r5
 8011f14:	d33b      	bcc.n	8011f8e <nl_func_relu_generic_array_f32+0xa6>
 8011f16:	1d23      	adds	r3, r4, #4
 8011f18:	3204      	adds	r2, #4
 8011f1a:	e010      	b.n	8011f3e <nl_func_relu_generic_array_f32+0x56>
 8011f1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011f20:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8011f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f28:	dd01      	ble.n	8011f2e <nl_func_relu_generic_array_f32+0x46>
 8011f2a:	ee65 7a86 	vmul.f32	s15, s11, s12
 8011f2e:	f1a3 0408 	sub.w	r4, r3, #8
 8011f32:	ed62 7a01 	vstmdb	r2!, {s15}
 8011f36:	4603      	mov	r3, r0
 8011f38:	6888      	ldr	r0, [r1, #8]
 8011f3a:	4284      	cmp	r4, r0
 8011f3c:	d327      	bcc.n	8011f8e <nl_func_relu_generic_array_f32+0xa6>
 8011f3e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011f42:	1f18      	subs	r0, r3, #4
 8011f44:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f4c:	dce6      	bgt.n	8011f1c <nl_func_relu_generic_array_f32+0x34>
 8011f4e:	eef0 7a66 	vmov.f32	s15, s13
 8011f52:	e7ec      	b.n	8011f2e <nl_func_relu_generic_array_f32+0x46>
 8011f54:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8011f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f5c:	d019      	beq.n	8011f92 <nl_func_relu_generic_array_f32+0xaa>
 8011f5e:	42ac      	cmp	r4, r5
 8011f60:	d315      	bcc.n	8011f8e <nl_func_relu_generic_array_f32+0xa6>
 8011f62:	1d23      	adds	r3, r4, #4
 8011f64:	3204      	adds	r2, #4
 8011f66:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011f6a:	1f18      	subs	r0, r3, #4
 8011f6c:	f1a3 0508 	sub.w	r5, r3, #8
 8011f70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011f74:	4603      	mov	r3, r0
 8011f76:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f7e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011f82:	d51c      	bpl.n	8011fbe <nl_func_relu_generic_array_f32+0xd6>
 8011f84:	ed62 6a01 	vstmdb	r2!, {s13}
 8011f88:	6888      	ldr	r0, [r1, #8]
 8011f8a:	42a8      	cmp	r0, r5
 8011f8c:	d9eb      	bls.n	8011f66 <nl_func_relu_generic_array_f32+0x7e>
 8011f8e:	bc70      	pop	{r4, r5, r6}
 8011f90:	4770      	bx	lr
 8011f92:	42ac      	cmp	r4, r5
 8011f94:	d3fb      	bcc.n	8011f8e <nl_func_relu_generic_array_f32+0xa6>
 8011f96:	1d23      	adds	r3, r4, #4
 8011f98:	3204      	adds	r2, #4
 8011f9a:	2600      	movs	r6, #0
 8011f9c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011fa0:	1f18      	subs	r0, r3, #4
 8011fa2:	f1a3 0508 	sub.w	r5, r3, #8
 8011fa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011faa:	4603      	mov	r3, r0
 8011fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fb0:	d80b      	bhi.n	8011fca <nl_func_relu_generic_array_f32+0xe2>
 8011fb2:	ed62 7a01 	vstmdb	r2!, {s15}
 8011fb6:	6888      	ldr	r0, [r1, #8]
 8011fb8:	42a8      	cmp	r0, r5
 8011fba:	d9ef      	bls.n	8011f9c <nl_func_relu_generic_array_f32+0xb4>
 8011fbc:	e7e7      	b.n	8011f8e <nl_func_relu_generic_array_f32+0xa6>
 8011fbe:	ed62 7a01 	vstmdb	r2!, {s15}
 8011fc2:	6888      	ldr	r0, [r1, #8]
 8011fc4:	42a8      	cmp	r0, r5
 8011fc6:	d9ce      	bls.n	8011f66 <nl_func_relu_generic_array_f32+0x7e>
 8011fc8:	e7e1      	b.n	8011f8e <nl_func_relu_generic_array_f32+0xa6>
 8011fca:	f842 6d04 	str.w	r6, [r2, #-4]!
 8011fce:	6888      	ldr	r0, [r1, #8]
 8011fd0:	42a8      	cmp	r0, r5
 8011fd2:	d9e3      	bls.n	8011f9c <nl_func_relu_generic_array_f32+0xb4>
 8011fd4:	e7db      	b.n	8011f8e <nl_func_relu_generic_array_f32+0xa6>
 8011fd6:	bf00      	nop

08011fd8 <forward_relu>:
 8011fd8:	6942      	ldr	r2, [r0, #20]
 8011fda:	8813      	ldrh	r3, [r2, #0]
 8011fdc:	b33b      	cbz	r3, 801202e <forward_relu+0x56>
 8011fde:	b4f0      	push	{r4, r5, r6, r7}
 8011fe0:	6852      	ldr	r2, [r2, #4]
 8011fe2:	6855      	ldr	r5, [r2, #4]
 8011fe4:	b105      	cbz	r5, 8011fe8 <forward_relu+0x10>
 8011fe6:	682d      	ldr	r5, [r5, #0]
 8011fe8:	2b01      	cmp	r3, #1
 8011fea:	d91d      	bls.n	8012028 <forward_relu+0x50>
 8011fec:	6913      	ldr	r3, [r2, #16]
 8011fee:	b103      	cbz	r3, 8011ff2 <forward_relu+0x1a>
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	6982      	ldr	r2, [r0, #24]
 8011ff4:	68ac      	ldr	r4, [r5, #8]
 8011ff6:	6998      	ldr	r0, [r3, #24]
 8011ff8:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8011ffc:	69a9      	ldr	r1, [r5, #24]
 8011ffe:	2a00      	cmp	r2, #0
 8012000:	d040      	beq.n	8012084 <forward_relu+0xac>
 8012002:	e9d2 6301 	ldrd	r6, r3, [r2, #4]
 8012006:	2e01      	cmp	r6, #1
 8012008:	d013      	beq.n	8012032 <forward_relu+0x5a>
 801200a:	2c00      	cmp	r4, #0
 801200c:	d068      	beq.n	80120e0 <forward_relu+0x108>
 801200e:	68ee      	ldr	r6, [r5, #12]
 8012010:	2201      	movs	r2, #1
 8012012:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8012016:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801201a:	42a6      	cmp	r6, r4
 801201c:	fb05 f202 	mul.w	r2, r5, r2
 8012020:	d1f9      	bne.n	8012016 <forward_relu+0x3e>
 8012022:	bcf0      	pop	{r4, r5, r6, r7}
 8012024:	f7ff bf60 	b.w	8011ee8 <nl_func_relu_generic_array_f32>
 8012028:	2300      	movs	r3, #0
 801202a:	685b      	ldr	r3, [r3, #4]
 801202c:	deff      	udf	#255	; 0xff
 801202e:	685b      	ldr	r3, [r3, #4]
 8012030:	deff      	udf	#255	; 0xff
 8012032:	6887      	ldr	r7, [r0, #8]
 8012034:	688a      	ldr	r2, [r1, #8]
 8012036:	ed93 7a00 	vldr	s14, [r3]
 801203a:	b184      	cbz	r4, 801205e <forward_relu+0x86>
 801203c:	68ed      	ldr	r5, [r5, #12]
 801203e:	4630      	mov	r0, r6
 8012040:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8012044:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8012048:	42a5      	cmp	r5, r4
 801204a:	fb03 f000 	mul.w	r0, r3, r0
 801204e:	d1f9      	bne.n	8012044 <forward_relu+0x6c>
 8012050:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012054:	4403      	add	r3, r0
 8012056:	009b      	lsls	r3, r3, #2
 8012058:	18d2      	adds	r2, r2, r3
 801205a:	441f      	add	r7, r3
 801205c:	d236      	bcs.n	80120cc <forward_relu+0xf4>
 801205e:	1d13      	adds	r3, r2, #4
 8012060:	2500      	movs	r5, #0
 8012062:	1d3a      	adds	r2, r7, #4
 8012064:	ed53 7a01 	vldr	s15, [r3, #-4]
 8012068:	1f18      	subs	r0, r3, #4
 801206a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801206e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012072:	d82d      	bhi.n	80120d0 <forward_relu+0xf8>
 8012074:	ed62 7a01 	vstmdb	r2!, {s15}
 8012078:	3b08      	subs	r3, #8
 801207a:	688c      	ldr	r4, [r1, #8]
 801207c:	429c      	cmp	r4, r3
 801207e:	d825      	bhi.n	80120cc <forward_relu+0xf4>
 8012080:	4603      	mov	r3, r0
 8012082:	e7ef      	b.n	8012064 <forward_relu+0x8c>
 8012084:	6880      	ldr	r0, [r0, #8]
 8012086:	688b      	ldr	r3, [r1, #8]
 8012088:	b184      	cbz	r4, 80120ac <forward_relu+0xd4>
 801208a:	68ee      	ldr	r6, [r5, #12]
 801208c:	2201      	movs	r2, #1
 801208e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8012092:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012096:	42a6      	cmp	r6, r4
 8012098:	fb05 f202 	mul.w	r2, r5, r2
 801209c:	d1f9      	bne.n	8012092 <forward_relu+0xba>
 801209e:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 80120a2:	4414      	add	r4, r2
 80120a4:	00a2      	lsls	r2, r4, #2
 80120a6:	189b      	adds	r3, r3, r2
 80120a8:	4410      	add	r0, r2
 80120aa:	d20f      	bcs.n	80120cc <forward_relu+0xf4>
 80120ac:	3304      	adds	r3, #4
 80120ae:	3004      	adds	r0, #4
 80120b0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80120e4 <forward_relu+0x10c>
 80120b4:	ed53 7a01 	vldr	s15, [r3, #-4]
 80120b8:	f1a3 0208 	sub.w	r2, r3, #8
 80120bc:	3b04      	subs	r3, #4
 80120be:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80120c2:	ed60 7a01 	vstmdb	r0!, {s15}
 80120c6:	688c      	ldr	r4, [r1, #8]
 80120c8:	4294      	cmp	r4, r2
 80120ca:	d9f3      	bls.n	80120b4 <forward_relu+0xdc>
 80120cc:	bcf0      	pop	{r4, r5, r6, r7}
 80120ce:	4770      	bx	lr
 80120d0:	f842 5d04 	str.w	r5, [r2, #-4]!
 80120d4:	3b08      	subs	r3, #8
 80120d6:	688c      	ldr	r4, [r1, #8]
 80120d8:	429c      	cmp	r4, r3
 80120da:	d8f7      	bhi.n	80120cc <forward_relu+0xf4>
 80120dc:	4603      	mov	r3, r0
 80120de:	e7c1      	b.n	8012064 <forward_relu+0x8c>
 80120e0:	2201      	movs	r2, #1
 80120e2:	e79e      	b.n	8012022 <forward_relu+0x4a>
 80120e4:	00000000 	.word	0x00000000

080120e8 <forward_sm>:
 80120e8:	6942      	ldr	r2, [r0, #20]
 80120ea:	8813      	ldrh	r3, [r2, #0]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	f000 8085 	beq.w	80121fc <forward_sm+0x114>
 80120f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120f6:	ed2d 8b04 	vpush	{d8-d9}
 80120fa:	6852      	ldr	r2, [r2, #4]
 80120fc:	b085      	sub	sp, #20
 80120fe:	6855      	ldr	r5, [r2, #4]
 8012100:	b105      	cbz	r5, 8012104 <forward_sm+0x1c>
 8012102:	682d      	ldr	r5, [r5, #0]
 8012104:	2b01      	cmp	r3, #1
 8012106:	d971      	bls.n	80121ec <forward_sm+0x104>
 8012108:	6913      	ldr	r3, [r2, #16]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d06c      	beq.n	80121e8 <forward_sm+0x100>
 801210e:	681f      	ldr	r7, [r3, #0]
 8012110:	68e9      	ldr	r1, [r5, #12]
 8012112:	68fa      	ldr	r2, [r7, #12]
 8012114:	68ab      	ldr	r3, [r5, #8]
 8012116:	6850      	ldr	r0, [r2, #4]
 8012118:	0a1b      	lsrs	r3, r3, #8
 801211a:	684a      	ldr	r2, [r1, #4]
 801211c:	9201      	str	r2, [sp, #4]
 801211e:	d06f      	beq.n	8012200 <forward_sm+0x118>
 8012120:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012124:	2401      	movs	r4, #1
 8012126:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801212a:	4299      	cmp	r1, r3
 801212c:	fb02 f404 	mul.w	r4, r2, r4
 8012130:	d1f9      	bne.n	8012126 <forward_sm+0x3e>
 8012132:	9901      	ldr	r1, [sp, #4]
 8012134:	69ae      	ldr	r6, [r5, #24]
 8012136:	1a63      	subs	r3, r4, r1
 8012138:	f8d7 9018 	ldr.w	r9, [r7, #24]
 801213c:	1a24      	subs	r4, r4, r0
 801213e:	68b5      	ldr	r5, [r6, #8]
 8012140:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8012144:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8012148:	68f3      	ldr	r3, [r6, #12]
 801214a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801214e:	429d      	cmp	r5, r3
 8012150:	d340      	bcc.n	80121d4 <forward_sm+0xec>
 8012152:	008b      	lsls	r3, r1, #2
 8012154:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8012158:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801215c:	9300      	str	r3, [sp, #0]
 801215e:	425b      	negs	r3, r3
 8012160:	f1c8 0200 	rsb	r2, r8, #0
 8012164:	9302      	str	r3, [sp, #8]
 8012166:	9203      	str	r2, [sp, #12]
 8012168:	9b01      	ldr	r3, [sp, #4]
 801216a:	60b5      	str	r5, [r6, #8]
 801216c:	2b01      	cmp	r3, #1
 801216e:	f8c9 4008 	str.w	r4, [r9, #8]
 8012172:	68b2      	ldr	r2, [r6, #8]
 8012174:	ed92 8a00 	vldr	s16, [r2]
 8012178:	d93b      	bls.n	80121f2 <forward_sm+0x10a>
 801217a:	9900      	ldr	r1, [sp, #0]
 801217c:	1d13      	adds	r3, r2, #4
 801217e:	1857      	adds	r7, r2, r1
 8012180:	ecf3 7a01 	vldmia	r3!, {s15}
 8012184:	429f      	cmp	r7, r3
 8012186:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 801218a:	d1f9      	bne.n	8012180 <forward_sm+0x98>
 801218c:	4692      	mov	sl, r2
 801218e:	46a3      	mov	fp, r4
 8012190:	46a0      	mov	r8, r4
 8012192:	eddf 8a1d 	vldr	s17, [pc, #116]	; 8012208 <forward_sm+0x120>
 8012196:	ecba 0a01 	vldmia	sl!, {s0}
 801219a:	ee30 0a48 	vsub.f32	s0, s0, s16
 801219e:	f003 f833 	bl	8015208 <expf>
 80121a2:	4557      	cmp	r7, sl
 80121a4:	eca8 0a01 	vstmia	r8!, {s0}
 80121a8:	ee78 8a80 	vadd.f32	s17, s17, s0
 80121ac:	d1f3      	bne.n	8012196 <forward_sm+0xae>
 80121ae:	ee89 7a28 	vdiv.f32	s14, s18, s17
 80121b2:	9b00      	ldr	r3, [sp, #0]
 80121b4:	18e2      	adds	r2, r4, r3
 80121b6:	eddb 7a00 	vldr	s15, [fp]
 80121ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80121be:	eceb 7a01 	vstmia	fp!, {s15}
 80121c2:	455a      	cmp	r2, fp
 80121c4:	d1f7      	bne.n	80121b6 <forward_sm+0xce>
 80121c6:	9b02      	ldr	r3, [sp, #8]
 80121c8:	9a03      	ldr	r2, [sp, #12]
 80121ca:	441d      	add	r5, r3
 80121cc:	68f3      	ldr	r3, [r6, #12]
 80121ce:	4414      	add	r4, r2
 80121d0:	429d      	cmp	r5, r3
 80121d2:	d2c9      	bcs.n	8012168 <forward_sm+0x80>
 80121d4:	60b3      	str	r3, [r6, #8]
 80121d6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80121da:	f8c9 3008 	str.w	r3, [r9, #8]
 80121de:	b005      	add	sp, #20
 80121e0:	ecbd 8b04 	vpop	{d8-d9}
 80121e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121e8:	68db      	ldr	r3, [r3, #12]
 80121ea:	deff      	udf	#255	; 0xff
 80121ec:	2300      	movs	r3, #0
 80121ee:	685b      	ldr	r3, [r3, #4]
 80121f0:	deff      	udf	#255	; 0xff
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d0e7      	beq.n	80121c6 <forward_sm+0xde>
 80121f6:	9b00      	ldr	r3, [sp, #0]
 80121f8:	18d7      	adds	r7, r2, r3
 80121fa:	e7c7      	b.n	801218c <forward_sm+0xa4>
 80121fc:	685b      	ldr	r3, [r3, #4]
 80121fe:	deff      	udf	#255	; 0xff
 8012200:	2401      	movs	r4, #1
 8012202:	4611      	mov	r1, r2
 8012204:	e796      	b.n	8012134 <forward_sm+0x4c>
 8012206:	bf00      	nop
 8012208:	00000000 	.word	0x00000000

0801220c <ai_check_custom_types>:
 801220c:	4b13      	ldr	r3, [pc, #76]	; (801225c <ai_check_custom_types+0x50>)
 801220e:	b082      	sub	sp, #8
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	9301      	str	r3, [sp, #4]
 8012214:	b118      	cbz	r0, 801221e <ai_check_custom_types+0x12>
 8012216:	7803      	ldrb	r3, [r0, #0]
 8012218:	2b03      	cmp	r3, #3
 801221a:	d002      	beq.n	8012222 <ai_check_custom_types+0x16>
 801221c:	2000      	movs	r0, #0
 801221e:	b002      	add	sp, #8
 8012220:	4770      	bx	lr
 8012222:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012226:	4293      	cmp	r3, r2
 8012228:	d004      	beq.n	8012234 <ai_check_custom_types+0x28>
 801222a:	2001      	movs	r0, #1
 801222c:	f080 0001 	eor.w	r0, r0, #1
 8012230:	b002      	add	sp, #8
 8012232:	4770      	bx	lr
 8012234:	7842      	ldrb	r2, [r0, #1]
 8012236:	3001      	adds	r0, #1
 8012238:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801223c:	429a      	cmp	r2, r3
 801223e:	d1f4      	bne.n	801222a <ai_check_custom_types+0x1e>
 8012240:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8012244:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012248:	429a      	cmp	r2, r3
 801224a:	d1ee      	bne.n	801222a <ai_check_custom_types+0x1e>
 801224c:	7842      	ldrb	r2, [r0, #1]
 801224e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012252:	429a      	cmp	r2, r3
 8012254:	d1e9      	bne.n	801222a <ai_check_custom_types+0x1e>
 8012256:	2000      	movs	r0, #0
 8012258:	e7e8      	b.n	801222c <ai_check_custom_types+0x20>
 801225a:	bf00      	nop
 801225c:	08016098 	.word	0x08016098

08012260 <ai_layers_forward_all>:
 8012260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012262:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8012264:	4604      	mov	r4, r0
 8012266:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8012268:	b316      	cbz	r6, 80122b0 <ai_layers_forward_all+0x50>
 801226a:	b1c5      	cbz	r5, 801229e <ai_layers_forward_all+0x3e>
 801226c:	6545      	str	r5, [r0, #84]	; 0x54
 801226e:	4629      	mov	r1, r5
 8012270:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8012272:	2001      	movs	r0, #1
 8012274:	47b0      	blx	r6
 8012276:	2700      	movs	r7, #0
 8012278:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801227a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801227c:	2002      	movs	r0, #2
 801227e:	47b0      	blx	r6
 8012280:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8012282:	692b      	ldr	r3, [r5, #16]
 8012284:	4628      	mov	r0, r5
 8012286:	4798      	blx	r3
 8012288:	68eb      	ldr	r3, [r5, #12]
 801228a:	2003      	movs	r0, #3
 801228c:	429d      	cmp	r5, r3
 801228e:	4619      	mov	r1, r3
 8012290:	d006      	beq.n	80122a0 <ai_layers_forward_all+0x40>
 8012292:	6563      	str	r3, [r4, #84]	; 0x54
 8012294:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8012296:	47b0      	blx	r6
 8012298:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801229a:	2900      	cmp	r1, #0
 801229c:	d1ed      	bne.n	801227a <ai_layers_forward_all+0x1a>
 801229e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122a0:	2100      	movs	r1, #0
 80122a2:	6567      	str	r7, [r4, #84]	; 0x54
 80122a4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80122a6:	47b0      	blx	r6
 80122a8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80122aa:	2900      	cmp	r1, #0
 80122ac:	d1e5      	bne.n	801227a <ai_layers_forward_all+0x1a>
 80122ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122b0:	2d00      	cmp	r5, #0
 80122b2:	d0f4      	beq.n	801229e <ai_layers_forward_all+0x3e>
 80122b4:	6545      	str	r5, [r0, #84]	; 0x54
 80122b6:	692b      	ldr	r3, [r5, #16]
 80122b8:	4628      	mov	r0, r5
 80122ba:	4798      	blx	r3
 80122bc:	68eb      	ldr	r3, [r5, #12]
 80122be:	42ab      	cmp	r3, r5
 80122c0:	461d      	mov	r5, r3
 80122c2:	d003      	beq.n	80122cc <ai_layers_forward_all+0x6c>
 80122c4:	6563      	str	r3, [r4, #84]	; 0x54
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d1f5      	bne.n	80122b6 <ai_layers_forward_all+0x56>
 80122ca:	e7e8      	b.n	801229e <ai_layers_forward_all+0x3e>
 80122cc:	2300      	movs	r3, #0
 80122ce:	6563      	str	r3, [r4, #84]	; 0x54
 80122d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122d2:	bf00      	nop

080122d4 <ai_array_to_buffer_fmt>:
 80122d4:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80122d8:	2b02      	cmp	r3, #2
 80122da:	d01f      	beq.n	801231c <ai_array_to_buffer_fmt+0x48>
 80122dc:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 80122e0:	4a1b      	ldr	r2, [pc, #108]	; (8012350 <ai_array_to_buffer_fmt+0x7c>)
 80122e2:	4293      	cmp	r3, r2
 80122e4:	d00a      	beq.n	80122fc <ai_array_to_buffer_fmt+0x28>
 80122e6:	dc0d      	bgt.n	8012304 <ai_array_to_buffer_fmt+0x30>
 80122e8:	4a1a      	ldr	r2, [pc, #104]	; (8012354 <ai_array_to_buffer_fmt+0x80>)
 80122ea:	4293      	cmp	r3, r2
 80122ec:	d006      	beq.n	80122fc <ai_array_to_buffer_fmt+0x28>
 80122ee:	dd1d      	ble.n	801232c <ai_array_to_buffer_fmt+0x58>
 80122f0:	4a19      	ldr	r2, [pc, #100]	; (8012358 <ai_array_to_buffer_fmt+0x84>)
 80122f2:	4293      	cmp	r3, r2
 80122f4:	d002      	beq.n	80122fc <ai_array_to_buffer_fmt+0x28>
 80122f6:	320f      	adds	r2, #15
 80122f8:	4293      	cmp	r3, r2
 80122fa:	d10d      	bne.n	8012318 <ai_array_to_buffer_fmt+0x44>
 80122fc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8012300:	4318      	orrs	r0, r3
 8012302:	4770      	bx	lr
 8012304:	4a15      	ldr	r2, [pc, #84]	; (801235c <ai_array_to_buffer_fmt+0x88>)
 8012306:	4293      	cmp	r3, r2
 8012308:	d0f8      	beq.n	80122fc <ai_array_to_buffer_fmt+0x28>
 801230a:	dd18      	ble.n	801233e <ai_array_to_buffer_fmt+0x6a>
 801230c:	4a14      	ldr	r2, [pc, #80]	; (8012360 <ai_array_to_buffer_fmt+0x8c>)
 801230e:	4293      	cmp	r3, r2
 8012310:	d0f4      	beq.n	80122fc <ai_array_to_buffer_fmt+0x28>
 8012312:	4a14      	ldr	r2, [pc, #80]	; (8012364 <ai_array_to_buffer_fmt+0x90>)
 8012314:	4293      	cmp	r3, r2
 8012316:	d0f1      	beq.n	80122fc <ai_array_to_buffer_fmt+0x28>
 8012318:	2340      	movs	r3, #64	; 0x40
 801231a:	e7ef      	b.n	80122fc <ai_array_to_buffer_fmt+0x28>
 801231c:	4b12      	ldr	r3, [pc, #72]	; (8012368 <ai_array_to_buffer_fmt+0x94>)
 801231e:	4003      	ands	r3, r0
 8012320:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8012324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012328:	4318      	orrs	r0, r3
 801232a:	4770      	bx	lr
 801232c:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8012330:	4293      	cmp	r3, r2
 8012332:	d0e3      	beq.n	80122fc <ai_array_to_buffer_fmt+0x28>
 8012334:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012338:	4293      	cmp	r3, r2
 801233a:	d0df      	beq.n	80122fc <ai_array_to_buffer_fmt+0x28>
 801233c:	e7ec      	b.n	8012318 <ai_array_to_buffer_fmt+0x44>
 801233e:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8012342:	4293      	cmp	r3, r2
 8012344:	d0da      	beq.n	80122fc <ai_array_to_buffer_fmt+0x28>
 8012346:	3207      	adds	r2, #7
 8012348:	4293      	cmp	r3, r2
 801234a:	d0d7      	beq.n	80122fc <ai_array_to_buffer_fmt+0x28>
 801234c:	e7e4      	b.n	8012318 <ai_array_to_buffer_fmt+0x44>
 801234e:	bf00      	nop
 8012350:	00840040 	.word	0x00840040
 8012354:	00040447 	.word	0x00040447
 8012358:	00040840 	.word	0x00040840
 801235c:	00840840 	.word	0x00840840
 8012360:	0084084f 	.word	0x0084084f
 8012364:	01821040 	.word	0x01821040
 8012368:	00803fff 	.word	0x00803fff

0801236c <ai_array_get_byte_size>:
 801236c:	b1e1      	cbz	r1, 80123a8 <ai_array_get_byte_size+0x3c>
 801236e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8012372:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8012376:	b410      	push	{r4}
 8012378:	f3c0 3482 	ubfx	r4, r0, #14, #3
 801237c:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8012380:	4423      	add	r3, r4
 8012382:	2804      	cmp	r0, #4
 8012384:	fb01 f103 	mul.w	r1, r1, r3
 8012388:	f101 0107 	add.w	r1, r1, #7
 801238c:	f021 0107 	bic.w	r1, r1, #7
 8012390:	fa21 f102 	lsr.w	r1, r1, r2
 8012394:	d00a      	beq.n	80123ac <ai_array_get_byte_size+0x40>
 8012396:	2808      	cmp	r0, #8
 8012398:	d101      	bne.n	801239e <ai_array_get_byte_size+0x32>
 801239a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801239e:	3107      	adds	r1, #7
 80123a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80123a4:	08c8      	lsrs	r0, r1, #3
 80123a6:	4770      	bx	lr
 80123a8:	4608      	mov	r0, r1
 80123aa:	4770      	bx	lr
 80123ac:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80123b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80123b4:	3107      	adds	r1, #7
 80123b6:	08c8      	lsrs	r0, r1, #3
 80123b8:	4770      	bx	lr
 80123ba:	bf00      	nop

080123bc <__errno>:
 80123bc:	4b01      	ldr	r3, [pc, #4]	; (80123c4 <__errno+0x8>)
 80123be:	6818      	ldr	r0, [r3, #0]
 80123c0:	4770      	bx	lr
 80123c2:	bf00      	nop
 80123c4:	200006a4 	.word	0x200006a4

080123c8 <__libc_init_array>:
 80123c8:	b570      	push	{r4, r5, r6, lr}
 80123ca:	4d0d      	ldr	r5, [pc, #52]	; (8012400 <__libc_init_array+0x38>)
 80123cc:	4c0d      	ldr	r4, [pc, #52]	; (8012404 <__libc_init_array+0x3c>)
 80123ce:	1b64      	subs	r4, r4, r5
 80123d0:	10a4      	asrs	r4, r4, #2
 80123d2:	2600      	movs	r6, #0
 80123d4:	42a6      	cmp	r6, r4
 80123d6:	d109      	bne.n	80123ec <__libc_init_array+0x24>
 80123d8:	4d0b      	ldr	r5, [pc, #44]	; (8012408 <__libc_init_array+0x40>)
 80123da:	4c0c      	ldr	r4, [pc, #48]	; (801240c <__libc_init_array+0x44>)
 80123dc:	f003 f876 	bl	80154cc <_init>
 80123e0:	1b64      	subs	r4, r4, r5
 80123e2:	10a4      	asrs	r4, r4, #2
 80123e4:	2600      	movs	r6, #0
 80123e6:	42a6      	cmp	r6, r4
 80123e8:	d105      	bne.n	80123f6 <__libc_init_array+0x2e>
 80123ea:	bd70      	pop	{r4, r5, r6, pc}
 80123ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80123f0:	4798      	blx	r3
 80123f2:	3601      	adds	r6, #1
 80123f4:	e7ee      	b.n	80123d4 <__libc_init_array+0xc>
 80123f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80123fa:	4798      	blx	r3
 80123fc:	3601      	adds	r6, #1
 80123fe:	e7f2      	b.n	80123e6 <__libc_init_array+0x1e>
 8012400:	08025470 	.word	0x08025470
 8012404:	08025470 	.word	0x08025470
 8012408:	08025470 	.word	0x08025470
 801240c:	08025474 	.word	0x08025474

08012410 <malloc>:
 8012410:	4b02      	ldr	r3, [pc, #8]	; (801241c <malloc+0xc>)
 8012412:	4601      	mov	r1, r0
 8012414:	6818      	ldr	r0, [r3, #0]
 8012416:	f000 b871 	b.w	80124fc <_malloc_r>
 801241a:	bf00      	nop
 801241c:	200006a4 	.word	0x200006a4

08012420 <free>:
 8012420:	4b02      	ldr	r3, [pc, #8]	; (801242c <free+0xc>)
 8012422:	4601      	mov	r1, r0
 8012424:	6818      	ldr	r0, [r3, #0]
 8012426:	f000 b819 	b.w	801245c <_free_r>
 801242a:	bf00      	nop
 801242c:	200006a4 	.word	0x200006a4

08012430 <memcpy>:
 8012430:	440a      	add	r2, r1
 8012432:	4291      	cmp	r1, r2
 8012434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012438:	d100      	bne.n	801243c <memcpy+0xc>
 801243a:	4770      	bx	lr
 801243c:	b510      	push	{r4, lr}
 801243e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012442:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012446:	4291      	cmp	r1, r2
 8012448:	d1f9      	bne.n	801243e <memcpy+0xe>
 801244a:	bd10      	pop	{r4, pc}

0801244c <memset>:
 801244c:	4402      	add	r2, r0
 801244e:	4603      	mov	r3, r0
 8012450:	4293      	cmp	r3, r2
 8012452:	d100      	bne.n	8012456 <memset+0xa>
 8012454:	4770      	bx	lr
 8012456:	f803 1b01 	strb.w	r1, [r3], #1
 801245a:	e7f9      	b.n	8012450 <memset+0x4>

0801245c <_free_r>:
 801245c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801245e:	2900      	cmp	r1, #0
 8012460:	d048      	beq.n	80124f4 <_free_r+0x98>
 8012462:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012466:	9001      	str	r0, [sp, #4]
 8012468:	2b00      	cmp	r3, #0
 801246a:	f1a1 0404 	sub.w	r4, r1, #4
 801246e:	bfb8      	it	lt
 8012470:	18e4      	addlt	r4, r4, r3
 8012472:	f001 fd35 	bl	8013ee0 <__malloc_lock>
 8012476:	4a20      	ldr	r2, [pc, #128]	; (80124f8 <_free_r+0x9c>)
 8012478:	9801      	ldr	r0, [sp, #4]
 801247a:	6813      	ldr	r3, [r2, #0]
 801247c:	4615      	mov	r5, r2
 801247e:	b933      	cbnz	r3, 801248e <_free_r+0x32>
 8012480:	6063      	str	r3, [r4, #4]
 8012482:	6014      	str	r4, [r2, #0]
 8012484:	b003      	add	sp, #12
 8012486:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801248a:	f001 bd2f 	b.w	8013eec <__malloc_unlock>
 801248e:	42a3      	cmp	r3, r4
 8012490:	d90b      	bls.n	80124aa <_free_r+0x4e>
 8012492:	6821      	ldr	r1, [r4, #0]
 8012494:	1862      	adds	r2, r4, r1
 8012496:	4293      	cmp	r3, r2
 8012498:	bf04      	itt	eq
 801249a:	681a      	ldreq	r2, [r3, #0]
 801249c:	685b      	ldreq	r3, [r3, #4]
 801249e:	6063      	str	r3, [r4, #4]
 80124a0:	bf04      	itt	eq
 80124a2:	1852      	addeq	r2, r2, r1
 80124a4:	6022      	streq	r2, [r4, #0]
 80124a6:	602c      	str	r4, [r5, #0]
 80124a8:	e7ec      	b.n	8012484 <_free_r+0x28>
 80124aa:	461a      	mov	r2, r3
 80124ac:	685b      	ldr	r3, [r3, #4]
 80124ae:	b10b      	cbz	r3, 80124b4 <_free_r+0x58>
 80124b0:	42a3      	cmp	r3, r4
 80124b2:	d9fa      	bls.n	80124aa <_free_r+0x4e>
 80124b4:	6811      	ldr	r1, [r2, #0]
 80124b6:	1855      	adds	r5, r2, r1
 80124b8:	42a5      	cmp	r5, r4
 80124ba:	d10b      	bne.n	80124d4 <_free_r+0x78>
 80124bc:	6824      	ldr	r4, [r4, #0]
 80124be:	4421      	add	r1, r4
 80124c0:	1854      	adds	r4, r2, r1
 80124c2:	42a3      	cmp	r3, r4
 80124c4:	6011      	str	r1, [r2, #0]
 80124c6:	d1dd      	bne.n	8012484 <_free_r+0x28>
 80124c8:	681c      	ldr	r4, [r3, #0]
 80124ca:	685b      	ldr	r3, [r3, #4]
 80124cc:	6053      	str	r3, [r2, #4]
 80124ce:	4421      	add	r1, r4
 80124d0:	6011      	str	r1, [r2, #0]
 80124d2:	e7d7      	b.n	8012484 <_free_r+0x28>
 80124d4:	d902      	bls.n	80124dc <_free_r+0x80>
 80124d6:	230c      	movs	r3, #12
 80124d8:	6003      	str	r3, [r0, #0]
 80124da:	e7d3      	b.n	8012484 <_free_r+0x28>
 80124dc:	6825      	ldr	r5, [r4, #0]
 80124de:	1961      	adds	r1, r4, r5
 80124e0:	428b      	cmp	r3, r1
 80124e2:	bf04      	itt	eq
 80124e4:	6819      	ldreq	r1, [r3, #0]
 80124e6:	685b      	ldreq	r3, [r3, #4]
 80124e8:	6063      	str	r3, [r4, #4]
 80124ea:	bf04      	itt	eq
 80124ec:	1949      	addeq	r1, r1, r5
 80124ee:	6021      	streq	r1, [r4, #0]
 80124f0:	6054      	str	r4, [r2, #4]
 80124f2:	e7c7      	b.n	8012484 <_free_r+0x28>
 80124f4:	b003      	add	sp, #12
 80124f6:	bd30      	pop	{r4, r5, pc}
 80124f8:	20000934 	.word	0x20000934

080124fc <_malloc_r>:
 80124fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124fe:	1ccd      	adds	r5, r1, #3
 8012500:	f025 0503 	bic.w	r5, r5, #3
 8012504:	3508      	adds	r5, #8
 8012506:	2d0c      	cmp	r5, #12
 8012508:	bf38      	it	cc
 801250a:	250c      	movcc	r5, #12
 801250c:	2d00      	cmp	r5, #0
 801250e:	4606      	mov	r6, r0
 8012510:	db01      	blt.n	8012516 <_malloc_r+0x1a>
 8012512:	42a9      	cmp	r1, r5
 8012514:	d903      	bls.n	801251e <_malloc_r+0x22>
 8012516:	230c      	movs	r3, #12
 8012518:	6033      	str	r3, [r6, #0]
 801251a:	2000      	movs	r0, #0
 801251c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801251e:	f001 fcdf 	bl	8013ee0 <__malloc_lock>
 8012522:	4921      	ldr	r1, [pc, #132]	; (80125a8 <_malloc_r+0xac>)
 8012524:	680a      	ldr	r2, [r1, #0]
 8012526:	4614      	mov	r4, r2
 8012528:	b99c      	cbnz	r4, 8012552 <_malloc_r+0x56>
 801252a:	4f20      	ldr	r7, [pc, #128]	; (80125ac <_malloc_r+0xb0>)
 801252c:	683b      	ldr	r3, [r7, #0]
 801252e:	b923      	cbnz	r3, 801253a <_malloc_r+0x3e>
 8012530:	4621      	mov	r1, r4
 8012532:	4630      	mov	r0, r6
 8012534:	f000 fcfe 	bl	8012f34 <_sbrk_r>
 8012538:	6038      	str	r0, [r7, #0]
 801253a:	4629      	mov	r1, r5
 801253c:	4630      	mov	r0, r6
 801253e:	f000 fcf9 	bl	8012f34 <_sbrk_r>
 8012542:	1c43      	adds	r3, r0, #1
 8012544:	d123      	bne.n	801258e <_malloc_r+0x92>
 8012546:	230c      	movs	r3, #12
 8012548:	6033      	str	r3, [r6, #0]
 801254a:	4630      	mov	r0, r6
 801254c:	f001 fcce 	bl	8013eec <__malloc_unlock>
 8012550:	e7e3      	b.n	801251a <_malloc_r+0x1e>
 8012552:	6823      	ldr	r3, [r4, #0]
 8012554:	1b5b      	subs	r3, r3, r5
 8012556:	d417      	bmi.n	8012588 <_malloc_r+0x8c>
 8012558:	2b0b      	cmp	r3, #11
 801255a:	d903      	bls.n	8012564 <_malloc_r+0x68>
 801255c:	6023      	str	r3, [r4, #0]
 801255e:	441c      	add	r4, r3
 8012560:	6025      	str	r5, [r4, #0]
 8012562:	e004      	b.n	801256e <_malloc_r+0x72>
 8012564:	6863      	ldr	r3, [r4, #4]
 8012566:	42a2      	cmp	r2, r4
 8012568:	bf0c      	ite	eq
 801256a:	600b      	streq	r3, [r1, #0]
 801256c:	6053      	strne	r3, [r2, #4]
 801256e:	4630      	mov	r0, r6
 8012570:	f001 fcbc 	bl	8013eec <__malloc_unlock>
 8012574:	f104 000b 	add.w	r0, r4, #11
 8012578:	1d23      	adds	r3, r4, #4
 801257a:	f020 0007 	bic.w	r0, r0, #7
 801257e:	1ac2      	subs	r2, r0, r3
 8012580:	d0cc      	beq.n	801251c <_malloc_r+0x20>
 8012582:	1a1b      	subs	r3, r3, r0
 8012584:	50a3      	str	r3, [r4, r2]
 8012586:	e7c9      	b.n	801251c <_malloc_r+0x20>
 8012588:	4622      	mov	r2, r4
 801258a:	6864      	ldr	r4, [r4, #4]
 801258c:	e7cc      	b.n	8012528 <_malloc_r+0x2c>
 801258e:	1cc4      	adds	r4, r0, #3
 8012590:	f024 0403 	bic.w	r4, r4, #3
 8012594:	42a0      	cmp	r0, r4
 8012596:	d0e3      	beq.n	8012560 <_malloc_r+0x64>
 8012598:	1a21      	subs	r1, r4, r0
 801259a:	4630      	mov	r0, r6
 801259c:	f000 fcca 	bl	8012f34 <_sbrk_r>
 80125a0:	3001      	adds	r0, #1
 80125a2:	d1dd      	bne.n	8012560 <_malloc_r+0x64>
 80125a4:	e7cf      	b.n	8012546 <_malloc_r+0x4a>
 80125a6:	bf00      	nop
 80125a8:	20000934 	.word	0x20000934
 80125ac:	20000938 	.word	0x20000938

080125b0 <__cvt>:
 80125b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80125b4:	ec55 4b10 	vmov	r4, r5, d0
 80125b8:	2d00      	cmp	r5, #0
 80125ba:	460e      	mov	r6, r1
 80125bc:	4619      	mov	r1, r3
 80125be:	462b      	mov	r3, r5
 80125c0:	bfbb      	ittet	lt
 80125c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80125c6:	461d      	movlt	r5, r3
 80125c8:	2300      	movge	r3, #0
 80125ca:	232d      	movlt	r3, #45	; 0x2d
 80125cc:	700b      	strb	r3, [r1, #0]
 80125ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80125d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80125d4:	4691      	mov	r9, r2
 80125d6:	f023 0820 	bic.w	r8, r3, #32
 80125da:	bfbc      	itt	lt
 80125dc:	4622      	movlt	r2, r4
 80125de:	4614      	movlt	r4, r2
 80125e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80125e4:	d005      	beq.n	80125f2 <__cvt+0x42>
 80125e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80125ea:	d100      	bne.n	80125ee <__cvt+0x3e>
 80125ec:	3601      	adds	r6, #1
 80125ee:	2102      	movs	r1, #2
 80125f0:	e000      	b.n	80125f4 <__cvt+0x44>
 80125f2:	2103      	movs	r1, #3
 80125f4:	ab03      	add	r3, sp, #12
 80125f6:	9301      	str	r3, [sp, #4]
 80125f8:	ab02      	add	r3, sp, #8
 80125fa:	9300      	str	r3, [sp, #0]
 80125fc:	ec45 4b10 	vmov	d0, r4, r5
 8012600:	4653      	mov	r3, sl
 8012602:	4632      	mov	r2, r6
 8012604:	f000 fd70 	bl	80130e8 <_dtoa_r>
 8012608:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801260c:	4607      	mov	r7, r0
 801260e:	d102      	bne.n	8012616 <__cvt+0x66>
 8012610:	f019 0f01 	tst.w	r9, #1
 8012614:	d022      	beq.n	801265c <__cvt+0xac>
 8012616:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801261a:	eb07 0906 	add.w	r9, r7, r6
 801261e:	d110      	bne.n	8012642 <__cvt+0x92>
 8012620:	783b      	ldrb	r3, [r7, #0]
 8012622:	2b30      	cmp	r3, #48	; 0x30
 8012624:	d10a      	bne.n	801263c <__cvt+0x8c>
 8012626:	2200      	movs	r2, #0
 8012628:	2300      	movs	r3, #0
 801262a:	4620      	mov	r0, r4
 801262c:	4629      	mov	r1, r5
 801262e:	f7ee fa7b 	bl	8000b28 <__aeabi_dcmpeq>
 8012632:	b918      	cbnz	r0, 801263c <__cvt+0x8c>
 8012634:	f1c6 0601 	rsb	r6, r6, #1
 8012638:	f8ca 6000 	str.w	r6, [sl]
 801263c:	f8da 3000 	ldr.w	r3, [sl]
 8012640:	4499      	add	r9, r3
 8012642:	2200      	movs	r2, #0
 8012644:	2300      	movs	r3, #0
 8012646:	4620      	mov	r0, r4
 8012648:	4629      	mov	r1, r5
 801264a:	f7ee fa6d 	bl	8000b28 <__aeabi_dcmpeq>
 801264e:	b108      	cbz	r0, 8012654 <__cvt+0xa4>
 8012650:	f8cd 900c 	str.w	r9, [sp, #12]
 8012654:	2230      	movs	r2, #48	; 0x30
 8012656:	9b03      	ldr	r3, [sp, #12]
 8012658:	454b      	cmp	r3, r9
 801265a:	d307      	bcc.n	801266c <__cvt+0xbc>
 801265c:	9b03      	ldr	r3, [sp, #12]
 801265e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012660:	1bdb      	subs	r3, r3, r7
 8012662:	4638      	mov	r0, r7
 8012664:	6013      	str	r3, [r2, #0]
 8012666:	b004      	add	sp, #16
 8012668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801266c:	1c59      	adds	r1, r3, #1
 801266e:	9103      	str	r1, [sp, #12]
 8012670:	701a      	strb	r2, [r3, #0]
 8012672:	e7f0      	b.n	8012656 <__cvt+0xa6>

08012674 <__exponent>:
 8012674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012676:	4603      	mov	r3, r0
 8012678:	2900      	cmp	r1, #0
 801267a:	bfb8      	it	lt
 801267c:	4249      	neglt	r1, r1
 801267e:	f803 2b02 	strb.w	r2, [r3], #2
 8012682:	bfb4      	ite	lt
 8012684:	222d      	movlt	r2, #45	; 0x2d
 8012686:	222b      	movge	r2, #43	; 0x2b
 8012688:	2909      	cmp	r1, #9
 801268a:	7042      	strb	r2, [r0, #1]
 801268c:	dd2a      	ble.n	80126e4 <__exponent+0x70>
 801268e:	f10d 0407 	add.w	r4, sp, #7
 8012692:	46a4      	mov	ip, r4
 8012694:	270a      	movs	r7, #10
 8012696:	46a6      	mov	lr, r4
 8012698:	460a      	mov	r2, r1
 801269a:	fb91 f6f7 	sdiv	r6, r1, r7
 801269e:	fb07 1516 	mls	r5, r7, r6, r1
 80126a2:	3530      	adds	r5, #48	; 0x30
 80126a4:	2a63      	cmp	r2, #99	; 0x63
 80126a6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80126aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80126ae:	4631      	mov	r1, r6
 80126b0:	dcf1      	bgt.n	8012696 <__exponent+0x22>
 80126b2:	3130      	adds	r1, #48	; 0x30
 80126b4:	f1ae 0502 	sub.w	r5, lr, #2
 80126b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80126bc:	1c44      	adds	r4, r0, #1
 80126be:	4629      	mov	r1, r5
 80126c0:	4561      	cmp	r1, ip
 80126c2:	d30a      	bcc.n	80126da <__exponent+0x66>
 80126c4:	f10d 0209 	add.w	r2, sp, #9
 80126c8:	eba2 020e 	sub.w	r2, r2, lr
 80126cc:	4565      	cmp	r5, ip
 80126ce:	bf88      	it	hi
 80126d0:	2200      	movhi	r2, #0
 80126d2:	4413      	add	r3, r2
 80126d4:	1a18      	subs	r0, r3, r0
 80126d6:	b003      	add	sp, #12
 80126d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80126de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80126e2:	e7ed      	b.n	80126c0 <__exponent+0x4c>
 80126e4:	2330      	movs	r3, #48	; 0x30
 80126e6:	3130      	adds	r1, #48	; 0x30
 80126e8:	7083      	strb	r3, [r0, #2]
 80126ea:	70c1      	strb	r1, [r0, #3]
 80126ec:	1d03      	adds	r3, r0, #4
 80126ee:	e7f1      	b.n	80126d4 <__exponent+0x60>

080126f0 <_printf_float>:
 80126f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126f4:	ed2d 8b02 	vpush	{d8}
 80126f8:	b08d      	sub	sp, #52	; 0x34
 80126fa:	460c      	mov	r4, r1
 80126fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012700:	4616      	mov	r6, r2
 8012702:	461f      	mov	r7, r3
 8012704:	4605      	mov	r5, r0
 8012706:	f001 fbe3 	bl	8013ed0 <_localeconv_r>
 801270a:	f8d0 a000 	ldr.w	sl, [r0]
 801270e:	4650      	mov	r0, sl
 8012710:	f7ed fd88 	bl	8000224 <strlen>
 8012714:	2300      	movs	r3, #0
 8012716:	930a      	str	r3, [sp, #40]	; 0x28
 8012718:	6823      	ldr	r3, [r4, #0]
 801271a:	9305      	str	r3, [sp, #20]
 801271c:	f8d8 3000 	ldr.w	r3, [r8]
 8012720:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012724:	3307      	adds	r3, #7
 8012726:	f023 0307 	bic.w	r3, r3, #7
 801272a:	f103 0208 	add.w	r2, r3, #8
 801272e:	f8c8 2000 	str.w	r2, [r8]
 8012732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012736:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801273a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801273e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012742:	9307      	str	r3, [sp, #28]
 8012744:	f8cd 8018 	str.w	r8, [sp, #24]
 8012748:	ee08 0a10 	vmov	s16, r0
 801274c:	4b9f      	ldr	r3, [pc, #636]	; (80129cc <_printf_float+0x2dc>)
 801274e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012752:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012756:	f7ee fa19 	bl	8000b8c <__aeabi_dcmpun>
 801275a:	bb88      	cbnz	r0, 80127c0 <_printf_float+0xd0>
 801275c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012760:	4b9a      	ldr	r3, [pc, #616]	; (80129cc <_printf_float+0x2dc>)
 8012762:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012766:	f7ee f9f3 	bl	8000b50 <__aeabi_dcmple>
 801276a:	bb48      	cbnz	r0, 80127c0 <_printf_float+0xd0>
 801276c:	2200      	movs	r2, #0
 801276e:	2300      	movs	r3, #0
 8012770:	4640      	mov	r0, r8
 8012772:	4649      	mov	r1, r9
 8012774:	f7ee f9e2 	bl	8000b3c <__aeabi_dcmplt>
 8012778:	b110      	cbz	r0, 8012780 <_printf_float+0x90>
 801277a:	232d      	movs	r3, #45	; 0x2d
 801277c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012780:	4b93      	ldr	r3, [pc, #588]	; (80129d0 <_printf_float+0x2e0>)
 8012782:	4894      	ldr	r0, [pc, #592]	; (80129d4 <_printf_float+0x2e4>)
 8012784:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012788:	bf94      	ite	ls
 801278a:	4698      	movls	r8, r3
 801278c:	4680      	movhi	r8, r0
 801278e:	2303      	movs	r3, #3
 8012790:	6123      	str	r3, [r4, #16]
 8012792:	9b05      	ldr	r3, [sp, #20]
 8012794:	f023 0204 	bic.w	r2, r3, #4
 8012798:	6022      	str	r2, [r4, #0]
 801279a:	f04f 0900 	mov.w	r9, #0
 801279e:	9700      	str	r7, [sp, #0]
 80127a0:	4633      	mov	r3, r6
 80127a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80127a4:	4621      	mov	r1, r4
 80127a6:	4628      	mov	r0, r5
 80127a8:	f000 f9d8 	bl	8012b5c <_printf_common>
 80127ac:	3001      	adds	r0, #1
 80127ae:	f040 8090 	bne.w	80128d2 <_printf_float+0x1e2>
 80127b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80127b6:	b00d      	add	sp, #52	; 0x34
 80127b8:	ecbd 8b02 	vpop	{d8}
 80127bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127c0:	4642      	mov	r2, r8
 80127c2:	464b      	mov	r3, r9
 80127c4:	4640      	mov	r0, r8
 80127c6:	4649      	mov	r1, r9
 80127c8:	f7ee f9e0 	bl	8000b8c <__aeabi_dcmpun>
 80127cc:	b140      	cbz	r0, 80127e0 <_printf_float+0xf0>
 80127ce:	464b      	mov	r3, r9
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	bfbc      	itt	lt
 80127d4:	232d      	movlt	r3, #45	; 0x2d
 80127d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80127da:	487f      	ldr	r0, [pc, #508]	; (80129d8 <_printf_float+0x2e8>)
 80127dc:	4b7f      	ldr	r3, [pc, #508]	; (80129dc <_printf_float+0x2ec>)
 80127de:	e7d1      	b.n	8012784 <_printf_float+0x94>
 80127e0:	6863      	ldr	r3, [r4, #4]
 80127e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80127e6:	9206      	str	r2, [sp, #24]
 80127e8:	1c5a      	adds	r2, r3, #1
 80127ea:	d13f      	bne.n	801286c <_printf_float+0x17c>
 80127ec:	2306      	movs	r3, #6
 80127ee:	6063      	str	r3, [r4, #4]
 80127f0:	9b05      	ldr	r3, [sp, #20]
 80127f2:	6861      	ldr	r1, [r4, #4]
 80127f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80127f8:	2300      	movs	r3, #0
 80127fa:	9303      	str	r3, [sp, #12]
 80127fc:	ab0a      	add	r3, sp, #40	; 0x28
 80127fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012802:	ab09      	add	r3, sp, #36	; 0x24
 8012804:	ec49 8b10 	vmov	d0, r8, r9
 8012808:	9300      	str	r3, [sp, #0]
 801280a:	6022      	str	r2, [r4, #0]
 801280c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012810:	4628      	mov	r0, r5
 8012812:	f7ff fecd 	bl	80125b0 <__cvt>
 8012816:	9b06      	ldr	r3, [sp, #24]
 8012818:	9909      	ldr	r1, [sp, #36]	; 0x24
 801281a:	2b47      	cmp	r3, #71	; 0x47
 801281c:	4680      	mov	r8, r0
 801281e:	d108      	bne.n	8012832 <_printf_float+0x142>
 8012820:	1cc8      	adds	r0, r1, #3
 8012822:	db02      	blt.n	801282a <_printf_float+0x13a>
 8012824:	6863      	ldr	r3, [r4, #4]
 8012826:	4299      	cmp	r1, r3
 8012828:	dd41      	ble.n	80128ae <_printf_float+0x1be>
 801282a:	f1ab 0b02 	sub.w	fp, fp, #2
 801282e:	fa5f fb8b 	uxtb.w	fp, fp
 8012832:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012836:	d820      	bhi.n	801287a <_printf_float+0x18a>
 8012838:	3901      	subs	r1, #1
 801283a:	465a      	mov	r2, fp
 801283c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012840:	9109      	str	r1, [sp, #36]	; 0x24
 8012842:	f7ff ff17 	bl	8012674 <__exponent>
 8012846:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012848:	1813      	adds	r3, r2, r0
 801284a:	2a01      	cmp	r2, #1
 801284c:	4681      	mov	r9, r0
 801284e:	6123      	str	r3, [r4, #16]
 8012850:	dc02      	bgt.n	8012858 <_printf_float+0x168>
 8012852:	6822      	ldr	r2, [r4, #0]
 8012854:	07d2      	lsls	r2, r2, #31
 8012856:	d501      	bpl.n	801285c <_printf_float+0x16c>
 8012858:	3301      	adds	r3, #1
 801285a:	6123      	str	r3, [r4, #16]
 801285c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012860:	2b00      	cmp	r3, #0
 8012862:	d09c      	beq.n	801279e <_printf_float+0xae>
 8012864:	232d      	movs	r3, #45	; 0x2d
 8012866:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801286a:	e798      	b.n	801279e <_printf_float+0xae>
 801286c:	9a06      	ldr	r2, [sp, #24]
 801286e:	2a47      	cmp	r2, #71	; 0x47
 8012870:	d1be      	bne.n	80127f0 <_printf_float+0x100>
 8012872:	2b00      	cmp	r3, #0
 8012874:	d1bc      	bne.n	80127f0 <_printf_float+0x100>
 8012876:	2301      	movs	r3, #1
 8012878:	e7b9      	b.n	80127ee <_printf_float+0xfe>
 801287a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801287e:	d118      	bne.n	80128b2 <_printf_float+0x1c2>
 8012880:	2900      	cmp	r1, #0
 8012882:	6863      	ldr	r3, [r4, #4]
 8012884:	dd0b      	ble.n	801289e <_printf_float+0x1ae>
 8012886:	6121      	str	r1, [r4, #16]
 8012888:	b913      	cbnz	r3, 8012890 <_printf_float+0x1a0>
 801288a:	6822      	ldr	r2, [r4, #0]
 801288c:	07d0      	lsls	r0, r2, #31
 801288e:	d502      	bpl.n	8012896 <_printf_float+0x1a6>
 8012890:	3301      	adds	r3, #1
 8012892:	440b      	add	r3, r1
 8012894:	6123      	str	r3, [r4, #16]
 8012896:	65a1      	str	r1, [r4, #88]	; 0x58
 8012898:	f04f 0900 	mov.w	r9, #0
 801289c:	e7de      	b.n	801285c <_printf_float+0x16c>
 801289e:	b913      	cbnz	r3, 80128a6 <_printf_float+0x1b6>
 80128a0:	6822      	ldr	r2, [r4, #0]
 80128a2:	07d2      	lsls	r2, r2, #31
 80128a4:	d501      	bpl.n	80128aa <_printf_float+0x1ba>
 80128a6:	3302      	adds	r3, #2
 80128a8:	e7f4      	b.n	8012894 <_printf_float+0x1a4>
 80128aa:	2301      	movs	r3, #1
 80128ac:	e7f2      	b.n	8012894 <_printf_float+0x1a4>
 80128ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80128b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128b4:	4299      	cmp	r1, r3
 80128b6:	db05      	blt.n	80128c4 <_printf_float+0x1d4>
 80128b8:	6823      	ldr	r3, [r4, #0]
 80128ba:	6121      	str	r1, [r4, #16]
 80128bc:	07d8      	lsls	r0, r3, #31
 80128be:	d5ea      	bpl.n	8012896 <_printf_float+0x1a6>
 80128c0:	1c4b      	adds	r3, r1, #1
 80128c2:	e7e7      	b.n	8012894 <_printf_float+0x1a4>
 80128c4:	2900      	cmp	r1, #0
 80128c6:	bfd4      	ite	le
 80128c8:	f1c1 0202 	rsble	r2, r1, #2
 80128cc:	2201      	movgt	r2, #1
 80128ce:	4413      	add	r3, r2
 80128d0:	e7e0      	b.n	8012894 <_printf_float+0x1a4>
 80128d2:	6823      	ldr	r3, [r4, #0]
 80128d4:	055a      	lsls	r2, r3, #21
 80128d6:	d407      	bmi.n	80128e8 <_printf_float+0x1f8>
 80128d8:	6923      	ldr	r3, [r4, #16]
 80128da:	4642      	mov	r2, r8
 80128dc:	4631      	mov	r1, r6
 80128de:	4628      	mov	r0, r5
 80128e0:	47b8      	blx	r7
 80128e2:	3001      	adds	r0, #1
 80128e4:	d12c      	bne.n	8012940 <_printf_float+0x250>
 80128e6:	e764      	b.n	80127b2 <_printf_float+0xc2>
 80128e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80128ec:	f240 80e0 	bls.w	8012ab0 <_printf_float+0x3c0>
 80128f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80128f4:	2200      	movs	r2, #0
 80128f6:	2300      	movs	r3, #0
 80128f8:	f7ee f916 	bl	8000b28 <__aeabi_dcmpeq>
 80128fc:	2800      	cmp	r0, #0
 80128fe:	d034      	beq.n	801296a <_printf_float+0x27a>
 8012900:	4a37      	ldr	r2, [pc, #220]	; (80129e0 <_printf_float+0x2f0>)
 8012902:	2301      	movs	r3, #1
 8012904:	4631      	mov	r1, r6
 8012906:	4628      	mov	r0, r5
 8012908:	47b8      	blx	r7
 801290a:	3001      	adds	r0, #1
 801290c:	f43f af51 	beq.w	80127b2 <_printf_float+0xc2>
 8012910:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012914:	429a      	cmp	r2, r3
 8012916:	db02      	blt.n	801291e <_printf_float+0x22e>
 8012918:	6823      	ldr	r3, [r4, #0]
 801291a:	07d8      	lsls	r0, r3, #31
 801291c:	d510      	bpl.n	8012940 <_printf_float+0x250>
 801291e:	ee18 3a10 	vmov	r3, s16
 8012922:	4652      	mov	r2, sl
 8012924:	4631      	mov	r1, r6
 8012926:	4628      	mov	r0, r5
 8012928:	47b8      	blx	r7
 801292a:	3001      	adds	r0, #1
 801292c:	f43f af41 	beq.w	80127b2 <_printf_float+0xc2>
 8012930:	f04f 0800 	mov.w	r8, #0
 8012934:	f104 091a 	add.w	r9, r4, #26
 8012938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801293a:	3b01      	subs	r3, #1
 801293c:	4543      	cmp	r3, r8
 801293e:	dc09      	bgt.n	8012954 <_printf_float+0x264>
 8012940:	6823      	ldr	r3, [r4, #0]
 8012942:	079b      	lsls	r3, r3, #30
 8012944:	f100 8105 	bmi.w	8012b52 <_printf_float+0x462>
 8012948:	68e0      	ldr	r0, [r4, #12]
 801294a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801294c:	4298      	cmp	r0, r3
 801294e:	bfb8      	it	lt
 8012950:	4618      	movlt	r0, r3
 8012952:	e730      	b.n	80127b6 <_printf_float+0xc6>
 8012954:	2301      	movs	r3, #1
 8012956:	464a      	mov	r2, r9
 8012958:	4631      	mov	r1, r6
 801295a:	4628      	mov	r0, r5
 801295c:	47b8      	blx	r7
 801295e:	3001      	adds	r0, #1
 8012960:	f43f af27 	beq.w	80127b2 <_printf_float+0xc2>
 8012964:	f108 0801 	add.w	r8, r8, #1
 8012968:	e7e6      	b.n	8012938 <_printf_float+0x248>
 801296a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801296c:	2b00      	cmp	r3, #0
 801296e:	dc39      	bgt.n	80129e4 <_printf_float+0x2f4>
 8012970:	4a1b      	ldr	r2, [pc, #108]	; (80129e0 <_printf_float+0x2f0>)
 8012972:	2301      	movs	r3, #1
 8012974:	4631      	mov	r1, r6
 8012976:	4628      	mov	r0, r5
 8012978:	47b8      	blx	r7
 801297a:	3001      	adds	r0, #1
 801297c:	f43f af19 	beq.w	80127b2 <_printf_float+0xc2>
 8012980:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012984:	4313      	orrs	r3, r2
 8012986:	d102      	bne.n	801298e <_printf_float+0x29e>
 8012988:	6823      	ldr	r3, [r4, #0]
 801298a:	07d9      	lsls	r1, r3, #31
 801298c:	d5d8      	bpl.n	8012940 <_printf_float+0x250>
 801298e:	ee18 3a10 	vmov	r3, s16
 8012992:	4652      	mov	r2, sl
 8012994:	4631      	mov	r1, r6
 8012996:	4628      	mov	r0, r5
 8012998:	47b8      	blx	r7
 801299a:	3001      	adds	r0, #1
 801299c:	f43f af09 	beq.w	80127b2 <_printf_float+0xc2>
 80129a0:	f04f 0900 	mov.w	r9, #0
 80129a4:	f104 0a1a 	add.w	sl, r4, #26
 80129a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129aa:	425b      	negs	r3, r3
 80129ac:	454b      	cmp	r3, r9
 80129ae:	dc01      	bgt.n	80129b4 <_printf_float+0x2c4>
 80129b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80129b2:	e792      	b.n	80128da <_printf_float+0x1ea>
 80129b4:	2301      	movs	r3, #1
 80129b6:	4652      	mov	r2, sl
 80129b8:	4631      	mov	r1, r6
 80129ba:	4628      	mov	r0, r5
 80129bc:	47b8      	blx	r7
 80129be:	3001      	adds	r0, #1
 80129c0:	f43f aef7 	beq.w	80127b2 <_printf_float+0xc2>
 80129c4:	f109 0901 	add.w	r9, r9, #1
 80129c8:	e7ee      	b.n	80129a8 <_printf_float+0x2b8>
 80129ca:	bf00      	nop
 80129cc:	7fefffff 	.word	0x7fefffff
 80129d0:	08025014 	.word	0x08025014
 80129d4:	08025018 	.word	0x08025018
 80129d8:	08025020 	.word	0x08025020
 80129dc:	0802501c 	.word	0x0802501c
 80129e0:	08025024 	.word	0x08025024
 80129e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80129e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80129e8:	429a      	cmp	r2, r3
 80129ea:	bfa8      	it	ge
 80129ec:	461a      	movge	r2, r3
 80129ee:	2a00      	cmp	r2, #0
 80129f0:	4691      	mov	r9, r2
 80129f2:	dc37      	bgt.n	8012a64 <_printf_float+0x374>
 80129f4:	f04f 0b00 	mov.w	fp, #0
 80129f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80129fc:	f104 021a 	add.w	r2, r4, #26
 8012a00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012a02:	9305      	str	r3, [sp, #20]
 8012a04:	eba3 0309 	sub.w	r3, r3, r9
 8012a08:	455b      	cmp	r3, fp
 8012a0a:	dc33      	bgt.n	8012a74 <_printf_float+0x384>
 8012a0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012a10:	429a      	cmp	r2, r3
 8012a12:	db3b      	blt.n	8012a8c <_printf_float+0x39c>
 8012a14:	6823      	ldr	r3, [r4, #0]
 8012a16:	07da      	lsls	r2, r3, #31
 8012a18:	d438      	bmi.n	8012a8c <_printf_float+0x39c>
 8012a1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a1c:	9b05      	ldr	r3, [sp, #20]
 8012a1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012a20:	1ad3      	subs	r3, r2, r3
 8012a22:	eba2 0901 	sub.w	r9, r2, r1
 8012a26:	4599      	cmp	r9, r3
 8012a28:	bfa8      	it	ge
 8012a2a:	4699      	movge	r9, r3
 8012a2c:	f1b9 0f00 	cmp.w	r9, #0
 8012a30:	dc35      	bgt.n	8012a9e <_printf_float+0x3ae>
 8012a32:	f04f 0800 	mov.w	r8, #0
 8012a36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012a3a:	f104 0a1a 	add.w	sl, r4, #26
 8012a3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012a42:	1a9b      	subs	r3, r3, r2
 8012a44:	eba3 0309 	sub.w	r3, r3, r9
 8012a48:	4543      	cmp	r3, r8
 8012a4a:	f77f af79 	ble.w	8012940 <_printf_float+0x250>
 8012a4e:	2301      	movs	r3, #1
 8012a50:	4652      	mov	r2, sl
 8012a52:	4631      	mov	r1, r6
 8012a54:	4628      	mov	r0, r5
 8012a56:	47b8      	blx	r7
 8012a58:	3001      	adds	r0, #1
 8012a5a:	f43f aeaa 	beq.w	80127b2 <_printf_float+0xc2>
 8012a5e:	f108 0801 	add.w	r8, r8, #1
 8012a62:	e7ec      	b.n	8012a3e <_printf_float+0x34e>
 8012a64:	4613      	mov	r3, r2
 8012a66:	4631      	mov	r1, r6
 8012a68:	4642      	mov	r2, r8
 8012a6a:	4628      	mov	r0, r5
 8012a6c:	47b8      	blx	r7
 8012a6e:	3001      	adds	r0, #1
 8012a70:	d1c0      	bne.n	80129f4 <_printf_float+0x304>
 8012a72:	e69e      	b.n	80127b2 <_printf_float+0xc2>
 8012a74:	2301      	movs	r3, #1
 8012a76:	4631      	mov	r1, r6
 8012a78:	4628      	mov	r0, r5
 8012a7a:	9205      	str	r2, [sp, #20]
 8012a7c:	47b8      	blx	r7
 8012a7e:	3001      	adds	r0, #1
 8012a80:	f43f ae97 	beq.w	80127b2 <_printf_float+0xc2>
 8012a84:	9a05      	ldr	r2, [sp, #20]
 8012a86:	f10b 0b01 	add.w	fp, fp, #1
 8012a8a:	e7b9      	b.n	8012a00 <_printf_float+0x310>
 8012a8c:	ee18 3a10 	vmov	r3, s16
 8012a90:	4652      	mov	r2, sl
 8012a92:	4631      	mov	r1, r6
 8012a94:	4628      	mov	r0, r5
 8012a96:	47b8      	blx	r7
 8012a98:	3001      	adds	r0, #1
 8012a9a:	d1be      	bne.n	8012a1a <_printf_float+0x32a>
 8012a9c:	e689      	b.n	80127b2 <_printf_float+0xc2>
 8012a9e:	9a05      	ldr	r2, [sp, #20]
 8012aa0:	464b      	mov	r3, r9
 8012aa2:	4442      	add	r2, r8
 8012aa4:	4631      	mov	r1, r6
 8012aa6:	4628      	mov	r0, r5
 8012aa8:	47b8      	blx	r7
 8012aaa:	3001      	adds	r0, #1
 8012aac:	d1c1      	bne.n	8012a32 <_printf_float+0x342>
 8012aae:	e680      	b.n	80127b2 <_printf_float+0xc2>
 8012ab0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012ab2:	2a01      	cmp	r2, #1
 8012ab4:	dc01      	bgt.n	8012aba <_printf_float+0x3ca>
 8012ab6:	07db      	lsls	r3, r3, #31
 8012ab8:	d538      	bpl.n	8012b2c <_printf_float+0x43c>
 8012aba:	2301      	movs	r3, #1
 8012abc:	4642      	mov	r2, r8
 8012abe:	4631      	mov	r1, r6
 8012ac0:	4628      	mov	r0, r5
 8012ac2:	47b8      	blx	r7
 8012ac4:	3001      	adds	r0, #1
 8012ac6:	f43f ae74 	beq.w	80127b2 <_printf_float+0xc2>
 8012aca:	ee18 3a10 	vmov	r3, s16
 8012ace:	4652      	mov	r2, sl
 8012ad0:	4631      	mov	r1, r6
 8012ad2:	4628      	mov	r0, r5
 8012ad4:	47b8      	blx	r7
 8012ad6:	3001      	adds	r0, #1
 8012ad8:	f43f ae6b 	beq.w	80127b2 <_printf_float+0xc2>
 8012adc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	f7ee f820 	bl	8000b28 <__aeabi_dcmpeq>
 8012ae8:	b9d8      	cbnz	r0, 8012b22 <_printf_float+0x432>
 8012aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012aec:	f108 0201 	add.w	r2, r8, #1
 8012af0:	3b01      	subs	r3, #1
 8012af2:	4631      	mov	r1, r6
 8012af4:	4628      	mov	r0, r5
 8012af6:	47b8      	blx	r7
 8012af8:	3001      	adds	r0, #1
 8012afa:	d10e      	bne.n	8012b1a <_printf_float+0x42a>
 8012afc:	e659      	b.n	80127b2 <_printf_float+0xc2>
 8012afe:	2301      	movs	r3, #1
 8012b00:	4652      	mov	r2, sl
 8012b02:	4631      	mov	r1, r6
 8012b04:	4628      	mov	r0, r5
 8012b06:	47b8      	blx	r7
 8012b08:	3001      	adds	r0, #1
 8012b0a:	f43f ae52 	beq.w	80127b2 <_printf_float+0xc2>
 8012b0e:	f108 0801 	add.w	r8, r8, #1
 8012b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b14:	3b01      	subs	r3, #1
 8012b16:	4543      	cmp	r3, r8
 8012b18:	dcf1      	bgt.n	8012afe <_printf_float+0x40e>
 8012b1a:	464b      	mov	r3, r9
 8012b1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012b20:	e6dc      	b.n	80128dc <_printf_float+0x1ec>
 8012b22:	f04f 0800 	mov.w	r8, #0
 8012b26:	f104 0a1a 	add.w	sl, r4, #26
 8012b2a:	e7f2      	b.n	8012b12 <_printf_float+0x422>
 8012b2c:	2301      	movs	r3, #1
 8012b2e:	4642      	mov	r2, r8
 8012b30:	e7df      	b.n	8012af2 <_printf_float+0x402>
 8012b32:	2301      	movs	r3, #1
 8012b34:	464a      	mov	r2, r9
 8012b36:	4631      	mov	r1, r6
 8012b38:	4628      	mov	r0, r5
 8012b3a:	47b8      	blx	r7
 8012b3c:	3001      	adds	r0, #1
 8012b3e:	f43f ae38 	beq.w	80127b2 <_printf_float+0xc2>
 8012b42:	f108 0801 	add.w	r8, r8, #1
 8012b46:	68e3      	ldr	r3, [r4, #12]
 8012b48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012b4a:	1a5b      	subs	r3, r3, r1
 8012b4c:	4543      	cmp	r3, r8
 8012b4e:	dcf0      	bgt.n	8012b32 <_printf_float+0x442>
 8012b50:	e6fa      	b.n	8012948 <_printf_float+0x258>
 8012b52:	f04f 0800 	mov.w	r8, #0
 8012b56:	f104 0919 	add.w	r9, r4, #25
 8012b5a:	e7f4      	b.n	8012b46 <_printf_float+0x456>

08012b5c <_printf_common>:
 8012b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b60:	4616      	mov	r6, r2
 8012b62:	4699      	mov	r9, r3
 8012b64:	688a      	ldr	r2, [r1, #8]
 8012b66:	690b      	ldr	r3, [r1, #16]
 8012b68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012b6c:	4293      	cmp	r3, r2
 8012b6e:	bfb8      	it	lt
 8012b70:	4613      	movlt	r3, r2
 8012b72:	6033      	str	r3, [r6, #0]
 8012b74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012b78:	4607      	mov	r7, r0
 8012b7a:	460c      	mov	r4, r1
 8012b7c:	b10a      	cbz	r2, 8012b82 <_printf_common+0x26>
 8012b7e:	3301      	adds	r3, #1
 8012b80:	6033      	str	r3, [r6, #0]
 8012b82:	6823      	ldr	r3, [r4, #0]
 8012b84:	0699      	lsls	r1, r3, #26
 8012b86:	bf42      	ittt	mi
 8012b88:	6833      	ldrmi	r3, [r6, #0]
 8012b8a:	3302      	addmi	r3, #2
 8012b8c:	6033      	strmi	r3, [r6, #0]
 8012b8e:	6825      	ldr	r5, [r4, #0]
 8012b90:	f015 0506 	ands.w	r5, r5, #6
 8012b94:	d106      	bne.n	8012ba4 <_printf_common+0x48>
 8012b96:	f104 0a19 	add.w	sl, r4, #25
 8012b9a:	68e3      	ldr	r3, [r4, #12]
 8012b9c:	6832      	ldr	r2, [r6, #0]
 8012b9e:	1a9b      	subs	r3, r3, r2
 8012ba0:	42ab      	cmp	r3, r5
 8012ba2:	dc26      	bgt.n	8012bf2 <_printf_common+0x96>
 8012ba4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012ba8:	1e13      	subs	r3, r2, #0
 8012baa:	6822      	ldr	r2, [r4, #0]
 8012bac:	bf18      	it	ne
 8012bae:	2301      	movne	r3, #1
 8012bb0:	0692      	lsls	r2, r2, #26
 8012bb2:	d42b      	bmi.n	8012c0c <_printf_common+0xb0>
 8012bb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012bb8:	4649      	mov	r1, r9
 8012bba:	4638      	mov	r0, r7
 8012bbc:	47c0      	blx	r8
 8012bbe:	3001      	adds	r0, #1
 8012bc0:	d01e      	beq.n	8012c00 <_printf_common+0xa4>
 8012bc2:	6823      	ldr	r3, [r4, #0]
 8012bc4:	68e5      	ldr	r5, [r4, #12]
 8012bc6:	6832      	ldr	r2, [r6, #0]
 8012bc8:	f003 0306 	and.w	r3, r3, #6
 8012bcc:	2b04      	cmp	r3, #4
 8012bce:	bf08      	it	eq
 8012bd0:	1aad      	subeq	r5, r5, r2
 8012bd2:	68a3      	ldr	r3, [r4, #8]
 8012bd4:	6922      	ldr	r2, [r4, #16]
 8012bd6:	bf0c      	ite	eq
 8012bd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012bdc:	2500      	movne	r5, #0
 8012bde:	4293      	cmp	r3, r2
 8012be0:	bfc4      	itt	gt
 8012be2:	1a9b      	subgt	r3, r3, r2
 8012be4:	18ed      	addgt	r5, r5, r3
 8012be6:	2600      	movs	r6, #0
 8012be8:	341a      	adds	r4, #26
 8012bea:	42b5      	cmp	r5, r6
 8012bec:	d11a      	bne.n	8012c24 <_printf_common+0xc8>
 8012bee:	2000      	movs	r0, #0
 8012bf0:	e008      	b.n	8012c04 <_printf_common+0xa8>
 8012bf2:	2301      	movs	r3, #1
 8012bf4:	4652      	mov	r2, sl
 8012bf6:	4649      	mov	r1, r9
 8012bf8:	4638      	mov	r0, r7
 8012bfa:	47c0      	blx	r8
 8012bfc:	3001      	adds	r0, #1
 8012bfe:	d103      	bne.n	8012c08 <_printf_common+0xac>
 8012c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c08:	3501      	adds	r5, #1
 8012c0a:	e7c6      	b.n	8012b9a <_printf_common+0x3e>
 8012c0c:	18e1      	adds	r1, r4, r3
 8012c0e:	1c5a      	adds	r2, r3, #1
 8012c10:	2030      	movs	r0, #48	; 0x30
 8012c12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012c16:	4422      	add	r2, r4
 8012c18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012c1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012c20:	3302      	adds	r3, #2
 8012c22:	e7c7      	b.n	8012bb4 <_printf_common+0x58>
 8012c24:	2301      	movs	r3, #1
 8012c26:	4622      	mov	r2, r4
 8012c28:	4649      	mov	r1, r9
 8012c2a:	4638      	mov	r0, r7
 8012c2c:	47c0      	blx	r8
 8012c2e:	3001      	adds	r0, #1
 8012c30:	d0e6      	beq.n	8012c00 <_printf_common+0xa4>
 8012c32:	3601      	adds	r6, #1
 8012c34:	e7d9      	b.n	8012bea <_printf_common+0x8e>
	...

08012c38 <_printf_i>:
 8012c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c3c:	460c      	mov	r4, r1
 8012c3e:	4691      	mov	r9, r2
 8012c40:	7e27      	ldrb	r7, [r4, #24]
 8012c42:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012c44:	2f78      	cmp	r7, #120	; 0x78
 8012c46:	4680      	mov	r8, r0
 8012c48:	469a      	mov	sl, r3
 8012c4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012c4e:	d807      	bhi.n	8012c60 <_printf_i+0x28>
 8012c50:	2f62      	cmp	r7, #98	; 0x62
 8012c52:	d80a      	bhi.n	8012c6a <_printf_i+0x32>
 8012c54:	2f00      	cmp	r7, #0
 8012c56:	f000 80d8 	beq.w	8012e0a <_printf_i+0x1d2>
 8012c5a:	2f58      	cmp	r7, #88	; 0x58
 8012c5c:	f000 80a3 	beq.w	8012da6 <_printf_i+0x16e>
 8012c60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012c64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012c68:	e03a      	b.n	8012ce0 <_printf_i+0xa8>
 8012c6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012c6e:	2b15      	cmp	r3, #21
 8012c70:	d8f6      	bhi.n	8012c60 <_printf_i+0x28>
 8012c72:	a001      	add	r0, pc, #4	; (adr r0, 8012c78 <_printf_i+0x40>)
 8012c74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012c78:	08012cd1 	.word	0x08012cd1
 8012c7c:	08012ce5 	.word	0x08012ce5
 8012c80:	08012c61 	.word	0x08012c61
 8012c84:	08012c61 	.word	0x08012c61
 8012c88:	08012c61 	.word	0x08012c61
 8012c8c:	08012c61 	.word	0x08012c61
 8012c90:	08012ce5 	.word	0x08012ce5
 8012c94:	08012c61 	.word	0x08012c61
 8012c98:	08012c61 	.word	0x08012c61
 8012c9c:	08012c61 	.word	0x08012c61
 8012ca0:	08012c61 	.word	0x08012c61
 8012ca4:	08012df1 	.word	0x08012df1
 8012ca8:	08012d15 	.word	0x08012d15
 8012cac:	08012dd3 	.word	0x08012dd3
 8012cb0:	08012c61 	.word	0x08012c61
 8012cb4:	08012c61 	.word	0x08012c61
 8012cb8:	08012e13 	.word	0x08012e13
 8012cbc:	08012c61 	.word	0x08012c61
 8012cc0:	08012d15 	.word	0x08012d15
 8012cc4:	08012c61 	.word	0x08012c61
 8012cc8:	08012c61 	.word	0x08012c61
 8012ccc:	08012ddb 	.word	0x08012ddb
 8012cd0:	680b      	ldr	r3, [r1, #0]
 8012cd2:	1d1a      	adds	r2, r3, #4
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	600a      	str	r2, [r1, #0]
 8012cd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012cdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012ce0:	2301      	movs	r3, #1
 8012ce2:	e0a3      	b.n	8012e2c <_printf_i+0x1f4>
 8012ce4:	6825      	ldr	r5, [r4, #0]
 8012ce6:	6808      	ldr	r0, [r1, #0]
 8012ce8:	062e      	lsls	r6, r5, #24
 8012cea:	f100 0304 	add.w	r3, r0, #4
 8012cee:	d50a      	bpl.n	8012d06 <_printf_i+0xce>
 8012cf0:	6805      	ldr	r5, [r0, #0]
 8012cf2:	600b      	str	r3, [r1, #0]
 8012cf4:	2d00      	cmp	r5, #0
 8012cf6:	da03      	bge.n	8012d00 <_printf_i+0xc8>
 8012cf8:	232d      	movs	r3, #45	; 0x2d
 8012cfa:	426d      	negs	r5, r5
 8012cfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d00:	485e      	ldr	r0, [pc, #376]	; (8012e7c <_printf_i+0x244>)
 8012d02:	230a      	movs	r3, #10
 8012d04:	e019      	b.n	8012d3a <_printf_i+0x102>
 8012d06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012d0a:	6805      	ldr	r5, [r0, #0]
 8012d0c:	600b      	str	r3, [r1, #0]
 8012d0e:	bf18      	it	ne
 8012d10:	b22d      	sxthne	r5, r5
 8012d12:	e7ef      	b.n	8012cf4 <_printf_i+0xbc>
 8012d14:	680b      	ldr	r3, [r1, #0]
 8012d16:	6825      	ldr	r5, [r4, #0]
 8012d18:	1d18      	adds	r0, r3, #4
 8012d1a:	6008      	str	r0, [r1, #0]
 8012d1c:	0628      	lsls	r0, r5, #24
 8012d1e:	d501      	bpl.n	8012d24 <_printf_i+0xec>
 8012d20:	681d      	ldr	r5, [r3, #0]
 8012d22:	e002      	b.n	8012d2a <_printf_i+0xf2>
 8012d24:	0669      	lsls	r1, r5, #25
 8012d26:	d5fb      	bpl.n	8012d20 <_printf_i+0xe8>
 8012d28:	881d      	ldrh	r5, [r3, #0]
 8012d2a:	4854      	ldr	r0, [pc, #336]	; (8012e7c <_printf_i+0x244>)
 8012d2c:	2f6f      	cmp	r7, #111	; 0x6f
 8012d2e:	bf0c      	ite	eq
 8012d30:	2308      	moveq	r3, #8
 8012d32:	230a      	movne	r3, #10
 8012d34:	2100      	movs	r1, #0
 8012d36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012d3a:	6866      	ldr	r6, [r4, #4]
 8012d3c:	60a6      	str	r6, [r4, #8]
 8012d3e:	2e00      	cmp	r6, #0
 8012d40:	bfa2      	ittt	ge
 8012d42:	6821      	ldrge	r1, [r4, #0]
 8012d44:	f021 0104 	bicge.w	r1, r1, #4
 8012d48:	6021      	strge	r1, [r4, #0]
 8012d4a:	b90d      	cbnz	r5, 8012d50 <_printf_i+0x118>
 8012d4c:	2e00      	cmp	r6, #0
 8012d4e:	d04d      	beq.n	8012dec <_printf_i+0x1b4>
 8012d50:	4616      	mov	r6, r2
 8012d52:	fbb5 f1f3 	udiv	r1, r5, r3
 8012d56:	fb03 5711 	mls	r7, r3, r1, r5
 8012d5a:	5dc7      	ldrb	r7, [r0, r7]
 8012d5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012d60:	462f      	mov	r7, r5
 8012d62:	42bb      	cmp	r3, r7
 8012d64:	460d      	mov	r5, r1
 8012d66:	d9f4      	bls.n	8012d52 <_printf_i+0x11a>
 8012d68:	2b08      	cmp	r3, #8
 8012d6a:	d10b      	bne.n	8012d84 <_printf_i+0x14c>
 8012d6c:	6823      	ldr	r3, [r4, #0]
 8012d6e:	07df      	lsls	r7, r3, #31
 8012d70:	d508      	bpl.n	8012d84 <_printf_i+0x14c>
 8012d72:	6923      	ldr	r3, [r4, #16]
 8012d74:	6861      	ldr	r1, [r4, #4]
 8012d76:	4299      	cmp	r1, r3
 8012d78:	bfde      	ittt	le
 8012d7a:	2330      	movle	r3, #48	; 0x30
 8012d7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012d80:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8012d84:	1b92      	subs	r2, r2, r6
 8012d86:	6122      	str	r2, [r4, #16]
 8012d88:	f8cd a000 	str.w	sl, [sp]
 8012d8c:	464b      	mov	r3, r9
 8012d8e:	aa03      	add	r2, sp, #12
 8012d90:	4621      	mov	r1, r4
 8012d92:	4640      	mov	r0, r8
 8012d94:	f7ff fee2 	bl	8012b5c <_printf_common>
 8012d98:	3001      	adds	r0, #1
 8012d9a:	d14c      	bne.n	8012e36 <_printf_i+0x1fe>
 8012d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012da0:	b004      	add	sp, #16
 8012da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012da6:	4835      	ldr	r0, [pc, #212]	; (8012e7c <_printf_i+0x244>)
 8012da8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012dac:	6823      	ldr	r3, [r4, #0]
 8012dae:	680e      	ldr	r6, [r1, #0]
 8012db0:	061f      	lsls	r7, r3, #24
 8012db2:	f856 5b04 	ldr.w	r5, [r6], #4
 8012db6:	600e      	str	r6, [r1, #0]
 8012db8:	d514      	bpl.n	8012de4 <_printf_i+0x1ac>
 8012dba:	07d9      	lsls	r1, r3, #31
 8012dbc:	bf44      	itt	mi
 8012dbe:	f043 0320 	orrmi.w	r3, r3, #32
 8012dc2:	6023      	strmi	r3, [r4, #0]
 8012dc4:	b91d      	cbnz	r5, 8012dce <_printf_i+0x196>
 8012dc6:	6823      	ldr	r3, [r4, #0]
 8012dc8:	f023 0320 	bic.w	r3, r3, #32
 8012dcc:	6023      	str	r3, [r4, #0]
 8012dce:	2310      	movs	r3, #16
 8012dd0:	e7b0      	b.n	8012d34 <_printf_i+0xfc>
 8012dd2:	6823      	ldr	r3, [r4, #0]
 8012dd4:	f043 0320 	orr.w	r3, r3, #32
 8012dd8:	6023      	str	r3, [r4, #0]
 8012dda:	2378      	movs	r3, #120	; 0x78
 8012ddc:	4828      	ldr	r0, [pc, #160]	; (8012e80 <_printf_i+0x248>)
 8012dde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012de2:	e7e3      	b.n	8012dac <_printf_i+0x174>
 8012de4:	065e      	lsls	r6, r3, #25
 8012de6:	bf48      	it	mi
 8012de8:	b2ad      	uxthmi	r5, r5
 8012dea:	e7e6      	b.n	8012dba <_printf_i+0x182>
 8012dec:	4616      	mov	r6, r2
 8012dee:	e7bb      	b.n	8012d68 <_printf_i+0x130>
 8012df0:	680b      	ldr	r3, [r1, #0]
 8012df2:	6826      	ldr	r6, [r4, #0]
 8012df4:	6960      	ldr	r0, [r4, #20]
 8012df6:	1d1d      	adds	r5, r3, #4
 8012df8:	600d      	str	r5, [r1, #0]
 8012dfa:	0635      	lsls	r5, r6, #24
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	d501      	bpl.n	8012e04 <_printf_i+0x1cc>
 8012e00:	6018      	str	r0, [r3, #0]
 8012e02:	e002      	b.n	8012e0a <_printf_i+0x1d2>
 8012e04:	0671      	lsls	r1, r6, #25
 8012e06:	d5fb      	bpl.n	8012e00 <_printf_i+0x1c8>
 8012e08:	8018      	strh	r0, [r3, #0]
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	6123      	str	r3, [r4, #16]
 8012e0e:	4616      	mov	r6, r2
 8012e10:	e7ba      	b.n	8012d88 <_printf_i+0x150>
 8012e12:	680b      	ldr	r3, [r1, #0]
 8012e14:	1d1a      	adds	r2, r3, #4
 8012e16:	600a      	str	r2, [r1, #0]
 8012e18:	681e      	ldr	r6, [r3, #0]
 8012e1a:	6862      	ldr	r2, [r4, #4]
 8012e1c:	2100      	movs	r1, #0
 8012e1e:	4630      	mov	r0, r6
 8012e20:	f7ed fa0e 	bl	8000240 <memchr>
 8012e24:	b108      	cbz	r0, 8012e2a <_printf_i+0x1f2>
 8012e26:	1b80      	subs	r0, r0, r6
 8012e28:	6060      	str	r0, [r4, #4]
 8012e2a:	6863      	ldr	r3, [r4, #4]
 8012e2c:	6123      	str	r3, [r4, #16]
 8012e2e:	2300      	movs	r3, #0
 8012e30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e34:	e7a8      	b.n	8012d88 <_printf_i+0x150>
 8012e36:	6923      	ldr	r3, [r4, #16]
 8012e38:	4632      	mov	r2, r6
 8012e3a:	4649      	mov	r1, r9
 8012e3c:	4640      	mov	r0, r8
 8012e3e:	47d0      	blx	sl
 8012e40:	3001      	adds	r0, #1
 8012e42:	d0ab      	beq.n	8012d9c <_printf_i+0x164>
 8012e44:	6823      	ldr	r3, [r4, #0]
 8012e46:	079b      	lsls	r3, r3, #30
 8012e48:	d413      	bmi.n	8012e72 <_printf_i+0x23a>
 8012e4a:	68e0      	ldr	r0, [r4, #12]
 8012e4c:	9b03      	ldr	r3, [sp, #12]
 8012e4e:	4298      	cmp	r0, r3
 8012e50:	bfb8      	it	lt
 8012e52:	4618      	movlt	r0, r3
 8012e54:	e7a4      	b.n	8012da0 <_printf_i+0x168>
 8012e56:	2301      	movs	r3, #1
 8012e58:	4632      	mov	r2, r6
 8012e5a:	4649      	mov	r1, r9
 8012e5c:	4640      	mov	r0, r8
 8012e5e:	47d0      	blx	sl
 8012e60:	3001      	adds	r0, #1
 8012e62:	d09b      	beq.n	8012d9c <_printf_i+0x164>
 8012e64:	3501      	adds	r5, #1
 8012e66:	68e3      	ldr	r3, [r4, #12]
 8012e68:	9903      	ldr	r1, [sp, #12]
 8012e6a:	1a5b      	subs	r3, r3, r1
 8012e6c:	42ab      	cmp	r3, r5
 8012e6e:	dcf2      	bgt.n	8012e56 <_printf_i+0x21e>
 8012e70:	e7eb      	b.n	8012e4a <_printf_i+0x212>
 8012e72:	2500      	movs	r5, #0
 8012e74:	f104 0619 	add.w	r6, r4, #25
 8012e78:	e7f5      	b.n	8012e66 <_printf_i+0x22e>
 8012e7a:	bf00      	nop
 8012e7c:	08025026 	.word	0x08025026
 8012e80:	08025037 	.word	0x08025037

08012e84 <iprintf>:
 8012e84:	b40f      	push	{r0, r1, r2, r3}
 8012e86:	4b0a      	ldr	r3, [pc, #40]	; (8012eb0 <iprintf+0x2c>)
 8012e88:	b513      	push	{r0, r1, r4, lr}
 8012e8a:	681c      	ldr	r4, [r3, #0]
 8012e8c:	b124      	cbz	r4, 8012e98 <iprintf+0x14>
 8012e8e:	69a3      	ldr	r3, [r4, #24]
 8012e90:	b913      	cbnz	r3, 8012e98 <iprintf+0x14>
 8012e92:	4620      	mov	r0, r4
 8012e94:	f000 ff6c 	bl	8013d70 <__sinit>
 8012e98:	ab05      	add	r3, sp, #20
 8012e9a:	9a04      	ldr	r2, [sp, #16]
 8012e9c:	68a1      	ldr	r1, [r4, #8]
 8012e9e:	9301      	str	r3, [sp, #4]
 8012ea0:	4620      	mov	r0, r4
 8012ea2:	f001 fd61 	bl	8014968 <_vfiprintf_r>
 8012ea6:	b002      	add	sp, #8
 8012ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012eac:	b004      	add	sp, #16
 8012eae:	4770      	bx	lr
 8012eb0:	200006a4 	.word	0x200006a4

08012eb4 <rand>:
 8012eb4:	4b17      	ldr	r3, [pc, #92]	; (8012f14 <rand+0x60>)
 8012eb6:	b510      	push	{r4, lr}
 8012eb8:	681c      	ldr	r4, [r3, #0]
 8012eba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012ebc:	b9b3      	cbnz	r3, 8012eec <rand+0x38>
 8012ebe:	2018      	movs	r0, #24
 8012ec0:	f7ff faa6 	bl	8012410 <malloc>
 8012ec4:	63a0      	str	r0, [r4, #56]	; 0x38
 8012ec6:	b928      	cbnz	r0, 8012ed4 <rand+0x20>
 8012ec8:	4602      	mov	r2, r0
 8012eca:	4b13      	ldr	r3, [pc, #76]	; (8012f18 <rand+0x64>)
 8012ecc:	4813      	ldr	r0, [pc, #76]	; (8012f1c <rand+0x68>)
 8012ece:	214e      	movs	r1, #78	; 0x4e
 8012ed0:	f000 f860 	bl	8012f94 <__assert_func>
 8012ed4:	4a12      	ldr	r2, [pc, #72]	; (8012f20 <rand+0x6c>)
 8012ed6:	4b13      	ldr	r3, [pc, #76]	; (8012f24 <rand+0x70>)
 8012ed8:	e9c0 2300 	strd	r2, r3, [r0]
 8012edc:	4b12      	ldr	r3, [pc, #72]	; (8012f28 <rand+0x74>)
 8012ede:	6083      	str	r3, [r0, #8]
 8012ee0:	230b      	movs	r3, #11
 8012ee2:	8183      	strh	r3, [r0, #12]
 8012ee4:	2201      	movs	r2, #1
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012eec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012eee:	480f      	ldr	r0, [pc, #60]	; (8012f2c <rand+0x78>)
 8012ef0:	690a      	ldr	r2, [r1, #16]
 8012ef2:	694b      	ldr	r3, [r1, #20]
 8012ef4:	4c0e      	ldr	r4, [pc, #56]	; (8012f30 <rand+0x7c>)
 8012ef6:	4350      	muls	r0, r2
 8012ef8:	fb04 0003 	mla	r0, r4, r3, r0
 8012efc:	fba2 3404 	umull	r3, r4, r2, r4
 8012f00:	1c5a      	adds	r2, r3, #1
 8012f02:	4404      	add	r4, r0
 8012f04:	f144 0000 	adc.w	r0, r4, #0
 8012f08:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8012f0c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012f10:	bd10      	pop	{r4, pc}
 8012f12:	bf00      	nop
 8012f14:	200006a4 	.word	0x200006a4
 8012f18:	08025048 	.word	0x08025048
 8012f1c:	0802505f 	.word	0x0802505f
 8012f20:	abcd330e 	.word	0xabcd330e
 8012f24:	e66d1234 	.word	0xe66d1234
 8012f28:	0005deec 	.word	0x0005deec
 8012f2c:	5851f42d 	.word	0x5851f42d
 8012f30:	4c957f2d 	.word	0x4c957f2d

08012f34 <_sbrk_r>:
 8012f34:	b538      	push	{r3, r4, r5, lr}
 8012f36:	4d06      	ldr	r5, [pc, #24]	; (8012f50 <_sbrk_r+0x1c>)
 8012f38:	2300      	movs	r3, #0
 8012f3a:	4604      	mov	r4, r0
 8012f3c:	4608      	mov	r0, r1
 8012f3e:	602b      	str	r3, [r5, #0]
 8012f40:	f7f1 f882 	bl	8004048 <_sbrk>
 8012f44:	1c43      	adds	r3, r0, #1
 8012f46:	d102      	bne.n	8012f4e <_sbrk_r+0x1a>
 8012f48:	682b      	ldr	r3, [r5, #0]
 8012f4a:	b103      	cbz	r3, 8012f4e <_sbrk_r+0x1a>
 8012f4c:	6023      	str	r3, [r4, #0]
 8012f4e:	bd38      	pop	{r3, r4, r5, pc}
 8012f50:	20001c5c 	.word	0x20001c5c

08012f54 <siprintf>:
 8012f54:	b40e      	push	{r1, r2, r3}
 8012f56:	b500      	push	{lr}
 8012f58:	b09c      	sub	sp, #112	; 0x70
 8012f5a:	ab1d      	add	r3, sp, #116	; 0x74
 8012f5c:	9002      	str	r0, [sp, #8]
 8012f5e:	9006      	str	r0, [sp, #24]
 8012f60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012f64:	4809      	ldr	r0, [pc, #36]	; (8012f8c <siprintf+0x38>)
 8012f66:	9107      	str	r1, [sp, #28]
 8012f68:	9104      	str	r1, [sp, #16]
 8012f6a:	4909      	ldr	r1, [pc, #36]	; (8012f90 <siprintf+0x3c>)
 8012f6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f70:	9105      	str	r1, [sp, #20]
 8012f72:	6800      	ldr	r0, [r0, #0]
 8012f74:	9301      	str	r3, [sp, #4]
 8012f76:	a902      	add	r1, sp, #8
 8012f78:	f001 fbcc 	bl	8014714 <_svfiprintf_r>
 8012f7c:	9b02      	ldr	r3, [sp, #8]
 8012f7e:	2200      	movs	r2, #0
 8012f80:	701a      	strb	r2, [r3, #0]
 8012f82:	b01c      	add	sp, #112	; 0x70
 8012f84:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f88:	b003      	add	sp, #12
 8012f8a:	4770      	bx	lr
 8012f8c:	200006a4 	.word	0x200006a4
 8012f90:	ffff0208 	.word	0xffff0208

08012f94 <__assert_func>:
 8012f94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012f96:	4614      	mov	r4, r2
 8012f98:	461a      	mov	r2, r3
 8012f9a:	4b09      	ldr	r3, [pc, #36]	; (8012fc0 <__assert_func+0x2c>)
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	4605      	mov	r5, r0
 8012fa0:	68d8      	ldr	r0, [r3, #12]
 8012fa2:	b14c      	cbz	r4, 8012fb8 <__assert_func+0x24>
 8012fa4:	4b07      	ldr	r3, [pc, #28]	; (8012fc4 <__assert_func+0x30>)
 8012fa6:	9100      	str	r1, [sp, #0]
 8012fa8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012fac:	4906      	ldr	r1, [pc, #24]	; (8012fc8 <__assert_func+0x34>)
 8012fae:	462b      	mov	r3, r5
 8012fb0:	f000 ff5c 	bl	8013e6c <fiprintf>
 8012fb4:	f001 ff1e 	bl	8014df4 <abort>
 8012fb8:	4b04      	ldr	r3, [pc, #16]	; (8012fcc <__assert_func+0x38>)
 8012fba:	461c      	mov	r4, r3
 8012fbc:	e7f3      	b.n	8012fa6 <__assert_func+0x12>
 8012fbe:	bf00      	nop
 8012fc0:	200006a4 	.word	0x200006a4
 8012fc4:	080250be 	.word	0x080250be
 8012fc8:	080250cb 	.word	0x080250cb
 8012fcc:	080250f9 	.word	0x080250f9

08012fd0 <quorem>:
 8012fd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fd4:	6903      	ldr	r3, [r0, #16]
 8012fd6:	690c      	ldr	r4, [r1, #16]
 8012fd8:	42a3      	cmp	r3, r4
 8012fda:	4607      	mov	r7, r0
 8012fdc:	f2c0 8081 	blt.w	80130e2 <quorem+0x112>
 8012fe0:	3c01      	subs	r4, #1
 8012fe2:	f101 0814 	add.w	r8, r1, #20
 8012fe6:	f100 0514 	add.w	r5, r0, #20
 8012fea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012fee:	9301      	str	r3, [sp, #4]
 8012ff0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012ff4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012ff8:	3301      	adds	r3, #1
 8012ffa:	429a      	cmp	r2, r3
 8012ffc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013000:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013004:	fbb2 f6f3 	udiv	r6, r2, r3
 8013008:	d331      	bcc.n	801306e <quorem+0x9e>
 801300a:	f04f 0e00 	mov.w	lr, #0
 801300e:	4640      	mov	r0, r8
 8013010:	46ac      	mov	ip, r5
 8013012:	46f2      	mov	sl, lr
 8013014:	f850 2b04 	ldr.w	r2, [r0], #4
 8013018:	b293      	uxth	r3, r2
 801301a:	fb06 e303 	mla	r3, r6, r3, lr
 801301e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013022:	b29b      	uxth	r3, r3
 8013024:	ebaa 0303 	sub.w	r3, sl, r3
 8013028:	0c12      	lsrs	r2, r2, #16
 801302a:	f8dc a000 	ldr.w	sl, [ip]
 801302e:	fb06 e202 	mla	r2, r6, r2, lr
 8013032:	fa13 f38a 	uxtah	r3, r3, sl
 8013036:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801303a:	fa1f fa82 	uxth.w	sl, r2
 801303e:	f8dc 2000 	ldr.w	r2, [ip]
 8013042:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8013046:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801304a:	b29b      	uxth	r3, r3
 801304c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013050:	4581      	cmp	r9, r0
 8013052:	f84c 3b04 	str.w	r3, [ip], #4
 8013056:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801305a:	d2db      	bcs.n	8013014 <quorem+0x44>
 801305c:	f855 300b 	ldr.w	r3, [r5, fp]
 8013060:	b92b      	cbnz	r3, 801306e <quorem+0x9e>
 8013062:	9b01      	ldr	r3, [sp, #4]
 8013064:	3b04      	subs	r3, #4
 8013066:	429d      	cmp	r5, r3
 8013068:	461a      	mov	r2, r3
 801306a:	d32e      	bcc.n	80130ca <quorem+0xfa>
 801306c:	613c      	str	r4, [r7, #16]
 801306e:	4638      	mov	r0, r7
 8013070:	f001 f9c0 	bl	80143f4 <__mcmp>
 8013074:	2800      	cmp	r0, #0
 8013076:	db24      	blt.n	80130c2 <quorem+0xf2>
 8013078:	3601      	adds	r6, #1
 801307a:	4628      	mov	r0, r5
 801307c:	f04f 0c00 	mov.w	ip, #0
 8013080:	f858 2b04 	ldr.w	r2, [r8], #4
 8013084:	f8d0 e000 	ldr.w	lr, [r0]
 8013088:	b293      	uxth	r3, r2
 801308a:	ebac 0303 	sub.w	r3, ip, r3
 801308e:	0c12      	lsrs	r2, r2, #16
 8013090:	fa13 f38e 	uxtah	r3, r3, lr
 8013094:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013098:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801309c:	b29b      	uxth	r3, r3
 801309e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80130a2:	45c1      	cmp	r9, r8
 80130a4:	f840 3b04 	str.w	r3, [r0], #4
 80130a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80130ac:	d2e8      	bcs.n	8013080 <quorem+0xb0>
 80130ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80130b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80130b6:	b922      	cbnz	r2, 80130c2 <quorem+0xf2>
 80130b8:	3b04      	subs	r3, #4
 80130ba:	429d      	cmp	r5, r3
 80130bc:	461a      	mov	r2, r3
 80130be:	d30a      	bcc.n	80130d6 <quorem+0x106>
 80130c0:	613c      	str	r4, [r7, #16]
 80130c2:	4630      	mov	r0, r6
 80130c4:	b003      	add	sp, #12
 80130c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130ca:	6812      	ldr	r2, [r2, #0]
 80130cc:	3b04      	subs	r3, #4
 80130ce:	2a00      	cmp	r2, #0
 80130d0:	d1cc      	bne.n	801306c <quorem+0x9c>
 80130d2:	3c01      	subs	r4, #1
 80130d4:	e7c7      	b.n	8013066 <quorem+0x96>
 80130d6:	6812      	ldr	r2, [r2, #0]
 80130d8:	3b04      	subs	r3, #4
 80130da:	2a00      	cmp	r2, #0
 80130dc:	d1f0      	bne.n	80130c0 <quorem+0xf0>
 80130de:	3c01      	subs	r4, #1
 80130e0:	e7eb      	b.n	80130ba <quorem+0xea>
 80130e2:	2000      	movs	r0, #0
 80130e4:	e7ee      	b.n	80130c4 <quorem+0xf4>
	...

080130e8 <_dtoa_r>:
 80130e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130ec:	ed2d 8b02 	vpush	{d8}
 80130f0:	ec57 6b10 	vmov	r6, r7, d0
 80130f4:	b095      	sub	sp, #84	; 0x54
 80130f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80130f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80130fc:	9105      	str	r1, [sp, #20]
 80130fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8013102:	4604      	mov	r4, r0
 8013104:	9209      	str	r2, [sp, #36]	; 0x24
 8013106:	930f      	str	r3, [sp, #60]	; 0x3c
 8013108:	b975      	cbnz	r5, 8013128 <_dtoa_r+0x40>
 801310a:	2010      	movs	r0, #16
 801310c:	f7ff f980 	bl	8012410 <malloc>
 8013110:	4602      	mov	r2, r0
 8013112:	6260      	str	r0, [r4, #36]	; 0x24
 8013114:	b920      	cbnz	r0, 8013120 <_dtoa_r+0x38>
 8013116:	4bb2      	ldr	r3, [pc, #712]	; (80133e0 <_dtoa_r+0x2f8>)
 8013118:	21ea      	movs	r1, #234	; 0xea
 801311a:	48b2      	ldr	r0, [pc, #712]	; (80133e4 <_dtoa_r+0x2fc>)
 801311c:	f7ff ff3a 	bl	8012f94 <__assert_func>
 8013120:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013124:	6005      	str	r5, [r0, #0]
 8013126:	60c5      	str	r5, [r0, #12]
 8013128:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801312a:	6819      	ldr	r1, [r3, #0]
 801312c:	b151      	cbz	r1, 8013144 <_dtoa_r+0x5c>
 801312e:	685a      	ldr	r2, [r3, #4]
 8013130:	604a      	str	r2, [r1, #4]
 8013132:	2301      	movs	r3, #1
 8013134:	4093      	lsls	r3, r2
 8013136:	608b      	str	r3, [r1, #8]
 8013138:	4620      	mov	r0, r4
 801313a:	f000 ff1d 	bl	8013f78 <_Bfree>
 801313e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013140:	2200      	movs	r2, #0
 8013142:	601a      	str	r2, [r3, #0]
 8013144:	1e3b      	subs	r3, r7, #0
 8013146:	bfb9      	ittee	lt
 8013148:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801314c:	9303      	strlt	r3, [sp, #12]
 801314e:	2300      	movge	r3, #0
 8013150:	f8c8 3000 	strge.w	r3, [r8]
 8013154:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8013158:	4ba3      	ldr	r3, [pc, #652]	; (80133e8 <_dtoa_r+0x300>)
 801315a:	bfbc      	itt	lt
 801315c:	2201      	movlt	r2, #1
 801315e:	f8c8 2000 	strlt.w	r2, [r8]
 8013162:	ea33 0309 	bics.w	r3, r3, r9
 8013166:	d11b      	bne.n	80131a0 <_dtoa_r+0xb8>
 8013168:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801316a:	f242 730f 	movw	r3, #9999	; 0x270f
 801316e:	6013      	str	r3, [r2, #0]
 8013170:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013174:	4333      	orrs	r3, r6
 8013176:	f000 857a 	beq.w	8013c6e <_dtoa_r+0xb86>
 801317a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801317c:	b963      	cbnz	r3, 8013198 <_dtoa_r+0xb0>
 801317e:	4b9b      	ldr	r3, [pc, #620]	; (80133ec <_dtoa_r+0x304>)
 8013180:	e024      	b.n	80131cc <_dtoa_r+0xe4>
 8013182:	4b9b      	ldr	r3, [pc, #620]	; (80133f0 <_dtoa_r+0x308>)
 8013184:	9300      	str	r3, [sp, #0]
 8013186:	3308      	adds	r3, #8
 8013188:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801318a:	6013      	str	r3, [r2, #0]
 801318c:	9800      	ldr	r0, [sp, #0]
 801318e:	b015      	add	sp, #84	; 0x54
 8013190:	ecbd 8b02 	vpop	{d8}
 8013194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013198:	4b94      	ldr	r3, [pc, #592]	; (80133ec <_dtoa_r+0x304>)
 801319a:	9300      	str	r3, [sp, #0]
 801319c:	3303      	adds	r3, #3
 801319e:	e7f3      	b.n	8013188 <_dtoa_r+0xa0>
 80131a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80131a4:	2200      	movs	r2, #0
 80131a6:	ec51 0b17 	vmov	r0, r1, d7
 80131aa:	2300      	movs	r3, #0
 80131ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80131b0:	f7ed fcba 	bl	8000b28 <__aeabi_dcmpeq>
 80131b4:	4680      	mov	r8, r0
 80131b6:	b158      	cbz	r0, 80131d0 <_dtoa_r+0xe8>
 80131b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80131ba:	2301      	movs	r3, #1
 80131bc:	6013      	str	r3, [r2, #0]
 80131be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	f000 8551 	beq.w	8013c68 <_dtoa_r+0xb80>
 80131c6:	488b      	ldr	r0, [pc, #556]	; (80133f4 <_dtoa_r+0x30c>)
 80131c8:	6018      	str	r0, [r3, #0]
 80131ca:	1e43      	subs	r3, r0, #1
 80131cc:	9300      	str	r3, [sp, #0]
 80131ce:	e7dd      	b.n	801318c <_dtoa_r+0xa4>
 80131d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80131d4:	aa12      	add	r2, sp, #72	; 0x48
 80131d6:	a913      	add	r1, sp, #76	; 0x4c
 80131d8:	4620      	mov	r0, r4
 80131da:	f001 f9af 	bl	801453c <__d2b>
 80131de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80131e2:	4683      	mov	fp, r0
 80131e4:	2d00      	cmp	r5, #0
 80131e6:	d07c      	beq.n	80132e2 <_dtoa_r+0x1fa>
 80131e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80131ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80131ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80131f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80131f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80131fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80131fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013202:	4b7d      	ldr	r3, [pc, #500]	; (80133f8 <_dtoa_r+0x310>)
 8013204:	2200      	movs	r2, #0
 8013206:	4630      	mov	r0, r6
 8013208:	4639      	mov	r1, r7
 801320a:	f7ed f86d 	bl	80002e8 <__aeabi_dsub>
 801320e:	a36e      	add	r3, pc, #440	; (adr r3, 80133c8 <_dtoa_r+0x2e0>)
 8013210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013214:	f7ed fa20 	bl	8000658 <__aeabi_dmul>
 8013218:	a36d      	add	r3, pc, #436	; (adr r3, 80133d0 <_dtoa_r+0x2e8>)
 801321a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801321e:	f7ed f865 	bl	80002ec <__adddf3>
 8013222:	4606      	mov	r6, r0
 8013224:	4628      	mov	r0, r5
 8013226:	460f      	mov	r7, r1
 8013228:	f7ed f9ac 	bl	8000584 <__aeabi_i2d>
 801322c:	a36a      	add	r3, pc, #424	; (adr r3, 80133d8 <_dtoa_r+0x2f0>)
 801322e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013232:	f7ed fa11 	bl	8000658 <__aeabi_dmul>
 8013236:	4602      	mov	r2, r0
 8013238:	460b      	mov	r3, r1
 801323a:	4630      	mov	r0, r6
 801323c:	4639      	mov	r1, r7
 801323e:	f7ed f855 	bl	80002ec <__adddf3>
 8013242:	4606      	mov	r6, r0
 8013244:	460f      	mov	r7, r1
 8013246:	f7ed fcb7 	bl	8000bb8 <__aeabi_d2iz>
 801324a:	2200      	movs	r2, #0
 801324c:	4682      	mov	sl, r0
 801324e:	2300      	movs	r3, #0
 8013250:	4630      	mov	r0, r6
 8013252:	4639      	mov	r1, r7
 8013254:	f7ed fc72 	bl	8000b3c <__aeabi_dcmplt>
 8013258:	b148      	cbz	r0, 801326e <_dtoa_r+0x186>
 801325a:	4650      	mov	r0, sl
 801325c:	f7ed f992 	bl	8000584 <__aeabi_i2d>
 8013260:	4632      	mov	r2, r6
 8013262:	463b      	mov	r3, r7
 8013264:	f7ed fc60 	bl	8000b28 <__aeabi_dcmpeq>
 8013268:	b908      	cbnz	r0, 801326e <_dtoa_r+0x186>
 801326a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801326e:	f1ba 0f16 	cmp.w	sl, #22
 8013272:	d854      	bhi.n	801331e <_dtoa_r+0x236>
 8013274:	4b61      	ldr	r3, [pc, #388]	; (80133fc <_dtoa_r+0x314>)
 8013276:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801327a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801327e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013282:	f7ed fc5b 	bl	8000b3c <__aeabi_dcmplt>
 8013286:	2800      	cmp	r0, #0
 8013288:	d04b      	beq.n	8013322 <_dtoa_r+0x23a>
 801328a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801328e:	2300      	movs	r3, #0
 8013290:	930e      	str	r3, [sp, #56]	; 0x38
 8013292:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013294:	1b5d      	subs	r5, r3, r5
 8013296:	1e6b      	subs	r3, r5, #1
 8013298:	9304      	str	r3, [sp, #16]
 801329a:	bf43      	ittte	mi
 801329c:	2300      	movmi	r3, #0
 801329e:	f1c5 0801 	rsbmi	r8, r5, #1
 80132a2:	9304      	strmi	r3, [sp, #16]
 80132a4:	f04f 0800 	movpl.w	r8, #0
 80132a8:	f1ba 0f00 	cmp.w	sl, #0
 80132ac:	db3b      	blt.n	8013326 <_dtoa_r+0x23e>
 80132ae:	9b04      	ldr	r3, [sp, #16]
 80132b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80132b4:	4453      	add	r3, sl
 80132b6:	9304      	str	r3, [sp, #16]
 80132b8:	2300      	movs	r3, #0
 80132ba:	9306      	str	r3, [sp, #24]
 80132bc:	9b05      	ldr	r3, [sp, #20]
 80132be:	2b09      	cmp	r3, #9
 80132c0:	d869      	bhi.n	8013396 <_dtoa_r+0x2ae>
 80132c2:	2b05      	cmp	r3, #5
 80132c4:	bfc4      	itt	gt
 80132c6:	3b04      	subgt	r3, #4
 80132c8:	9305      	strgt	r3, [sp, #20]
 80132ca:	9b05      	ldr	r3, [sp, #20]
 80132cc:	f1a3 0302 	sub.w	r3, r3, #2
 80132d0:	bfcc      	ite	gt
 80132d2:	2500      	movgt	r5, #0
 80132d4:	2501      	movle	r5, #1
 80132d6:	2b03      	cmp	r3, #3
 80132d8:	d869      	bhi.n	80133ae <_dtoa_r+0x2c6>
 80132da:	e8df f003 	tbb	[pc, r3]
 80132de:	4e2c      	.short	0x4e2c
 80132e0:	5a4c      	.short	0x5a4c
 80132e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80132e6:	441d      	add	r5, r3
 80132e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80132ec:	2b20      	cmp	r3, #32
 80132ee:	bfc1      	itttt	gt
 80132f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80132f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80132f8:	fa09 f303 	lslgt.w	r3, r9, r3
 80132fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013300:	bfda      	itte	le
 8013302:	f1c3 0320 	rsble	r3, r3, #32
 8013306:	fa06 f003 	lslle.w	r0, r6, r3
 801330a:	4318      	orrgt	r0, r3
 801330c:	f7ed f92a 	bl	8000564 <__aeabi_ui2d>
 8013310:	2301      	movs	r3, #1
 8013312:	4606      	mov	r6, r0
 8013314:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013318:	3d01      	subs	r5, #1
 801331a:	9310      	str	r3, [sp, #64]	; 0x40
 801331c:	e771      	b.n	8013202 <_dtoa_r+0x11a>
 801331e:	2301      	movs	r3, #1
 8013320:	e7b6      	b.n	8013290 <_dtoa_r+0x1a8>
 8013322:	900e      	str	r0, [sp, #56]	; 0x38
 8013324:	e7b5      	b.n	8013292 <_dtoa_r+0x1aa>
 8013326:	f1ca 0300 	rsb	r3, sl, #0
 801332a:	9306      	str	r3, [sp, #24]
 801332c:	2300      	movs	r3, #0
 801332e:	eba8 080a 	sub.w	r8, r8, sl
 8013332:	930d      	str	r3, [sp, #52]	; 0x34
 8013334:	e7c2      	b.n	80132bc <_dtoa_r+0x1d4>
 8013336:	2300      	movs	r3, #0
 8013338:	9308      	str	r3, [sp, #32]
 801333a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801333c:	2b00      	cmp	r3, #0
 801333e:	dc39      	bgt.n	80133b4 <_dtoa_r+0x2cc>
 8013340:	f04f 0901 	mov.w	r9, #1
 8013344:	f8cd 9004 	str.w	r9, [sp, #4]
 8013348:	464b      	mov	r3, r9
 801334a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801334e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013350:	2200      	movs	r2, #0
 8013352:	6042      	str	r2, [r0, #4]
 8013354:	2204      	movs	r2, #4
 8013356:	f102 0614 	add.w	r6, r2, #20
 801335a:	429e      	cmp	r6, r3
 801335c:	6841      	ldr	r1, [r0, #4]
 801335e:	d92f      	bls.n	80133c0 <_dtoa_r+0x2d8>
 8013360:	4620      	mov	r0, r4
 8013362:	f000 fdc9 	bl	8013ef8 <_Balloc>
 8013366:	9000      	str	r0, [sp, #0]
 8013368:	2800      	cmp	r0, #0
 801336a:	d14b      	bne.n	8013404 <_dtoa_r+0x31c>
 801336c:	4b24      	ldr	r3, [pc, #144]	; (8013400 <_dtoa_r+0x318>)
 801336e:	4602      	mov	r2, r0
 8013370:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013374:	e6d1      	b.n	801311a <_dtoa_r+0x32>
 8013376:	2301      	movs	r3, #1
 8013378:	e7de      	b.n	8013338 <_dtoa_r+0x250>
 801337a:	2300      	movs	r3, #0
 801337c:	9308      	str	r3, [sp, #32]
 801337e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013380:	eb0a 0903 	add.w	r9, sl, r3
 8013384:	f109 0301 	add.w	r3, r9, #1
 8013388:	2b01      	cmp	r3, #1
 801338a:	9301      	str	r3, [sp, #4]
 801338c:	bfb8      	it	lt
 801338e:	2301      	movlt	r3, #1
 8013390:	e7dd      	b.n	801334e <_dtoa_r+0x266>
 8013392:	2301      	movs	r3, #1
 8013394:	e7f2      	b.n	801337c <_dtoa_r+0x294>
 8013396:	2501      	movs	r5, #1
 8013398:	2300      	movs	r3, #0
 801339a:	9305      	str	r3, [sp, #20]
 801339c:	9508      	str	r5, [sp, #32]
 801339e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80133a2:	2200      	movs	r2, #0
 80133a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80133a8:	2312      	movs	r3, #18
 80133aa:	9209      	str	r2, [sp, #36]	; 0x24
 80133ac:	e7cf      	b.n	801334e <_dtoa_r+0x266>
 80133ae:	2301      	movs	r3, #1
 80133b0:	9308      	str	r3, [sp, #32]
 80133b2:	e7f4      	b.n	801339e <_dtoa_r+0x2b6>
 80133b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80133b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80133bc:	464b      	mov	r3, r9
 80133be:	e7c6      	b.n	801334e <_dtoa_r+0x266>
 80133c0:	3101      	adds	r1, #1
 80133c2:	6041      	str	r1, [r0, #4]
 80133c4:	0052      	lsls	r2, r2, #1
 80133c6:	e7c6      	b.n	8013356 <_dtoa_r+0x26e>
 80133c8:	636f4361 	.word	0x636f4361
 80133cc:	3fd287a7 	.word	0x3fd287a7
 80133d0:	8b60c8b3 	.word	0x8b60c8b3
 80133d4:	3fc68a28 	.word	0x3fc68a28
 80133d8:	509f79fb 	.word	0x509f79fb
 80133dc:	3fd34413 	.word	0x3fd34413
 80133e0:	08025048 	.word	0x08025048
 80133e4:	08025107 	.word	0x08025107
 80133e8:	7ff00000 	.word	0x7ff00000
 80133ec:	08025103 	.word	0x08025103
 80133f0:	080250fa 	.word	0x080250fa
 80133f4:	08025025 	.word	0x08025025
 80133f8:	3ff80000 	.word	0x3ff80000
 80133fc:	08025260 	.word	0x08025260
 8013400:	08025166 	.word	0x08025166
 8013404:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013406:	9a00      	ldr	r2, [sp, #0]
 8013408:	601a      	str	r2, [r3, #0]
 801340a:	9b01      	ldr	r3, [sp, #4]
 801340c:	2b0e      	cmp	r3, #14
 801340e:	f200 80ad 	bhi.w	801356c <_dtoa_r+0x484>
 8013412:	2d00      	cmp	r5, #0
 8013414:	f000 80aa 	beq.w	801356c <_dtoa_r+0x484>
 8013418:	f1ba 0f00 	cmp.w	sl, #0
 801341c:	dd36      	ble.n	801348c <_dtoa_r+0x3a4>
 801341e:	4ac3      	ldr	r2, [pc, #780]	; (801372c <_dtoa_r+0x644>)
 8013420:	f00a 030f 	and.w	r3, sl, #15
 8013424:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013428:	ed93 7b00 	vldr	d7, [r3]
 801342c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8013430:	ea4f 172a 	mov.w	r7, sl, asr #4
 8013434:	eeb0 8a47 	vmov.f32	s16, s14
 8013438:	eef0 8a67 	vmov.f32	s17, s15
 801343c:	d016      	beq.n	801346c <_dtoa_r+0x384>
 801343e:	4bbc      	ldr	r3, [pc, #752]	; (8013730 <_dtoa_r+0x648>)
 8013440:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013444:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013448:	f7ed fa30 	bl	80008ac <__aeabi_ddiv>
 801344c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013450:	f007 070f 	and.w	r7, r7, #15
 8013454:	2503      	movs	r5, #3
 8013456:	4eb6      	ldr	r6, [pc, #728]	; (8013730 <_dtoa_r+0x648>)
 8013458:	b957      	cbnz	r7, 8013470 <_dtoa_r+0x388>
 801345a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801345e:	ec53 2b18 	vmov	r2, r3, d8
 8013462:	f7ed fa23 	bl	80008ac <__aeabi_ddiv>
 8013466:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801346a:	e029      	b.n	80134c0 <_dtoa_r+0x3d8>
 801346c:	2502      	movs	r5, #2
 801346e:	e7f2      	b.n	8013456 <_dtoa_r+0x36e>
 8013470:	07f9      	lsls	r1, r7, #31
 8013472:	d508      	bpl.n	8013486 <_dtoa_r+0x39e>
 8013474:	ec51 0b18 	vmov	r0, r1, d8
 8013478:	e9d6 2300 	ldrd	r2, r3, [r6]
 801347c:	f7ed f8ec 	bl	8000658 <__aeabi_dmul>
 8013480:	ec41 0b18 	vmov	d8, r0, r1
 8013484:	3501      	adds	r5, #1
 8013486:	107f      	asrs	r7, r7, #1
 8013488:	3608      	adds	r6, #8
 801348a:	e7e5      	b.n	8013458 <_dtoa_r+0x370>
 801348c:	f000 80a6 	beq.w	80135dc <_dtoa_r+0x4f4>
 8013490:	f1ca 0600 	rsb	r6, sl, #0
 8013494:	4ba5      	ldr	r3, [pc, #660]	; (801372c <_dtoa_r+0x644>)
 8013496:	4fa6      	ldr	r7, [pc, #664]	; (8013730 <_dtoa_r+0x648>)
 8013498:	f006 020f 	and.w	r2, r6, #15
 801349c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80134a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80134a8:	f7ed f8d6 	bl	8000658 <__aeabi_dmul>
 80134ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80134b0:	1136      	asrs	r6, r6, #4
 80134b2:	2300      	movs	r3, #0
 80134b4:	2502      	movs	r5, #2
 80134b6:	2e00      	cmp	r6, #0
 80134b8:	f040 8085 	bne.w	80135c6 <_dtoa_r+0x4de>
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d1d2      	bne.n	8013466 <_dtoa_r+0x37e>
 80134c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	f000 808c 	beq.w	80135e0 <_dtoa_r+0x4f8>
 80134c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80134cc:	4b99      	ldr	r3, [pc, #612]	; (8013734 <_dtoa_r+0x64c>)
 80134ce:	2200      	movs	r2, #0
 80134d0:	4630      	mov	r0, r6
 80134d2:	4639      	mov	r1, r7
 80134d4:	f7ed fb32 	bl	8000b3c <__aeabi_dcmplt>
 80134d8:	2800      	cmp	r0, #0
 80134da:	f000 8081 	beq.w	80135e0 <_dtoa_r+0x4f8>
 80134de:	9b01      	ldr	r3, [sp, #4]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d07d      	beq.n	80135e0 <_dtoa_r+0x4f8>
 80134e4:	f1b9 0f00 	cmp.w	r9, #0
 80134e8:	dd3c      	ble.n	8013564 <_dtoa_r+0x47c>
 80134ea:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80134ee:	9307      	str	r3, [sp, #28]
 80134f0:	2200      	movs	r2, #0
 80134f2:	4b91      	ldr	r3, [pc, #580]	; (8013738 <_dtoa_r+0x650>)
 80134f4:	4630      	mov	r0, r6
 80134f6:	4639      	mov	r1, r7
 80134f8:	f7ed f8ae 	bl	8000658 <__aeabi_dmul>
 80134fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013500:	3501      	adds	r5, #1
 8013502:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8013506:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801350a:	4628      	mov	r0, r5
 801350c:	f7ed f83a 	bl	8000584 <__aeabi_i2d>
 8013510:	4632      	mov	r2, r6
 8013512:	463b      	mov	r3, r7
 8013514:	f7ed f8a0 	bl	8000658 <__aeabi_dmul>
 8013518:	4b88      	ldr	r3, [pc, #544]	; (801373c <_dtoa_r+0x654>)
 801351a:	2200      	movs	r2, #0
 801351c:	f7ec fee6 	bl	80002ec <__adddf3>
 8013520:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013528:	9303      	str	r3, [sp, #12]
 801352a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801352c:	2b00      	cmp	r3, #0
 801352e:	d15c      	bne.n	80135ea <_dtoa_r+0x502>
 8013530:	4b83      	ldr	r3, [pc, #524]	; (8013740 <_dtoa_r+0x658>)
 8013532:	2200      	movs	r2, #0
 8013534:	4630      	mov	r0, r6
 8013536:	4639      	mov	r1, r7
 8013538:	f7ec fed6 	bl	80002e8 <__aeabi_dsub>
 801353c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013540:	4606      	mov	r6, r0
 8013542:	460f      	mov	r7, r1
 8013544:	f7ed fb18 	bl	8000b78 <__aeabi_dcmpgt>
 8013548:	2800      	cmp	r0, #0
 801354a:	f040 8296 	bne.w	8013a7a <_dtoa_r+0x992>
 801354e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013552:	4630      	mov	r0, r6
 8013554:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013558:	4639      	mov	r1, r7
 801355a:	f7ed faef 	bl	8000b3c <__aeabi_dcmplt>
 801355e:	2800      	cmp	r0, #0
 8013560:	f040 8288 	bne.w	8013a74 <_dtoa_r+0x98c>
 8013564:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013568:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801356c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801356e:	2b00      	cmp	r3, #0
 8013570:	f2c0 8158 	blt.w	8013824 <_dtoa_r+0x73c>
 8013574:	f1ba 0f0e 	cmp.w	sl, #14
 8013578:	f300 8154 	bgt.w	8013824 <_dtoa_r+0x73c>
 801357c:	4b6b      	ldr	r3, [pc, #428]	; (801372c <_dtoa_r+0x644>)
 801357e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013582:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013588:	2b00      	cmp	r3, #0
 801358a:	f280 80e3 	bge.w	8013754 <_dtoa_r+0x66c>
 801358e:	9b01      	ldr	r3, [sp, #4]
 8013590:	2b00      	cmp	r3, #0
 8013592:	f300 80df 	bgt.w	8013754 <_dtoa_r+0x66c>
 8013596:	f040 826d 	bne.w	8013a74 <_dtoa_r+0x98c>
 801359a:	4b69      	ldr	r3, [pc, #420]	; (8013740 <_dtoa_r+0x658>)
 801359c:	2200      	movs	r2, #0
 801359e:	4640      	mov	r0, r8
 80135a0:	4649      	mov	r1, r9
 80135a2:	f7ed f859 	bl	8000658 <__aeabi_dmul>
 80135a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80135aa:	f7ed fadb 	bl	8000b64 <__aeabi_dcmpge>
 80135ae:	9e01      	ldr	r6, [sp, #4]
 80135b0:	4637      	mov	r7, r6
 80135b2:	2800      	cmp	r0, #0
 80135b4:	f040 8243 	bne.w	8013a3e <_dtoa_r+0x956>
 80135b8:	9d00      	ldr	r5, [sp, #0]
 80135ba:	2331      	movs	r3, #49	; 0x31
 80135bc:	f805 3b01 	strb.w	r3, [r5], #1
 80135c0:	f10a 0a01 	add.w	sl, sl, #1
 80135c4:	e23f      	b.n	8013a46 <_dtoa_r+0x95e>
 80135c6:	07f2      	lsls	r2, r6, #31
 80135c8:	d505      	bpl.n	80135d6 <_dtoa_r+0x4ee>
 80135ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80135ce:	f7ed f843 	bl	8000658 <__aeabi_dmul>
 80135d2:	3501      	adds	r5, #1
 80135d4:	2301      	movs	r3, #1
 80135d6:	1076      	asrs	r6, r6, #1
 80135d8:	3708      	adds	r7, #8
 80135da:	e76c      	b.n	80134b6 <_dtoa_r+0x3ce>
 80135dc:	2502      	movs	r5, #2
 80135de:	e76f      	b.n	80134c0 <_dtoa_r+0x3d8>
 80135e0:	9b01      	ldr	r3, [sp, #4]
 80135e2:	f8cd a01c 	str.w	sl, [sp, #28]
 80135e6:	930c      	str	r3, [sp, #48]	; 0x30
 80135e8:	e78d      	b.n	8013506 <_dtoa_r+0x41e>
 80135ea:	9900      	ldr	r1, [sp, #0]
 80135ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80135ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80135f0:	4b4e      	ldr	r3, [pc, #312]	; (801372c <_dtoa_r+0x644>)
 80135f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80135f6:	4401      	add	r1, r0
 80135f8:	9102      	str	r1, [sp, #8]
 80135fa:	9908      	ldr	r1, [sp, #32]
 80135fc:	eeb0 8a47 	vmov.f32	s16, s14
 8013600:	eef0 8a67 	vmov.f32	s17, s15
 8013604:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013608:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801360c:	2900      	cmp	r1, #0
 801360e:	d045      	beq.n	801369c <_dtoa_r+0x5b4>
 8013610:	494c      	ldr	r1, [pc, #304]	; (8013744 <_dtoa_r+0x65c>)
 8013612:	2000      	movs	r0, #0
 8013614:	f7ed f94a 	bl	80008ac <__aeabi_ddiv>
 8013618:	ec53 2b18 	vmov	r2, r3, d8
 801361c:	f7ec fe64 	bl	80002e8 <__aeabi_dsub>
 8013620:	9d00      	ldr	r5, [sp, #0]
 8013622:	ec41 0b18 	vmov	d8, r0, r1
 8013626:	4639      	mov	r1, r7
 8013628:	4630      	mov	r0, r6
 801362a:	f7ed fac5 	bl	8000bb8 <__aeabi_d2iz>
 801362e:	900c      	str	r0, [sp, #48]	; 0x30
 8013630:	f7ec ffa8 	bl	8000584 <__aeabi_i2d>
 8013634:	4602      	mov	r2, r0
 8013636:	460b      	mov	r3, r1
 8013638:	4630      	mov	r0, r6
 801363a:	4639      	mov	r1, r7
 801363c:	f7ec fe54 	bl	80002e8 <__aeabi_dsub>
 8013640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013642:	3330      	adds	r3, #48	; 0x30
 8013644:	f805 3b01 	strb.w	r3, [r5], #1
 8013648:	ec53 2b18 	vmov	r2, r3, d8
 801364c:	4606      	mov	r6, r0
 801364e:	460f      	mov	r7, r1
 8013650:	f7ed fa74 	bl	8000b3c <__aeabi_dcmplt>
 8013654:	2800      	cmp	r0, #0
 8013656:	d165      	bne.n	8013724 <_dtoa_r+0x63c>
 8013658:	4632      	mov	r2, r6
 801365a:	463b      	mov	r3, r7
 801365c:	4935      	ldr	r1, [pc, #212]	; (8013734 <_dtoa_r+0x64c>)
 801365e:	2000      	movs	r0, #0
 8013660:	f7ec fe42 	bl	80002e8 <__aeabi_dsub>
 8013664:	ec53 2b18 	vmov	r2, r3, d8
 8013668:	f7ed fa68 	bl	8000b3c <__aeabi_dcmplt>
 801366c:	2800      	cmp	r0, #0
 801366e:	f040 80b9 	bne.w	80137e4 <_dtoa_r+0x6fc>
 8013672:	9b02      	ldr	r3, [sp, #8]
 8013674:	429d      	cmp	r5, r3
 8013676:	f43f af75 	beq.w	8013564 <_dtoa_r+0x47c>
 801367a:	4b2f      	ldr	r3, [pc, #188]	; (8013738 <_dtoa_r+0x650>)
 801367c:	ec51 0b18 	vmov	r0, r1, d8
 8013680:	2200      	movs	r2, #0
 8013682:	f7ec ffe9 	bl	8000658 <__aeabi_dmul>
 8013686:	4b2c      	ldr	r3, [pc, #176]	; (8013738 <_dtoa_r+0x650>)
 8013688:	ec41 0b18 	vmov	d8, r0, r1
 801368c:	2200      	movs	r2, #0
 801368e:	4630      	mov	r0, r6
 8013690:	4639      	mov	r1, r7
 8013692:	f7ec ffe1 	bl	8000658 <__aeabi_dmul>
 8013696:	4606      	mov	r6, r0
 8013698:	460f      	mov	r7, r1
 801369a:	e7c4      	b.n	8013626 <_dtoa_r+0x53e>
 801369c:	ec51 0b17 	vmov	r0, r1, d7
 80136a0:	f7ec ffda 	bl	8000658 <__aeabi_dmul>
 80136a4:	9b02      	ldr	r3, [sp, #8]
 80136a6:	9d00      	ldr	r5, [sp, #0]
 80136a8:	930c      	str	r3, [sp, #48]	; 0x30
 80136aa:	ec41 0b18 	vmov	d8, r0, r1
 80136ae:	4639      	mov	r1, r7
 80136b0:	4630      	mov	r0, r6
 80136b2:	f7ed fa81 	bl	8000bb8 <__aeabi_d2iz>
 80136b6:	9011      	str	r0, [sp, #68]	; 0x44
 80136b8:	f7ec ff64 	bl	8000584 <__aeabi_i2d>
 80136bc:	4602      	mov	r2, r0
 80136be:	460b      	mov	r3, r1
 80136c0:	4630      	mov	r0, r6
 80136c2:	4639      	mov	r1, r7
 80136c4:	f7ec fe10 	bl	80002e8 <__aeabi_dsub>
 80136c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80136ca:	3330      	adds	r3, #48	; 0x30
 80136cc:	f805 3b01 	strb.w	r3, [r5], #1
 80136d0:	9b02      	ldr	r3, [sp, #8]
 80136d2:	429d      	cmp	r5, r3
 80136d4:	4606      	mov	r6, r0
 80136d6:	460f      	mov	r7, r1
 80136d8:	f04f 0200 	mov.w	r2, #0
 80136dc:	d134      	bne.n	8013748 <_dtoa_r+0x660>
 80136de:	4b19      	ldr	r3, [pc, #100]	; (8013744 <_dtoa_r+0x65c>)
 80136e0:	ec51 0b18 	vmov	r0, r1, d8
 80136e4:	f7ec fe02 	bl	80002ec <__adddf3>
 80136e8:	4602      	mov	r2, r0
 80136ea:	460b      	mov	r3, r1
 80136ec:	4630      	mov	r0, r6
 80136ee:	4639      	mov	r1, r7
 80136f0:	f7ed fa42 	bl	8000b78 <__aeabi_dcmpgt>
 80136f4:	2800      	cmp	r0, #0
 80136f6:	d175      	bne.n	80137e4 <_dtoa_r+0x6fc>
 80136f8:	ec53 2b18 	vmov	r2, r3, d8
 80136fc:	4911      	ldr	r1, [pc, #68]	; (8013744 <_dtoa_r+0x65c>)
 80136fe:	2000      	movs	r0, #0
 8013700:	f7ec fdf2 	bl	80002e8 <__aeabi_dsub>
 8013704:	4602      	mov	r2, r0
 8013706:	460b      	mov	r3, r1
 8013708:	4630      	mov	r0, r6
 801370a:	4639      	mov	r1, r7
 801370c:	f7ed fa16 	bl	8000b3c <__aeabi_dcmplt>
 8013710:	2800      	cmp	r0, #0
 8013712:	f43f af27 	beq.w	8013564 <_dtoa_r+0x47c>
 8013716:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013718:	1e6b      	subs	r3, r5, #1
 801371a:	930c      	str	r3, [sp, #48]	; 0x30
 801371c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013720:	2b30      	cmp	r3, #48	; 0x30
 8013722:	d0f8      	beq.n	8013716 <_dtoa_r+0x62e>
 8013724:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013728:	e04a      	b.n	80137c0 <_dtoa_r+0x6d8>
 801372a:	bf00      	nop
 801372c:	08025260 	.word	0x08025260
 8013730:	08025238 	.word	0x08025238
 8013734:	3ff00000 	.word	0x3ff00000
 8013738:	40240000 	.word	0x40240000
 801373c:	401c0000 	.word	0x401c0000
 8013740:	40140000 	.word	0x40140000
 8013744:	3fe00000 	.word	0x3fe00000
 8013748:	4baf      	ldr	r3, [pc, #700]	; (8013a08 <_dtoa_r+0x920>)
 801374a:	f7ec ff85 	bl	8000658 <__aeabi_dmul>
 801374e:	4606      	mov	r6, r0
 8013750:	460f      	mov	r7, r1
 8013752:	e7ac      	b.n	80136ae <_dtoa_r+0x5c6>
 8013754:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013758:	9d00      	ldr	r5, [sp, #0]
 801375a:	4642      	mov	r2, r8
 801375c:	464b      	mov	r3, r9
 801375e:	4630      	mov	r0, r6
 8013760:	4639      	mov	r1, r7
 8013762:	f7ed f8a3 	bl	80008ac <__aeabi_ddiv>
 8013766:	f7ed fa27 	bl	8000bb8 <__aeabi_d2iz>
 801376a:	9002      	str	r0, [sp, #8]
 801376c:	f7ec ff0a 	bl	8000584 <__aeabi_i2d>
 8013770:	4642      	mov	r2, r8
 8013772:	464b      	mov	r3, r9
 8013774:	f7ec ff70 	bl	8000658 <__aeabi_dmul>
 8013778:	4602      	mov	r2, r0
 801377a:	460b      	mov	r3, r1
 801377c:	4630      	mov	r0, r6
 801377e:	4639      	mov	r1, r7
 8013780:	f7ec fdb2 	bl	80002e8 <__aeabi_dsub>
 8013784:	9e02      	ldr	r6, [sp, #8]
 8013786:	9f01      	ldr	r7, [sp, #4]
 8013788:	3630      	adds	r6, #48	; 0x30
 801378a:	f805 6b01 	strb.w	r6, [r5], #1
 801378e:	9e00      	ldr	r6, [sp, #0]
 8013790:	1bae      	subs	r6, r5, r6
 8013792:	42b7      	cmp	r7, r6
 8013794:	4602      	mov	r2, r0
 8013796:	460b      	mov	r3, r1
 8013798:	d137      	bne.n	801380a <_dtoa_r+0x722>
 801379a:	f7ec fda7 	bl	80002ec <__adddf3>
 801379e:	4642      	mov	r2, r8
 80137a0:	464b      	mov	r3, r9
 80137a2:	4606      	mov	r6, r0
 80137a4:	460f      	mov	r7, r1
 80137a6:	f7ed f9e7 	bl	8000b78 <__aeabi_dcmpgt>
 80137aa:	b9c8      	cbnz	r0, 80137e0 <_dtoa_r+0x6f8>
 80137ac:	4642      	mov	r2, r8
 80137ae:	464b      	mov	r3, r9
 80137b0:	4630      	mov	r0, r6
 80137b2:	4639      	mov	r1, r7
 80137b4:	f7ed f9b8 	bl	8000b28 <__aeabi_dcmpeq>
 80137b8:	b110      	cbz	r0, 80137c0 <_dtoa_r+0x6d8>
 80137ba:	9b02      	ldr	r3, [sp, #8]
 80137bc:	07d9      	lsls	r1, r3, #31
 80137be:	d40f      	bmi.n	80137e0 <_dtoa_r+0x6f8>
 80137c0:	4620      	mov	r0, r4
 80137c2:	4659      	mov	r1, fp
 80137c4:	f000 fbd8 	bl	8013f78 <_Bfree>
 80137c8:	2300      	movs	r3, #0
 80137ca:	702b      	strb	r3, [r5, #0]
 80137cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80137ce:	f10a 0001 	add.w	r0, sl, #1
 80137d2:	6018      	str	r0, [r3, #0]
 80137d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	f43f acd8 	beq.w	801318c <_dtoa_r+0xa4>
 80137dc:	601d      	str	r5, [r3, #0]
 80137de:	e4d5      	b.n	801318c <_dtoa_r+0xa4>
 80137e0:	f8cd a01c 	str.w	sl, [sp, #28]
 80137e4:	462b      	mov	r3, r5
 80137e6:	461d      	mov	r5, r3
 80137e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80137ec:	2a39      	cmp	r2, #57	; 0x39
 80137ee:	d108      	bne.n	8013802 <_dtoa_r+0x71a>
 80137f0:	9a00      	ldr	r2, [sp, #0]
 80137f2:	429a      	cmp	r2, r3
 80137f4:	d1f7      	bne.n	80137e6 <_dtoa_r+0x6fe>
 80137f6:	9a07      	ldr	r2, [sp, #28]
 80137f8:	9900      	ldr	r1, [sp, #0]
 80137fa:	3201      	adds	r2, #1
 80137fc:	9207      	str	r2, [sp, #28]
 80137fe:	2230      	movs	r2, #48	; 0x30
 8013800:	700a      	strb	r2, [r1, #0]
 8013802:	781a      	ldrb	r2, [r3, #0]
 8013804:	3201      	adds	r2, #1
 8013806:	701a      	strb	r2, [r3, #0]
 8013808:	e78c      	b.n	8013724 <_dtoa_r+0x63c>
 801380a:	4b7f      	ldr	r3, [pc, #508]	; (8013a08 <_dtoa_r+0x920>)
 801380c:	2200      	movs	r2, #0
 801380e:	f7ec ff23 	bl	8000658 <__aeabi_dmul>
 8013812:	2200      	movs	r2, #0
 8013814:	2300      	movs	r3, #0
 8013816:	4606      	mov	r6, r0
 8013818:	460f      	mov	r7, r1
 801381a:	f7ed f985 	bl	8000b28 <__aeabi_dcmpeq>
 801381e:	2800      	cmp	r0, #0
 8013820:	d09b      	beq.n	801375a <_dtoa_r+0x672>
 8013822:	e7cd      	b.n	80137c0 <_dtoa_r+0x6d8>
 8013824:	9a08      	ldr	r2, [sp, #32]
 8013826:	2a00      	cmp	r2, #0
 8013828:	f000 80c4 	beq.w	80139b4 <_dtoa_r+0x8cc>
 801382c:	9a05      	ldr	r2, [sp, #20]
 801382e:	2a01      	cmp	r2, #1
 8013830:	f300 80a8 	bgt.w	8013984 <_dtoa_r+0x89c>
 8013834:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013836:	2a00      	cmp	r2, #0
 8013838:	f000 80a0 	beq.w	801397c <_dtoa_r+0x894>
 801383c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013840:	9e06      	ldr	r6, [sp, #24]
 8013842:	4645      	mov	r5, r8
 8013844:	9a04      	ldr	r2, [sp, #16]
 8013846:	2101      	movs	r1, #1
 8013848:	441a      	add	r2, r3
 801384a:	4620      	mov	r0, r4
 801384c:	4498      	add	r8, r3
 801384e:	9204      	str	r2, [sp, #16]
 8013850:	f000 fc4e 	bl	80140f0 <__i2b>
 8013854:	4607      	mov	r7, r0
 8013856:	2d00      	cmp	r5, #0
 8013858:	dd0b      	ble.n	8013872 <_dtoa_r+0x78a>
 801385a:	9b04      	ldr	r3, [sp, #16]
 801385c:	2b00      	cmp	r3, #0
 801385e:	dd08      	ble.n	8013872 <_dtoa_r+0x78a>
 8013860:	42ab      	cmp	r3, r5
 8013862:	9a04      	ldr	r2, [sp, #16]
 8013864:	bfa8      	it	ge
 8013866:	462b      	movge	r3, r5
 8013868:	eba8 0803 	sub.w	r8, r8, r3
 801386c:	1aed      	subs	r5, r5, r3
 801386e:	1ad3      	subs	r3, r2, r3
 8013870:	9304      	str	r3, [sp, #16]
 8013872:	9b06      	ldr	r3, [sp, #24]
 8013874:	b1fb      	cbz	r3, 80138b6 <_dtoa_r+0x7ce>
 8013876:	9b08      	ldr	r3, [sp, #32]
 8013878:	2b00      	cmp	r3, #0
 801387a:	f000 809f 	beq.w	80139bc <_dtoa_r+0x8d4>
 801387e:	2e00      	cmp	r6, #0
 8013880:	dd11      	ble.n	80138a6 <_dtoa_r+0x7be>
 8013882:	4639      	mov	r1, r7
 8013884:	4632      	mov	r2, r6
 8013886:	4620      	mov	r0, r4
 8013888:	f000 fcee 	bl	8014268 <__pow5mult>
 801388c:	465a      	mov	r2, fp
 801388e:	4601      	mov	r1, r0
 8013890:	4607      	mov	r7, r0
 8013892:	4620      	mov	r0, r4
 8013894:	f000 fc42 	bl	801411c <__multiply>
 8013898:	4659      	mov	r1, fp
 801389a:	9007      	str	r0, [sp, #28]
 801389c:	4620      	mov	r0, r4
 801389e:	f000 fb6b 	bl	8013f78 <_Bfree>
 80138a2:	9b07      	ldr	r3, [sp, #28]
 80138a4:	469b      	mov	fp, r3
 80138a6:	9b06      	ldr	r3, [sp, #24]
 80138a8:	1b9a      	subs	r2, r3, r6
 80138aa:	d004      	beq.n	80138b6 <_dtoa_r+0x7ce>
 80138ac:	4659      	mov	r1, fp
 80138ae:	4620      	mov	r0, r4
 80138b0:	f000 fcda 	bl	8014268 <__pow5mult>
 80138b4:	4683      	mov	fp, r0
 80138b6:	2101      	movs	r1, #1
 80138b8:	4620      	mov	r0, r4
 80138ba:	f000 fc19 	bl	80140f0 <__i2b>
 80138be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	4606      	mov	r6, r0
 80138c4:	dd7c      	ble.n	80139c0 <_dtoa_r+0x8d8>
 80138c6:	461a      	mov	r2, r3
 80138c8:	4601      	mov	r1, r0
 80138ca:	4620      	mov	r0, r4
 80138cc:	f000 fccc 	bl	8014268 <__pow5mult>
 80138d0:	9b05      	ldr	r3, [sp, #20]
 80138d2:	2b01      	cmp	r3, #1
 80138d4:	4606      	mov	r6, r0
 80138d6:	dd76      	ble.n	80139c6 <_dtoa_r+0x8de>
 80138d8:	2300      	movs	r3, #0
 80138da:	9306      	str	r3, [sp, #24]
 80138dc:	6933      	ldr	r3, [r6, #16]
 80138de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80138e2:	6918      	ldr	r0, [r3, #16]
 80138e4:	f000 fbb4 	bl	8014050 <__hi0bits>
 80138e8:	f1c0 0020 	rsb	r0, r0, #32
 80138ec:	9b04      	ldr	r3, [sp, #16]
 80138ee:	4418      	add	r0, r3
 80138f0:	f010 001f 	ands.w	r0, r0, #31
 80138f4:	f000 8086 	beq.w	8013a04 <_dtoa_r+0x91c>
 80138f8:	f1c0 0320 	rsb	r3, r0, #32
 80138fc:	2b04      	cmp	r3, #4
 80138fe:	dd7f      	ble.n	8013a00 <_dtoa_r+0x918>
 8013900:	f1c0 001c 	rsb	r0, r0, #28
 8013904:	9b04      	ldr	r3, [sp, #16]
 8013906:	4403      	add	r3, r0
 8013908:	4480      	add	r8, r0
 801390a:	4405      	add	r5, r0
 801390c:	9304      	str	r3, [sp, #16]
 801390e:	f1b8 0f00 	cmp.w	r8, #0
 8013912:	dd05      	ble.n	8013920 <_dtoa_r+0x838>
 8013914:	4659      	mov	r1, fp
 8013916:	4642      	mov	r2, r8
 8013918:	4620      	mov	r0, r4
 801391a:	f000 fcff 	bl	801431c <__lshift>
 801391e:	4683      	mov	fp, r0
 8013920:	9b04      	ldr	r3, [sp, #16]
 8013922:	2b00      	cmp	r3, #0
 8013924:	dd05      	ble.n	8013932 <_dtoa_r+0x84a>
 8013926:	4631      	mov	r1, r6
 8013928:	461a      	mov	r2, r3
 801392a:	4620      	mov	r0, r4
 801392c:	f000 fcf6 	bl	801431c <__lshift>
 8013930:	4606      	mov	r6, r0
 8013932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013934:	2b00      	cmp	r3, #0
 8013936:	d069      	beq.n	8013a0c <_dtoa_r+0x924>
 8013938:	4631      	mov	r1, r6
 801393a:	4658      	mov	r0, fp
 801393c:	f000 fd5a 	bl	80143f4 <__mcmp>
 8013940:	2800      	cmp	r0, #0
 8013942:	da63      	bge.n	8013a0c <_dtoa_r+0x924>
 8013944:	2300      	movs	r3, #0
 8013946:	4659      	mov	r1, fp
 8013948:	220a      	movs	r2, #10
 801394a:	4620      	mov	r0, r4
 801394c:	f000 fb36 	bl	8013fbc <__multadd>
 8013950:	9b08      	ldr	r3, [sp, #32]
 8013952:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013956:	4683      	mov	fp, r0
 8013958:	2b00      	cmp	r3, #0
 801395a:	f000 818f 	beq.w	8013c7c <_dtoa_r+0xb94>
 801395e:	4639      	mov	r1, r7
 8013960:	2300      	movs	r3, #0
 8013962:	220a      	movs	r2, #10
 8013964:	4620      	mov	r0, r4
 8013966:	f000 fb29 	bl	8013fbc <__multadd>
 801396a:	f1b9 0f00 	cmp.w	r9, #0
 801396e:	4607      	mov	r7, r0
 8013970:	f300 808e 	bgt.w	8013a90 <_dtoa_r+0x9a8>
 8013974:	9b05      	ldr	r3, [sp, #20]
 8013976:	2b02      	cmp	r3, #2
 8013978:	dc50      	bgt.n	8013a1c <_dtoa_r+0x934>
 801397a:	e089      	b.n	8013a90 <_dtoa_r+0x9a8>
 801397c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801397e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013982:	e75d      	b.n	8013840 <_dtoa_r+0x758>
 8013984:	9b01      	ldr	r3, [sp, #4]
 8013986:	1e5e      	subs	r6, r3, #1
 8013988:	9b06      	ldr	r3, [sp, #24]
 801398a:	42b3      	cmp	r3, r6
 801398c:	bfbf      	itttt	lt
 801398e:	9b06      	ldrlt	r3, [sp, #24]
 8013990:	9606      	strlt	r6, [sp, #24]
 8013992:	1af2      	sublt	r2, r6, r3
 8013994:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8013996:	bfb6      	itet	lt
 8013998:	189b      	addlt	r3, r3, r2
 801399a:	1b9e      	subge	r6, r3, r6
 801399c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801399e:	9b01      	ldr	r3, [sp, #4]
 80139a0:	bfb8      	it	lt
 80139a2:	2600      	movlt	r6, #0
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	bfb5      	itete	lt
 80139a8:	eba8 0503 	sublt.w	r5, r8, r3
 80139ac:	9b01      	ldrge	r3, [sp, #4]
 80139ae:	2300      	movlt	r3, #0
 80139b0:	4645      	movge	r5, r8
 80139b2:	e747      	b.n	8013844 <_dtoa_r+0x75c>
 80139b4:	9e06      	ldr	r6, [sp, #24]
 80139b6:	9f08      	ldr	r7, [sp, #32]
 80139b8:	4645      	mov	r5, r8
 80139ba:	e74c      	b.n	8013856 <_dtoa_r+0x76e>
 80139bc:	9a06      	ldr	r2, [sp, #24]
 80139be:	e775      	b.n	80138ac <_dtoa_r+0x7c4>
 80139c0:	9b05      	ldr	r3, [sp, #20]
 80139c2:	2b01      	cmp	r3, #1
 80139c4:	dc18      	bgt.n	80139f8 <_dtoa_r+0x910>
 80139c6:	9b02      	ldr	r3, [sp, #8]
 80139c8:	b9b3      	cbnz	r3, 80139f8 <_dtoa_r+0x910>
 80139ca:	9b03      	ldr	r3, [sp, #12]
 80139cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80139d0:	b9a3      	cbnz	r3, 80139fc <_dtoa_r+0x914>
 80139d2:	9b03      	ldr	r3, [sp, #12]
 80139d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80139d8:	0d1b      	lsrs	r3, r3, #20
 80139da:	051b      	lsls	r3, r3, #20
 80139dc:	b12b      	cbz	r3, 80139ea <_dtoa_r+0x902>
 80139de:	9b04      	ldr	r3, [sp, #16]
 80139e0:	3301      	adds	r3, #1
 80139e2:	9304      	str	r3, [sp, #16]
 80139e4:	f108 0801 	add.w	r8, r8, #1
 80139e8:	2301      	movs	r3, #1
 80139ea:	9306      	str	r3, [sp, #24]
 80139ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	f47f af74 	bne.w	80138dc <_dtoa_r+0x7f4>
 80139f4:	2001      	movs	r0, #1
 80139f6:	e779      	b.n	80138ec <_dtoa_r+0x804>
 80139f8:	2300      	movs	r3, #0
 80139fa:	e7f6      	b.n	80139ea <_dtoa_r+0x902>
 80139fc:	9b02      	ldr	r3, [sp, #8]
 80139fe:	e7f4      	b.n	80139ea <_dtoa_r+0x902>
 8013a00:	d085      	beq.n	801390e <_dtoa_r+0x826>
 8013a02:	4618      	mov	r0, r3
 8013a04:	301c      	adds	r0, #28
 8013a06:	e77d      	b.n	8013904 <_dtoa_r+0x81c>
 8013a08:	40240000 	.word	0x40240000
 8013a0c:	9b01      	ldr	r3, [sp, #4]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	dc38      	bgt.n	8013a84 <_dtoa_r+0x99c>
 8013a12:	9b05      	ldr	r3, [sp, #20]
 8013a14:	2b02      	cmp	r3, #2
 8013a16:	dd35      	ble.n	8013a84 <_dtoa_r+0x99c>
 8013a18:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8013a1c:	f1b9 0f00 	cmp.w	r9, #0
 8013a20:	d10d      	bne.n	8013a3e <_dtoa_r+0x956>
 8013a22:	4631      	mov	r1, r6
 8013a24:	464b      	mov	r3, r9
 8013a26:	2205      	movs	r2, #5
 8013a28:	4620      	mov	r0, r4
 8013a2a:	f000 fac7 	bl	8013fbc <__multadd>
 8013a2e:	4601      	mov	r1, r0
 8013a30:	4606      	mov	r6, r0
 8013a32:	4658      	mov	r0, fp
 8013a34:	f000 fcde 	bl	80143f4 <__mcmp>
 8013a38:	2800      	cmp	r0, #0
 8013a3a:	f73f adbd 	bgt.w	80135b8 <_dtoa_r+0x4d0>
 8013a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a40:	9d00      	ldr	r5, [sp, #0]
 8013a42:	ea6f 0a03 	mvn.w	sl, r3
 8013a46:	f04f 0800 	mov.w	r8, #0
 8013a4a:	4631      	mov	r1, r6
 8013a4c:	4620      	mov	r0, r4
 8013a4e:	f000 fa93 	bl	8013f78 <_Bfree>
 8013a52:	2f00      	cmp	r7, #0
 8013a54:	f43f aeb4 	beq.w	80137c0 <_dtoa_r+0x6d8>
 8013a58:	f1b8 0f00 	cmp.w	r8, #0
 8013a5c:	d005      	beq.n	8013a6a <_dtoa_r+0x982>
 8013a5e:	45b8      	cmp	r8, r7
 8013a60:	d003      	beq.n	8013a6a <_dtoa_r+0x982>
 8013a62:	4641      	mov	r1, r8
 8013a64:	4620      	mov	r0, r4
 8013a66:	f000 fa87 	bl	8013f78 <_Bfree>
 8013a6a:	4639      	mov	r1, r7
 8013a6c:	4620      	mov	r0, r4
 8013a6e:	f000 fa83 	bl	8013f78 <_Bfree>
 8013a72:	e6a5      	b.n	80137c0 <_dtoa_r+0x6d8>
 8013a74:	2600      	movs	r6, #0
 8013a76:	4637      	mov	r7, r6
 8013a78:	e7e1      	b.n	8013a3e <_dtoa_r+0x956>
 8013a7a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8013a7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013a80:	4637      	mov	r7, r6
 8013a82:	e599      	b.n	80135b8 <_dtoa_r+0x4d0>
 8013a84:	9b08      	ldr	r3, [sp, #32]
 8013a86:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	f000 80fd 	beq.w	8013c8a <_dtoa_r+0xba2>
 8013a90:	2d00      	cmp	r5, #0
 8013a92:	dd05      	ble.n	8013aa0 <_dtoa_r+0x9b8>
 8013a94:	4639      	mov	r1, r7
 8013a96:	462a      	mov	r2, r5
 8013a98:	4620      	mov	r0, r4
 8013a9a:	f000 fc3f 	bl	801431c <__lshift>
 8013a9e:	4607      	mov	r7, r0
 8013aa0:	9b06      	ldr	r3, [sp, #24]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d05c      	beq.n	8013b60 <_dtoa_r+0xa78>
 8013aa6:	6879      	ldr	r1, [r7, #4]
 8013aa8:	4620      	mov	r0, r4
 8013aaa:	f000 fa25 	bl	8013ef8 <_Balloc>
 8013aae:	4605      	mov	r5, r0
 8013ab0:	b928      	cbnz	r0, 8013abe <_dtoa_r+0x9d6>
 8013ab2:	4b80      	ldr	r3, [pc, #512]	; (8013cb4 <_dtoa_r+0xbcc>)
 8013ab4:	4602      	mov	r2, r0
 8013ab6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013aba:	f7ff bb2e 	b.w	801311a <_dtoa_r+0x32>
 8013abe:	693a      	ldr	r2, [r7, #16]
 8013ac0:	3202      	adds	r2, #2
 8013ac2:	0092      	lsls	r2, r2, #2
 8013ac4:	f107 010c 	add.w	r1, r7, #12
 8013ac8:	300c      	adds	r0, #12
 8013aca:	f7fe fcb1 	bl	8012430 <memcpy>
 8013ace:	2201      	movs	r2, #1
 8013ad0:	4629      	mov	r1, r5
 8013ad2:	4620      	mov	r0, r4
 8013ad4:	f000 fc22 	bl	801431c <__lshift>
 8013ad8:	9b00      	ldr	r3, [sp, #0]
 8013ada:	3301      	adds	r3, #1
 8013adc:	9301      	str	r3, [sp, #4]
 8013ade:	9b00      	ldr	r3, [sp, #0]
 8013ae0:	444b      	add	r3, r9
 8013ae2:	9307      	str	r3, [sp, #28]
 8013ae4:	9b02      	ldr	r3, [sp, #8]
 8013ae6:	f003 0301 	and.w	r3, r3, #1
 8013aea:	46b8      	mov	r8, r7
 8013aec:	9306      	str	r3, [sp, #24]
 8013aee:	4607      	mov	r7, r0
 8013af0:	9b01      	ldr	r3, [sp, #4]
 8013af2:	4631      	mov	r1, r6
 8013af4:	3b01      	subs	r3, #1
 8013af6:	4658      	mov	r0, fp
 8013af8:	9302      	str	r3, [sp, #8]
 8013afa:	f7ff fa69 	bl	8012fd0 <quorem>
 8013afe:	4603      	mov	r3, r0
 8013b00:	3330      	adds	r3, #48	; 0x30
 8013b02:	9004      	str	r0, [sp, #16]
 8013b04:	4641      	mov	r1, r8
 8013b06:	4658      	mov	r0, fp
 8013b08:	9308      	str	r3, [sp, #32]
 8013b0a:	f000 fc73 	bl	80143f4 <__mcmp>
 8013b0e:	463a      	mov	r2, r7
 8013b10:	4681      	mov	r9, r0
 8013b12:	4631      	mov	r1, r6
 8013b14:	4620      	mov	r0, r4
 8013b16:	f000 fc89 	bl	801442c <__mdiff>
 8013b1a:	68c2      	ldr	r2, [r0, #12]
 8013b1c:	9b08      	ldr	r3, [sp, #32]
 8013b1e:	4605      	mov	r5, r0
 8013b20:	bb02      	cbnz	r2, 8013b64 <_dtoa_r+0xa7c>
 8013b22:	4601      	mov	r1, r0
 8013b24:	4658      	mov	r0, fp
 8013b26:	f000 fc65 	bl	80143f4 <__mcmp>
 8013b2a:	9b08      	ldr	r3, [sp, #32]
 8013b2c:	4602      	mov	r2, r0
 8013b2e:	4629      	mov	r1, r5
 8013b30:	4620      	mov	r0, r4
 8013b32:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8013b36:	f000 fa1f 	bl	8013f78 <_Bfree>
 8013b3a:	9b05      	ldr	r3, [sp, #20]
 8013b3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b3e:	9d01      	ldr	r5, [sp, #4]
 8013b40:	ea43 0102 	orr.w	r1, r3, r2
 8013b44:	9b06      	ldr	r3, [sp, #24]
 8013b46:	430b      	orrs	r3, r1
 8013b48:	9b08      	ldr	r3, [sp, #32]
 8013b4a:	d10d      	bne.n	8013b68 <_dtoa_r+0xa80>
 8013b4c:	2b39      	cmp	r3, #57	; 0x39
 8013b4e:	d029      	beq.n	8013ba4 <_dtoa_r+0xabc>
 8013b50:	f1b9 0f00 	cmp.w	r9, #0
 8013b54:	dd01      	ble.n	8013b5a <_dtoa_r+0xa72>
 8013b56:	9b04      	ldr	r3, [sp, #16]
 8013b58:	3331      	adds	r3, #49	; 0x31
 8013b5a:	9a02      	ldr	r2, [sp, #8]
 8013b5c:	7013      	strb	r3, [r2, #0]
 8013b5e:	e774      	b.n	8013a4a <_dtoa_r+0x962>
 8013b60:	4638      	mov	r0, r7
 8013b62:	e7b9      	b.n	8013ad8 <_dtoa_r+0x9f0>
 8013b64:	2201      	movs	r2, #1
 8013b66:	e7e2      	b.n	8013b2e <_dtoa_r+0xa46>
 8013b68:	f1b9 0f00 	cmp.w	r9, #0
 8013b6c:	db06      	blt.n	8013b7c <_dtoa_r+0xa94>
 8013b6e:	9905      	ldr	r1, [sp, #20]
 8013b70:	ea41 0909 	orr.w	r9, r1, r9
 8013b74:	9906      	ldr	r1, [sp, #24]
 8013b76:	ea59 0101 	orrs.w	r1, r9, r1
 8013b7a:	d120      	bne.n	8013bbe <_dtoa_r+0xad6>
 8013b7c:	2a00      	cmp	r2, #0
 8013b7e:	ddec      	ble.n	8013b5a <_dtoa_r+0xa72>
 8013b80:	4659      	mov	r1, fp
 8013b82:	2201      	movs	r2, #1
 8013b84:	4620      	mov	r0, r4
 8013b86:	9301      	str	r3, [sp, #4]
 8013b88:	f000 fbc8 	bl	801431c <__lshift>
 8013b8c:	4631      	mov	r1, r6
 8013b8e:	4683      	mov	fp, r0
 8013b90:	f000 fc30 	bl	80143f4 <__mcmp>
 8013b94:	2800      	cmp	r0, #0
 8013b96:	9b01      	ldr	r3, [sp, #4]
 8013b98:	dc02      	bgt.n	8013ba0 <_dtoa_r+0xab8>
 8013b9a:	d1de      	bne.n	8013b5a <_dtoa_r+0xa72>
 8013b9c:	07da      	lsls	r2, r3, #31
 8013b9e:	d5dc      	bpl.n	8013b5a <_dtoa_r+0xa72>
 8013ba0:	2b39      	cmp	r3, #57	; 0x39
 8013ba2:	d1d8      	bne.n	8013b56 <_dtoa_r+0xa6e>
 8013ba4:	9a02      	ldr	r2, [sp, #8]
 8013ba6:	2339      	movs	r3, #57	; 0x39
 8013ba8:	7013      	strb	r3, [r2, #0]
 8013baa:	462b      	mov	r3, r5
 8013bac:	461d      	mov	r5, r3
 8013bae:	3b01      	subs	r3, #1
 8013bb0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013bb4:	2a39      	cmp	r2, #57	; 0x39
 8013bb6:	d050      	beq.n	8013c5a <_dtoa_r+0xb72>
 8013bb8:	3201      	adds	r2, #1
 8013bba:	701a      	strb	r2, [r3, #0]
 8013bbc:	e745      	b.n	8013a4a <_dtoa_r+0x962>
 8013bbe:	2a00      	cmp	r2, #0
 8013bc0:	dd03      	ble.n	8013bca <_dtoa_r+0xae2>
 8013bc2:	2b39      	cmp	r3, #57	; 0x39
 8013bc4:	d0ee      	beq.n	8013ba4 <_dtoa_r+0xabc>
 8013bc6:	3301      	adds	r3, #1
 8013bc8:	e7c7      	b.n	8013b5a <_dtoa_r+0xa72>
 8013bca:	9a01      	ldr	r2, [sp, #4]
 8013bcc:	9907      	ldr	r1, [sp, #28]
 8013bce:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013bd2:	428a      	cmp	r2, r1
 8013bd4:	d02a      	beq.n	8013c2c <_dtoa_r+0xb44>
 8013bd6:	4659      	mov	r1, fp
 8013bd8:	2300      	movs	r3, #0
 8013bda:	220a      	movs	r2, #10
 8013bdc:	4620      	mov	r0, r4
 8013bde:	f000 f9ed 	bl	8013fbc <__multadd>
 8013be2:	45b8      	cmp	r8, r7
 8013be4:	4683      	mov	fp, r0
 8013be6:	f04f 0300 	mov.w	r3, #0
 8013bea:	f04f 020a 	mov.w	r2, #10
 8013bee:	4641      	mov	r1, r8
 8013bf0:	4620      	mov	r0, r4
 8013bf2:	d107      	bne.n	8013c04 <_dtoa_r+0xb1c>
 8013bf4:	f000 f9e2 	bl	8013fbc <__multadd>
 8013bf8:	4680      	mov	r8, r0
 8013bfa:	4607      	mov	r7, r0
 8013bfc:	9b01      	ldr	r3, [sp, #4]
 8013bfe:	3301      	adds	r3, #1
 8013c00:	9301      	str	r3, [sp, #4]
 8013c02:	e775      	b.n	8013af0 <_dtoa_r+0xa08>
 8013c04:	f000 f9da 	bl	8013fbc <__multadd>
 8013c08:	4639      	mov	r1, r7
 8013c0a:	4680      	mov	r8, r0
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	220a      	movs	r2, #10
 8013c10:	4620      	mov	r0, r4
 8013c12:	f000 f9d3 	bl	8013fbc <__multadd>
 8013c16:	4607      	mov	r7, r0
 8013c18:	e7f0      	b.n	8013bfc <_dtoa_r+0xb14>
 8013c1a:	f1b9 0f00 	cmp.w	r9, #0
 8013c1e:	9a00      	ldr	r2, [sp, #0]
 8013c20:	bfcc      	ite	gt
 8013c22:	464d      	movgt	r5, r9
 8013c24:	2501      	movle	r5, #1
 8013c26:	4415      	add	r5, r2
 8013c28:	f04f 0800 	mov.w	r8, #0
 8013c2c:	4659      	mov	r1, fp
 8013c2e:	2201      	movs	r2, #1
 8013c30:	4620      	mov	r0, r4
 8013c32:	9301      	str	r3, [sp, #4]
 8013c34:	f000 fb72 	bl	801431c <__lshift>
 8013c38:	4631      	mov	r1, r6
 8013c3a:	4683      	mov	fp, r0
 8013c3c:	f000 fbda 	bl	80143f4 <__mcmp>
 8013c40:	2800      	cmp	r0, #0
 8013c42:	dcb2      	bgt.n	8013baa <_dtoa_r+0xac2>
 8013c44:	d102      	bne.n	8013c4c <_dtoa_r+0xb64>
 8013c46:	9b01      	ldr	r3, [sp, #4]
 8013c48:	07db      	lsls	r3, r3, #31
 8013c4a:	d4ae      	bmi.n	8013baa <_dtoa_r+0xac2>
 8013c4c:	462b      	mov	r3, r5
 8013c4e:	461d      	mov	r5, r3
 8013c50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013c54:	2a30      	cmp	r2, #48	; 0x30
 8013c56:	d0fa      	beq.n	8013c4e <_dtoa_r+0xb66>
 8013c58:	e6f7      	b.n	8013a4a <_dtoa_r+0x962>
 8013c5a:	9a00      	ldr	r2, [sp, #0]
 8013c5c:	429a      	cmp	r2, r3
 8013c5e:	d1a5      	bne.n	8013bac <_dtoa_r+0xac4>
 8013c60:	f10a 0a01 	add.w	sl, sl, #1
 8013c64:	2331      	movs	r3, #49	; 0x31
 8013c66:	e779      	b.n	8013b5c <_dtoa_r+0xa74>
 8013c68:	4b13      	ldr	r3, [pc, #76]	; (8013cb8 <_dtoa_r+0xbd0>)
 8013c6a:	f7ff baaf 	b.w	80131cc <_dtoa_r+0xe4>
 8013c6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	f47f aa86 	bne.w	8013182 <_dtoa_r+0x9a>
 8013c76:	4b11      	ldr	r3, [pc, #68]	; (8013cbc <_dtoa_r+0xbd4>)
 8013c78:	f7ff baa8 	b.w	80131cc <_dtoa_r+0xe4>
 8013c7c:	f1b9 0f00 	cmp.w	r9, #0
 8013c80:	dc03      	bgt.n	8013c8a <_dtoa_r+0xba2>
 8013c82:	9b05      	ldr	r3, [sp, #20]
 8013c84:	2b02      	cmp	r3, #2
 8013c86:	f73f aec9 	bgt.w	8013a1c <_dtoa_r+0x934>
 8013c8a:	9d00      	ldr	r5, [sp, #0]
 8013c8c:	4631      	mov	r1, r6
 8013c8e:	4658      	mov	r0, fp
 8013c90:	f7ff f99e 	bl	8012fd0 <quorem>
 8013c94:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013c98:	f805 3b01 	strb.w	r3, [r5], #1
 8013c9c:	9a00      	ldr	r2, [sp, #0]
 8013c9e:	1aaa      	subs	r2, r5, r2
 8013ca0:	4591      	cmp	r9, r2
 8013ca2:	ddba      	ble.n	8013c1a <_dtoa_r+0xb32>
 8013ca4:	4659      	mov	r1, fp
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	220a      	movs	r2, #10
 8013caa:	4620      	mov	r0, r4
 8013cac:	f000 f986 	bl	8013fbc <__multadd>
 8013cb0:	4683      	mov	fp, r0
 8013cb2:	e7eb      	b.n	8013c8c <_dtoa_r+0xba4>
 8013cb4:	08025166 	.word	0x08025166
 8013cb8:	08025024 	.word	0x08025024
 8013cbc:	080250fa 	.word	0x080250fa

08013cc0 <std>:
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	b510      	push	{r4, lr}
 8013cc4:	4604      	mov	r4, r0
 8013cc6:	e9c0 3300 	strd	r3, r3, [r0]
 8013cca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013cce:	6083      	str	r3, [r0, #8]
 8013cd0:	8181      	strh	r1, [r0, #12]
 8013cd2:	6643      	str	r3, [r0, #100]	; 0x64
 8013cd4:	81c2      	strh	r2, [r0, #14]
 8013cd6:	6183      	str	r3, [r0, #24]
 8013cd8:	4619      	mov	r1, r3
 8013cda:	2208      	movs	r2, #8
 8013cdc:	305c      	adds	r0, #92	; 0x5c
 8013cde:	f7fe fbb5 	bl	801244c <memset>
 8013ce2:	4b05      	ldr	r3, [pc, #20]	; (8013cf8 <std+0x38>)
 8013ce4:	6263      	str	r3, [r4, #36]	; 0x24
 8013ce6:	4b05      	ldr	r3, [pc, #20]	; (8013cfc <std+0x3c>)
 8013ce8:	62a3      	str	r3, [r4, #40]	; 0x28
 8013cea:	4b05      	ldr	r3, [pc, #20]	; (8013d00 <std+0x40>)
 8013cec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013cee:	4b05      	ldr	r3, [pc, #20]	; (8013d04 <std+0x44>)
 8013cf0:	6224      	str	r4, [r4, #32]
 8013cf2:	6323      	str	r3, [r4, #48]	; 0x30
 8013cf4:	bd10      	pop	{r4, pc}
 8013cf6:	bf00      	nop
 8013cf8:	08014bc9 	.word	0x08014bc9
 8013cfc:	08014beb 	.word	0x08014beb
 8013d00:	08014c23 	.word	0x08014c23
 8013d04:	08014c47 	.word	0x08014c47

08013d08 <_cleanup_r>:
 8013d08:	4901      	ldr	r1, [pc, #4]	; (8013d10 <_cleanup_r+0x8>)
 8013d0a:	f000 b8c1 	b.w	8013e90 <_fwalk_reent>
 8013d0e:	bf00      	nop
 8013d10:	08014f31 	.word	0x08014f31

08013d14 <__sfmoreglue>:
 8013d14:	b570      	push	{r4, r5, r6, lr}
 8013d16:	1e4a      	subs	r2, r1, #1
 8013d18:	2568      	movs	r5, #104	; 0x68
 8013d1a:	4355      	muls	r5, r2
 8013d1c:	460e      	mov	r6, r1
 8013d1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013d22:	f7fe fbeb 	bl	80124fc <_malloc_r>
 8013d26:	4604      	mov	r4, r0
 8013d28:	b140      	cbz	r0, 8013d3c <__sfmoreglue+0x28>
 8013d2a:	2100      	movs	r1, #0
 8013d2c:	e9c0 1600 	strd	r1, r6, [r0]
 8013d30:	300c      	adds	r0, #12
 8013d32:	60a0      	str	r0, [r4, #8]
 8013d34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013d38:	f7fe fb88 	bl	801244c <memset>
 8013d3c:	4620      	mov	r0, r4
 8013d3e:	bd70      	pop	{r4, r5, r6, pc}

08013d40 <__sfp_lock_acquire>:
 8013d40:	4801      	ldr	r0, [pc, #4]	; (8013d48 <__sfp_lock_acquire+0x8>)
 8013d42:	f000 b8ca 	b.w	8013eda <__retarget_lock_acquire_recursive>
 8013d46:	bf00      	nop
 8013d48:	20001c58 	.word	0x20001c58

08013d4c <__sfp_lock_release>:
 8013d4c:	4801      	ldr	r0, [pc, #4]	; (8013d54 <__sfp_lock_release+0x8>)
 8013d4e:	f000 b8c5 	b.w	8013edc <__retarget_lock_release_recursive>
 8013d52:	bf00      	nop
 8013d54:	20001c58 	.word	0x20001c58

08013d58 <__sinit_lock_acquire>:
 8013d58:	4801      	ldr	r0, [pc, #4]	; (8013d60 <__sinit_lock_acquire+0x8>)
 8013d5a:	f000 b8be 	b.w	8013eda <__retarget_lock_acquire_recursive>
 8013d5e:	bf00      	nop
 8013d60:	20001c53 	.word	0x20001c53

08013d64 <__sinit_lock_release>:
 8013d64:	4801      	ldr	r0, [pc, #4]	; (8013d6c <__sinit_lock_release+0x8>)
 8013d66:	f000 b8b9 	b.w	8013edc <__retarget_lock_release_recursive>
 8013d6a:	bf00      	nop
 8013d6c:	20001c53 	.word	0x20001c53

08013d70 <__sinit>:
 8013d70:	b510      	push	{r4, lr}
 8013d72:	4604      	mov	r4, r0
 8013d74:	f7ff fff0 	bl	8013d58 <__sinit_lock_acquire>
 8013d78:	69a3      	ldr	r3, [r4, #24]
 8013d7a:	b11b      	cbz	r3, 8013d84 <__sinit+0x14>
 8013d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d80:	f7ff bff0 	b.w	8013d64 <__sinit_lock_release>
 8013d84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013d88:	6523      	str	r3, [r4, #80]	; 0x50
 8013d8a:	4b13      	ldr	r3, [pc, #76]	; (8013dd8 <__sinit+0x68>)
 8013d8c:	4a13      	ldr	r2, [pc, #76]	; (8013ddc <__sinit+0x6c>)
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	62a2      	str	r2, [r4, #40]	; 0x28
 8013d92:	42a3      	cmp	r3, r4
 8013d94:	bf04      	itt	eq
 8013d96:	2301      	moveq	r3, #1
 8013d98:	61a3      	streq	r3, [r4, #24]
 8013d9a:	4620      	mov	r0, r4
 8013d9c:	f000 f820 	bl	8013de0 <__sfp>
 8013da0:	6060      	str	r0, [r4, #4]
 8013da2:	4620      	mov	r0, r4
 8013da4:	f000 f81c 	bl	8013de0 <__sfp>
 8013da8:	60a0      	str	r0, [r4, #8]
 8013daa:	4620      	mov	r0, r4
 8013dac:	f000 f818 	bl	8013de0 <__sfp>
 8013db0:	2200      	movs	r2, #0
 8013db2:	60e0      	str	r0, [r4, #12]
 8013db4:	2104      	movs	r1, #4
 8013db6:	6860      	ldr	r0, [r4, #4]
 8013db8:	f7ff ff82 	bl	8013cc0 <std>
 8013dbc:	68a0      	ldr	r0, [r4, #8]
 8013dbe:	2201      	movs	r2, #1
 8013dc0:	2109      	movs	r1, #9
 8013dc2:	f7ff ff7d 	bl	8013cc0 <std>
 8013dc6:	68e0      	ldr	r0, [r4, #12]
 8013dc8:	2202      	movs	r2, #2
 8013dca:	2112      	movs	r1, #18
 8013dcc:	f7ff ff78 	bl	8013cc0 <std>
 8013dd0:	2301      	movs	r3, #1
 8013dd2:	61a3      	str	r3, [r4, #24]
 8013dd4:	e7d2      	b.n	8013d7c <__sinit+0xc>
 8013dd6:	bf00      	nop
 8013dd8:	08025010 	.word	0x08025010
 8013ddc:	08013d09 	.word	0x08013d09

08013de0 <__sfp>:
 8013de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013de2:	4607      	mov	r7, r0
 8013de4:	f7ff ffac 	bl	8013d40 <__sfp_lock_acquire>
 8013de8:	4b1e      	ldr	r3, [pc, #120]	; (8013e64 <__sfp+0x84>)
 8013dea:	681e      	ldr	r6, [r3, #0]
 8013dec:	69b3      	ldr	r3, [r6, #24]
 8013dee:	b913      	cbnz	r3, 8013df6 <__sfp+0x16>
 8013df0:	4630      	mov	r0, r6
 8013df2:	f7ff ffbd 	bl	8013d70 <__sinit>
 8013df6:	3648      	adds	r6, #72	; 0x48
 8013df8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013dfc:	3b01      	subs	r3, #1
 8013dfe:	d503      	bpl.n	8013e08 <__sfp+0x28>
 8013e00:	6833      	ldr	r3, [r6, #0]
 8013e02:	b30b      	cbz	r3, 8013e48 <__sfp+0x68>
 8013e04:	6836      	ldr	r6, [r6, #0]
 8013e06:	e7f7      	b.n	8013df8 <__sfp+0x18>
 8013e08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013e0c:	b9d5      	cbnz	r5, 8013e44 <__sfp+0x64>
 8013e0e:	4b16      	ldr	r3, [pc, #88]	; (8013e68 <__sfp+0x88>)
 8013e10:	60e3      	str	r3, [r4, #12]
 8013e12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013e16:	6665      	str	r5, [r4, #100]	; 0x64
 8013e18:	f000 f85e 	bl	8013ed8 <__retarget_lock_init_recursive>
 8013e1c:	f7ff ff96 	bl	8013d4c <__sfp_lock_release>
 8013e20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013e24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013e28:	6025      	str	r5, [r4, #0]
 8013e2a:	61a5      	str	r5, [r4, #24]
 8013e2c:	2208      	movs	r2, #8
 8013e2e:	4629      	mov	r1, r5
 8013e30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013e34:	f7fe fb0a 	bl	801244c <memset>
 8013e38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013e3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013e40:	4620      	mov	r0, r4
 8013e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e44:	3468      	adds	r4, #104	; 0x68
 8013e46:	e7d9      	b.n	8013dfc <__sfp+0x1c>
 8013e48:	2104      	movs	r1, #4
 8013e4a:	4638      	mov	r0, r7
 8013e4c:	f7ff ff62 	bl	8013d14 <__sfmoreglue>
 8013e50:	4604      	mov	r4, r0
 8013e52:	6030      	str	r0, [r6, #0]
 8013e54:	2800      	cmp	r0, #0
 8013e56:	d1d5      	bne.n	8013e04 <__sfp+0x24>
 8013e58:	f7ff ff78 	bl	8013d4c <__sfp_lock_release>
 8013e5c:	230c      	movs	r3, #12
 8013e5e:	603b      	str	r3, [r7, #0]
 8013e60:	e7ee      	b.n	8013e40 <__sfp+0x60>
 8013e62:	bf00      	nop
 8013e64:	08025010 	.word	0x08025010
 8013e68:	ffff0001 	.word	0xffff0001

08013e6c <fiprintf>:
 8013e6c:	b40e      	push	{r1, r2, r3}
 8013e6e:	b503      	push	{r0, r1, lr}
 8013e70:	4601      	mov	r1, r0
 8013e72:	ab03      	add	r3, sp, #12
 8013e74:	4805      	ldr	r0, [pc, #20]	; (8013e8c <fiprintf+0x20>)
 8013e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e7a:	6800      	ldr	r0, [r0, #0]
 8013e7c:	9301      	str	r3, [sp, #4]
 8013e7e:	f000 fd73 	bl	8014968 <_vfiprintf_r>
 8013e82:	b002      	add	sp, #8
 8013e84:	f85d eb04 	ldr.w	lr, [sp], #4
 8013e88:	b003      	add	sp, #12
 8013e8a:	4770      	bx	lr
 8013e8c:	200006a4 	.word	0x200006a4

08013e90 <_fwalk_reent>:
 8013e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e94:	4606      	mov	r6, r0
 8013e96:	4688      	mov	r8, r1
 8013e98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013e9c:	2700      	movs	r7, #0
 8013e9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013ea2:	f1b9 0901 	subs.w	r9, r9, #1
 8013ea6:	d505      	bpl.n	8013eb4 <_fwalk_reent+0x24>
 8013ea8:	6824      	ldr	r4, [r4, #0]
 8013eaa:	2c00      	cmp	r4, #0
 8013eac:	d1f7      	bne.n	8013e9e <_fwalk_reent+0xe>
 8013eae:	4638      	mov	r0, r7
 8013eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013eb4:	89ab      	ldrh	r3, [r5, #12]
 8013eb6:	2b01      	cmp	r3, #1
 8013eb8:	d907      	bls.n	8013eca <_fwalk_reent+0x3a>
 8013eba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013ebe:	3301      	adds	r3, #1
 8013ec0:	d003      	beq.n	8013eca <_fwalk_reent+0x3a>
 8013ec2:	4629      	mov	r1, r5
 8013ec4:	4630      	mov	r0, r6
 8013ec6:	47c0      	blx	r8
 8013ec8:	4307      	orrs	r7, r0
 8013eca:	3568      	adds	r5, #104	; 0x68
 8013ecc:	e7e9      	b.n	8013ea2 <_fwalk_reent+0x12>
	...

08013ed0 <_localeconv_r>:
 8013ed0:	4800      	ldr	r0, [pc, #0]	; (8013ed4 <_localeconv_r+0x4>)
 8013ed2:	4770      	bx	lr
 8013ed4:	200007f8 	.word	0x200007f8

08013ed8 <__retarget_lock_init_recursive>:
 8013ed8:	4770      	bx	lr

08013eda <__retarget_lock_acquire_recursive>:
 8013eda:	4770      	bx	lr

08013edc <__retarget_lock_release_recursive>:
 8013edc:	4770      	bx	lr
	...

08013ee0 <__malloc_lock>:
 8013ee0:	4801      	ldr	r0, [pc, #4]	; (8013ee8 <__malloc_lock+0x8>)
 8013ee2:	f7ff bffa 	b.w	8013eda <__retarget_lock_acquire_recursive>
 8013ee6:	bf00      	nop
 8013ee8:	20001c54 	.word	0x20001c54

08013eec <__malloc_unlock>:
 8013eec:	4801      	ldr	r0, [pc, #4]	; (8013ef4 <__malloc_unlock+0x8>)
 8013eee:	f7ff bff5 	b.w	8013edc <__retarget_lock_release_recursive>
 8013ef2:	bf00      	nop
 8013ef4:	20001c54 	.word	0x20001c54

08013ef8 <_Balloc>:
 8013ef8:	b570      	push	{r4, r5, r6, lr}
 8013efa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013efc:	4604      	mov	r4, r0
 8013efe:	460d      	mov	r5, r1
 8013f00:	b976      	cbnz	r6, 8013f20 <_Balloc+0x28>
 8013f02:	2010      	movs	r0, #16
 8013f04:	f7fe fa84 	bl	8012410 <malloc>
 8013f08:	4602      	mov	r2, r0
 8013f0a:	6260      	str	r0, [r4, #36]	; 0x24
 8013f0c:	b920      	cbnz	r0, 8013f18 <_Balloc+0x20>
 8013f0e:	4b18      	ldr	r3, [pc, #96]	; (8013f70 <_Balloc+0x78>)
 8013f10:	4818      	ldr	r0, [pc, #96]	; (8013f74 <_Balloc+0x7c>)
 8013f12:	2166      	movs	r1, #102	; 0x66
 8013f14:	f7ff f83e 	bl	8012f94 <__assert_func>
 8013f18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013f1c:	6006      	str	r6, [r0, #0]
 8013f1e:	60c6      	str	r6, [r0, #12]
 8013f20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013f22:	68f3      	ldr	r3, [r6, #12]
 8013f24:	b183      	cbz	r3, 8013f48 <_Balloc+0x50>
 8013f26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f28:	68db      	ldr	r3, [r3, #12]
 8013f2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013f2e:	b9b8      	cbnz	r0, 8013f60 <_Balloc+0x68>
 8013f30:	2101      	movs	r1, #1
 8013f32:	fa01 f605 	lsl.w	r6, r1, r5
 8013f36:	1d72      	adds	r2, r6, #5
 8013f38:	0092      	lsls	r2, r2, #2
 8013f3a:	4620      	mov	r0, r4
 8013f3c:	f000 fb5a 	bl	80145f4 <_calloc_r>
 8013f40:	b160      	cbz	r0, 8013f5c <_Balloc+0x64>
 8013f42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013f46:	e00e      	b.n	8013f66 <_Balloc+0x6e>
 8013f48:	2221      	movs	r2, #33	; 0x21
 8013f4a:	2104      	movs	r1, #4
 8013f4c:	4620      	mov	r0, r4
 8013f4e:	f000 fb51 	bl	80145f4 <_calloc_r>
 8013f52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f54:	60f0      	str	r0, [r6, #12]
 8013f56:	68db      	ldr	r3, [r3, #12]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d1e4      	bne.n	8013f26 <_Balloc+0x2e>
 8013f5c:	2000      	movs	r0, #0
 8013f5e:	bd70      	pop	{r4, r5, r6, pc}
 8013f60:	6802      	ldr	r2, [r0, #0]
 8013f62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013f66:	2300      	movs	r3, #0
 8013f68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013f6c:	e7f7      	b.n	8013f5e <_Balloc+0x66>
 8013f6e:	bf00      	nop
 8013f70:	08025048 	.word	0x08025048
 8013f74:	080251d8 	.word	0x080251d8

08013f78 <_Bfree>:
 8013f78:	b570      	push	{r4, r5, r6, lr}
 8013f7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013f7c:	4605      	mov	r5, r0
 8013f7e:	460c      	mov	r4, r1
 8013f80:	b976      	cbnz	r6, 8013fa0 <_Bfree+0x28>
 8013f82:	2010      	movs	r0, #16
 8013f84:	f7fe fa44 	bl	8012410 <malloc>
 8013f88:	4602      	mov	r2, r0
 8013f8a:	6268      	str	r0, [r5, #36]	; 0x24
 8013f8c:	b920      	cbnz	r0, 8013f98 <_Bfree+0x20>
 8013f8e:	4b09      	ldr	r3, [pc, #36]	; (8013fb4 <_Bfree+0x3c>)
 8013f90:	4809      	ldr	r0, [pc, #36]	; (8013fb8 <_Bfree+0x40>)
 8013f92:	218a      	movs	r1, #138	; 0x8a
 8013f94:	f7fe fffe 	bl	8012f94 <__assert_func>
 8013f98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013f9c:	6006      	str	r6, [r0, #0]
 8013f9e:	60c6      	str	r6, [r0, #12]
 8013fa0:	b13c      	cbz	r4, 8013fb2 <_Bfree+0x3a>
 8013fa2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013fa4:	6862      	ldr	r2, [r4, #4]
 8013fa6:	68db      	ldr	r3, [r3, #12]
 8013fa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013fac:	6021      	str	r1, [r4, #0]
 8013fae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013fb2:	bd70      	pop	{r4, r5, r6, pc}
 8013fb4:	08025048 	.word	0x08025048
 8013fb8:	080251d8 	.word	0x080251d8

08013fbc <__multadd>:
 8013fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fc0:	690e      	ldr	r6, [r1, #16]
 8013fc2:	4607      	mov	r7, r0
 8013fc4:	4698      	mov	r8, r3
 8013fc6:	460c      	mov	r4, r1
 8013fc8:	f101 0014 	add.w	r0, r1, #20
 8013fcc:	2300      	movs	r3, #0
 8013fce:	6805      	ldr	r5, [r0, #0]
 8013fd0:	b2a9      	uxth	r1, r5
 8013fd2:	fb02 8101 	mla	r1, r2, r1, r8
 8013fd6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8013fda:	0c2d      	lsrs	r5, r5, #16
 8013fdc:	fb02 c505 	mla	r5, r2, r5, ip
 8013fe0:	b289      	uxth	r1, r1
 8013fe2:	3301      	adds	r3, #1
 8013fe4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8013fe8:	429e      	cmp	r6, r3
 8013fea:	f840 1b04 	str.w	r1, [r0], #4
 8013fee:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8013ff2:	dcec      	bgt.n	8013fce <__multadd+0x12>
 8013ff4:	f1b8 0f00 	cmp.w	r8, #0
 8013ff8:	d022      	beq.n	8014040 <__multadd+0x84>
 8013ffa:	68a3      	ldr	r3, [r4, #8]
 8013ffc:	42b3      	cmp	r3, r6
 8013ffe:	dc19      	bgt.n	8014034 <__multadd+0x78>
 8014000:	6861      	ldr	r1, [r4, #4]
 8014002:	4638      	mov	r0, r7
 8014004:	3101      	adds	r1, #1
 8014006:	f7ff ff77 	bl	8013ef8 <_Balloc>
 801400a:	4605      	mov	r5, r0
 801400c:	b928      	cbnz	r0, 801401a <__multadd+0x5e>
 801400e:	4602      	mov	r2, r0
 8014010:	4b0d      	ldr	r3, [pc, #52]	; (8014048 <__multadd+0x8c>)
 8014012:	480e      	ldr	r0, [pc, #56]	; (801404c <__multadd+0x90>)
 8014014:	21b5      	movs	r1, #181	; 0xb5
 8014016:	f7fe ffbd 	bl	8012f94 <__assert_func>
 801401a:	6922      	ldr	r2, [r4, #16]
 801401c:	3202      	adds	r2, #2
 801401e:	f104 010c 	add.w	r1, r4, #12
 8014022:	0092      	lsls	r2, r2, #2
 8014024:	300c      	adds	r0, #12
 8014026:	f7fe fa03 	bl	8012430 <memcpy>
 801402a:	4621      	mov	r1, r4
 801402c:	4638      	mov	r0, r7
 801402e:	f7ff ffa3 	bl	8013f78 <_Bfree>
 8014032:	462c      	mov	r4, r5
 8014034:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8014038:	3601      	adds	r6, #1
 801403a:	f8c3 8014 	str.w	r8, [r3, #20]
 801403e:	6126      	str	r6, [r4, #16]
 8014040:	4620      	mov	r0, r4
 8014042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014046:	bf00      	nop
 8014048:	08025166 	.word	0x08025166
 801404c:	080251d8 	.word	0x080251d8

08014050 <__hi0bits>:
 8014050:	0c03      	lsrs	r3, r0, #16
 8014052:	041b      	lsls	r3, r3, #16
 8014054:	b9d3      	cbnz	r3, 801408c <__hi0bits+0x3c>
 8014056:	0400      	lsls	r0, r0, #16
 8014058:	2310      	movs	r3, #16
 801405a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801405e:	bf04      	itt	eq
 8014060:	0200      	lsleq	r0, r0, #8
 8014062:	3308      	addeq	r3, #8
 8014064:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014068:	bf04      	itt	eq
 801406a:	0100      	lsleq	r0, r0, #4
 801406c:	3304      	addeq	r3, #4
 801406e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014072:	bf04      	itt	eq
 8014074:	0080      	lsleq	r0, r0, #2
 8014076:	3302      	addeq	r3, #2
 8014078:	2800      	cmp	r0, #0
 801407a:	db05      	blt.n	8014088 <__hi0bits+0x38>
 801407c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014080:	f103 0301 	add.w	r3, r3, #1
 8014084:	bf08      	it	eq
 8014086:	2320      	moveq	r3, #32
 8014088:	4618      	mov	r0, r3
 801408a:	4770      	bx	lr
 801408c:	2300      	movs	r3, #0
 801408e:	e7e4      	b.n	801405a <__hi0bits+0xa>

08014090 <__lo0bits>:
 8014090:	6803      	ldr	r3, [r0, #0]
 8014092:	f013 0207 	ands.w	r2, r3, #7
 8014096:	4601      	mov	r1, r0
 8014098:	d00b      	beq.n	80140b2 <__lo0bits+0x22>
 801409a:	07da      	lsls	r2, r3, #31
 801409c:	d424      	bmi.n	80140e8 <__lo0bits+0x58>
 801409e:	0798      	lsls	r0, r3, #30
 80140a0:	bf49      	itett	mi
 80140a2:	085b      	lsrmi	r3, r3, #1
 80140a4:	089b      	lsrpl	r3, r3, #2
 80140a6:	2001      	movmi	r0, #1
 80140a8:	600b      	strmi	r3, [r1, #0]
 80140aa:	bf5c      	itt	pl
 80140ac:	600b      	strpl	r3, [r1, #0]
 80140ae:	2002      	movpl	r0, #2
 80140b0:	4770      	bx	lr
 80140b2:	b298      	uxth	r0, r3
 80140b4:	b9b0      	cbnz	r0, 80140e4 <__lo0bits+0x54>
 80140b6:	0c1b      	lsrs	r3, r3, #16
 80140b8:	2010      	movs	r0, #16
 80140ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 80140be:	bf04      	itt	eq
 80140c0:	0a1b      	lsreq	r3, r3, #8
 80140c2:	3008      	addeq	r0, #8
 80140c4:	071a      	lsls	r2, r3, #28
 80140c6:	bf04      	itt	eq
 80140c8:	091b      	lsreq	r3, r3, #4
 80140ca:	3004      	addeq	r0, #4
 80140cc:	079a      	lsls	r2, r3, #30
 80140ce:	bf04      	itt	eq
 80140d0:	089b      	lsreq	r3, r3, #2
 80140d2:	3002      	addeq	r0, #2
 80140d4:	07da      	lsls	r2, r3, #31
 80140d6:	d403      	bmi.n	80140e0 <__lo0bits+0x50>
 80140d8:	085b      	lsrs	r3, r3, #1
 80140da:	f100 0001 	add.w	r0, r0, #1
 80140de:	d005      	beq.n	80140ec <__lo0bits+0x5c>
 80140e0:	600b      	str	r3, [r1, #0]
 80140e2:	4770      	bx	lr
 80140e4:	4610      	mov	r0, r2
 80140e6:	e7e8      	b.n	80140ba <__lo0bits+0x2a>
 80140e8:	2000      	movs	r0, #0
 80140ea:	4770      	bx	lr
 80140ec:	2020      	movs	r0, #32
 80140ee:	4770      	bx	lr

080140f0 <__i2b>:
 80140f0:	b510      	push	{r4, lr}
 80140f2:	460c      	mov	r4, r1
 80140f4:	2101      	movs	r1, #1
 80140f6:	f7ff feff 	bl	8013ef8 <_Balloc>
 80140fa:	4602      	mov	r2, r0
 80140fc:	b928      	cbnz	r0, 801410a <__i2b+0x1a>
 80140fe:	4b05      	ldr	r3, [pc, #20]	; (8014114 <__i2b+0x24>)
 8014100:	4805      	ldr	r0, [pc, #20]	; (8014118 <__i2b+0x28>)
 8014102:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014106:	f7fe ff45 	bl	8012f94 <__assert_func>
 801410a:	2301      	movs	r3, #1
 801410c:	6144      	str	r4, [r0, #20]
 801410e:	6103      	str	r3, [r0, #16]
 8014110:	bd10      	pop	{r4, pc}
 8014112:	bf00      	nop
 8014114:	08025166 	.word	0x08025166
 8014118:	080251d8 	.word	0x080251d8

0801411c <__multiply>:
 801411c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014120:	4614      	mov	r4, r2
 8014122:	690a      	ldr	r2, [r1, #16]
 8014124:	6923      	ldr	r3, [r4, #16]
 8014126:	429a      	cmp	r2, r3
 8014128:	bfb8      	it	lt
 801412a:	460b      	movlt	r3, r1
 801412c:	460d      	mov	r5, r1
 801412e:	bfbc      	itt	lt
 8014130:	4625      	movlt	r5, r4
 8014132:	461c      	movlt	r4, r3
 8014134:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8014138:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801413c:	68ab      	ldr	r3, [r5, #8]
 801413e:	6869      	ldr	r1, [r5, #4]
 8014140:	eb0a 0709 	add.w	r7, sl, r9
 8014144:	42bb      	cmp	r3, r7
 8014146:	b085      	sub	sp, #20
 8014148:	bfb8      	it	lt
 801414a:	3101      	addlt	r1, #1
 801414c:	f7ff fed4 	bl	8013ef8 <_Balloc>
 8014150:	b930      	cbnz	r0, 8014160 <__multiply+0x44>
 8014152:	4602      	mov	r2, r0
 8014154:	4b42      	ldr	r3, [pc, #264]	; (8014260 <__multiply+0x144>)
 8014156:	4843      	ldr	r0, [pc, #268]	; (8014264 <__multiply+0x148>)
 8014158:	f240 115d 	movw	r1, #349	; 0x15d
 801415c:	f7fe ff1a 	bl	8012f94 <__assert_func>
 8014160:	f100 0614 	add.w	r6, r0, #20
 8014164:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8014168:	4633      	mov	r3, r6
 801416a:	2200      	movs	r2, #0
 801416c:	4543      	cmp	r3, r8
 801416e:	d31e      	bcc.n	80141ae <__multiply+0x92>
 8014170:	f105 0c14 	add.w	ip, r5, #20
 8014174:	f104 0314 	add.w	r3, r4, #20
 8014178:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801417c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8014180:	9202      	str	r2, [sp, #8]
 8014182:	ebac 0205 	sub.w	r2, ip, r5
 8014186:	3a15      	subs	r2, #21
 8014188:	f022 0203 	bic.w	r2, r2, #3
 801418c:	3204      	adds	r2, #4
 801418e:	f105 0115 	add.w	r1, r5, #21
 8014192:	458c      	cmp	ip, r1
 8014194:	bf38      	it	cc
 8014196:	2204      	movcc	r2, #4
 8014198:	9201      	str	r2, [sp, #4]
 801419a:	9a02      	ldr	r2, [sp, #8]
 801419c:	9303      	str	r3, [sp, #12]
 801419e:	429a      	cmp	r2, r3
 80141a0:	d808      	bhi.n	80141b4 <__multiply+0x98>
 80141a2:	2f00      	cmp	r7, #0
 80141a4:	dc55      	bgt.n	8014252 <__multiply+0x136>
 80141a6:	6107      	str	r7, [r0, #16]
 80141a8:	b005      	add	sp, #20
 80141aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141ae:	f843 2b04 	str.w	r2, [r3], #4
 80141b2:	e7db      	b.n	801416c <__multiply+0x50>
 80141b4:	f8b3 a000 	ldrh.w	sl, [r3]
 80141b8:	f1ba 0f00 	cmp.w	sl, #0
 80141bc:	d020      	beq.n	8014200 <__multiply+0xe4>
 80141be:	f105 0e14 	add.w	lr, r5, #20
 80141c2:	46b1      	mov	r9, r6
 80141c4:	2200      	movs	r2, #0
 80141c6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80141ca:	f8d9 b000 	ldr.w	fp, [r9]
 80141ce:	b2a1      	uxth	r1, r4
 80141d0:	fa1f fb8b 	uxth.w	fp, fp
 80141d4:	fb0a b101 	mla	r1, sl, r1, fp
 80141d8:	4411      	add	r1, r2
 80141da:	f8d9 2000 	ldr.w	r2, [r9]
 80141de:	0c24      	lsrs	r4, r4, #16
 80141e0:	0c12      	lsrs	r2, r2, #16
 80141e2:	fb0a 2404 	mla	r4, sl, r4, r2
 80141e6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80141ea:	b289      	uxth	r1, r1
 80141ec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80141f0:	45f4      	cmp	ip, lr
 80141f2:	f849 1b04 	str.w	r1, [r9], #4
 80141f6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80141fa:	d8e4      	bhi.n	80141c6 <__multiply+0xaa>
 80141fc:	9901      	ldr	r1, [sp, #4]
 80141fe:	5072      	str	r2, [r6, r1]
 8014200:	9a03      	ldr	r2, [sp, #12]
 8014202:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014206:	3304      	adds	r3, #4
 8014208:	f1b9 0f00 	cmp.w	r9, #0
 801420c:	d01f      	beq.n	801424e <__multiply+0x132>
 801420e:	6834      	ldr	r4, [r6, #0]
 8014210:	f105 0114 	add.w	r1, r5, #20
 8014214:	46b6      	mov	lr, r6
 8014216:	f04f 0a00 	mov.w	sl, #0
 801421a:	880a      	ldrh	r2, [r1, #0]
 801421c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014220:	fb09 b202 	mla	r2, r9, r2, fp
 8014224:	4492      	add	sl, r2
 8014226:	b2a4      	uxth	r4, r4
 8014228:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801422c:	f84e 4b04 	str.w	r4, [lr], #4
 8014230:	f851 4b04 	ldr.w	r4, [r1], #4
 8014234:	f8be 2000 	ldrh.w	r2, [lr]
 8014238:	0c24      	lsrs	r4, r4, #16
 801423a:	fb09 2404 	mla	r4, r9, r4, r2
 801423e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8014242:	458c      	cmp	ip, r1
 8014244:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014248:	d8e7      	bhi.n	801421a <__multiply+0xfe>
 801424a:	9a01      	ldr	r2, [sp, #4]
 801424c:	50b4      	str	r4, [r6, r2]
 801424e:	3604      	adds	r6, #4
 8014250:	e7a3      	b.n	801419a <__multiply+0x7e>
 8014252:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014256:	2b00      	cmp	r3, #0
 8014258:	d1a5      	bne.n	80141a6 <__multiply+0x8a>
 801425a:	3f01      	subs	r7, #1
 801425c:	e7a1      	b.n	80141a2 <__multiply+0x86>
 801425e:	bf00      	nop
 8014260:	08025166 	.word	0x08025166
 8014264:	080251d8 	.word	0x080251d8

08014268 <__pow5mult>:
 8014268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801426c:	4615      	mov	r5, r2
 801426e:	f012 0203 	ands.w	r2, r2, #3
 8014272:	4606      	mov	r6, r0
 8014274:	460f      	mov	r7, r1
 8014276:	d007      	beq.n	8014288 <__pow5mult+0x20>
 8014278:	4c25      	ldr	r4, [pc, #148]	; (8014310 <__pow5mult+0xa8>)
 801427a:	3a01      	subs	r2, #1
 801427c:	2300      	movs	r3, #0
 801427e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014282:	f7ff fe9b 	bl	8013fbc <__multadd>
 8014286:	4607      	mov	r7, r0
 8014288:	10ad      	asrs	r5, r5, #2
 801428a:	d03d      	beq.n	8014308 <__pow5mult+0xa0>
 801428c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801428e:	b97c      	cbnz	r4, 80142b0 <__pow5mult+0x48>
 8014290:	2010      	movs	r0, #16
 8014292:	f7fe f8bd 	bl	8012410 <malloc>
 8014296:	4602      	mov	r2, r0
 8014298:	6270      	str	r0, [r6, #36]	; 0x24
 801429a:	b928      	cbnz	r0, 80142a8 <__pow5mult+0x40>
 801429c:	4b1d      	ldr	r3, [pc, #116]	; (8014314 <__pow5mult+0xac>)
 801429e:	481e      	ldr	r0, [pc, #120]	; (8014318 <__pow5mult+0xb0>)
 80142a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80142a4:	f7fe fe76 	bl	8012f94 <__assert_func>
 80142a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80142ac:	6004      	str	r4, [r0, #0]
 80142ae:	60c4      	str	r4, [r0, #12]
 80142b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80142b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80142b8:	b94c      	cbnz	r4, 80142ce <__pow5mult+0x66>
 80142ba:	f240 2171 	movw	r1, #625	; 0x271
 80142be:	4630      	mov	r0, r6
 80142c0:	f7ff ff16 	bl	80140f0 <__i2b>
 80142c4:	2300      	movs	r3, #0
 80142c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80142ca:	4604      	mov	r4, r0
 80142cc:	6003      	str	r3, [r0, #0]
 80142ce:	f04f 0900 	mov.w	r9, #0
 80142d2:	07eb      	lsls	r3, r5, #31
 80142d4:	d50a      	bpl.n	80142ec <__pow5mult+0x84>
 80142d6:	4639      	mov	r1, r7
 80142d8:	4622      	mov	r2, r4
 80142da:	4630      	mov	r0, r6
 80142dc:	f7ff ff1e 	bl	801411c <__multiply>
 80142e0:	4639      	mov	r1, r7
 80142e2:	4680      	mov	r8, r0
 80142e4:	4630      	mov	r0, r6
 80142e6:	f7ff fe47 	bl	8013f78 <_Bfree>
 80142ea:	4647      	mov	r7, r8
 80142ec:	106d      	asrs	r5, r5, #1
 80142ee:	d00b      	beq.n	8014308 <__pow5mult+0xa0>
 80142f0:	6820      	ldr	r0, [r4, #0]
 80142f2:	b938      	cbnz	r0, 8014304 <__pow5mult+0x9c>
 80142f4:	4622      	mov	r2, r4
 80142f6:	4621      	mov	r1, r4
 80142f8:	4630      	mov	r0, r6
 80142fa:	f7ff ff0f 	bl	801411c <__multiply>
 80142fe:	6020      	str	r0, [r4, #0]
 8014300:	f8c0 9000 	str.w	r9, [r0]
 8014304:	4604      	mov	r4, r0
 8014306:	e7e4      	b.n	80142d2 <__pow5mult+0x6a>
 8014308:	4638      	mov	r0, r7
 801430a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801430e:	bf00      	nop
 8014310:	08025328 	.word	0x08025328
 8014314:	08025048 	.word	0x08025048
 8014318:	080251d8 	.word	0x080251d8

0801431c <__lshift>:
 801431c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014320:	460c      	mov	r4, r1
 8014322:	6849      	ldr	r1, [r1, #4]
 8014324:	6923      	ldr	r3, [r4, #16]
 8014326:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801432a:	68a3      	ldr	r3, [r4, #8]
 801432c:	4607      	mov	r7, r0
 801432e:	4691      	mov	r9, r2
 8014330:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014334:	f108 0601 	add.w	r6, r8, #1
 8014338:	42b3      	cmp	r3, r6
 801433a:	db0b      	blt.n	8014354 <__lshift+0x38>
 801433c:	4638      	mov	r0, r7
 801433e:	f7ff fddb 	bl	8013ef8 <_Balloc>
 8014342:	4605      	mov	r5, r0
 8014344:	b948      	cbnz	r0, 801435a <__lshift+0x3e>
 8014346:	4602      	mov	r2, r0
 8014348:	4b28      	ldr	r3, [pc, #160]	; (80143ec <__lshift+0xd0>)
 801434a:	4829      	ldr	r0, [pc, #164]	; (80143f0 <__lshift+0xd4>)
 801434c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014350:	f7fe fe20 	bl	8012f94 <__assert_func>
 8014354:	3101      	adds	r1, #1
 8014356:	005b      	lsls	r3, r3, #1
 8014358:	e7ee      	b.n	8014338 <__lshift+0x1c>
 801435a:	2300      	movs	r3, #0
 801435c:	f100 0114 	add.w	r1, r0, #20
 8014360:	f100 0210 	add.w	r2, r0, #16
 8014364:	4618      	mov	r0, r3
 8014366:	4553      	cmp	r3, sl
 8014368:	db33      	blt.n	80143d2 <__lshift+0xb6>
 801436a:	6920      	ldr	r0, [r4, #16]
 801436c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014370:	f104 0314 	add.w	r3, r4, #20
 8014374:	f019 091f 	ands.w	r9, r9, #31
 8014378:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801437c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014380:	d02b      	beq.n	80143da <__lshift+0xbe>
 8014382:	f1c9 0e20 	rsb	lr, r9, #32
 8014386:	468a      	mov	sl, r1
 8014388:	2200      	movs	r2, #0
 801438a:	6818      	ldr	r0, [r3, #0]
 801438c:	fa00 f009 	lsl.w	r0, r0, r9
 8014390:	4302      	orrs	r2, r0
 8014392:	f84a 2b04 	str.w	r2, [sl], #4
 8014396:	f853 2b04 	ldr.w	r2, [r3], #4
 801439a:	459c      	cmp	ip, r3
 801439c:	fa22 f20e 	lsr.w	r2, r2, lr
 80143a0:	d8f3      	bhi.n	801438a <__lshift+0x6e>
 80143a2:	ebac 0304 	sub.w	r3, ip, r4
 80143a6:	3b15      	subs	r3, #21
 80143a8:	f023 0303 	bic.w	r3, r3, #3
 80143ac:	3304      	adds	r3, #4
 80143ae:	f104 0015 	add.w	r0, r4, #21
 80143b2:	4584      	cmp	ip, r0
 80143b4:	bf38      	it	cc
 80143b6:	2304      	movcc	r3, #4
 80143b8:	50ca      	str	r2, [r1, r3]
 80143ba:	b10a      	cbz	r2, 80143c0 <__lshift+0xa4>
 80143bc:	f108 0602 	add.w	r6, r8, #2
 80143c0:	3e01      	subs	r6, #1
 80143c2:	4638      	mov	r0, r7
 80143c4:	612e      	str	r6, [r5, #16]
 80143c6:	4621      	mov	r1, r4
 80143c8:	f7ff fdd6 	bl	8013f78 <_Bfree>
 80143cc:	4628      	mov	r0, r5
 80143ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80143d6:	3301      	adds	r3, #1
 80143d8:	e7c5      	b.n	8014366 <__lshift+0x4a>
 80143da:	3904      	subs	r1, #4
 80143dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80143e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80143e4:	459c      	cmp	ip, r3
 80143e6:	d8f9      	bhi.n	80143dc <__lshift+0xc0>
 80143e8:	e7ea      	b.n	80143c0 <__lshift+0xa4>
 80143ea:	bf00      	nop
 80143ec:	08025166 	.word	0x08025166
 80143f0:	080251d8 	.word	0x080251d8

080143f4 <__mcmp>:
 80143f4:	b530      	push	{r4, r5, lr}
 80143f6:	6902      	ldr	r2, [r0, #16]
 80143f8:	690c      	ldr	r4, [r1, #16]
 80143fa:	1b12      	subs	r2, r2, r4
 80143fc:	d10e      	bne.n	801441c <__mcmp+0x28>
 80143fe:	f100 0314 	add.w	r3, r0, #20
 8014402:	3114      	adds	r1, #20
 8014404:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014408:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801440c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014410:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014414:	42a5      	cmp	r5, r4
 8014416:	d003      	beq.n	8014420 <__mcmp+0x2c>
 8014418:	d305      	bcc.n	8014426 <__mcmp+0x32>
 801441a:	2201      	movs	r2, #1
 801441c:	4610      	mov	r0, r2
 801441e:	bd30      	pop	{r4, r5, pc}
 8014420:	4283      	cmp	r3, r0
 8014422:	d3f3      	bcc.n	801440c <__mcmp+0x18>
 8014424:	e7fa      	b.n	801441c <__mcmp+0x28>
 8014426:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801442a:	e7f7      	b.n	801441c <__mcmp+0x28>

0801442c <__mdiff>:
 801442c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014430:	460c      	mov	r4, r1
 8014432:	4606      	mov	r6, r0
 8014434:	4611      	mov	r1, r2
 8014436:	4620      	mov	r0, r4
 8014438:	4617      	mov	r7, r2
 801443a:	f7ff ffdb 	bl	80143f4 <__mcmp>
 801443e:	1e05      	subs	r5, r0, #0
 8014440:	d110      	bne.n	8014464 <__mdiff+0x38>
 8014442:	4629      	mov	r1, r5
 8014444:	4630      	mov	r0, r6
 8014446:	f7ff fd57 	bl	8013ef8 <_Balloc>
 801444a:	b930      	cbnz	r0, 801445a <__mdiff+0x2e>
 801444c:	4b39      	ldr	r3, [pc, #228]	; (8014534 <__mdiff+0x108>)
 801444e:	4602      	mov	r2, r0
 8014450:	f240 2132 	movw	r1, #562	; 0x232
 8014454:	4838      	ldr	r0, [pc, #224]	; (8014538 <__mdiff+0x10c>)
 8014456:	f7fe fd9d 	bl	8012f94 <__assert_func>
 801445a:	2301      	movs	r3, #1
 801445c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014460:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014464:	bfa4      	itt	ge
 8014466:	463b      	movge	r3, r7
 8014468:	4627      	movge	r7, r4
 801446a:	4630      	mov	r0, r6
 801446c:	6879      	ldr	r1, [r7, #4]
 801446e:	bfa6      	itte	ge
 8014470:	461c      	movge	r4, r3
 8014472:	2500      	movge	r5, #0
 8014474:	2501      	movlt	r5, #1
 8014476:	f7ff fd3f 	bl	8013ef8 <_Balloc>
 801447a:	b920      	cbnz	r0, 8014486 <__mdiff+0x5a>
 801447c:	4b2d      	ldr	r3, [pc, #180]	; (8014534 <__mdiff+0x108>)
 801447e:	4602      	mov	r2, r0
 8014480:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014484:	e7e6      	b.n	8014454 <__mdiff+0x28>
 8014486:	693e      	ldr	r6, [r7, #16]
 8014488:	60c5      	str	r5, [r0, #12]
 801448a:	6925      	ldr	r5, [r4, #16]
 801448c:	f107 0114 	add.w	r1, r7, #20
 8014490:	f104 0914 	add.w	r9, r4, #20
 8014494:	f100 0e14 	add.w	lr, r0, #20
 8014498:	f107 0210 	add.w	r2, r7, #16
 801449c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80144a0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80144a4:	46f2      	mov	sl, lr
 80144a6:	2700      	movs	r7, #0
 80144a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80144ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80144b0:	fa1f f883 	uxth.w	r8, r3
 80144b4:	fa17 f78b 	uxtah	r7, r7, fp
 80144b8:	0c1b      	lsrs	r3, r3, #16
 80144ba:	eba7 0808 	sub.w	r8, r7, r8
 80144be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80144c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80144c6:	fa1f f888 	uxth.w	r8, r8
 80144ca:	141f      	asrs	r7, r3, #16
 80144cc:	454d      	cmp	r5, r9
 80144ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80144d2:	f84a 3b04 	str.w	r3, [sl], #4
 80144d6:	d8e7      	bhi.n	80144a8 <__mdiff+0x7c>
 80144d8:	1b2b      	subs	r3, r5, r4
 80144da:	3b15      	subs	r3, #21
 80144dc:	f023 0303 	bic.w	r3, r3, #3
 80144e0:	3304      	adds	r3, #4
 80144e2:	3415      	adds	r4, #21
 80144e4:	42a5      	cmp	r5, r4
 80144e6:	bf38      	it	cc
 80144e8:	2304      	movcc	r3, #4
 80144ea:	4419      	add	r1, r3
 80144ec:	4473      	add	r3, lr
 80144ee:	469e      	mov	lr, r3
 80144f0:	460d      	mov	r5, r1
 80144f2:	4565      	cmp	r5, ip
 80144f4:	d30e      	bcc.n	8014514 <__mdiff+0xe8>
 80144f6:	f10c 0203 	add.w	r2, ip, #3
 80144fa:	1a52      	subs	r2, r2, r1
 80144fc:	f022 0203 	bic.w	r2, r2, #3
 8014500:	3903      	subs	r1, #3
 8014502:	458c      	cmp	ip, r1
 8014504:	bf38      	it	cc
 8014506:	2200      	movcc	r2, #0
 8014508:	441a      	add	r2, r3
 801450a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801450e:	b17b      	cbz	r3, 8014530 <__mdiff+0x104>
 8014510:	6106      	str	r6, [r0, #16]
 8014512:	e7a5      	b.n	8014460 <__mdiff+0x34>
 8014514:	f855 8b04 	ldr.w	r8, [r5], #4
 8014518:	fa17 f488 	uxtah	r4, r7, r8
 801451c:	1422      	asrs	r2, r4, #16
 801451e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8014522:	b2a4      	uxth	r4, r4
 8014524:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8014528:	f84e 4b04 	str.w	r4, [lr], #4
 801452c:	1417      	asrs	r7, r2, #16
 801452e:	e7e0      	b.n	80144f2 <__mdiff+0xc6>
 8014530:	3e01      	subs	r6, #1
 8014532:	e7ea      	b.n	801450a <__mdiff+0xde>
 8014534:	08025166 	.word	0x08025166
 8014538:	080251d8 	.word	0x080251d8

0801453c <__d2b>:
 801453c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014540:	4689      	mov	r9, r1
 8014542:	2101      	movs	r1, #1
 8014544:	ec57 6b10 	vmov	r6, r7, d0
 8014548:	4690      	mov	r8, r2
 801454a:	f7ff fcd5 	bl	8013ef8 <_Balloc>
 801454e:	4604      	mov	r4, r0
 8014550:	b930      	cbnz	r0, 8014560 <__d2b+0x24>
 8014552:	4602      	mov	r2, r0
 8014554:	4b25      	ldr	r3, [pc, #148]	; (80145ec <__d2b+0xb0>)
 8014556:	4826      	ldr	r0, [pc, #152]	; (80145f0 <__d2b+0xb4>)
 8014558:	f240 310a 	movw	r1, #778	; 0x30a
 801455c:	f7fe fd1a 	bl	8012f94 <__assert_func>
 8014560:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014564:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014568:	bb35      	cbnz	r5, 80145b8 <__d2b+0x7c>
 801456a:	2e00      	cmp	r6, #0
 801456c:	9301      	str	r3, [sp, #4]
 801456e:	d028      	beq.n	80145c2 <__d2b+0x86>
 8014570:	4668      	mov	r0, sp
 8014572:	9600      	str	r6, [sp, #0]
 8014574:	f7ff fd8c 	bl	8014090 <__lo0bits>
 8014578:	9900      	ldr	r1, [sp, #0]
 801457a:	b300      	cbz	r0, 80145be <__d2b+0x82>
 801457c:	9a01      	ldr	r2, [sp, #4]
 801457e:	f1c0 0320 	rsb	r3, r0, #32
 8014582:	fa02 f303 	lsl.w	r3, r2, r3
 8014586:	430b      	orrs	r3, r1
 8014588:	40c2      	lsrs	r2, r0
 801458a:	6163      	str	r3, [r4, #20]
 801458c:	9201      	str	r2, [sp, #4]
 801458e:	9b01      	ldr	r3, [sp, #4]
 8014590:	61a3      	str	r3, [r4, #24]
 8014592:	2b00      	cmp	r3, #0
 8014594:	bf14      	ite	ne
 8014596:	2202      	movne	r2, #2
 8014598:	2201      	moveq	r2, #1
 801459a:	6122      	str	r2, [r4, #16]
 801459c:	b1d5      	cbz	r5, 80145d4 <__d2b+0x98>
 801459e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80145a2:	4405      	add	r5, r0
 80145a4:	f8c9 5000 	str.w	r5, [r9]
 80145a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80145ac:	f8c8 0000 	str.w	r0, [r8]
 80145b0:	4620      	mov	r0, r4
 80145b2:	b003      	add	sp, #12
 80145b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80145b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80145bc:	e7d5      	b.n	801456a <__d2b+0x2e>
 80145be:	6161      	str	r1, [r4, #20]
 80145c0:	e7e5      	b.n	801458e <__d2b+0x52>
 80145c2:	a801      	add	r0, sp, #4
 80145c4:	f7ff fd64 	bl	8014090 <__lo0bits>
 80145c8:	9b01      	ldr	r3, [sp, #4]
 80145ca:	6163      	str	r3, [r4, #20]
 80145cc:	2201      	movs	r2, #1
 80145ce:	6122      	str	r2, [r4, #16]
 80145d0:	3020      	adds	r0, #32
 80145d2:	e7e3      	b.n	801459c <__d2b+0x60>
 80145d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80145d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80145dc:	f8c9 0000 	str.w	r0, [r9]
 80145e0:	6918      	ldr	r0, [r3, #16]
 80145e2:	f7ff fd35 	bl	8014050 <__hi0bits>
 80145e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80145ea:	e7df      	b.n	80145ac <__d2b+0x70>
 80145ec:	08025166 	.word	0x08025166
 80145f0:	080251d8 	.word	0x080251d8

080145f4 <_calloc_r>:
 80145f4:	b513      	push	{r0, r1, r4, lr}
 80145f6:	434a      	muls	r2, r1
 80145f8:	4611      	mov	r1, r2
 80145fa:	9201      	str	r2, [sp, #4]
 80145fc:	f7fd ff7e 	bl	80124fc <_malloc_r>
 8014600:	4604      	mov	r4, r0
 8014602:	b118      	cbz	r0, 801460c <_calloc_r+0x18>
 8014604:	9a01      	ldr	r2, [sp, #4]
 8014606:	2100      	movs	r1, #0
 8014608:	f7fd ff20 	bl	801244c <memset>
 801460c:	4620      	mov	r0, r4
 801460e:	b002      	add	sp, #8
 8014610:	bd10      	pop	{r4, pc}

08014612 <_realloc_r>:
 8014612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014614:	4607      	mov	r7, r0
 8014616:	4614      	mov	r4, r2
 8014618:	460e      	mov	r6, r1
 801461a:	b921      	cbnz	r1, 8014626 <_realloc_r+0x14>
 801461c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014620:	4611      	mov	r1, r2
 8014622:	f7fd bf6b 	b.w	80124fc <_malloc_r>
 8014626:	b922      	cbnz	r2, 8014632 <_realloc_r+0x20>
 8014628:	f7fd ff18 	bl	801245c <_free_r>
 801462c:	4625      	mov	r5, r4
 801462e:	4628      	mov	r0, r5
 8014630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014632:	f000 fd5b 	bl	80150ec <_malloc_usable_size_r>
 8014636:	42a0      	cmp	r0, r4
 8014638:	d20f      	bcs.n	801465a <_realloc_r+0x48>
 801463a:	4621      	mov	r1, r4
 801463c:	4638      	mov	r0, r7
 801463e:	f7fd ff5d 	bl	80124fc <_malloc_r>
 8014642:	4605      	mov	r5, r0
 8014644:	2800      	cmp	r0, #0
 8014646:	d0f2      	beq.n	801462e <_realloc_r+0x1c>
 8014648:	4631      	mov	r1, r6
 801464a:	4622      	mov	r2, r4
 801464c:	f7fd fef0 	bl	8012430 <memcpy>
 8014650:	4631      	mov	r1, r6
 8014652:	4638      	mov	r0, r7
 8014654:	f7fd ff02 	bl	801245c <_free_r>
 8014658:	e7e9      	b.n	801462e <_realloc_r+0x1c>
 801465a:	4635      	mov	r5, r6
 801465c:	e7e7      	b.n	801462e <_realloc_r+0x1c>

0801465e <__ssputs_r>:
 801465e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014662:	688e      	ldr	r6, [r1, #8]
 8014664:	429e      	cmp	r6, r3
 8014666:	4682      	mov	sl, r0
 8014668:	460c      	mov	r4, r1
 801466a:	4690      	mov	r8, r2
 801466c:	461f      	mov	r7, r3
 801466e:	d838      	bhi.n	80146e2 <__ssputs_r+0x84>
 8014670:	898a      	ldrh	r2, [r1, #12]
 8014672:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014676:	d032      	beq.n	80146de <__ssputs_r+0x80>
 8014678:	6825      	ldr	r5, [r4, #0]
 801467a:	6909      	ldr	r1, [r1, #16]
 801467c:	eba5 0901 	sub.w	r9, r5, r1
 8014680:	6965      	ldr	r5, [r4, #20]
 8014682:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014686:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801468a:	3301      	adds	r3, #1
 801468c:	444b      	add	r3, r9
 801468e:	106d      	asrs	r5, r5, #1
 8014690:	429d      	cmp	r5, r3
 8014692:	bf38      	it	cc
 8014694:	461d      	movcc	r5, r3
 8014696:	0553      	lsls	r3, r2, #21
 8014698:	d531      	bpl.n	80146fe <__ssputs_r+0xa0>
 801469a:	4629      	mov	r1, r5
 801469c:	f7fd ff2e 	bl	80124fc <_malloc_r>
 80146a0:	4606      	mov	r6, r0
 80146a2:	b950      	cbnz	r0, 80146ba <__ssputs_r+0x5c>
 80146a4:	230c      	movs	r3, #12
 80146a6:	f8ca 3000 	str.w	r3, [sl]
 80146aa:	89a3      	ldrh	r3, [r4, #12]
 80146ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80146b0:	81a3      	strh	r3, [r4, #12]
 80146b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80146b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146ba:	6921      	ldr	r1, [r4, #16]
 80146bc:	464a      	mov	r2, r9
 80146be:	f7fd feb7 	bl	8012430 <memcpy>
 80146c2:	89a3      	ldrh	r3, [r4, #12]
 80146c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80146c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80146cc:	81a3      	strh	r3, [r4, #12]
 80146ce:	6126      	str	r6, [r4, #16]
 80146d0:	6165      	str	r5, [r4, #20]
 80146d2:	444e      	add	r6, r9
 80146d4:	eba5 0509 	sub.w	r5, r5, r9
 80146d8:	6026      	str	r6, [r4, #0]
 80146da:	60a5      	str	r5, [r4, #8]
 80146dc:	463e      	mov	r6, r7
 80146de:	42be      	cmp	r6, r7
 80146e0:	d900      	bls.n	80146e4 <__ssputs_r+0x86>
 80146e2:	463e      	mov	r6, r7
 80146e4:	4632      	mov	r2, r6
 80146e6:	6820      	ldr	r0, [r4, #0]
 80146e8:	4641      	mov	r1, r8
 80146ea:	f000 fce5 	bl	80150b8 <memmove>
 80146ee:	68a3      	ldr	r3, [r4, #8]
 80146f0:	6822      	ldr	r2, [r4, #0]
 80146f2:	1b9b      	subs	r3, r3, r6
 80146f4:	4432      	add	r2, r6
 80146f6:	60a3      	str	r3, [r4, #8]
 80146f8:	6022      	str	r2, [r4, #0]
 80146fa:	2000      	movs	r0, #0
 80146fc:	e7db      	b.n	80146b6 <__ssputs_r+0x58>
 80146fe:	462a      	mov	r2, r5
 8014700:	f7ff ff87 	bl	8014612 <_realloc_r>
 8014704:	4606      	mov	r6, r0
 8014706:	2800      	cmp	r0, #0
 8014708:	d1e1      	bne.n	80146ce <__ssputs_r+0x70>
 801470a:	6921      	ldr	r1, [r4, #16]
 801470c:	4650      	mov	r0, sl
 801470e:	f7fd fea5 	bl	801245c <_free_r>
 8014712:	e7c7      	b.n	80146a4 <__ssputs_r+0x46>

08014714 <_svfiprintf_r>:
 8014714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014718:	4698      	mov	r8, r3
 801471a:	898b      	ldrh	r3, [r1, #12]
 801471c:	061b      	lsls	r3, r3, #24
 801471e:	b09d      	sub	sp, #116	; 0x74
 8014720:	4607      	mov	r7, r0
 8014722:	460d      	mov	r5, r1
 8014724:	4614      	mov	r4, r2
 8014726:	d50e      	bpl.n	8014746 <_svfiprintf_r+0x32>
 8014728:	690b      	ldr	r3, [r1, #16]
 801472a:	b963      	cbnz	r3, 8014746 <_svfiprintf_r+0x32>
 801472c:	2140      	movs	r1, #64	; 0x40
 801472e:	f7fd fee5 	bl	80124fc <_malloc_r>
 8014732:	6028      	str	r0, [r5, #0]
 8014734:	6128      	str	r0, [r5, #16]
 8014736:	b920      	cbnz	r0, 8014742 <_svfiprintf_r+0x2e>
 8014738:	230c      	movs	r3, #12
 801473a:	603b      	str	r3, [r7, #0]
 801473c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014740:	e0d1      	b.n	80148e6 <_svfiprintf_r+0x1d2>
 8014742:	2340      	movs	r3, #64	; 0x40
 8014744:	616b      	str	r3, [r5, #20]
 8014746:	2300      	movs	r3, #0
 8014748:	9309      	str	r3, [sp, #36]	; 0x24
 801474a:	2320      	movs	r3, #32
 801474c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014750:	f8cd 800c 	str.w	r8, [sp, #12]
 8014754:	2330      	movs	r3, #48	; 0x30
 8014756:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014900 <_svfiprintf_r+0x1ec>
 801475a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801475e:	f04f 0901 	mov.w	r9, #1
 8014762:	4623      	mov	r3, r4
 8014764:	469a      	mov	sl, r3
 8014766:	f813 2b01 	ldrb.w	r2, [r3], #1
 801476a:	b10a      	cbz	r2, 8014770 <_svfiprintf_r+0x5c>
 801476c:	2a25      	cmp	r2, #37	; 0x25
 801476e:	d1f9      	bne.n	8014764 <_svfiprintf_r+0x50>
 8014770:	ebba 0b04 	subs.w	fp, sl, r4
 8014774:	d00b      	beq.n	801478e <_svfiprintf_r+0x7a>
 8014776:	465b      	mov	r3, fp
 8014778:	4622      	mov	r2, r4
 801477a:	4629      	mov	r1, r5
 801477c:	4638      	mov	r0, r7
 801477e:	f7ff ff6e 	bl	801465e <__ssputs_r>
 8014782:	3001      	adds	r0, #1
 8014784:	f000 80aa 	beq.w	80148dc <_svfiprintf_r+0x1c8>
 8014788:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801478a:	445a      	add	r2, fp
 801478c:	9209      	str	r2, [sp, #36]	; 0x24
 801478e:	f89a 3000 	ldrb.w	r3, [sl]
 8014792:	2b00      	cmp	r3, #0
 8014794:	f000 80a2 	beq.w	80148dc <_svfiprintf_r+0x1c8>
 8014798:	2300      	movs	r3, #0
 801479a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801479e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80147a2:	f10a 0a01 	add.w	sl, sl, #1
 80147a6:	9304      	str	r3, [sp, #16]
 80147a8:	9307      	str	r3, [sp, #28]
 80147aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80147ae:	931a      	str	r3, [sp, #104]	; 0x68
 80147b0:	4654      	mov	r4, sl
 80147b2:	2205      	movs	r2, #5
 80147b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147b8:	4851      	ldr	r0, [pc, #324]	; (8014900 <_svfiprintf_r+0x1ec>)
 80147ba:	f7eb fd41 	bl	8000240 <memchr>
 80147be:	9a04      	ldr	r2, [sp, #16]
 80147c0:	b9d8      	cbnz	r0, 80147fa <_svfiprintf_r+0xe6>
 80147c2:	06d0      	lsls	r0, r2, #27
 80147c4:	bf44      	itt	mi
 80147c6:	2320      	movmi	r3, #32
 80147c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80147cc:	0711      	lsls	r1, r2, #28
 80147ce:	bf44      	itt	mi
 80147d0:	232b      	movmi	r3, #43	; 0x2b
 80147d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80147d6:	f89a 3000 	ldrb.w	r3, [sl]
 80147da:	2b2a      	cmp	r3, #42	; 0x2a
 80147dc:	d015      	beq.n	801480a <_svfiprintf_r+0xf6>
 80147de:	9a07      	ldr	r2, [sp, #28]
 80147e0:	4654      	mov	r4, sl
 80147e2:	2000      	movs	r0, #0
 80147e4:	f04f 0c0a 	mov.w	ip, #10
 80147e8:	4621      	mov	r1, r4
 80147ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80147ee:	3b30      	subs	r3, #48	; 0x30
 80147f0:	2b09      	cmp	r3, #9
 80147f2:	d94e      	bls.n	8014892 <_svfiprintf_r+0x17e>
 80147f4:	b1b0      	cbz	r0, 8014824 <_svfiprintf_r+0x110>
 80147f6:	9207      	str	r2, [sp, #28]
 80147f8:	e014      	b.n	8014824 <_svfiprintf_r+0x110>
 80147fa:	eba0 0308 	sub.w	r3, r0, r8
 80147fe:	fa09 f303 	lsl.w	r3, r9, r3
 8014802:	4313      	orrs	r3, r2
 8014804:	9304      	str	r3, [sp, #16]
 8014806:	46a2      	mov	sl, r4
 8014808:	e7d2      	b.n	80147b0 <_svfiprintf_r+0x9c>
 801480a:	9b03      	ldr	r3, [sp, #12]
 801480c:	1d19      	adds	r1, r3, #4
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	9103      	str	r1, [sp, #12]
 8014812:	2b00      	cmp	r3, #0
 8014814:	bfbb      	ittet	lt
 8014816:	425b      	neglt	r3, r3
 8014818:	f042 0202 	orrlt.w	r2, r2, #2
 801481c:	9307      	strge	r3, [sp, #28]
 801481e:	9307      	strlt	r3, [sp, #28]
 8014820:	bfb8      	it	lt
 8014822:	9204      	strlt	r2, [sp, #16]
 8014824:	7823      	ldrb	r3, [r4, #0]
 8014826:	2b2e      	cmp	r3, #46	; 0x2e
 8014828:	d10c      	bne.n	8014844 <_svfiprintf_r+0x130>
 801482a:	7863      	ldrb	r3, [r4, #1]
 801482c:	2b2a      	cmp	r3, #42	; 0x2a
 801482e:	d135      	bne.n	801489c <_svfiprintf_r+0x188>
 8014830:	9b03      	ldr	r3, [sp, #12]
 8014832:	1d1a      	adds	r2, r3, #4
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	9203      	str	r2, [sp, #12]
 8014838:	2b00      	cmp	r3, #0
 801483a:	bfb8      	it	lt
 801483c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014840:	3402      	adds	r4, #2
 8014842:	9305      	str	r3, [sp, #20]
 8014844:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014910 <_svfiprintf_r+0x1fc>
 8014848:	7821      	ldrb	r1, [r4, #0]
 801484a:	2203      	movs	r2, #3
 801484c:	4650      	mov	r0, sl
 801484e:	f7eb fcf7 	bl	8000240 <memchr>
 8014852:	b140      	cbz	r0, 8014866 <_svfiprintf_r+0x152>
 8014854:	2340      	movs	r3, #64	; 0x40
 8014856:	eba0 000a 	sub.w	r0, r0, sl
 801485a:	fa03 f000 	lsl.w	r0, r3, r0
 801485e:	9b04      	ldr	r3, [sp, #16]
 8014860:	4303      	orrs	r3, r0
 8014862:	3401      	adds	r4, #1
 8014864:	9304      	str	r3, [sp, #16]
 8014866:	f814 1b01 	ldrb.w	r1, [r4], #1
 801486a:	4826      	ldr	r0, [pc, #152]	; (8014904 <_svfiprintf_r+0x1f0>)
 801486c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014870:	2206      	movs	r2, #6
 8014872:	f7eb fce5 	bl	8000240 <memchr>
 8014876:	2800      	cmp	r0, #0
 8014878:	d038      	beq.n	80148ec <_svfiprintf_r+0x1d8>
 801487a:	4b23      	ldr	r3, [pc, #140]	; (8014908 <_svfiprintf_r+0x1f4>)
 801487c:	bb1b      	cbnz	r3, 80148c6 <_svfiprintf_r+0x1b2>
 801487e:	9b03      	ldr	r3, [sp, #12]
 8014880:	3307      	adds	r3, #7
 8014882:	f023 0307 	bic.w	r3, r3, #7
 8014886:	3308      	adds	r3, #8
 8014888:	9303      	str	r3, [sp, #12]
 801488a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801488c:	4433      	add	r3, r6
 801488e:	9309      	str	r3, [sp, #36]	; 0x24
 8014890:	e767      	b.n	8014762 <_svfiprintf_r+0x4e>
 8014892:	fb0c 3202 	mla	r2, ip, r2, r3
 8014896:	460c      	mov	r4, r1
 8014898:	2001      	movs	r0, #1
 801489a:	e7a5      	b.n	80147e8 <_svfiprintf_r+0xd4>
 801489c:	2300      	movs	r3, #0
 801489e:	3401      	adds	r4, #1
 80148a0:	9305      	str	r3, [sp, #20]
 80148a2:	4619      	mov	r1, r3
 80148a4:	f04f 0c0a 	mov.w	ip, #10
 80148a8:	4620      	mov	r0, r4
 80148aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80148ae:	3a30      	subs	r2, #48	; 0x30
 80148b0:	2a09      	cmp	r2, #9
 80148b2:	d903      	bls.n	80148bc <_svfiprintf_r+0x1a8>
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d0c5      	beq.n	8014844 <_svfiprintf_r+0x130>
 80148b8:	9105      	str	r1, [sp, #20]
 80148ba:	e7c3      	b.n	8014844 <_svfiprintf_r+0x130>
 80148bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80148c0:	4604      	mov	r4, r0
 80148c2:	2301      	movs	r3, #1
 80148c4:	e7f0      	b.n	80148a8 <_svfiprintf_r+0x194>
 80148c6:	ab03      	add	r3, sp, #12
 80148c8:	9300      	str	r3, [sp, #0]
 80148ca:	462a      	mov	r2, r5
 80148cc:	4b0f      	ldr	r3, [pc, #60]	; (801490c <_svfiprintf_r+0x1f8>)
 80148ce:	a904      	add	r1, sp, #16
 80148d0:	4638      	mov	r0, r7
 80148d2:	f7fd ff0d 	bl	80126f0 <_printf_float>
 80148d6:	1c42      	adds	r2, r0, #1
 80148d8:	4606      	mov	r6, r0
 80148da:	d1d6      	bne.n	801488a <_svfiprintf_r+0x176>
 80148dc:	89ab      	ldrh	r3, [r5, #12]
 80148de:	065b      	lsls	r3, r3, #25
 80148e0:	f53f af2c 	bmi.w	801473c <_svfiprintf_r+0x28>
 80148e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80148e6:	b01d      	add	sp, #116	; 0x74
 80148e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148ec:	ab03      	add	r3, sp, #12
 80148ee:	9300      	str	r3, [sp, #0]
 80148f0:	462a      	mov	r2, r5
 80148f2:	4b06      	ldr	r3, [pc, #24]	; (801490c <_svfiprintf_r+0x1f8>)
 80148f4:	a904      	add	r1, sp, #16
 80148f6:	4638      	mov	r0, r7
 80148f8:	f7fe f99e 	bl	8012c38 <_printf_i>
 80148fc:	e7eb      	b.n	80148d6 <_svfiprintf_r+0x1c2>
 80148fe:	bf00      	nop
 8014900:	08025334 	.word	0x08025334
 8014904:	0802533e 	.word	0x0802533e
 8014908:	080126f1 	.word	0x080126f1
 801490c:	0801465f 	.word	0x0801465f
 8014910:	0802533a 	.word	0x0802533a

08014914 <__sfputc_r>:
 8014914:	6893      	ldr	r3, [r2, #8]
 8014916:	3b01      	subs	r3, #1
 8014918:	2b00      	cmp	r3, #0
 801491a:	b410      	push	{r4}
 801491c:	6093      	str	r3, [r2, #8]
 801491e:	da08      	bge.n	8014932 <__sfputc_r+0x1e>
 8014920:	6994      	ldr	r4, [r2, #24]
 8014922:	42a3      	cmp	r3, r4
 8014924:	db01      	blt.n	801492a <__sfputc_r+0x16>
 8014926:	290a      	cmp	r1, #10
 8014928:	d103      	bne.n	8014932 <__sfputc_r+0x1e>
 801492a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801492e:	f000 b98f 	b.w	8014c50 <__swbuf_r>
 8014932:	6813      	ldr	r3, [r2, #0]
 8014934:	1c58      	adds	r0, r3, #1
 8014936:	6010      	str	r0, [r2, #0]
 8014938:	7019      	strb	r1, [r3, #0]
 801493a:	4608      	mov	r0, r1
 801493c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014940:	4770      	bx	lr

08014942 <__sfputs_r>:
 8014942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014944:	4606      	mov	r6, r0
 8014946:	460f      	mov	r7, r1
 8014948:	4614      	mov	r4, r2
 801494a:	18d5      	adds	r5, r2, r3
 801494c:	42ac      	cmp	r4, r5
 801494e:	d101      	bne.n	8014954 <__sfputs_r+0x12>
 8014950:	2000      	movs	r0, #0
 8014952:	e007      	b.n	8014964 <__sfputs_r+0x22>
 8014954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014958:	463a      	mov	r2, r7
 801495a:	4630      	mov	r0, r6
 801495c:	f7ff ffda 	bl	8014914 <__sfputc_r>
 8014960:	1c43      	adds	r3, r0, #1
 8014962:	d1f3      	bne.n	801494c <__sfputs_r+0xa>
 8014964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014968 <_vfiprintf_r>:
 8014968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801496c:	460d      	mov	r5, r1
 801496e:	b09d      	sub	sp, #116	; 0x74
 8014970:	4614      	mov	r4, r2
 8014972:	4698      	mov	r8, r3
 8014974:	4606      	mov	r6, r0
 8014976:	b118      	cbz	r0, 8014980 <_vfiprintf_r+0x18>
 8014978:	6983      	ldr	r3, [r0, #24]
 801497a:	b90b      	cbnz	r3, 8014980 <_vfiprintf_r+0x18>
 801497c:	f7ff f9f8 	bl	8013d70 <__sinit>
 8014980:	4b89      	ldr	r3, [pc, #548]	; (8014ba8 <_vfiprintf_r+0x240>)
 8014982:	429d      	cmp	r5, r3
 8014984:	d11b      	bne.n	80149be <_vfiprintf_r+0x56>
 8014986:	6875      	ldr	r5, [r6, #4]
 8014988:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801498a:	07d9      	lsls	r1, r3, #31
 801498c:	d405      	bmi.n	801499a <_vfiprintf_r+0x32>
 801498e:	89ab      	ldrh	r3, [r5, #12]
 8014990:	059a      	lsls	r2, r3, #22
 8014992:	d402      	bmi.n	801499a <_vfiprintf_r+0x32>
 8014994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014996:	f7ff faa0 	bl	8013eda <__retarget_lock_acquire_recursive>
 801499a:	89ab      	ldrh	r3, [r5, #12]
 801499c:	071b      	lsls	r3, r3, #28
 801499e:	d501      	bpl.n	80149a4 <_vfiprintf_r+0x3c>
 80149a0:	692b      	ldr	r3, [r5, #16]
 80149a2:	b9eb      	cbnz	r3, 80149e0 <_vfiprintf_r+0x78>
 80149a4:	4629      	mov	r1, r5
 80149a6:	4630      	mov	r0, r6
 80149a8:	f000 f9b6 	bl	8014d18 <__swsetup_r>
 80149ac:	b1c0      	cbz	r0, 80149e0 <_vfiprintf_r+0x78>
 80149ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80149b0:	07dc      	lsls	r4, r3, #31
 80149b2:	d50e      	bpl.n	80149d2 <_vfiprintf_r+0x6a>
 80149b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80149b8:	b01d      	add	sp, #116	; 0x74
 80149ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149be:	4b7b      	ldr	r3, [pc, #492]	; (8014bac <_vfiprintf_r+0x244>)
 80149c0:	429d      	cmp	r5, r3
 80149c2:	d101      	bne.n	80149c8 <_vfiprintf_r+0x60>
 80149c4:	68b5      	ldr	r5, [r6, #8]
 80149c6:	e7df      	b.n	8014988 <_vfiprintf_r+0x20>
 80149c8:	4b79      	ldr	r3, [pc, #484]	; (8014bb0 <_vfiprintf_r+0x248>)
 80149ca:	429d      	cmp	r5, r3
 80149cc:	bf08      	it	eq
 80149ce:	68f5      	ldreq	r5, [r6, #12]
 80149d0:	e7da      	b.n	8014988 <_vfiprintf_r+0x20>
 80149d2:	89ab      	ldrh	r3, [r5, #12]
 80149d4:	0598      	lsls	r0, r3, #22
 80149d6:	d4ed      	bmi.n	80149b4 <_vfiprintf_r+0x4c>
 80149d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80149da:	f7ff fa7f 	bl	8013edc <__retarget_lock_release_recursive>
 80149de:	e7e9      	b.n	80149b4 <_vfiprintf_r+0x4c>
 80149e0:	2300      	movs	r3, #0
 80149e2:	9309      	str	r3, [sp, #36]	; 0x24
 80149e4:	2320      	movs	r3, #32
 80149e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80149ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80149ee:	2330      	movs	r3, #48	; 0x30
 80149f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014bb4 <_vfiprintf_r+0x24c>
 80149f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80149f8:	f04f 0901 	mov.w	r9, #1
 80149fc:	4623      	mov	r3, r4
 80149fe:	469a      	mov	sl, r3
 8014a00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a04:	b10a      	cbz	r2, 8014a0a <_vfiprintf_r+0xa2>
 8014a06:	2a25      	cmp	r2, #37	; 0x25
 8014a08:	d1f9      	bne.n	80149fe <_vfiprintf_r+0x96>
 8014a0a:	ebba 0b04 	subs.w	fp, sl, r4
 8014a0e:	d00b      	beq.n	8014a28 <_vfiprintf_r+0xc0>
 8014a10:	465b      	mov	r3, fp
 8014a12:	4622      	mov	r2, r4
 8014a14:	4629      	mov	r1, r5
 8014a16:	4630      	mov	r0, r6
 8014a18:	f7ff ff93 	bl	8014942 <__sfputs_r>
 8014a1c:	3001      	adds	r0, #1
 8014a1e:	f000 80aa 	beq.w	8014b76 <_vfiprintf_r+0x20e>
 8014a22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a24:	445a      	add	r2, fp
 8014a26:	9209      	str	r2, [sp, #36]	; 0x24
 8014a28:	f89a 3000 	ldrb.w	r3, [sl]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	f000 80a2 	beq.w	8014b76 <_vfiprintf_r+0x20e>
 8014a32:	2300      	movs	r3, #0
 8014a34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014a38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014a3c:	f10a 0a01 	add.w	sl, sl, #1
 8014a40:	9304      	str	r3, [sp, #16]
 8014a42:	9307      	str	r3, [sp, #28]
 8014a44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014a48:	931a      	str	r3, [sp, #104]	; 0x68
 8014a4a:	4654      	mov	r4, sl
 8014a4c:	2205      	movs	r2, #5
 8014a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a52:	4858      	ldr	r0, [pc, #352]	; (8014bb4 <_vfiprintf_r+0x24c>)
 8014a54:	f7eb fbf4 	bl	8000240 <memchr>
 8014a58:	9a04      	ldr	r2, [sp, #16]
 8014a5a:	b9d8      	cbnz	r0, 8014a94 <_vfiprintf_r+0x12c>
 8014a5c:	06d1      	lsls	r1, r2, #27
 8014a5e:	bf44      	itt	mi
 8014a60:	2320      	movmi	r3, #32
 8014a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a66:	0713      	lsls	r3, r2, #28
 8014a68:	bf44      	itt	mi
 8014a6a:	232b      	movmi	r3, #43	; 0x2b
 8014a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a70:	f89a 3000 	ldrb.w	r3, [sl]
 8014a74:	2b2a      	cmp	r3, #42	; 0x2a
 8014a76:	d015      	beq.n	8014aa4 <_vfiprintf_r+0x13c>
 8014a78:	9a07      	ldr	r2, [sp, #28]
 8014a7a:	4654      	mov	r4, sl
 8014a7c:	2000      	movs	r0, #0
 8014a7e:	f04f 0c0a 	mov.w	ip, #10
 8014a82:	4621      	mov	r1, r4
 8014a84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014a88:	3b30      	subs	r3, #48	; 0x30
 8014a8a:	2b09      	cmp	r3, #9
 8014a8c:	d94e      	bls.n	8014b2c <_vfiprintf_r+0x1c4>
 8014a8e:	b1b0      	cbz	r0, 8014abe <_vfiprintf_r+0x156>
 8014a90:	9207      	str	r2, [sp, #28]
 8014a92:	e014      	b.n	8014abe <_vfiprintf_r+0x156>
 8014a94:	eba0 0308 	sub.w	r3, r0, r8
 8014a98:	fa09 f303 	lsl.w	r3, r9, r3
 8014a9c:	4313      	orrs	r3, r2
 8014a9e:	9304      	str	r3, [sp, #16]
 8014aa0:	46a2      	mov	sl, r4
 8014aa2:	e7d2      	b.n	8014a4a <_vfiprintf_r+0xe2>
 8014aa4:	9b03      	ldr	r3, [sp, #12]
 8014aa6:	1d19      	adds	r1, r3, #4
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	9103      	str	r1, [sp, #12]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	bfbb      	ittet	lt
 8014ab0:	425b      	neglt	r3, r3
 8014ab2:	f042 0202 	orrlt.w	r2, r2, #2
 8014ab6:	9307      	strge	r3, [sp, #28]
 8014ab8:	9307      	strlt	r3, [sp, #28]
 8014aba:	bfb8      	it	lt
 8014abc:	9204      	strlt	r2, [sp, #16]
 8014abe:	7823      	ldrb	r3, [r4, #0]
 8014ac0:	2b2e      	cmp	r3, #46	; 0x2e
 8014ac2:	d10c      	bne.n	8014ade <_vfiprintf_r+0x176>
 8014ac4:	7863      	ldrb	r3, [r4, #1]
 8014ac6:	2b2a      	cmp	r3, #42	; 0x2a
 8014ac8:	d135      	bne.n	8014b36 <_vfiprintf_r+0x1ce>
 8014aca:	9b03      	ldr	r3, [sp, #12]
 8014acc:	1d1a      	adds	r2, r3, #4
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	9203      	str	r2, [sp, #12]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	bfb8      	it	lt
 8014ad6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014ada:	3402      	adds	r4, #2
 8014adc:	9305      	str	r3, [sp, #20]
 8014ade:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014bc4 <_vfiprintf_r+0x25c>
 8014ae2:	7821      	ldrb	r1, [r4, #0]
 8014ae4:	2203      	movs	r2, #3
 8014ae6:	4650      	mov	r0, sl
 8014ae8:	f7eb fbaa 	bl	8000240 <memchr>
 8014aec:	b140      	cbz	r0, 8014b00 <_vfiprintf_r+0x198>
 8014aee:	2340      	movs	r3, #64	; 0x40
 8014af0:	eba0 000a 	sub.w	r0, r0, sl
 8014af4:	fa03 f000 	lsl.w	r0, r3, r0
 8014af8:	9b04      	ldr	r3, [sp, #16]
 8014afa:	4303      	orrs	r3, r0
 8014afc:	3401      	adds	r4, #1
 8014afe:	9304      	str	r3, [sp, #16]
 8014b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b04:	482c      	ldr	r0, [pc, #176]	; (8014bb8 <_vfiprintf_r+0x250>)
 8014b06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014b0a:	2206      	movs	r2, #6
 8014b0c:	f7eb fb98 	bl	8000240 <memchr>
 8014b10:	2800      	cmp	r0, #0
 8014b12:	d03f      	beq.n	8014b94 <_vfiprintf_r+0x22c>
 8014b14:	4b29      	ldr	r3, [pc, #164]	; (8014bbc <_vfiprintf_r+0x254>)
 8014b16:	bb1b      	cbnz	r3, 8014b60 <_vfiprintf_r+0x1f8>
 8014b18:	9b03      	ldr	r3, [sp, #12]
 8014b1a:	3307      	adds	r3, #7
 8014b1c:	f023 0307 	bic.w	r3, r3, #7
 8014b20:	3308      	adds	r3, #8
 8014b22:	9303      	str	r3, [sp, #12]
 8014b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b26:	443b      	add	r3, r7
 8014b28:	9309      	str	r3, [sp, #36]	; 0x24
 8014b2a:	e767      	b.n	80149fc <_vfiprintf_r+0x94>
 8014b2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014b30:	460c      	mov	r4, r1
 8014b32:	2001      	movs	r0, #1
 8014b34:	e7a5      	b.n	8014a82 <_vfiprintf_r+0x11a>
 8014b36:	2300      	movs	r3, #0
 8014b38:	3401      	adds	r4, #1
 8014b3a:	9305      	str	r3, [sp, #20]
 8014b3c:	4619      	mov	r1, r3
 8014b3e:	f04f 0c0a 	mov.w	ip, #10
 8014b42:	4620      	mov	r0, r4
 8014b44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014b48:	3a30      	subs	r2, #48	; 0x30
 8014b4a:	2a09      	cmp	r2, #9
 8014b4c:	d903      	bls.n	8014b56 <_vfiprintf_r+0x1ee>
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d0c5      	beq.n	8014ade <_vfiprintf_r+0x176>
 8014b52:	9105      	str	r1, [sp, #20]
 8014b54:	e7c3      	b.n	8014ade <_vfiprintf_r+0x176>
 8014b56:	fb0c 2101 	mla	r1, ip, r1, r2
 8014b5a:	4604      	mov	r4, r0
 8014b5c:	2301      	movs	r3, #1
 8014b5e:	e7f0      	b.n	8014b42 <_vfiprintf_r+0x1da>
 8014b60:	ab03      	add	r3, sp, #12
 8014b62:	9300      	str	r3, [sp, #0]
 8014b64:	462a      	mov	r2, r5
 8014b66:	4b16      	ldr	r3, [pc, #88]	; (8014bc0 <_vfiprintf_r+0x258>)
 8014b68:	a904      	add	r1, sp, #16
 8014b6a:	4630      	mov	r0, r6
 8014b6c:	f7fd fdc0 	bl	80126f0 <_printf_float>
 8014b70:	4607      	mov	r7, r0
 8014b72:	1c78      	adds	r0, r7, #1
 8014b74:	d1d6      	bne.n	8014b24 <_vfiprintf_r+0x1bc>
 8014b76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014b78:	07d9      	lsls	r1, r3, #31
 8014b7a:	d405      	bmi.n	8014b88 <_vfiprintf_r+0x220>
 8014b7c:	89ab      	ldrh	r3, [r5, #12]
 8014b7e:	059a      	lsls	r2, r3, #22
 8014b80:	d402      	bmi.n	8014b88 <_vfiprintf_r+0x220>
 8014b82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014b84:	f7ff f9aa 	bl	8013edc <__retarget_lock_release_recursive>
 8014b88:	89ab      	ldrh	r3, [r5, #12]
 8014b8a:	065b      	lsls	r3, r3, #25
 8014b8c:	f53f af12 	bmi.w	80149b4 <_vfiprintf_r+0x4c>
 8014b90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b92:	e711      	b.n	80149b8 <_vfiprintf_r+0x50>
 8014b94:	ab03      	add	r3, sp, #12
 8014b96:	9300      	str	r3, [sp, #0]
 8014b98:	462a      	mov	r2, r5
 8014b9a:	4b09      	ldr	r3, [pc, #36]	; (8014bc0 <_vfiprintf_r+0x258>)
 8014b9c:	a904      	add	r1, sp, #16
 8014b9e:	4630      	mov	r0, r6
 8014ba0:	f7fe f84a 	bl	8012c38 <_printf_i>
 8014ba4:	e7e4      	b.n	8014b70 <_vfiprintf_r+0x208>
 8014ba6:	bf00      	nop
 8014ba8:	08025198 	.word	0x08025198
 8014bac:	080251b8 	.word	0x080251b8
 8014bb0:	08025178 	.word	0x08025178
 8014bb4:	08025334 	.word	0x08025334
 8014bb8:	0802533e 	.word	0x0802533e
 8014bbc:	080126f1 	.word	0x080126f1
 8014bc0:	08014943 	.word	0x08014943
 8014bc4:	0802533a 	.word	0x0802533a

08014bc8 <__sread>:
 8014bc8:	b510      	push	{r4, lr}
 8014bca:	460c      	mov	r4, r1
 8014bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bd0:	f000 fa94 	bl	80150fc <_read_r>
 8014bd4:	2800      	cmp	r0, #0
 8014bd6:	bfab      	itete	ge
 8014bd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014bda:	89a3      	ldrhlt	r3, [r4, #12]
 8014bdc:	181b      	addge	r3, r3, r0
 8014bde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014be2:	bfac      	ite	ge
 8014be4:	6563      	strge	r3, [r4, #84]	; 0x54
 8014be6:	81a3      	strhlt	r3, [r4, #12]
 8014be8:	bd10      	pop	{r4, pc}

08014bea <__swrite>:
 8014bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bee:	461f      	mov	r7, r3
 8014bf0:	898b      	ldrh	r3, [r1, #12]
 8014bf2:	05db      	lsls	r3, r3, #23
 8014bf4:	4605      	mov	r5, r0
 8014bf6:	460c      	mov	r4, r1
 8014bf8:	4616      	mov	r6, r2
 8014bfa:	d505      	bpl.n	8014c08 <__swrite+0x1e>
 8014bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c00:	2302      	movs	r3, #2
 8014c02:	2200      	movs	r2, #0
 8014c04:	f000 f9d0 	bl	8014fa8 <_lseek_r>
 8014c08:	89a3      	ldrh	r3, [r4, #12]
 8014c0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014c12:	81a3      	strh	r3, [r4, #12]
 8014c14:	4632      	mov	r2, r6
 8014c16:	463b      	mov	r3, r7
 8014c18:	4628      	mov	r0, r5
 8014c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c1e:	f000 b869 	b.w	8014cf4 <_write_r>

08014c22 <__sseek>:
 8014c22:	b510      	push	{r4, lr}
 8014c24:	460c      	mov	r4, r1
 8014c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c2a:	f000 f9bd 	bl	8014fa8 <_lseek_r>
 8014c2e:	1c43      	adds	r3, r0, #1
 8014c30:	89a3      	ldrh	r3, [r4, #12]
 8014c32:	bf15      	itete	ne
 8014c34:	6560      	strne	r0, [r4, #84]	; 0x54
 8014c36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014c3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014c3e:	81a3      	strheq	r3, [r4, #12]
 8014c40:	bf18      	it	ne
 8014c42:	81a3      	strhne	r3, [r4, #12]
 8014c44:	bd10      	pop	{r4, pc}

08014c46 <__sclose>:
 8014c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c4a:	f000 b8db 	b.w	8014e04 <_close_r>
	...

08014c50 <__swbuf_r>:
 8014c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c52:	460e      	mov	r6, r1
 8014c54:	4614      	mov	r4, r2
 8014c56:	4605      	mov	r5, r0
 8014c58:	b118      	cbz	r0, 8014c62 <__swbuf_r+0x12>
 8014c5a:	6983      	ldr	r3, [r0, #24]
 8014c5c:	b90b      	cbnz	r3, 8014c62 <__swbuf_r+0x12>
 8014c5e:	f7ff f887 	bl	8013d70 <__sinit>
 8014c62:	4b21      	ldr	r3, [pc, #132]	; (8014ce8 <__swbuf_r+0x98>)
 8014c64:	429c      	cmp	r4, r3
 8014c66:	d12b      	bne.n	8014cc0 <__swbuf_r+0x70>
 8014c68:	686c      	ldr	r4, [r5, #4]
 8014c6a:	69a3      	ldr	r3, [r4, #24]
 8014c6c:	60a3      	str	r3, [r4, #8]
 8014c6e:	89a3      	ldrh	r3, [r4, #12]
 8014c70:	071a      	lsls	r2, r3, #28
 8014c72:	d52f      	bpl.n	8014cd4 <__swbuf_r+0x84>
 8014c74:	6923      	ldr	r3, [r4, #16]
 8014c76:	b36b      	cbz	r3, 8014cd4 <__swbuf_r+0x84>
 8014c78:	6923      	ldr	r3, [r4, #16]
 8014c7a:	6820      	ldr	r0, [r4, #0]
 8014c7c:	1ac0      	subs	r0, r0, r3
 8014c7e:	6963      	ldr	r3, [r4, #20]
 8014c80:	b2f6      	uxtb	r6, r6
 8014c82:	4283      	cmp	r3, r0
 8014c84:	4637      	mov	r7, r6
 8014c86:	dc04      	bgt.n	8014c92 <__swbuf_r+0x42>
 8014c88:	4621      	mov	r1, r4
 8014c8a:	4628      	mov	r0, r5
 8014c8c:	f000 f950 	bl	8014f30 <_fflush_r>
 8014c90:	bb30      	cbnz	r0, 8014ce0 <__swbuf_r+0x90>
 8014c92:	68a3      	ldr	r3, [r4, #8]
 8014c94:	3b01      	subs	r3, #1
 8014c96:	60a3      	str	r3, [r4, #8]
 8014c98:	6823      	ldr	r3, [r4, #0]
 8014c9a:	1c5a      	adds	r2, r3, #1
 8014c9c:	6022      	str	r2, [r4, #0]
 8014c9e:	701e      	strb	r6, [r3, #0]
 8014ca0:	6963      	ldr	r3, [r4, #20]
 8014ca2:	3001      	adds	r0, #1
 8014ca4:	4283      	cmp	r3, r0
 8014ca6:	d004      	beq.n	8014cb2 <__swbuf_r+0x62>
 8014ca8:	89a3      	ldrh	r3, [r4, #12]
 8014caa:	07db      	lsls	r3, r3, #31
 8014cac:	d506      	bpl.n	8014cbc <__swbuf_r+0x6c>
 8014cae:	2e0a      	cmp	r6, #10
 8014cb0:	d104      	bne.n	8014cbc <__swbuf_r+0x6c>
 8014cb2:	4621      	mov	r1, r4
 8014cb4:	4628      	mov	r0, r5
 8014cb6:	f000 f93b 	bl	8014f30 <_fflush_r>
 8014cba:	b988      	cbnz	r0, 8014ce0 <__swbuf_r+0x90>
 8014cbc:	4638      	mov	r0, r7
 8014cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cc0:	4b0a      	ldr	r3, [pc, #40]	; (8014cec <__swbuf_r+0x9c>)
 8014cc2:	429c      	cmp	r4, r3
 8014cc4:	d101      	bne.n	8014cca <__swbuf_r+0x7a>
 8014cc6:	68ac      	ldr	r4, [r5, #8]
 8014cc8:	e7cf      	b.n	8014c6a <__swbuf_r+0x1a>
 8014cca:	4b09      	ldr	r3, [pc, #36]	; (8014cf0 <__swbuf_r+0xa0>)
 8014ccc:	429c      	cmp	r4, r3
 8014cce:	bf08      	it	eq
 8014cd0:	68ec      	ldreq	r4, [r5, #12]
 8014cd2:	e7ca      	b.n	8014c6a <__swbuf_r+0x1a>
 8014cd4:	4621      	mov	r1, r4
 8014cd6:	4628      	mov	r0, r5
 8014cd8:	f000 f81e 	bl	8014d18 <__swsetup_r>
 8014cdc:	2800      	cmp	r0, #0
 8014cde:	d0cb      	beq.n	8014c78 <__swbuf_r+0x28>
 8014ce0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014ce4:	e7ea      	b.n	8014cbc <__swbuf_r+0x6c>
 8014ce6:	bf00      	nop
 8014ce8:	08025198 	.word	0x08025198
 8014cec:	080251b8 	.word	0x080251b8
 8014cf0:	08025178 	.word	0x08025178

08014cf4 <_write_r>:
 8014cf4:	b538      	push	{r3, r4, r5, lr}
 8014cf6:	4d07      	ldr	r5, [pc, #28]	; (8014d14 <_write_r+0x20>)
 8014cf8:	4604      	mov	r4, r0
 8014cfa:	4608      	mov	r0, r1
 8014cfc:	4611      	mov	r1, r2
 8014cfe:	2200      	movs	r2, #0
 8014d00:	602a      	str	r2, [r5, #0]
 8014d02:	461a      	mov	r2, r3
 8014d04:	f000 fbd8 	bl	80154b8 <_write>
 8014d08:	1c43      	adds	r3, r0, #1
 8014d0a:	d102      	bne.n	8014d12 <_write_r+0x1e>
 8014d0c:	682b      	ldr	r3, [r5, #0]
 8014d0e:	b103      	cbz	r3, 8014d12 <_write_r+0x1e>
 8014d10:	6023      	str	r3, [r4, #0]
 8014d12:	bd38      	pop	{r3, r4, r5, pc}
 8014d14:	20001c5c 	.word	0x20001c5c

08014d18 <__swsetup_r>:
 8014d18:	4b32      	ldr	r3, [pc, #200]	; (8014de4 <__swsetup_r+0xcc>)
 8014d1a:	b570      	push	{r4, r5, r6, lr}
 8014d1c:	681d      	ldr	r5, [r3, #0]
 8014d1e:	4606      	mov	r6, r0
 8014d20:	460c      	mov	r4, r1
 8014d22:	b125      	cbz	r5, 8014d2e <__swsetup_r+0x16>
 8014d24:	69ab      	ldr	r3, [r5, #24]
 8014d26:	b913      	cbnz	r3, 8014d2e <__swsetup_r+0x16>
 8014d28:	4628      	mov	r0, r5
 8014d2a:	f7ff f821 	bl	8013d70 <__sinit>
 8014d2e:	4b2e      	ldr	r3, [pc, #184]	; (8014de8 <__swsetup_r+0xd0>)
 8014d30:	429c      	cmp	r4, r3
 8014d32:	d10f      	bne.n	8014d54 <__swsetup_r+0x3c>
 8014d34:	686c      	ldr	r4, [r5, #4]
 8014d36:	89a3      	ldrh	r3, [r4, #12]
 8014d38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014d3c:	0719      	lsls	r1, r3, #28
 8014d3e:	d42c      	bmi.n	8014d9a <__swsetup_r+0x82>
 8014d40:	06dd      	lsls	r5, r3, #27
 8014d42:	d411      	bmi.n	8014d68 <__swsetup_r+0x50>
 8014d44:	2309      	movs	r3, #9
 8014d46:	6033      	str	r3, [r6, #0]
 8014d48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014d4c:	81a3      	strh	r3, [r4, #12]
 8014d4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014d52:	e03e      	b.n	8014dd2 <__swsetup_r+0xba>
 8014d54:	4b25      	ldr	r3, [pc, #148]	; (8014dec <__swsetup_r+0xd4>)
 8014d56:	429c      	cmp	r4, r3
 8014d58:	d101      	bne.n	8014d5e <__swsetup_r+0x46>
 8014d5a:	68ac      	ldr	r4, [r5, #8]
 8014d5c:	e7eb      	b.n	8014d36 <__swsetup_r+0x1e>
 8014d5e:	4b24      	ldr	r3, [pc, #144]	; (8014df0 <__swsetup_r+0xd8>)
 8014d60:	429c      	cmp	r4, r3
 8014d62:	bf08      	it	eq
 8014d64:	68ec      	ldreq	r4, [r5, #12]
 8014d66:	e7e6      	b.n	8014d36 <__swsetup_r+0x1e>
 8014d68:	0758      	lsls	r0, r3, #29
 8014d6a:	d512      	bpl.n	8014d92 <__swsetup_r+0x7a>
 8014d6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014d6e:	b141      	cbz	r1, 8014d82 <__swsetup_r+0x6a>
 8014d70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014d74:	4299      	cmp	r1, r3
 8014d76:	d002      	beq.n	8014d7e <__swsetup_r+0x66>
 8014d78:	4630      	mov	r0, r6
 8014d7a:	f7fd fb6f 	bl	801245c <_free_r>
 8014d7e:	2300      	movs	r3, #0
 8014d80:	6363      	str	r3, [r4, #52]	; 0x34
 8014d82:	89a3      	ldrh	r3, [r4, #12]
 8014d84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014d88:	81a3      	strh	r3, [r4, #12]
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	6063      	str	r3, [r4, #4]
 8014d8e:	6923      	ldr	r3, [r4, #16]
 8014d90:	6023      	str	r3, [r4, #0]
 8014d92:	89a3      	ldrh	r3, [r4, #12]
 8014d94:	f043 0308 	orr.w	r3, r3, #8
 8014d98:	81a3      	strh	r3, [r4, #12]
 8014d9a:	6923      	ldr	r3, [r4, #16]
 8014d9c:	b94b      	cbnz	r3, 8014db2 <__swsetup_r+0x9a>
 8014d9e:	89a3      	ldrh	r3, [r4, #12]
 8014da0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014da8:	d003      	beq.n	8014db2 <__swsetup_r+0x9a>
 8014daa:	4621      	mov	r1, r4
 8014dac:	4630      	mov	r0, r6
 8014dae:	f000 f931 	bl	8015014 <__smakebuf_r>
 8014db2:	89a0      	ldrh	r0, [r4, #12]
 8014db4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014db8:	f010 0301 	ands.w	r3, r0, #1
 8014dbc:	d00a      	beq.n	8014dd4 <__swsetup_r+0xbc>
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	60a3      	str	r3, [r4, #8]
 8014dc2:	6963      	ldr	r3, [r4, #20]
 8014dc4:	425b      	negs	r3, r3
 8014dc6:	61a3      	str	r3, [r4, #24]
 8014dc8:	6923      	ldr	r3, [r4, #16]
 8014dca:	b943      	cbnz	r3, 8014dde <__swsetup_r+0xc6>
 8014dcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014dd0:	d1ba      	bne.n	8014d48 <__swsetup_r+0x30>
 8014dd2:	bd70      	pop	{r4, r5, r6, pc}
 8014dd4:	0781      	lsls	r1, r0, #30
 8014dd6:	bf58      	it	pl
 8014dd8:	6963      	ldrpl	r3, [r4, #20]
 8014dda:	60a3      	str	r3, [r4, #8]
 8014ddc:	e7f4      	b.n	8014dc8 <__swsetup_r+0xb0>
 8014dde:	2000      	movs	r0, #0
 8014de0:	e7f7      	b.n	8014dd2 <__swsetup_r+0xba>
 8014de2:	bf00      	nop
 8014de4:	200006a4 	.word	0x200006a4
 8014de8:	08025198 	.word	0x08025198
 8014dec:	080251b8 	.word	0x080251b8
 8014df0:	08025178 	.word	0x08025178

08014df4 <abort>:
 8014df4:	b508      	push	{r3, lr}
 8014df6:	2006      	movs	r0, #6
 8014df8:	f000 f9ba 	bl	8015170 <raise>
 8014dfc:	2001      	movs	r0, #1
 8014dfe:	f000 fb63 	bl	80154c8 <_exit>
	...

08014e04 <_close_r>:
 8014e04:	b538      	push	{r3, r4, r5, lr}
 8014e06:	4d06      	ldr	r5, [pc, #24]	; (8014e20 <_close_r+0x1c>)
 8014e08:	2300      	movs	r3, #0
 8014e0a:	4604      	mov	r4, r0
 8014e0c:	4608      	mov	r0, r1
 8014e0e:	602b      	str	r3, [r5, #0]
 8014e10:	f000 fb1a 	bl	8015448 <_close>
 8014e14:	1c43      	adds	r3, r0, #1
 8014e16:	d102      	bne.n	8014e1e <_close_r+0x1a>
 8014e18:	682b      	ldr	r3, [r5, #0]
 8014e1a:	b103      	cbz	r3, 8014e1e <_close_r+0x1a>
 8014e1c:	6023      	str	r3, [r4, #0]
 8014e1e:	bd38      	pop	{r3, r4, r5, pc}
 8014e20:	20001c5c 	.word	0x20001c5c

08014e24 <__sflush_r>:
 8014e24:	898a      	ldrh	r2, [r1, #12]
 8014e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e2a:	4605      	mov	r5, r0
 8014e2c:	0710      	lsls	r0, r2, #28
 8014e2e:	460c      	mov	r4, r1
 8014e30:	d458      	bmi.n	8014ee4 <__sflush_r+0xc0>
 8014e32:	684b      	ldr	r3, [r1, #4]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	dc05      	bgt.n	8014e44 <__sflush_r+0x20>
 8014e38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	dc02      	bgt.n	8014e44 <__sflush_r+0x20>
 8014e3e:	2000      	movs	r0, #0
 8014e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014e46:	2e00      	cmp	r6, #0
 8014e48:	d0f9      	beq.n	8014e3e <__sflush_r+0x1a>
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014e50:	682f      	ldr	r7, [r5, #0]
 8014e52:	602b      	str	r3, [r5, #0]
 8014e54:	d032      	beq.n	8014ebc <__sflush_r+0x98>
 8014e56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014e58:	89a3      	ldrh	r3, [r4, #12]
 8014e5a:	075a      	lsls	r2, r3, #29
 8014e5c:	d505      	bpl.n	8014e6a <__sflush_r+0x46>
 8014e5e:	6863      	ldr	r3, [r4, #4]
 8014e60:	1ac0      	subs	r0, r0, r3
 8014e62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014e64:	b10b      	cbz	r3, 8014e6a <__sflush_r+0x46>
 8014e66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014e68:	1ac0      	subs	r0, r0, r3
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	4602      	mov	r2, r0
 8014e6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014e70:	6a21      	ldr	r1, [r4, #32]
 8014e72:	4628      	mov	r0, r5
 8014e74:	47b0      	blx	r6
 8014e76:	1c43      	adds	r3, r0, #1
 8014e78:	89a3      	ldrh	r3, [r4, #12]
 8014e7a:	d106      	bne.n	8014e8a <__sflush_r+0x66>
 8014e7c:	6829      	ldr	r1, [r5, #0]
 8014e7e:	291d      	cmp	r1, #29
 8014e80:	d82c      	bhi.n	8014edc <__sflush_r+0xb8>
 8014e82:	4a2a      	ldr	r2, [pc, #168]	; (8014f2c <__sflush_r+0x108>)
 8014e84:	40ca      	lsrs	r2, r1
 8014e86:	07d6      	lsls	r6, r2, #31
 8014e88:	d528      	bpl.n	8014edc <__sflush_r+0xb8>
 8014e8a:	2200      	movs	r2, #0
 8014e8c:	6062      	str	r2, [r4, #4]
 8014e8e:	04d9      	lsls	r1, r3, #19
 8014e90:	6922      	ldr	r2, [r4, #16]
 8014e92:	6022      	str	r2, [r4, #0]
 8014e94:	d504      	bpl.n	8014ea0 <__sflush_r+0x7c>
 8014e96:	1c42      	adds	r2, r0, #1
 8014e98:	d101      	bne.n	8014e9e <__sflush_r+0x7a>
 8014e9a:	682b      	ldr	r3, [r5, #0]
 8014e9c:	b903      	cbnz	r3, 8014ea0 <__sflush_r+0x7c>
 8014e9e:	6560      	str	r0, [r4, #84]	; 0x54
 8014ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014ea2:	602f      	str	r7, [r5, #0]
 8014ea4:	2900      	cmp	r1, #0
 8014ea6:	d0ca      	beq.n	8014e3e <__sflush_r+0x1a>
 8014ea8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014eac:	4299      	cmp	r1, r3
 8014eae:	d002      	beq.n	8014eb6 <__sflush_r+0x92>
 8014eb0:	4628      	mov	r0, r5
 8014eb2:	f7fd fad3 	bl	801245c <_free_r>
 8014eb6:	2000      	movs	r0, #0
 8014eb8:	6360      	str	r0, [r4, #52]	; 0x34
 8014eba:	e7c1      	b.n	8014e40 <__sflush_r+0x1c>
 8014ebc:	6a21      	ldr	r1, [r4, #32]
 8014ebe:	2301      	movs	r3, #1
 8014ec0:	4628      	mov	r0, r5
 8014ec2:	47b0      	blx	r6
 8014ec4:	1c41      	adds	r1, r0, #1
 8014ec6:	d1c7      	bne.n	8014e58 <__sflush_r+0x34>
 8014ec8:	682b      	ldr	r3, [r5, #0]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d0c4      	beq.n	8014e58 <__sflush_r+0x34>
 8014ece:	2b1d      	cmp	r3, #29
 8014ed0:	d001      	beq.n	8014ed6 <__sflush_r+0xb2>
 8014ed2:	2b16      	cmp	r3, #22
 8014ed4:	d101      	bne.n	8014eda <__sflush_r+0xb6>
 8014ed6:	602f      	str	r7, [r5, #0]
 8014ed8:	e7b1      	b.n	8014e3e <__sflush_r+0x1a>
 8014eda:	89a3      	ldrh	r3, [r4, #12]
 8014edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ee0:	81a3      	strh	r3, [r4, #12]
 8014ee2:	e7ad      	b.n	8014e40 <__sflush_r+0x1c>
 8014ee4:	690f      	ldr	r7, [r1, #16]
 8014ee6:	2f00      	cmp	r7, #0
 8014ee8:	d0a9      	beq.n	8014e3e <__sflush_r+0x1a>
 8014eea:	0793      	lsls	r3, r2, #30
 8014eec:	680e      	ldr	r6, [r1, #0]
 8014eee:	bf08      	it	eq
 8014ef0:	694b      	ldreq	r3, [r1, #20]
 8014ef2:	600f      	str	r7, [r1, #0]
 8014ef4:	bf18      	it	ne
 8014ef6:	2300      	movne	r3, #0
 8014ef8:	eba6 0807 	sub.w	r8, r6, r7
 8014efc:	608b      	str	r3, [r1, #8]
 8014efe:	f1b8 0f00 	cmp.w	r8, #0
 8014f02:	dd9c      	ble.n	8014e3e <__sflush_r+0x1a>
 8014f04:	6a21      	ldr	r1, [r4, #32]
 8014f06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014f08:	4643      	mov	r3, r8
 8014f0a:	463a      	mov	r2, r7
 8014f0c:	4628      	mov	r0, r5
 8014f0e:	47b0      	blx	r6
 8014f10:	2800      	cmp	r0, #0
 8014f12:	dc06      	bgt.n	8014f22 <__sflush_r+0xfe>
 8014f14:	89a3      	ldrh	r3, [r4, #12]
 8014f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f1a:	81a3      	strh	r3, [r4, #12]
 8014f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014f20:	e78e      	b.n	8014e40 <__sflush_r+0x1c>
 8014f22:	4407      	add	r7, r0
 8014f24:	eba8 0800 	sub.w	r8, r8, r0
 8014f28:	e7e9      	b.n	8014efe <__sflush_r+0xda>
 8014f2a:	bf00      	nop
 8014f2c:	20400001 	.word	0x20400001

08014f30 <_fflush_r>:
 8014f30:	b538      	push	{r3, r4, r5, lr}
 8014f32:	690b      	ldr	r3, [r1, #16]
 8014f34:	4605      	mov	r5, r0
 8014f36:	460c      	mov	r4, r1
 8014f38:	b913      	cbnz	r3, 8014f40 <_fflush_r+0x10>
 8014f3a:	2500      	movs	r5, #0
 8014f3c:	4628      	mov	r0, r5
 8014f3e:	bd38      	pop	{r3, r4, r5, pc}
 8014f40:	b118      	cbz	r0, 8014f4a <_fflush_r+0x1a>
 8014f42:	6983      	ldr	r3, [r0, #24]
 8014f44:	b90b      	cbnz	r3, 8014f4a <_fflush_r+0x1a>
 8014f46:	f7fe ff13 	bl	8013d70 <__sinit>
 8014f4a:	4b14      	ldr	r3, [pc, #80]	; (8014f9c <_fflush_r+0x6c>)
 8014f4c:	429c      	cmp	r4, r3
 8014f4e:	d11b      	bne.n	8014f88 <_fflush_r+0x58>
 8014f50:	686c      	ldr	r4, [r5, #4]
 8014f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d0ef      	beq.n	8014f3a <_fflush_r+0xa>
 8014f5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014f5c:	07d0      	lsls	r0, r2, #31
 8014f5e:	d404      	bmi.n	8014f6a <_fflush_r+0x3a>
 8014f60:	0599      	lsls	r1, r3, #22
 8014f62:	d402      	bmi.n	8014f6a <_fflush_r+0x3a>
 8014f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014f66:	f7fe ffb8 	bl	8013eda <__retarget_lock_acquire_recursive>
 8014f6a:	4628      	mov	r0, r5
 8014f6c:	4621      	mov	r1, r4
 8014f6e:	f7ff ff59 	bl	8014e24 <__sflush_r>
 8014f72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014f74:	07da      	lsls	r2, r3, #31
 8014f76:	4605      	mov	r5, r0
 8014f78:	d4e0      	bmi.n	8014f3c <_fflush_r+0xc>
 8014f7a:	89a3      	ldrh	r3, [r4, #12]
 8014f7c:	059b      	lsls	r3, r3, #22
 8014f7e:	d4dd      	bmi.n	8014f3c <_fflush_r+0xc>
 8014f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014f82:	f7fe ffab 	bl	8013edc <__retarget_lock_release_recursive>
 8014f86:	e7d9      	b.n	8014f3c <_fflush_r+0xc>
 8014f88:	4b05      	ldr	r3, [pc, #20]	; (8014fa0 <_fflush_r+0x70>)
 8014f8a:	429c      	cmp	r4, r3
 8014f8c:	d101      	bne.n	8014f92 <_fflush_r+0x62>
 8014f8e:	68ac      	ldr	r4, [r5, #8]
 8014f90:	e7df      	b.n	8014f52 <_fflush_r+0x22>
 8014f92:	4b04      	ldr	r3, [pc, #16]	; (8014fa4 <_fflush_r+0x74>)
 8014f94:	429c      	cmp	r4, r3
 8014f96:	bf08      	it	eq
 8014f98:	68ec      	ldreq	r4, [r5, #12]
 8014f9a:	e7da      	b.n	8014f52 <_fflush_r+0x22>
 8014f9c:	08025198 	.word	0x08025198
 8014fa0:	080251b8 	.word	0x080251b8
 8014fa4:	08025178 	.word	0x08025178

08014fa8 <_lseek_r>:
 8014fa8:	b538      	push	{r3, r4, r5, lr}
 8014faa:	4d07      	ldr	r5, [pc, #28]	; (8014fc8 <_lseek_r+0x20>)
 8014fac:	4604      	mov	r4, r0
 8014fae:	4608      	mov	r0, r1
 8014fb0:	4611      	mov	r1, r2
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	602a      	str	r2, [r5, #0]
 8014fb6:	461a      	mov	r2, r3
 8014fb8:	f000 fa6e 	bl	8015498 <_lseek>
 8014fbc:	1c43      	adds	r3, r0, #1
 8014fbe:	d102      	bne.n	8014fc6 <_lseek_r+0x1e>
 8014fc0:	682b      	ldr	r3, [r5, #0]
 8014fc2:	b103      	cbz	r3, 8014fc6 <_lseek_r+0x1e>
 8014fc4:	6023      	str	r3, [r4, #0]
 8014fc6:	bd38      	pop	{r3, r4, r5, pc}
 8014fc8:	20001c5c 	.word	0x20001c5c

08014fcc <__swhatbuf_r>:
 8014fcc:	b570      	push	{r4, r5, r6, lr}
 8014fce:	460e      	mov	r6, r1
 8014fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fd4:	2900      	cmp	r1, #0
 8014fd6:	b096      	sub	sp, #88	; 0x58
 8014fd8:	4614      	mov	r4, r2
 8014fda:	461d      	mov	r5, r3
 8014fdc:	da07      	bge.n	8014fee <__swhatbuf_r+0x22>
 8014fde:	2300      	movs	r3, #0
 8014fe0:	602b      	str	r3, [r5, #0]
 8014fe2:	89b3      	ldrh	r3, [r6, #12]
 8014fe4:	061a      	lsls	r2, r3, #24
 8014fe6:	d410      	bmi.n	801500a <__swhatbuf_r+0x3e>
 8014fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014fec:	e00e      	b.n	801500c <__swhatbuf_r+0x40>
 8014fee:	466a      	mov	r2, sp
 8014ff0:	f000 f8e8 	bl	80151c4 <_fstat_r>
 8014ff4:	2800      	cmp	r0, #0
 8014ff6:	dbf2      	blt.n	8014fde <__swhatbuf_r+0x12>
 8014ff8:	9a01      	ldr	r2, [sp, #4]
 8014ffa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014ffe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015002:	425a      	negs	r2, r3
 8015004:	415a      	adcs	r2, r3
 8015006:	602a      	str	r2, [r5, #0]
 8015008:	e7ee      	b.n	8014fe8 <__swhatbuf_r+0x1c>
 801500a:	2340      	movs	r3, #64	; 0x40
 801500c:	2000      	movs	r0, #0
 801500e:	6023      	str	r3, [r4, #0]
 8015010:	b016      	add	sp, #88	; 0x58
 8015012:	bd70      	pop	{r4, r5, r6, pc}

08015014 <__smakebuf_r>:
 8015014:	898b      	ldrh	r3, [r1, #12]
 8015016:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015018:	079d      	lsls	r5, r3, #30
 801501a:	4606      	mov	r6, r0
 801501c:	460c      	mov	r4, r1
 801501e:	d507      	bpl.n	8015030 <__smakebuf_r+0x1c>
 8015020:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015024:	6023      	str	r3, [r4, #0]
 8015026:	6123      	str	r3, [r4, #16]
 8015028:	2301      	movs	r3, #1
 801502a:	6163      	str	r3, [r4, #20]
 801502c:	b002      	add	sp, #8
 801502e:	bd70      	pop	{r4, r5, r6, pc}
 8015030:	ab01      	add	r3, sp, #4
 8015032:	466a      	mov	r2, sp
 8015034:	f7ff ffca 	bl	8014fcc <__swhatbuf_r>
 8015038:	9900      	ldr	r1, [sp, #0]
 801503a:	4605      	mov	r5, r0
 801503c:	4630      	mov	r0, r6
 801503e:	f7fd fa5d 	bl	80124fc <_malloc_r>
 8015042:	b948      	cbnz	r0, 8015058 <__smakebuf_r+0x44>
 8015044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015048:	059a      	lsls	r2, r3, #22
 801504a:	d4ef      	bmi.n	801502c <__smakebuf_r+0x18>
 801504c:	f023 0303 	bic.w	r3, r3, #3
 8015050:	f043 0302 	orr.w	r3, r3, #2
 8015054:	81a3      	strh	r3, [r4, #12]
 8015056:	e7e3      	b.n	8015020 <__smakebuf_r+0xc>
 8015058:	4b0d      	ldr	r3, [pc, #52]	; (8015090 <__smakebuf_r+0x7c>)
 801505a:	62b3      	str	r3, [r6, #40]	; 0x28
 801505c:	89a3      	ldrh	r3, [r4, #12]
 801505e:	6020      	str	r0, [r4, #0]
 8015060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015064:	81a3      	strh	r3, [r4, #12]
 8015066:	9b00      	ldr	r3, [sp, #0]
 8015068:	6163      	str	r3, [r4, #20]
 801506a:	9b01      	ldr	r3, [sp, #4]
 801506c:	6120      	str	r0, [r4, #16]
 801506e:	b15b      	cbz	r3, 8015088 <__smakebuf_r+0x74>
 8015070:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015074:	4630      	mov	r0, r6
 8015076:	f000 f8b7 	bl	80151e8 <_isatty_r>
 801507a:	b128      	cbz	r0, 8015088 <__smakebuf_r+0x74>
 801507c:	89a3      	ldrh	r3, [r4, #12]
 801507e:	f023 0303 	bic.w	r3, r3, #3
 8015082:	f043 0301 	orr.w	r3, r3, #1
 8015086:	81a3      	strh	r3, [r4, #12]
 8015088:	89a0      	ldrh	r0, [r4, #12]
 801508a:	4305      	orrs	r5, r0
 801508c:	81a5      	strh	r5, [r4, #12]
 801508e:	e7cd      	b.n	801502c <__smakebuf_r+0x18>
 8015090:	08013d09 	.word	0x08013d09

08015094 <__ascii_mbtowc>:
 8015094:	b082      	sub	sp, #8
 8015096:	b901      	cbnz	r1, 801509a <__ascii_mbtowc+0x6>
 8015098:	a901      	add	r1, sp, #4
 801509a:	b142      	cbz	r2, 80150ae <__ascii_mbtowc+0x1a>
 801509c:	b14b      	cbz	r3, 80150b2 <__ascii_mbtowc+0x1e>
 801509e:	7813      	ldrb	r3, [r2, #0]
 80150a0:	600b      	str	r3, [r1, #0]
 80150a2:	7812      	ldrb	r2, [r2, #0]
 80150a4:	1e10      	subs	r0, r2, #0
 80150a6:	bf18      	it	ne
 80150a8:	2001      	movne	r0, #1
 80150aa:	b002      	add	sp, #8
 80150ac:	4770      	bx	lr
 80150ae:	4610      	mov	r0, r2
 80150b0:	e7fb      	b.n	80150aa <__ascii_mbtowc+0x16>
 80150b2:	f06f 0001 	mvn.w	r0, #1
 80150b6:	e7f8      	b.n	80150aa <__ascii_mbtowc+0x16>

080150b8 <memmove>:
 80150b8:	4288      	cmp	r0, r1
 80150ba:	b510      	push	{r4, lr}
 80150bc:	eb01 0402 	add.w	r4, r1, r2
 80150c0:	d902      	bls.n	80150c8 <memmove+0x10>
 80150c2:	4284      	cmp	r4, r0
 80150c4:	4623      	mov	r3, r4
 80150c6:	d807      	bhi.n	80150d8 <memmove+0x20>
 80150c8:	1e43      	subs	r3, r0, #1
 80150ca:	42a1      	cmp	r1, r4
 80150cc:	d008      	beq.n	80150e0 <memmove+0x28>
 80150ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80150d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80150d6:	e7f8      	b.n	80150ca <memmove+0x12>
 80150d8:	4402      	add	r2, r0
 80150da:	4601      	mov	r1, r0
 80150dc:	428a      	cmp	r2, r1
 80150de:	d100      	bne.n	80150e2 <memmove+0x2a>
 80150e0:	bd10      	pop	{r4, pc}
 80150e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80150e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80150ea:	e7f7      	b.n	80150dc <memmove+0x24>

080150ec <_malloc_usable_size_r>:
 80150ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80150f0:	1f18      	subs	r0, r3, #4
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	bfbc      	itt	lt
 80150f6:	580b      	ldrlt	r3, [r1, r0]
 80150f8:	18c0      	addlt	r0, r0, r3
 80150fa:	4770      	bx	lr

080150fc <_read_r>:
 80150fc:	b538      	push	{r3, r4, r5, lr}
 80150fe:	4d07      	ldr	r5, [pc, #28]	; (801511c <_read_r+0x20>)
 8015100:	4604      	mov	r4, r0
 8015102:	4608      	mov	r0, r1
 8015104:	4611      	mov	r1, r2
 8015106:	2200      	movs	r2, #0
 8015108:	602a      	str	r2, [r5, #0]
 801510a:	461a      	mov	r2, r3
 801510c:	f000 f9cc 	bl	80154a8 <_read>
 8015110:	1c43      	adds	r3, r0, #1
 8015112:	d102      	bne.n	801511a <_read_r+0x1e>
 8015114:	682b      	ldr	r3, [r5, #0]
 8015116:	b103      	cbz	r3, 801511a <_read_r+0x1e>
 8015118:	6023      	str	r3, [r4, #0]
 801511a:	bd38      	pop	{r3, r4, r5, pc}
 801511c:	20001c5c 	.word	0x20001c5c

08015120 <_raise_r>:
 8015120:	291f      	cmp	r1, #31
 8015122:	b538      	push	{r3, r4, r5, lr}
 8015124:	4604      	mov	r4, r0
 8015126:	460d      	mov	r5, r1
 8015128:	d904      	bls.n	8015134 <_raise_r+0x14>
 801512a:	2316      	movs	r3, #22
 801512c:	6003      	str	r3, [r0, #0]
 801512e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015132:	bd38      	pop	{r3, r4, r5, pc}
 8015134:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015136:	b112      	cbz	r2, 801513e <_raise_r+0x1e>
 8015138:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801513c:	b94b      	cbnz	r3, 8015152 <_raise_r+0x32>
 801513e:	4620      	mov	r0, r4
 8015140:	f000 f830 	bl	80151a4 <_getpid_r>
 8015144:	462a      	mov	r2, r5
 8015146:	4601      	mov	r1, r0
 8015148:	4620      	mov	r0, r4
 801514a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801514e:	f000 b817 	b.w	8015180 <_kill_r>
 8015152:	2b01      	cmp	r3, #1
 8015154:	d00a      	beq.n	801516c <_raise_r+0x4c>
 8015156:	1c59      	adds	r1, r3, #1
 8015158:	d103      	bne.n	8015162 <_raise_r+0x42>
 801515a:	2316      	movs	r3, #22
 801515c:	6003      	str	r3, [r0, #0]
 801515e:	2001      	movs	r0, #1
 8015160:	e7e7      	b.n	8015132 <_raise_r+0x12>
 8015162:	2400      	movs	r4, #0
 8015164:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015168:	4628      	mov	r0, r5
 801516a:	4798      	blx	r3
 801516c:	2000      	movs	r0, #0
 801516e:	e7e0      	b.n	8015132 <_raise_r+0x12>

08015170 <raise>:
 8015170:	4b02      	ldr	r3, [pc, #8]	; (801517c <raise+0xc>)
 8015172:	4601      	mov	r1, r0
 8015174:	6818      	ldr	r0, [r3, #0]
 8015176:	f7ff bfd3 	b.w	8015120 <_raise_r>
 801517a:	bf00      	nop
 801517c:	200006a4 	.word	0x200006a4

08015180 <_kill_r>:
 8015180:	b538      	push	{r3, r4, r5, lr}
 8015182:	4d07      	ldr	r5, [pc, #28]	; (80151a0 <_kill_r+0x20>)
 8015184:	2300      	movs	r3, #0
 8015186:	4604      	mov	r4, r0
 8015188:	4608      	mov	r0, r1
 801518a:	4611      	mov	r1, r2
 801518c:	602b      	str	r3, [r5, #0]
 801518e:	f000 f97b 	bl	8015488 <_kill>
 8015192:	1c43      	adds	r3, r0, #1
 8015194:	d102      	bne.n	801519c <_kill_r+0x1c>
 8015196:	682b      	ldr	r3, [r5, #0]
 8015198:	b103      	cbz	r3, 801519c <_kill_r+0x1c>
 801519a:	6023      	str	r3, [r4, #0]
 801519c:	bd38      	pop	{r3, r4, r5, pc}
 801519e:	bf00      	nop
 80151a0:	20001c5c 	.word	0x20001c5c

080151a4 <_getpid_r>:
 80151a4:	f000 b960 	b.w	8015468 <_getpid>

080151a8 <__ascii_wctomb>:
 80151a8:	b149      	cbz	r1, 80151be <__ascii_wctomb+0x16>
 80151aa:	2aff      	cmp	r2, #255	; 0xff
 80151ac:	bf85      	ittet	hi
 80151ae:	238a      	movhi	r3, #138	; 0x8a
 80151b0:	6003      	strhi	r3, [r0, #0]
 80151b2:	700a      	strbls	r2, [r1, #0]
 80151b4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80151b8:	bf98      	it	ls
 80151ba:	2001      	movls	r0, #1
 80151bc:	4770      	bx	lr
 80151be:	4608      	mov	r0, r1
 80151c0:	4770      	bx	lr
	...

080151c4 <_fstat_r>:
 80151c4:	b538      	push	{r3, r4, r5, lr}
 80151c6:	4d07      	ldr	r5, [pc, #28]	; (80151e4 <_fstat_r+0x20>)
 80151c8:	2300      	movs	r3, #0
 80151ca:	4604      	mov	r4, r0
 80151cc:	4608      	mov	r0, r1
 80151ce:	4611      	mov	r1, r2
 80151d0:	602b      	str	r3, [r5, #0]
 80151d2:	f000 f941 	bl	8015458 <_fstat>
 80151d6:	1c43      	adds	r3, r0, #1
 80151d8:	d102      	bne.n	80151e0 <_fstat_r+0x1c>
 80151da:	682b      	ldr	r3, [r5, #0]
 80151dc:	b103      	cbz	r3, 80151e0 <_fstat_r+0x1c>
 80151de:	6023      	str	r3, [r4, #0]
 80151e0:	bd38      	pop	{r3, r4, r5, pc}
 80151e2:	bf00      	nop
 80151e4:	20001c5c 	.word	0x20001c5c

080151e8 <_isatty_r>:
 80151e8:	b538      	push	{r3, r4, r5, lr}
 80151ea:	4d06      	ldr	r5, [pc, #24]	; (8015204 <_isatty_r+0x1c>)
 80151ec:	2300      	movs	r3, #0
 80151ee:	4604      	mov	r4, r0
 80151f0:	4608      	mov	r0, r1
 80151f2:	602b      	str	r3, [r5, #0]
 80151f4:	f000 f940 	bl	8015478 <_isatty>
 80151f8:	1c43      	adds	r3, r0, #1
 80151fa:	d102      	bne.n	8015202 <_isatty_r+0x1a>
 80151fc:	682b      	ldr	r3, [r5, #0]
 80151fe:	b103      	cbz	r3, 8015202 <_isatty_r+0x1a>
 8015200:	6023      	str	r3, [r4, #0]
 8015202:	bd38      	pop	{r3, r4, r5, pc}
 8015204:	20001c5c 	.word	0x20001c5c

08015208 <expf>:
 8015208:	b508      	push	{r3, lr}
 801520a:	ed2d 8b02 	vpush	{d8}
 801520e:	eef0 8a40 	vmov.f32	s17, s0
 8015212:	f000 f837 	bl	8015284 <__ieee754_expf>
 8015216:	4b16      	ldr	r3, [pc, #88]	; (8015270 <expf+0x68>)
 8015218:	f993 3000 	ldrsb.w	r3, [r3]
 801521c:	3301      	adds	r3, #1
 801521e:	eeb0 8a40 	vmov.f32	s16, s0
 8015222:	d011      	beq.n	8015248 <expf+0x40>
 8015224:	eeb0 0a68 	vmov.f32	s0, s17
 8015228:	f000 f900 	bl	801542c <finitef>
 801522c:	b160      	cbz	r0, 8015248 <expf+0x40>
 801522e:	eddf 7a11 	vldr	s15, [pc, #68]	; 8015274 <expf+0x6c>
 8015232:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801523a:	dd0a      	ble.n	8015252 <expf+0x4a>
 801523c:	f7fd f8be 	bl	80123bc <__errno>
 8015240:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8015278 <expf+0x70>
 8015244:	2322      	movs	r3, #34	; 0x22
 8015246:	6003      	str	r3, [r0, #0]
 8015248:	eeb0 0a48 	vmov.f32	s0, s16
 801524c:	ecbd 8b02 	vpop	{d8}
 8015250:	bd08      	pop	{r3, pc}
 8015252:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801527c <expf+0x74>
 8015256:	eef4 8ae7 	vcmpe.f32	s17, s15
 801525a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801525e:	d5f3      	bpl.n	8015248 <expf+0x40>
 8015260:	f7fd f8ac 	bl	80123bc <__errno>
 8015264:	2322      	movs	r3, #34	; 0x22
 8015266:	ed9f 8a06 	vldr	s16, [pc, #24]	; 8015280 <expf+0x78>
 801526a:	6003      	str	r3, [r0, #0]
 801526c:	e7ec      	b.n	8015248 <expf+0x40>
 801526e:	bf00      	nop
 8015270:	20000874 	.word	0x20000874
 8015274:	42b17180 	.word	0x42b17180
 8015278:	7f800000 	.word	0x7f800000
 801527c:	c2cff1b5 	.word	0xc2cff1b5
 8015280:	00000000 	.word	0x00000000

08015284 <__ieee754_expf>:
 8015284:	ee10 2a10 	vmov	r2, s0
 8015288:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801528c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8015290:	d902      	bls.n	8015298 <__ieee754_expf+0x14>
 8015292:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015296:	4770      	bx	lr
 8015298:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 801529c:	d106      	bne.n	80152ac <__ieee754_expf+0x28>
 801529e:	eddf 7a51 	vldr	s15, [pc, #324]	; 80153e4 <__ieee754_expf+0x160>
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	bf18      	it	ne
 80152a6:	eeb0 0a67 	vmovne.f32	s0, s15
 80152aa:	4770      	bx	lr
 80152ac:	484e      	ldr	r0, [pc, #312]	; (80153e8 <__ieee754_expf+0x164>)
 80152ae:	4282      	cmp	r2, r0
 80152b0:	dd04      	ble.n	80152bc <__ieee754_expf+0x38>
 80152b2:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80153ec <__ieee754_expf+0x168>
 80152b6:	ee20 0a00 	vmul.f32	s0, s0, s0
 80152ba:	4770      	bx	lr
 80152bc:	2a00      	cmp	r2, #0
 80152be:	da03      	bge.n	80152c8 <__ieee754_expf+0x44>
 80152c0:	4a4b      	ldr	r2, [pc, #300]	; (80153f0 <__ieee754_expf+0x16c>)
 80152c2:	4291      	cmp	r1, r2
 80152c4:	f200 808a 	bhi.w	80153dc <__ieee754_expf+0x158>
 80152c8:	4a4a      	ldr	r2, [pc, #296]	; (80153f4 <__ieee754_expf+0x170>)
 80152ca:	4291      	cmp	r1, r2
 80152cc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80152d0:	d954      	bls.n	801537c <__ieee754_expf+0xf8>
 80152d2:	4a49      	ldr	r2, [pc, #292]	; (80153f8 <__ieee754_expf+0x174>)
 80152d4:	4291      	cmp	r1, r2
 80152d6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80152da:	d836      	bhi.n	801534a <__ieee754_expf+0xc6>
 80152dc:	4947      	ldr	r1, [pc, #284]	; (80153fc <__ieee754_expf+0x178>)
 80152de:	4411      	add	r1, r2
 80152e0:	ed91 7a00 	vldr	s14, [r1]
 80152e4:	4946      	ldr	r1, [pc, #280]	; (8015400 <__ieee754_expf+0x17c>)
 80152e6:	440a      	add	r2, r1
 80152e8:	edd2 7a00 	vldr	s15, [r2]
 80152ec:	ee30 7a47 	vsub.f32	s14, s0, s14
 80152f0:	f1c3 0201 	rsb	r2, r3, #1
 80152f4:	1ad2      	subs	r2, r2, r3
 80152f6:	ee37 0a67 	vsub.f32	s0, s14, s15
 80152fa:	ee60 6a00 	vmul.f32	s13, s0, s0
 80152fe:	eddf 5a41 	vldr	s11, [pc, #260]	; 8015404 <__ieee754_expf+0x180>
 8015302:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8015408 <__ieee754_expf+0x184>
 8015306:	eea6 5aa5 	vfma.f32	s10, s13, s11
 801530a:	eddf 5a40 	vldr	s11, [pc, #256]	; 801540c <__ieee754_expf+0x188>
 801530e:	eee5 5a26 	vfma.f32	s11, s10, s13
 8015312:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8015410 <__ieee754_expf+0x18c>
 8015316:	eea5 5aa6 	vfma.f32	s10, s11, s13
 801531a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8015414 <__ieee754_expf+0x190>
 801531e:	eee5 5a26 	vfma.f32	s11, s10, s13
 8015322:	eeb0 5a40 	vmov.f32	s10, s0
 8015326:	eea5 5ae6 	vfms.f32	s10, s11, s13
 801532a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801532e:	eef0 6a45 	vmov.f32	s13, s10
 8015332:	ee20 5a05 	vmul.f32	s10, s0, s10
 8015336:	bb92      	cbnz	r2, 801539e <__ieee754_expf+0x11a>
 8015338:	ee76 6ae5 	vsub.f32	s13, s13, s11
 801533c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8015340:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015344:	ee36 0a40 	vsub.f32	s0, s12, s0
 8015348:	4770      	bx	lr
 801534a:	4b33      	ldr	r3, [pc, #204]	; (8015418 <__ieee754_expf+0x194>)
 801534c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801541c <__ieee754_expf+0x198>
 8015350:	4413      	add	r3, r2
 8015352:	edd3 7a00 	vldr	s15, [r3]
 8015356:	eee0 7a07 	vfma.f32	s15, s0, s14
 801535a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8015420 <__ieee754_expf+0x19c>
 801535e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015362:	ee17 2a90 	vmov	r2, s15
 8015366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801536a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801536e:	eeb0 7a40 	vmov.f32	s14, s0
 8015372:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8015424 <__ieee754_expf+0x1a0>
 8015376:	ee67 7a80 	vmul.f32	s15, s15, s0
 801537a:	e7bc      	b.n	80152f6 <__ieee754_expf+0x72>
 801537c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8015380:	d20b      	bcs.n	801539a <__ieee754_expf+0x116>
 8015382:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80153ec <__ieee754_expf+0x168>
 8015386:	ee70 6a26 	vadd.f32	s13, s0, s13
 801538a:	eef4 6ac6 	vcmpe.f32	s13, s12
 801538e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015392:	dd02      	ble.n	801539a <__ieee754_expf+0x116>
 8015394:	ee30 0a06 	vadd.f32	s0, s0, s12
 8015398:	4770      	bx	lr
 801539a:	2200      	movs	r2, #0
 801539c:	e7ad      	b.n	80152fa <__ieee754_expf+0x76>
 801539e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80153a2:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80153a6:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80153aa:	bfb8      	it	lt
 80153ac:	3264      	addlt	r2, #100	; 0x64
 80153ae:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80153b2:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80153b6:	ee76 7a40 	vsub.f32	s15, s12, s0
 80153ba:	ee17 3a90 	vmov	r3, s15
 80153be:	bfab      	itete	ge
 80153c0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80153c4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80153c8:	ee00 3a10 	vmovge	s0, r3
 80153cc:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8015428 <__ieee754_expf+0x1a4>
 80153d0:	bfbc      	itt	lt
 80153d2:	ee00 3a10 	vmovlt	s0, r3
 80153d6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80153da:	4770      	bx	lr
 80153dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80153e4 <__ieee754_expf+0x160>
 80153e0:	4770      	bx	lr
 80153e2:	bf00      	nop
 80153e4:	00000000 	.word	0x00000000
 80153e8:	42b17217 	.word	0x42b17217
 80153ec:	7149f2ca 	.word	0x7149f2ca
 80153f0:	42cff1b5 	.word	0x42cff1b5
 80153f4:	3eb17218 	.word	0x3eb17218
 80153f8:	3f851591 	.word	0x3f851591
 80153fc:	08025458 	.word	0x08025458
 8015400:	08025460 	.word	0x08025460
 8015404:	3331bb4c 	.word	0x3331bb4c
 8015408:	b5ddea0e 	.word	0xb5ddea0e
 801540c:	388ab355 	.word	0x388ab355
 8015410:	bb360b61 	.word	0xbb360b61
 8015414:	3e2aaaab 	.word	0x3e2aaaab
 8015418:	08025450 	.word	0x08025450
 801541c:	3fb8aa3b 	.word	0x3fb8aa3b
 8015420:	3f317180 	.word	0x3f317180
 8015424:	3717f7d1 	.word	0x3717f7d1
 8015428:	0d800000 	.word	0x0d800000

0801542c <finitef>:
 801542c:	b082      	sub	sp, #8
 801542e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8015432:	9801      	ldr	r0, [sp, #4]
 8015434:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015438:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801543c:	bfac      	ite	ge
 801543e:	2000      	movge	r0, #0
 8015440:	2001      	movlt	r0, #1
 8015442:	b002      	add	sp, #8
 8015444:	4770      	bx	lr
	...

08015448 <_close>:
 8015448:	4b02      	ldr	r3, [pc, #8]	; (8015454 <_close+0xc>)
 801544a:	2258      	movs	r2, #88	; 0x58
 801544c:	601a      	str	r2, [r3, #0]
 801544e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015452:	4770      	bx	lr
 8015454:	20001c5c 	.word	0x20001c5c

08015458 <_fstat>:
 8015458:	4b02      	ldr	r3, [pc, #8]	; (8015464 <_fstat+0xc>)
 801545a:	2258      	movs	r2, #88	; 0x58
 801545c:	601a      	str	r2, [r3, #0]
 801545e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015462:	4770      	bx	lr
 8015464:	20001c5c 	.word	0x20001c5c

08015468 <_getpid>:
 8015468:	4b02      	ldr	r3, [pc, #8]	; (8015474 <_getpid+0xc>)
 801546a:	2258      	movs	r2, #88	; 0x58
 801546c:	601a      	str	r2, [r3, #0]
 801546e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015472:	4770      	bx	lr
 8015474:	20001c5c 	.word	0x20001c5c

08015478 <_isatty>:
 8015478:	4b02      	ldr	r3, [pc, #8]	; (8015484 <_isatty+0xc>)
 801547a:	2258      	movs	r2, #88	; 0x58
 801547c:	601a      	str	r2, [r3, #0]
 801547e:	2000      	movs	r0, #0
 8015480:	4770      	bx	lr
 8015482:	bf00      	nop
 8015484:	20001c5c 	.word	0x20001c5c

08015488 <_kill>:
 8015488:	4b02      	ldr	r3, [pc, #8]	; (8015494 <_kill+0xc>)
 801548a:	2258      	movs	r2, #88	; 0x58
 801548c:	601a      	str	r2, [r3, #0]
 801548e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015492:	4770      	bx	lr
 8015494:	20001c5c 	.word	0x20001c5c

08015498 <_lseek>:
 8015498:	4b02      	ldr	r3, [pc, #8]	; (80154a4 <_lseek+0xc>)
 801549a:	2258      	movs	r2, #88	; 0x58
 801549c:	601a      	str	r2, [r3, #0]
 801549e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80154a2:	4770      	bx	lr
 80154a4:	20001c5c 	.word	0x20001c5c

080154a8 <_read>:
 80154a8:	4b02      	ldr	r3, [pc, #8]	; (80154b4 <_read+0xc>)
 80154aa:	2258      	movs	r2, #88	; 0x58
 80154ac:	601a      	str	r2, [r3, #0]
 80154ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80154b2:	4770      	bx	lr
 80154b4:	20001c5c 	.word	0x20001c5c

080154b8 <_write>:
 80154b8:	4b02      	ldr	r3, [pc, #8]	; (80154c4 <_write+0xc>)
 80154ba:	2258      	movs	r2, #88	; 0x58
 80154bc:	601a      	str	r2, [r3, #0]
 80154be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80154c2:	4770      	bx	lr
 80154c4:	20001c5c 	.word	0x20001c5c

080154c8 <_exit>:
 80154c8:	e7fe      	b.n	80154c8 <_exit>
	...

080154cc <_init>:
 80154cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154ce:	bf00      	nop
 80154d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80154d2:	bc08      	pop	{r3}
 80154d4:	469e      	mov	lr, r3
 80154d6:	4770      	bx	lr

080154d8 <_fini>:
 80154d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154da:	bf00      	nop
 80154dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80154de:	bc08      	pop	{r3}
 80154e0:	469e      	mov	lr, r3
 80154e2:	4770      	bx	lr
