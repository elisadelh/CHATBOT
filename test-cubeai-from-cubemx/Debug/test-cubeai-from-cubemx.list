
test-cubeai-from-cubemx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001481c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000f764  080149f0  080149f0  000249f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024154  08024154  00040878  2**0
                  CONTENTS
  4 .ARM          00000008  08024154  08024154  00034154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802415c  0802415c  00040878  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802415c  0802415c  0003415c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024160  08024160  00034160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000878  20000000  08024164  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013e8  20000878  080249dc  00040878  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20001c60  080249dc  00041c60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040878  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a510  00000000  00000000  000408a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006ed0  00000000  00000000  0007adb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002938  00000000  00000000  00081c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002668  00000000  00000000  000845c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000356a2  00000000  00000000  00086c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003576c  00000000  00000000  000bc2ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012d7e4  00000000  00000000  000f1a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  0021f21a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c238  00000000  00000000  0021f2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0022b520  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0022b5ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000878 	.word	0x20000878
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080149d4 	.word	0x080149d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000087c 	.word	0x2000087c
 800020c:	080149d4 	.word	0x080149d4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c1c:	f000 b96e 	b.w	8000efc <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468c      	mov	ip, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 8083 	bne.w	8000d4e <__udivmoddi4+0x116>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d947      	bls.n	8000cde <__udivmoddi4+0xa6>
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	b142      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	f1c2 0020 	rsb	r0, r2, #32
 8000c58:	fa24 f000 	lsr.w	r0, r4, r0
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4097      	lsls	r7, r2
 8000c60:	ea40 0c01 	orr.w	ip, r0, r1
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c70:	fa1f fe87 	uxth.w	lr, r7
 8000c74:	fb08 c116 	mls	r1, r8, r6, ip
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c8a:	f080 8119 	bcs.w	8000ec0 <__udivmoddi4+0x288>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8116 	bls.w	8000ec0 <__udivmoddi4+0x288>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	443b      	add	r3, r7
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cb6:	f080 8105 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000cba:	45a6      	cmp	lr, r4
 8000cbc:	f240 8102 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	443c      	add	r4, r7
 8000cc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc8:	eba4 040e 	sub.w	r4, r4, lr
 8000ccc:	2600      	movs	r6, #0
 8000cce:	b11d      	cbz	r5, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	b902      	cbnz	r2, 8000ce2 <__udivmoddi4+0xaa>
 8000ce0:	deff      	udf	#255	; 0xff
 8000ce2:	fab2 f282 	clz	r2, r2
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	d150      	bne.n	8000d8c <__udivmoddi4+0x154>
 8000cea:	1bcb      	subs	r3, r1, r7
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa1f f887 	uxth.w	r8, r7
 8000cf4:	2601      	movs	r6, #1
 8000cf6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cfa:	0c21      	lsrs	r1, r4, #16
 8000cfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d04:	fb08 f30c 	mul.w	r3, r8, ip
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000d0c:	1879      	adds	r1, r7, r1
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0xe2>
 8000d14:	428b      	cmp	r3, r1
 8000d16:	f200 80e9 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1ac9      	subs	r1, r1, r3
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x10c>
 8000d34:	193c      	adds	r4, r7, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x10a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80d9 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e7bf      	b.n	8000cce <__udivmoddi4+0x96>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x12e>
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	f000 80b1 	beq.w	8000eba <__udivmoddi4+0x282>
 8000d58:	2600      	movs	r6, #0
 8000d5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5e:	4630      	mov	r0, r6
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f683 	clz	r6, r3
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d14a      	bne.n	8000e04 <__udivmoddi4+0x1cc>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0x140>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80b8 	bhi.w	8000ee8 <__udivmoddi4+0x2b0>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	468c      	mov	ip, r1
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d0a8      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f603 	lsr.w	r6, r0, r3
 8000d94:	4097      	lsls	r7, r2
 8000d96:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9e:	40d9      	lsrs	r1, r3
 8000da0:	4330      	orrs	r0, r6
 8000da2:	0c03      	lsrs	r3, r0, #16
 8000da4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000da8:	fa1f f887 	uxth.w	r8, r7
 8000dac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb06 f108 	mul.w	r1, r6, r8
 8000db8:	4299      	cmp	r1, r3
 8000dba:	fa04 f402 	lsl.w	r4, r4, r2
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x19c>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000dc6:	f080 808d 	bcs.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 808a 	bls.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b281      	uxth	r1, r0
 8000dd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ddc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb00 f308 	mul.w	r3, r0, r8
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x1c4>
 8000dec:	1879      	adds	r1, r7, r1
 8000dee:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000df2:	d273      	bcs.n	8000edc <__udivmoddi4+0x2a4>
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d971      	bls.n	8000edc <__udivmoddi4+0x2a4>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4439      	add	r1, r7
 8000dfc:	1acb      	subs	r3, r1, r3
 8000dfe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e02:	e778      	b.n	8000cf6 <__udivmoddi4+0xbe>
 8000e04:	f1c6 0c20 	rsb	ip, r6, #32
 8000e08:	fa03 f406 	lsl.w	r4, r3, r6
 8000e0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e10:	431c      	orrs	r4, r3
 8000e12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e16:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e22:	431f      	orrs	r7, r3
 8000e24:	0c3b      	lsrs	r3, r7, #16
 8000e26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2a:	fa1f f884 	uxth.w	r8, r4
 8000e2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e36:	fb09 fa08 	mul.w	sl, r9, r8
 8000e3a:	458a      	cmp	sl, r1
 8000e3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e40:	fa00 f306 	lsl.w	r3, r0, r6
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x220>
 8000e46:	1861      	adds	r1, r4, r1
 8000e48:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e4c:	d248      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	d946      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4421      	add	r1, r4
 8000e58:	eba1 010a 	sub.w	r1, r1, sl
 8000e5c:	b2bf      	uxth	r7, r7
 8000e5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e6a:	fb00 f808 	mul.w	r8, r0, r8
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x24a>
 8000e72:	19e7      	adds	r7, r4, r7
 8000e74:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e78:	d22e      	bcs.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7a:	45b8      	cmp	r8, r7
 8000e7c:	d92c      	bls.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4427      	add	r7, r4
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	eba7 0708 	sub.w	r7, r7, r8
 8000e8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8e:	454f      	cmp	r7, r9
 8000e90:	46c6      	mov	lr, r8
 8000e92:	4649      	mov	r1, r9
 8000e94:	d31a      	bcc.n	8000ecc <__udivmoddi4+0x294>
 8000e96:	d017      	beq.n	8000ec8 <__udivmoddi4+0x290>
 8000e98:	b15d      	cbz	r5, 8000eb2 <__udivmoddi4+0x27a>
 8000e9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000ea2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ea6:	40f2      	lsrs	r2, r6
 8000ea8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eac:	40f7      	lsrs	r7, r6
 8000eae:	e9c5 2700 	strd	r2, r7, [r5]
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e70b      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6fd      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ec8:	4543      	cmp	r3, r8
 8000eca:	d2e5      	bcs.n	8000e98 <__udivmoddi4+0x260>
 8000ecc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7df      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e7d2      	b.n	8000e82 <__udivmoddi4+0x24a>
 8000edc:	4660      	mov	r0, ip
 8000ede:	e78d      	b.n	8000dfc <__udivmoddi4+0x1c4>
 8000ee0:	4681      	mov	r9, r0
 8000ee2:	e7b9      	b.n	8000e58 <__udivmoddi4+0x220>
 8000ee4:	4666      	mov	r6, ip
 8000ee6:	e775      	b.n	8000dd4 <__udivmoddi4+0x19c>
 8000ee8:	4630      	mov	r0, r6
 8000eea:	e74a      	b.n	8000d82 <__udivmoddi4+0x14a>
 8000eec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef0:	4439      	add	r1, r7
 8000ef2:	e713      	b.n	8000d1c <__udivmoddi4+0xe4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	443c      	add	r4, r7
 8000ef8:	e724      	b.n	8000d44 <__udivmoddi4+0x10c>
 8000efa:	bf00      	nop

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f04:	f3bf 8f4f 	dsb	sy
}
 8000f08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0a:	f3bf 8f6f 	isb	sy
}
 8000f0e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f10:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <SCB_EnableICache+0x48>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f18:	f3bf 8f4f 	dsb	sy
}
 8000f1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f1e:	f3bf 8f6f 	isb	sy
}
 8000f22:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <SCB_EnableICache+0x48>)
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <SCB_EnableICache+0x48>)
 8000f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f30:	f3bf 8f4f 	dsb	sy
}
 8000f34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f36:	f3bf 8f6f 	isb	sy
}
 8000f3a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000f52:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <SCB_EnableDCache+0x84>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f5a:	f3bf 8f4f 	dsb	sy
}
 8000f5e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <SCB_EnableDCache+0x84>)
 8000f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f66:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	0b5b      	lsrs	r3, r3, #13
 8000f6c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f70:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	08db      	lsrs	r3, r3, #3
 8000f76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f7a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	015a      	lsls	r2, r3, #5
 8000f80:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000f84:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f8a:	4911      	ldr	r1, [pc, #68]	; (8000fd0 <SCB_EnableDCache+0x84>)
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1e5a      	subs	r2, r3, #1
 8000f96:	60ba      	str	r2, [r7, #8]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1ef      	bne.n	8000f7c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	1e5a      	subs	r2, r3, #1
 8000fa0:	60fa      	str	r2, [r7, #12]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1e5      	bne.n	8000f72 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa6:	f3bf 8f4f 	dsb	sy
}
 8000faa:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <SCB_EnableDCache+0x84>)
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <SCB_EnableDCache+0x84>)
 8000fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fb8:	f3bf 8f4f 	dsb	sy
}
 8000fbc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fbe:	f3bf 8f6f 	isb	sy
}
 8000fc2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd4:	b5b0      	push	{r4, r5, r7, lr}
 8000fd6:	f6ad 0db8 	subw	sp, sp, #2232	; 0x8b8
 8000fda:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  char buf[50];
  int buf_len = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f8c7 3890 	str.w	r3, [r7, #2192]	; 0x890
  uint32_t timestamp;
  float y_val;
  //float test = 0.0f;

  //définitin du message de test
  char message_test[1][15] = {"anniversaire"}; //sous forme d'array pour l'instant, à voir
 8000fe2:	4bd7      	ldr	r3, [pc, #860]	; (8001340 <main+0x36c>)
 8000fe4:	f507 6403 	add.w	r4, r7, #2096	; 0x830
 8000fe8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fea:	c407      	stmia	r4!, {r0, r1, r2}
 8000fec:	8023      	strh	r3, [r4, #0]
 8000fee:	3402      	adds	r4, #2
 8000ff0:	0c1b      	lsrs	r3, r3, #16
 8000ff2:	7023      	strb	r3, [r4, #0]
  // Buffers used to store input and output tensors
  AI_ALIGNED(4) ai_i8 in_data[AI_CHATBOT_IN_1_SIZE_BYTES];
  AI_ALIGNED(4) ai_i8 out_data[AI_CHATBOT_OUT_1_SIZE_BYTES];

  // Pointer to our model
  ai_handle chatbot = AI_HANDLE_NULL;
 8000ff4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]

  // Initialize wrapper structs that hold pointers to data and info about the
  // data (tensor height, width, channels)
  ai_buffer ai_input[AI_CHATBOT_IN_NUM] = AI_CHATBOT_IN;
 8000ffc:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001000:	4ad0      	ldr	r2, [pc, #832]	; (8001344 <main+0x370>)
 8001002:	461c      	mov	r4, r3
 8001004:	4615      	mov	r5, r2
 8001006:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001008:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800100a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800100e:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_buffer ai_output[AI_CHATBOT_OUT_NUM] = AI_CHATBOT_OUT;
 8001012:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001016:	4acc      	ldr	r2, [pc, #816]	; (8001348 <main+0x374>)
 8001018:	461c      	mov	r4, r3
 800101a:	4615      	mov	r5, r2
 800101c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800101e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001020:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001024:	e884 0003 	stmia.w	r4, {r0, r1}

  // Set working memory and get weights/biases from model
  ai_network_params ai_params = {
 8001028:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800102c:	4ac7      	ldr	r2, [pc, #796]	; (800134c <main+0x378>)
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8001034:	2201      	movs	r2, #1
 8001036:	809a      	strh	r2, [r3, #4]
 8001038:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800103c:	2201      	movs	r2, #1
 800103e:	80da      	strh	r2, [r3, #6]
 8001040:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8001044:	2201      	movs	r2, #1
 8001046:	811a      	strh	r2, [r3, #8]
 8001048:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800104c:	f64e 7218 	movw	r2, #61208	; 0xef18
 8001050:	60da      	str	r2, [r3, #12]
    AI_CHATBOT_DATA_WEIGHTS(ai_chatbot_data_weights_get()),
 8001052:	f00f f833 	bl	80100bc <ai_chatbot_data_weights_get>
 8001056:	4602      	mov	r2, r0
  ai_network_params ai_params = {
 8001058:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800105c:	611a      	str	r2, [r3, #16]
 800105e:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8001062:	2200      	movs	r2, #0
 8001064:	615a      	str	r2, [r3, #20]
 8001066:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800106a:	4ab9      	ldr	r2, [pc, #740]	; (8001350 <main+0x37c>)
 800106c:	619a      	str	r2, [r3, #24]
 800106e:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8001072:	2201      	movs	r2, #1
 8001074:	839a      	strh	r2, [r3, #28]
 8001076:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800107a:	2201      	movs	r2, #1
 800107c:	83da      	strh	r2, [r3, #30]
 800107e:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8001082:	2201      	movs	r2, #1
 8001084:	841a      	strh	r2, [r3, #32]
 8001086:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800108a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800108e:	625a      	str	r2, [r3, #36]	; 0x24
 8001090:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8001094:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 8001098:	629a      	str	r2, [r3, #40]	; 0x28
 800109a:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800109e:	2200      	movs	r2, #0
 80010a0:	62da      	str	r2, [r3, #44]	; 0x2c
    AI_CHATBOT_DATA_ACTIVATIONS(activations)
  };


  // Set pointers wrapper structs to our data buffers
  ai_input[0].n_batches = 1;
 80010a2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80010a6:	2201      	movs	r2, #1
 80010a8:	809a      	strh	r2, [r3, #4]
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 80010aa:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80010ae:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 80010b2:	611a      	str	r2, [r3, #16]
  ai_output[0].n_batches = 1;
 80010b4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80010b8:	2201      	movs	r2, #1
 80010ba:	809a      	strh	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 80010bc:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80010c0:	f207 4234 	addw	r2, r7, #1076	; 0x434
 80010c4:	611a      	str	r2, [r3, #16]

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80010c6:	f7ff ff1b 	bl	8000f00 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80010ca:	f7ff ff3f 	bl	8000f4c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ce:	f002 fb0a 	bl	80036e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d2:	f000 f9c1 	bl	8001458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d6:	f001 f975 	bl	80023c4 <MX_GPIO_Init>
  MX_ADC3_Init();
 80010da:	f000 fa7d 	bl	80015d8 <MX_ADC3_Init>
  MX_CRC_Init();
 80010de:	f000 facd 	bl	800167c <MX_CRC_Init>
  MX_DCMI_Init();
 80010e2:	f000 faed 	bl	80016c0 <MX_DCMI_Init>
  MX_DMA2D_Init();
 80010e6:	f000 fb1f 	bl	8001728 <MX_DMA2D_Init>
  //MX_ETH_Init();
  MX_FMC_Init();
 80010ea:	f001 f91b 	bl	8002324 <MX_FMC_Init>
  MX_I2C1_Init();
 80010ee:	f000 fb4d 	bl	800178c <MX_I2C1_Init>
  MX_I2C3_Init();
 80010f2:	f000 fb8b 	bl	800180c <MX_I2C3_Init>
  MX_LTDC_Init();
 80010f6:	f000 fbc9 	bl	800188c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80010fa:	f000 fc49 	bl	8001990 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80010fe:	f000 fc73 	bl	80019e8 <MX_RTC_Init>
  MX_SAI2_Init();
 8001102:	f000 fd17 	bl	8001b34 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001106:	f000 fdbd 	bl	8001c84 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 800110a:	f000 fddb 	bl	8001cc4 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 800110e:	f000 fe09 	bl	8001d24 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001112:	f000 feb3 	bl	8001e7c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001116:	f000 ff27 	bl	8001f68 <MX_TIM3_Init>
  MX_TIM5_Init();
 800111a:	f000 ff9d 	bl	8002058 <MX_TIM5_Init>
  MX_TIM8_Init();
 800111e:	f001 f813 	bl	8002148 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001122:	f001 f865 	bl	80021f0 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001126:	f001 f89d 	bl	8002264 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800112a:	f001 f8cb 	bl	80022c4 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 800112e:	f00c faab 	bl	800d688 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001132:	f00e fb97 	bl	800f864 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

    // Start timer/counter
    HAL_TIM_Base_Start(&htim12);
 8001136:	4887      	ldr	r0, [pc, #540]	; (8001354 <main+0x380>)
 8001138:	f009 f904 	bl	800a344 <HAL_TIM_Base_Start>

    // Greetings!
    buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 800113c:	f607 0344 	addw	r3, r7, #2116	; 0x844
 8001140:	4985      	ldr	r1, [pc, #532]	; (8001358 <main+0x384>)
 8001142:	4618      	mov	r0, r3
 8001144:	f011 f98c 	bl	8012460 <siprintf>
 8001148:	f8c7 0890 	str.w	r0, [r7, #2192]	; 0x890
    HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 800114c:	f8d7 3890 	ldr.w	r3, [r7, #2192]	; 0x890
 8001150:	b29a      	uxth	r2, r3
 8001152:	f607 0144 	addw	r1, r7, #2116	; 0x844
 8001156:	2364      	movs	r3, #100	; 0x64
 8001158:	4880      	ldr	r0, [pc, #512]	; (800135c <main+0x388>)
 800115a:	f00a f88d 	bl	800b278 <HAL_UART_Transmit>

    // Create instance of neural network
    ai_err = ai_chatbot_create(&chatbot, AI_CHATBOT_DATA_CONFIG);
 800115e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f00e ff43 	bl	800fff0 <ai_chatbot_create>
 800116a:	4603      	mov	r3, r0
 800116c:	f8c7 3840 	str.w	r3, [r7, #2112]	; 0x840
    if (ai_err.type != AI_ERROR_NONE)
 8001170:	f897 3840 	ldrb.w	r3, [r7, #2112]	; 0x840
 8001174:	2b00      	cmp	r3, #0
 8001176:	d011      	beq.n	800119c <main+0x1c8>
    {
      buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8001178:	f607 0344 	addw	r3, r7, #2116	; 0x844
 800117c:	4978      	ldr	r1, [pc, #480]	; (8001360 <main+0x38c>)
 800117e:	4618      	mov	r0, r3
 8001180:	f011 f96e 	bl	8012460 <siprintf>
 8001184:	f8c7 0890 	str.w	r0, [r7, #2192]	; 0x890
      HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 8001188:	f8d7 3890 	ldr.w	r3, [r7, #2192]	; 0x890
 800118c:	b29a      	uxth	r2, r3
 800118e:	f607 0144 	addw	r1, r7, #2116	; 0x844
 8001192:	2364      	movs	r3, #100	; 0x64
 8001194:	4871      	ldr	r0, [pc, #452]	; (800135c <main+0x388>)
 8001196:	f00a f86f 	bl	800b278 <HAL_UART_Transmit>
      while(1);
 800119a:	e7fe      	b.n	800119a <main+0x1c6>
    }

    // Initialize neural network
    if (!ai_chatbot_init(chatbot, &ai_params))
 800119c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 80011a6:	4611      	mov	r1, r2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f00e ff37 	bl	801001c <ai_chatbot_init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	f083 0301 	eor.w	r3, r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d011      	beq.n	80011de <main+0x20a>
    {
      buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 80011ba:	f607 0344 	addw	r3, r7, #2116	; 0x844
 80011be:	4969      	ldr	r1, [pc, #420]	; (8001364 <main+0x390>)
 80011c0:	4618      	mov	r0, r3
 80011c2:	f011 f94d 	bl	8012460 <siprintf>
 80011c6:	f8c7 0890 	str.w	r0, [r7, #2192]	; 0x890
      HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 80011ca:	f8d7 3890 	ldr.w	r3, [r7, #2192]	; 0x890
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	f607 0144 	addw	r1, r7, #2116	; 0x844
 80011d4:	2364      	movs	r3, #100	; 0x64
 80011d6:	4861      	ldr	r0, [pc, #388]	; (800135c <main+0x388>)
 80011d8:	f00a f84e 	bl	800b278 <HAL_UART_Transmit>
      while(1);
 80011dc:	e7fe      	b.n	80011dc <main+0x208>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80011de:	f00e fb67 	bl	800f8b0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    LED_Toggle();
 80011e2:	f001 fac1 	bl	8002768 <LED_Toggle>
    HAL_Delay(500);
 80011e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011ea:	f002 fad9 	bl	80037a0 <HAL_Delay>

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // ADAPTATION CHATBOT
    //mots de référence
    char words[51][15] = {"adios", "anniversaire", "as-tu", "bye", "c'est", "cafetière", "ce", "cette", "coffee", "comment", "cya", "ensemble", "es-tu", "est", "fais-tu", "fasse", "forme", "hello", "is", "la", "maker", "né", "où", "plan", "pour", "prénom", "qu'on", "quand", "que", "quel", "quels", "qui", "roule", "salut", "see", "semaine", "sont", "t'appelles", "te", "the", "ton", "truc", "tu", "un", "veux", "week-end", "where", "ya", "yo", "âge", "ça"};
 80011ee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80011f2:	4a5d      	ldr	r2, [pc, #372]	; (8001368 <main+0x394>)
 80011f4:	4618      	mov	r0, r3
 80011f6:	4611      	mov	r1, r2
 80011f8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80011fc:	461a      	mov	r2, r3
 80011fe:	f010 fbf5 	bl	80119ec <memcpy>

    //bag_of_words - ~encodage de l'entrée
    int bow[51];
    for(int b=0;b<51;b++){
 8001202:	2300      	movs	r3, #0
 8001204:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
 8001208:	e00a      	b.n	8001220 <main+0x24c>
    	bow[b]=0;
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	f8d7 28ac 	ldr.w	r2, [r7, #2220]	; 0x8ac
 8001210:	2100      	movs	r1, #0
 8001212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int b=0;b<51;b++){
 8001216:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 800121a:	3301      	adds	r3, #1
 800121c:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
 8001220:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8001224:	2b32      	cmp	r3, #50	; 0x32
 8001226:	ddf0      	ble.n	800120a <main+0x236>
    }
    int size_message = sizeof message_test;
 8001228:	230f      	movs	r3, #15
 800122a:	f8c7 388c 	str.w	r3, [r7, #2188]	; 0x88c
    int nb_mots = 1; //nb de mots dans le message test (1ere dimension du tableau de message_test)
 800122e:	2301      	movs	r3, #1
 8001230:	f8c7 3888 	str.w	r3, [r7, #2184]	; 0x888
    for(int w=0; w<nb_mots;w++){
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 38a8 	str.w	r3, [r7, #2216]	; 0x8a8
 800123a:	e02d      	b.n	8001298 <main+0x2c4>
		for(int w_ref=0; w_ref<51; w_ref++){
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 38a4 	str.w	r3, [r7, #2212]	; 0x8a4
 8001242:	e020      	b.n	8001286 <main+0x2b2>
			if (strcmp(words[w_ref], message_test[w])==0){ bow[w_ref]=1;}
 8001244:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8001248:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	; 0x8a4
 800124c:	4613      	mov	r3, r2
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	1a9b      	subs	r3, r3, r2
 8001252:	18c8      	adds	r0, r1, r3
 8001254:	f507 6103 	add.w	r1, r7, #2096	; 0x830
 8001258:	f8d7 28a8 	ldr.w	r2, [r7, #2216]	; 0x8a8
 800125c:	4613      	mov	r3, r2
 800125e:	011b      	lsls	r3, r3, #4
 8001260:	1a9b      	subs	r3, r3, r2
 8001262:	440b      	add	r3, r1
 8001264:	4619      	mov	r1, r3
 8001266:	f7fe ffd3 	bl	8000210 <strcmp>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d105      	bne.n	800127c <main+0x2a8>
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	f8d7 28a4 	ldr.w	r2, [r7, #2212]	; 0x8a4
 8001276:	2101      	movs	r1, #1
 8001278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(int w_ref=0; w_ref<51; w_ref++){
 800127c:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 8001280:	3301      	adds	r3, #1
 8001282:	f8c7 38a4 	str.w	r3, [r7, #2212]	; 0x8a4
 8001286:	f8d7 38a4 	ldr.w	r3, [r7, #2212]	; 0x8a4
 800128a:	2b32      	cmp	r3, #50	; 0x32
 800128c:	ddda      	ble.n	8001244 <main+0x270>
    for(int w=0; w<nb_mots;w++){
 800128e:	f8d7 38a8 	ldr.w	r3, [r7, #2216]	; 0x8a8
 8001292:	3301      	adds	r3, #1
 8001294:	f8c7 38a8 	str.w	r3, [r7, #2216]	; 0x8a8
 8001298:	f8d7 28a8 	ldr.w	r2, [r7, #2216]	; 0x8a8
 800129c:	f8d7 3888 	ldr.w	r3, [r7, #2184]	; 0x888
 80012a0:	429a      	cmp	r2, r3
 80012a2:	dbcb      	blt.n	800123c <main+0x268>
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    // Fill input buffer (use test value)
  	for (uint32_t i = 0; i < AI_CHATBOT_IN_1_SIZE; i++)
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 38a0 	str.w	r3, [r7, #2208]	; 0x8a0
 80012aa:	e010      	b.n	80012ce <main+0x2fa>
  	{
  	  ((ai_int *)in_data)[i] = (ai_int)(bow[i]);
 80012ac:	f8d7 38a0 	ldr.w	r3, [r7, #2208]	; 0x8a0
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 80012b6:	4413      	add	r3, r2
 80012b8:	1d3a      	adds	r2, r7, #4
 80012ba:	f8d7 18a0 	ldr.w	r1, [r7, #2208]	; 0x8a0
 80012be:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80012c2:	601a      	str	r2, [r3, #0]
  	for (uint32_t i = 0; i < AI_CHATBOT_IN_1_SIZE; i++)
 80012c4:	f8d7 38a0 	ldr.w	r3, [r7, #2208]	; 0x8a0
 80012c8:	3301      	adds	r3, #1
 80012ca:	f8c7 38a0 	str.w	r3, [r7, #2208]	; 0x8a0
 80012ce:	f8d7 38a0 	ldr.w	r3, [r7, #2208]	; 0x8a0
 80012d2:	2b32      	cmp	r3, #50	; 0x32
 80012d4:	d9ea      	bls.n	80012ac <main+0x2d8>
  	  //test += 0.1; //pour sinus, pas nécessaire pour chatbot
  	}

  	// Get current timestamp
  	timestamp = htim12.Instance->CNT;
 80012d6:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <main+0x380>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	f8c7 3884 	str.w	r3, [r7, #2180]	; 0x884

	// Perform inference
	nbatch = ai_chatbot_run(chatbot, &ai_input[0], &ai_output[0]);
 80012e0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 80012ea:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 80012ee:	4618      	mov	r0, r3
 80012f0:	f00e fed3 	bl	801009a <ai_chatbot_run>
 80012f4:	f8c7 0880 	str.w	r0, [r7, #2176]	; 0x880
	if (nbatch != 1) {
 80012f8:	f8d7 3880 	ldr.w	r3, [r7, #2176]	; 0x880
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d010      	beq.n	8001322 <main+0x34e>
	  buf_len = sprintf(buf, "Error: could not run inference\r\n");
 8001300:	f607 0344 	addw	r3, r7, #2116	; 0x844
 8001304:	4919      	ldr	r1, [pc, #100]	; (800136c <main+0x398>)
 8001306:	4618      	mov	r0, r3
 8001308:	f011 f8aa 	bl	8012460 <siprintf>
 800130c:	f8c7 0890 	str.w	r0, [r7, #2192]	; 0x890
	  HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 8001310:	f8d7 3890 	ldr.w	r3, [r7, #2192]	; 0x890
 8001314:	b29a      	uxth	r2, r3
 8001316:	f607 0144 	addw	r1, r7, #2116	; 0x844
 800131a:	2364      	movs	r3, #100	; 0x64
 800131c:	480f      	ldr	r0, [pc, #60]	; (800135c <main+0x388>)
 800131e:	f009 ffab 	bl	800b278 <HAL_UART_Transmit>
	}

	// Read output (predicted y) of neural network
	y_val = ((char *)out_data)[0]; //résultat du réseau - correspondant à result dans python
 8001322:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	ee07 3a90 	vmov	s15, r3
 800132c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001330:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 8001334:	edc3 7a00 	vstr	s15, [r3]

	//Récupération toutes les valeurs (les probas de chaque classe)
	for (uint32_t i = 0; i < AI_CHATBOT_OUT_1_SIZE; i++)
 8001338:	2300      	movs	r3, #0
 800133a:	f8c7 389c 	str.w	r3, [r7, #2204]	; 0x89c
 800133e:	e02a      	b.n	8001396 <main+0x3c2>
 8001340:	08014a9c 	.word	0x08014a9c
 8001344:	08014aac 	.word	0x08014aac
 8001348:	08014ac4 	.word	0x08014ac4
 800134c:	40040440 	.word	0x40040440
 8001350:	00040440 	.word	0x00040440
 8001354:	20000ff4 	.word	0x20000ff4
 8001358:	080149f0 	.word	0x080149f0
 800135c:	20000ee4 	.word	0x20000ee4
 8001360:	08014a0c 	.word	0x08014a0c
 8001364:	08014a34 	.word	0x08014a34
 8001368:	08014adc 	.word	0x08014adc
 800136c:	08014a58 	.word	0x08014a58
	  	{
	  	  ((ai_float *)proba_classes)[i] = ((ai_float *)out_data)[i];
 8001370:	f8d7 389c 	ldr.w	r3, [r7, #2204]	; 0x89c
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	f207 4234 	addw	r2, r7, #1076	; 0x434
 800137a:	441a      	add	r2, r3
 800137c:	f8d7 389c 	ldr.w	r3, [r7, #2204]	; 0x89c
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	f607 0118 	addw	r1, r7, #2072	; 0x818
 8001386:	440b      	add	r3, r1
 8001388:	6812      	ldr	r2, [r2, #0]
 800138a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < AI_CHATBOT_OUT_1_SIZE; i++)
 800138c:	f8d7 389c 	ldr.w	r3, [r7, #2204]	; 0x89c
 8001390:	3301      	adds	r3, #1
 8001392:	f8c7 389c 	str.w	r3, [r7, #2204]	; 0x89c
 8001396:	f8d7 389c 	ldr.w	r3, [r7, #2204]	; 0x89c
 800139a:	2b05      	cmp	r3, #5
 800139c:	d9e8      	bls.n	8001370 <main+0x39c>
	  	}

	int pred_class; //max des probas pour prédire la classe correcte
	ai_float max = proba_classes[0];
 800139e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f607 0298 	addw	r2, r7, #2200	; 0x898
 80013a8:	6013      	str	r3, [r2, #0]
	for (uint32_t i = 1; i < AI_CHATBOT_OUT_1_SIZE; i++)
 80013aa:	2301      	movs	r3, #1
 80013ac:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894
 80013b0:	e025      	b.n	80013fe <main+0x42a>
		{
		  if(proba_classes[i]>max){
 80013b2:	f8d7 3894 	ldr.w	r3, [r7, #2196]	; 0x894
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80013bc:	4413      	add	r3, r2
 80013be:	3b98      	subs	r3, #152	; 0x98
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	f607 0398 	addw	r3, r7, #2200	; 0x898
 80013c8:	ed93 7a00 	vldr	s14, [r3]
 80013cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d4:	d50e      	bpl.n	80013f4 <main+0x420>
			  max = proba_classes[i];
 80013d6:	f8d7 3894 	ldr.w	r3, [r7, #2196]	; 0x894
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80013e0:	4413      	add	r3, r2
 80013e2:	3b98      	subs	r3, #152	; 0x98
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f607 0298 	addw	r2, r7, #2200	; 0x898
 80013ea:	6013      	str	r3, [r2, #0]
			  pred_class = i;
 80013ec:	f8d7 3894 	ldr.w	r3, [r7, #2196]	; 0x894
 80013f0:	f8c7 3878 	str.w	r3, [r7, #2168]	; 0x878
	for (uint32_t i = 1; i < AI_CHATBOT_OUT_1_SIZE; i++)
 80013f4:	f8d7 3894 	ldr.w	r3, [r7, #2196]	; 0x894
 80013f8:	3301      	adds	r3, #1
 80013fa:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894
 80013fe:	f8d7 3894 	ldr.w	r3, [r7, #2196]	; 0x894
 8001402:	2b05      	cmp	r3, #5
 8001404:	d9d5      	bls.n	80013b2 <main+0x3de>
		  }
		}
	//BILAN: prédiction de l'index de la classe, créer dico et récup la réponse qu'il faut

	// Print output of neural network along with inference time (microseconds)
	buf_len = sprintf(buf, "Output: %f | Duration: %lu\r\n", y_val, htim12.Instance->CNT - timestamp);
 8001406:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	f7ff f8cc 	bl	80005a8 <__aeabi_f2d>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	490d      	ldr	r1, [pc, #52]	; (800144c <main+0x478>)
 8001416:	6809      	ldr	r1, [r1, #0]
 8001418:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800141a:	f8d7 1884 	ldr.w	r1, [r7, #2180]	; 0x884
 800141e:	1a41      	subs	r1, r0, r1
 8001420:	f607 0044 	addw	r0, r7, #2116	; 0x844
 8001424:	9100      	str	r1, [sp, #0]
 8001426:	490a      	ldr	r1, [pc, #40]	; (8001450 <main+0x47c>)
 8001428:	f011 f81a 	bl	8012460 <siprintf>
 800142c:	f8c7 0890 	str.w	r0, [r7, #2192]	; 0x890
	HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 8001430:	f8d7 3890 	ldr.w	r3, [r7, #2192]	; 0x890
 8001434:	b29a      	uxth	r2, r3
 8001436:	f607 0144 	addw	r1, r7, #2116	; 0x844
 800143a:	2364      	movs	r3, #100	; 0x64
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <main+0x480>)
 800143e:	f009 ff1b 	bl	800b278 <HAL_UART_Transmit>

	// Wait before doing it again
	HAL_Delay(500);
 8001442:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001446:	f002 f9ab 	bl	80037a0 <HAL_Delay>
    {
 800144a:	e6c8      	b.n	80011de <main+0x20a>
 800144c:	20000ff4 	.word	0x20000ff4
 8001450:	08014a7c 	.word	0x08014a7c
 8001454:	20000ee4 	.word	0x20000ee4

08001458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b0b4      	sub	sp, #208	; 0xd0
 800145c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001462:	2230      	movs	r2, #48	; 0x30
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f010 face 	bl	8011a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800146c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800147c:	f107 0308 	add.w	r3, r7, #8
 8001480:	2284      	movs	r2, #132	; 0x84
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f010 fabf 	bl	8011a08 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800148a:	f005 fc85 	bl	8006d98 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	4b4f      	ldr	r3, [pc, #316]	; (80015cc <SystemClock_Config+0x174>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	4a4e      	ldr	r2, [pc, #312]	; (80015cc <SystemClock_Config+0x174>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001498:	6413      	str	r3, [r2, #64]	; 0x40
 800149a:	4b4c      	ldr	r3, [pc, #304]	; (80015cc <SystemClock_Config+0x174>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a6:	4b4a      	ldr	r3, [pc, #296]	; (80015d0 <SystemClock_Config+0x178>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a49      	ldr	r2, [pc, #292]	; (80015d0 <SystemClock_Config+0x178>)
 80014ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	4b47      	ldr	r3, [pc, #284]	; (80015d0 <SystemClock_Config+0x178>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80014be:	2309      	movs	r3, #9
 80014c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80014cc:	2301      	movs	r3, #1
 80014ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d2:	2302      	movs	r3, #2
 80014d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80014e0:	2319      	movs	r3, #25
 80014e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80014e6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80014ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014ee:	2302      	movs	r3, #2
 80014f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80014f4:	2309      	movs	r3, #9
 80014f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014fe:	4618      	mov	r0, r3
 8001500:	f005 fd6c 	bl	8006fdc <HAL_RCC_OscConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800150a:	f001 f937 	bl	800277c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800150e:	f005 fc53 	bl	8006db8 <HAL_PWREx_EnableOverDrive>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001518:	f001 f930 	bl	800277c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151c:	230f      	movs	r3, #15
 800151e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001522:	2302      	movs	r3, #2
 8001524:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800152e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001532:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800153e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001542:	2106      	movs	r1, #6
 8001544:	4618      	mov	r0, r3
 8001546:	f005 ffed 	bl	8007524 <HAL_RCC_ClockConfig>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001550:	f001 f914 	bl	800277c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001554:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <SystemClock_Config+0x17c>)
 8001556:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001558:	2364      	movs	r3, #100	; 0x64
 800155a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800155c:	2302      	movs	r3, #2
 800155e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001560:	2302      	movs	r3, #2
 8001562:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001564:	2302      	movs	r3, #2
 8001566:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001568:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800156c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800156e:	2305      	movs	r3, #5
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001572:	2302      	movs	r3, #2
 8001574:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001576:	2303      	movs	r3, #3
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800157a:	2301      	movs	r3, #1
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800157e:	2301      	movs	r3, #1
 8001580:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001582:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001586:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001588:	f44f 7300 	mov.w	r3, #512	; 0x200
 800158c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800158e:	2300      	movs	r3, #0
 8001590:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001592:	2300      	movs	r3, #0
 8001594:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001596:	2300      	movs	r3, #0
 8001598:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800159a:	2300      	movs	r3, #0
 800159c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800159e:	2300      	movs	r3, #0
 80015a0:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80015a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80015a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b0:	f107 0308 	add.w	r3, r7, #8
 80015b4:	4618      	mov	r0, r3
 80015b6:	f006 f98b 	bl	80078d0 <HAL_RCCEx_PeriphCLKConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 80015c0:	f001 f8dc 	bl	800277c <Error_Handler>
  }
}
 80015c4:	bf00      	nop
 80015c6:	37d0      	adds	r7, #208	; 0xd0
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40007000 	.word	0x40007000
 80015d4:	01b14868 	.word	0x01b14868

080015d8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015de:	463b      	mov	r3, r7
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80015ea:	4b21      	ldr	r3, [pc, #132]	; (8001670 <MX_ADC3_Init+0x98>)
 80015ec:	4a21      	ldr	r2, [pc, #132]	; (8001674 <MX_ADC3_Init+0x9c>)
 80015ee:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015f0:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <MX_ADC3_Init+0x98>)
 80015f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015f6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80015f8:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <MX_ADC3_Init+0x98>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015fe:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <MX_ADC3_Init+0x98>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001604:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <MX_ADC3_Init+0x98>)
 8001606:	2200      	movs	r2, #0
 8001608:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800160a:	4b19      	ldr	r3, [pc, #100]	; (8001670 <MX_ADC3_Init+0x98>)
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <MX_ADC3_Init+0x98>)
 8001614:	2200      	movs	r2, #0
 8001616:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001618:	4b15      	ldr	r3, [pc, #84]	; (8001670 <MX_ADC3_Init+0x98>)
 800161a:	4a17      	ldr	r2, [pc, #92]	; (8001678 <MX_ADC3_Init+0xa0>)
 800161c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800161e:	4b14      	ldr	r3, [pc, #80]	; (8001670 <MX_ADC3_Init+0x98>)
 8001620:	2200      	movs	r2, #0
 8001622:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <MX_ADC3_Init+0x98>)
 8001626:	2201      	movs	r2, #1
 8001628:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <MX_ADC3_Init+0x98>)
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <MX_ADC3_Init+0x98>)
 8001634:	2201      	movs	r2, #1
 8001636:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001638:	480d      	ldr	r0, [pc, #52]	; (8001670 <MX_ADC3_Init+0x98>)
 800163a:	f002 f8d5 	bl	80037e8 <HAL_ADC_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001644:	f001 f89a 	bl	800277c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001648:	2304      	movs	r3, #4
 800164a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800164c:	2301      	movs	r3, #1
 800164e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001654:	463b      	mov	r3, r7
 8001656:	4619      	mov	r1, r3
 8001658:	4805      	ldr	r0, [pc, #20]	; (8001670 <MX_ADC3_Init+0x98>)
 800165a:	f002 f909 	bl	8003870 <HAL_ADC_ConfigChannel>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001664:	f001 f88a 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000d5c 	.word	0x20000d5c
 8001674:	40012200 	.word	0x40012200
 8001678:	0f000001 	.word	0x0f000001

0800167c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001680:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <MX_CRC_Init+0x3c>)
 8001682:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <MX_CRC_Init+0x40>)
 8001684:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_CRC_Init+0x3c>)
 8001688:	2200      	movs	r2, #0
 800168a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <MX_CRC_Init+0x3c>)
 800168e:	2200      	movs	r2, #0
 8001690:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_CRC_Init+0x3c>)
 8001694:	2200      	movs	r2, #0
 8001696:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <MX_CRC_Init+0x3c>)
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_CRC_Init+0x3c>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80016a4:	4804      	ldr	r0, [pc, #16]	; (80016b8 <MX_CRC_Init+0x3c>)
 80016a6:	f002 fc39 	bl	8003f1c <HAL_CRC_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80016b0:	f001 f864 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000b74 	.word	0x20000b74
 80016bc:	40023000 	.word	0x40023000

080016c0 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80016c4:	4b16      	ldr	r3, [pc, #88]	; (8001720 <MX_DCMI_Init+0x60>)
 80016c6:	4a17      	ldr	r2, [pc, #92]	; (8001724 <MX_DCMI_Init+0x64>)
 80016c8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <MX_DCMI_Init+0x60>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <MX_DCMI_Init+0x60>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80016d6:	4b12      	ldr	r3, [pc, #72]	; (8001720 <MX_DCMI_Init+0x60>)
 80016d8:	2200      	movs	r2, #0
 80016da:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80016dc:	4b10      	ldr	r3, [pc, #64]	; (8001720 <MX_DCMI_Init+0x60>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <MX_DCMI_Init+0x60>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80016e8:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <MX_DCMI_Init+0x60>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <MX_DCMI_Init+0x60>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80016f4:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <MX_DCMI_Init+0x60>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_DCMI_Init+0x60>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <MX_DCMI_Init+0x60>)
 8001702:	2200      	movs	r2, #0
 8001704:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <MX_DCMI_Init+0x60>)
 8001708:	2200      	movs	r2, #0
 800170a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800170c:	4804      	ldr	r0, [pc, #16]	; (8001720 <MX_DCMI_Init+0x60>)
 800170e:	f002 fcef 	bl	80040f0 <HAL_DCMI_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001718:	f001 f830 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000da4 	.word	0x20000da4
 8001724:	50050000 	.word	0x50050000

08001728 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <MX_DMA2D_Init+0x5c>)
 800172e:	4a16      	ldr	r2, [pc, #88]	; (8001788 <MX_DMA2D_Init+0x60>)
 8001730:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <MX_DMA2D_Init+0x5c>)
 8001734:	2200      	movs	r2, #0
 8001736:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <MX_DMA2D_Init+0x5c>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_DMA2D_Init+0x5c>)
 8001740:	2200      	movs	r2, #0
 8001742:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <MX_DMA2D_Init+0x5c>)
 8001746:	2200      	movs	r2, #0
 8001748:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_DMA2D_Init+0x5c>)
 800174c:	2200      	movs	r2, #0
 800174e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_DMA2D_Init+0x5c>)
 8001752:	2200      	movs	r2, #0
 8001754:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <MX_DMA2D_Init+0x5c>)
 8001758:	2200      	movs	r2, #0
 800175a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800175c:	4809      	ldr	r0, [pc, #36]	; (8001784 <MX_DMA2D_Init+0x5c>)
 800175e:	f002 fd41 	bl	80041e4 <HAL_DMA2D_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001768:	f001 f808 	bl	800277c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800176c:	2101      	movs	r1, #1
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_DMA2D_Init+0x5c>)
 8001770:	f002 fe92 	bl	8004498 <HAL_DMA2D_ConfigLayer>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800177a:	f000 ffff 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000f68 	.word	0x20000f68
 8001788:	4002b000 	.word	0x4002b000

0800178c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <MX_I2C1_Init+0x74>)
 8001792:	4a1c      	ldr	r2, [pc, #112]	; (8001804 <MX_I2C1_Init+0x78>)
 8001794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001796:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <MX_I2C1_Init+0x74>)
 8001798:	4a1b      	ldr	r2, [pc, #108]	; (8001808 <MX_I2C1_Init+0x7c>)
 800179a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800179c:	4b18      	ldr	r3, [pc, #96]	; (8001800 <MX_I2C1_Init+0x74>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <MX_I2C1_Init+0x74>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a8:	4b15      	ldr	r3, [pc, #84]	; (8001800 <MX_I2C1_Init+0x74>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017ae:	4b14      	ldr	r3, [pc, #80]	; (8001800 <MX_I2C1_Init+0x74>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <MX_I2C1_Init+0x74>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <MX_I2C1_Init+0x74>)
 80017bc:	2200      	movs	r2, #0
 80017be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <MX_I2C1_Init+0x74>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017c6:	480e      	ldr	r0, [pc, #56]	; (8001800 <MX_I2C1_Init+0x74>)
 80017c8:	f004 fe54 	bl	8006474 <HAL_I2C_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017d2:	f000 ffd3 	bl	800277c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017d6:	2100      	movs	r1, #0
 80017d8:	4809      	ldr	r0, [pc, #36]	; (8001800 <MX_I2C1_Init+0x74>)
 80017da:	f004 fedb 	bl	8006594 <HAL_I2CEx_ConfigAnalogFilter>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017e4:	f000 ffca 	bl	800277c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017e8:	2100      	movs	r1, #0
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_I2C1_Init+0x74>)
 80017ec:	f004 ff1d 	bl	800662a <HAL_I2CEx_ConfigDigitalFilter>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017f6:	f000 ffc1 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000b28 	.word	0x20000b28
 8001804:	40005400 	.word	0x40005400
 8001808:	00c0eaff 	.word	0x00c0eaff

0800180c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001810:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <MX_I2C3_Init+0x74>)
 8001812:	4a1c      	ldr	r2, [pc, #112]	; (8001884 <MX_I2C3_Init+0x78>)
 8001814:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <MX_I2C3_Init+0x74>)
 8001818:	4a1b      	ldr	r2, [pc, #108]	; (8001888 <MX_I2C3_Init+0x7c>)
 800181a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800181c:	4b18      	ldr	r3, [pc, #96]	; (8001880 <MX_I2C3_Init+0x74>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <MX_I2C3_Init+0x74>)
 8001824:	2201      	movs	r2, #1
 8001826:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <MX_I2C3_Init+0x74>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800182e:	4b14      	ldr	r3, [pc, #80]	; (8001880 <MX_I2C3_Init+0x74>)
 8001830:	2200      	movs	r2, #0
 8001832:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <MX_I2C3_Init+0x74>)
 8001836:	2200      	movs	r2, #0
 8001838:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <MX_I2C3_Init+0x74>)
 800183c:	2200      	movs	r2, #0
 800183e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <MX_I2C3_Init+0x74>)
 8001842:	2200      	movs	r2, #0
 8001844:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001846:	480e      	ldr	r0, [pc, #56]	; (8001880 <MX_I2C3_Init+0x74>)
 8001848:	f004 fe14 	bl	8006474 <HAL_I2C_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001852:	f000 ff93 	bl	800277c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001856:	2100      	movs	r1, #0
 8001858:	4809      	ldr	r0, [pc, #36]	; (8001880 <MX_I2C3_Init+0x74>)
 800185a:	f004 fe9b 	bl	8006594 <HAL_I2CEx_ConfigAnalogFilter>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001864:	f000 ff8a 	bl	800277c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001868:	2100      	movs	r1, #0
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_I2C3_Init+0x74>)
 800186c:	f004 fedd 	bl	800662a <HAL_I2CEx_ConfigDigitalFilter>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001876:	f000 ff81 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200009c0 	.word	0x200009c0
 8001884:	40005c00 	.word	0x40005c00
 8001888:	00c0eaff 	.word	0x00c0eaff

0800188c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08e      	sub	sp, #56	; 0x38
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	2234      	movs	r2, #52	; 0x34
 8001896:	2100      	movs	r1, #0
 8001898:	4618      	mov	r0, r3
 800189a:	f010 f8b5 	bl	8011a08 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800189e:	4b3a      	ldr	r3, [pc, #232]	; (8001988 <MX_LTDC_Init+0xfc>)
 80018a0:	4a3a      	ldr	r2, [pc, #232]	; (800198c <MX_LTDC_Init+0x100>)
 80018a2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80018a4:	4b38      	ldr	r3, [pc, #224]	; (8001988 <MX_LTDC_Init+0xfc>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80018aa:	4b37      	ldr	r3, [pc, #220]	; (8001988 <MX_LTDC_Init+0xfc>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80018b0:	4b35      	ldr	r3, [pc, #212]	; (8001988 <MX_LTDC_Init+0xfc>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80018b6:	4b34      	ldr	r3, [pc, #208]	; (8001988 <MX_LTDC_Init+0xfc>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80018bc:	4b32      	ldr	r3, [pc, #200]	; (8001988 <MX_LTDC_Init+0xfc>)
 80018be:	2228      	movs	r2, #40	; 0x28
 80018c0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80018c2:	4b31      	ldr	r3, [pc, #196]	; (8001988 <MX_LTDC_Init+0xfc>)
 80018c4:	2209      	movs	r2, #9
 80018c6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80018c8:	4b2f      	ldr	r3, [pc, #188]	; (8001988 <MX_LTDC_Init+0xfc>)
 80018ca:	2235      	movs	r2, #53	; 0x35
 80018cc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80018ce:	4b2e      	ldr	r3, [pc, #184]	; (8001988 <MX_LTDC_Init+0xfc>)
 80018d0:	220b      	movs	r2, #11
 80018d2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80018d4:	4b2c      	ldr	r3, [pc, #176]	; (8001988 <MX_LTDC_Init+0xfc>)
 80018d6:	f240 2215 	movw	r2, #533	; 0x215
 80018da:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80018dc:	4b2a      	ldr	r3, [pc, #168]	; (8001988 <MX_LTDC_Init+0xfc>)
 80018de:	f240 121b 	movw	r2, #283	; 0x11b
 80018e2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80018e4:	4b28      	ldr	r3, [pc, #160]	; (8001988 <MX_LTDC_Init+0xfc>)
 80018e6:	f240 2235 	movw	r2, #565	; 0x235
 80018ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80018ec:	4b26      	ldr	r3, [pc, #152]	; (8001988 <MX_LTDC_Init+0xfc>)
 80018ee:	f240 121d 	movw	r2, #285	; 0x11d
 80018f2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80018f4:	4b24      	ldr	r3, [pc, #144]	; (8001988 <MX_LTDC_Init+0xfc>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80018fc:	4b22      	ldr	r3, [pc, #136]	; (8001988 <MX_LTDC_Init+0xfc>)
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001904:	4b20      	ldr	r3, [pc, #128]	; (8001988 <MX_LTDC_Init+0xfc>)
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800190c:	481e      	ldr	r0, [pc, #120]	; (8001988 <MX_LTDC_Init+0xfc>)
 800190e:	f004 fed9 	bl	80066c4 <HAL_LTDC_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001918:	f000 ff30 	bl	800277c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001920:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001924:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800192a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800192e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001930:	2302      	movs	r3, #2
 8001932:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001934:	23ff      	movs	r3, #255	; 0xff
 8001936:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800193c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001940:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001942:	2307      	movs	r3, #7
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001946:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800194c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001952:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001956:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	2200      	movs	r2, #0
 800196e:	4619      	mov	r1, r3
 8001970:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_LTDC_Init+0xfc>)
 8001972:	f005 f839 	bl	80069e8 <HAL_LTDC_ConfigLayer>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800197c:	f000 fefe 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	3738      	adds	r7, #56	; 0x38
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000cb4 	.word	0x20000cb4
 800198c:	40016800 	.word	0x40016800

08001990 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <MX_QUADSPI_Init+0x50>)
 8001996:	4a13      	ldr	r2, [pc, #76]	; (80019e4 <MX_QUADSPI_Init+0x54>)
 8001998:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <MX_QUADSPI_Init+0x50>)
 800199c:	2201      	movs	r2, #1
 800199e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <MX_QUADSPI_Init+0x50>)
 80019a2:	2204      	movs	r2, #4
 80019a4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <MX_QUADSPI_Init+0x50>)
 80019a8:	2210      	movs	r2, #16
 80019aa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <MX_QUADSPI_Init+0x50>)
 80019ae:	2218      	movs	r2, #24
 80019b0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <MX_QUADSPI_Init+0x50>)
 80019b4:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80019b8:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <MX_QUADSPI_Init+0x50>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80019c0:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <MX_QUADSPI_Init+0x50>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <MX_QUADSPI_Init+0x50>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80019cc:	4804      	ldr	r0, [pc, #16]	; (80019e0 <MX_QUADSPI_Init+0x50>)
 80019ce:	f005 fa43 	bl	8006e58 <HAL_QSPI_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80019d8:	f000 fed0 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	200010bc 	.word	0x200010bc
 80019e4:	a0001000 	.word	0xa0001000

080019e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b092      	sub	sp, #72	; 0x48
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80019ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]
 80019fc:	611a      	str	r2, [r3, #16]
 80019fe:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001a00:	2300      	movs	r3, #0
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001a04:	463b      	mov	r3, r7
 8001a06:	222c      	movs	r2, #44	; 0x2c
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f00f fffc 	bl	8011a08 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a10:	4b46      	ldr	r3, [pc, #280]	; (8001b2c <MX_RTC_Init+0x144>)
 8001a12:	4a47      	ldr	r2, [pc, #284]	; (8001b30 <MX_RTC_Init+0x148>)
 8001a14:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a16:	4b45      	ldr	r3, [pc, #276]	; (8001b2c <MX_RTC_Init+0x144>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a1c:	4b43      	ldr	r3, [pc, #268]	; (8001b2c <MX_RTC_Init+0x144>)
 8001a1e:	227f      	movs	r2, #127	; 0x7f
 8001a20:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a22:	4b42      	ldr	r3, [pc, #264]	; (8001b2c <MX_RTC_Init+0x144>)
 8001a24:	22ff      	movs	r2, #255	; 0xff
 8001a26:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a28:	4b40      	ldr	r3, [pc, #256]	; (8001b2c <MX_RTC_Init+0x144>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a2e:	4b3f      	ldr	r3, [pc, #252]	; (8001b2c <MX_RTC_Init+0x144>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a34:	4b3d      	ldr	r3, [pc, #244]	; (8001b2c <MX_RTC_Init+0x144>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a3a:	483c      	ldr	r0, [pc, #240]	; (8001b2c <MX_RTC_Init+0x144>)
 8001a3c:	f006 fc7c 	bl	8008338 <HAL_RTC_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001a46:	f000 fe99 	bl	800277c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a60:	2300      	movs	r3, #0
 8001a62:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a68:	2201      	movs	r2, #1
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	482f      	ldr	r0, [pc, #188]	; (8001b2c <MX_RTC_Init+0x144>)
 8001a6e:	f006 fcf5 	bl	800845c <HAL_RTC_SetTime>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001a78:	f000 fe80 	bl	800277c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001a82:	2301      	movs	r3, #1
 8001a84:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001a94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a98:	2201      	movs	r2, #1
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4823      	ldr	r0, [pc, #140]	; (8001b2c <MX_RTC_Init+0x144>)
 8001a9e:	f006 fd9b 	bl	80085d8 <HAL_RTC_SetDate>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001aa8:	f000 fe68 	bl	800277c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ada:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001adc:	463b      	mov	r3, r7
 8001ade:	2201      	movs	r2, #1
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4812      	ldr	r0, [pc, #72]	; (8001b2c <MX_RTC_Init+0x144>)
 8001ae4:	f006 fe20 	bl	8008728 <HAL_RTC_SetAlarm>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001aee:	f000 fe45 	bl	800277c <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001af2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001af8:	463b      	mov	r3, r7
 8001afa:	2201      	movs	r2, #1
 8001afc:	4619      	mov	r1, r3
 8001afe:	480b      	ldr	r0, [pc, #44]	; (8001b2c <MX_RTC_Init+0x144>)
 8001b00:	f006 fe12 	bl	8008728 <HAL_RTC_SetAlarm>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001b0a:	f000 fe37 	bl	800277c <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001b0e:	2202      	movs	r2, #2
 8001b10:	2100      	movs	r1, #0
 8001b12:	4806      	ldr	r0, [pc, #24]	; (8001b2c <MX_RTC_Init+0x144>)
 8001b14:	f006 ff92 	bl	8008a3c <HAL_RTCEx_SetTimeStamp>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001b1e:	f000 fe2d 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b22:	bf00      	nop
 8001b24:	3748      	adds	r7, #72	; 0x48
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000e78 	.word	0x20000e78
 8001b30:	40002800 	.word	0x40002800

08001b34 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001b38:	4b4d      	ldr	r3, [pc, #308]	; (8001c70 <MX_SAI2_Init+0x13c>)
 8001b3a:	4a4e      	ldr	r2, [pc, #312]	; (8001c74 <MX_SAI2_Init+0x140>)
 8001b3c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001b3e:	4b4c      	ldr	r3, [pc, #304]	; (8001c70 <MX_SAI2_Init+0x13c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001b44:	4b4a      	ldr	r3, [pc, #296]	; (8001c70 <MX_SAI2_Init+0x13c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001b4a:	4b49      	ldr	r3, [pc, #292]	; (8001c70 <MX_SAI2_Init+0x13c>)
 8001b4c:	2240      	movs	r2, #64	; 0x40
 8001b4e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001b50:	4b47      	ldr	r3, [pc, #284]	; (8001c70 <MX_SAI2_Init+0x13c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001b56:	4b46      	ldr	r3, [pc, #280]	; (8001c70 <MX_SAI2_Init+0x13c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001b5c:	4b44      	ldr	r3, [pc, #272]	; (8001c70 <MX_SAI2_Init+0x13c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001b62:	4b43      	ldr	r3, [pc, #268]	; (8001c70 <MX_SAI2_Init+0x13c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001b68:	4b41      	ldr	r3, [pc, #260]	; (8001c70 <MX_SAI2_Init+0x13c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001b6e:	4b40      	ldr	r3, [pc, #256]	; (8001c70 <MX_SAI2_Init+0x13c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001b74:	4b3e      	ldr	r3, [pc, #248]	; (8001c70 <MX_SAI2_Init+0x13c>)
 8001b76:	4a40      	ldr	r2, [pc, #256]	; (8001c78 <MX_SAI2_Init+0x144>)
 8001b78:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b7a:	4b3d      	ldr	r3, [pc, #244]	; (8001c70 <MX_SAI2_Init+0x13c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b80:	4b3b      	ldr	r3, [pc, #236]	; (8001c70 <MX_SAI2_Init+0x13c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b86:	4b3a      	ldr	r3, [pc, #232]	; (8001c70 <MX_SAI2_Init+0x13c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b8c:	4b38      	ldr	r3, [pc, #224]	; (8001c70 <MX_SAI2_Init+0x13c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001b92:	4b37      	ldr	r3, [pc, #220]	; (8001c70 <MX_SAI2_Init+0x13c>)
 8001b94:	2208      	movs	r2, #8
 8001b96:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001b98:	4b35      	ldr	r3, [pc, #212]	; (8001c70 <MX_SAI2_Init+0x13c>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001b9e:	4b34      	ldr	r3, [pc, #208]	; (8001c70 <MX_SAI2_Init+0x13c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001ba4:	4b32      	ldr	r3, [pc, #200]	; (8001c70 <MX_SAI2_Init+0x13c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001baa:	4b31      	ldr	r3, [pc, #196]	; (8001c70 <MX_SAI2_Init+0x13c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001bb0:	4b2f      	ldr	r3, [pc, #188]	; (8001c70 <MX_SAI2_Init+0x13c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001bb6:	4b2e      	ldr	r3, [pc, #184]	; (8001c70 <MX_SAI2_Init+0x13c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001bbc:	4b2c      	ldr	r3, [pc, #176]	; (8001c70 <MX_SAI2_Init+0x13c>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001bc2:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <MX_SAI2_Init+0x13c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001bc8:	4829      	ldr	r0, [pc, #164]	; (8001c70 <MX_SAI2_Init+0x13c>)
 8001bca:	f006 ff8d 	bl	8008ae8 <HAL_SAI_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001bd4:	f000 fdd2 	bl	800277c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001bd8:	4b28      	ldr	r3, [pc, #160]	; (8001c7c <MX_SAI2_Init+0x148>)
 8001bda:	4a29      	ldr	r2, [pc, #164]	; (8001c80 <MX_SAI2_Init+0x14c>)
 8001bdc:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001bde:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <MX_SAI2_Init+0x148>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001be4:	4b25      	ldr	r3, [pc, #148]	; (8001c7c <MX_SAI2_Init+0x148>)
 8001be6:	2203      	movs	r2, #3
 8001be8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001bea:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <MX_SAI2_Init+0x148>)
 8001bec:	2240      	movs	r2, #64	; 0x40
 8001bee:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001bf0:	4b22      	ldr	r3, [pc, #136]	; (8001c7c <MX_SAI2_Init+0x148>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001bf6:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <MX_SAI2_Init+0x148>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <MX_SAI2_Init+0x148>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001c02:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <MX_SAI2_Init+0x148>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001c08:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <MX_SAI2_Init+0x148>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <MX_SAI2_Init+0x148>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001c14:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <MX_SAI2_Init+0x148>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001c1a:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <MX_SAI2_Init+0x148>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001c20:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <MX_SAI2_Init+0x148>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <MX_SAI2_Init+0x148>)
 8001c28:	2208      	movs	r2, #8
 8001c2a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <MX_SAI2_Init+0x148>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001c32:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <MX_SAI2_Init+0x148>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001c38:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <MX_SAI2_Init+0x148>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001c3e:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <MX_SAI2_Init+0x148>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001c44:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <MX_SAI2_Init+0x148>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001c4a:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <MX_SAI2_Init+0x148>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001c50:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <MX_SAI2_Init+0x148>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <MX_SAI2_Init+0x148>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001c5c:	4807      	ldr	r0, [pc, #28]	; (8001c7c <MX_SAI2_Init+0x148>)
 8001c5e:	f006 ff43 	bl	8008ae8 <HAL_SAI_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001c68:	f000 fd88 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000aa4 	.word	0x20000aa4
 8001c74:	40015c04 	.word	0x40015c04
 8001c78:	0002ee00 	.word	0x0002ee00
 8001c7c:	2000093c 	.word	0x2000093c
 8001c80:	40015c24 	.word	0x40015c24

08001c84 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <MX_SDMMC1_SD_Init+0x38>)
 8001c8a:	4a0d      	ldr	r2, [pc, #52]	; (8001cc0 <MX_SDMMC1_SD_Init+0x3c>)
 8001c8c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <MX_SDMMC1_SD_Init+0x38>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <MX_SDMMC1_SD_Init+0x38>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <MX_SDMMC1_SD_Init+0x38>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <MX_SDMMC1_SD_Init+0x38>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001ca6:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <MX_SDMMC1_SD_Init+0x38>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <MX_SDMMC1_SD_Init+0x38>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001cb2:	bf00      	nop
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	20000b98 	.word	0x20000b98
 8001cc0:	40012c00 	.word	0x40012c00

08001cc4 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001cc8:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <MX_SPDIFRX_Init+0x5c>)
 8001cca:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001cce:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <MX_SPDIFRX_Init+0x5c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <MX_SPDIFRX_Init+0x5c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001cdc:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <MX_SPDIFRX_Init+0x5c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <MX_SPDIFRX_Init+0x5c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <MX_SPDIFRX_Init+0x5c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001cee:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <MX_SPDIFRX_Init+0x5c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <MX_SPDIFRX_Init+0x5c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <MX_SPDIFRX_Init+0x5c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001d00:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <MX_SPDIFRX_Init+0x5c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <MX_SPDIFRX_Init+0x5c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001d0c:	4804      	ldr	r0, [pc, #16]	; (8001d20 <MX_SPDIFRX_Init+0x5c>)
 8001d0e:	f008 fa65 	bl	800a1dc <HAL_SPDIFRX_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001d18:	f000 fd30 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000a58 	.word	0x20000a58

08001d24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b09a      	sub	sp, #104	; 0x68
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
 8001d54:	615a      	str	r2, [r3, #20]
 8001d56:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	222c      	movs	r2, #44	; 0x2c
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f00f fe52 	bl	8011a08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d64:	4b43      	ldr	r3, [pc, #268]	; (8001e74 <MX_TIM1_Init+0x150>)
 8001d66:	4a44      	ldr	r2, [pc, #272]	; (8001e78 <MX_TIM1_Init+0x154>)
 8001d68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d6a:	4b42      	ldr	r3, [pc, #264]	; (8001e74 <MX_TIM1_Init+0x150>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d70:	4b40      	ldr	r3, [pc, #256]	; (8001e74 <MX_TIM1_Init+0x150>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d76:	4b3f      	ldr	r3, [pc, #252]	; (8001e74 <MX_TIM1_Init+0x150>)
 8001d78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <MX_TIM1_Init+0x150>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d84:	4b3b      	ldr	r3, [pc, #236]	; (8001e74 <MX_TIM1_Init+0x150>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8a:	4b3a      	ldr	r3, [pc, #232]	; (8001e74 <MX_TIM1_Init+0x150>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d90:	4838      	ldr	r0, [pc, #224]	; (8001e74 <MX_TIM1_Init+0x150>)
 8001d92:	f008 fa7f 	bl	800a294 <HAL_TIM_Base_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001d9c:	f000 fcee 	bl	800277c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001da6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001daa:	4619      	mov	r1, r3
 8001dac:	4831      	ldr	r0, [pc, #196]	; (8001e74 <MX_TIM1_Init+0x150>)
 8001dae:	f008 fcab 	bl	800a708 <HAL_TIM_ConfigClockSource>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001db8:	f000 fce0 	bl	800277c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001dbc:	482d      	ldr	r0, [pc, #180]	; (8001e74 <MX_TIM1_Init+0x150>)
 8001dbe:	f008 fb31 	bl	800a424 <HAL_TIM_PWM_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001dc8:	f000 fcd8 	bl	800277c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dd8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4825      	ldr	r0, [pc, #148]	; (8001e74 <MX_TIM1_Init+0x150>)
 8001de0:	f009 f8f0 	bl	800afc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001dea:	f000 fcc7 	bl	800277c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dee:	2360      	movs	r3, #96	; 0x60
 8001df0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001df6:	2300      	movs	r3, #0
 8001df8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e02:	2300      	movs	r3, #0
 8001e04:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e06:	2300      	movs	r3, #0
 8001e08:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e0e:	2200      	movs	r2, #0
 8001e10:	4619      	mov	r1, r3
 8001e12:	4818      	ldr	r0, [pc, #96]	; (8001e74 <MX_TIM1_Init+0x150>)
 8001e14:	f008 fb68 	bl	800a4e8 <HAL_TIM_PWM_ConfigChannel>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001e1e:	f000 fcad 	bl	800277c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e3a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e52:	1d3b      	adds	r3, r7, #4
 8001e54:	4619      	mov	r1, r3
 8001e56:	4807      	ldr	r0, [pc, #28]	; (8001e74 <MX_TIM1_Init+0x150>)
 8001e58:	f009 f942 	bl	800b0e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001e62:	f000 fc8b 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e66:	4803      	ldr	r0, [pc, #12]	; (8001e74 <MX_TIM1_Init+0x150>)
 8001e68:	f001 f944 	bl	80030f4 <HAL_TIM_MspPostInit>

}
 8001e6c:	bf00      	nop
 8001e6e:	3768      	adds	r7, #104	; 0x68
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000e98 	.word	0x20000e98
 8001e78:	40010000 	.word	0x40010000

08001e7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08e      	sub	sp, #56	; 0x38
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e90:	f107 031c 	add.w	r3, r7, #28
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
 8001ea8:	611a      	str	r2, [r3, #16]
 8001eaa:	615a      	str	r2, [r3, #20]
 8001eac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001eae:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <MX_TIM2_Init+0xe8>)
 8001eb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eb4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001eb6:	4b2b      	ldr	r3, [pc, #172]	; (8001f64 <MX_TIM2_Init+0xe8>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ebc:	4b29      	ldr	r3, [pc, #164]	; (8001f64 <MX_TIM2_Init+0xe8>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ec2:	4b28      	ldr	r3, [pc, #160]	; (8001f64 <MX_TIM2_Init+0xe8>)
 8001ec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ec8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eca:	4b26      	ldr	r3, [pc, #152]	; (8001f64 <MX_TIM2_Init+0xe8>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed0:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <MX_TIM2_Init+0xe8>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ed6:	4823      	ldr	r0, [pc, #140]	; (8001f64 <MX_TIM2_Init+0xe8>)
 8001ed8:	f008 f9dc 	bl	800a294 <HAL_TIM_Base_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001ee2:	f000 fc4b 	bl	800277c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001eec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	481c      	ldr	r0, [pc, #112]	; (8001f64 <MX_TIM2_Init+0xe8>)
 8001ef4:	f008 fc08 	bl	800a708 <HAL_TIM_ConfigClockSource>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001efe:	f000 fc3d 	bl	800277c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f02:	4818      	ldr	r0, [pc, #96]	; (8001f64 <MX_TIM2_Init+0xe8>)
 8001f04:	f008 fa8e 	bl	800a424 <HAL_TIM_PWM_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001f0e:	f000 fc35 	bl	800277c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f1a:	f107 031c 	add.w	r3, r7, #28
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4810      	ldr	r0, [pc, #64]	; (8001f64 <MX_TIM2_Init+0xe8>)
 8001f22:	f009 f84f 	bl	800afc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001f2c:	f000 fc26 	bl	800277c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f30:	2360      	movs	r3, #96	; 0x60
 8001f32:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f40:	463b      	mov	r3, r7
 8001f42:	2200      	movs	r2, #0
 8001f44:	4619      	mov	r1, r3
 8001f46:	4807      	ldr	r0, [pc, #28]	; (8001f64 <MX_TIM2_Init+0xe8>)
 8001f48:	f008 face 	bl	800a4e8 <HAL_TIM_PWM_ConfigChannel>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001f52:	f000 fc13 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f56:	4803      	ldr	r0, [pc, #12]	; (8001f64 <MX_TIM2_Init+0xe8>)
 8001f58:	f001 f8cc 	bl	80030f4 <HAL_TIM_MspPostInit>

}
 8001f5c:	bf00      	nop
 8001f5e:	3738      	adds	r7, #56	; 0x38
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20000fa8 	.word	0x20000fa8

08001f68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08e      	sub	sp, #56	; 0x38
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	609a      	str	r2, [r3, #8]
 8001f7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f7c:	f107 031c 	add.w	r3, r7, #28
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f88:	463b      	mov	r3, r7
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	60da      	str	r2, [r3, #12]
 8001f94:	611a      	str	r2, [r3, #16]
 8001f96:	615a      	str	r2, [r3, #20]
 8001f98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f9a:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <MX_TIM3_Init+0xe8>)
 8001f9c:	4a2d      	ldr	r2, [pc, #180]	; (8002054 <MX_TIM3_Init+0xec>)
 8001f9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001fa0:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <MX_TIM3_Init+0xe8>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa6:	4b2a      	ldr	r3, [pc, #168]	; (8002050 <MX_TIM3_Init+0xe8>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001fac:	4b28      	ldr	r3, [pc, #160]	; (8002050 <MX_TIM3_Init+0xe8>)
 8001fae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fb2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb4:	4b26      	ldr	r3, [pc, #152]	; (8002050 <MX_TIM3_Init+0xe8>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fba:	4b25      	ldr	r3, [pc, #148]	; (8002050 <MX_TIM3_Init+0xe8>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fc0:	4823      	ldr	r0, [pc, #140]	; (8002050 <MX_TIM3_Init+0xe8>)
 8001fc2:	f008 f967 	bl	800a294 <HAL_TIM_Base_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001fcc:	f000 fbd6 	bl	800277c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fda:	4619      	mov	r1, r3
 8001fdc:	481c      	ldr	r0, [pc, #112]	; (8002050 <MX_TIM3_Init+0xe8>)
 8001fde:	f008 fb93 	bl	800a708 <HAL_TIM_ConfigClockSource>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001fe8:	f000 fbc8 	bl	800277c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fec:	4818      	ldr	r0, [pc, #96]	; (8002050 <MX_TIM3_Init+0xe8>)
 8001fee:	f008 fa19 	bl	800a424 <HAL_TIM_PWM_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001ff8:	f000 fbc0 	bl	800277c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002000:	2300      	movs	r3, #0
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002004:	f107 031c 	add.w	r3, r7, #28
 8002008:	4619      	mov	r1, r3
 800200a:	4811      	ldr	r0, [pc, #68]	; (8002050 <MX_TIM3_Init+0xe8>)
 800200c:	f008 ffda 	bl	800afc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002016:	f000 fbb1 	bl	800277c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800201a:	2360      	movs	r3, #96	; 0x60
 800201c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800202a:	463b      	mov	r3, r7
 800202c:	2200      	movs	r2, #0
 800202e:	4619      	mov	r1, r3
 8002030:	4807      	ldr	r0, [pc, #28]	; (8002050 <MX_TIM3_Init+0xe8>)
 8002032:	f008 fa59 	bl	800a4e8 <HAL_TIM_PWM_ConfigChannel>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800203c:	f000 fb9e 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002040:	4803      	ldr	r0, [pc, #12]	; (8002050 <MX_TIM3_Init+0xe8>)
 8002042:	f001 f857 	bl	80030f4 <HAL_TIM_MspPostInit>

}
 8002046:	bf00      	nop
 8002048:	3738      	adds	r7, #56	; 0x38
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000c68 	.word	0x20000c68
 8002054:	40000400 	.word	0x40000400

08002058 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08e      	sub	sp, #56	; 0x38
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800205e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]
 800206a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002078:	463b      	mov	r3, r7
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]
 8002084:	611a      	str	r2, [r3, #16]
 8002086:	615a      	str	r2, [r3, #20]
 8002088:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800208a:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <MX_TIM5_Init+0xe8>)
 800208c:	4a2d      	ldr	r2, [pc, #180]	; (8002144 <MX_TIM5_Init+0xec>)
 800208e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002090:	4b2b      	ldr	r3, [pc, #172]	; (8002140 <MX_TIM5_Init+0xe8>)
 8002092:	2200      	movs	r2, #0
 8002094:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002096:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <MX_TIM5_Init+0xe8>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800209c:	4b28      	ldr	r3, [pc, #160]	; (8002140 <MX_TIM5_Init+0xe8>)
 800209e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020a2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a4:	4b26      	ldr	r3, [pc, #152]	; (8002140 <MX_TIM5_Init+0xe8>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020aa:	4b25      	ldr	r3, [pc, #148]	; (8002140 <MX_TIM5_Init+0xe8>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80020b0:	4823      	ldr	r0, [pc, #140]	; (8002140 <MX_TIM5_Init+0xe8>)
 80020b2:	f008 f8ef 	bl	800a294 <HAL_TIM_Base_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80020bc:	f000 fb5e 	bl	800277c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80020c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020ca:	4619      	mov	r1, r3
 80020cc:	481c      	ldr	r0, [pc, #112]	; (8002140 <MX_TIM5_Init+0xe8>)
 80020ce:	f008 fb1b 	bl	800a708 <HAL_TIM_ConfigClockSource>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80020d8:	f000 fb50 	bl	800277c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80020dc:	4818      	ldr	r0, [pc, #96]	; (8002140 <MX_TIM5_Init+0xe8>)
 80020de:	f008 f9a1 	bl	800a424 <HAL_TIM_PWM_Init>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80020e8:	f000 fb48 	bl	800277c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020f4:	f107 031c 	add.w	r3, r7, #28
 80020f8:	4619      	mov	r1, r3
 80020fa:	4811      	ldr	r0, [pc, #68]	; (8002140 <MX_TIM5_Init+0xe8>)
 80020fc:	f008 ff62 	bl	800afc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002106:	f000 fb39 	bl	800277c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800210a:	2360      	movs	r3, #96	; 0x60
 800210c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002112:	2300      	movs	r3, #0
 8002114:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800211a:	463b      	mov	r3, r7
 800211c:	220c      	movs	r2, #12
 800211e:	4619      	mov	r1, r3
 8002120:	4807      	ldr	r0, [pc, #28]	; (8002140 <MX_TIM5_Init+0xe8>)
 8002122:	f008 f9e1 	bl	800a4e8 <HAL_TIM_PWM_ConfigChannel>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800212c:	f000 fb26 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002130:	4803      	ldr	r0, [pc, #12]	; (8002140 <MX_TIM5_Init+0xe8>)
 8002132:	f000 ffdf 	bl	80030f4 <HAL_TIM_MspPostInit>

}
 8002136:	bf00      	nop
 8002138:	3738      	adds	r7, #56	; 0x38
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000c1c 	.word	0x20000c1c
 8002144:	40000c00 	.word	0x40000c00

08002148 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800214e:	f107 0310 	add.w	r3, r7, #16
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002166:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <MX_TIM8_Init+0xa0>)
 8002168:	4a20      	ldr	r2, [pc, #128]	; (80021ec <MX_TIM8_Init+0xa4>)
 800216a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800216c:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <MX_TIM8_Init+0xa0>)
 800216e:	2200      	movs	r2, #0
 8002170:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002172:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <MX_TIM8_Init+0xa0>)
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002178:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <MX_TIM8_Init+0xa0>)
 800217a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800217e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002180:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <MX_TIM8_Init+0xa0>)
 8002182:	2200      	movs	r2, #0
 8002184:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002186:	4b18      	ldr	r3, [pc, #96]	; (80021e8 <MX_TIM8_Init+0xa0>)
 8002188:	2200      	movs	r2, #0
 800218a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800218c:	4b16      	ldr	r3, [pc, #88]	; (80021e8 <MX_TIM8_Init+0xa0>)
 800218e:	2200      	movs	r2, #0
 8002190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002192:	4815      	ldr	r0, [pc, #84]	; (80021e8 <MX_TIM8_Init+0xa0>)
 8002194:	f008 f87e 	bl	800a294 <HAL_TIM_Base_Init>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800219e:	f000 faed 	bl	800277c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80021a8:	f107 0310 	add.w	r3, r7, #16
 80021ac:	4619      	mov	r1, r3
 80021ae:	480e      	ldr	r0, [pc, #56]	; (80021e8 <MX_TIM8_Init+0xa0>)
 80021b0:	f008 faaa 	bl	800a708 <HAL_TIM_ConfigClockSource>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80021ba:	f000 fadf 	bl	800277c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	4619      	mov	r1, r3
 80021ce:	4806      	ldr	r0, [pc, #24]	; (80021e8 <MX_TIM8_Init+0xa0>)
 80021d0:	f008 fef8 	bl	800afc4 <HAL_TIMEx_MasterConfigSynchronization>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80021da:	f000 facf 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80021de:	bf00      	nop
 80021e0:	3720      	adds	r7, #32
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000a0c 	.word	0x20000a0c
 80021ec:	40010400 	.word	0x40010400

080021f0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021f6:	463b      	mov	r3, r7
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002202:	4b16      	ldr	r3, [pc, #88]	; (800225c <MX_TIM12_Init+0x6c>)
 8002204:	4a16      	ldr	r2, [pc, #88]	; (8002260 <MX_TIM12_Init+0x70>)
 8002206:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 80 - 1;
 8002208:	4b14      	ldr	r3, [pc, #80]	; (800225c <MX_TIM12_Init+0x6c>)
 800220a:	224f      	movs	r2, #79	; 0x4f
 800220c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800220e:	4b13      	ldr	r3, [pc, #76]	; (800225c <MX_TIM12_Init+0x6c>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <MX_TIM12_Init+0x6c>)
 8002216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800221a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <MX_TIM12_Init+0x6c>)
 800221e:	2200      	movs	r2, #0
 8002220:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <MX_TIM12_Init+0x6c>)
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002228:	480c      	ldr	r0, [pc, #48]	; (800225c <MX_TIM12_Init+0x6c>)
 800222a:	f008 f833 	bl	800a294 <HAL_TIM_Base_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8002234:	f000 faa2 	bl	800277c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800223c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800223e:	463b      	mov	r3, r7
 8002240:	4619      	mov	r1, r3
 8002242:	4806      	ldr	r0, [pc, #24]	; (800225c <MX_TIM12_Init+0x6c>)
 8002244:	f008 fa60 	bl	800a708 <HAL_TIM_ConfigClockSource>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 800224e:	f000 fa95 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000ff4 	.word	0x20000ff4
 8002260:	40001800 	.word	0x40001800

08002264 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002268:	4b14      	ldr	r3, [pc, #80]	; (80022bc <MX_USART1_UART_Init+0x58>)
 800226a:	4a15      	ldr	r2, [pc, #84]	; (80022c0 <MX_USART1_UART_Init+0x5c>)
 800226c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800226e:	4b13      	ldr	r3, [pc, #76]	; (80022bc <MX_USART1_UART_Init+0x58>)
 8002270:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002274:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002276:	4b11      	ldr	r3, [pc, #68]	; (80022bc <MX_USART1_UART_Init+0x58>)
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800227c:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <MX_USART1_UART_Init+0x58>)
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002282:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <MX_USART1_UART_Init+0x58>)
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <MX_USART1_UART_Init+0x58>)
 800228a:	220c      	movs	r2, #12
 800228c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800228e:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <MX_USART1_UART_Init+0x58>)
 8002290:	2200      	movs	r2, #0
 8002292:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002294:	4b09      	ldr	r3, [pc, #36]	; (80022bc <MX_USART1_UART_Init+0x58>)
 8002296:	2200      	movs	r2, #0
 8002298:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800229a:	4b08      	ldr	r3, [pc, #32]	; (80022bc <MX_USART1_UART_Init+0x58>)
 800229c:	2200      	movs	r2, #0
 800229e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <MX_USART1_UART_Init+0x58>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022a6:	4805      	ldr	r0, [pc, #20]	; (80022bc <MX_USART1_UART_Init+0x58>)
 80022a8:	f008 ff98 	bl	800b1dc <HAL_UART_Init>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80022b2:	f000 fa63 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000df4 	.word	0x20000df4
 80022c0:	40011000 	.word	0x40011000

080022c4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80022c8:	4b14      	ldr	r3, [pc, #80]	; (800231c <MX_USART6_UART_Init+0x58>)
 80022ca:	4a15      	ldr	r2, [pc, #84]	; (8002320 <MX_USART6_UART_Init+0x5c>)
 80022cc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80022ce:	4b13      	ldr	r3, [pc, #76]	; (800231c <MX_USART6_UART_Init+0x58>)
 80022d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022d4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <MX_USART6_UART_Init+0x58>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80022dc:	4b0f      	ldr	r3, [pc, #60]	; (800231c <MX_USART6_UART_Init+0x58>)
 80022de:	2200      	movs	r2, #0
 80022e0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80022e2:	4b0e      	ldr	r3, [pc, #56]	; (800231c <MX_USART6_UART_Init+0x58>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <MX_USART6_UART_Init+0x58>)
 80022ea:	220c      	movs	r2, #12
 80022ec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <MX_USART6_UART_Init+0x58>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f4:	4b09      	ldr	r3, [pc, #36]	; (800231c <MX_USART6_UART_Init+0x58>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022fa:	4b08      	ldr	r3, [pc, #32]	; (800231c <MX_USART6_UART_Init+0x58>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <MX_USART6_UART_Init+0x58>)
 8002302:	2200      	movs	r2, #0
 8002304:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002306:	4805      	ldr	r0, [pc, #20]	; (800231c <MX_USART6_UART_Init+0x58>)
 8002308:	f008 ff68 	bl	800b1dc <HAL_UART_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002312:	f000 fa33 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000ee4 	.word	0x20000ee4
 8002320:	40011400 	.word	0x40011400

08002324 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800232a:	1d3b      	adds	r3, r7, #4
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
 8002338:	615a      	str	r2, [r3, #20]
 800233a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800233c:	4b1f      	ldr	r3, [pc, #124]	; (80023bc <MX_FMC_Init+0x98>)
 800233e:	4a20      	ldr	r2, [pc, #128]	; (80023c0 <MX_FMC_Init+0x9c>)
 8002340:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002342:	4b1e      	ldr	r3, [pc, #120]	; (80023bc <MX_FMC_Init+0x98>)
 8002344:	2200      	movs	r2, #0
 8002346:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002348:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <MX_FMC_Init+0x98>)
 800234a:	2200      	movs	r2, #0
 800234c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800234e:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <MX_FMC_Init+0x98>)
 8002350:	2204      	movs	r2, #4
 8002352:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <MX_FMC_Init+0x98>)
 8002356:	2210      	movs	r2, #16
 8002358:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800235a:	4b18      	ldr	r3, [pc, #96]	; (80023bc <MX_FMC_Init+0x98>)
 800235c:	2240      	movs	r2, #64	; 0x40
 800235e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002360:	4b16      	ldr	r3, [pc, #88]	; (80023bc <MX_FMC_Init+0x98>)
 8002362:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002366:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002368:	4b14      	ldr	r3, [pc, #80]	; (80023bc <MX_FMC_Init+0x98>)
 800236a:	2200      	movs	r2, #0
 800236c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800236e:	4b13      	ldr	r3, [pc, #76]	; (80023bc <MX_FMC_Init+0x98>)
 8002370:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002374:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002376:	4b11      	ldr	r3, [pc, #68]	; (80023bc <MX_FMC_Init+0x98>)
 8002378:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800237c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800237e:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <MX_FMC_Init+0x98>)
 8002380:	2200      	movs	r2, #0
 8002382:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002384:	2302      	movs	r3, #2
 8002386:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002388:	2307      	movs	r3, #7
 800238a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800238c:	2304      	movs	r3, #4
 800238e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002390:	2307      	movs	r3, #7
 8002392:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002394:	2303      	movs	r3, #3
 8002396:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002398:	2302      	movs	r3, #2
 800239a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800239c:	2302      	movs	r3, #2
 800239e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	4619      	mov	r1, r3
 80023a4:	4805      	ldr	r0, [pc, #20]	; (80023bc <MX_FMC_Init+0x98>)
 80023a6:	f007 fee4 	bl	800a172 <HAL_SDRAM_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80023b0:	f000 f9e4 	bl	800277c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80023b4:	bf00      	nop
 80023b6:	3720      	adds	r7, #32
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20001040 	.word	0x20001040
 80023c0:	a0000140 	.word	0xa0000140

080023c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b090      	sub	sp, #64	; 0x40
 80023c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	60da      	str	r2, [r3, #12]
 80023d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023da:	4baf      	ldr	r3, [pc, #700]	; (8002698 <MX_GPIO_Init+0x2d4>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4aae      	ldr	r2, [pc, #696]	; (8002698 <MX_GPIO_Init+0x2d4>)
 80023e0:	f043 0310 	orr.w	r3, r3, #16
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4bac      	ldr	r3, [pc, #688]	; (8002698 <MX_GPIO_Init+0x2d4>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0310 	and.w	r3, r3, #16
 80023ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80023f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80023f2:	4ba9      	ldr	r3, [pc, #676]	; (8002698 <MX_GPIO_Init+0x2d4>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4aa8      	ldr	r2, [pc, #672]	; (8002698 <MX_GPIO_Init+0x2d4>)
 80023f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4ba6      	ldr	r3, [pc, #664]	; (8002698 <MX_GPIO_Init+0x2d4>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800240a:	4ba3      	ldr	r3, [pc, #652]	; (8002698 <MX_GPIO_Init+0x2d4>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	4aa2      	ldr	r2, [pc, #648]	; (8002698 <MX_GPIO_Init+0x2d4>)
 8002410:	f043 0302 	orr.w	r3, r3, #2
 8002414:	6313      	str	r3, [r2, #48]	; 0x30
 8002416:	4ba0      	ldr	r3, [pc, #640]	; (8002698 <MX_GPIO_Init+0x2d4>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	623b      	str	r3, [r7, #32]
 8002420:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002422:	4b9d      	ldr	r3, [pc, #628]	; (8002698 <MX_GPIO_Init+0x2d4>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	4a9c      	ldr	r2, [pc, #624]	; (8002698 <MX_GPIO_Init+0x2d4>)
 8002428:	f043 0308 	orr.w	r3, r3, #8
 800242c:	6313      	str	r3, [r2, #48]	; 0x30
 800242e:	4b9a      	ldr	r3, [pc, #616]	; (8002698 <MX_GPIO_Init+0x2d4>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	61fb      	str	r3, [r7, #28]
 8002438:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800243a:	4b97      	ldr	r3, [pc, #604]	; (8002698 <MX_GPIO_Init+0x2d4>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a96      	ldr	r2, [pc, #600]	; (8002698 <MX_GPIO_Init+0x2d4>)
 8002440:	f043 0304 	orr.w	r3, r3, #4
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b94      	ldr	r3, [pc, #592]	; (8002698 <MX_GPIO_Init+0x2d4>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	61bb      	str	r3, [r7, #24]
 8002450:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002452:	4b91      	ldr	r3, [pc, #580]	; (8002698 <MX_GPIO_Init+0x2d4>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	4a90      	ldr	r2, [pc, #576]	; (8002698 <MX_GPIO_Init+0x2d4>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	6313      	str	r3, [r2, #48]	; 0x30
 800245e:	4b8e      	ldr	r3, [pc, #568]	; (8002698 <MX_GPIO_Init+0x2d4>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800246a:	4b8b      	ldr	r3, [pc, #556]	; (8002698 <MX_GPIO_Init+0x2d4>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a8a      	ldr	r2, [pc, #552]	; (8002698 <MX_GPIO_Init+0x2d4>)
 8002470:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b88      	ldr	r3, [pc, #544]	; (8002698 <MX_GPIO_Init+0x2d4>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002482:	4b85      	ldr	r3, [pc, #532]	; (8002698 <MX_GPIO_Init+0x2d4>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	4a84      	ldr	r2, [pc, #528]	; (8002698 <MX_GPIO_Init+0x2d4>)
 8002488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248c:	6313      	str	r3, [r2, #48]	; 0x30
 800248e:	4b82      	ldr	r3, [pc, #520]	; (8002698 <MX_GPIO_Init+0x2d4>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800249a:	4b7f      	ldr	r3, [pc, #508]	; (8002698 <MX_GPIO_Init+0x2d4>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	4a7e      	ldr	r2, [pc, #504]	; (8002698 <MX_GPIO_Init+0x2d4>)
 80024a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024a4:	6313      	str	r3, [r2, #48]	; 0x30
 80024a6:	4b7c      	ldr	r3, [pc, #496]	; (8002698 <MX_GPIO_Init+0x2d4>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024b2:	4b79      	ldr	r3, [pc, #484]	; (8002698 <MX_GPIO_Init+0x2d4>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4a78      	ldr	r2, [pc, #480]	; (8002698 <MX_GPIO_Init+0x2d4>)
 80024b8:	f043 0320 	orr.w	r3, r3, #32
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4b76      	ldr	r3, [pc, #472]	; (8002698 <MX_GPIO_Init+0x2d4>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f003 0320 	and.w	r3, r3, #32
 80024c6:	607b      	str	r3, [r7, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024ca:	4b73      	ldr	r3, [pc, #460]	; (8002698 <MX_GPIO_Init+0x2d4>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	4a72      	ldr	r2, [pc, #456]	; (8002698 <MX_GPIO_Init+0x2d4>)
 80024d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024d4:	6313      	str	r3, [r2, #48]	; 0x30
 80024d6:	4b70      	ldr	r3, [pc, #448]	; (8002698 <MX_GPIO_Init+0x2d4>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80024e2:	2201      	movs	r2, #1
 80024e4:	2120      	movs	r1, #32
 80024e6:	486d      	ldr	r0, [pc, #436]	; (800269c <MX_GPIO_Init+0x2d8>)
 80024e8:	f002 fa2c 	bl	8004944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 80024ec:	2200      	movs	r2, #0
 80024ee:	210e      	movs	r1, #14
 80024f0:	486b      	ldr	r0, [pc, #428]	; (80026a0 <MX_GPIO_Init+0x2dc>)
 80024f2:	f002 fa27 	bl	8004944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80024f6:	2201      	movs	r2, #1
 80024f8:	2108      	movs	r1, #8
 80024fa:	486a      	ldr	r0, [pc, #424]	; (80026a4 <MX_GPIO_Init+0x2e0>)
 80024fc:	f002 fa22 	bl	8004944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002500:	2201      	movs	r2, #1
 8002502:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002506:	4866      	ldr	r0, [pc, #408]	; (80026a0 <MX_GPIO_Init+0x2dc>)
 8002508:	f002 fa1c 	bl	8004944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800250c:	2200      	movs	r2, #0
 800250e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002512:	4865      	ldr	r0, [pc, #404]	; (80026a8 <MX_GPIO_Init+0x2e4>)
 8002514:	f002 fa16 	bl	8004944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002518:	2200      	movs	r2, #0
 800251a:	21c8      	movs	r1, #200	; 0xc8
 800251c:	4863      	ldr	r0, [pc, #396]	; (80026ac <MX_GPIO_Init+0x2e8>)
 800251e:	f002 fa11 	bl	8004944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002522:	2308      	movs	r3, #8
 8002524:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002526:	2300      	movs	r3, #0
 8002528:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800252e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002532:	4619      	mov	r1, r3
 8002534:	485e      	ldr	r0, [pc, #376]	; (80026b0 <MX_GPIO_Init+0x2ec>)
 8002536:	f002 f841 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800253a:	f643 4323 	movw	r3, #15395	; 0x3c23
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002540:	2302      	movs	r3, #2
 8002542:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002548:	2303      	movs	r3, #3
 800254a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800254c:	230a      	movs	r3, #10
 800254e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002550:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002554:	4619      	mov	r1, r3
 8002556:	4857      	ldr	r0, [pc, #348]	; (80026b4 <MX_GPIO_Init+0x2f0>)
 8002558:	f002 f830 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800255c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002560:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002562:	2300      	movs	r3, #0
 8002564:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002566:	2300      	movs	r3, #0
 8002568:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800256a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800256e:	4619      	mov	r1, r3
 8002570:	4851      	ldr	r0, [pc, #324]	; (80026b8 <MX_GPIO_Init+0x2f4>)
 8002572:	f002 f823 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002576:	2340      	movs	r3, #64	; 0x40
 8002578:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800257a:	4b50      	ldr	r3, [pc, #320]	; (80026bc <MX_GPIO_Init+0x2f8>)
 800257c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002582:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002586:	4619      	mov	r1, r3
 8002588:	4844      	ldr	r0, [pc, #272]	; (800269c <MX_GPIO_Init+0x2d8>)
 800258a:	f002 f817 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800258e:	2320      	movs	r3, #32
 8002590:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002592:	2301      	movs	r3, #1
 8002594:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259a:	2300      	movs	r3, #0
 800259c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800259e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025a2:	4619      	mov	r1, r3
 80025a4:	483d      	ldr	r0, [pc, #244]	; (800269c <MX_GPIO_Init+0x2d8>)
 80025a6:	f002 f809 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 80025aa:	f241 030e 	movw	r3, #4110	; 0x100e
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b0:	2301      	movs	r3, #1
 80025b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b8:	2300      	movs	r3, #0
 80025ba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80025bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025c0:	4619      	mov	r1, r3
 80025c2:	4837      	ldr	r0, [pc, #220]	; (80026a0 <MX_GPIO_Init+0x2dc>)
 80025c4:	f001 fffa 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80025c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ce:	2300      	movs	r3, #0
 80025d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80025d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025da:	4619      	mov	r1, r3
 80025dc:	4838      	ldr	r0, [pc, #224]	; (80026c0 <MX_GPIO_Init+0x2fc>)
 80025de:	f001 ffed 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80025e2:	2308      	movs	r3, #8
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e6:	2301      	movs	r3, #1
 80025e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ee:	2300      	movs	r3, #0
 80025f0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80025f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025f6:	4619      	mov	r1, r3
 80025f8:	482a      	ldr	r0, [pc, #168]	; (80026a4 <MX_GPIO_Init+0x2e0>)
 80025fa:	f001 ffdf 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80025fe:	2310      	movs	r3, #16
 8002600:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002602:	2300      	movs	r3, #0
 8002604:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800260a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800260e:	4619      	mov	r1, r3
 8002610:	4822      	ldr	r0, [pc, #136]	; (800269c <MX_GPIO_Init+0x2d8>)
 8002612:	f001 ffd3 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002616:	f248 0304 	movw	r3, #32772	; 0x8004
 800261a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800261c:	2300      	movs	r3, #0
 800261e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002624:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002628:	4619      	mov	r1, r3
 800262a:	481f      	ldr	r0, [pc, #124]	; (80026a8 <MX_GPIO_Init+0x2e4>)
 800262c:	f001 ffc6 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002630:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002634:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002636:	2301      	movs	r3, #1
 8002638:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263e:	2300      	movs	r3, #0
 8002640:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002642:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002646:	4619      	mov	r1, r3
 8002648:	4817      	ldr	r0, [pc, #92]	; (80026a8 <MX_GPIO_Init+0x2e4>)
 800264a:	f001 ffb7 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800264e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002652:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <MX_GPIO_Init+0x2f8>)
 8002656:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800265c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002660:	4619      	mov	r1, r3
 8002662:	480f      	ldr	r0, [pc, #60]	; (80026a0 <MX_GPIO_Init+0x2dc>)
 8002664:	f001 ffaa 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002668:	2310      	movs	r3, #16
 800266a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266c:	2302      	movs	r3, #2
 800266e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	2300      	movs	r3, #0
 8002672:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002674:	2303      	movs	r3, #3
 8002676:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002678:	230a      	movs	r3, #10
 800267a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800267c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002680:	4619      	mov	r1, r3
 8002682:	4809      	ldr	r0, [pc, #36]	; (80026a8 <MX_GPIO_Init+0x2e4>)
 8002684:	f001 ff9a 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002688:	23c8      	movs	r3, #200	; 0xc8
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800268c:	2301      	movs	r3, #1
 800268e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	637b      	str	r3, [r7, #52]	; 0x34
 8002694:	e016      	b.n	80026c4 <MX_GPIO_Init+0x300>
 8002696:	bf00      	nop
 8002698:	40023800 	.word	0x40023800
 800269c:	40020c00 	.word	0x40020c00
 80026a0:	40022000 	.word	0x40022000
 80026a4:	40022800 	.word	0x40022800
 80026a8:	40021c00 	.word	0x40021c00
 80026ac:	40021800 	.word	0x40021800
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40020400 	.word	0x40020400
 80026b8:	40022400 	.word	0x40022400
 80026bc:	10120000 	.word	0x10120000
 80026c0:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c4:	2300      	movs	r3, #0
 80026c6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026cc:	4619      	mov	r1, r3
 80026ce:	4822      	ldr	r0, [pc, #136]	; (8002758 <MX_GPIO_Init+0x394>)
 80026d0:	f001 ff74 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80026d4:	2305      	movs	r3, #5
 80026d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d8:	2302      	movs	r3, #2
 80026da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e0:	2303      	movs	r3, #3
 80026e2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80026e4:	230a      	movs	r3, #10
 80026e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026ec:	4619      	mov	r1, r3
 80026ee:	481b      	ldr	r0, [pc, #108]	; (800275c <MX_GPIO_Init+0x398>)
 80026f0:	f001 ff64 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80026f4:	2304      	movs	r3, #4
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026f8:	2300      	movs	r3, #0
 80026fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002700:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002704:	4619      	mov	r1, r3
 8002706:	4814      	ldr	r0, [pc, #80]	; (8002758 <MX_GPIO_Init+0x394>)
 8002708:	f001 ff58 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800270c:	2328      	movs	r3, #40	; 0x28
 800270e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002710:	2302      	movs	r3, #2
 8002712:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002718:	2303      	movs	r3, #3
 800271a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800271c:	230a      	movs	r3, #10
 800271e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002720:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002724:	4619      	mov	r1, r3
 8002726:	480e      	ldr	r0, [pc, #56]	; (8002760 <MX_GPIO_Init+0x39c>)
 8002728:	f001 ff48 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800272c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002730:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002732:	2302      	movs	r3, #2
 8002734:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273a:	2300      	movs	r3, #0
 800273c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800273e:	2305      	movs	r3, #5
 8002740:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002742:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002746:	4619      	mov	r1, r3
 8002748:	4806      	ldr	r0, [pc, #24]	; (8002764 <MX_GPIO_Init+0x3a0>)
 800274a:	f001 ff37 	bl	80045bc <HAL_GPIO_Init>

}
 800274e:	bf00      	nop
 8002750:	3740      	adds	r7, #64	; 0x40
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40021800 	.word	0x40021800
 800275c:	40020800 	.word	0x40020800
 8002760:	40020000 	.word	0x40020000
 8002764:	40020400 	.word	0x40020400

08002768 <LED_Toggle>:
void LED_Off(){

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
}

void LED_Toggle(){
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 800276c:	2102      	movs	r1, #2
 800276e:	4802      	ldr	r0, [pc, #8]	; (8002778 <LED_Toggle+0x10>)
 8002770:	f002 f901 	bl	8004976 <HAL_GPIO_TogglePin>
}
 8002774:	bf00      	nop
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40022000 	.word	0x40022000

0800277c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002780:	b672      	cpsid	i
}
 8002782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002784:	e7fe      	b.n	8002784 <Error_Handler+0x8>
	...

08002788 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800278e:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <HAL_MspInit+0x44>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	4a0e      	ldr	r2, [pc, #56]	; (80027cc <HAL_MspInit+0x44>)
 8002794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002798:	6413      	str	r3, [r2, #64]	; 0x40
 800279a:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <HAL_MspInit+0x44>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a2:	607b      	str	r3, [r7, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_MspInit+0x44>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4a08      	ldr	r2, [pc, #32]	; (80027cc <HAL_MspInit+0x44>)
 80027ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b0:	6453      	str	r3, [r2, #68]	; 0x44
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_MspInit+0x44>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800

080027d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	; 0x28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a21      	ldr	r2, [pc, #132]	; (8002874 <HAL_ADC_MspInit+0xa4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d13c      	bne.n	800286c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80027f2:	4b21      	ldr	r3, [pc, #132]	; (8002878 <HAL_ADC_MspInit+0xa8>)
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	4a20      	ldr	r2, [pc, #128]	; (8002878 <HAL_ADC_MspInit+0xa8>)
 80027f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027fc:	6453      	str	r3, [r2, #68]	; 0x44
 80027fe:	4b1e      	ldr	r3, [pc, #120]	; (8002878 <HAL_ADC_MspInit+0xa8>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800280a:	4b1b      	ldr	r3, [pc, #108]	; (8002878 <HAL_ADC_MspInit+0xa8>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	4a1a      	ldr	r2, [pc, #104]	; (8002878 <HAL_ADC_MspInit+0xa8>)
 8002810:	f043 0320 	orr.w	r3, r3, #32
 8002814:	6313      	str	r3, [r2, #48]	; 0x30
 8002816:	4b18      	ldr	r3, [pc, #96]	; (8002878 <HAL_ADC_MspInit+0xa8>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f003 0320 	and.w	r3, r3, #32
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002822:	4b15      	ldr	r3, [pc, #84]	; (8002878 <HAL_ADC_MspInit+0xa8>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a14      	ldr	r2, [pc, #80]	; (8002878 <HAL_ADC_MspInit+0xa8>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_ADC_MspInit+0xa8>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800283a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800283e:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002840:	2303      	movs	r3, #3
 8002842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4619      	mov	r1, r3
 800284e:	480b      	ldr	r0, [pc, #44]	; (800287c <HAL_ADC_MspInit+0xac>)
 8002850:	f001 feb4 	bl	80045bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002854:	2301      	movs	r3, #1
 8002856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002858:	2303      	movs	r3, #3
 800285a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002860:	f107 0314 	add.w	r3, r7, #20
 8002864:	4619      	mov	r1, r3
 8002866:	4806      	ldr	r0, [pc, #24]	; (8002880 <HAL_ADC_MspInit+0xb0>)
 8002868:	f001 fea8 	bl	80045bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800286c:	bf00      	nop
 800286e:	3728      	adds	r7, #40	; 0x28
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40012200 	.word	0x40012200
 8002878:	40023800 	.word	0x40023800
 800287c:	40021400 	.word	0x40021400
 8002880:	40020000 	.word	0x40020000

08002884 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0a      	ldr	r2, [pc, #40]	; (80028bc <HAL_CRC_MspInit+0x38>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d10b      	bne.n	80028ae <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002896:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <HAL_CRC_MspInit+0x3c>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	4a09      	ldr	r2, [pc, #36]	; (80028c0 <HAL_CRC_MspInit+0x3c>)
 800289c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028a0:	6313      	str	r3, [r2, #48]	; 0x30
 80028a2:	4b07      	ldr	r3, [pc, #28]	; (80028c0 <HAL_CRC_MspInit+0x3c>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80028ae:	bf00      	nop
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	40023000 	.word	0x40023000
 80028c0:	40023800 	.word	0x40023800

080028c4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08e      	sub	sp, #56	; 0x38
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	60da      	str	r2, [r3, #12]
 80028da:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a50      	ldr	r2, [pc, #320]	; (8002a24 <HAL_DCMI_MspInit+0x160>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	f040 809a 	bne.w	8002a1c <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80028e8:	4b4f      	ldr	r3, [pc, #316]	; (8002a28 <HAL_DCMI_MspInit+0x164>)
 80028ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ec:	4a4e      	ldr	r2, [pc, #312]	; (8002a28 <HAL_DCMI_MspInit+0x164>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6353      	str	r3, [r2, #52]	; 0x34
 80028f4:	4b4c      	ldr	r3, [pc, #304]	; (8002a28 <HAL_DCMI_MspInit+0x164>)
 80028f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	623b      	str	r3, [r7, #32]
 80028fe:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002900:	4b49      	ldr	r3, [pc, #292]	; (8002a28 <HAL_DCMI_MspInit+0x164>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	4a48      	ldr	r2, [pc, #288]	; (8002a28 <HAL_DCMI_MspInit+0x164>)
 8002906:	f043 0310 	orr.w	r3, r3, #16
 800290a:	6313      	str	r3, [r2, #48]	; 0x30
 800290c:	4b46      	ldr	r3, [pc, #280]	; (8002a28 <HAL_DCMI_MspInit+0x164>)
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002918:	4b43      	ldr	r3, [pc, #268]	; (8002a28 <HAL_DCMI_MspInit+0x164>)
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	4a42      	ldr	r2, [pc, #264]	; (8002a28 <HAL_DCMI_MspInit+0x164>)
 800291e:	f043 0308 	orr.w	r3, r3, #8
 8002922:	6313      	str	r3, [r2, #48]	; 0x30
 8002924:	4b40      	ldr	r3, [pc, #256]	; (8002a28 <HAL_DCMI_MspInit+0x164>)
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	61bb      	str	r3, [r7, #24]
 800292e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002930:	4b3d      	ldr	r3, [pc, #244]	; (8002a28 <HAL_DCMI_MspInit+0x164>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	4a3c      	ldr	r2, [pc, #240]	; (8002a28 <HAL_DCMI_MspInit+0x164>)
 8002936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800293a:	6313      	str	r3, [r2, #48]	; 0x30
 800293c:	4b3a      	ldr	r3, [pc, #232]	; (8002a28 <HAL_DCMI_MspInit+0x164>)
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002948:	4b37      	ldr	r3, [pc, #220]	; (8002a28 <HAL_DCMI_MspInit+0x164>)
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	4a36      	ldr	r2, [pc, #216]	; (8002a28 <HAL_DCMI_MspInit+0x164>)
 800294e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002952:	6313      	str	r3, [r2, #48]	; 0x30
 8002954:	4b34      	ldr	r3, [pc, #208]	; (8002a28 <HAL_DCMI_MspInit+0x164>)
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002960:	4b31      	ldr	r3, [pc, #196]	; (8002a28 <HAL_DCMI_MspInit+0x164>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	4a30      	ldr	r2, [pc, #192]	; (8002a28 <HAL_DCMI_MspInit+0x164>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6313      	str	r3, [r2, #48]	; 0x30
 800296c:	4b2e      	ldr	r3, [pc, #184]	; (8002a28 <HAL_DCMI_MspInit+0x164>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002978:	2360      	movs	r3, #96	; 0x60
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297c:	2302      	movs	r3, #2
 800297e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002984:	2300      	movs	r3, #0
 8002986:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002988:	230d      	movs	r3, #13
 800298a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800298c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002990:	4619      	mov	r1, r3
 8002992:	4826      	ldr	r0, [pc, #152]	; (8002a2c <HAL_DCMI_MspInit+0x168>)
 8002994:	f001 fe12 	bl	80045bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002998:	2308      	movs	r3, #8
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a4:	2300      	movs	r3, #0
 80029a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029a8:	230d      	movs	r3, #13
 80029aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80029ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b0:	4619      	mov	r1, r3
 80029b2:	481f      	ldr	r0, [pc, #124]	; (8002a30 <HAL_DCMI_MspInit+0x16c>)
 80029b4:	f001 fe02 	bl	80045bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80029b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029be:	2302      	movs	r3, #2
 80029c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c6:	2300      	movs	r3, #0
 80029c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029ca:	230d      	movs	r3, #13
 80029cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80029ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029d2:	4619      	mov	r1, r3
 80029d4:	4817      	ldr	r0, [pc, #92]	; (8002a34 <HAL_DCMI_MspInit+0x170>)
 80029d6:	f001 fdf1 	bl	80045bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80029da:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e0:	2302      	movs	r3, #2
 80029e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e8:	2300      	movs	r3, #0
 80029ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029ec:	230d      	movs	r3, #13
 80029ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80029f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029f4:	4619      	mov	r1, r3
 80029f6:	4810      	ldr	r0, [pc, #64]	; (8002a38 <HAL_DCMI_MspInit+0x174>)
 80029f8:	f001 fde0 	bl	80045bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80029fc:	2350      	movs	r3, #80	; 0x50
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a00:	2302      	movs	r3, #2
 8002a02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002a0c:	230d      	movs	r3, #13
 8002a0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a14:	4619      	mov	r1, r3
 8002a16:	4809      	ldr	r0, [pc, #36]	; (8002a3c <HAL_DCMI_MspInit+0x178>)
 8002a18:	f001 fdd0 	bl	80045bc <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002a1c:	bf00      	nop
 8002a1e:	3738      	adds	r7, #56	; 0x38
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	50050000 	.word	0x50050000
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40020c00 	.word	0x40020c00
 8002a34:	40021800 	.word	0x40021800
 8002a38:	40021c00 	.word	0x40021c00
 8002a3c:	40020000 	.word	0x40020000

08002a40 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a0d      	ldr	r2, [pc, #52]	; (8002a84 <HAL_DMA2D_MspInit+0x44>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d113      	bne.n	8002a7a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002a52:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <HAL_DMA2D_MspInit+0x48>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	4a0c      	ldr	r2, [pc, #48]	; (8002a88 <HAL_DMA2D_MspInit+0x48>)
 8002a58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5e:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <HAL_DMA2D_MspInit+0x48>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	205a      	movs	r0, #90	; 0x5a
 8002a70:	f001 fa1d 	bl	8003eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002a74:	205a      	movs	r0, #90	; 0x5a
 8002a76:	f001 fa36 	bl	8003ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002a7a:	bf00      	nop
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	4002b000 	.word	0x4002b000
 8002a88:	40023800 	.word	0x40023800

08002a8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08c      	sub	sp, #48	; 0x30
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	f107 031c 	add.w	r3, r7, #28
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a2f      	ldr	r2, [pc, #188]	; (8002b68 <HAL_I2C_MspInit+0xdc>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d129      	bne.n	8002b02 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aae:	4b2f      	ldr	r3, [pc, #188]	; (8002b6c <HAL_I2C_MspInit+0xe0>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	4a2e      	ldr	r2, [pc, #184]	; (8002b6c <HAL_I2C_MspInit+0xe0>)
 8002ab4:	f043 0302 	orr.w	r3, r3, #2
 8002ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aba:	4b2c      	ldr	r3, [pc, #176]	; (8002b6c <HAL_I2C_MspInit+0xe0>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	61bb      	str	r3, [r7, #24]
 8002ac4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002ac6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002acc:	2312      	movs	r3, #18
 8002ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ad8:	2304      	movs	r3, #4
 8002ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002adc:	f107 031c 	add.w	r3, r7, #28
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4823      	ldr	r0, [pc, #140]	; (8002b70 <HAL_I2C_MspInit+0xe4>)
 8002ae4:	f001 fd6a 	bl	80045bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ae8:	4b20      	ldr	r3, [pc, #128]	; (8002b6c <HAL_I2C_MspInit+0xe0>)
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	4a1f      	ldr	r2, [pc, #124]	; (8002b6c <HAL_I2C_MspInit+0xe0>)
 8002aee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002af2:	6413      	str	r3, [r2, #64]	; 0x40
 8002af4:	4b1d      	ldr	r3, [pc, #116]	; (8002b6c <HAL_I2C_MspInit+0xe0>)
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b00:	e02d      	b.n	8002b5e <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a1b      	ldr	r2, [pc, #108]	; (8002b74 <HAL_I2C_MspInit+0xe8>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d128      	bne.n	8002b5e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b0c:	4b17      	ldr	r3, [pc, #92]	; (8002b6c <HAL_I2C_MspInit+0xe0>)
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b10:	4a16      	ldr	r2, [pc, #88]	; (8002b6c <HAL_I2C_MspInit+0xe0>)
 8002b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b16:	6313      	str	r3, [r2, #48]	; 0x30
 8002b18:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <HAL_I2C_MspInit+0xe0>)
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002b24:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b2a:	2312      	movs	r3, #18
 8002b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b32:	2303      	movs	r3, #3
 8002b34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b36:	2304      	movs	r3, #4
 8002b38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002b3a:	f107 031c 	add.w	r3, r7, #28
 8002b3e:	4619      	mov	r1, r3
 8002b40:	480d      	ldr	r0, [pc, #52]	; (8002b78 <HAL_I2C_MspInit+0xec>)
 8002b42:	f001 fd3b 	bl	80045bc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b46:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <HAL_I2C_MspInit+0xe0>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	4a08      	ldr	r2, [pc, #32]	; (8002b6c <HAL_I2C_MspInit+0xe0>)
 8002b4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b50:	6413      	str	r3, [r2, #64]	; 0x40
 8002b52:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HAL_I2C_MspInit+0xe0>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
}
 8002b5e:	bf00      	nop
 8002b60:	3730      	adds	r7, #48	; 0x30
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40005400 	.word	0x40005400
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40020400 	.word	0x40020400
 8002b74:	40005c00 	.word	0x40005c00
 8002b78:	40021c00 	.word	0x40021c00

08002b7c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08e      	sub	sp, #56	; 0x38
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	60da      	str	r2, [r3, #12]
 8002b92:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a55      	ldr	r2, [pc, #340]	; (8002cf0 <HAL_LTDC_MspInit+0x174>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	f040 80a3 	bne.w	8002ce6 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002ba0:	4b54      	ldr	r3, [pc, #336]	; (8002cf4 <HAL_LTDC_MspInit+0x178>)
 8002ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba4:	4a53      	ldr	r2, [pc, #332]	; (8002cf4 <HAL_LTDC_MspInit+0x178>)
 8002ba6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002baa:	6453      	str	r3, [r2, #68]	; 0x44
 8002bac:	4b51      	ldr	r3, [pc, #324]	; (8002cf4 <HAL_LTDC_MspInit+0x178>)
 8002bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bb4:	623b      	str	r3, [r7, #32]
 8002bb6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bb8:	4b4e      	ldr	r3, [pc, #312]	; (8002cf4 <HAL_LTDC_MspInit+0x178>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	4a4d      	ldr	r2, [pc, #308]	; (8002cf4 <HAL_LTDC_MspInit+0x178>)
 8002bbe:	f043 0310 	orr.w	r3, r3, #16
 8002bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc4:	4b4b      	ldr	r3, [pc, #300]	; (8002cf4 <HAL_LTDC_MspInit+0x178>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	61fb      	str	r3, [r7, #28]
 8002bce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002bd0:	4b48      	ldr	r3, [pc, #288]	; (8002cf4 <HAL_LTDC_MspInit+0x178>)
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	4a47      	ldr	r2, [pc, #284]	; (8002cf4 <HAL_LTDC_MspInit+0x178>)
 8002bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bda:	6313      	str	r3, [r2, #48]	; 0x30
 8002bdc:	4b45      	ldr	r3, [pc, #276]	; (8002cf4 <HAL_LTDC_MspInit+0x178>)
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002be8:	4b42      	ldr	r3, [pc, #264]	; (8002cf4 <HAL_LTDC_MspInit+0x178>)
 8002bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bec:	4a41      	ldr	r2, [pc, #260]	; (8002cf4 <HAL_LTDC_MspInit+0x178>)
 8002bee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bf2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf4:	4b3f      	ldr	r3, [pc, #252]	; (8002cf4 <HAL_LTDC_MspInit+0x178>)
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c00:	4b3c      	ldr	r3, [pc, #240]	; (8002cf4 <HAL_LTDC_MspInit+0x178>)
 8002c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c04:	4a3b      	ldr	r2, [pc, #236]	; (8002cf4 <HAL_LTDC_MspInit+0x178>)
 8002c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0c:	4b39      	ldr	r3, [pc, #228]	; (8002cf4 <HAL_LTDC_MspInit+0x178>)
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002c18:	4b36      	ldr	r3, [pc, #216]	; (8002cf4 <HAL_LTDC_MspInit+0x178>)
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	4a35      	ldr	r2, [pc, #212]	; (8002cf4 <HAL_LTDC_MspInit+0x178>)
 8002c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c22:	6313      	str	r3, [r2, #48]	; 0x30
 8002c24:	4b33      	ldr	r3, [pc, #204]	; (8002cf4 <HAL_LTDC_MspInit+0x178>)
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002c30:	2310      	movs	r3, #16
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c34:	2302      	movs	r3, #2
 8002c36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c40:	230e      	movs	r3, #14
 8002c42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c48:	4619      	mov	r1, r3
 8002c4a:	482b      	ldr	r0, [pc, #172]	; (8002cf8 <HAL_LTDC_MspInit+0x17c>)
 8002c4c:	f001 fcb6 	bl	80045bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002c50:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c56:	2302      	movs	r3, #2
 8002c58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c62:	230e      	movs	r3, #14
 8002c64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4823      	ldr	r0, [pc, #140]	; (8002cfc <HAL_LTDC_MspInit+0x180>)
 8002c6e:	f001 fca5 	bl	80045bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002c72:	23f7      	movs	r3, #247	; 0xf7
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c76:	2302      	movs	r3, #2
 8002c78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c82:	230e      	movs	r3, #14
 8002c84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	481c      	ldr	r0, [pc, #112]	; (8002d00 <HAL_LTDC_MspInit+0x184>)
 8002c8e:	f001 fc95 	bl	80045bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002ca4:	2309      	movs	r3, #9
 8002ca6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cac:	4619      	mov	r1, r3
 8002cae:	4815      	ldr	r0, [pc, #84]	; (8002d04 <HAL_LTDC_MspInit+0x188>)
 8002cb0:	f001 fc84 	bl	80045bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002cb4:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002cc6:	230e      	movs	r3, #14
 8002cc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cce:	4619      	mov	r1, r3
 8002cd0:	480d      	ldr	r0, [pc, #52]	; (8002d08 <HAL_LTDC_MspInit+0x18c>)
 8002cd2:	f001 fc73 	bl	80045bc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2100      	movs	r1, #0
 8002cda:	2058      	movs	r0, #88	; 0x58
 8002cdc:	f001 f8e7 	bl	8003eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002ce0:	2058      	movs	r0, #88	; 0x58
 8002ce2:	f001 f900 	bl	8003ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002ce6:	bf00      	nop
 8002ce8:	3738      	adds	r7, #56	; 0x38
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40016800 	.word	0x40016800
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40022400 	.word	0x40022400
 8002d00:	40022800 	.word	0x40022800
 8002d04:	40021800 	.word	0x40021800
 8002d08:	40022000 	.word	0x40022000

08002d0c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08c      	sub	sp, #48	; 0x30
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d14:	f107 031c 	add.w	r3, r7, #28
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	60da      	str	r2, [r3, #12]
 8002d22:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a3b      	ldr	r2, [pc, #236]	; (8002e18 <HAL_QSPI_MspInit+0x10c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d170      	bne.n	8002e10 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002d2e:	4b3b      	ldr	r3, [pc, #236]	; (8002e1c <HAL_QSPI_MspInit+0x110>)
 8002d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d32:	4a3a      	ldr	r2, [pc, #232]	; (8002e1c <HAL_QSPI_MspInit+0x110>)
 8002d34:	f043 0302 	orr.w	r3, r3, #2
 8002d38:	6393      	str	r3, [r2, #56]	; 0x38
 8002d3a:	4b38      	ldr	r3, [pc, #224]	; (8002e1c <HAL_QSPI_MspInit+0x110>)
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	61bb      	str	r3, [r7, #24]
 8002d44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d46:	4b35      	ldr	r3, [pc, #212]	; (8002e1c <HAL_QSPI_MspInit+0x110>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	4a34      	ldr	r2, [pc, #208]	; (8002e1c <HAL_QSPI_MspInit+0x110>)
 8002d4c:	f043 0310 	orr.w	r3, r3, #16
 8002d50:	6313      	str	r3, [r2, #48]	; 0x30
 8002d52:	4b32      	ldr	r3, [pc, #200]	; (8002e1c <HAL_QSPI_MspInit+0x110>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f003 0310 	and.w	r3, r3, #16
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d5e:	4b2f      	ldr	r3, [pc, #188]	; (8002e1c <HAL_QSPI_MspInit+0x110>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	4a2e      	ldr	r2, [pc, #184]	; (8002e1c <HAL_QSPI_MspInit+0x110>)
 8002d64:	f043 0302 	orr.w	r3, r3, #2
 8002d68:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6a:	4b2c      	ldr	r3, [pc, #176]	; (8002e1c <HAL_QSPI_MspInit+0x110>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d76:	4b29      	ldr	r3, [pc, #164]	; (8002e1c <HAL_QSPI_MspInit+0x110>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	4a28      	ldr	r2, [pc, #160]	; (8002e1c <HAL_QSPI_MspInit+0x110>)
 8002d7c:	f043 0308 	orr.w	r3, r3, #8
 8002d80:	6313      	str	r3, [r2, #48]	; 0x30
 8002d82:	4b26      	ldr	r3, [pc, #152]	; (8002e1c <HAL_QSPI_MspInit+0x110>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002d8e:	2304      	movs	r3, #4
 8002d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d92:	2302      	movs	r3, #2
 8002d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002d9e:	2309      	movs	r3, #9
 8002da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002da2:	f107 031c 	add.w	r3, r7, #28
 8002da6:	4619      	mov	r1, r3
 8002da8:	481d      	ldr	r0, [pc, #116]	; (8002e20 <HAL_QSPI_MspInit+0x114>)
 8002daa:	f001 fc07 	bl	80045bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002dae:	2340      	movs	r3, #64	; 0x40
 8002db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db2:	2302      	movs	r3, #2
 8002db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002dbe:	230a      	movs	r3, #10
 8002dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002dc2:	f107 031c 	add.w	r3, r7, #28
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4816      	ldr	r0, [pc, #88]	; (8002e24 <HAL_QSPI_MspInit+0x118>)
 8002dca:	f001 fbf7 	bl	80045bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002dce:	2304      	movs	r3, #4
 8002dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002dde:	2309      	movs	r3, #9
 8002de0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de2:	f107 031c 	add.w	r3, r7, #28
 8002de6:	4619      	mov	r1, r3
 8002de8:	480e      	ldr	r0, [pc, #56]	; (8002e24 <HAL_QSPI_MspInit+0x118>)
 8002dea:	f001 fbe7 	bl	80045bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002dee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df4:	2302      	movs	r3, #2
 8002df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002e00:	2309      	movs	r3, #9
 8002e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e04:	f107 031c 	add.w	r3, r7, #28
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4807      	ldr	r0, [pc, #28]	; (8002e28 <HAL_QSPI_MspInit+0x11c>)
 8002e0c:	f001 fbd6 	bl	80045bc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002e10:	bf00      	nop
 8002e12:	3730      	adds	r7, #48	; 0x30
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	a0001000 	.word	0xa0001000
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	40021000 	.word	0x40021000
 8002e24:	40020400 	.word	0x40020400
 8002e28:	40020c00 	.word	0x40020c00

08002e2c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a07      	ldr	r2, [pc, #28]	; (8002e58 <HAL_RTC_MspInit+0x2c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d105      	bne.n	8002e4a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e3e:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <HAL_RTC_MspInit+0x30>)
 8002e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e42:	4a06      	ldr	r2, [pc, #24]	; (8002e5c <HAL_RTC_MspInit+0x30>)
 8002e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e48:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40002800 	.word	0x40002800
 8002e5c:	40023800 	.word	0x40023800

08002e60 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08a      	sub	sp, #40	; 0x28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e68:	f107 0314 	add.w	r3, r7, #20
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	60da      	str	r2, [r3, #12]
 8002e76:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a25      	ldr	r2, [pc, #148]	; (8002f14 <HAL_SD_MspInit+0xb4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d144      	bne.n	8002f0c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002e82:	4b25      	ldr	r3, [pc, #148]	; (8002f18 <HAL_SD_MspInit+0xb8>)
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	4a24      	ldr	r2, [pc, #144]	; (8002f18 <HAL_SD_MspInit+0xb8>)
 8002e88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e8e:	4b22      	ldr	r3, [pc, #136]	; (8002f18 <HAL_SD_MspInit+0xb8>)
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e96:	613b      	str	r3, [r7, #16]
 8002e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e9a:	4b1f      	ldr	r3, [pc, #124]	; (8002f18 <HAL_SD_MspInit+0xb8>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	4a1e      	ldr	r2, [pc, #120]	; (8002f18 <HAL_SD_MspInit+0xb8>)
 8002ea0:	f043 0304 	orr.w	r3, r3, #4
 8002ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea6:	4b1c      	ldr	r3, [pc, #112]	; (8002f18 <HAL_SD_MspInit+0xb8>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	f003 0304 	and.w	r3, r3, #4
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eb2:	4b19      	ldr	r3, [pc, #100]	; (8002f18 <HAL_SD_MspInit+0xb8>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	4a18      	ldr	r2, [pc, #96]	; (8002f18 <HAL_SD_MspInit+0xb8>)
 8002eb8:	f043 0308 	orr.w	r3, r3, #8
 8002ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ebe:	4b16      	ldr	r3, [pc, #88]	; (8002f18 <HAL_SD_MspInit+0xb8>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	60bb      	str	r3, [r7, #8]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002eca:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002ece:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002edc:	230c      	movs	r3, #12
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ee0:	f107 0314 	add.w	r3, r7, #20
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	480d      	ldr	r0, [pc, #52]	; (8002f1c <HAL_SD_MspInit+0xbc>)
 8002ee8:	f001 fb68 	bl	80045bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002eec:	2304      	movs	r3, #4
 8002eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002efc:	230c      	movs	r3, #12
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002f00:	f107 0314 	add.w	r3, r7, #20
 8002f04:	4619      	mov	r1, r3
 8002f06:	4806      	ldr	r0, [pc, #24]	; (8002f20 <HAL_SD_MspInit+0xc0>)
 8002f08:	f001 fb58 	bl	80045bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002f0c:	bf00      	nop
 8002f0e:	3728      	adds	r7, #40	; 0x28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40012c00 	.word	0x40012c00
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40020800 	.word	0x40020800
 8002f20:	40020c00 	.word	0x40020c00

08002f24 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08a      	sub	sp, #40	; 0x28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2c:	f107 0314 	add.w	r3, r7, #20
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	60da      	str	r2, [r3, #12]
 8002f3a:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002f44:	d127      	bne.n	8002f96 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002f46:	4b16      	ldr	r3, [pc, #88]	; (8002fa0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	4a15      	ldr	r2, [pc, #84]	; (8002fa0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f50:	6413      	str	r3, [r2, #64]	; 0x40
 8002f52:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f5e:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	4a0f      	ldr	r2, [pc, #60]	; (8002fa0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002f64:	f043 0308 	orr.w	r3, r3, #8
 8002f68:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6a:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f82:	2300      	movs	r3, #0
 8002f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002f86:	2308      	movs	r3, #8
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002f8a:	f107 0314 	add.w	r3, r7, #20
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4804      	ldr	r0, [pc, #16]	; (8002fa4 <HAL_SPDIFRX_MspInit+0x80>)
 8002f92:	f001 fb13 	bl	80045bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002f96:	bf00      	nop
 8002f98:	3728      	adds	r7, #40	; 0x28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40020c00 	.word	0x40020c00

08002fa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08e      	sub	sp, #56	; 0x38
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	605a      	str	r2, [r3, #4]
 8002fba:	609a      	str	r2, [r3, #8]
 8002fbc:	60da      	str	r2, [r3, #12]
 8002fbe:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a44      	ldr	r2, [pc, #272]	; (80030d8 <HAL_TIM_Base_MspInit+0x130>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d10c      	bne.n	8002fe4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fca:	4b44      	ldr	r3, [pc, #272]	; (80030dc <HAL_TIM_Base_MspInit+0x134>)
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	4a43      	ldr	r2, [pc, #268]	; (80030dc <HAL_TIM_Base_MspInit+0x134>)
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd6:	4b41      	ldr	r3, [pc, #260]	; (80030dc <HAL_TIM_Base_MspInit+0x134>)
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	623b      	str	r3, [r7, #32]
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002fe2:	e074      	b.n	80030ce <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM2)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fec:	d10c      	bne.n	8003008 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fee:	4b3b      	ldr	r3, [pc, #236]	; (80030dc <HAL_TIM_Base_MspInit+0x134>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	4a3a      	ldr	r2, [pc, #232]	; (80030dc <HAL_TIM_Base_MspInit+0x134>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8002ffa:	4b38      	ldr	r3, [pc, #224]	; (80030dc <HAL_TIM_Base_MspInit+0x134>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	61fb      	str	r3, [r7, #28]
 8003004:	69fb      	ldr	r3, [r7, #28]
}
 8003006:	e062      	b.n	80030ce <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM3)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a34      	ldr	r2, [pc, #208]	; (80030e0 <HAL_TIM_Base_MspInit+0x138>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d10c      	bne.n	800302c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003012:	4b32      	ldr	r3, [pc, #200]	; (80030dc <HAL_TIM_Base_MspInit+0x134>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	4a31      	ldr	r2, [pc, #196]	; (80030dc <HAL_TIM_Base_MspInit+0x134>)
 8003018:	f043 0302 	orr.w	r3, r3, #2
 800301c:	6413      	str	r3, [r2, #64]	; 0x40
 800301e:	4b2f      	ldr	r3, [pc, #188]	; (80030dc <HAL_TIM_Base_MspInit+0x134>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	61bb      	str	r3, [r7, #24]
 8003028:	69bb      	ldr	r3, [r7, #24]
}
 800302a:	e050      	b.n	80030ce <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM5)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a2c      	ldr	r2, [pc, #176]	; (80030e4 <HAL_TIM_Base_MspInit+0x13c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d10c      	bne.n	8003050 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003036:	4b29      	ldr	r3, [pc, #164]	; (80030dc <HAL_TIM_Base_MspInit+0x134>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	4a28      	ldr	r2, [pc, #160]	; (80030dc <HAL_TIM_Base_MspInit+0x134>)
 800303c:	f043 0308 	orr.w	r3, r3, #8
 8003040:	6413      	str	r3, [r2, #64]	; 0x40
 8003042:	4b26      	ldr	r3, [pc, #152]	; (80030dc <HAL_TIM_Base_MspInit+0x134>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	697b      	ldr	r3, [r7, #20]
}
 800304e:	e03e      	b.n	80030ce <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM8)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a24      	ldr	r2, [pc, #144]	; (80030e8 <HAL_TIM_Base_MspInit+0x140>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d10c      	bne.n	8003074 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800305a:	4b20      	ldr	r3, [pc, #128]	; (80030dc <HAL_TIM_Base_MspInit+0x134>)
 800305c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305e:	4a1f      	ldr	r2, [pc, #124]	; (80030dc <HAL_TIM_Base_MspInit+0x134>)
 8003060:	f043 0302 	orr.w	r3, r3, #2
 8003064:	6453      	str	r3, [r2, #68]	; 0x44
 8003066:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <HAL_TIM_Base_MspInit+0x134>)
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	693b      	ldr	r3, [r7, #16]
}
 8003072:	e02c      	b.n	80030ce <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM12)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1c      	ldr	r2, [pc, #112]	; (80030ec <HAL_TIM_Base_MspInit+0x144>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d127      	bne.n	80030ce <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800307e:	4b17      	ldr	r3, [pc, #92]	; (80030dc <HAL_TIM_Base_MspInit+0x134>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	4a16      	ldr	r2, [pc, #88]	; (80030dc <HAL_TIM_Base_MspInit+0x134>)
 8003084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003088:	6413      	str	r3, [r2, #64]	; 0x40
 800308a:	4b14      	ldr	r3, [pc, #80]	; (80030dc <HAL_TIM_Base_MspInit+0x134>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003096:	4b11      	ldr	r3, [pc, #68]	; (80030dc <HAL_TIM_Base_MspInit+0x134>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	4a10      	ldr	r2, [pc, #64]	; (80030dc <HAL_TIM_Base_MspInit+0x134>)
 800309c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a0:	6313      	str	r3, [r2, #48]	; 0x30
 80030a2:	4b0e      	ldr	r3, [pc, #56]	; (80030dc <HAL_TIM_Base_MspInit+0x134>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030aa:	60bb      	str	r3, [r7, #8]
 80030ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80030ae:	2340      	movs	r3, #64	; 0x40
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b2:	2302      	movs	r3, #2
 80030b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ba:	2300      	movs	r3, #0
 80030bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80030be:	2309      	movs	r3, #9
 80030c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80030c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030c6:	4619      	mov	r1, r3
 80030c8:	4809      	ldr	r0, [pc, #36]	; (80030f0 <HAL_TIM_Base_MspInit+0x148>)
 80030ca:	f001 fa77 	bl	80045bc <HAL_GPIO_Init>
}
 80030ce:	bf00      	nop
 80030d0:	3738      	adds	r7, #56	; 0x38
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40010000 	.word	0x40010000
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40000400 	.word	0x40000400
 80030e4:	40000c00 	.word	0x40000c00
 80030e8:	40010400 	.word	0x40010400
 80030ec:	40001800 	.word	0x40001800
 80030f0:	40021c00 	.word	0x40021c00

080030f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08c      	sub	sp, #48	; 0x30
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030fc:	f107 031c 	add.w	r3, r7, #28
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	605a      	str	r2, [r3, #4]
 8003106:	609a      	str	r2, [r3, #8]
 8003108:	60da      	str	r2, [r3, #12]
 800310a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a45      	ldr	r2, [pc, #276]	; (8003228 <HAL_TIM_MspPostInit+0x134>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d11d      	bne.n	8003152 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003116:	4b45      	ldr	r3, [pc, #276]	; (800322c <HAL_TIM_MspPostInit+0x138>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	4a44      	ldr	r2, [pc, #272]	; (800322c <HAL_TIM_MspPostInit+0x138>)
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	6313      	str	r3, [r2, #48]	; 0x30
 8003122:	4b42      	ldr	r3, [pc, #264]	; (800322c <HAL_TIM_MspPostInit+0x138>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	61bb      	str	r3, [r7, #24]
 800312c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800312e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003134:	2302      	movs	r3, #2
 8003136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003138:	2300      	movs	r3, #0
 800313a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313c:	2300      	movs	r3, #0
 800313e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003140:	2301      	movs	r3, #1
 8003142:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003144:	f107 031c 	add.w	r3, r7, #28
 8003148:	4619      	mov	r1, r3
 800314a:	4839      	ldr	r0, [pc, #228]	; (8003230 <HAL_TIM_MspPostInit+0x13c>)
 800314c:	f001 fa36 	bl	80045bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003150:	e065      	b.n	800321e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM2)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315a:	d11d      	bne.n	8003198 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800315c:	4b33      	ldr	r3, [pc, #204]	; (800322c <HAL_TIM_MspPostInit+0x138>)
 800315e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003160:	4a32      	ldr	r2, [pc, #200]	; (800322c <HAL_TIM_MspPostInit+0x138>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	6313      	str	r3, [r2, #48]	; 0x30
 8003168:	4b30      	ldr	r3, [pc, #192]	; (800322c <HAL_TIM_MspPostInit+0x138>)
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317a:	2302      	movs	r3, #2
 800317c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317e:	2300      	movs	r3, #0
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003182:	2300      	movs	r3, #0
 8003184:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003186:	2301      	movs	r3, #1
 8003188:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800318a:	f107 031c 	add.w	r3, r7, #28
 800318e:	4619      	mov	r1, r3
 8003190:	4827      	ldr	r0, [pc, #156]	; (8003230 <HAL_TIM_MspPostInit+0x13c>)
 8003192:	f001 fa13 	bl	80045bc <HAL_GPIO_Init>
}
 8003196:	e042      	b.n	800321e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM3)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a25      	ldr	r2, [pc, #148]	; (8003234 <HAL_TIM_MspPostInit+0x140>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d11c      	bne.n	80031dc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031a2:	4b22      	ldr	r3, [pc, #136]	; (800322c <HAL_TIM_MspPostInit+0x138>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	4a21      	ldr	r2, [pc, #132]	; (800322c <HAL_TIM_MspPostInit+0x138>)
 80031a8:	f043 0302 	orr.w	r3, r3, #2
 80031ac:	6313      	str	r3, [r2, #48]	; 0x30
 80031ae:	4b1f      	ldr	r3, [pc, #124]	; (800322c <HAL_TIM_MspPostInit+0x138>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	613b      	str	r3, [r7, #16]
 80031b8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80031ba:	2310      	movs	r3, #16
 80031bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031be:	2302      	movs	r3, #2
 80031c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c6:	2300      	movs	r3, #0
 80031c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031ca:	2302      	movs	r3, #2
 80031cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80031ce:	f107 031c 	add.w	r3, r7, #28
 80031d2:	4619      	mov	r1, r3
 80031d4:	4818      	ldr	r0, [pc, #96]	; (8003238 <HAL_TIM_MspPostInit+0x144>)
 80031d6:	f001 f9f1 	bl	80045bc <HAL_GPIO_Init>
}
 80031da:	e020      	b.n	800321e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a16      	ldr	r2, [pc, #88]	; (800323c <HAL_TIM_MspPostInit+0x148>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d11b      	bne.n	800321e <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80031e6:	4b11      	ldr	r3, [pc, #68]	; (800322c <HAL_TIM_MspPostInit+0x138>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	4a10      	ldr	r2, [pc, #64]	; (800322c <HAL_TIM_MspPostInit+0x138>)
 80031ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f0:	6313      	str	r3, [r2, #48]	; 0x30
 80031f2:	4b0e      	ldr	r3, [pc, #56]	; (800322c <HAL_TIM_MspPostInit+0x138>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80031fe:	2301      	movs	r3, #1
 8003200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003202:	2302      	movs	r3, #2
 8003204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003206:	2300      	movs	r3, #0
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320a:	2300      	movs	r3, #0
 800320c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800320e:	2302      	movs	r3, #2
 8003210:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003212:	f107 031c 	add.w	r3, r7, #28
 8003216:	4619      	mov	r1, r3
 8003218:	4809      	ldr	r0, [pc, #36]	; (8003240 <HAL_TIM_MspPostInit+0x14c>)
 800321a:	f001 f9cf 	bl	80045bc <HAL_GPIO_Init>
}
 800321e:	bf00      	nop
 8003220:	3730      	adds	r7, #48	; 0x30
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40010000 	.word	0x40010000
 800322c:	40023800 	.word	0x40023800
 8003230:	40020000 	.word	0x40020000
 8003234:	40000400 	.word	0x40000400
 8003238:	40020400 	.word	0x40020400
 800323c:	40000c00 	.word	0x40000c00
 8003240:	40022000 	.word	0x40022000

08003244 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08c      	sub	sp, #48	; 0x30
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800324c:	f107 031c 	add.w	r3, r7, #28
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	605a      	str	r2, [r3, #4]
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	60da      	str	r2, [r3, #12]
 800325a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a3c      	ldr	r2, [pc, #240]	; (8003354 <HAL_UART_MspInit+0x110>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d145      	bne.n	80032f2 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003266:	4b3c      	ldr	r3, [pc, #240]	; (8003358 <HAL_UART_MspInit+0x114>)
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	4a3b      	ldr	r2, [pc, #236]	; (8003358 <HAL_UART_MspInit+0x114>)
 800326c:	f043 0310 	orr.w	r3, r3, #16
 8003270:	6453      	str	r3, [r2, #68]	; 0x44
 8003272:	4b39      	ldr	r3, [pc, #228]	; (8003358 <HAL_UART_MspInit+0x114>)
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	f003 0310 	and.w	r3, r3, #16
 800327a:	61bb      	str	r3, [r7, #24]
 800327c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800327e:	4b36      	ldr	r3, [pc, #216]	; (8003358 <HAL_UART_MspInit+0x114>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	4a35      	ldr	r2, [pc, #212]	; (8003358 <HAL_UART_MspInit+0x114>)
 8003284:	f043 0302 	orr.w	r3, r3, #2
 8003288:	6313      	str	r3, [r2, #48]	; 0x30
 800328a:	4b33      	ldr	r3, [pc, #204]	; (8003358 <HAL_UART_MspInit+0x114>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003296:	4b30      	ldr	r3, [pc, #192]	; (8003358 <HAL_UART_MspInit+0x114>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	4a2f      	ldr	r2, [pc, #188]	; (8003358 <HAL_UART_MspInit+0x114>)
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	6313      	str	r3, [r2, #48]	; 0x30
 80032a2:	4b2d      	ldr	r3, [pc, #180]	; (8003358 <HAL_UART_MspInit+0x114>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	613b      	str	r3, [r7, #16]
 80032ac:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80032ae:	2380      	movs	r3, #128	; 0x80
 80032b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b2:	2302      	movs	r3, #2
 80032b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ba:	2300      	movs	r3, #0
 80032bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032be:	2307      	movs	r3, #7
 80032c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80032c2:	f107 031c 	add.w	r3, r7, #28
 80032c6:	4619      	mov	r1, r3
 80032c8:	4824      	ldr	r0, [pc, #144]	; (800335c <HAL_UART_MspInit+0x118>)
 80032ca:	f001 f977 	bl	80045bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80032ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d4:	2302      	movs	r3, #2
 80032d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032dc:	2300      	movs	r3, #0
 80032de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032e0:	2307      	movs	r3, #7
 80032e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80032e4:	f107 031c 	add.w	r3, r7, #28
 80032e8:	4619      	mov	r1, r3
 80032ea:	481d      	ldr	r0, [pc, #116]	; (8003360 <HAL_UART_MspInit+0x11c>)
 80032ec:	f001 f966 	bl	80045bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80032f0:	e02c      	b.n	800334c <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1b      	ldr	r2, [pc, #108]	; (8003364 <HAL_UART_MspInit+0x120>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d127      	bne.n	800334c <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 80032fc:	4b16      	ldr	r3, [pc, #88]	; (8003358 <HAL_UART_MspInit+0x114>)
 80032fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003300:	4a15      	ldr	r2, [pc, #84]	; (8003358 <HAL_UART_MspInit+0x114>)
 8003302:	f043 0320 	orr.w	r3, r3, #32
 8003306:	6453      	str	r3, [r2, #68]	; 0x44
 8003308:	4b13      	ldr	r3, [pc, #76]	; (8003358 <HAL_UART_MspInit+0x114>)
 800330a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003314:	4b10      	ldr	r3, [pc, #64]	; (8003358 <HAL_UART_MspInit+0x114>)
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	4a0f      	ldr	r2, [pc, #60]	; (8003358 <HAL_UART_MspInit+0x114>)
 800331a:	f043 0304 	orr.w	r3, r3, #4
 800331e:	6313      	str	r3, [r2, #48]	; 0x30
 8003320:	4b0d      	ldr	r3, [pc, #52]	; (8003358 <HAL_UART_MspInit+0x114>)
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800332c:	23c0      	movs	r3, #192	; 0xc0
 800332e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003330:	2302      	movs	r3, #2
 8003332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003334:	2300      	movs	r3, #0
 8003336:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003338:	2303      	movs	r3, #3
 800333a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800333c:	2308      	movs	r3, #8
 800333e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003340:	f107 031c 	add.w	r3, r7, #28
 8003344:	4619      	mov	r1, r3
 8003346:	4808      	ldr	r0, [pc, #32]	; (8003368 <HAL_UART_MspInit+0x124>)
 8003348:	f001 f938 	bl	80045bc <HAL_GPIO_Init>
}
 800334c:	bf00      	nop
 800334e:	3730      	adds	r7, #48	; 0x30
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40011000 	.word	0x40011000
 8003358:	40023800 	.word	0x40023800
 800335c:	40020400 	.word	0x40020400
 8003360:	40020000 	.word	0x40020000
 8003364:	40011400 	.word	0x40011400
 8003368:	40020800 	.word	0x40020800

0800336c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003372:	1d3b      	adds	r3, r7, #4
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	60da      	str	r2, [r3, #12]
 800337e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003380:	4b3a      	ldr	r3, [pc, #232]	; (800346c <HAL_FMC_MspInit+0x100>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d16d      	bne.n	8003464 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8003388:	4b38      	ldr	r3, [pc, #224]	; (800346c <HAL_FMC_MspInit+0x100>)
 800338a:	2201      	movs	r2, #1
 800338c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800338e:	4b38      	ldr	r3, [pc, #224]	; (8003470 <HAL_FMC_MspInit+0x104>)
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	4a37      	ldr	r2, [pc, #220]	; (8003470 <HAL_FMC_MspInit+0x104>)
 8003394:	f043 0301 	orr.w	r3, r3, #1
 8003398:	6393      	str	r3, [r2, #56]	; 0x38
 800339a:	4b35      	ldr	r3, [pc, #212]	; (8003470 <HAL_FMC_MspInit+0x104>)
 800339c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80033a6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80033aa:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ac:	2302      	movs	r3, #2
 80033ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b4:	2303      	movs	r3, #3
 80033b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033b8:	230c      	movs	r3, #12
 80033ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033bc:	1d3b      	adds	r3, r7, #4
 80033be:	4619      	mov	r1, r3
 80033c0:	482c      	ldr	r0, [pc, #176]	; (8003474 <HAL_FMC_MspInit+0x108>)
 80033c2:	f001 f8fb 	bl	80045bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80033c6:	f248 1333 	movw	r3, #33075	; 0x8133
 80033ca:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033cc:	2302      	movs	r3, #2
 80033ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d4:	2303      	movs	r3, #3
 80033d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033d8:	230c      	movs	r3, #12
 80033da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033dc:	1d3b      	adds	r3, r7, #4
 80033de:	4619      	mov	r1, r3
 80033e0:	4825      	ldr	r0, [pc, #148]	; (8003478 <HAL_FMC_MspInit+0x10c>)
 80033e2:	f001 f8eb 	bl	80045bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80033e6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80033ea:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ec:	2302      	movs	r3, #2
 80033ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033f4:	2303      	movs	r3, #3
 80033f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033f8:	230c      	movs	r3, #12
 80033fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033fc:	1d3b      	adds	r3, r7, #4
 80033fe:	4619      	mov	r1, r3
 8003400:	481e      	ldr	r0, [pc, #120]	; (800347c <HAL_FMC_MspInit+0x110>)
 8003402:	f001 f8db 	bl	80045bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003406:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800340a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340c:	2302      	movs	r3, #2
 800340e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003414:	2303      	movs	r3, #3
 8003416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003418:	230c      	movs	r3, #12
 800341a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800341c:	1d3b      	adds	r3, r7, #4
 800341e:	4619      	mov	r1, r3
 8003420:	4817      	ldr	r0, [pc, #92]	; (8003480 <HAL_FMC_MspInit+0x114>)
 8003422:	f001 f8cb 	bl	80045bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003426:	2328      	movs	r3, #40	; 0x28
 8003428:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342a:	2302      	movs	r3, #2
 800342c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003432:	2303      	movs	r3, #3
 8003434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003436:	230c      	movs	r3, #12
 8003438:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800343a:	1d3b      	adds	r3, r7, #4
 800343c:	4619      	mov	r1, r3
 800343e:	4811      	ldr	r0, [pc, #68]	; (8003484 <HAL_FMC_MspInit+0x118>)
 8003440:	f001 f8bc 	bl	80045bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003444:	2308      	movs	r3, #8
 8003446:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003448:	2302      	movs	r3, #2
 800344a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003450:	2303      	movs	r3, #3
 8003452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003454:	230c      	movs	r3, #12
 8003456:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003458:	1d3b      	adds	r3, r7, #4
 800345a:	4619      	mov	r1, r3
 800345c:	480a      	ldr	r0, [pc, #40]	; (8003488 <HAL_FMC_MspInit+0x11c>)
 800345e:	f001 f8ad 	bl	80045bc <HAL_GPIO_Init>
 8003462:	e000      	b.n	8003466 <HAL_FMC_MspInit+0xfa>
    return;
 8003464:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	20000894 	.word	0x20000894
 8003470:	40023800 	.word	0x40023800
 8003474:	40021000 	.word	0x40021000
 8003478:	40021800 	.word	0x40021800
 800347c:	40020c00 	.word	0x40020c00
 8003480:	40021400 	.word	0x40021400
 8003484:	40021c00 	.word	0x40021c00
 8003488:	40020800 	.word	0x40020800

0800348c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003494:	f7ff ff6a 	bl	800336c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003498:	bf00      	nop
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08a      	sub	sp, #40	; 0x28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a2b      	ldr	r2, [pc, #172]	; (800355c <HAL_SAI_MspInit+0xbc>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d124      	bne.n	80034fc <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80034b2:	4b2b      	ldr	r3, [pc, #172]	; (8003560 <HAL_SAI_MspInit+0xc0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10b      	bne.n	80034d2 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80034ba:	4b2a      	ldr	r3, [pc, #168]	; (8003564 <HAL_SAI_MspInit+0xc4>)
 80034bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034be:	4a29      	ldr	r2, [pc, #164]	; (8003564 <HAL_SAI_MspInit+0xc4>)
 80034c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034c4:	6453      	str	r3, [r2, #68]	; 0x44
 80034c6:	4b27      	ldr	r3, [pc, #156]	; (8003564 <HAL_SAI_MspInit+0xc4>)
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034ce:	613b      	str	r3, [r7, #16]
 80034d0:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80034d2:	4b23      	ldr	r3, [pc, #140]	; (8003560 <HAL_SAI_MspInit+0xc0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3301      	adds	r3, #1
 80034d8:	4a21      	ldr	r2, [pc, #132]	; (8003560 <HAL_SAI_MspInit+0xc0>)
 80034da:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80034dc:	23f0      	movs	r3, #240	; 0xf0
 80034de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e0:	2302      	movs	r3, #2
 80034e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e8:	2300      	movs	r3, #0
 80034ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80034ec:	230a      	movs	r3, #10
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80034f0:	f107 0314 	add.w	r3, r7, #20
 80034f4:	4619      	mov	r1, r3
 80034f6:	481c      	ldr	r0, [pc, #112]	; (8003568 <HAL_SAI_MspInit+0xc8>)
 80034f8:	f001 f860 	bl	80045bc <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a1a      	ldr	r2, [pc, #104]	; (800356c <HAL_SAI_MspInit+0xcc>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d125      	bne.n	8003552 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003506:	4b16      	ldr	r3, [pc, #88]	; (8003560 <HAL_SAI_MspInit+0xc0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10b      	bne.n	8003526 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800350e:	4b15      	ldr	r3, [pc, #84]	; (8003564 <HAL_SAI_MspInit+0xc4>)
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	4a14      	ldr	r2, [pc, #80]	; (8003564 <HAL_SAI_MspInit+0xc4>)
 8003514:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003518:	6453      	str	r3, [r2, #68]	; 0x44
 800351a:	4b12      	ldr	r3, [pc, #72]	; (8003564 <HAL_SAI_MspInit+0xc4>)
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003526:	4b0e      	ldr	r3, [pc, #56]	; (8003560 <HAL_SAI_MspInit+0xc0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3301      	adds	r3, #1
 800352c:	4a0c      	ldr	r2, [pc, #48]	; (8003560 <HAL_SAI_MspInit+0xc0>)
 800352e:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003536:	2302      	movs	r3, #2
 8003538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353e:	2300      	movs	r3, #0
 8003540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003542:	230a      	movs	r3, #10
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003546:	f107 0314 	add.w	r3, r7, #20
 800354a:	4619      	mov	r1, r3
 800354c:	4808      	ldr	r0, [pc, #32]	; (8003570 <HAL_SAI_MspInit+0xd0>)
 800354e:	f001 f835 	bl	80045bc <HAL_GPIO_Init>

    }
}
 8003552:	bf00      	nop
 8003554:	3728      	adds	r7, #40	; 0x28
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40015c04 	.word	0x40015c04
 8003560:	20000898 	.word	0x20000898
 8003564:	40023800 	.word	0x40023800
 8003568:	40022000 	.word	0x40022000
 800356c:	40015c24 	.word	0x40015c24
 8003570:	40021800 	.word	0x40021800

08003574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003578:	e7fe      	b.n	8003578 <NMI_Handler+0x4>

0800357a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800357a:	b480      	push	{r7}
 800357c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800357e:	e7fe      	b.n	800357e <HardFault_Handler+0x4>

08003580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003584:	e7fe      	b.n	8003584 <MemManage_Handler+0x4>

08003586 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003586:	b480      	push	{r7}
 8003588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800358a:	e7fe      	b.n	800358a <BusFault_Handler+0x4>

0800358c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003590:	e7fe      	b.n	8003590 <UsageFault_Handler+0x4>

08003592 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003592:	b480      	push	{r7}
 8003594:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003596:	bf00      	nop
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035a4:	bf00      	nop
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035ae:	b480      	push	{r7}
 80035b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035b2:	bf00      	nop
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035c0:	f000 f8ce 	bl	8003760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035c4:	bf00      	nop
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80035cc:	4802      	ldr	r0, [pc, #8]	; (80035d8 <OTG_FS_IRQHandler+0x10>)
 80035ce:	f001 fc57 	bl	8004e80 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80035d2:	bf00      	nop
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	2000194c 	.word	0x2000194c

080035dc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80035e0:	4802      	ldr	r0, [pc, #8]	; (80035ec <LTDC_IRQHandler+0x10>)
 80035e2:	f003 f93f 	bl	8006864 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80035e6:	bf00      	nop
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000cb4 	.word	0x20000cb4

080035f0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80035f4:	4802      	ldr	r0, [pc, #8]	; (8003600 <DMA2D_IRQHandler+0x10>)
 80035f6:	f000 fe3f 	bl	8004278 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80035fa:	bf00      	nop
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000f68 	.word	0x20000f68

08003604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800360c:	4a14      	ldr	r2, [pc, #80]	; (8003660 <_sbrk+0x5c>)
 800360e:	4b15      	ldr	r3, [pc, #84]	; (8003664 <_sbrk+0x60>)
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003618:	4b13      	ldr	r3, [pc, #76]	; (8003668 <_sbrk+0x64>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d102      	bne.n	8003626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003620:	4b11      	ldr	r3, [pc, #68]	; (8003668 <_sbrk+0x64>)
 8003622:	4a12      	ldr	r2, [pc, #72]	; (800366c <_sbrk+0x68>)
 8003624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003626:	4b10      	ldr	r3, [pc, #64]	; (8003668 <_sbrk+0x64>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4413      	add	r3, r2
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	429a      	cmp	r2, r3
 8003632:	d207      	bcs.n	8003644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003634:	f00e f9a0 	bl	8011978 <__errno>
 8003638:	4603      	mov	r3, r0
 800363a:	220c      	movs	r2, #12
 800363c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800363e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003642:	e009      	b.n	8003658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003644:	4b08      	ldr	r3, [pc, #32]	; (8003668 <_sbrk+0x64>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800364a:	4b07      	ldr	r3, [pc, #28]	; (8003668 <_sbrk+0x64>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4413      	add	r3, r2
 8003652:	4a05      	ldr	r2, [pc, #20]	; (8003668 <_sbrk+0x64>)
 8003654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003656:	68fb      	ldr	r3, [r7, #12]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20050000 	.word	0x20050000
 8003664:	00000800 	.word	0x00000800
 8003668:	2000089c 	.word	0x2000089c
 800366c:	20001c60 	.word	0x20001c60

08003670 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003674:	4b06      	ldr	r3, [pc, #24]	; (8003690 <SystemInit+0x20>)
 8003676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367a:	4a05      	ldr	r2, [pc, #20]	; (8003690 <SystemInit+0x20>)
 800367c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003684:	bf00      	nop
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003694:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003698:	480d      	ldr	r0, [pc, #52]	; (80036d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800369a:	490e      	ldr	r1, [pc, #56]	; (80036d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800369c:	4a0e      	ldr	r2, [pc, #56]	; (80036d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800369e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036a0:	e002      	b.n	80036a8 <LoopCopyDataInit>

080036a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036a6:	3304      	adds	r3, #4

080036a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036ac:	d3f9      	bcc.n	80036a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036ae:	4a0b      	ldr	r2, [pc, #44]	; (80036dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80036b0:	4c0b      	ldr	r4, [pc, #44]	; (80036e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80036b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036b4:	e001      	b.n	80036ba <LoopFillZerobss>

080036b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036b8:	3204      	adds	r2, #4

080036ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036bc:	d3fb      	bcc.n	80036b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036be:	f7ff ffd7 	bl	8003670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036c2:	f00e f95f 	bl	8011984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036c6:	f7fd fc85 	bl	8000fd4 <main>
  bx  lr    
 80036ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036cc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80036d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036d4:	20000878 	.word	0x20000878
  ldr r2, =_sidata
 80036d8:	08024164 	.word	0x08024164
  ldr r2, =_sbss
 80036dc:	20000878 	.word	0x20000878
  ldr r4, =_ebss
 80036e0:	20001c60 	.word	0x20001c60

080036e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036e4:	e7fe      	b.n	80036e4 <ADC_IRQHandler>

080036e6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036ea:	2003      	movs	r0, #3
 80036ec:	f000 fbd4 	bl	8003e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036f0:	200f      	movs	r0, #15
 80036f2:	f000 f805 	bl	8003700 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80036f6:	f7ff f847 	bl	8002788 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003708:	4b12      	ldr	r3, [pc, #72]	; (8003754 <HAL_InitTick+0x54>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	4b12      	ldr	r3, [pc, #72]	; (8003758 <HAL_InitTick+0x58>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	4619      	mov	r1, r3
 8003712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003716:	fbb3 f3f1 	udiv	r3, r3, r1
 800371a:	fbb2 f3f3 	udiv	r3, r2, r3
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fbef 	bl	8003f02 <HAL_SYSTICK_Config>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e00e      	b.n	800374c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b0f      	cmp	r3, #15
 8003732:	d80a      	bhi.n	800374a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003734:	2200      	movs	r2, #0
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800373c:	f000 fbb7 	bl	8003eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003740:	4a06      	ldr	r2, [pc, #24]	; (800375c <HAL_InitTick+0x5c>)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	e000      	b.n	800374c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	20000000 	.word	0x20000000
 8003758:	20000008 	.word	0x20000008
 800375c:	20000004 	.word	0x20000004

08003760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003764:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_IncTick+0x20>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	4b06      	ldr	r3, [pc, #24]	; (8003784 <HAL_IncTick+0x24>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4413      	add	r3, r2
 8003770:	4a04      	ldr	r2, [pc, #16]	; (8003784 <HAL_IncTick+0x24>)
 8003772:	6013      	str	r3, [r2, #0]
}
 8003774:	bf00      	nop
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	20000008 	.word	0x20000008
 8003784:	20001108 	.word	0x20001108

08003788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  return uwTick;
 800378c:	4b03      	ldr	r3, [pc, #12]	; (800379c <HAL_GetTick+0x14>)
 800378e:	681b      	ldr	r3, [r3, #0]
}
 8003790:	4618      	mov	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	20001108 	.word	0x20001108

080037a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037a8:	f7ff ffee 	bl	8003788 <HAL_GetTick>
 80037ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037b8:	d005      	beq.n	80037c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037ba:	4b0a      	ldr	r3, [pc, #40]	; (80037e4 <HAL_Delay+0x44>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4413      	add	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037c6:	bf00      	nop
 80037c8:	f7ff ffde 	bl	8003788 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d8f7      	bhi.n	80037c8 <HAL_Delay+0x28>
  {
  }
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20000008 	.word	0x20000008

080037e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e031      	b.n	8003862 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	d109      	bne.n	800381a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7fe ffe2 	bl	80027d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	2b00      	cmp	r3, #0
 8003824:	d116      	bne.n	8003854 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800382a:	4b10      	ldr	r3, [pc, #64]	; (800386c <HAL_ADC_Init+0x84>)
 800382c:	4013      	ands	r3, r2
 800382e:	f043 0202 	orr.w	r2, r3, #2
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f964 	bl	8003b04 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f023 0303 	bic.w	r3, r3, #3
 800384a:	f043 0201 	orr.w	r2, r3, #1
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	641a      	str	r2, [r3, #64]	; 0x40
 8003852:	e001      	b.n	8003858 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003860:	7bfb      	ldrb	r3, [r7, #15]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	ffffeefd 	.word	0xffffeefd

08003870 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_ADC_ConfigChannel+0x1c>
 8003888:	2302      	movs	r3, #2
 800388a:	e12a      	b.n	8003ae2 <HAL_ADC_ConfigChannel+0x272>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b09      	cmp	r3, #9
 800389a:	d93a      	bls.n	8003912 <HAL_ADC_ConfigChannel+0xa2>
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038a4:	d035      	beq.n	8003912 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68d9      	ldr	r1, [r3, #12]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	461a      	mov	r2, r3
 80038b4:	4613      	mov	r3, r2
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	4413      	add	r3, r2
 80038ba:	3b1e      	subs	r3, #30
 80038bc:	2207      	movs	r2, #7
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43da      	mvns	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	400a      	ands	r2, r1
 80038ca:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a87      	ldr	r2, [pc, #540]	; (8003af0 <HAL_ADC_ConfigChannel+0x280>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d10a      	bne.n	80038ec <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68d9      	ldr	r1, [r3, #12]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	061a      	lsls	r2, r3, #24
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038ea:	e035      	b.n	8003958 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68d9      	ldr	r1, [r3, #12]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	4618      	mov	r0, r3
 80038fe:	4603      	mov	r3, r0
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	4403      	add	r3, r0
 8003904:	3b1e      	subs	r3, #30
 8003906:	409a      	lsls	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003910:	e022      	b.n	8003958 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6919      	ldr	r1, [r3, #16]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	b29b      	uxth	r3, r3
 800391e:	461a      	mov	r2, r3
 8003920:	4613      	mov	r3, r2
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	4413      	add	r3, r2
 8003926:	2207      	movs	r2, #7
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	43da      	mvns	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	400a      	ands	r2, r1
 8003934:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6919      	ldr	r1, [r3, #16]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	b29b      	uxth	r3, r3
 8003946:	4618      	mov	r0, r3
 8003948:	4603      	mov	r3, r0
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	4403      	add	r3, r0
 800394e:	409a      	lsls	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b06      	cmp	r3, #6
 800395e:	d824      	bhi.n	80039aa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	3b05      	subs	r3, #5
 8003972:	221f      	movs	r2, #31
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43da      	mvns	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	400a      	ands	r2, r1
 8003980:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	b29b      	uxth	r3, r3
 800398e:	4618      	mov	r0, r3
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	3b05      	subs	r3, #5
 800399c:	fa00 f203 	lsl.w	r2, r0, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	635a      	str	r2, [r3, #52]	; 0x34
 80039a8:	e04c      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b0c      	cmp	r3, #12
 80039b0:	d824      	bhi.n	80039fc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	3b23      	subs	r3, #35	; 0x23
 80039c4:	221f      	movs	r2, #31
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43da      	mvns	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	400a      	ands	r2, r1
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	4618      	mov	r0, r3
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	3b23      	subs	r3, #35	; 0x23
 80039ee:	fa00 f203 	lsl.w	r2, r0, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	631a      	str	r2, [r3, #48]	; 0x30
 80039fa:	e023      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	4613      	mov	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3b41      	subs	r3, #65	; 0x41
 8003a0e:	221f      	movs	r2, #31
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	43da      	mvns	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	400a      	ands	r2, r1
 8003a1c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	4613      	mov	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	3b41      	subs	r3, #65	; 0x41
 8003a38:	fa00 f203 	lsl.w	r2, r0, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a2a      	ldr	r2, [pc, #168]	; (8003af4 <HAL_ADC_ConfigChannel+0x284>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d10a      	bne.n	8003a64 <HAL_ADC_ConfigChannel+0x1f4>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a56:	d105      	bne.n	8003a64 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003a58:	4b27      	ldr	r3, [pc, #156]	; (8003af8 <HAL_ADC_ConfigChannel+0x288>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	4a26      	ldr	r2, [pc, #152]	; (8003af8 <HAL_ADC_ConfigChannel+0x288>)
 8003a5e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003a62:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a22      	ldr	r2, [pc, #136]	; (8003af4 <HAL_ADC_ConfigChannel+0x284>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d109      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x212>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b12      	cmp	r3, #18
 8003a74:	d105      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003a76:	4b20      	ldr	r3, [pc, #128]	; (8003af8 <HAL_ADC_ConfigChannel+0x288>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	4a1f      	ldr	r2, [pc, #124]	; (8003af8 <HAL_ADC_ConfigChannel+0x288>)
 8003a7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a80:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a1b      	ldr	r2, [pc, #108]	; (8003af4 <HAL_ADC_ConfigChannel+0x284>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d125      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x268>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a17      	ldr	r2, [pc, #92]	; (8003af0 <HAL_ADC_ConfigChannel+0x280>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d003      	beq.n	8003a9e <HAL_ADC_ConfigChannel+0x22e>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b11      	cmp	r3, #17
 8003a9c:	d11c      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003a9e:	4b16      	ldr	r3, [pc, #88]	; (8003af8 <HAL_ADC_ConfigChannel+0x288>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4a15      	ldr	r2, [pc, #84]	; (8003af8 <HAL_ADC_ConfigChannel+0x288>)
 8003aa4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003aa8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a10      	ldr	r2, [pc, #64]	; (8003af0 <HAL_ADC_ConfigChannel+0x280>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d111      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003ab4:	4b11      	ldr	r3, [pc, #68]	; (8003afc <HAL_ADC_ConfigChannel+0x28c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a11      	ldr	r2, [pc, #68]	; (8003b00 <HAL_ADC_ConfigChannel+0x290>)
 8003aba:	fba2 2303 	umull	r2, r3, r2, r3
 8003abe:	0c9a      	lsrs	r2, r3, #18
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003aca:	e002      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1f9      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	10000012 	.word	0x10000012
 8003af4:	40012000 	.word	0x40012000
 8003af8:	40012300 	.word	0x40012300
 8003afc:	20000000 	.word	0x20000000
 8003b00:	431bde83 	.word	0x431bde83

08003b04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003b0c:	4b78      	ldr	r3, [pc, #480]	; (8003cf0 <ADC_Init+0x1ec>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	4a77      	ldr	r2, [pc, #476]	; (8003cf0 <ADC_Init+0x1ec>)
 8003b12:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003b16:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003b18:	4b75      	ldr	r3, [pc, #468]	; (8003cf0 <ADC_Init+0x1ec>)
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	4973      	ldr	r1, [pc, #460]	; (8003cf0 <ADC_Init+0x1ec>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6859      	ldr	r1, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	021a      	lsls	r2, r3, #8
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003b58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6859      	ldr	r1, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6899      	ldr	r1, [r3, #8]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b92:	4a58      	ldr	r2, [pc, #352]	; (8003cf4 <ADC_Init+0x1f0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d022      	beq.n	8003bde <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ba6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6899      	ldr	r1, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003bc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6899      	ldr	r1, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	609a      	str	r2, [r3, #8]
 8003bdc:	e00f      	b.n	8003bfe <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003bfc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0202 	bic.w	r2, r2, #2
 8003c0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6899      	ldr	r1, [r3, #8]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	005a      	lsls	r2, r3, #1
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d01b      	beq.n	8003c64 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c3a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003c4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6859      	ldr	r1, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	3b01      	subs	r3, #1
 8003c58:	035a      	lsls	r2, r3, #13
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
 8003c62:	e007      	b.n	8003c74 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c72:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003c82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	051a      	lsls	r2, r3, #20
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ca8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6899      	ldr	r1, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003cb6:	025a      	lsls	r2, r3, #9
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6899      	ldr	r1, [r3, #8]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	029a      	lsls	r2, r3, #10
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	609a      	str	r2, [r3, #8]
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	40012300 	.word	0x40012300
 8003cf4:	0f000001 	.word	0x0f000001

08003cf8 <__NVIC_SetPriorityGrouping>:
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f003 0307 	and.w	r3, r3, #7
 8003d06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d08:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <__NVIC_SetPriorityGrouping+0x40>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d14:	4013      	ands	r3, r2
 8003d16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d20:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <__NVIC_SetPriorityGrouping+0x44>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d26:	4a04      	ldr	r2, [pc, #16]	; (8003d38 <__NVIC_SetPriorityGrouping+0x40>)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	60d3      	str	r3, [r2, #12]
}
 8003d2c:	bf00      	nop
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	e000ed00 	.word	0xe000ed00
 8003d3c:	05fa0000 	.word	0x05fa0000

08003d40 <__NVIC_GetPriorityGrouping>:
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d44:	4b04      	ldr	r3, [pc, #16]	; (8003d58 <__NVIC_GetPriorityGrouping+0x18>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	0a1b      	lsrs	r3, r3, #8
 8003d4a:	f003 0307 	and.w	r3, r3, #7
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	e000ed00 	.word	0xe000ed00

08003d5c <__NVIC_EnableIRQ>:
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	db0b      	blt.n	8003d86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
 8003d70:	f003 021f 	and.w	r2, r3, #31
 8003d74:	4907      	ldr	r1, [pc, #28]	; (8003d94 <__NVIC_EnableIRQ+0x38>)
 8003d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7a:	095b      	lsrs	r3, r3, #5
 8003d7c:	2001      	movs	r0, #1
 8003d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	e000e100 	.word	0xe000e100

08003d98 <__NVIC_SetPriority>:
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	6039      	str	r1, [r7, #0]
 8003da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	db0a      	blt.n	8003dc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	490c      	ldr	r1, [pc, #48]	; (8003de4 <__NVIC_SetPriority+0x4c>)
 8003db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db6:	0112      	lsls	r2, r2, #4
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	440b      	add	r3, r1
 8003dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003dc0:	e00a      	b.n	8003dd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	4908      	ldr	r1, [pc, #32]	; (8003de8 <__NVIC_SetPriority+0x50>)
 8003dc8:	79fb      	ldrb	r3, [r7, #7]
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	3b04      	subs	r3, #4
 8003dd0:	0112      	lsls	r2, r2, #4
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	761a      	strb	r2, [r3, #24]
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	e000e100 	.word	0xe000e100
 8003de8:	e000ed00 	.word	0xe000ed00

08003dec <NVIC_EncodePriority>:
{
 8003dec:	b480      	push	{r7}
 8003dee:	b089      	sub	sp, #36	; 0x24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f003 0307 	and.w	r3, r3, #7
 8003dfe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	f1c3 0307 	rsb	r3, r3, #7
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	bf28      	it	cs
 8003e0a:	2304      	movcs	r3, #4
 8003e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	3304      	adds	r3, #4
 8003e12:	2b06      	cmp	r3, #6
 8003e14:	d902      	bls.n	8003e1c <NVIC_EncodePriority+0x30>
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	3b03      	subs	r3, #3
 8003e1a:	e000      	b.n	8003e1e <NVIC_EncodePriority+0x32>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2a:	43da      	mvns	r2, r3
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	401a      	ands	r2, r3
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3e:	43d9      	mvns	r1, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e44:	4313      	orrs	r3, r2
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3724      	adds	r7, #36	; 0x24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
	...

08003e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e64:	d301      	bcc.n	8003e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e66:	2301      	movs	r3, #1
 8003e68:	e00f      	b.n	8003e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e6a:	4a0a      	ldr	r2, [pc, #40]	; (8003e94 <SysTick_Config+0x40>)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e72:	210f      	movs	r1, #15
 8003e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e78:	f7ff ff8e 	bl	8003d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <SysTick_Config+0x40>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e82:	4b04      	ldr	r3, [pc, #16]	; (8003e94 <SysTick_Config+0x40>)
 8003e84:	2207      	movs	r2, #7
 8003e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	e000e010 	.word	0xe000e010

08003e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7ff ff29 	bl	8003cf8 <__NVIC_SetPriorityGrouping>
}
 8003ea6:	bf00      	nop
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b086      	sub	sp, #24
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	607a      	str	r2, [r7, #4]
 8003eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ec0:	f7ff ff3e 	bl	8003d40 <__NVIC_GetPriorityGrouping>
 8003ec4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	68b9      	ldr	r1, [r7, #8]
 8003eca:	6978      	ldr	r0, [r7, #20]
 8003ecc:	f7ff ff8e 	bl	8003dec <NVIC_EncodePriority>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ed6:	4611      	mov	r1, r2
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff ff5d 	bl	8003d98 <__NVIC_SetPriority>
}
 8003ede:	bf00      	nop
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b082      	sub	sp, #8
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	4603      	mov	r3, r0
 8003eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff ff31 	bl	8003d5c <__NVIC_EnableIRQ>
}
 8003efa:	bf00      	nop
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b082      	sub	sp, #8
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7ff ffa2 	bl	8003e54 <SysTick_Config>
 8003f10:	4603      	mov	r3, r0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e054      	b.n	8003fd8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	7f5b      	ldrb	r3, [r3, #29]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d105      	bne.n	8003f44 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fe fca0 	bl	8002884 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	791b      	ldrb	r3, [r3, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10c      	bne.n	8003f6c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a22      	ldr	r2, [pc, #136]	; (8003fe0 <HAL_CRC_Init+0xc4>)
 8003f58:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0218 	bic.w	r2, r2, #24
 8003f68:	609a      	str	r2, [r3, #8]
 8003f6a:	e00c      	b.n	8003f86 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6899      	ldr	r1, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	461a      	mov	r2, r3
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f834 	bl	8003fe4 <HAL_CRCEx_Polynomial_Set>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e028      	b.n	8003fd8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	795b      	ldrb	r3, [r3, #5]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d105      	bne.n	8003f9a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f96:	611a      	str	r2, [r3, #16]
 8003f98:	e004      	b.n	8003fa4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6912      	ldr	r2, [r2, #16]
 8003fa2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695a      	ldr	r2, [r3, #20]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699a      	ldr	r2, [r3, #24]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	04c11db7 	.word	0x04c11db7

08003fe4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003ff4:	231f      	movs	r3, #31
 8003ff6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003ff8:	bf00      	nop
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1e5a      	subs	r2, r3, #1
 8003ffe:	613a      	str	r2, [r7, #16]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d009      	beq.n	8004018 <HAL_CRCEx_Polynomial_Set+0x34>
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f003 031f 	and.w	r3, r3, #31
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	fa22 f303 	lsr.w	r3, r2, r3
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0f0      	beq.n	8003ffa <HAL_CRCEx_Polynomial_Set+0x16>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b18      	cmp	r3, #24
 800401c:	d846      	bhi.n	80040ac <HAL_CRCEx_Polynomial_Set+0xc8>
 800401e:	a201      	add	r2, pc, #4	; (adr r2, 8004024 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004024:	080040b3 	.word	0x080040b3
 8004028:	080040ad 	.word	0x080040ad
 800402c:	080040ad 	.word	0x080040ad
 8004030:	080040ad 	.word	0x080040ad
 8004034:	080040ad 	.word	0x080040ad
 8004038:	080040ad 	.word	0x080040ad
 800403c:	080040ad 	.word	0x080040ad
 8004040:	080040ad 	.word	0x080040ad
 8004044:	080040a1 	.word	0x080040a1
 8004048:	080040ad 	.word	0x080040ad
 800404c:	080040ad 	.word	0x080040ad
 8004050:	080040ad 	.word	0x080040ad
 8004054:	080040ad 	.word	0x080040ad
 8004058:	080040ad 	.word	0x080040ad
 800405c:	080040ad 	.word	0x080040ad
 8004060:	080040ad 	.word	0x080040ad
 8004064:	08004095 	.word	0x08004095
 8004068:	080040ad 	.word	0x080040ad
 800406c:	080040ad 	.word	0x080040ad
 8004070:	080040ad 	.word	0x080040ad
 8004074:	080040ad 	.word	0x080040ad
 8004078:	080040ad 	.word	0x080040ad
 800407c:	080040ad 	.word	0x080040ad
 8004080:	080040ad 	.word	0x080040ad
 8004084:	08004089 	.word	0x08004089
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	2b06      	cmp	r3, #6
 800408c:	d913      	bls.n	80040b6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004092:	e010      	b.n	80040b6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	2b07      	cmp	r3, #7
 8004098:	d90f      	bls.n	80040ba <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800409e:	e00c      	b.n	80040ba <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	2b0f      	cmp	r3, #15
 80040a4:	d90b      	bls.n	80040be <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80040aa:	e008      	b.n	80040be <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	75fb      	strb	r3, [r7, #23]
      break;
 80040b0:	e006      	b.n	80040c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80040b2:	bf00      	nop
 80040b4:	e004      	b.n	80040c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80040b6:	bf00      	nop
 80040b8:	e002      	b.n	80040c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80040ba:	bf00      	nop
 80040bc:	e000      	b.n	80040c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80040be:	bf00      	nop
  }
  if (status == HAL_OK)
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10d      	bne.n	80040e2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f023 0118 	bic.w	r1, r3, #24
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	430a      	orrs	r2, r1
 80040e0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80040e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	371c      	adds	r7, #28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e069      	b.n	80041d6 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d102      	bne.n	8004114 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fe fbd8 	bl	80028c4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6819      	ldr	r1, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	4b2a      	ldr	r3, [pc, #168]	; (80041e0 <HAL_DCMI_Init+0xf0>)
 8004136:	400b      	ands	r3, r1
 8004138:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6819      	ldr	r1, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800414e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800415a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004166:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004172:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800417e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2b10      	cmp	r3, #16
 800418e:	d112      	bne.n	80041b6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	7f1b      	ldrb	r3, [r3, #28]
 8004194:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	7f5b      	ldrb	r3, [r3, #29]
 800419a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800419c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	7f9b      	ldrb	r3, [r3, #30]
 80041a2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80041a4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	7fdb      	ldrb	r3, [r3, #31]
 80041ac:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80041b2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80041b4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f042 021e 	orr.w	r2, r2, #30
 80041c4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	ffe0f007 	.word	0xffe0f007

080041e4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e039      	b.n	800426a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d106      	bne.n	8004210 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7fe fc18 	bl	8002a40 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004234:	f023 0107 	bic.w	r1, r3, #7
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800424a:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <HAL_DMA2D_Init+0x90>)
 800424c:	4013      	ands	r3, r2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	68d1      	ldr	r1, [r2, #12]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6812      	ldr	r2, [r2, #0]
 8004256:	430b      	orrs	r3, r1
 8004258:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	ffffc000 	.word	0xffffc000

08004278 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d026      	beq.n	80042e8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d021      	beq.n	80042e8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042b2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b8:	f043 0201 	orr.w	r2, r3, #1
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2201      	movs	r2, #1
 80042c6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2204      	movs	r2, #4
 80042cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d026      	beq.n	8004340 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d021      	beq.n	8004340 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800430a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2220      	movs	r2, #32
 8004312:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004318:	f043 0202 	orr.w	r2, r3, #2
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2204      	movs	r2, #4
 8004324:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b00      	cmp	r3, #0
 8004348:	d026      	beq.n	8004398 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004350:	2b00      	cmp	r3, #0
 8004352:	d021      	beq.n	8004398 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004362:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2208      	movs	r2, #8
 800436a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004370:	f043 0204 	orr.w	r2, r3, #4
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2204      	movs	r2, #4
 800437c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d013      	beq.n	80043ca <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00e      	beq.n	80043ca <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ba:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2204      	movs	r2, #4
 80043c2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f853 	bl	8004470 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d024      	beq.n	800441e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d01f      	beq.n	800441e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80043ec:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2202      	movs	r2, #2
 80043f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01f      	beq.n	8004468 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d01a      	beq.n	8004468 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004440:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2210      	movs	r2, #16
 8004448:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f80e 	bl	8004484 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004468:	bf00      	nop
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_DMA2D_ConfigLayer+0x20>
 80044b4:	2302      	movs	r3, #2
 80044b6:	e079      	b.n	80045ac <HAL_DMA2D_ConfigLayer+0x114>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	3318      	adds	r3, #24
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	4413      	add	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	041b      	lsls	r3, r3, #16
 80044de:	4313      	orrs	r3, r2
 80044e0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80044e2:	4b35      	ldr	r3, [pc, #212]	; (80045b8 <HAL_DMA2D_ConfigLayer+0x120>)
 80044e4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b0a      	cmp	r3, #10
 80044ec:	d003      	beq.n	80044f6 <HAL_DMA2D_ConfigLayer+0x5e>
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b09      	cmp	r3, #9
 80044f4:	d107      	bne.n	8004506 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	4313      	orrs	r3, r2
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	e005      	b.n	8004512 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	061b      	lsls	r3, r3, #24
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	4313      	orrs	r3, r2
 8004510:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d120      	bne.n	800455a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	43db      	mvns	r3, r3
 8004522:	ea02 0103 	and.w	r1, r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	430a      	orrs	r2, r1
 800452e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	6812      	ldr	r2, [r2, #0]
 8004538:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b0a      	cmp	r3, #10
 8004540:	d003      	beq.n	800454a <HAL_DMA2D_ConfigLayer+0xb2>
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b09      	cmp	r3, #9
 8004548:	d127      	bne.n	800459a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004556:	629a      	str	r2, [r3, #40]	; 0x28
 8004558:	e01f      	b.n	800459a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69da      	ldr	r2, [r3, #28]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	43db      	mvns	r3, r3
 8004564:	ea02 0103 	and.w	r1, r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	430a      	orrs	r2, r1
 8004570:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	6812      	ldr	r2, [r2, #0]
 800457a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b0a      	cmp	r3, #10
 8004582:	d003      	beq.n	800458c <HAL_DMA2D_ConfigLayer+0xf4>
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b09      	cmp	r3, #9
 800458a:	d106      	bne.n	800459a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004598:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	371c      	adds	r7, #28
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	ff03000f 	.word	0xff03000f

080045bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045bc:	b480      	push	{r7}
 80045be:	b089      	sub	sp, #36	; 0x24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80045c6:	2300      	movs	r3, #0
 80045c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80045ce:	2300      	movs	r3, #0
 80045d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80045d6:	2300      	movs	r3, #0
 80045d8:	61fb      	str	r3, [r7, #28]
 80045da:	e175      	b.n	80048c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80045dc:	2201      	movs	r2, #1
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4013      	ands	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	f040 8164 	bne.w	80048c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d00b      	beq.n	800461a <HAL_GPIO_Init+0x5e>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2b02      	cmp	r3, #2
 8004608:	d007      	beq.n	800461a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800460e:	2b11      	cmp	r3, #17
 8004610:	d003      	beq.n	800461a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b12      	cmp	r3, #18
 8004618:	d130      	bne.n	800467c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	2203      	movs	r2, #3
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	43db      	mvns	r3, r3
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	4013      	ands	r3, r2
 8004630:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	4313      	orrs	r3, r2
 8004642:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004650:	2201      	movs	r2, #1
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	43db      	mvns	r3, r3
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	4013      	ands	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	091b      	lsrs	r3, r3, #4
 8004666:	f003 0201 	and.w	r2, r3, #1
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	4313      	orrs	r3, r2
 8004674:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	2203      	movs	r2, #3
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	43db      	mvns	r3, r3
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	4013      	ands	r3, r2
 8004692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d003      	beq.n	80046bc <HAL_GPIO_Init+0x100>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2b12      	cmp	r3, #18
 80046ba:	d123      	bne.n	8004704 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	08da      	lsrs	r2, r3, #3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3208      	adds	r2, #8
 80046c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	220f      	movs	r2, #15
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	43db      	mvns	r3, r3
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	4013      	ands	r3, r2
 80046de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	f003 0307 	and.w	r3, r3, #7
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	08da      	lsrs	r2, r3, #3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3208      	adds	r2, #8
 80046fe:	69b9      	ldr	r1, [r7, #24]
 8004700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	2203      	movs	r2, #3
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	43db      	mvns	r3, r3
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	4013      	ands	r3, r2
 800471a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f003 0203 	and.w	r2, r3, #3
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4313      	orrs	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 80be 	beq.w	80048c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004746:	4b66      	ldr	r3, [pc, #408]	; (80048e0 <HAL_GPIO_Init+0x324>)
 8004748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474a:	4a65      	ldr	r2, [pc, #404]	; (80048e0 <HAL_GPIO_Init+0x324>)
 800474c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004750:	6453      	str	r3, [r2, #68]	; 0x44
 8004752:	4b63      	ldr	r3, [pc, #396]	; (80048e0 <HAL_GPIO_Init+0x324>)
 8004754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800475e:	4a61      	ldr	r2, [pc, #388]	; (80048e4 <HAL_GPIO_Init+0x328>)
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	089b      	lsrs	r3, r3, #2
 8004764:	3302      	adds	r3, #2
 8004766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800476a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	220f      	movs	r2, #15
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	43db      	mvns	r3, r3
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	4013      	ands	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a58      	ldr	r2, [pc, #352]	; (80048e8 <HAL_GPIO_Init+0x32c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d037      	beq.n	80047fa <HAL_GPIO_Init+0x23e>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a57      	ldr	r2, [pc, #348]	; (80048ec <HAL_GPIO_Init+0x330>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d031      	beq.n	80047f6 <HAL_GPIO_Init+0x23a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a56      	ldr	r2, [pc, #344]	; (80048f0 <HAL_GPIO_Init+0x334>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d02b      	beq.n	80047f2 <HAL_GPIO_Init+0x236>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a55      	ldr	r2, [pc, #340]	; (80048f4 <HAL_GPIO_Init+0x338>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d025      	beq.n	80047ee <HAL_GPIO_Init+0x232>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a54      	ldr	r2, [pc, #336]	; (80048f8 <HAL_GPIO_Init+0x33c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d01f      	beq.n	80047ea <HAL_GPIO_Init+0x22e>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a53      	ldr	r2, [pc, #332]	; (80048fc <HAL_GPIO_Init+0x340>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d019      	beq.n	80047e6 <HAL_GPIO_Init+0x22a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a52      	ldr	r2, [pc, #328]	; (8004900 <HAL_GPIO_Init+0x344>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d013      	beq.n	80047e2 <HAL_GPIO_Init+0x226>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a51      	ldr	r2, [pc, #324]	; (8004904 <HAL_GPIO_Init+0x348>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d00d      	beq.n	80047de <HAL_GPIO_Init+0x222>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a50      	ldr	r2, [pc, #320]	; (8004908 <HAL_GPIO_Init+0x34c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d007      	beq.n	80047da <HAL_GPIO_Init+0x21e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a4f      	ldr	r2, [pc, #316]	; (800490c <HAL_GPIO_Init+0x350>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d101      	bne.n	80047d6 <HAL_GPIO_Init+0x21a>
 80047d2:	2309      	movs	r3, #9
 80047d4:	e012      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047d6:	230a      	movs	r3, #10
 80047d8:	e010      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047da:	2308      	movs	r3, #8
 80047dc:	e00e      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047de:	2307      	movs	r3, #7
 80047e0:	e00c      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047e2:	2306      	movs	r3, #6
 80047e4:	e00a      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047e6:	2305      	movs	r3, #5
 80047e8:	e008      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047ea:	2304      	movs	r3, #4
 80047ec:	e006      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047ee:	2303      	movs	r3, #3
 80047f0:	e004      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047f2:	2302      	movs	r3, #2
 80047f4:	e002      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <HAL_GPIO_Init+0x240>
 80047fa:	2300      	movs	r3, #0
 80047fc:	69fa      	ldr	r2, [r7, #28]
 80047fe:	f002 0203 	and.w	r2, r2, #3
 8004802:	0092      	lsls	r2, r2, #2
 8004804:	4093      	lsls	r3, r2
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	4313      	orrs	r3, r2
 800480a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800480c:	4935      	ldr	r1, [pc, #212]	; (80048e4 <HAL_GPIO_Init+0x328>)
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	089b      	lsrs	r3, r3, #2
 8004812:	3302      	adds	r3, #2
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800481a:	4b3d      	ldr	r3, [pc, #244]	; (8004910 <HAL_GPIO_Init+0x354>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	43db      	mvns	r3, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4013      	ands	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	4313      	orrs	r3, r2
 800483c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800483e:	4a34      	ldr	r2, [pc, #208]	; (8004910 <HAL_GPIO_Init+0x354>)
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004844:	4b32      	ldr	r3, [pc, #200]	; (8004910 <HAL_GPIO_Init+0x354>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	43db      	mvns	r3, r3
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4013      	ands	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004868:	4a29      	ldr	r2, [pc, #164]	; (8004910 <HAL_GPIO_Init+0x354>)
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800486e:	4b28      	ldr	r3, [pc, #160]	; (8004910 <HAL_GPIO_Init+0x354>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	43db      	mvns	r3, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4013      	ands	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004892:	4a1f      	ldr	r2, [pc, #124]	; (8004910 <HAL_GPIO_Init+0x354>)
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004898:	4b1d      	ldr	r3, [pc, #116]	; (8004910 <HAL_GPIO_Init+0x354>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	43db      	mvns	r3, r3
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	4013      	ands	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048bc:	4a14      	ldr	r2, [pc, #80]	; (8004910 <HAL_GPIO_Init+0x354>)
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	3301      	adds	r3, #1
 80048c6:	61fb      	str	r3, [r7, #28]
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	2b0f      	cmp	r3, #15
 80048cc:	f67f ae86 	bls.w	80045dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80048d0:	bf00      	nop
 80048d2:	bf00      	nop
 80048d4:	3724      	adds	r7, #36	; 0x24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40023800 	.word	0x40023800
 80048e4:	40013800 	.word	0x40013800
 80048e8:	40020000 	.word	0x40020000
 80048ec:	40020400 	.word	0x40020400
 80048f0:	40020800 	.word	0x40020800
 80048f4:	40020c00 	.word	0x40020c00
 80048f8:	40021000 	.word	0x40021000
 80048fc:	40021400 	.word	0x40021400
 8004900:	40021800 	.word	0x40021800
 8004904:	40021c00 	.word	0x40021c00
 8004908:	40022000 	.word	0x40022000
 800490c:	40022400 	.word	0x40022400
 8004910:	40013c00 	.word	0x40013c00

08004914 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	887b      	ldrh	r3, [r7, #2]
 8004926:	4013      	ands	r3, r2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800492c:	2301      	movs	r3, #1
 800492e:	73fb      	strb	r3, [r7, #15]
 8004930:	e001      	b.n	8004936 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004932:	2300      	movs	r3, #0
 8004934:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004936:	7bfb      	ldrb	r3, [r7, #15]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	460b      	mov	r3, r1
 800494e:	807b      	strh	r3, [r7, #2]
 8004950:	4613      	mov	r3, r2
 8004952:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004954:	787b      	ldrb	r3, [r7, #1]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800495a:	887a      	ldrh	r2, [r7, #2]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004960:	e003      	b.n	800496a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004962:	887b      	ldrh	r3, [r7, #2]
 8004964:	041a      	lsls	r2, r3, #16
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	619a      	str	r2, [r3, #24]
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004976:	b480      	push	{r7}
 8004978:	b085      	sub	sp, #20
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	460b      	mov	r3, r1
 8004980:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004988:	887a      	ldrh	r2, [r7, #2]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4013      	ands	r3, r2
 800498e:	041a      	lsls	r2, r3, #16
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	43d9      	mvns	r1, r3
 8004994:	887b      	ldrh	r3, [r7, #2]
 8004996:	400b      	ands	r3, r1
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	619a      	str	r2, [r3, #24]
}
 800499e:	bf00      	nop
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80049aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ac:	b08f      	sub	sp, #60	; 0x3c
 80049ae:	af0a      	add	r7, sp, #40	; 0x28
 80049b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e054      	b.n	8004a66 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d106      	bne.n	80049dc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f00a ffa2 	bl	800f920 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2203      	movs	r2, #3
 80049e0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d102      	bne.n	80049f6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f007 ff57 	bl	800c8ae <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	603b      	str	r3, [r7, #0]
 8004a06:	687e      	ldr	r6, [r7, #4]
 8004a08:	466d      	mov	r5, sp
 8004a0a:	f106 0410 	add.w	r4, r6, #16
 8004a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a1e:	1d33      	adds	r3, r6, #4
 8004a20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a22:	6838      	ldr	r0, [r7, #0]
 8004a24:	f007 feda 	bl	800c7dc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f007 ff4e 	bl	800c8d0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	603b      	str	r3, [r7, #0]
 8004a3a:	687e      	ldr	r6, [r7, #4]
 8004a3c:	466d      	mov	r5, sp
 8004a3e:	f106 0410 	add.w	r4, r6, #16
 8004a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a52:	1d33      	adds	r3, r6, #4
 8004a54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a56:	6838      	ldr	r0, [r7, #0]
 8004a58:	f008 f860 	bl	800cb1c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a6e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004a6e:	b590      	push	{r4, r7, lr}
 8004a70:	b089      	sub	sp, #36	; 0x24
 8004a72:	af04      	add	r7, sp, #16
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	4608      	mov	r0, r1
 8004a78:	4611      	mov	r1, r2
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	70fb      	strb	r3, [r7, #3]
 8004a80:	460b      	mov	r3, r1
 8004a82:	70bb      	strb	r3, [r7, #2]
 8004a84:	4613      	mov	r3, r2
 8004a86:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d101      	bne.n	8004a96 <HAL_HCD_HC_Init+0x28>
 8004a92:	2302      	movs	r3, #2
 8004a94:	e076      	b.n	8004b84 <HAL_HCD_HC_Init+0x116>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004a9e:	78fb      	ldrb	r3, [r7, #3]
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	212c      	movs	r1, #44	; 0x2c
 8004aa4:	fb01 f303 	mul.w	r3, r1, r3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	333d      	adds	r3, #61	; 0x3d
 8004aac:	2200      	movs	r2, #0
 8004aae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004ab0:	78fb      	ldrb	r3, [r7, #3]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	212c      	movs	r1, #44	; 0x2c
 8004ab6:	fb01 f303 	mul.w	r3, r1, r3
 8004aba:	4413      	add	r3, r2
 8004abc:	3338      	adds	r3, #56	; 0x38
 8004abe:	787a      	ldrb	r2, [r7, #1]
 8004ac0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004ac2:	78fb      	ldrb	r3, [r7, #3]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	212c      	movs	r1, #44	; 0x2c
 8004ac8:	fb01 f303 	mul.w	r3, r1, r3
 8004acc:	4413      	add	r3, r2
 8004ace:	3340      	adds	r3, #64	; 0x40
 8004ad0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004ad2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004ad4:	78fb      	ldrb	r3, [r7, #3]
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	212c      	movs	r1, #44	; 0x2c
 8004ada:	fb01 f303 	mul.w	r3, r1, r3
 8004ade:	4413      	add	r3, r2
 8004ae0:	3339      	adds	r3, #57	; 0x39
 8004ae2:	78fa      	ldrb	r2, [r7, #3]
 8004ae4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004ae6:	78fb      	ldrb	r3, [r7, #3]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	212c      	movs	r1, #44	; 0x2c
 8004aec:	fb01 f303 	mul.w	r3, r1, r3
 8004af0:	4413      	add	r3, r2
 8004af2:	333f      	adds	r3, #63	; 0x3f
 8004af4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004af8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004afa:	78fb      	ldrb	r3, [r7, #3]
 8004afc:	78ba      	ldrb	r2, [r7, #2]
 8004afe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b02:	b2d0      	uxtb	r0, r2
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	212c      	movs	r1, #44	; 0x2c
 8004b08:	fb01 f303 	mul.w	r3, r1, r3
 8004b0c:	4413      	add	r3, r2
 8004b0e:	333a      	adds	r3, #58	; 0x3a
 8004b10:	4602      	mov	r2, r0
 8004b12:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004b14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	da09      	bge.n	8004b30 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004b1c:	78fb      	ldrb	r3, [r7, #3]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	212c      	movs	r1, #44	; 0x2c
 8004b22:	fb01 f303 	mul.w	r3, r1, r3
 8004b26:	4413      	add	r3, r2
 8004b28:	333b      	adds	r3, #59	; 0x3b
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	e008      	b.n	8004b42 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004b30:	78fb      	ldrb	r3, [r7, #3]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	212c      	movs	r1, #44	; 0x2c
 8004b36:	fb01 f303 	mul.w	r3, r1, r3
 8004b3a:	4413      	add	r3, r2
 8004b3c:	333b      	adds	r3, #59	; 0x3b
 8004b3e:	2200      	movs	r2, #0
 8004b40:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004b42:	78fb      	ldrb	r3, [r7, #3]
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	212c      	movs	r1, #44	; 0x2c
 8004b48:	fb01 f303 	mul.w	r3, r1, r3
 8004b4c:	4413      	add	r3, r2
 8004b4e:	333c      	adds	r3, #60	; 0x3c
 8004b50:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004b54:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6818      	ldr	r0, [r3, #0]
 8004b5a:	787c      	ldrb	r4, [r7, #1]
 8004b5c:	78ba      	ldrb	r2, [r7, #2]
 8004b5e:	78f9      	ldrb	r1, [r7, #3]
 8004b60:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004b62:	9302      	str	r3, [sp, #8]
 8004b64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b68:	9301      	str	r3, [sp, #4]
 8004b6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	4623      	mov	r3, r4
 8004b72:	f008 f949 	bl	800ce08 <USB_HC_Init>
 8004b76:	4603      	mov	r3, r0
 8004b78:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd90      	pop	{r4, r7, pc}

08004b8c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d101      	bne.n	8004baa <HAL_HCD_HC_Halt+0x1e>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	e00f      	b.n	8004bca <HAL_HCD_HC_Halt+0x3e>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	78fa      	ldrb	r2, [r7, #3]
 8004bb8:	4611      	mov	r1, r2
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f008 fb85 	bl	800d2ca <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
	...

08004bd4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	4608      	mov	r0, r1
 8004bde:	4611      	mov	r1, r2
 8004be0:	461a      	mov	r2, r3
 8004be2:	4603      	mov	r3, r0
 8004be4:	70fb      	strb	r3, [r7, #3]
 8004be6:	460b      	mov	r3, r1
 8004be8:	70bb      	strb	r3, [r7, #2]
 8004bea:	4613      	mov	r3, r2
 8004bec:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004bee:	78fb      	ldrb	r3, [r7, #3]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	212c      	movs	r1, #44	; 0x2c
 8004bf4:	fb01 f303 	mul.w	r3, r1, r3
 8004bf8:	4413      	add	r3, r2
 8004bfa:	333b      	adds	r3, #59	; 0x3b
 8004bfc:	78ba      	ldrb	r2, [r7, #2]
 8004bfe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004c00:	78fb      	ldrb	r3, [r7, #3]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	212c      	movs	r1, #44	; 0x2c
 8004c06:	fb01 f303 	mul.w	r3, r1, r3
 8004c0a:	4413      	add	r3, r2
 8004c0c:	333f      	adds	r3, #63	; 0x3f
 8004c0e:	787a      	ldrb	r2, [r7, #1]
 8004c10:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004c12:	7c3b      	ldrb	r3, [r7, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d112      	bne.n	8004c3e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004c18:	78fb      	ldrb	r3, [r7, #3]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	212c      	movs	r1, #44	; 0x2c
 8004c1e:	fb01 f303 	mul.w	r3, r1, r3
 8004c22:	4413      	add	r3, r2
 8004c24:	3342      	adds	r3, #66	; 0x42
 8004c26:	2203      	movs	r2, #3
 8004c28:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004c2a:	78fb      	ldrb	r3, [r7, #3]
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	212c      	movs	r1, #44	; 0x2c
 8004c30:	fb01 f303 	mul.w	r3, r1, r3
 8004c34:	4413      	add	r3, r2
 8004c36:	333d      	adds	r3, #61	; 0x3d
 8004c38:	7f3a      	ldrb	r2, [r7, #28]
 8004c3a:	701a      	strb	r2, [r3, #0]
 8004c3c:	e008      	b.n	8004c50 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c3e:	78fb      	ldrb	r3, [r7, #3]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	212c      	movs	r1, #44	; 0x2c
 8004c44:	fb01 f303 	mul.w	r3, r1, r3
 8004c48:	4413      	add	r3, r2
 8004c4a:	3342      	adds	r3, #66	; 0x42
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004c50:	787b      	ldrb	r3, [r7, #1]
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	f200 80c6 	bhi.w	8004de4 <HAL_HCD_HC_SubmitRequest+0x210>
 8004c58:	a201      	add	r2, pc, #4	; (adr r2, 8004c60 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5e:	bf00      	nop
 8004c60:	08004c71 	.word	0x08004c71
 8004c64:	08004dd1 	.word	0x08004dd1
 8004c68:	08004cd5 	.word	0x08004cd5
 8004c6c:	08004d53 	.word	0x08004d53
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004c70:	7c3b      	ldrb	r3, [r7, #16]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	f040 80b8 	bne.w	8004de8 <HAL_HCD_HC_SubmitRequest+0x214>
 8004c78:	78bb      	ldrb	r3, [r7, #2]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f040 80b4 	bne.w	8004de8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004c80:	8b3b      	ldrh	r3, [r7, #24]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d108      	bne.n	8004c98 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004c86:	78fb      	ldrb	r3, [r7, #3]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	212c      	movs	r1, #44	; 0x2c
 8004c8c:	fb01 f303 	mul.w	r3, r1, r3
 8004c90:	4413      	add	r3, r2
 8004c92:	3355      	adds	r3, #85	; 0x55
 8004c94:	2201      	movs	r2, #1
 8004c96:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004c98:	78fb      	ldrb	r3, [r7, #3]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	212c      	movs	r1, #44	; 0x2c
 8004c9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ca2:	4413      	add	r3, r2
 8004ca4:	3355      	adds	r3, #85	; 0x55
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d109      	bne.n	8004cc0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004cac:	78fb      	ldrb	r3, [r7, #3]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	212c      	movs	r1, #44	; 0x2c
 8004cb2:	fb01 f303 	mul.w	r3, r1, r3
 8004cb6:	4413      	add	r3, r2
 8004cb8:	3342      	adds	r3, #66	; 0x42
 8004cba:	2200      	movs	r2, #0
 8004cbc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004cbe:	e093      	b.n	8004de8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004cc0:	78fb      	ldrb	r3, [r7, #3]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	212c      	movs	r1, #44	; 0x2c
 8004cc6:	fb01 f303 	mul.w	r3, r1, r3
 8004cca:	4413      	add	r3, r2
 8004ccc:	3342      	adds	r3, #66	; 0x42
 8004cce:	2202      	movs	r2, #2
 8004cd0:	701a      	strb	r2, [r3, #0]
      break;
 8004cd2:	e089      	b.n	8004de8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004cd4:	78bb      	ldrb	r3, [r7, #2]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d11d      	bne.n	8004d16 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004cda:	78fb      	ldrb	r3, [r7, #3]
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	212c      	movs	r1, #44	; 0x2c
 8004ce0:	fb01 f303 	mul.w	r3, r1, r3
 8004ce4:	4413      	add	r3, r2
 8004ce6:	3355      	adds	r3, #85	; 0x55
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d109      	bne.n	8004d02 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004cee:	78fb      	ldrb	r3, [r7, #3]
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	212c      	movs	r1, #44	; 0x2c
 8004cf4:	fb01 f303 	mul.w	r3, r1, r3
 8004cf8:	4413      	add	r3, r2
 8004cfa:	3342      	adds	r3, #66	; 0x42
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004d00:	e073      	b.n	8004dea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d02:	78fb      	ldrb	r3, [r7, #3]
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	212c      	movs	r1, #44	; 0x2c
 8004d08:	fb01 f303 	mul.w	r3, r1, r3
 8004d0c:	4413      	add	r3, r2
 8004d0e:	3342      	adds	r3, #66	; 0x42
 8004d10:	2202      	movs	r2, #2
 8004d12:	701a      	strb	r2, [r3, #0]
      break;
 8004d14:	e069      	b.n	8004dea <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004d16:	78fb      	ldrb	r3, [r7, #3]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	212c      	movs	r1, #44	; 0x2c
 8004d1c:	fb01 f303 	mul.w	r3, r1, r3
 8004d20:	4413      	add	r3, r2
 8004d22:	3354      	adds	r3, #84	; 0x54
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d109      	bne.n	8004d3e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d2a:	78fb      	ldrb	r3, [r7, #3]
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	212c      	movs	r1, #44	; 0x2c
 8004d30:	fb01 f303 	mul.w	r3, r1, r3
 8004d34:	4413      	add	r3, r2
 8004d36:	3342      	adds	r3, #66	; 0x42
 8004d38:	2200      	movs	r2, #0
 8004d3a:	701a      	strb	r2, [r3, #0]
      break;
 8004d3c:	e055      	b.n	8004dea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d3e:	78fb      	ldrb	r3, [r7, #3]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	212c      	movs	r1, #44	; 0x2c
 8004d44:	fb01 f303 	mul.w	r3, r1, r3
 8004d48:	4413      	add	r3, r2
 8004d4a:	3342      	adds	r3, #66	; 0x42
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	701a      	strb	r2, [r3, #0]
      break;
 8004d50:	e04b      	b.n	8004dea <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004d52:	78bb      	ldrb	r3, [r7, #2]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d11d      	bne.n	8004d94 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004d58:	78fb      	ldrb	r3, [r7, #3]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	212c      	movs	r1, #44	; 0x2c
 8004d5e:	fb01 f303 	mul.w	r3, r1, r3
 8004d62:	4413      	add	r3, r2
 8004d64:	3355      	adds	r3, #85	; 0x55
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d109      	bne.n	8004d80 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d6c:	78fb      	ldrb	r3, [r7, #3]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	212c      	movs	r1, #44	; 0x2c
 8004d72:	fb01 f303 	mul.w	r3, r1, r3
 8004d76:	4413      	add	r3, r2
 8004d78:	3342      	adds	r3, #66	; 0x42
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004d7e:	e034      	b.n	8004dea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	212c      	movs	r1, #44	; 0x2c
 8004d86:	fb01 f303 	mul.w	r3, r1, r3
 8004d8a:	4413      	add	r3, r2
 8004d8c:	3342      	adds	r3, #66	; 0x42
 8004d8e:	2202      	movs	r2, #2
 8004d90:	701a      	strb	r2, [r3, #0]
      break;
 8004d92:	e02a      	b.n	8004dea <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004d94:	78fb      	ldrb	r3, [r7, #3]
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	212c      	movs	r1, #44	; 0x2c
 8004d9a:	fb01 f303 	mul.w	r3, r1, r3
 8004d9e:	4413      	add	r3, r2
 8004da0:	3354      	adds	r3, #84	; 0x54
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d109      	bne.n	8004dbc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004da8:	78fb      	ldrb	r3, [r7, #3]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	212c      	movs	r1, #44	; 0x2c
 8004dae:	fb01 f303 	mul.w	r3, r1, r3
 8004db2:	4413      	add	r3, r2
 8004db4:	3342      	adds	r3, #66	; 0x42
 8004db6:	2200      	movs	r2, #0
 8004db8:	701a      	strb	r2, [r3, #0]
      break;
 8004dba:	e016      	b.n	8004dea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004dbc:	78fb      	ldrb	r3, [r7, #3]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	212c      	movs	r1, #44	; 0x2c
 8004dc2:	fb01 f303 	mul.w	r3, r1, r3
 8004dc6:	4413      	add	r3, r2
 8004dc8:	3342      	adds	r3, #66	; 0x42
 8004dca:	2202      	movs	r2, #2
 8004dcc:	701a      	strb	r2, [r3, #0]
      break;
 8004dce:	e00c      	b.n	8004dea <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004dd0:	78fb      	ldrb	r3, [r7, #3]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	212c      	movs	r1, #44	; 0x2c
 8004dd6:	fb01 f303 	mul.w	r3, r1, r3
 8004dda:	4413      	add	r3, r2
 8004ddc:	3342      	adds	r3, #66	; 0x42
 8004dde:	2200      	movs	r2, #0
 8004de0:	701a      	strb	r2, [r3, #0]
      break;
 8004de2:	e002      	b.n	8004dea <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004de4:	bf00      	nop
 8004de6:	e000      	b.n	8004dea <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004de8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004dea:	78fb      	ldrb	r3, [r7, #3]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	212c      	movs	r1, #44	; 0x2c
 8004df0:	fb01 f303 	mul.w	r3, r1, r3
 8004df4:	4413      	add	r3, r2
 8004df6:	3344      	adds	r3, #68	; 0x44
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	8b3a      	ldrh	r2, [r7, #24]
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	202c      	movs	r0, #44	; 0x2c
 8004e04:	fb00 f303 	mul.w	r3, r0, r3
 8004e08:	440b      	add	r3, r1
 8004e0a:	334c      	adds	r3, #76	; 0x4c
 8004e0c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004e0e:	78fb      	ldrb	r3, [r7, #3]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	212c      	movs	r1, #44	; 0x2c
 8004e14:	fb01 f303 	mul.w	r3, r1, r3
 8004e18:	4413      	add	r3, r2
 8004e1a:	3360      	adds	r3, #96	; 0x60
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004e20:	78fb      	ldrb	r3, [r7, #3]
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	212c      	movs	r1, #44	; 0x2c
 8004e26:	fb01 f303 	mul.w	r3, r1, r3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	3350      	adds	r3, #80	; 0x50
 8004e2e:	2200      	movs	r2, #0
 8004e30:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004e32:	78fb      	ldrb	r3, [r7, #3]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	212c      	movs	r1, #44	; 0x2c
 8004e38:	fb01 f303 	mul.w	r3, r1, r3
 8004e3c:	4413      	add	r3, r2
 8004e3e:	3339      	adds	r3, #57	; 0x39
 8004e40:	78fa      	ldrb	r2, [r7, #3]
 8004e42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004e44:	78fb      	ldrb	r3, [r7, #3]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	212c      	movs	r1, #44	; 0x2c
 8004e4a:	fb01 f303 	mul.w	r3, r1, r3
 8004e4e:	4413      	add	r3, r2
 8004e50:	3361      	adds	r3, #97	; 0x61
 8004e52:	2200      	movs	r2, #0
 8004e54:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6818      	ldr	r0, [r3, #0]
 8004e5a:	78fb      	ldrb	r3, [r7, #3]
 8004e5c:	222c      	movs	r2, #44	; 0x2c
 8004e5e:	fb02 f303 	mul.w	r3, r2, r3
 8004e62:	3338      	adds	r3, #56	; 0x38
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	18d1      	adds	r1, r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	461a      	mov	r2, r3
 8004e70:	f008 f8d8 	bl	800d024 <USB_HC_StartXfer>
 8004e74:	4603      	mov	r3, r0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop

08004e80 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f007 fdfd 	bl	800ca96 <USB_GetMode>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	f040 80ef 	bne.w	8005082 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f007 fde1 	bl	800ca70 <USB_ReadInterrupts>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 80e5 	beq.w	8005080 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f007 fdd8 	bl	800ca70 <USB_ReadInterrupts>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ec6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004eca:	d104      	bne.n	8004ed6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004ed4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f007 fdc8 	bl	800ca70 <USB_ReadInterrupts>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ee6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eea:	d104      	bne.n	8004ef6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ef4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f007 fdb8 	bl	800ca70 <USB_ReadInterrupts>
 8004f00:	4603      	mov	r3, r0
 8004f02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f0a:	d104      	bne.n	8004f16 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004f14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f007 fda8 	bl	800ca70 <USB_ReadInterrupts>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d103      	bne.n	8004f32 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f007 fd9a 	bl	800ca70 <USB_ReadInterrupts>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f46:	d115      	bne.n	8004f74 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004f50:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d108      	bne.n	8004f74 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f00a fd4e 	bl	800fa04 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f007 fe84 	bl	800cc7c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f007 fd79 	bl	800ca70 <USB_ReadInterrupts>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f88:	d102      	bne.n	8004f90 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f001 f9ff 	bl	800638e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f007 fd6b 	bl	800ca70 <USB_ReadInterrupts>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	f003 0308 	and.w	r3, r3, #8
 8004fa0:	2b08      	cmp	r3, #8
 8004fa2:	d106      	bne.n	8004fb2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f00a fd11 	bl	800f9cc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2208      	movs	r2, #8
 8004fb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f007 fd5a 	bl	800ca70 <USB_ReadInterrupts>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	f003 0310 	and.w	r3, r3, #16
 8004fc2:	2b10      	cmp	r3, #16
 8004fc4:	d101      	bne.n	8004fca <HAL_HCD_IRQHandler+0x14a>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e000      	b.n	8004fcc <HAL_HCD_IRQHandler+0x14c>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d012      	beq.n	8004ff6 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699a      	ldr	r2, [r3, #24]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0210 	bic.w	r2, r2, #16
 8004fde:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f001 f902 	bl	80061ea <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	699a      	ldr	r2, [r3, #24]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f042 0210 	orr.w	r2, r2, #16
 8004ff4:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f007 fd38 	bl	800ca70 <USB_ReadInterrupts>
 8005000:	4603      	mov	r3, r0
 8005002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005006:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800500a:	d13a      	bne.n	8005082 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4618      	mov	r0, r3
 8005012:	f008 f949 	bl	800d2a8 <USB_HC_ReadInterrupt>
 8005016:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005018:	2300      	movs	r3, #0
 800501a:	617b      	str	r3, [r7, #20]
 800501c:	e025      	b.n	800506a <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f003 030f 	and.w	r3, r3, #15
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	fa22 f303 	lsr.w	r3, r2, r3
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d018      	beq.n	8005064 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4413      	add	r3, r2
 800503a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005048:	d106      	bne.n	8005058 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	b2db      	uxtb	r3, r3
 800504e:	4619      	mov	r1, r3
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 f8ab 	bl	80051ac <HCD_HC_IN_IRQHandler>
 8005056:	e005      	b.n	8005064 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	4619      	mov	r1, r3
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fcc6 	bl	80059f0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	3301      	adds	r3, #1
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	429a      	cmp	r2, r3
 8005072:	d3d4      	bcc.n	800501e <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800507c:	615a      	str	r2, [r3, #20]
 800507e:	e000      	b.n	8005082 <HAL_HCD_IRQHandler+0x202>
      return;
 8005080:	bf00      	nop
    }
  }
}
 8005082:	3718      	adds	r7, #24
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005096:	2b01      	cmp	r3, #1
 8005098:	d101      	bne.n	800509e <HAL_HCD_Start+0x16>
 800509a:	2302      	movs	r3, #2
 800509c:	e013      	b.n	80050c6 <HAL_HCD_Start+0x3e>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f007 fbee 	bl	800c88c <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2101      	movs	r1, #1
 80050b6:	4618      	mov	r0, r3
 80050b8:	f007 fe44 	bl	800cd44 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b082      	sub	sp, #8
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d101      	bne.n	80050e4 <HAL_HCD_Stop+0x16>
 80050e0:	2302      	movs	r3, #2
 80050e2:	e00d      	b.n	8005100 <HAL_HCD_Stop+0x32>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f008 fa43 	bl	800d57c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4618      	mov	r0, r3
 8005116:	f007 fdeb 	bl	800ccf0 <USB_ResetPort>
 800511a:	4603      	mov	r3, r0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	460b      	mov	r3, r1
 800512e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005130:	78fb      	ldrb	r3, [r7, #3]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	212c      	movs	r1, #44	; 0x2c
 8005136:	fb01 f303 	mul.w	r3, r1, r3
 800513a:	4413      	add	r3, r2
 800513c:	3360      	adds	r3, #96	; 0x60
 800513e:	781b      	ldrb	r3, [r3, #0]
}
 8005140:	4618      	mov	r0, r3
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	460b      	mov	r3, r1
 8005156:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005158:	78fb      	ldrb	r3, [r7, #3]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	212c      	movs	r1, #44	; 0x2c
 800515e:	fb01 f303 	mul.w	r3, r1, r3
 8005162:	4413      	add	r3, r2
 8005164:	3350      	adds	r3, #80	; 0x50
 8005166:	681b      	ldr	r3, [r3, #0]
}
 8005168:	4618      	mov	r0, r3
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4618      	mov	r0, r3
 8005182:	f007 fe2f 	bl	800cde4 <USB_GetCurrentFrame>
 8005186:	4603      	mov	r3, r0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f007 fe0a 	bl	800cdb6 <USB_GetHostSpeed>
 80051a2:	4603      	mov	r3, r0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	460b      	mov	r3, r1
 80051b6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80051c2:	78fb      	ldrb	r3, [r7, #3]
 80051c4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f003 0304 	and.w	r3, r3, #4
 80051d8:	2b04      	cmp	r3, #4
 80051da:	d119      	bne.n	8005210 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e8:	461a      	mov	r2, r3
 80051ea:	2304      	movs	r3, #4
 80051ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	0151      	lsls	r1, r2, #5
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	440a      	add	r2, r1
 8005204:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005208:	f043 0302 	orr.w	r3, r3, #2
 800520c:	60d3      	str	r3, [r2, #12]
 800520e:	e101      	b.n	8005414 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	4413      	add	r3, r2
 8005218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005226:	d12b      	bne.n	8005280 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	4413      	add	r3, r2
 8005230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005234:	461a      	mov	r2, r3
 8005236:	f44f 7380 	mov.w	r3, #256	; 0x100
 800523a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	212c      	movs	r1, #44	; 0x2c
 8005242:	fb01 f303 	mul.w	r3, r1, r3
 8005246:	4413      	add	r3, r2
 8005248:	3361      	adds	r3, #97	; 0x61
 800524a:	2207      	movs	r2, #7
 800524c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	4413      	add	r3, r2
 8005256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	0151      	lsls	r1, r2, #5
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	440a      	add	r2, r1
 8005264:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005268:	f043 0302 	orr.w	r3, r3, #2
 800526c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	4611      	mov	r1, r2
 8005278:	4618      	mov	r0, r3
 800527a:	f008 f826 	bl	800d2ca <USB_HC_Halt>
 800527e:	e0c9      	b.n	8005414 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	4413      	add	r3, r2
 8005288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 0320 	and.w	r3, r3, #32
 8005292:	2b20      	cmp	r3, #32
 8005294:	d109      	bne.n	80052aa <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	4413      	add	r3, r2
 800529e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a2:	461a      	mov	r2, r3
 80052a4:	2320      	movs	r3, #32
 80052a6:	6093      	str	r3, [r2, #8]
 80052a8:	e0b4      	b.n	8005414 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f003 0308 	and.w	r3, r3, #8
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d133      	bne.n	8005328 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	0151      	lsls	r1, r2, #5
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	440a      	add	r2, r1
 80052d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052da:	f043 0302 	orr.w	r3, r3, #2
 80052de:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	212c      	movs	r1, #44	; 0x2c
 80052e6:	fb01 f303 	mul.w	r3, r1, r3
 80052ea:	4413      	add	r3, r2
 80052ec:	3361      	adds	r3, #97	; 0x61
 80052ee:	2205      	movs	r2, #5
 80052f0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fe:	461a      	mov	r2, r3
 8005300:	2310      	movs	r3, #16
 8005302:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	4413      	add	r3, r2
 800530c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005310:	461a      	mov	r2, r3
 8005312:	2308      	movs	r3, #8
 8005314:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	4611      	mov	r1, r2
 8005320:	4618      	mov	r0, r3
 8005322:	f007 ffd2 	bl	800d2ca <USB_HC_Halt>
 8005326:	e075      	b.n	8005414 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	4413      	add	r3, r2
 8005330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800533a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800533e:	d134      	bne.n	80053aa <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	4413      	add	r3, r2
 8005348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	0151      	lsls	r1, r2, #5
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	440a      	add	r2, r1
 8005356:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800535a:	f043 0302 	orr.w	r3, r3, #2
 800535e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	212c      	movs	r1, #44	; 0x2c
 8005366:	fb01 f303 	mul.w	r3, r1, r3
 800536a:	4413      	add	r3, r2
 800536c:	3361      	adds	r3, #97	; 0x61
 800536e:	2208      	movs	r2, #8
 8005370:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	4413      	add	r3, r2
 800537a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537e:	461a      	mov	r2, r3
 8005380:	2310      	movs	r3, #16
 8005382:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	4413      	add	r3, r2
 800538c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005390:	461a      	mov	r2, r3
 8005392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005396:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	4611      	mov	r1, r2
 80053a2:	4618      	mov	r0, r3
 80053a4:	f007 ff91 	bl	800d2ca <USB_HC_Halt>
 80053a8:	e034      	b.n	8005414 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	015a      	lsls	r2, r3, #5
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053bc:	2b80      	cmp	r3, #128	; 0x80
 80053be:	d129      	bne.n	8005414 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	0151      	lsls	r1, r2, #5
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	440a      	add	r2, r1
 80053d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053da:	f043 0302 	orr.w	r3, r3, #2
 80053de:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	212c      	movs	r1, #44	; 0x2c
 80053e6:	fb01 f303 	mul.w	r3, r1, r3
 80053ea:	4413      	add	r3, r2
 80053ec:	3361      	adds	r3, #97	; 0x61
 80053ee:	2206      	movs	r2, #6
 80053f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	b2d2      	uxtb	r2, r2
 80053fa:	4611      	mov	r1, r2
 80053fc:	4618      	mov	r0, r3
 80053fe:	f007 ff64 	bl	800d2ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	4413      	add	r3, r2
 800540a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540e:	461a      	mov	r2, r3
 8005410:	2380      	movs	r3, #128	; 0x80
 8005412:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	4413      	add	r3, r2
 800541c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800542a:	d122      	bne.n	8005472 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	4413      	add	r3, r2
 8005434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	0151      	lsls	r1, r2, #5
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	440a      	add	r2, r1
 8005442:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005446:	f043 0302 	orr.w	r3, r3, #2
 800544a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	4611      	mov	r1, r2
 8005456:	4618      	mov	r0, r3
 8005458:	f007 ff37 	bl	800d2ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	4413      	add	r3, r2
 8005464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005468:	461a      	mov	r2, r3
 800546a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800546e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005470:	e2ba      	b.n	80059e8 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	4413      	add	r3, r2
 800547a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b01      	cmp	r3, #1
 8005486:	f040 811b 	bne.w	80056c0 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d019      	beq.n	80054c6 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	212c      	movs	r1, #44	; 0x2c
 8005498:	fb01 f303 	mul.w	r3, r1, r3
 800549c:	4413      	add	r3, r2
 800549e:	3348      	adds	r3, #72	; 0x48
 80054a0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	0159      	lsls	r1, r3, #5
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	440b      	add	r3, r1
 80054aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80054b4:	1ad2      	subs	r2, r2, r3
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	202c      	movs	r0, #44	; 0x2c
 80054bc:	fb00 f303 	mul.w	r3, r0, r3
 80054c0:	440b      	add	r3, r1
 80054c2:	3350      	adds	r3, #80	; 0x50
 80054c4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	212c      	movs	r1, #44	; 0x2c
 80054cc:	fb01 f303 	mul.w	r3, r1, r3
 80054d0:	4413      	add	r3, r2
 80054d2:	3361      	adds	r3, #97	; 0x61
 80054d4:	2201      	movs	r2, #1
 80054d6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	212c      	movs	r1, #44	; 0x2c
 80054de:	fb01 f303 	mul.w	r3, r1, r3
 80054e2:	4413      	add	r3, r2
 80054e4:	335c      	adds	r3, #92	; 0x5c
 80054e6:	2200      	movs	r2, #0
 80054e8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f6:	461a      	mov	r2, r3
 80054f8:	2301      	movs	r3, #1
 80054fa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	212c      	movs	r1, #44	; 0x2c
 8005502:	fb01 f303 	mul.w	r3, r1, r3
 8005506:	4413      	add	r3, r2
 8005508:	333f      	adds	r3, #63	; 0x3f
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d009      	beq.n	8005524 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	212c      	movs	r1, #44	; 0x2c
 8005516:	fb01 f303 	mul.w	r3, r1, r3
 800551a:	4413      	add	r3, r2
 800551c:	333f      	adds	r3, #63	; 0x3f
 800551e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005520:	2b02      	cmp	r3, #2
 8005522:	d121      	bne.n	8005568 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	4413      	add	r3, r2
 800552c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	0151      	lsls	r1, r2, #5
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	440a      	add	r2, r1
 800553a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800553e:	f043 0302 	orr.w	r3, r3, #2
 8005542:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	4611      	mov	r1, r2
 800554e:	4618      	mov	r0, r3
 8005550:	f007 febb 	bl	800d2ca <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	4413      	add	r3, r2
 800555c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005560:	461a      	mov	r2, r3
 8005562:	2310      	movs	r3, #16
 8005564:	6093      	str	r3, [r2, #8]
 8005566:	e066      	b.n	8005636 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	212c      	movs	r1, #44	; 0x2c
 800556e:	fb01 f303 	mul.w	r3, r1, r3
 8005572:	4413      	add	r3, r2
 8005574:	333f      	adds	r3, #63	; 0x3f
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b03      	cmp	r3, #3
 800557a:	d127      	bne.n	80055cc <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	4413      	add	r3, r2
 8005584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	0151      	lsls	r1, r2, #5
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	440a      	add	r2, r1
 8005592:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005596:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800559a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	212c      	movs	r1, #44	; 0x2c
 80055a2:	fb01 f303 	mul.w	r3, r1, r3
 80055a6:	4413      	add	r3, r2
 80055a8:	3360      	adds	r3, #96	; 0x60
 80055aa:	2201      	movs	r2, #1
 80055ac:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	b2d9      	uxtb	r1, r3
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	202c      	movs	r0, #44	; 0x2c
 80055b8:	fb00 f303 	mul.w	r3, r0, r3
 80055bc:	4413      	add	r3, r2
 80055be:	3360      	adds	r3, #96	; 0x60
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f00a fa2b 	bl	800fa20 <HAL_HCD_HC_NotifyURBChange_Callback>
 80055ca:	e034      	b.n	8005636 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	212c      	movs	r1, #44	; 0x2c
 80055d2:	fb01 f303 	mul.w	r3, r1, r3
 80055d6:	4413      	add	r3, r2
 80055d8:	333f      	adds	r3, #63	; 0x3f
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d12a      	bne.n	8005636 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	212c      	movs	r1, #44	; 0x2c
 80055e6:	fb01 f303 	mul.w	r3, r1, r3
 80055ea:	4413      	add	r3, r2
 80055ec:	3360      	adds	r3, #96	; 0x60
 80055ee:	2201      	movs	r2, #1
 80055f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	212c      	movs	r1, #44	; 0x2c
 80055f8:	fb01 f303 	mul.w	r3, r1, r3
 80055fc:	4413      	add	r3, r2
 80055fe:	3354      	adds	r3, #84	; 0x54
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	f083 0301 	eor.w	r3, r3, #1
 8005606:	b2d8      	uxtb	r0, r3
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	212c      	movs	r1, #44	; 0x2c
 800560e:	fb01 f303 	mul.w	r3, r1, r3
 8005612:	4413      	add	r3, r2
 8005614:	3354      	adds	r3, #84	; 0x54
 8005616:	4602      	mov	r2, r0
 8005618:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	b2d9      	uxtb	r1, r3
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	202c      	movs	r0, #44	; 0x2c
 8005624:	fb00 f303 	mul.w	r3, r0, r3
 8005628:	4413      	add	r3, r2
 800562a:	3360      	adds	r3, #96	; 0x60
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f00a f9f5 	bl	800fa20 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d12b      	bne.n	8005696 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	212c      	movs	r1, #44	; 0x2c
 8005644:	fb01 f303 	mul.w	r3, r1, r3
 8005648:	4413      	add	r3, r2
 800564a:	3348      	adds	r3, #72	; 0x48
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	202c      	movs	r0, #44	; 0x2c
 8005654:	fb00 f202 	mul.w	r2, r0, r2
 8005658:	440a      	add	r2, r1
 800565a:	3240      	adds	r2, #64	; 0x40
 800565c:	8812      	ldrh	r2, [r2, #0]
 800565e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 81be 	beq.w	80059e8 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	212c      	movs	r1, #44	; 0x2c
 8005672:	fb01 f303 	mul.w	r3, r1, r3
 8005676:	4413      	add	r3, r2
 8005678:	3354      	adds	r3, #84	; 0x54
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	f083 0301 	eor.w	r3, r3, #1
 8005680:	b2d8      	uxtb	r0, r3
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	212c      	movs	r1, #44	; 0x2c
 8005688:	fb01 f303 	mul.w	r3, r1, r3
 800568c:	4413      	add	r3, r2
 800568e:	3354      	adds	r3, #84	; 0x54
 8005690:	4602      	mov	r2, r0
 8005692:	701a      	strb	r2, [r3, #0]
}
 8005694:	e1a8      	b.n	80059e8 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	212c      	movs	r1, #44	; 0x2c
 800569c:	fb01 f303 	mul.w	r3, r1, r3
 80056a0:	4413      	add	r3, r2
 80056a2:	3354      	adds	r3, #84	; 0x54
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	f083 0301 	eor.w	r3, r3, #1
 80056aa:	b2d8      	uxtb	r0, r3
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	212c      	movs	r1, #44	; 0x2c
 80056b2:	fb01 f303 	mul.w	r3, r1, r3
 80056b6:	4413      	add	r3, r2
 80056b8:	3354      	adds	r3, #84	; 0x54
 80056ba:	4602      	mov	r2, r0
 80056bc:	701a      	strb	r2, [r3, #0]
}
 80056be:	e193      	b.n	80059e8 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	f040 8106 	bne.w	80058e4 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	0151      	lsls	r1, r2, #5
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	440a      	add	r2, r1
 80056ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056f2:	f023 0302 	bic.w	r3, r3, #2
 80056f6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	212c      	movs	r1, #44	; 0x2c
 80056fe:	fb01 f303 	mul.w	r3, r1, r3
 8005702:	4413      	add	r3, r2
 8005704:	3361      	adds	r3, #97	; 0x61
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d109      	bne.n	8005720 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	212c      	movs	r1, #44	; 0x2c
 8005712:	fb01 f303 	mul.w	r3, r1, r3
 8005716:	4413      	add	r3, r2
 8005718:	3360      	adds	r3, #96	; 0x60
 800571a:	2201      	movs	r2, #1
 800571c:	701a      	strb	r2, [r3, #0]
 800571e:	e0c9      	b.n	80058b4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	212c      	movs	r1, #44	; 0x2c
 8005726:	fb01 f303 	mul.w	r3, r1, r3
 800572a:	4413      	add	r3, r2
 800572c:	3361      	adds	r3, #97	; 0x61
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b05      	cmp	r3, #5
 8005732:	d109      	bne.n	8005748 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	212c      	movs	r1, #44	; 0x2c
 800573a:	fb01 f303 	mul.w	r3, r1, r3
 800573e:	4413      	add	r3, r2
 8005740:	3360      	adds	r3, #96	; 0x60
 8005742:	2205      	movs	r2, #5
 8005744:	701a      	strb	r2, [r3, #0]
 8005746:	e0b5      	b.n	80058b4 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	212c      	movs	r1, #44	; 0x2c
 800574e:	fb01 f303 	mul.w	r3, r1, r3
 8005752:	4413      	add	r3, r2
 8005754:	3361      	adds	r3, #97	; 0x61
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	2b06      	cmp	r3, #6
 800575a:	d009      	beq.n	8005770 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	212c      	movs	r1, #44	; 0x2c
 8005762:	fb01 f303 	mul.w	r3, r1, r3
 8005766:	4413      	add	r3, r2
 8005768:	3361      	adds	r3, #97	; 0x61
 800576a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800576c:	2b08      	cmp	r3, #8
 800576e:	d150      	bne.n	8005812 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	212c      	movs	r1, #44	; 0x2c
 8005776:	fb01 f303 	mul.w	r3, r1, r3
 800577a:	4413      	add	r3, r2
 800577c:	335c      	adds	r3, #92	; 0x5c
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	202c      	movs	r0, #44	; 0x2c
 8005788:	fb00 f303 	mul.w	r3, r0, r3
 800578c:	440b      	add	r3, r1
 800578e:	335c      	adds	r3, #92	; 0x5c
 8005790:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	212c      	movs	r1, #44	; 0x2c
 8005798:	fb01 f303 	mul.w	r3, r1, r3
 800579c:	4413      	add	r3, r2
 800579e:	335c      	adds	r3, #92	; 0x5c
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d912      	bls.n	80057cc <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	212c      	movs	r1, #44	; 0x2c
 80057ac:	fb01 f303 	mul.w	r3, r1, r3
 80057b0:	4413      	add	r3, r2
 80057b2:	335c      	adds	r3, #92	; 0x5c
 80057b4:	2200      	movs	r2, #0
 80057b6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	212c      	movs	r1, #44	; 0x2c
 80057be:	fb01 f303 	mul.w	r3, r1, r3
 80057c2:	4413      	add	r3, r2
 80057c4:	3360      	adds	r3, #96	; 0x60
 80057c6:	2204      	movs	r2, #4
 80057c8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80057ca:	e073      	b.n	80058b4 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	212c      	movs	r1, #44	; 0x2c
 80057d2:	fb01 f303 	mul.w	r3, r1, r3
 80057d6:	4413      	add	r3, r2
 80057d8:	3360      	adds	r3, #96	; 0x60
 80057da:	2202      	movs	r2, #2
 80057dc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057f4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057fc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	4413      	add	r3, r2
 8005806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800580a:	461a      	mov	r2, r3
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005810:	e050      	b.n	80058b4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	212c      	movs	r1, #44	; 0x2c
 8005818:	fb01 f303 	mul.w	r3, r1, r3
 800581c:	4413      	add	r3, r2
 800581e:	3361      	adds	r3, #97	; 0x61
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	2b03      	cmp	r3, #3
 8005824:	d122      	bne.n	800586c <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	212c      	movs	r1, #44	; 0x2c
 800582c:	fb01 f303 	mul.w	r3, r1, r3
 8005830:	4413      	add	r3, r2
 8005832:	3360      	adds	r3, #96	; 0x60
 8005834:	2202      	movs	r2, #2
 8005836:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	4413      	add	r3, r2
 8005840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800584e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005856:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	4413      	add	r3, r2
 8005860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005864:	461a      	mov	r2, r3
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	6013      	str	r3, [r2, #0]
 800586a:	e023      	b.n	80058b4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	212c      	movs	r1, #44	; 0x2c
 8005872:	fb01 f303 	mul.w	r3, r1, r3
 8005876:	4413      	add	r3, r2
 8005878:	3361      	adds	r3, #97	; 0x61
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b07      	cmp	r3, #7
 800587e:	d119      	bne.n	80058b4 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	212c      	movs	r1, #44	; 0x2c
 8005886:	fb01 f303 	mul.w	r3, r1, r3
 800588a:	4413      	add	r3, r2
 800588c:	335c      	adds	r3, #92	; 0x5c
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	1c5a      	adds	r2, r3, #1
 8005892:	6879      	ldr	r1, [r7, #4]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	202c      	movs	r0, #44	; 0x2c
 8005898:	fb00 f303 	mul.w	r3, r0, r3
 800589c:	440b      	add	r3, r1
 800589e:	335c      	adds	r3, #92	; 0x5c
 80058a0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	212c      	movs	r1, #44	; 0x2c
 80058a8:	fb01 f303 	mul.w	r3, r1, r3
 80058ac:	4413      	add	r3, r2
 80058ae:	3360      	adds	r3, #96	; 0x60
 80058b0:	2204      	movs	r2, #4
 80058b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c0:	461a      	mov	r2, r3
 80058c2:	2302      	movs	r3, #2
 80058c4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	b2d9      	uxtb	r1, r3
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	202c      	movs	r0, #44	; 0x2c
 80058d0:	fb00 f303 	mul.w	r3, r0, r3
 80058d4:	4413      	add	r3, r2
 80058d6:	3360      	adds	r3, #96	; 0x60
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	461a      	mov	r2, r3
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f00a f89f 	bl	800fa20 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80058e2:	e081      	b.n	80059e8 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f003 0310 	and.w	r3, r3, #16
 80058f6:	2b10      	cmp	r3, #16
 80058f8:	d176      	bne.n	80059e8 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	212c      	movs	r1, #44	; 0x2c
 8005900:	fb01 f303 	mul.w	r3, r1, r3
 8005904:	4413      	add	r3, r2
 8005906:	333f      	adds	r3, #63	; 0x3f
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b03      	cmp	r3, #3
 800590c:	d121      	bne.n	8005952 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	212c      	movs	r1, #44	; 0x2c
 8005914:	fb01 f303 	mul.w	r3, r1, r3
 8005918:	4413      	add	r3, r2
 800591a:	335c      	adds	r3, #92	; 0x5c
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	4413      	add	r3, r2
 8005928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	0151      	lsls	r1, r2, #5
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	440a      	add	r2, r1
 8005936:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800593a:	f043 0302 	orr.w	r3, r3, #2
 800593e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	b2d2      	uxtb	r2, r2
 8005948:	4611      	mov	r1, r2
 800594a:	4618      	mov	r0, r3
 800594c:	f007 fcbd 	bl	800d2ca <USB_HC_Halt>
 8005950:	e041      	b.n	80059d6 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	212c      	movs	r1, #44	; 0x2c
 8005958:	fb01 f303 	mul.w	r3, r1, r3
 800595c:	4413      	add	r3, r2
 800595e:	333f      	adds	r3, #63	; 0x3f
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d009      	beq.n	800597a <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	212c      	movs	r1, #44	; 0x2c
 800596c:	fb01 f303 	mul.w	r3, r1, r3
 8005970:	4413      	add	r3, r2
 8005972:	333f      	adds	r3, #63	; 0x3f
 8005974:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005976:	2b02      	cmp	r3, #2
 8005978:	d12d      	bne.n	80059d6 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	212c      	movs	r1, #44	; 0x2c
 8005980:	fb01 f303 	mul.w	r3, r1, r3
 8005984:	4413      	add	r3, r2
 8005986:	335c      	adds	r3, #92	; 0x5c
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d120      	bne.n	80059d6 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	212c      	movs	r1, #44	; 0x2c
 800599a:	fb01 f303 	mul.w	r3, r1, r3
 800599e:	4413      	add	r3, r2
 80059a0:	3361      	adds	r3, #97	; 0x61
 80059a2:	2203      	movs	r2, #3
 80059a4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	0151      	lsls	r1, r2, #5
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	440a      	add	r2, r1
 80059bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059c0:	f043 0302 	orr.w	r3, r3, #2
 80059c4:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	b2d2      	uxtb	r2, r2
 80059ce:	4611      	mov	r1, r2
 80059d0:	4618      	mov	r0, r3
 80059d2:	f007 fc7a 	bl	800d2ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e2:	461a      	mov	r2, r3
 80059e4:	2310      	movs	r3, #16
 80059e6:	6093      	str	r3, [r2, #8]
}
 80059e8:	bf00      	nop
 80059ea:	3718      	adds	r7, #24
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b088      	sub	sp, #32
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	460b      	mov	r3, r1
 80059fa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005a06:	78fb      	ldrb	r3, [r7, #3]
 8005a08:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	2b04      	cmp	r3, #4
 8005a1e:	d119      	bne.n	8005a54 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	2304      	movs	r3, #4
 8005a30:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	0151      	lsls	r1, r2, #5
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	440a      	add	r2, r1
 8005a48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a4c:	f043 0302 	orr.w	r3, r3, #2
 8005a50:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005a52:	e3c6      	b.n	80061e2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f003 0320 	and.w	r3, r3, #32
 8005a66:	2b20      	cmp	r3, #32
 8005a68:	d13e      	bne.n	8005ae8 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a76:	461a      	mov	r2, r3
 8005a78:	2320      	movs	r3, #32
 8005a7a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	212c      	movs	r1, #44	; 0x2c
 8005a82:	fb01 f303 	mul.w	r3, r1, r3
 8005a86:	4413      	add	r3, r2
 8005a88:	333d      	adds	r3, #61	; 0x3d
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	f040 83a8 	bne.w	80061e2 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	212c      	movs	r1, #44	; 0x2c
 8005a98:	fb01 f303 	mul.w	r3, r1, r3
 8005a9c:	4413      	add	r3, r2
 8005a9e:	333d      	adds	r3, #61	; 0x3d
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	212c      	movs	r1, #44	; 0x2c
 8005aaa:	fb01 f303 	mul.w	r3, r1, r3
 8005aae:	4413      	add	r3, r2
 8005ab0:	3360      	adds	r3, #96	; 0x60
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	0151      	lsls	r1, r2, #5
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	440a      	add	r2, r1
 8005acc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ad0:	f043 0302 	orr.w	r3, r3, #2
 8005ad4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	b2d2      	uxtb	r2, r2
 8005ade:	4611      	mov	r1, r2
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f007 fbf2 	bl	800d2ca <USB_HC_Halt>
}
 8005ae6:	e37c      	b.n	80061e2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005afa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005afe:	d122      	bne.n	8005b46 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	0151      	lsls	r1, r2, #5
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	440a      	add	r2, r1
 8005b16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b1a:	f043 0302 	orr.w	r3, r3, #2
 8005b1e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	b2d2      	uxtb	r2, r2
 8005b28:	4611      	mov	r1, r2
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f007 fbcd 	bl	800d2ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b42:	6093      	str	r3, [r2, #8]
}
 8005b44:	e34d      	b.n	80061e2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d150      	bne.n	8005bfe <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	212c      	movs	r1, #44	; 0x2c
 8005b62:	fb01 f303 	mul.w	r3, r1, r3
 8005b66:	4413      	add	r3, r2
 8005b68:	335c      	adds	r3, #92	; 0x5c
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b80:	2b40      	cmp	r3, #64	; 0x40
 8005b82:	d111      	bne.n	8005ba8 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	212c      	movs	r1, #44	; 0x2c
 8005b8a:	fb01 f303 	mul.w	r3, r1, r3
 8005b8e:	4413      	add	r3, r2
 8005b90:	333d      	adds	r3, #61	; 0x3d
 8005b92:	2201      	movs	r2, #1
 8005b94:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	2340      	movs	r3, #64	; 0x40
 8005ba6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	0151      	lsls	r1, r2, #5
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	440a      	add	r2, r1
 8005bbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bc2:	f043 0302 	orr.w	r3, r3, #2
 8005bc6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	b2d2      	uxtb	r2, r2
 8005bd0:	4611      	mov	r1, r2
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f007 fb79 	bl	800d2ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be4:	461a      	mov	r2, r3
 8005be6:	2301      	movs	r3, #1
 8005be8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	212c      	movs	r1, #44	; 0x2c
 8005bf0:	fb01 f303 	mul.w	r3, r1, r3
 8005bf4:	4413      	add	r3, r2
 8005bf6:	3361      	adds	r3, #97	; 0x61
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	701a      	strb	r2, [r3, #0]
}
 8005bfc:	e2f1      	b.n	80061e2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c10:	2b40      	cmp	r3, #64	; 0x40
 8005c12:	d13c      	bne.n	8005c8e <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	212c      	movs	r1, #44	; 0x2c
 8005c1a:	fb01 f303 	mul.w	r3, r1, r3
 8005c1e:	4413      	add	r3, r2
 8005c20:	3361      	adds	r3, #97	; 0x61
 8005c22:	2204      	movs	r2, #4
 8005c24:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	212c      	movs	r1, #44	; 0x2c
 8005c2c:	fb01 f303 	mul.w	r3, r1, r3
 8005c30:	4413      	add	r3, r2
 8005c32:	333d      	adds	r3, #61	; 0x3d
 8005c34:	2201      	movs	r2, #1
 8005c36:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	212c      	movs	r1, #44	; 0x2c
 8005c3e:	fb01 f303 	mul.w	r3, r1, r3
 8005c42:	4413      	add	r3, r2
 8005c44:	335c      	adds	r3, #92	; 0x5c
 8005c46:	2200      	movs	r2, #0
 8005c48:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	0151      	lsls	r1, r2, #5
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	440a      	add	r2, r1
 8005c60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c64:	f043 0302 	orr.w	r3, r3, #2
 8005c68:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	4611      	mov	r1, r2
 8005c74:	4618      	mov	r0, r3
 8005c76:	f007 fb28 	bl	800d2ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c86:	461a      	mov	r2, r3
 8005c88:	2340      	movs	r3, #64	; 0x40
 8005c8a:	6093      	str	r3, [r2, #8]
}
 8005c8c:	e2a9      	b.n	80061e2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f003 0308 	and.w	r3, r3, #8
 8005ca0:	2b08      	cmp	r3, #8
 8005ca2:	d12a      	bne.n	8005cfa <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	2308      	movs	r3, #8
 8005cb4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	0151      	lsls	r1, r2, #5
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	440a      	add	r2, r1
 8005ccc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cd0:	f043 0302 	orr.w	r3, r3, #2
 8005cd4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	b2d2      	uxtb	r2, r2
 8005cde:	4611      	mov	r1, r2
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f007 faf2 	bl	800d2ca <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	212c      	movs	r1, #44	; 0x2c
 8005cec:	fb01 f303 	mul.w	r3, r1, r3
 8005cf0:	4413      	add	r3, r2
 8005cf2:	3361      	adds	r3, #97	; 0x61
 8005cf4:	2205      	movs	r2, #5
 8005cf6:	701a      	strb	r2, [r3, #0]
}
 8005cf8:	e273      	b.n	80061e2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f003 0310 	and.w	r3, r3, #16
 8005d0c:	2b10      	cmp	r3, #16
 8005d0e:	d150      	bne.n	8005db2 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	212c      	movs	r1, #44	; 0x2c
 8005d16:	fb01 f303 	mul.w	r3, r1, r3
 8005d1a:	4413      	add	r3, r2
 8005d1c:	335c      	adds	r3, #92	; 0x5c
 8005d1e:	2200      	movs	r2, #0
 8005d20:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	212c      	movs	r1, #44	; 0x2c
 8005d28:	fb01 f303 	mul.w	r3, r1, r3
 8005d2c:	4413      	add	r3, r2
 8005d2e:	3361      	adds	r3, #97	; 0x61
 8005d30:	2203      	movs	r2, #3
 8005d32:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	212c      	movs	r1, #44	; 0x2c
 8005d3a:	fb01 f303 	mul.w	r3, r1, r3
 8005d3e:	4413      	add	r3, r2
 8005d40:	333d      	adds	r3, #61	; 0x3d
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d112      	bne.n	8005d6e <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	212c      	movs	r1, #44	; 0x2c
 8005d4e:	fb01 f303 	mul.w	r3, r1, r3
 8005d52:	4413      	add	r3, r2
 8005d54:	333c      	adds	r3, #60	; 0x3c
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d108      	bne.n	8005d6e <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	212c      	movs	r1, #44	; 0x2c
 8005d62:	fb01 f303 	mul.w	r3, r1, r3
 8005d66:	4413      	add	r3, r2
 8005d68:	333d      	adds	r3, #61	; 0x3d
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	0151      	lsls	r1, r2, #5
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	440a      	add	r2, r1
 8005d84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d88:	f043 0302 	orr.w	r3, r3, #2
 8005d8c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	b2d2      	uxtb	r2, r2
 8005d96:	4611      	mov	r1, r2
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f007 fa96 	bl	800d2ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005daa:	461a      	mov	r2, r3
 8005dac:	2310      	movs	r3, #16
 8005dae:	6093      	str	r3, [r2, #8]
}
 8005db0:	e217      	b.n	80061e2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc4:	2b80      	cmp	r3, #128	; 0x80
 8005dc6:	d174      	bne.n	8005eb2 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d121      	bne.n	8005e14 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	212c      	movs	r1, #44	; 0x2c
 8005dd6:	fb01 f303 	mul.w	r3, r1, r3
 8005dda:	4413      	add	r3, r2
 8005ddc:	3361      	adds	r3, #97	; 0x61
 8005dde:	2206      	movs	r2, #6
 8005de0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	0151      	lsls	r1, r2, #5
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	440a      	add	r2, r1
 8005df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dfc:	f043 0302 	orr.w	r3, r3, #2
 8005e00:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	b2d2      	uxtb	r2, r2
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f007 fa5c 	bl	800d2ca <USB_HC_Halt>
 8005e12:	e044      	b.n	8005e9e <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	212c      	movs	r1, #44	; 0x2c
 8005e1a:	fb01 f303 	mul.w	r3, r1, r3
 8005e1e:	4413      	add	r3, r2
 8005e20:	335c      	adds	r3, #92	; 0x5c
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	1c5a      	adds	r2, r3, #1
 8005e26:	6879      	ldr	r1, [r7, #4]
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	202c      	movs	r0, #44	; 0x2c
 8005e2c:	fb00 f303 	mul.w	r3, r0, r3
 8005e30:	440b      	add	r3, r1
 8005e32:	335c      	adds	r3, #92	; 0x5c
 8005e34:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	212c      	movs	r1, #44	; 0x2c
 8005e3c:	fb01 f303 	mul.w	r3, r1, r3
 8005e40:	4413      	add	r3, r2
 8005e42:	335c      	adds	r3, #92	; 0x5c
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d920      	bls.n	8005e8c <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	212c      	movs	r1, #44	; 0x2c
 8005e50:	fb01 f303 	mul.w	r3, r1, r3
 8005e54:	4413      	add	r3, r2
 8005e56:	335c      	adds	r3, #92	; 0x5c
 8005e58:	2200      	movs	r2, #0
 8005e5a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	212c      	movs	r1, #44	; 0x2c
 8005e62:	fb01 f303 	mul.w	r3, r1, r3
 8005e66:	4413      	add	r3, r2
 8005e68:	3360      	adds	r3, #96	; 0x60
 8005e6a:	2204      	movs	r2, #4
 8005e6c:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	b2d9      	uxtb	r1, r3
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	202c      	movs	r0, #44	; 0x2c
 8005e78:	fb00 f303 	mul.w	r3, r0, r3
 8005e7c:	4413      	add	r3, r2
 8005e7e:	3360      	adds	r3, #96	; 0x60
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	461a      	mov	r2, r3
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f009 fdcb 	bl	800fa20 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005e8a:	e008      	b.n	8005e9e <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	212c      	movs	r1, #44	; 0x2c
 8005e92:	fb01 f303 	mul.w	r3, r1, r3
 8005e96:	4413      	add	r3, r2
 8005e98:	3360      	adds	r3, #96	; 0x60
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eaa:	461a      	mov	r2, r3
 8005eac:	2380      	movs	r3, #128	; 0x80
 8005eae:	6093      	str	r3, [r2, #8]
}
 8005eb0:	e197      	b.n	80061e2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ec8:	d134      	bne.n	8005f34 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	0151      	lsls	r1, r2, #5
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	440a      	add	r2, r1
 8005ee0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ee4:	f043 0302 	orr.w	r3, r3, #2
 8005ee8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	b2d2      	uxtb	r2, r2
 8005ef2:	4611      	mov	r1, r2
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f007 f9e8 	bl	800d2ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f06:	461a      	mov	r2, r3
 8005f08:	2310      	movs	r3, #16
 8005f0a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	212c      	movs	r1, #44	; 0x2c
 8005f26:	fb01 f303 	mul.w	r3, r1, r3
 8005f2a:	4413      	add	r3, r2
 8005f2c:	3361      	adds	r3, #97	; 0x61
 8005f2e:	2208      	movs	r2, #8
 8005f30:	701a      	strb	r2, [r3, #0]
}
 8005f32:	e156      	b.n	80061e2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	f040 814b 	bne.w	80061e2 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	0151      	lsls	r1, r2, #5
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	440a      	add	r2, r1
 8005f62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f66:	f023 0302 	bic.w	r3, r3, #2
 8005f6a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	212c      	movs	r1, #44	; 0x2c
 8005f72:	fb01 f303 	mul.w	r3, r1, r3
 8005f76:	4413      	add	r3, r2
 8005f78:	3361      	adds	r3, #97	; 0x61
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d179      	bne.n	8006074 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	212c      	movs	r1, #44	; 0x2c
 8005f86:	fb01 f303 	mul.w	r3, r1, r3
 8005f8a:	4413      	add	r3, r2
 8005f8c:	3360      	adds	r3, #96	; 0x60
 8005f8e:	2201      	movs	r2, #1
 8005f90:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	212c      	movs	r1, #44	; 0x2c
 8005f98:	fb01 f303 	mul.w	r3, r1, r3
 8005f9c:	4413      	add	r3, r2
 8005f9e:	333f      	adds	r3, #63	; 0x3f
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d00a      	beq.n	8005fbc <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	212c      	movs	r1, #44	; 0x2c
 8005fac:	fb01 f303 	mul.w	r3, r1, r3
 8005fb0:	4413      	add	r3, r2
 8005fb2:	333f      	adds	r3, #63	; 0x3f
 8005fb4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	f040 80fc 	bne.w	80061b4 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d142      	bne.n	800604a <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	212c      	movs	r1, #44	; 0x2c
 8005fca:	fb01 f303 	mul.w	r3, r1, r3
 8005fce:	4413      	add	r3, r2
 8005fd0:	334c      	adds	r3, #76	; 0x4c
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 80ed 	beq.w	80061b4 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	212c      	movs	r1, #44	; 0x2c
 8005fe0:	fb01 f303 	mul.w	r3, r1, r3
 8005fe4:	4413      	add	r3, r2
 8005fe6:	334c      	adds	r3, #76	; 0x4c
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6879      	ldr	r1, [r7, #4]
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	202c      	movs	r0, #44	; 0x2c
 8005ff0:	fb00 f202 	mul.w	r2, r0, r2
 8005ff4:	440a      	add	r2, r1
 8005ff6:	3240      	adds	r2, #64	; 0x40
 8005ff8:	8812      	ldrh	r2, [r2, #0]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	6879      	ldr	r1, [r7, #4]
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	202c      	movs	r0, #44	; 0x2c
 8006004:	fb00 f202 	mul.w	r2, r0, r2
 8006008:	440a      	add	r2, r1
 800600a:	3240      	adds	r2, #64	; 0x40
 800600c:	8812      	ldrh	r2, [r2, #0]
 800600e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006012:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 80ca 	beq.w	80061b4 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	212c      	movs	r1, #44	; 0x2c
 8006026:	fb01 f303 	mul.w	r3, r1, r3
 800602a:	4413      	add	r3, r2
 800602c:	3355      	adds	r3, #85	; 0x55
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	f083 0301 	eor.w	r3, r3, #1
 8006034:	b2d8      	uxtb	r0, r3
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	212c      	movs	r1, #44	; 0x2c
 800603c:	fb01 f303 	mul.w	r3, r1, r3
 8006040:	4413      	add	r3, r2
 8006042:	3355      	adds	r3, #85	; 0x55
 8006044:	4602      	mov	r2, r0
 8006046:	701a      	strb	r2, [r3, #0]
 8006048:	e0b4      	b.n	80061b4 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	212c      	movs	r1, #44	; 0x2c
 8006050:	fb01 f303 	mul.w	r3, r1, r3
 8006054:	4413      	add	r3, r2
 8006056:	3355      	adds	r3, #85	; 0x55
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	f083 0301 	eor.w	r3, r3, #1
 800605e:	b2d8      	uxtb	r0, r3
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	212c      	movs	r1, #44	; 0x2c
 8006066:	fb01 f303 	mul.w	r3, r1, r3
 800606a:	4413      	add	r3, r2
 800606c:	3355      	adds	r3, #85	; 0x55
 800606e:	4602      	mov	r2, r0
 8006070:	701a      	strb	r2, [r3, #0]
 8006072:	e09f      	b.n	80061b4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	212c      	movs	r1, #44	; 0x2c
 800607a:	fb01 f303 	mul.w	r3, r1, r3
 800607e:	4413      	add	r3, r2
 8006080:	3361      	adds	r3, #97	; 0x61
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b03      	cmp	r3, #3
 8006086:	d109      	bne.n	800609c <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	212c      	movs	r1, #44	; 0x2c
 800608e:	fb01 f303 	mul.w	r3, r1, r3
 8006092:	4413      	add	r3, r2
 8006094:	3360      	adds	r3, #96	; 0x60
 8006096:	2202      	movs	r2, #2
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	e08b      	b.n	80061b4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	212c      	movs	r1, #44	; 0x2c
 80060a2:	fb01 f303 	mul.w	r3, r1, r3
 80060a6:	4413      	add	r3, r2
 80060a8:	3361      	adds	r3, #97	; 0x61
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2b04      	cmp	r3, #4
 80060ae:	d109      	bne.n	80060c4 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	212c      	movs	r1, #44	; 0x2c
 80060b6:	fb01 f303 	mul.w	r3, r1, r3
 80060ba:	4413      	add	r3, r2
 80060bc:	3360      	adds	r3, #96	; 0x60
 80060be:	2202      	movs	r2, #2
 80060c0:	701a      	strb	r2, [r3, #0]
 80060c2:	e077      	b.n	80061b4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	212c      	movs	r1, #44	; 0x2c
 80060ca:	fb01 f303 	mul.w	r3, r1, r3
 80060ce:	4413      	add	r3, r2
 80060d0:	3361      	adds	r3, #97	; 0x61
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	2b05      	cmp	r3, #5
 80060d6:	d109      	bne.n	80060ec <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	212c      	movs	r1, #44	; 0x2c
 80060de:	fb01 f303 	mul.w	r3, r1, r3
 80060e2:	4413      	add	r3, r2
 80060e4:	3360      	adds	r3, #96	; 0x60
 80060e6:	2205      	movs	r2, #5
 80060e8:	701a      	strb	r2, [r3, #0]
 80060ea:	e063      	b.n	80061b4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	212c      	movs	r1, #44	; 0x2c
 80060f2:	fb01 f303 	mul.w	r3, r1, r3
 80060f6:	4413      	add	r3, r2
 80060f8:	3361      	adds	r3, #97	; 0x61
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	2b06      	cmp	r3, #6
 80060fe:	d009      	beq.n	8006114 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	212c      	movs	r1, #44	; 0x2c
 8006106:	fb01 f303 	mul.w	r3, r1, r3
 800610a:	4413      	add	r3, r2
 800610c:	3361      	adds	r3, #97	; 0x61
 800610e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006110:	2b08      	cmp	r3, #8
 8006112:	d14f      	bne.n	80061b4 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	212c      	movs	r1, #44	; 0x2c
 800611a:	fb01 f303 	mul.w	r3, r1, r3
 800611e:	4413      	add	r3, r2
 8006120:	335c      	adds	r3, #92	; 0x5c
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	1c5a      	adds	r2, r3, #1
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	202c      	movs	r0, #44	; 0x2c
 800612c:	fb00 f303 	mul.w	r3, r0, r3
 8006130:	440b      	add	r3, r1
 8006132:	335c      	adds	r3, #92	; 0x5c
 8006134:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	212c      	movs	r1, #44	; 0x2c
 800613c:	fb01 f303 	mul.w	r3, r1, r3
 8006140:	4413      	add	r3, r2
 8006142:	335c      	adds	r3, #92	; 0x5c
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b02      	cmp	r3, #2
 8006148:	d912      	bls.n	8006170 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	212c      	movs	r1, #44	; 0x2c
 8006150:	fb01 f303 	mul.w	r3, r1, r3
 8006154:	4413      	add	r3, r2
 8006156:	335c      	adds	r3, #92	; 0x5c
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	212c      	movs	r1, #44	; 0x2c
 8006162:	fb01 f303 	mul.w	r3, r1, r3
 8006166:	4413      	add	r3, r2
 8006168:	3360      	adds	r3, #96	; 0x60
 800616a:	2204      	movs	r2, #4
 800616c:	701a      	strb	r2, [r3, #0]
 800616e:	e021      	b.n	80061b4 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	212c      	movs	r1, #44	; 0x2c
 8006176:	fb01 f303 	mul.w	r3, r1, r3
 800617a:	4413      	add	r3, r2
 800617c:	3360      	adds	r3, #96	; 0x60
 800617e:	2202      	movs	r2, #2
 8006180:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	4413      	add	r3, r2
 800618a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006198:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061a0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ae:	461a      	mov	r2, r3
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c0:	461a      	mov	r2, r3
 80061c2:	2302      	movs	r3, #2
 80061c4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	b2d9      	uxtb	r1, r3
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	202c      	movs	r0, #44	; 0x2c
 80061d0:	fb00 f303 	mul.w	r3, r0, r3
 80061d4:	4413      	add	r3, r2
 80061d6:	3360      	adds	r3, #96	; 0x60
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f009 fc1f 	bl	800fa20 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80061e2:	bf00      	nop
 80061e4:	3720      	adds	r7, #32
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b08a      	sub	sp, #40	; 0x28
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	f003 030f 	and.w	r3, r3, #15
 800620a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	0c5b      	lsrs	r3, r3, #17
 8006210:	f003 030f 	and.w	r3, r3, #15
 8006214:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	091b      	lsrs	r3, r3, #4
 800621a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800621e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	2b02      	cmp	r3, #2
 8006224:	d004      	beq.n	8006230 <HCD_RXQLVL_IRQHandler+0x46>
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	2b05      	cmp	r3, #5
 800622a:	f000 80a9 	beq.w	8006380 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800622e:	e0aa      	b.n	8006386 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	2b00      	cmp	r3, #0
 8006234:	f000 80a6 	beq.w	8006384 <HCD_RXQLVL_IRQHandler+0x19a>
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	212c      	movs	r1, #44	; 0x2c
 800623e:	fb01 f303 	mul.w	r3, r1, r3
 8006242:	4413      	add	r3, r2
 8006244:	3344      	adds	r3, #68	; 0x44
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 809b 	beq.w	8006384 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	212c      	movs	r1, #44	; 0x2c
 8006254:	fb01 f303 	mul.w	r3, r1, r3
 8006258:	4413      	add	r3, r2
 800625a:	3350      	adds	r3, #80	; 0x50
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	441a      	add	r2, r3
 8006262:	6879      	ldr	r1, [r7, #4]
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	202c      	movs	r0, #44	; 0x2c
 8006268:	fb00 f303 	mul.w	r3, r0, r3
 800626c:	440b      	add	r3, r1
 800626e:	334c      	adds	r3, #76	; 0x4c
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	429a      	cmp	r2, r3
 8006274:	d87a      	bhi.n	800636c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6818      	ldr	r0, [r3, #0]
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	212c      	movs	r1, #44	; 0x2c
 8006280:	fb01 f303 	mul.w	r3, r1, r3
 8006284:	4413      	add	r3, r2
 8006286:	3344      	adds	r3, #68	; 0x44
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	b292      	uxth	r2, r2
 800628e:	4619      	mov	r1, r3
 8006290:	f006 fbc5 	bl	800ca1e <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	212c      	movs	r1, #44	; 0x2c
 800629a:	fb01 f303 	mul.w	r3, r1, r3
 800629e:	4413      	add	r3, r2
 80062a0:	3344      	adds	r3, #68	; 0x44
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	441a      	add	r2, r3
 80062a8:	6879      	ldr	r1, [r7, #4]
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	202c      	movs	r0, #44	; 0x2c
 80062ae:	fb00 f303 	mul.w	r3, r0, r3
 80062b2:	440b      	add	r3, r1
 80062b4:	3344      	adds	r3, #68	; 0x44
 80062b6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	212c      	movs	r1, #44	; 0x2c
 80062be:	fb01 f303 	mul.w	r3, r1, r3
 80062c2:	4413      	add	r3, r2
 80062c4:	3350      	adds	r3, #80	; 0x50
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	441a      	add	r2, r3
 80062cc:	6879      	ldr	r1, [r7, #4]
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	202c      	movs	r0, #44	; 0x2c
 80062d2:	fb00 f303 	mul.w	r3, r0, r3
 80062d6:	440b      	add	r3, r1
 80062d8:	3350      	adds	r3, #80	; 0x50
 80062da:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	0cdb      	lsrs	r3, r3, #19
 80062ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062f0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	212c      	movs	r1, #44	; 0x2c
 80062f8:	fb01 f303 	mul.w	r3, r1, r3
 80062fc:	4413      	add	r3, r2
 80062fe:	3340      	adds	r3, #64	; 0x40
 8006300:	881b      	ldrh	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	4293      	cmp	r3, r2
 8006308:	d13c      	bne.n	8006384 <HCD_RXQLVL_IRQHandler+0x19a>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d039      	beq.n	8006384 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	4413      	add	r3, r2
 8006318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006326:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800632e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	4413      	add	r3, r2
 8006338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633c:	461a      	mov	r2, r3
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	212c      	movs	r1, #44	; 0x2c
 8006348:	fb01 f303 	mul.w	r3, r1, r3
 800634c:	4413      	add	r3, r2
 800634e:	3354      	adds	r3, #84	; 0x54
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	f083 0301 	eor.w	r3, r3, #1
 8006356:	b2d8      	uxtb	r0, r3
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	212c      	movs	r1, #44	; 0x2c
 800635e:	fb01 f303 	mul.w	r3, r1, r3
 8006362:	4413      	add	r3, r2
 8006364:	3354      	adds	r3, #84	; 0x54
 8006366:	4602      	mov	r2, r0
 8006368:	701a      	strb	r2, [r3, #0]
      break;
 800636a:	e00b      	b.n	8006384 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	212c      	movs	r1, #44	; 0x2c
 8006372:	fb01 f303 	mul.w	r3, r1, r3
 8006376:	4413      	add	r3, r2
 8006378:	3360      	adds	r3, #96	; 0x60
 800637a:	2204      	movs	r2, #4
 800637c:	701a      	strb	r2, [r3, #0]
      break;
 800637e:	e001      	b.n	8006384 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006380:	bf00      	nop
 8006382:	e000      	b.n	8006386 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006384:	bf00      	nop
  }
}
 8006386:	bf00      	nop
 8006388:	3728      	adds	r7, #40	; 0x28
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b086      	sub	sp, #24
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80063ba:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d10b      	bne.n	80063de <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d102      	bne.n	80063d6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f009 fb09 	bl	800f9e8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	f043 0302 	orr.w	r3, r3, #2
 80063dc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d132      	bne.n	800644e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	f043 0308 	orr.w	r3, r3, #8
 80063ee:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f003 0304 	and.w	r3, r3, #4
 80063f6:	2b04      	cmp	r3, #4
 80063f8:	d126      	bne.n	8006448 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d113      	bne.n	800642a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006408:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800640c:	d106      	bne.n	800641c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2102      	movs	r1, #2
 8006414:	4618      	mov	r0, r3
 8006416:	f006 fc31 	bl	800cc7c <USB_InitFSLSPClkSel>
 800641a:	e011      	b.n	8006440 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2101      	movs	r1, #1
 8006422:	4618      	mov	r0, r3
 8006424:	f006 fc2a 	bl	800cc7c <USB_InitFSLSPClkSel>
 8006428:	e00a      	b.n	8006440 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d106      	bne.n	8006440 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006438:	461a      	mov	r2, r3
 800643a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800643e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f009 fafb 	bl	800fa3c <HAL_HCD_PortEnabled_Callback>
 8006446:	e002      	b.n	800644e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f009 fb05 	bl	800fa58 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f003 0320 	and.w	r3, r3, #32
 8006454:	2b20      	cmp	r3, #32
 8006456:	d103      	bne.n	8006460 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f043 0320 	orr.w	r3, r3, #32
 800645e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006466:	461a      	mov	r2, r3
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	6013      	str	r3, [r2, #0]
}
 800646c:	bf00      	nop
 800646e:	3718      	adds	r7, #24
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d101      	bne.n	8006486 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e07f      	b.n	8006586 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d106      	bne.n	80064a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7fc faf6 	bl	8002a8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2224      	movs	r2, #36	; 0x24
 80064a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 0201 	bic.w	r2, r2, #1
 80064b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80064c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	689a      	ldr	r2, [r3, #8]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d107      	bne.n	80064ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689a      	ldr	r2, [r3, #8]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064ea:	609a      	str	r2, [r3, #8]
 80064ec:	e006      	b.n	80064fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	689a      	ldr	r2, [r3, #8]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80064fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	2b02      	cmp	r3, #2
 8006502:	d104      	bne.n	800650e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800650c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6859      	ldr	r1, [r3, #4]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	4b1d      	ldr	r3, [pc, #116]	; (8006590 <HAL_I2C_Init+0x11c>)
 800651a:	430b      	orrs	r3, r1
 800651c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68da      	ldr	r2, [r3, #12]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800652c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691a      	ldr	r2, [r3, #16]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	ea42 0103 	orr.w	r1, r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	021a      	lsls	r2, r3, #8
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	69d9      	ldr	r1, [r3, #28]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a1a      	ldr	r2, [r3, #32]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	430a      	orrs	r2, r1
 8006556:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f042 0201 	orr.w	r2, r2, #1
 8006566:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2220      	movs	r2, #32
 8006572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	02008000 	.word	0x02008000

08006594 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b20      	cmp	r3, #32
 80065a8:	d138      	bne.n	800661c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d101      	bne.n	80065b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80065b4:	2302      	movs	r3, #2
 80065b6:	e032      	b.n	800661e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2224      	movs	r2, #36	; 0x24
 80065c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f022 0201 	bic.w	r2, r2, #1
 80065d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6819      	ldr	r1, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	430a      	orrs	r2, r1
 80065f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f042 0201 	orr.w	r2, r2, #1
 8006606:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2220      	movs	r2, #32
 800660c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006618:	2300      	movs	r3, #0
 800661a:	e000      	b.n	800661e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800661c:	2302      	movs	r3, #2
  }
}
 800661e:	4618      	mov	r0, r3
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800662a:	b480      	push	{r7}
 800662c:	b085      	sub	sp, #20
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b20      	cmp	r3, #32
 800663e:	d139      	bne.n	80066b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006646:	2b01      	cmp	r3, #1
 8006648:	d101      	bne.n	800664e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800664a:	2302      	movs	r3, #2
 800664c:	e033      	b.n	80066b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2224      	movs	r2, #36	; 0x24
 800665a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 0201 	bic.w	r2, r2, #1
 800666c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800667c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	021b      	lsls	r3, r3, #8
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	4313      	orrs	r3, r2
 8006686:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f042 0201 	orr.w	r2, r2, #1
 800669e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	e000      	b.n	80066b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80066b4:	2302      	movs	r3, #2
  }
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3714      	adds	r7, #20
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
	...

080066c4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e0bf      	b.n	8006856 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d106      	bne.n	80066f0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7fc fa46 	bl	8002b7c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699a      	ldr	r2, [r3, #24]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006706:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6999      	ldr	r1, [r3, #24]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685a      	ldr	r2, [r3, #4]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800671c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6899      	ldr	r1, [r3, #8]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	4b4a      	ldr	r3, [pc, #296]	; (8006860 <HAL_LTDC_Init+0x19c>)
 8006738:	400b      	ands	r3, r1
 800673a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	041b      	lsls	r3, r3, #16
 8006742:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6899      	ldr	r1, [r3, #8]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	699a      	ldr	r2, [r3, #24]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	431a      	orrs	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68d9      	ldr	r1, [r3, #12]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	4b3e      	ldr	r3, [pc, #248]	; (8006860 <HAL_LTDC_Init+0x19c>)
 8006766:	400b      	ands	r3, r1
 8006768:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	041b      	lsls	r3, r3, #16
 8006770:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68d9      	ldr	r1, [r3, #12]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a1a      	ldr	r2, [r3, #32]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	431a      	orrs	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6919      	ldr	r1, [r3, #16]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	4b33      	ldr	r3, [pc, #204]	; (8006860 <HAL_LTDC_Init+0x19c>)
 8006794:	400b      	ands	r3, r1
 8006796:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679c:	041b      	lsls	r3, r3, #16
 800679e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6919      	ldr	r1, [r3, #16]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	431a      	orrs	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6959      	ldr	r1, [r3, #20]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	4b27      	ldr	r3, [pc, #156]	; (8006860 <HAL_LTDC_Init+0x19c>)
 80067c2:	400b      	ands	r3, r1
 80067c4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ca:	041b      	lsls	r3, r3, #16
 80067cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	6959      	ldr	r1, [r3, #20]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	431a      	orrs	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067ea:	021b      	lsls	r3, r3, #8
 80067ec:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80067f4:	041b      	lsls	r3, r3, #16
 80067f6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006806:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4313      	orrs	r3, r2
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800681a:	431a      	orrs	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	430a      	orrs	r2, r1
 8006822:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0206 	orr.w	r2, r2, #6
 8006832:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	699a      	ldr	r2, [r3, #24]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f042 0201 	orr.w	r2, r2, #1
 8006842:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	f000f800 	.word	0xf000f800

08006864 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006872:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800687a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f003 0304 	and.w	r3, r3, #4
 8006882:	2b00      	cmp	r3, #0
 8006884:	d023      	beq.n	80068ce <HAL_LTDC_IRQHandler+0x6a>
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	f003 0304 	and.w	r3, r3, #4
 800688c:	2b00      	cmp	r3, #0
 800688e:	d01e      	beq.n	80068ce <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 0204 	bic.w	r2, r2, #4
 800689e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2204      	movs	r2, #4
 80068a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80068ae:	f043 0201 	orr.w	r2, r3, #1
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2204      	movs	r2, #4
 80068bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f86f 	bl	80069ac <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f003 0302 	and.w	r3, r3, #2
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d023      	beq.n	8006920 <HAL_LTDC_IRQHandler+0xbc>
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f003 0302 	and.w	r3, r3, #2
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d01e      	beq.n	8006920 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f022 0202 	bic.w	r2, r2, #2
 80068f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2202      	movs	r2, #2
 80068f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006900:	f043 0202 	orr.w	r2, r3, #2
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2204      	movs	r2, #4
 800690e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f846 	bl	80069ac <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b00      	cmp	r3, #0
 8006928:	d01b      	beq.n	8006962 <HAL_LTDC_IRQHandler+0xfe>
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b00      	cmp	r3, #0
 8006932:	d016      	beq.n	8006962 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 0201 	bic.w	r2, r2, #1
 8006942:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2201      	movs	r2, #1
 800694a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f82f 	bl	80069c0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f003 0308 	and.w	r3, r3, #8
 8006968:	2b00      	cmp	r3, #0
 800696a:	d01b      	beq.n	80069a4 <HAL_LTDC_IRQHandler+0x140>
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	f003 0308 	and.w	r3, r3, #8
 8006972:	2b00      	cmp	r3, #0
 8006974:	d016      	beq.n	80069a4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 0208 	bic.w	r2, r2, #8
 8006984:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2208      	movs	r2, #8
 800698c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2201      	movs	r2, #1
 8006992:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f818 	bl	80069d4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80069a4:	bf00      	nop
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80069e8:	b5b0      	push	{r4, r5, r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d101      	bne.n	8006a02 <HAL_LTDC_ConfigLayer+0x1a>
 80069fe:	2302      	movs	r3, #2
 8006a00:	e02c      	b.n	8006a5c <HAL_LTDC_ConfigLayer+0x74>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2134      	movs	r1, #52	; 0x34
 8006a18:	fb01 f303 	mul.w	r3, r1, r3
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	4614      	mov	r4, r2
 8006a26:	461d      	mov	r5, r3
 8006a28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a34:	682b      	ldr	r3, [r5, #0]
 8006a36:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	68b9      	ldr	r1, [r7, #8]
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 f811 	bl	8006a64 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2201      	movs	r2, #1
 8006a48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bdb0      	pop	{r4, r5, r7, pc}

08006a64 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b089      	sub	sp, #36	; 0x24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	685a      	ldr	r2, [r3, #4]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	0c1b      	lsrs	r3, r3, #16
 8006a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a80:	4413      	add	r3, r2
 8006a82:	041b      	lsls	r3, r3, #16
 8006a84:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	01db      	lsls	r3, r3, #7
 8006a90:	4413      	add	r3, r2
 8006a92:	3384      	adds	r3, #132	; 0x84
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	6812      	ldr	r2, [r2, #0]
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	01d2      	lsls	r2, r2, #7
 8006aa0:	440a      	add	r2, r1
 8006aa2:	3284      	adds	r2, #132	; 0x84
 8006aa4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006aa8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	0c1b      	lsrs	r3, r3, #16
 8006ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aba:	4413      	add	r3, r2
 8006abc:	1c5a      	adds	r2, r3, #1
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	01db      	lsls	r3, r3, #7
 8006ac8:	440b      	add	r3, r1
 8006aca:	3384      	adds	r3, #132	; 0x84
 8006acc:	4619      	mov	r1, r3
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	68da      	ldr	r2, [r3, #12]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ae2:	4413      	add	r3, r2
 8006ae4:	041b      	lsls	r3, r3, #16
 8006ae6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	461a      	mov	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	01db      	lsls	r3, r3, #7
 8006af2:	4413      	add	r3, r2
 8006af4:	3384      	adds	r3, #132	; 0x84
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	6812      	ldr	r2, [r2, #0]
 8006afc:	4611      	mov	r1, r2
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	01d2      	lsls	r2, r2, #7
 8006b02:	440a      	add	r2, r1
 8006b04:	3284      	adds	r2, #132	; 0x84
 8006b06:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006b0a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	689a      	ldr	r2, [r3, #8]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b1a:	4413      	add	r3, r2
 8006b1c:	1c5a      	adds	r2, r3, #1
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4619      	mov	r1, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	01db      	lsls	r3, r3, #7
 8006b28:	440b      	add	r3, r1
 8006b2a:	3384      	adds	r3, #132	; 0x84
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	461a      	mov	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	01db      	lsls	r3, r3, #7
 8006b3e:	4413      	add	r3, r2
 8006b40:	3384      	adds	r3, #132	; 0x84
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	6812      	ldr	r2, [r2, #0]
 8006b48:	4611      	mov	r1, r2
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	01d2      	lsls	r2, r2, #7
 8006b4e:	440a      	add	r2, r1
 8006b50:	3284      	adds	r2, #132	; 0x84
 8006b52:	f023 0307 	bic.w	r3, r3, #7
 8006b56:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	01db      	lsls	r3, r3, #7
 8006b62:	4413      	add	r3, r2
 8006b64:	3384      	adds	r3, #132	; 0x84
 8006b66:	461a      	mov	r2, r3
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006b74:	021b      	lsls	r3, r3, #8
 8006b76:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006b7e:	041b      	lsls	r3, r3, #16
 8006b80:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	061b      	lsls	r3, r3, #24
 8006b88:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	01db      	lsls	r3, r3, #7
 8006b94:	4413      	add	r3, r2
 8006b96:	3384      	adds	r3, #132	; 0x84
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	01db      	lsls	r3, r3, #7
 8006ba4:	4413      	add	r3, r2
 8006ba6:	3384      	adds	r3, #132	; 0x84
 8006ba8:	461a      	mov	r2, r3
 8006baa:	2300      	movs	r3, #0
 8006bac:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	431a      	orrs	r2, r3
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	431a      	orrs	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	01db      	lsls	r3, r3, #7
 8006bc8:	440b      	add	r3, r1
 8006bca:	3384      	adds	r3, #132	; 0x84
 8006bcc:	4619      	mov	r1, r3
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	461a      	mov	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	01db      	lsls	r3, r3, #7
 8006bde:	4413      	add	r3, r2
 8006be0:	3384      	adds	r3, #132	; 0x84
 8006be2:	695b      	ldr	r3, [r3, #20]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	6812      	ldr	r2, [r2, #0]
 8006be8:	4611      	mov	r1, r2
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	01d2      	lsls	r2, r2, #7
 8006bee:	440a      	add	r2, r1
 8006bf0:	3284      	adds	r2, #132	; 0x84
 8006bf2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006bf6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	01db      	lsls	r3, r3, #7
 8006c02:	4413      	add	r3, r2
 8006c04:	3384      	adds	r3, #132	; 0x84
 8006c06:	461a      	mov	r2, r3
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	461a      	mov	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	01db      	lsls	r3, r3, #7
 8006c18:	4413      	add	r3, r2
 8006c1a:	3384      	adds	r3, #132	; 0x84
 8006c1c:	69da      	ldr	r2, [r3, #28]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4619      	mov	r1, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	01db      	lsls	r3, r3, #7
 8006c28:	440b      	add	r3, r1
 8006c2a:	3384      	adds	r3, #132	; 0x84
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	4b58      	ldr	r3, [pc, #352]	; (8006d90 <LTDC_SetConfig+0x32c>)
 8006c30:	4013      	ands	r3, r2
 8006c32:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	69da      	ldr	r2, [r3, #28]
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	68f9      	ldr	r1, [r7, #12]
 8006c3e:	6809      	ldr	r1, [r1, #0]
 8006c40:	4608      	mov	r0, r1
 8006c42:	6879      	ldr	r1, [r7, #4]
 8006c44:	01c9      	lsls	r1, r1, #7
 8006c46:	4401      	add	r1, r0
 8006c48:	3184      	adds	r1, #132	; 0x84
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	461a      	mov	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	01db      	lsls	r3, r3, #7
 8006c58:	4413      	add	r3, r2
 8006c5a:	3384      	adds	r3, #132	; 0x84
 8006c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	461a      	mov	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	01db      	lsls	r3, r3, #7
 8006c68:	4413      	add	r3, r2
 8006c6a:	3384      	adds	r3, #132	; 0x84
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	2300      	movs	r3, #0
 8006c70:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	461a      	mov	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	01db      	lsls	r3, r3, #7
 8006c7c:	4413      	add	r3, r2
 8006c7e:	3384      	adds	r3, #132	; 0x84
 8006c80:	461a      	mov	r2, r3
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c86:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d102      	bne.n	8006c96 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006c90:	2304      	movs	r3, #4
 8006c92:	61fb      	str	r3, [r7, #28]
 8006c94:	e01b      	b.n	8006cce <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d102      	bne.n	8006ca4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	61fb      	str	r3, [r7, #28]
 8006ca2:	e014      	b.n	8006cce <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	2b04      	cmp	r3, #4
 8006caa:	d00b      	beq.n	8006cc4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d007      	beq.n	8006cc4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006cb8:	2b03      	cmp	r3, #3
 8006cba:	d003      	beq.n	8006cc4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006cc0:	2b07      	cmp	r3, #7
 8006cc2:	d102      	bne.n	8006cca <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	61fb      	str	r3, [r7, #28]
 8006cc8:	e001      	b.n	8006cce <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	01db      	lsls	r3, r3, #7
 8006cd8:	4413      	add	r3, r2
 8006cda:	3384      	adds	r3, #132	; 0x84
 8006cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	6812      	ldr	r2, [r2, #0]
 8006ce2:	4611      	mov	r1, r2
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	01d2      	lsls	r2, r2, #7
 8006ce8:	440a      	add	r2, r1
 8006cea:	3284      	adds	r2, #132	; 0x84
 8006cec:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006cf0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf6:	69fa      	ldr	r2, [r7, #28]
 8006cf8:	fb02 f303 	mul.w	r3, r2, r3
 8006cfc:	041a      	lsls	r2, r3, #16
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	6859      	ldr	r1, [r3, #4]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	1acb      	subs	r3, r1, r3
 8006d08:	69f9      	ldr	r1, [r7, #28]
 8006d0a:	fb01 f303 	mul.w	r3, r1, r3
 8006d0e:	3303      	adds	r3, #3
 8006d10:	68f9      	ldr	r1, [r7, #12]
 8006d12:	6809      	ldr	r1, [r1, #0]
 8006d14:	4608      	mov	r0, r1
 8006d16:	6879      	ldr	r1, [r7, #4]
 8006d18:	01c9      	lsls	r1, r1, #7
 8006d1a:	4401      	add	r1, r0
 8006d1c:	3184      	adds	r1, #132	; 0x84
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	461a      	mov	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	01db      	lsls	r3, r3, #7
 8006d2c:	4413      	add	r3, r2
 8006d2e:	3384      	adds	r3, #132	; 0x84
 8006d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4619      	mov	r1, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	01db      	lsls	r3, r3, #7
 8006d3c:	440b      	add	r3, r1
 8006d3e:	3384      	adds	r3, #132	; 0x84
 8006d40:	4619      	mov	r1, r3
 8006d42:	4b14      	ldr	r3, [pc, #80]	; (8006d94 <LTDC_SetConfig+0x330>)
 8006d44:	4013      	ands	r3, r2
 8006d46:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	01db      	lsls	r3, r3, #7
 8006d52:	4413      	add	r3, r2
 8006d54:	3384      	adds	r3, #132	; 0x84
 8006d56:	461a      	mov	r2, r3
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	461a      	mov	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	01db      	lsls	r3, r3, #7
 8006d68:	4413      	add	r3, r2
 8006d6a:	3384      	adds	r3, #132	; 0x84
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	6812      	ldr	r2, [r2, #0]
 8006d72:	4611      	mov	r1, r2
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	01d2      	lsls	r2, r2, #7
 8006d78:	440a      	add	r2, r1
 8006d7a:	3284      	adds	r2, #132	; 0x84
 8006d7c:	f043 0301 	orr.w	r3, r3, #1
 8006d80:	6013      	str	r3, [r2, #0]
}
 8006d82:	bf00      	nop
 8006d84:	3724      	adds	r7, #36	; 0x24
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	fffff8f8 	.word	0xfffff8f8
 8006d94:	fffff800 	.word	0xfffff800

08006d98 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d9c:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a04      	ldr	r2, [pc, #16]	; (8006db4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006da6:	6013      	str	r3, [r2, #0]
}
 8006da8:	bf00      	nop
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	40007000 	.word	0x40007000

08006db8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006dc2:	4b23      	ldr	r3, [pc, #140]	; (8006e50 <HAL_PWREx_EnableOverDrive+0x98>)
 8006dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc6:	4a22      	ldr	r2, [pc, #136]	; (8006e50 <HAL_PWREx_EnableOverDrive+0x98>)
 8006dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8006dce:	4b20      	ldr	r3, [pc, #128]	; (8006e50 <HAL_PWREx_EnableOverDrive+0x98>)
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dd6:	603b      	str	r3, [r7, #0]
 8006dd8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006dda:	4b1e      	ldr	r3, [pc, #120]	; (8006e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a1d      	ldr	r2, [pc, #116]	; (8006e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006de4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006de6:	f7fc fccf 	bl	8003788 <HAL_GetTick>
 8006dea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006dec:	e009      	b.n	8006e02 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006dee:	f7fc fccb 	bl	8003788 <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dfc:	d901      	bls.n	8006e02 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e022      	b.n	8006e48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006e02:	4b14      	ldr	r3, [pc, #80]	; (8006e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e0e:	d1ee      	bne.n	8006dee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006e10:	4b10      	ldr	r3, [pc, #64]	; (8006e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a0f      	ldr	r2, [pc, #60]	; (8006e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e1a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e1c:	f7fc fcb4 	bl	8003788 <HAL_GetTick>
 8006e20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006e22:	e009      	b.n	8006e38 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006e24:	f7fc fcb0 	bl	8003788 <HAL_GetTick>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e32:	d901      	bls.n	8006e38 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e007      	b.n	8006e48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006e38:	4b06      	ldr	r3, [pc, #24]	; (8006e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e44:	d1ee      	bne.n	8006e24 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	40023800 	.word	0x40023800
 8006e54:	40007000 	.word	0x40007000

08006e58 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b086      	sub	sp, #24
 8006e5c:	af02      	add	r7, sp, #8
 8006e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006e60:	f7fc fc92 	bl	8003788 <HAL_GetTick>
 8006e64:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e067      	b.n	8006f40 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10b      	bne.n	8006e94 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7fb ff41 	bl	8002d0c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006e8a:	f241 3188 	movw	r1, #5000	; 0x1388
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f85e 	bl	8006f50 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	021a      	lsls	r2, r3, #8
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	2120      	movs	r1, #32
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f856 	bl	8006f6c <QSPI_WaitFlagStateUntilTimeout>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006ec4:	7afb      	ldrb	r3, [r7, #11]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d135      	bne.n	8006f36 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	4b1d      	ldr	r3, [pc, #116]	; (8006f48 <HAL_QSPI_Init+0xf0>)
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	6852      	ldr	r2, [r2, #4]
 8006ed8:	0611      	lsls	r1, r2, #24
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	68d2      	ldr	r2, [r2, #12]
 8006ede:	4311      	orrs	r1, r2
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	69d2      	ldr	r2, [r2, #28]
 8006ee4:	4311      	orrs	r1, r2
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	6a12      	ldr	r2, [r2, #32]
 8006eea:	4311      	orrs	r1, r2
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	6812      	ldr	r2, [r2, #0]
 8006ef0:	430b      	orrs	r3, r1
 8006ef2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	4b14      	ldr	r3, [pc, #80]	; (8006f4c <HAL_QSPI_Init+0xf4>)
 8006efc:	4013      	ands	r3, r2
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	6912      	ldr	r2, [r2, #16]
 8006f02:	0411      	lsls	r1, r2, #16
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	6952      	ldr	r2, [r2, #20]
 8006f08:	4311      	orrs	r1, r2
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	6992      	ldr	r2, [r2, #24]
 8006f0e:	4311      	orrs	r1, r2
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	6812      	ldr	r2, [r2, #0]
 8006f14:	430b      	orrs	r3, r1
 8006f16:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f042 0201 	orr.w	r2, r2, #1
 8006f26:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006f3e:	7afb      	ldrb	r3, [r7, #11]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	00ffff2f 	.word	0x00ffff2f
 8006f4c:	ffe0f8fe 	.word	0xffe0f8fe

08006f50 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	603b      	str	r3, [r7, #0]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006f7c:	e01a      	b.n	8006fb4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f84:	d016      	beq.n	8006fb4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f86:	f7fc fbff 	bl	8003788 <HAL_GetTick>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d302      	bcc.n	8006f9c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10b      	bne.n	8006fb4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2204      	movs	r2, #4
 8006fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa8:	f043 0201 	orr.w	r2, r3, #1
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e00e      	b.n	8006fd2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	689a      	ldr	r2, [r3, #8]
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	bf14      	ite	ne
 8006fc2:	2301      	movne	r3, #1
 8006fc4:	2300      	moveq	r3, #0
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	461a      	mov	r2, r3
 8006fca:	79fb      	ldrb	r3, [r7, #7]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d1d6      	bne.n	8006f7e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
	...

08006fdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e291      	b.n	8007516 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f000 8087 	beq.w	800710e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007000:	4b96      	ldr	r3, [pc, #600]	; (800725c <HAL_RCC_OscConfig+0x280>)
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f003 030c 	and.w	r3, r3, #12
 8007008:	2b04      	cmp	r3, #4
 800700a:	d00c      	beq.n	8007026 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800700c:	4b93      	ldr	r3, [pc, #588]	; (800725c <HAL_RCC_OscConfig+0x280>)
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f003 030c 	and.w	r3, r3, #12
 8007014:	2b08      	cmp	r3, #8
 8007016:	d112      	bne.n	800703e <HAL_RCC_OscConfig+0x62>
 8007018:	4b90      	ldr	r3, [pc, #576]	; (800725c <HAL_RCC_OscConfig+0x280>)
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007020:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007024:	d10b      	bne.n	800703e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007026:	4b8d      	ldr	r3, [pc, #564]	; (800725c <HAL_RCC_OscConfig+0x280>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d06c      	beq.n	800710c <HAL_RCC_OscConfig+0x130>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d168      	bne.n	800710c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e26b      	b.n	8007516 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007046:	d106      	bne.n	8007056 <HAL_RCC_OscConfig+0x7a>
 8007048:	4b84      	ldr	r3, [pc, #528]	; (800725c <HAL_RCC_OscConfig+0x280>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a83      	ldr	r2, [pc, #524]	; (800725c <HAL_RCC_OscConfig+0x280>)
 800704e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007052:	6013      	str	r3, [r2, #0]
 8007054:	e02e      	b.n	80070b4 <HAL_RCC_OscConfig+0xd8>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10c      	bne.n	8007078 <HAL_RCC_OscConfig+0x9c>
 800705e:	4b7f      	ldr	r3, [pc, #508]	; (800725c <HAL_RCC_OscConfig+0x280>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a7e      	ldr	r2, [pc, #504]	; (800725c <HAL_RCC_OscConfig+0x280>)
 8007064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007068:	6013      	str	r3, [r2, #0]
 800706a:	4b7c      	ldr	r3, [pc, #496]	; (800725c <HAL_RCC_OscConfig+0x280>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a7b      	ldr	r2, [pc, #492]	; (800725c <HAL_RCC_OscConfig+0x280>)
 8007070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007074:	6013      	str	r3, [r2, #0]
 8007076:	e01d      	b.n	80070b4 <HAL_RCC_OscConfig+0xd8>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007080:	d10c      	bne.n	800709c <HAL_RCC_OscConfig+0xc0>
 8007082:	4b76      	ldr	r3, [pc, #472]	; (800725c <HAL_RCC_OscConfig+0x280>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a75      	ldr	r2, [pc, #468]	; (800725c <HAL_RCC_OscConfig+0x280>)
 8007088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800708c:	6013      	str	r3, [r2, #0]
 800708e:	4b73      	ldr	r3, [pc, #460]	; (800725c <HAL_RCC_OscConfig+0x280>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a72      	ldr	r2, [pc, #456]	; (800725c <HAL_RCC_OscConfig+0x280>)
 8007094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007098:	6013      	str	r3, [r2, #0]
 800709a:	e00b      	b.n	80070b4 <HAL_RCC_OscConfig+0xd8>
 800709c:	4b6f      	ldr	r3, [pc, #444]	; (800725c <HAL_RCC_OscConfig+0x280>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a6e      	ldr	r2, [pc, #440]	; (800725c <HAL_RCC_OscConfig+0x280>)
 80070a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070a6:	6013      	str	r3, [r2, #0]
 80070a8:	4b6c      	ldr	r3, [pc, #432]	; (800725c <HAL_RCC_OscConfig+0x280>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a6b      	ldr	r2, [pc, #428]	; (800725c <HAL_RCC_OscConfig+0x280>)
 80070ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d013      	beq.n	80070e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070bc:	f7fc fb64 	bl	8003788 <HAL_GetTick>
 80070c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070c2:	e008      	b.n	80070d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070c4:	f7fc fb60 	bl	8003788 <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	2b64      	cmp	r3, #100	; 0x64
 80070d0:	d901      	bls.n	80070d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e21f      	b.n	8007516 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070d6:	4b61      	ldr	r3, [pc, #388]	; (800725c <HAL_RCC_OscConfig+0x280>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d0f0      	beq.n	80070c4 <HAL_RCC_OscConfig+0xe8>
 80070e2:	e014      	b.n	800710e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e4:	f7fc fb50 	bl	8003788 <HAL_GetTick>
 80070e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070ea:	e008      	b.n	80070fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070ec:	f7fc fb4c 	bl	8003788 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	2b64      	cmp	r3, #100	; 0x64
 80070f8:	d901      	bls.n	80070fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e20b      	b.n	8007516 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070fe:	4b57      	ldr	r3, [pc, #348]	; (800725c <HAL_RCC_OscConfig+0x280>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1f0      	bne.n	80070ec <HAL_RCC_OscConfig+0x110>
 800710a:	e000      	b.n	800710e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800710c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d069      	beq.n	80071ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800711a:	4b50      	ldr	r3, [pc, #320]	; (800725c <HAL_RCC_OscConfig+0x280>)
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f003 030c 	and.w	r3, r3, #12
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00b      	beq.n	800713e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007126:	4b4d      	ldr	r3, [pc, #308]	; (800725c <HAL_RCC_OscConfig+0x280>)
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f003 030c 	and.w	r3, r3, #12
 800712e:	2b08      	cmp	r3, #8
 8007130:	d11c      	bne.n	800716c <HAL_RCC_OscConfig+0x190>
 8007132:	4b4a      	ldr	r3, [pc, #296]	; (800725c <HAL_RCC_OscConfig+0x280>)
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d116      	bne.n	800716c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800713e:	4b47      	ldr	r3, [pc, #284]	; (800725c <HAL_RCC_OscConfig+0x280>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0302 	and.w	r3, r3, #2
 8007146:	2b00      	cmp	r3, #0
 8007148:	d005      	beq.n	8007156 <HAL_RCC_OscConfig+0x17a>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d001      	beq.n	8007156 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e1df      	b.n	8007516 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007156:	4b41      	ldr	r3, [pc, #260]	; (800725c <HAL_RCC_OscConfig+0x280>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	00db      	lsls	r3, r3, #3
 8007164:	493d      	ldr	r1, [pc, #244]	; (800725c <HAL_RCC_OscConfig+0x280>)
 8007166:	4313      	orrs	r3, r2
 8007168:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800716a:	e040      	b.n	80071ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d023      	beq.n	80071bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007174:	4b39      	ldr	r3, [pc, #228]	; (800725c <HAL_RCC_OscConfig+0x280>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a38      	ldr	r2, [pc, #224]	; (800725c <HAL_RCC_OscConfig+0x280>)
 800717a:	f043 0301 	orr.w	r3, r3, #1
 800717e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007180:	f7fc fb02 	bl	8003788 <HAL_GetTick>
 8007184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007186:	e008      	b.n	800719a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007188:	f7fc fafe 	bl	8003788 <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	2b02      	cmp	r3, #2
 8007194:	d901      	bls.n	800719a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e1bd      	b.n	8007516 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800719a:	4b30      	ldr	r3, [pc, #192]	; (800725c <HAL_RCC_OscConfig+0x280>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0302 	and.w	r3, r3, #2
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d0f0      	beq.n	8007188 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071a6:	4b2d      	ldr	r3, [pc, #180]	; (800725c <HAL_RCC_OscConfig+0x280>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	4929      	ldr	r1, [pc, #164]	; (800725c <HAL_RCC_OscConfig+0x280>)
 80071b6:	4313      	orrs	r3, r2
 80071b8:	600b      	str	r3, [r1, #0]
 80071ba:	e018      	b.n	80071ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071bc:	4b27      	ldr	r3, [pc, #156]	; (800725c <HAL_RCC_OscConfig+0x280>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a26      	ldr	r2, [pc, #152]	; (800725c <HAL_RCC_OscConfig+0x280>)
 80071c2:	f023 0301 	bic.w	r3, r3, #1
 80071c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071c8:	f7fc fade 	bl	8003788 <HAL_GetTick>
 80071cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071ce:	e008      	b.n	80071e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071d0:	f7fc fada 	bl	8003788 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d901      	bls.n	80071e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e199      	b.n	8007516 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071e2:	4b1e      	ldr	r3, [pc, #120]	; (800725c <HAL_RCC_OscConfig+0x280>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0302 	and.w	r3, r3, #2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1f0      	bne.n	80071d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0308 	and.w	r3, r3, #8
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d038      	beq.n	800726c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d019      	beq.n	8007236 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007202:	4b16      	ldr	r3, [pc, #88]	; (800725c <HAL_RCC_OscConfig+0x280>)
 8007204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007206:	4a15      	ldr	r2, [pc, #84]	; (800725c <HAL_RCC_OscConfig+0x280>)
 8007208:	f043 0301 	orr.w	r3, r3, #1
 800720c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800720e:	f7fc fabb 	bl	8003788 <HAL_GetTick>
 8007212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007214:	e008      	b.n	8007228 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007216:	f7fc fab7 	bl	8003788 <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	2b02      	cmp	r3, #2
 8007222:	d901      	bls.n	8007228 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e176      	b.n	8007516 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007228:	4b0c      	ldr	r3, [pc, #48]	; (800725c <HAL_RCC_OscConfig+0x280>)
 800722a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800722c:	f003 0302 	and.w	r3, r3, #2
 8007230:	2b00      	cmp	r3, #0
 8007232:	d0f0      	beq.n	8007216 <HAL_RCC_OscConfig+0x23a>
 8007234:	e01a      	b.n	800726c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007236:	4b09      	ldr	r3, [pc, #36]	; (800725c <HAL_RCC_OscConfig+0x280>)
 8007238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800723a:	4a08      	ldr	r2, [pc, #32]	; (800725c <HAL_RCC_OscConfig+0x280>)
 800723c:	f023 0301 	bic.w	r3, r3, #1
 8007240:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007242:	f7fc faa1 	bl	8003788 <HAL_GetTick>
 8007246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007248:	e00a      	b.n	8007260 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800724a:	f7fc fa9d 	bl	8003788 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	2b02      	cmp	r3, #2
 8007256:	d903      	bls.n	8007260 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e15c      	b.n	8007516 <HAL_RCC_OscConfig+0x53a>
 800725c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007260:	4b91      	ldr	r3, [pc, #580]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 8007262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007264:	f003 0302 	and.w	r3, r3, #2
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1ee      	bne.n	800724a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0304 	and.w	r3, r3, #4
 8007274:	2b00      	cmp	r3, #0
 8007276:	f000 80a4 	beq.w	80073c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800727a:	4b8b      	ldr	r3, [pc, #556]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d10d      	bne.n	80072a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007286:	4b88      	ldr	r3, [pc, #544]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 8007288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728a:	4a87      	ldr	r2, [pc, #540]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 800728c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007290:	6413      	str	r3, [r2, #64]	; 0x40
 8007292:	4b85      	ldr	r3, [pc, #532]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 8007294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800729a:	60bb      	str	r3, [r7, #8]
 800729c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800729e:	2301      	movs	r3, #1
 80072a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072a2:	4b82      	ldr	r3, [pc, #520]	; (80074ac <HAL_RCC_OscConfig+0x4d0>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d118      	bne.n	80072e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80072ae:	4b7f      	ldr	r3, [pc, #508]	; (80074ac <HAL_RCC_OscConfig+0x4d0>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a7e      	ldr	r2, [pc, #504]	; (80074ac <HAL_RCC_OscConfig+0x4d0>)
 80072b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072ba:	f7fc fa65 	bl	8003788 <HAL_GetTick>
 80072be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072c0:	e008      	b.n	80072d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072c2:	f7fc fa61 	bl	8003788 <HAL_GetTick>
 80072c6:	4602      	mov	r2, r0
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	2b64      	cmp	r3, #100	; 0x64
 80072ce:	d901      	bls.n	80072d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e120      	b.n	8007516 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072d4:	4b75      	ldr	r3, [pc, #468]	; (80074ac <HAL_RCC_OscConfig+0x4d0>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d0f0      	beq.n	80072c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d106      	bne.n	80072f6 <HAL_RCC_OscConfig+0x31a>
 80072e8:	4b6f      	ldr	r3, [pc, #444]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 80072ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ec:	4a6e      	ldr	r2, [pc, #440]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 80072ee:	f043 0301 	orr.w	r3, r3, #1
 80072f2:	6713      	str	r3, [r2, #112]	; 0x70
 80072f4:	e02d      	b.n	8007352 <HAL_RCC_OscConfig+0x376>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10c      	bne.n	8007318 <HAL_RCC_OscConfig+0x33c>
 80072fe:	4b6a      	ldr	r3, [pc, #424]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 8007300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007302:	4a69      	ldr	r2, [pc, #420]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 8007304:	f023 0301 	bic.w	r3, r3, #1
 8007308:	6713      	str	r3, [r2, #112]	; 0x70
 800730a:	4b67      	ldr	r3, [pc, #412]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 800730c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730e:	4a66      	ldr	r2, [pc, #408]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 8007310:	f023 0304 	bic.w	r3, r3, #4
 8007314:	6713      	str	r3, [r2, #112]	; 0x70
 8007316:	e01c      	b.n	8007352 <HAL_RCC_OscConfig+0x376>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	2b05      	cmp	r3, #5
 800731e:	d10c      	bne.n	800733a <HAL_RCC_OscConfig+0x35e>
 8007320:	4b61      	ldr	r3, [pc, #388]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 8007322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007324:	4a60      	ldr	r2, [pc, #384]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 8007326:	f043 0304 	orr.w	r3, r3, #4
 800732a:	6713      	str	r3, [r2, #112]	; 0x70
 800732c:	4b5e      	ldr	r3, [pc, #376]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 800732e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007330:	4a5d      	ldr	r2, [pc, #372]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 8007332:	f043 0301 	orr.w	r3, r3, #1
 8007336:	6713      	str	r3, [r2, #112]	; 0x70
 8007338:	e00b      	b.n	8007352 <HAL_RCC_OscConfig+0x376>
 800733a:	4b5b      	ldr	r3, [pc, #364]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 800733c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733e:	4a5a      	ldr	r2, [pc, #360]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 8007340:	f023 0301 	bic.w	r3, r3, #1
 8007344:	6713      	str	r3, [r2, #112]	; 0x70
 8007346:	4b58      	ldr	r3, [pc, #352]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 8007348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800734a:	4a57      	ldr	r2, [pc, #348]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 800734c:	f023 0304 	bic.w	r3, r3, #4
 8007350:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d015      	beq.n	8007386 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800735a:	f7fc fa15 	bl	8003788 <HAL_GetTick>
 800735e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007360:	e00a      	b.n	8007378 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007362:	f7fc fa11 	bl	8003788 <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007370:	4293      	cmp	r3, r2
 8007372:	d901      	bls.n	8007378 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e0ce      	b.n	8007516 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007378:	4b4b      	ldr	r3, [pc, #300]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 800737a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737c:	f003 0302 	and.w	r3, r3, #2
 8007380:	2b00      	cmp	r3, #0
 8007382:	d0ee      	beq.n	8007362 <HAL_RCC_OscConfig+0x386>
 8007384:	e014      	b.n	80073b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007386:	f7fc f9ff 	bl	8003788 <HAL_GetTick>
 800738a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800738c:	e00a      	b.n	80073a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800738e:	f7fc f9fb 	bl	8003788 <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	f241 3288 	movw	r2, #5000	; 0x1388
 800739c:	4293      	cmp	r3, r2
 800739e:	d901      	bls.n	80073a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e0b8      	b.n	8007516 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073a4:	4b40      	ldr	r3, [pc, #256]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 80073a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a8:	f003 0302 	and.w	r3, r3, #2
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1ee      	bne.n	800738e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80073b0:	7dfb      	ldrb	r3, [r7, #23]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d105      	bne.n	80073c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073b6:	4b3c      	ldr	r3, [pc, #240]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 80073b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ba:	4a3b      	ldr	r2, [pc, #236]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 80073bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f000 80a4 	beq.w	8007514 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073cc:	4b36      	ldr	r3, [pc, #216]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f003 030c 	and.w	r3, r3, #12
 80073d4:	2b08      	cmp	r3, #8
 80073d6:	d06b      	beq.n	80074b0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d149      	bne.n	8007474 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073e0:	4b31      	ldr	r3, [pc, #196]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a30      	ldr	r2, [pc, #192]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 80073e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ec:	f7fc f9cc 	bl	8003788 <HAL_GetTick>
 80073f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073f2:	e008      	b.n	8007406 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073f4:	f7fc f9c8 	bl	8003788 <HAL_GetTick>
 80073f8:	4602      	mov	r2, r0
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d901      	bls.n	8007406 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e087      	b.n	8007516 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007406:	4b28      	ldr	r3, [pc, #160]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1f0      	bne.n	80073f4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	69da      	ldr	r2, [r3, #28]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	431a      	orrs	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007420:	019b      	lsls	r3, r3, #6
 8007422:	431a      	orrs	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007428:	085b      	lsrs	r3, r3, #1
 800742a:	3b01      	subs	r3, #1
 800742c:	041b      	lsls	r3, r3, #16
 800742e:	431a      	orrs	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007434:	061b      	lsls	r3, r3, #24
 8007436:	4313      	orrs	r3, r2
 8007438:	4a1b      	ldr	r2, [pc, #108]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 800743a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800743e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007440:	4b19      	ldr	r3, [pc, #100]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a18      	ldr	r2, [pc, #96]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 8007446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800744a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800744c:	f7fc f99c 	bl	8003788 <HAL_GetTick>
 8007450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007452:	e008      	b.n	8007466 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007454:	f7fc f998 	bl	8003788 <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	2b02      	cmp	r3, #2
 8007460:	d901      	bls.n	8007466 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e057      	b.n	8007516 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007466:	4b10      	ldr	r3, [pc, #64]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d0f0      	beq.n	8007454 <HAL_RCC_OscConfig+0x478>
 8007472:	e04f      	b.n	8007514 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007474:	4b0c      	ldr	r3, [pc, #48]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a0b      	ldr	r2, [pc, #44]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 800747a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800747e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007480:	f7fc f982 	bl	8003788 <HAL_GetTick>
 8007484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007486:	e008      	b.n	800749a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007488:	f7fc f97e 	bl	8003788 <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	2b02      	cmp	r3, #2
 8007494:	d901      	bls.n	800749a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e03d      	b.n	8007516 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800749a:	4b03      	ldr	r3, [pc, #12]	; (80074a8 <HAL_RCC_OscConfig+0x4cc>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1f0      	bne.n	8007488 <HAL_RCC_OscConfig+0x4ac>
 80074a6:	e035      	b.n	8007514 <HAL_RCC_OscConfig+0x538>
 80074a8:	40023800 	.word	0x40023800
 80074ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80074b0:	4b1b      	ldr	r3, [pc, #108]	; (8007520 <HAL_RCC_OscConfig+0x544>)
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d028      	beq.n	8007510 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d121      	bne.n	8007510 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d11a      	bne.n	8007510 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80074e0:	4013      	ands	r3, r2
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80074e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d111      	bne.n	8007510 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f6:	085b      	lsrs	r3, r3, #1
 80074f8:	3b01      	subs	r3, #1
 80074fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d107      	bne.n	8007510 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800750c:	429a      	cmp	r2, r3
 800750e:	d001      	beq.n	8007514 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e000      	b.n	8007516 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3718      	adds	r7, #24
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	40023800 	.word	0x40023800

08007524 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800752e:	2300      	movs	r3, #0
 8007530:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d101      	bne.n	800753c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e0d0      	b.n	80076de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800753c:	4b6a      	ldr	r3, [pc, #424]	; (80076e8 <HAL_RCC_ClockConfig+0x1c4>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 030f 	and.w	r3, r3, #15
 8007544:	683a      	ldr	r2, [r7, #0]
 8007546:	429a      	cmp	r2, r3
 8007548:	d910      	bls.n	800756c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800754a:	4b67      	ldr	r3, [pc, #412]	; (80076e8 <HAL_RCC_ClockConfig+0x1c4>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f023 020f 	bic.w	r2, r3, #15
 8007552:	4965      	ldr	r1, [pc, #404]	; (80076e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	4313      	orrs	r3, r2
 8007558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800755a:	4b63      	ldr	r3, [pc, #396]	; (80076e8 <HAL_RCC_ClockConfig+0x1c4>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 030f 	and.w	r3, r3, #15
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	429a      	cmp	r2, r3
 8007566:	d001      	beq.n	800756c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e0b8      	b.n	80076de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0302 	and.w	r3, r3, #2
 8007574:	2b00      	cmp	r3, #0
 8007576:	d020      	beq.n	80075ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0304 	and.w	r3, r3, #4
 8007580:	2b00      	cmp	r3, #0
 8007582:	d005      	beq.n	8007590 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007584:	4b59      	ldr	r3, [pc, #356]	; (80076ec <HAL_RCC_ClockConfig+0x1c8>)
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	4a58      	ldr	r2, [pc, #352]	; (80076ec <HAL_RCC_ClockConfig+0x1c8>)
 800758a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800758e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0308 	and.w	r3, r3, #8
 8007598:	2b00      	cmp	r3, #0
 800759a:	d005      	beq.n	80075a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800759c:	4b53      	ldr	r3, [pc, #332]	; (80076ec <HAL_RCC_ClockConfig+0x1c8>)
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	4a52      	ldr	r2, [pc, #328]	; (80076ec <HAL_RCC_ClockConfig+0x1c8>)
 80075a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80075a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075a8:	4b50      	ldr	r3, [pc, #320]	; (80076ec <HAL_RCC_ClockConfig+0x1c8>)
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	494d      	ldr	r1, [pc, #308]	; (80076ec <HAL_RCC_ClockConfig+0x1c8>)
 80075b6:	4313      	orrs	r3, r2
 80075b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d040      	beq.n	8007648 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d107      	bne.n	80075de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075ce:	4b47      	ldr	r3, [pc, #284]	; (80076ec <HAL_RCC_ClockConfig+0x1c8>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d115      	bne.n	8007606 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e07f      	b.n	80076de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d107      	bne.n	80075f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075e6:	4b41      	ldr	r3, [pc, #260]	; (80076ec <HAL_RCC_ClockConfig+0x1c8>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d109      	bne.n	8007606 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e073      	b.n	80076de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075f6:	4b3d      	ldr	r3, [pc, #244]	; (80076ec <HAL_RCC_ClockConfig+0x1c8>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0302 	and.w	r3, r3, #2
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e06b      	b.n	80076de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007606:	4b39      	ldr	r3, [pc, #228]	; (80076ec <HAL_RCC_ClockConfig+0x1c8>)
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	f023 0203 	bic.w	r2, r3, #3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	4936      	ldr	r1, [pc, #216]	; (80076ec <HAL_RCC_ClockConfig+0x1c8>)
 8007614:	4313      	orrs	r3, r2
 8007616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007618:	f7fc f8b6 	bl	8003788 <HAL_GetTick>
 800761c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800761e:	e00a      	b.n	8007636 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007620:	f7fc f8b2 	bl	8003788 <HAL_GetTick>
 8007624:	4602      	mov	r2, r0
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	f241 3288 	movw	r2, #5000	; 0x1388
 800762e:	4293      	cmp	r3, r2
 8007630:	d901      	bls.n	8007636 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e053      	b.n	80076de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007636:	4b2d      	ldr	r3, [pc, #180]	; (80076ec <HAL_RCC_ClockConfig+0x1c8>)
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f003 020c 	and.w	r2, r3, #12
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	429a      	cmp	r2, r3
 8007646:	d1eb      	bne.n	8007620 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007648:	4b27      	ldr	r3, [pc, #156]	; (80076e8 <HAL_RCC_ClockConfig+0x1c4>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 030f 	and.w	r3, r3, #15
 8007650:	683a      	ldr	r2, [r7, #0]
 8007652:	429a      	cmp	r2, r3
 8007654:	d210      	bcs.n	8007678 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007656:	4b24      	ldr	r3, [pc, #144]	; (80076e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f023 020f 	bic.w	r2, r3, #15
 800765e:	4922      	ldr	r1, [pc, #136]	; (80076e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	4313      	orrs	r3, r2
 8007664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007666:	4b20      	ldr	r3, [pc, #128]	; (80076e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 030f 	and.w	r3, r3, #15
 800766e:	683a      	ldr	r2, [r7, #0]
 8007670:	429a      	cmp	r2, r3
 8007672:	d001      	beq.n	8007678 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e032      	b.n	80076de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 0304 	and.w	r3, r3, #4
 8007680:	2b00      	cmp	r3, #0
 8007682:	d008      	beq.n	8007696 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007684:	4b19      	ldr	r3, [pc, #100]	; (80076ec <HAL_RCC_ClockConfig+0x1c8>)
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	4916      	ldr	r1, [pc, #88]	; (80076ec <HAL_RCC_ClockConfig+0x1c8>)
 8007692:	4313      	orrs	r3, r2
 8007694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0308 	and.w	r3, r3, #8
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d009      	beq.n	80076b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80076a2:	4b12      	ldr	r3, [pc, #72]	; (80076ec <HAL_RCC_ClockConfig+0x1c8>)
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	00db      	lsls	r3, r3, #3
 80076b0:	490e      	ldr	r1, [pc, #56]	; (80076ec <HAL_RCC_ClockConfig+0x1c8>)
 80076b2:	4313      	orrs	r3, r2
 80076b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80076b6:	f000 f821 	bl	80076fc <HAL_RCC_GetSysClockFreq>
 80076ba:	4602      	mov	r2, r0
 80076bc:	4b0b      	ldr	r3, [pc, #44]	; (80076ec <HAL_RCC_ClockConfig+0x1c8>)
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	091b      	lsrs	r3, r3, #4
 80076c2:	f003 030f 	and.w	r3, r3, #15
 80076c6:	490a      	ldr	r1, [pc, #40]	; (80076f0 <HAL_RCC_ClockConfig+0x1cc>)
 80076c8:	5ccb      	ldrb	r3, [r1, r3]
 80076ca:	fa22 f303 	lsr.w	r3, r2, r3
 80076ce:	4a09      	ldr	r2, [pc, #36]	; (80076f4 <HAL_RCC_ClockConfig+0x1d0>)
 80076d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80076d2:	4b09      	ldr	r3, [pc, #36]	; (80076f8 <HAL_RCC_ClockConfig+0x1d4>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7fc f812 	bl	8003700 <HAL_InitTick>

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	40023c00 	.word	0x40023c00
 80076ec:	40023800 	.word	0x40023800
 80076f0:	08014de4 	.word	0x08014de4
 80076f4:	20000000 	.word	0x20000000
 80076f8:	20000004 	.word	0x20000004

080076fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076fc:	b5b0      	push	{r4, r5, r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007702:	2100      	movs	r1, #0
 8007704:	6079      	str	r1, [r7, #4]
 8007706:	2100      	movs	r1, #0
 8007708:	60f9      	str	r1, [r7, #12]
 800770a:	2100      	movs	r1, #0
 800770c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800770e:	2100      	movs	r1, #0
 8007710:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007712:	4952      	ldr	r1, [pc, #328]	; (800785c <HAL_RCC_GetSysClockFreq+0x160>)
 8007714:	6889      	ldr	r1, [r1, #8]
 8007716:	f001 010c 	and.w	r1, r1, #12
 800771a:	2908      	cmp	r1, #8
 800771c:	d00d      	beq.n	800773a <HAL_RCC_GetSysClockFreq+0x3e>
 800771e:	2908      	cmp	r1, #8
 8007720:	f200 8094 	bhi.w	800784c <HAL_RCC_GetSysClockFreq+0x150>
 8007724:	2900      	cmp	r1, #0
 8007726:	d002      	beq.n	800772e <HAL_RCC_GetSysClockFreq+0x32>
 8007728:	2904      	cmp	r1, #4
 800772a:	d003      	beq.n	8007734 <HAL_RCC_GetSysClockFreq+0x38>
 800772c:	e08e      	b.n	800784c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800772e:	4b4c      	ldr	r3, [pc, #304]	; (8007860 <HAL_RCC_GetSysClockFreq+0x164>)
 8007730:	60bb      	str	r3, [r7, #8]
      break;
 8007732:	e08e      	b.n	8007852 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007734:	4b4b      	ldr	r3, [pc, #300]	; (8007864 <HAL_RCC_GetSysClockFreq+0x168>)
 8007736:	60bb      	str	r3, [r7, #8]
      break;
 8007738:	e08b      	b.n	8007852 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800773a:	4948      	ldr	r1, [pc, #288]	; (800785c <HAL_RCC_GetSysClockFreq+0x160>)
 800773c:	6849      	ldr	r1, [r1, #4]
 800773e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007742:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007744:	4945      	ldr	r1, [pc, #276]	; (800785c <HAL_RCC_GetSysClockFreq+0x160>)
 8007746:	6849      	ldr	r1, [r1, #4]
 8007748:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800774c:	2900      	cmp	r1, #0
 800774e:	d024      	beq.n	800779a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007750:	4942      	ldr	r1, [pc, #264]	; (800785c <HAL_RCC_GetSysClockFreq+0x160>)
 8007752:	6849      	ldr	r1, [r1, #4]
 8007754:	0989      	lsrs	r1, r1, #6
 8007756:	4608      	mov	r0, r1
 8007758:	f04f 0100 	mov.w	r1, #0
 800775c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007760:	f04f 0500 	mov.w	r5, #0
 8007764:	ea00 0204 	and.w	r2, r0, r4
 8007768:	ea01 0305 	and.w	r3, r1, r5
 800776c:	493d      	ldr	r1, [pc, #244]	; (8007864 <HAL_RCC_GetSysClockFreq+0x168>)
 800776e:	fb01 f003 	mul.w	r0, r1, r3
 8007772:	2100      	movs	r1, #0
 8007774:	fb01 f102 	mul.w	r1, r1, r2
 8007778:	1844      	adds	r4, r0, r1
 800777a:	493a      	ldr	r1, [pc, #232]	; (8007864 <HAL_RCC_GetSysClockFreq+0x168>)
 800777c:	fba2 0101 	umull	r0, r1, r2, r1
 8007780:	1863      	adds	r3, r4, r1
 8007782:	4619      	mov	r1, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	461a      	mov	r2, r3
 8007788:	f04f 0300 	mov.w	r3, #0
 800778c:	f7f9 fa3c 	bl	8000c08 <__aeabi_uldivmod>
 8007790:	4602      	mov	r2, r0
 8007792:	460b      	mov	r3, r1
 8007794:	4613      	mov	r3, r2
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	e04a      	b.n	8007830 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800779a:	4b30      	ldr	r3, [pc, #192]	; (800785c <HAL_RCC_GetSysClockFreq+0x160>)
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	099b      	lsrs	r3, r3, #6
 80077a0:	461a      	mov	r2, r3
 80077a2:	f04f 0300 	mov.w	r3, #0
 80077a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80077aa:	f04f 0100 	mov.w	r1, #0
 80077ae:	ea02 0400 	and.w	r4, r2, r0
 80077b2:	ea03 0501 	and.w	r5, r3, r1
 80077b6:	4620      	mov	r0, r4
 80077b8:	4629      	mov	r1, r5
 80077ba:	f04f 0200 	mov.w	r2, #0
 80077be:	f04f 0300 	mov.w	r3, #0
 80077c2:	014b      	lsls	r3, r1, #5
 80077c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80077c8:	0142      	lsls	r2, r0, #5
 80077ca:	4610      	mov	r0, r2
 80077cc:	4619      	mov	r1, r3
 80077ce:	1b00      	subs	r0, r0, r4
 80077d0:	eb61 0105 	sbc.w	r1, r1, r5
 80077d4:	f04f 0200 	mov.w	r2, #0
 80077d8:	f04f 0300 	mov.w	r3, #0
 80077dc:	018b      	lsls	r3, r1, #6
 80077de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80077e2:	0182      	lsls	r2, r0, #6
 80077e4:	1a12      	subs	r2, r2, r0
 80077e6:	eb63 0301 	sbc.w	r3, r3, r1
 80077ea:	f04f 0000 	mov.w	r0, #0
 80077ee:	f04f 0100 	mov.w	r1, #0
 80077f2:	00d9      	lsls	r1, r3, #3
 80077f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80077f8:	00d0      	lsls	r0, r2, #3
 80077fa:	4602      	mov	r2, r0
 80077fc:	460b      	mov	r3, r1
 80077fe:	1912      	adds	r2, r2, r4
 8007800:	eb45 0303 	adc.w	r3, r5, r3
 8007804:	f04f 0000 	mov.w	r0, #0
 8007808:	f04f 0100 	mov.w	r1, #0
 800780c:	0299      	lsls	r1, r3, #10
 800780e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007812:	0290      	lsls	r0, r2, #10
 8007814:	4602      	mov	r2, r0
 8007816:	460b      	mov	r3, r1
 8007818:	4610      	mov	r0, r2
 800781a:	4619      	mov	r1, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	461a      	mov	r2, r3
 8007820:	f04f 0300 	mov.w	r3, #0
 8007824:	f7f9 f9f0 	bl	8000c08 <__aeabi_uldivmod>
 8007828:	4602      	mov	r2, r0
 800782a:	460b      	mov	r3, r1
 800782c:	4613      	mov	r3, r2
 800782e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007830:	4b0a      	ldr	r3, [pc, #40]	; (800785c <HAL_RCC_GetSysClockFreq+0x160>)
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	0c1b      	lsrs	r3, r3, #16
 8007836:	f003 0303 	and.w	r3, r3, #3
 800783a:	3301      	adds	r3, #1
 800783c:	005b      	lsls	r3, r3, #1
 800783e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	fbb2 f3f3 	udiv	r3, r2, r3
 8007848:	60bb      	str	r3, [r7, #8]
      break;
 800784a:	e002      	b.n	8007852 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800784c:	4b04      	ldr	r3, [pc, #16]	; (8007860 <HAL_RCC_GetSysClockFreq+0x164>)
 800784e:	60bb      	str	r3, [r7, #8]
      break;
 8007850:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007852:	68bb      	ldr	r3, [r7, #8]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bdb0      	pop	{r4, r5, r7, pc}
 800785c:	40023800 	.word	0x40023800
 8007860:	00f42400 	.word	0x00f42400
 8007864:	017d7840 	.word	0x017d7840

08007868 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007868:	b480      	push	{r7}
 800786a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800786c:	4b03      	ldr	r3, [pc, #12]	; (800787c <HAL_RCC_GetHCLKFreq+0x14>)
 800786e:	681b      	ldr	r3, [r3, #0]
}
 8007870:	4618      	mov	r0, r3
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	20000000 	.word	0x20000000

08007880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007884:	f7ff fff0 	bl	8007868 <HAL_RCC_GetHCLKFreq>
 8007888:	4602      	mov	r2, r0
 800788a:	4b05      	ldr	r3, [pc, #20]	; (80078a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	0a9b      	lsrs	r3, r3, #10
 8007890:	f003 0307 	and.w	r3, r3, #7
 8007894:	4903      	ldr	r1, [pc, #12]	; (80078a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007896:	5ccb      	ldrb	r3, [r1, r3]
 8007898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800789c:	4618      	mov	r0, r3
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	40023800 	.word	0x40023800
 80078a4:	08014df4 	.word	0x08014df4

080078a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80078ac:	f7ff ffdc 	bl	8007868 <HAL_RCC_GetHCLKFreq>
 80078b0:	4602      	mov	r2, r0
 80078b2:	4b05      	ldr	r3, [pc, #20]	; (80078c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	0b5b      	lsrs	r3, r3, #13
 80078b8:	f003 0307 	and.w	r3, r3, #7
 80078bc:	4903      	ldr	r1, [pc, #12]	; (80078cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80078be:	5ccb      	ldrb	r3, [r1, r3]
 80078c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	40023800 	.word	0x40023800
 80078cc:	08014df4 	.word	0x08014df4

080078d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b088      	sub	sp, #32
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80078d8:	2300      	movs	r3, #0
 80078da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80078dc:	2300      	movs	r3, #0
 80078de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80078e0:	2300      	movs	r3, #0
 80078e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80078e4:	2300      	movs	r3, #0
 80078e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80078e8:	2300      	movs	r3, #0
 80078ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d012      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80078f8:	4b69      	ldr	r3, [pc, #420]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	4a68      	ldr	r2, [pc, #416]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007902:	6093      	str	r3, [r2, #8]
 8007904:	4b66      	ldr	r3, [pc, #408]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007906:	689a      	ldr	r2, [r3, #8]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800790c:	4964      	ldr	r1, [pc, #400]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800790e:	4313      	orrs	r3, r2
 8007910:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800791a:	2301      	movs	r3, #1
 800791c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007926:	2b00      	cmp	r3, #0
 8007928:	d017      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800792a:	4b5d      	ldr	r3, [pc, #372]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800792c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007930:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007938:	4959      	ldr	r1, [pc, #356]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800793a:	4313      	orrs	r3, r2
 800793c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007944:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007948:	d101      	bne.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800794a:	2301      	movs	r3, #1
 800794c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007956:	2301      	movs	r3, #1
 8007958:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007962:	2b00      	cmp	r3, #0
 8007964:	d017      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007966:	4b4e      	ldr	r3, [pc, #312]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800796c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007974:	494a      	ldr	r1, [pc, #296]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007976:	4313      	orrs	r3, r2
 8007978:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007980:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007984:	d101      	bne.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007986:	2301      	movs	r3, #1
 8007988:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798e:	2b00      	cmp	r3, #0
 8007990:	d101      	bne.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007992:	2301      	movs	r3, #1
 8007994:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d001      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80079a2:	2301      	movs	r3, #1
 80079a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0320 	and.w	r3, r3, #32
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 808b 	beq.w	8007aca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80079b4:	4b3a      	ldr	r3, [pc, #232]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b8:	4a39      	ldr	r2, [pc, #228]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079be:	6413      	str	r3, [r2, #64]	; 0x40
 80079c0:	4b37      	ldr	r3, [pc, #220]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079c8:	60bb      	str	r3, [r7, #8]
 80079ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80079cc:	4b35      	ldr	r3, [pc, #212]	; (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a34      	ldr	r2, [pc, #208]	; (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079d8:	f7fb fed6 	bl	8003788 <HAL_GetTick>
 80079dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80079de:	e008      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079e0:	f7fb fed2 	bl	8003788 <HAL_GetTick>
 80079e4:	4602      	mov	r2, r0
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	2b64      	cmp	r3, #100	; 0x64
 80079ec:	d901      	bls.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e357      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80079f2:	4b2c      	ldr	r3, [pc, #176]	; (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d0f0      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80079fe:	4b28      	ldr	r3, [pc, #160]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a06:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d035      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a16:	693a      	ldr	r2, [r7, #16]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d02e      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a1c:	4b20      	ldr	r3, [pc, #128]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a24:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007a26:	4b1e      	ldr	r3, [pc, #120]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a2a:	4a1d      	ldr	r2, [pc, #116]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a30:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007a32:	4b1b      	ldr	r3, [pc, #108]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a36:	4a1a      	ldr	r2, [pc, #104]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a3c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007a3e:	4a18      	ldr	r2, [pc, #96]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007a44:	4b16      	ldr	r3, [pc, #88]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a48:	f003 0301 	and.w	r3, r3, #1
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d114      	bne.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a50:	f7fb fe9a 	bl	8003788 <HAL_GetTick>
 8007a54:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a56:	e00a      	b.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a58:	f7fb fe96 	bl	8003788 <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d901      	bls.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e319      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a6e:	4b0c      	ldr	r3, [pc, #48]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a72:	f003 0302 	and.w	r3, r3, #2
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d0ee      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a86:	d111      	bne.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007a88:	4b05      	ldr	r3, [pc, #20]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a94:	4b04      	ldr	r3, [pc, #16]	; (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007a96:	400b      	ands	r3, r1
 8007a98:	4901      	ldr	r1, [pc, #4]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	608b      	str	r3, [r1, #8]
 8007a9e:	e00b      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007aa0:	40023800 	.word	0x40023800
 8007aa4:	40007000 	.word	0x40007000
 8007aa8:	0ffffcff 	.word	0x0ffffcff
 8007aac:	4bb1      	ldr	r3, [pc, #708]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	4ab0      	ldr	r2, [pc, #704]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ab2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007ab6:	6093      	str	r3, [r2, #8]
 8007ab8:	4bae      	ldr	r3, [pc, #696]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007aba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ac4:	49ab      	ldr	r1, [pc, #684]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0310 	and.w	r3, r3, #16
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d010      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007ad6:	4ba7      	ldr	r3, [pc, #668]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007adc:	4aa5      	ldr	r2, [pc, #660]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ade:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ae2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007ae6:	4ba3      	ldr	r3, [pc, #652]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ae8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af0:	49a0      	ldr	r1, [pc, #640]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007af2:	4313      	orrs	r3, r2
 8007af4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00a      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b04:	4b9b      	ldr	r3, [pc, #620]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b12:	4998      	ldr	r1, [pc, #608]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00a      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b26:	4b93      	ldr	r3, [pc, #588]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b34:	498f      	ldr	r1, [pc, #572]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00a      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b48:	4b8a      	ldr	r3, [pc, #552]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b56:	4987      	ldr	r1, [pc, #540]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b6a:	4b82      	ldr	r3, [pc, #520]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b78:	497e      	ldr	r1, [pc, #504]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00a      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b8c:	4b79      	ldr	r3, [pc, #484]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b92:	f023 0203 	bic.w	r2, r3, #3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b9a:	4976      	ldr	r1, [pc, #472]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00a      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007bae:	4b71      	ldr	r3, [pc, #452]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bb4:	f023 020c 	bic.w	r2, r3, #12
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bbc:	496d      	ldr	r1, [pc, #436]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00a      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007bd0:	4b68      	ldr	r3, [pc, #416]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bde:	4965      	ldr	r1, [pc, #404]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d00a      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007bf2:	4b60      	ldr	r3, [pc, #384]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c00:	495c      	ldr	r1, [pc, #368]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c02:	4313      	orrs	r3, r2
 8007c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00a      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007c14:	4b57      	ldr	r3, [pc, #348]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c22:	4954      	ldr	r1, [pc, #336]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c24:	4313      	orrs	r3, r2
 8007c26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00a      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007c36:	4b4f      	ldr	r3, [pc, #316]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c44:	494b      	ldr	r1, [pc, #300]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c46:	4313      	orrs	r3, r2
 8007c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00a      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007c58:	4b46      	ldr	r3, [pc, #280]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c66:	4943      	ldr	r1, [pc, #268]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00a      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007c7a:	4b3e      	ldr	r3, [pc, #248]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c88:	493a      	ldr	r1, [pc, #232]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00a      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c9c:	4b35      	ldr	r3, [pc, #212]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007caa:	4932      	ldr	r1, [pc, #200]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007cac:	4313      	orrs	r3, r2
 8007cae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d011      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007cbe:	4b2d      	ldr	r3, [pc, #180]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ccc:	4929      	ldr	r1, [pc, #164]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cdc:	d101      	bne.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0308 	and.w	r3, r3, #8
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d001      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00a      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cfe:	4b1d      	ldr	r3, [pc, #116]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d04:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d0c:	4919      	ldr	r1, [pc, #100]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00b      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007d20:	4b14      	ldr	r3, [pc, #80]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d26:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d30:	4910      	ldr	r1, [pc, #64]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d32:	4313      	orrs	r3, r2
 8007d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d006      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f000 80d9 	beq.w	8007efe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007d4c:	4b09      	ldr	r3, [pc, #36]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a08      	ldr	r2, [pc, #32]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d58:	f7fb fd16 	bl	8003788 <HAL_GetTick>
 8007d5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d5e:	e00b      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007d60:	f7fb fd12 	bl	8003788 <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	2b64      	cmp	r3, #100	; 0x64
 8007d6c:	d904      	bls.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e197      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007d72:	bf00      	nop
 8007d74:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d78:	4b6c      	ldr	r3, [pc, #432]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1ed      	bne.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 0301 	and.w	r3, r3, #1
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d021      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d11d      	bne.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d98:	4b64      	ldr	r3, [pc, #400]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d9e:	0c1b      	lsrs	r3, r3, #16
 8007da0:	f003 0303 	and.w	r3, r3, #3
 8007da4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007da6:	4b61      	ldr	r3, [pc, #388]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dac:	0e1b      	lsrs	r3, r3, #24
 8007dae:	f003 030f 	and.w	r3, r3, #15
 8007db2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	019a      	lsls	r2, r3, #6
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	041b      	lsls	r3, r3, #16
 8007dbe:	431a      	orrs	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	061b      	lsls	r3, r3, #24
 8007dc4:	431a      	orrs	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	071b      	lsls	r3, r3, #28
 8007dcc:	4957      	ldr	r1, [pc, #348]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d004      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007de8:	d00a      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d02e      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007dfe:	d129      	bne.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007e00:	4b4a      	ldr	r3, [pc, #296]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e06:	0c1b      	lsrs	r3, r3, #16
 8007e08:	f003 0303 	and.w	r3, r3, #3
 8007e0c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e0e:	4b47      	ldr	r3, [pc, #284]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e14:	0f1b      	lsrs	r3, r3, #28
 8007e16:	f003 0307 	and.w	r3, r3, #7
 8007e1a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	019a      	lsls	r2, r3, #6
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	041b      	lsls	r3, r3, #16
 8007e26:	431a      	orrs	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	061b      	lsls	r3, r3, #24
 8007e2e:	431a      	orrs	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	071b      	lsls	r3, r3, #28
 8007e34:	493d      	ldr	r1, [pc, #244]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e36:	4313      	orrs	r3, r2
 8007e38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007e3c:	4b3b      	ldr	r3, [pc, #236]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e42:	f023 021f 	bic.w	r2, r3, #31
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	4937      	ldr	r1, [pc, #220]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d01d      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e60:	4b32      	ldr	r3, [pc, #200]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e66:	0e1b      	lsrs	r3, r3, #24
 8007e68:	f003 030f 	and.w	r3, r3, #15
 8007e6c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e6e:	4b2f      	ldr	r3, [pc, #188]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e74:	0f1b      	lsrs	r3, r3, #28
 8007e76:	f003 0307 	and.w	r3, r3, #7
 8007e7a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	019a      	lsls	r2, r3, #6
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	041b      	lsls	r3, r3, #16
 8007e88:	431a      	orrs	r2, r3
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	061b      	lsls	r3, r3, #24
 8007e8e:	431a      	orrs	r2, r3
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	071b      	lsls	r3, r3, #28
 8007e94:	4925      	ldr	r1, [pc, #148]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e96:	4313      	orrs	r3, r2
 8007e98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d011      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	019a      	lsls	r2, r3, #6
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	041b      	lsls	r3, r3, #16
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	061b      	lsls	r3, r3, #24
 8007ebc:	431a      	orrs	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	071b      	lsls	r3, r3, #28
 8007ec4:	4919      	ldr	r1, [pc, #100]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007ecc:	4b17      	ldr	r3, [pc, #92]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a16      	ldr	r2, [pc, #88]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ed2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ed6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ed8:	f7fb fc56 	bl	8003788 <HAL_GetTick>
 8007edc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ede:	e008      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007ee0:	f7fb fc52 	bl	8003788 <HAL_GetTick>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	2b64      	cmp	r3, #100	; 0x64
 8007eec:	d901      	bls.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e0d7      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ef2:	4b0e      	ldr	r3, [pc, #56]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d0f0      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	f040 80cd 	bne.w	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007f06:	4b09      	ldr	r3, [pc, #36]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a08      	ldr	r2, [pc, #32]	; (8007f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f12:	f7fb fc39 	bl	8003788 <HAL_GetTick>
 8007f16:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007f18:	e00a      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007f1a:	f7fb fc35 	bl	8003788 <HAL_GetTick>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	2b64      	cmp	r3, #100	; 0x64
 8007f26:	d903      	bls.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e0ba      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007f2c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007f30:	4b5e      	ldr	r3, [pc, #376]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f3c:	d0ed      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d009      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d02e      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d12a      	bne.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007f66:	4b51      	ldr	r3, [pc, #324]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f6c:	0c1b      	lsrs	r3, r3, #16
 8007f6e:	f003 0303 	and.w	r3, r3, #3
 8007f72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f74:	4b4d      	ldr	r3, [pc, #308]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f7a:	0f1b      	lsrs	r3, r3, #28
 8007f7c:	f003 0307 	and.w	r3, r3, #7
 8007f80:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	695b      	ldr	r3, [r3, #20]
 8007f86:	019a      	lsls	r2, r3, #6
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	041b      	lsls	r3, r3, #16
 8007f8c:	431a      	orrs	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	061b      	lsls	r3, r3, #24
 8007f94:	431a      	orrs	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	071b      	lsls	r3, r3, #28
 8007f9a:	4944      	ldr	r1, [pc, #272]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007fa2:	4b42      	ldr	r3, [pc, #264]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fa8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	021b      	lsls	r3, r3, #8
 8007fb4:	493d      	ldr	r1, [pc, #244]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d022      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fd0:	d11d      	bne.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007fd2:	4b36      	ldr	r3, [pc, #216]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fd8:	0e1b      	lsrs	r3, r3, #24
 8007fda:	f003 030f 	and.w	r3, r3, #15
 8007fde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007fe0:	4b32      	ldr	r3, [pc, #200]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fe6:	0f1b      	lsrs	r3, r3, #28
 8007fe8:	f003 0307 	and.w	r3, r3, #7
 8007fec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	019a      	lsls	r2, r3, #6
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6a1b      	ldr	r3, [r3, #32]
 8007ff8:	041b      	lsls	r3, r3, #16
 8007ffa:	431a      	orrs	r2, r3
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	061b      	lsls	r3, r3, #24
 8008000:	431a      	orrs	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	071b      	lsls	r3, r3, #28
 8008006:	4929      	ldr	r1, [pc, #164]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008008:	4313      	orrs	r3, r2
 800800a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 0308 	and.w	r3, r3, #8
 8008016:	2b00      	cmp	r3, #0
 8008018:	d028      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800801a:	4b24      	ldr	r3, [pc, #144]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800801c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008020:	0e1b      	lsrs	r3, r3, #24
 8008022:	f003 030f 	and.w	r3, r3, #15
 8008026:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008028:	4b20      	ldr	r3, [pc, #128]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800802a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800802e:	0c1b      	lsrs	r3, r3, #16
 8008030:	f003 0303 	and.w	r3, r3, #3
 8008034:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	695b      	ldr	r3, [r3, #20]
 800803a:	019a      	lsls	r2, r3, #6
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	041b      	lsls	r3, r3, #16
 8008040:	431a      	orrs	r2, r3
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	061b      	lsls	r3, r3, #24
 8008046:	431a      	orrs	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	69db      	ldr	r3, [r3, #28]
 800804c:	071b      	lsls	r3, r3, #28
 800804e:	4917      	ldr	r1, [pc, #92]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008050:	4313      	orrs	r3, r2
 8008052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008056:	4b15      	ldr	r3, [pc, #84]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800805c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008064:	4911      	ldr	r1, [pc, #68]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008066:	4313      	orrs	r3, r2
 8008068:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800806c:	4b0f      	ldr	r3, [pc, #60]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a0e      	ldr	r2, [pc, #56]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008076:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008078:	f7fb fb86 	bl	8003788 <HAL_GetTick>
 800807c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800807e:	e008      	b.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008080:	f7fb fb82 	bl	8003788 <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	2b64      	cmp	r3, #100	; 0x64
 800808c:	d901      	bls.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e007      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008092:	4b06      	ldr	r3, [pc, #24]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800809a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800809e:	d1ef      	bne.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3720      	adds	r7, #32
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	40023800 	.word	0x40023800

080080b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b087      	sub	sp, #28
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80080b8:	2300      	movs	r3, #0
 80080ba:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80080bc:	2300      	movs	r3, #0
 80080be:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80080c0:	2300      	movs	r3, #0
 80080c2:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80080c4:	2300      	movs	r3, #0
 80080c6:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80080ce:	f040 808c 	bne.w	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 80080d2:	4b95      	ldr	r3, [pc, #596]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080d8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80080e0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080e8:	d07c      	beq.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080f0:	d87d      	bhi.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d004      	beq.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080fe:	d039      	beq.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008100:	e075      	b.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008102:	4b89      	ldr	r3, [pc, #548]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800810a:	2b00      	cmp	r3, #0
 800810c:	d108      	bne.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800810e:	4b86      	ldr	r3, [pc, #536]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008116:	4a85      	ldr	r2, [pc, #532]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008118:	fbb2 f3f3 	udiv	r3, r2, r3
 800811c:	613b      	str	r3, [r7, #16]
 800811e:	e007      	b.n	8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008120:	4b81      	ldr	r3, [pc, #516]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008128:	4a81      	ldr	r2, [pc, #516]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800812a:	fbb2 f3f3 	udiv	r3, r2, r3
 800812e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008130:	4b7d      	ldr	r3, [pc, #500]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008136:	0e1b      	lsrs	r3, r3, #24
 8008138:	f003 030f 	and.w	r3, r3, #15
 800813c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800813e:	4b7a      	ldr	r3, [pc, #488]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008144:	099b      	lsrs	r3, r3, #6
 8008146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	fb02 f203 	mul.w	r2, r2, r3
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	fbb2 f3f3 	udiv	r3, r2, r3
 8008156:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008158:	4b73      	ldr	r3, [pc, #460]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800815a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800815e:	0a1b      	lsrs	r3, r3, #8
 8008160:	f003 031f 	and.w	r3, r3, #31
 8008164:	3301      	adds	r3, #1
 8008166:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008168:	697a      	ldr	r2, [r7, #20]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008170:	617b      	str	r3, [r7, #20]
        break;
 8008172:	e03d      	b.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008174:	4b6c      	ldr	r3, [pc, #432]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d108      	bne.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008180:	4b69      	ldr	r3, [pc, #420]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008188:	4a68      	ldr	r2, [pc, #416]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800818a:	fbb2 f3f3 	udiv	r3, r2, r3
 800818e:	613b      	str	r3, [r7, #16]
 8008190:	e007      	b.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008192:	4b65      	ldr	r3, [pc, #404]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800819a:	4a65      	ldr	r2, [pc, #404]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800819c:	fbb2 f3f3 	udiv	r3, r2, r3
 80081a0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80081a2:	4b61      	ldr	r3, [pc, #388]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081a8:	0e1b      	lsrs	r3, r3, #24
 80081aa:	f003 030f 	and.w	r3, r3, #15
 80081ae:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80081b0:	4b5d      	ldr	r3, [pc, #372]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081b6:	099b      	lsrs	r3, r3, #6
 80081b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	fb02 f203 	mul.w	r2, r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80081ca:	4b57      	ldr	r3, [pc, #348]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081d0:	f003 031f 	and.w	r3, r3, #31
 80081d4:	3301      	adds	r3, #1
 80081d6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80081d8:	697a      	ldr	r2, [r7, #20]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e0:	617b      	str	r3, [r7, #20]
        break;
 80081e2:	e005      	b.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 80081e4:	4b53      	ldr	r3, [pc, #332]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80081e6:	617b      	str	r3, [r7, #20]
        break;
 80081e8:	e002      	b.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 80081ea:	bf00      	nop
 80081ec:	e000      	b.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 80081ee:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081f6:	f040 808c 	bne.w	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 80081fa:	4b4b      	ldr	r3, [pc, #300]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008200:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008208:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008210:	d07c      	beq.n	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008218:	d87d      	bhi.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d004      	beq.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008226:	d039      	beq.n	800829c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008228:	e075      	b.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800822a:	4b3f      	ldr	r3, [pc, #252]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d108      	bne.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008236:	4b3c      	ldr	r3, [pc, #240]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800823e:	4a3b      	ldr	r2, [pc, #236]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008240:	fbb2 f3f3 	udiv	r3, r2, r3
 8008244:	613b      	str	r3, [r7, #16]
 8008246:	e007      	b.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008248:	4b37      	ldr	r3, [pc, #220]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008250:	4a37      	ldr	r2, [pc, #220]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008252:	fbb2 f3f3 	udiv	r3, r2, r3
 8008256:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008258:	4b33      	ldr	r3, [pc, #204]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800825a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800825e:	0e1b      	lsrs	r3, r3, #24
 8008260:	f003 030f 	and.w	r3, r3, #15
 8008264:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008266:	4b30      	ldr	r3, [pc, #192]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800826c:	099b      	lsrs	r3, r3, #6
 800826e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008272:	693a      	ldr	r2, [r7, #16]
 8008274:	fb02 f203 	mul.w	r2, r2, r3
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	fbb2 f3f3 	udiv	r3, r2, r3
 800827e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008280:	4b29      	ldr	r3, [pc, #164]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008286:	0a1b      	lsrs	r3, r3, #8
 8008288:	f003 031f 	and.w	r3, r3, #31
 800828c:	3301      	adds	r3, #1
 800828e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	fbb2 f3f3 	udiv	r3, r2, r3
 8008298:	617b      	str	r3, [r7, #20]
        break;
 800829a:	e03d      	b.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800829c:	4b22      	ldr	r3, [pc, #136]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d108      	bne.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80082a8:	4b1f      	ldr	r3, [pc, #124]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082b0:	4a1e      	ldr	r2, [pc, #120]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80082b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80082b6:	613b      	str	r3, [r7, #16]
 80082b8:	e007      	b.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80082ba:	4b1b      	ldr	r3, [pc, #108]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082c2:	4a1b      	ldr	r2, [pc, #108]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80082c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80082c8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80082ca:	4b17      	ldr	r3, [pc, #92]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082d0:	0e1b      	lsrs	r3, r3, #24
 80082d2:	f003 030f 	and.w	r3, r3, #15
 80082d6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80082d8:	4b13      	ldr	r3, [pc, #76]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082de:	099b      	lsrs	r3, r3, #6
 80082e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082e4:	693a      	ldr	r2, [r7, #16]
 80082e6:	fb02 f203 	mul.w	r2, r2, r3
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80082f0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80082f2:	4b0d      	ldr	r3, [pc, #52]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082f8:	f003 031f 	and.w	r3, r3, #31
 80082fc:	3301      	adds	r3, #1
 80082fe:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008300:	697a      	ldr	r2, [r7, #20]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	fbb2 f3f3 	udiv	r3, r2, r3
 8008308:	617b      	str	r3, [r7, #20]
        break;
 800830a:	e005      	b.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800830c:	4b09      	ldr	r3, [pc, #36]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800830e:	617b      	str	r3, [r7, #20]
        break;
 8008310:	e002      	b.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 8008312:	bf00      	nop
 8008314:	e000      	b.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 8008316:	bf00      	nop

  return frequency;
 8008318:	697b      	ldr	r3, [r7, #20]
}
 800831a:	4618      	mov	r0, r3
 800831c:	371c      	adds	r7, #28
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	40023800 	.word	0x40023800
 800832c:	00f42400 	.word	0x00f42400
 8008330:	017d7840 	.word	0x017d7840
 8008334:	00bb8000 	.word	0x00bb8000

08008338 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d101      	bne.n	800834a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e081      	b.n	800844e <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	7f5b      	ldrb	r3, [r3, #29]
 800834e:	b2db      	uxtb	r3, r3
 8008350:	2b00      	cmp	r3, #0
 8008352:	d105      	bne.n	8008360 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7fa fd66 	bl	8002e2c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2202      	movs	r2, #2
 8008364:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	22ca      	movs	r2, #202	; 0xca
 800836c:	625a      	str	r2, [r3, #36]	; 0x24
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2253      	movs	r2, #83	; 0x53
 8008374:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 fb16 	bl	80089a8 <RTC_EnterInitMode>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d008      	beq.n	8008394 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	22ff      	movs	r2, #255	; 0xff
 8008388:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2204      	movs	r2, #4
 800838e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e05c      	b.n	800844e <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6899      	ldr	r1, [r3, #8]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	4b2e      	ldr	r3, [pc, #184]	; (8008458 <HAL_RTC_Init+0x120>)
 80083a0:	400b      	ands	r3, r1
 80083a2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6899      	ldr	r1, [r3, #8]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	685a      	ldr	r2, [r3, #4]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	431a      	orrs	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	695b      	ldr	r3, [r3, #20]
 80083b8:	431a      	orrs	r2, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	430a      	orrs	r2, r1
 80083c0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	68d2      	ldr	r2, [r2, #12]
 80083ca:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6919      	ldr	r1, [r3, #16]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	041a      	lsls	r2, r3, #16
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	430a      	orrs	r2, r1
 80083de:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68da      	ldr	r2, [r3, #12]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083ee:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	f003 0320 	and.w	r3, r3, #32
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10e      	bne.n	800841c <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 faaa 	bl	8008958 <HAL_RTC_WaitForSynchro>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d008      	beq.n	800841c <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	22ff      	movs	r2, #255	; 0xff
 8008410:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2204      	movs	r2, #4
 8008416:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	e018      	b.n	800844e <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f022 0208 	bic.w	r2, r2, #8
 800842a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	699a      	ldr	r2, [r3, #24]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	430a      	orrs	r2, r1
 800843c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	22ff      	movs	r2, #255	; 0xff
 8008444:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2201      	movs	r2, #1
 800844a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800844c:	2300      	movs	r3, #0
  }
}
 800844e:	4618      	mov	r0, r3
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	ff8fffbf 	.word	0xff8fffbf

0800845c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800845c:	b590      	push	{r4, r7, lr}
 800845e:	b087      	sub	sp, #28
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008468:	2300      	movs	r3, #0
 800846a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	7f1b      	ldrb	r3, [r3, #28]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d101      	bne.n	8008478 <HAL_RTC_SetTime+0x1c>
 8008474:	2302      	movs	r3, #2
 8008476:	e0a8      	b.n	80085ca <HAL_RTC_SetTime+0x16e>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2201      	movs	r2, #1
 800847c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2202      	movs	r2, #2
 8008482:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d126      	bne.n	80084d8 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008494:	2b00      	cmp	r3, #0
 8008496:	d102      	bne.n	800849e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	2200      	movs	r2, #0
 800849c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 faac 	bl	8008a00 <RTC_ByteToBcd2>
 80084a8:	4603      	mov	r3, r0
 80084aa:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	785b      	ldrb	r3, [r3, #1]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f000 faa5 	bl	8008a00 <RTC_ByteToBcd2>
 80084b6:	4603      	mov	r3, r0
 80084b8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80084ba:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	789b      	ldrb	r3, [r3, #2]
 80084c0:	4618      	mov	r0, r3
 80084c2:	f000 fa9d 	bl	8008a00 <RTC_ByteToBcd2>
 80084c6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80084c8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	7b1b      	ldrb	r3, [r3, #12]
 80084d0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80084d2:	4313      	orrs	r3, r2
 80084d4:	617b      	str	r3, [r7, #20]
 80084d6:	e018      	b.n	800850a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d102      	bne.n	80084ec <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	2200      	movs	r2, #0
 80084ea:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	785b      	ldrb	r3, [r3, #1]
 80084f6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80084f8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80084fe:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	7b1b      	ldrb	r3, [r3, #12]
 8008504:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008506:	4313      	orrs	r3, r2
 8008508:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	22ca      	movs	r2, #202	; 0xca
 8008510:	625a      	str	r2, [r3, #36]	; 0x24
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2253      	movs	r2, #83	; 0x53
 8008518:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f000 fa44 	bl	80089a8 <RTC_EnterInitMode>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00b      	beq.n	800853e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	22ff      	movs	r2, #255	; 0xff
 800852c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2204      	movs	r2, #4
 8008532:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e045      	b.n	80085ca <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	6979      	ldr	r1, [r7, #20]
 8008544:	4b23      	ldr	r3, [pc, #140]	; (80085d4 <HAL_RTC_SetTime+0x178>)
 8008546:	400b      	ands	r3, r1
 8008548:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	689a      	ldr	r2, [r3, #8]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008558:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	6899      	ldr	r1, [r3, #8]
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	691a      	ldr	r2, [r3, #16]
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	695b      	ldr	r3, [r3, #20]
 8008568:	431a      	orrs	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	430a      	orrs	r2, r1
 8008570:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68da      	ldr	r2, [r3, #12]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008580:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	f003 0320 	and.w	r3, r3, #32
 800858c:	2b00      	cmp	r3, #0
 800858e:	d111      	bne.n	80085b4 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f000 f9e1 	bl	8008958 <HAL_RTC_WaitForSynchro>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00b      	beq.n	80085b4 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	22ff      	movs	r2, #255	; 0xff
 80085a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2204      	movs	r2, #4
 80085a8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	e00a      	b.n	80085ca <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	22ff      	movs	r2, #255	; 0xff
 80085ba:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2201      	movs	r2, #1
 80085c0:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80085c8:	2300      	movs	r3, #0
  }
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	371c      	adds	r7, #28
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd90      	pop	{r4, r7, pc}
 80085d2:	bf00      	nop
 80085d4:	007f7f7f 	.word	0x007f7f7f

080085d8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80085d8:	b590      	push	{r4, r7, lr}
 80085da:	b087      	sub	sp, #28
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80085e4:	2300      	movs	r3, #0
 80085e6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	7f1b      	ldrb	r3, [r3, #28]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d101      	bne.n	80085f4 <HAL_RTC_SetDate+0x1c>
 80085f0:	2302      	movs	r3, #2
 80085f2:	e092      	b.n	800871a <HAL_RTC_SetDate+0x142>
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2201      	movs	r2, #1
 80085f8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2202      	movs	r2, #2
 80085fe:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10e      	bne.n	8008624 <HAL_RTC_SetDate+0x4c>
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	785b      	ldrb	r3, [r3, #1]
 800860a:	f003 0310 	and.w	r3, r3, #16
 800860e:	2b00      	cmp	r3, #0
 8008610:	d008      	beq.n	8008624 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	785b      	ldrb	r3, [r3, #1]
 8008616:	f023 0310 	bic.w	r3, r3, #16
 800861a:	b2db      	uxtb	r3, r3
 800861c:	330a      	adds	r3, #10
 800861e:	b2da      	uxtb	r2, r3
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d11c      	bne.n	8008664 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	78db      	ldrb	r3, [r3, #3]
 800862e:	4618      	mov	r0, r3
 8008630:	f000 f9e6 	bl	8008a00 <RTC_ByteToBcd2>
 8008634:	4603      	mov	r3, r0
 8008636:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	785b      	ldrb	r3, [r3, #1]
 800863c:	4618      	mov	r0, r3
 800863e:	f000 f9df 	bl	8008a00 <RTC_ByteToBcd2>
 8008642:	4603      	mov	r3, r0
 8008644:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008646:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	789b      	ldrb	r3, [r3, #2]
 800864c:	4618      	mov	r0, r3
 800864e:	f000 f9d7 	bl	8008a00 <RTC_ByteToBcd2>
 8008652:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008654:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800865e:	4313      	orrs	r3, r2
 8008660:	617b      	str	r3, [r7, #20]
 8008662:	e00e      	b.n	8008682 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	78db      	ldrb	r3, [r3, #3]
 8008668:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	785b      	ldrb	r3, [r3, #1]
 800866e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008670:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008676:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800867e:	4313      	orrs	r3, r2
 8008680:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	22ca      	movs	r2, #202	; 0xca
 8008688:	625a      	str	r2, [r3, #36]	; 0x24
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2253      	movs	r2, #83	; 0x53
 8008690:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f000 f988 	bl	80089a8 <RTC_EnterInitMode>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00b      	beq.n	80086b6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	22ff      	movs	r2, #255	; 0xff
 80086a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2204      	movs	r2, #4
 80086aa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e031      	b.n	800871a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	6979      	ldr	r1, [r7, #20]
 80086bc:	4b19      	ldr	r3, [pc, #100]	; (8008724 <HAL_RTC_SetDate+0x14c>)
 80086be:	400b      	ands	r3, r1
 80086c0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68da      	ldr	r2, [r3, #12]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086d0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	f003 0320 	and.w	r3, r3, #32
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d111      	bne.n	8008704 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f000 f939 	bl	8008958 <HAL_RTC_WaitForSynchro>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00b      	beq.n	8008704 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	22ff      	movs	r2, #255	; 0xff
 80086f2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2204      	movs	r2, #4
 80086f8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2200      	movs	r2, #0
 80086fe:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	e00a      	b.n	800871a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	22ff      	movs	r2, #255	; 0xff
 800870a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2201      	movs	r2, #1
 8008710:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2200      	movs	r2, #0
 8008716:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008718:	2300      	movs	r3, #0
  }
}
 800871a:	4618      	mov	r0, r3
 800871c:	371c      	adds	r7, #28
 800871e:	46bd      	mov	sp, r7
 8008720:	bd90      	pop	{r4, r7, pc}
 8008722:	bf00      	nop
 8008724:	00ffff3f 	.word	0x00ffff3f

08008728 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008728:	b590      	push	{r4, r7, lr}
 800872a:	b089      	sub	sp, #36	; 0x24
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008734:	2300      	movs	r3, #0
 8008736:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008738:	2300      	movs	r3, #0
 800873a:	61fb      	str	r3, [r7, #28]
 800873c:	2300      	movs	r3, #0
 800873e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	7f1b      	ldrb	r3, [r3, #28]
 8008744:	2b01      	cmp	r3, #1
 8008746:	d101      	bne.n	800874c <HAL_RTC_SetAlarm+0x24>
 8008748:	2302      	movs	r3, #2
 800874a:	e101      	b.n	8008950 <HAL_RTC_SetAlarm+0x228>
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2201      	movs	r2, #1
 8008750:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2202      	movs	r2, #2
 8008756:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d137      	bne.n	80087ce <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008768:	2b00      	cmp	r3, #0
 800876a:	d102      	bne.n	8008772 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	2200      	movs	r2, #0
 8008770:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	4618      	mov	r0, r3
 8008778:	f000 f942 	bl	8008a00 <RTC_ByteToBcd2>
 800877c:	4603      	mov	r3, r0
 800877e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	785b      	ldrb	r3, [r3, #1]
 8008784:	4618      	mov	r0, r3
 8008786:	f000 f93b 	bl	8008a00 <RTC_ByteToBcd2>
 800878a:	4603      	mov	r3, r0
 800878c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800878e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	789b      	ldrb	r3, [r3, #2]
 8008794:	4618      	mov	r0, r3
 8008796:	f000 f933 	bl	8008a00 <RTC_ByteToBcd2>
 800879a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800879c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	7b1b      	ldrb	r3, [r3, #12]
 80087a4:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80087a6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80087b0:	4618      	mov	r0, r3
 80087b2:	f000 f925 	bl	8008a00 <RTC_ByteToBcd2>
 80087b6:	4603      	mov	r3, r0
 80087b8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80087ba:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80087c2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80087c8:	4313      	orrs	r3, r2
 80087ca:	61fb      	str	r3, [r7, #28]
 80087cc:	e023      	b.n	8008816 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d102      	bne.n	80087e2 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	2200      	movs	r2, #0
 80087e0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	785b      	ldrb	r3, [r3, #1]
 80087ec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80087ee:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80087f4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	7b1b      	ldrb	r3, [r3, #12]
 80087fa:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80087fc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008804:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008806:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800880c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008812:	4313      	orrs	r3, r2
 8008814:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	685a      	ldr	r2, [r3, #4]
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	69db      	ldr	r3, [r3, #28]
 800881e:	4313      	orrs	r3, r2
 8008820:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	22ca      	movs	r2, #202	; 0xca
 8008828:	625a      	str	r2, [r3, #36]	; 0x24
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2253      	movs	r2, #83	; 0x53
 8008830:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800883a:	d13f      	bne.n	80088bc <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	689a      	ldr	r2, [r3, #8]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800884a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	689a      	ldr	r2, [r3, #8]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800885a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800885c:	f7fa ff94 	bl	8003788 <HAL_GetTick>
 8008860:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008862:	e013      	b.n	800888c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008864:	f7fa ff90 	bl	8003788 <HAL_GetTick>
 8008868:	4602      	mov	r2, r0
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008872:	d90b      	bls.n	800888c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	22ff      	movs	r2, #255	; 0xff
 800887a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2203      	movs	r2, #3
 8008880:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008888:	2303      	movs	r3, #3
 800888a:	e061      	b.n	8008950 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	f003 0301 	and.w	r3, r3, #1
 8008896:	2b00      	cmp	r3, #0
 8008898:	d0e4      	beq.n	8008864 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	69fa      	ldr	r2, [r7, #28]
 80088a0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	697a      	ldr	r2, [r7, #20]
 80088a8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	689a      	ldr	r2, [r3, #8]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088b8:	609a      	str	r2, [r3, #8]
 80088ba:	e03e      	b.n	800893a <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	689a      	ldr	r2, [r3, #8]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80088ca:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	689a      	ldr	r2, [r3, #8]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80088da:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80088dc:	f7fa ff54 	bl	8003788 <HAL_GetTick>
 80088e0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80088e2:	e013      	b.n	800890c <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80088e4:	f7fa ff50 	bl	8003788 <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088f2:	d90b      	bls.n	800890c <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	22ff      	movs	r2, #255	; 0xff
 80088fa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2203      	movs	r2, #3
 8008900:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2200      	movs	r2, #0
 8008906:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008908:	2303      	movs	r3, #3
 800890a:	e021      	b.n	8008950 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	f003 0302 	and.w	r3, r3, #2
 8008916:	2b00      	cmp	r3, #0
 8008918:	d0e4      	beq.n	80088e4 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	69fa      	ldr	r2, [r7, #28]
 8008920:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	697a      	ldr	r2, [r7, #20]
 8008928:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	689a      	ldr	r2, [r3, #8]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008938:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	22ff      	movs	r2, #255	; 0xff
 8008940:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2201      	movs	r2, #1
 8008946:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3724      	adds	r7, #36	; 0x24
 8008954:	46bd      	mov	sp, r7
 8008956:	bd90      	pop	{r4, r7, pc}

08008958 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008960:	2300      	movs	r3, #0
 8008962:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	68da      	ldr	r2, [r3, #12]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008972:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008974:	f7fa ff08 	bl	8003788 <HAL_GetTick>
 8008978:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800897a:	e009      	b.n	8008990 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800897c:	f7fa ff04 	bl	8003788 <HAL_GetTick>
 8008980:	4602      	mov	r2, r0
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800898a:	d901      	bls.n	8008990 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800898c:	2303      	movs	r3, #3
 800898e:	e007      	b.n	80089a0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	f003 0320 	and.w	r3, r3, #32
 800899a:	2b00      	cmp	r3, #0
 800899c:	d0ee      	beq.n	800897c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80089b0:	2300      	movs	r3, #0
 80089b2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d119      	bne.n	80089f6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089ca:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80089cc:	f7fa fedc 	bl	8003788 <HAL_GetTick>
 80089d0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80089d2:	e009      	b.n	80089e8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80089d4:	f7fa fed8 	bl	8003788 <HAL_GetTick>
 80089d8:	4602      	mov	r2, r0
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089e2:	d901      	bls.n	80089e8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e007      	b.n	80089f8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d0ee      	beq.n	80089d4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	4603      	mov	r3, r0
 8008a08:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008a0e:	e005      	b.n	8008a1c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	3301      	adds	r3, #1
 8008a14:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008a16:	79fb      	ldrb	r3, [r7, #7]
 8008a18:	3b0a      	subs	r3, #10
 8008a1a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008a1c:	79fb      	ldrb	r3, [r7, #7]
 8008a1e:	2b09      	cmp	r3, #9
 8008a20:	d8f6      	bhi.n	8008a10 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	011b      	lsls	r3, r3, #4
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	79fb      	ldrb	r3, [r7, #7]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	b2db      	uxtb	r3, r3
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3714      	adds	r7, #20
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b087      	sub	sp, #28
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	7f1b      	ldrb	r3, [r3, #28]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d101      	bne.n	8008a58 <HAL_RTCEx_SetTimeStamp+0x1c>
 8008a54:	2302      	movs	r3, #2
 8008a56:	e03e      	b.n	8008ad6 <HAL_RTCEx_SetTimeStamp+0x9a>
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2202      	movs	r2, #2
 8008a62:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	689a      	ldr	r2, [r3, #8]
 8008a6a:	4b1e      	ldr	r3, [pc, #120]	; (8008ae4 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008a70:	697a      	ldr	r2, [r7, #20]
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	22ca      	movs	r2, #202	; 0xca
 8008a7e:	625a      	str	r2, [r3, #36]	; 0x24
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2253      	movs	r2, #83	; 0x53
 8008a86:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f022 0206 	bic.w	r2, r2, #6
 8008a96:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	430a      	orrs	r2, r1
 8008aa6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	697a      	ldr	r2, [r7, #20]
 8008aae:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	689a      	ldr	r2, [r3, #8]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008abe:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	22ff      	movs	r2, #255	; 0xff
 8008ac6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2201      	movs	r2, #1
 8008acc:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	371c      	adds	r7, #28
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	fffff7f7 	.word	0xfffff7f7

08008ae8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b088      	sub	sp, #32
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008af0:	2300      	movs	r3, #0
 8008af2:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8008af4:	2300      	movs	r3, #0
 8008af6:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8008af8:	2300      	movs	r3, #0
 8008afa:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d101      	bne.n	8008b06 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e156      	b.n	8008db4 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d106      	bne.n	8008b20 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7fa fcc0 	bl	80034a0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2202      	movs	r2, #2
 8008b24:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 f95b 	bl	8008de4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d00c      	beq.n	8008b50 <HAL_SAI_Init+0x68>
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d80d      	bhi.n	8008b56 <HAL_SAI_Init+0x6e>
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d002      	beq.n	8008b44 <HAL_SAI_Init+0x5c>
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d003      	beq.n	8008b4a <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8008b42:	e008      	b.n	8008b56 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8008b44:	2300      	movs	r3, #0
 8008b46:	61fb      	str	r3, [r7, #28]
      break;
 8008b48:	e006      	b.n	8008b58 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008b4a:	2310      	movs	r3, #16
 8008b4c:	61fb      	str	r3, [r7, #28]
      break;
 8008b4e:	e003      	b.n	8008b58 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008b50:	2320      	movs	r3, #32
 8008b52:	61fb      	str	r3, [r7, #28]
      break;
 8008b54:	e000      	b.n	8008b58 <HAL_SAI_Init+0x70>
      break;
 8008b56:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	2b03      	cmp	r3, #3
 8008b5e:	d81e      	bhi.n	8008b9e <HAL_SAI_Init+0xb6>
 8008b60:	a201      	add	r2, pc, #4	; (adr r2, 8008b68 <HAL_SAI_Init+0x80>)
 8008b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b66:	bf00      	nop
 8008b68:	08008b79 	.word	0x08008b79
 8008b6c:	08008b7f 	.word	0x08008b7f
 8008b70:	08008b87 	.word	0x08008b87
 8008b74:	08008b8f 	.word	0x08008b8f
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	617b      	str	r3, [r7, #20]
    }
    break;
 8008b7c:	e010      	b.n	8008ba0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b82:	617b      	str	r3, [r7, #20]
    }
    break;
 8008b84:	e00c      	b.n	8008ba0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008b86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b8a:	617b      	str	r3, [r7, #20]
    }
    break;
 8008b8c:	e008      	b.n	8008ba0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008b8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b92:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	f043 0301 	orr.w	r3, r3, #1
 8008b9a:	61fb      	str	r3, [r7, #28]
    }
    break;
 8008b9c:	e000      	b.n	8008ba0 <HAL_SAI_Init+0xb8>
    default:
      break;
 8008b9e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a85      	ldr	r2, [pc, #532]	; (8008dbc <HAL_SAI_Init+0x2d4>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d004      	beq.n	8008bb4 <HAL_SAI_Init+0xcc>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a84      	ldr	r2, [pc, #528]	; (8008dc0 <HAL_SAI_Init+0x2d8>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d103      	bne.n	8008bbc <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8008bb4:	4a83      	ldr	r2, [pc, #524]	; (8008dc4 <HAL_SAI_Init+0x2dc>)
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	6013      	str	r3, [r2, #0]
 8008bba:	e002      	b.n	8008bc2 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008bbc:	4a82      	ldr	r2, [pc, #520]	; (8008dc8 <HAL_SAI_Init+0x2e0>)
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	69db      	ldr	r3, [r3, #28]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d04c      	beq.n	8008c64 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a7a      	ldr	r2, [pc, #488]	; (8008dbc <HAL_SAI_Init+0x2d4>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d004      	beq.n	8008be2 <HAL_SAI_Init+0xfa>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a78      	ldr	r2, [pc, #480]	; (8008dc0 <HAL_SAI_Init+0x2d8>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d104      	bne.n	8008bec <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008be2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008be6:	f7ff fa63 	bl	80080b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008bea:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a76      	ldr	r2, [pc, #472]	; (8008dcc <HAL_SAI_Init+0x2e4>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d004      	beq.n	8008c00 <HAL_SAI_Init+0x118>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a75      	ldr	r2, [pc, #468]	; (8008dd0 <HAL_SAI_Init+0x2e8>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d104      	bne.n	8008c0a <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008c00:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008c04:	f7ff fa54 	bl	80080b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008c08:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4413      	add	r3, r2
 8008c12:	005b      	lsls	r3, r3, #1
 8008c14:	461a      	mov	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	69db      	ldr	r3, [r3, #28]
 8008c1a:	025b      	lsls	r3, r3, #9
 8008c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c20:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	4a6b      	ldr	r2, [pc, #428]	; (8008dd4 <HAL_SAI_Init+0x2ec>)
 8008c26:	fba2 2303 	umull	r2, r3, r2, r3
 8008c2a:	08da      	lsrs	r2, r3, #3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8008c30:	68f9      	ldr	r1, [r7, #12]
 8008c32:	4b68      	ldr	r3, [pc, #416]	; (8008dd4 <HAL_SAI_Init+0x2ec>)
 8008c34:	fba3 2301 	umull	r2, r3, r3, r1
 8008c38:	08da      	lsrs	r2, r3, #3
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4413      	add	r3, r2
 8008c40:	005b      	lsls	r3, r3, #1
 8008c42:	1aca      	subs	r2, r1, r3
 8008c44:	2a08      	cmp	r2, #8
 8008c46:	d904      	bls.n	8008c52 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a1b      	ldr	r3, [r3, #32]
 8008c4c:	1c5a      	adds	r2, r3, #1
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c56:	2b04      	cmp	r3, #4
 8008c58:	d104      	bne.n	8008c64 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a1b      	ldr	r3, [r3, #32]
 8008c5e:	085a      	lsrs	r2, r3, #1
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d003      	beq.n	8008c74 <HAL_SAI_Init+0x18c>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d109      	bne.n	8008c88 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d101      	bne.n	8008c80 <HAL_SAI_Init+0x198>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	e001      	b.n	8008c84 <HAL_SAI_Init+0x19c>
 8008c80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c84:	61bb      	str	r3, [r7, #24]
 8008c86:	e008      	b.n	8008c9a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d102      	bne.n	8008c96 <HAL_SAI_Init+0x1ae>
 8008c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c94:	e000      	b.n	8008c98 <HAL_SAI_Init+0x1b0>
 8008c96:	2300      	movs	r3, #0
 8008c98:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	6819      	ldr	r1, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	4b4c      	ldr	r3, [pc, #304]	; (8008dd8 <HAL_SAI_Init+0x2f0>)
 8008ca6:	400b      	ands	r3, r1
 8008ca8:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	6819      	ldr	r1, [r3, #0]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	685a      	ldr	r2, [r3, #4]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008cbe:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc4:	431a      	orrs	r2, r3
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8008cd2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008cde:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a1b      	ldr	r3, [r3, #32]
 8008ce4:	051b      	lsls	r3, r3, #20
 8008ce6:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	430a      	orrs	r2, r1
 8008cee:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	6859      	ldr	r1, [r3, #4]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	4b38      	ldr	r3, [pc, #224]	; (8008ddc <HAL_SAI_Init+0x2f4>)
 8008cfc:	400b      	ands	r3, r1
 8008cfe:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	6859      	ldr	r1, [r3, #4]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	699a      	ldr	r2, [r3, #24]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0e:	431a      	orrs	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d14:	431a      	orrs	r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	430a      	orrs	r2, r1
 8008d1c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	6899      	ldr	r1, [r3, #8]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	4b2d      	ldr	r3, [pc, #180]	; (8008de0 <HAL_SAI_Init+0x2f8>)
 8008d2a:	400b      	ands	r3, r1
 8008d2c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	6899      	ldr	r1, [r3, #8]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d38:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008d3e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8008d44:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8008d4a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d50:	3b01      	subs	r3, #1
 8008d52:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008d54:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	430a      	orrs	r2, r1
 8008d5c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68d9      	ldr	r1, [r3, #12]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008d6c:	400b      	ands	r3, r1
 8008d6e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	68d9      	ldr	r1, [r3, #12]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d7e:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d84:	041b      	lsls	r3, r3, #16
 8008d86:	431a      	orrs	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	021b      	lsls	r3, r3, #8
 8008d90:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	430a      	orrs	r2, r1
 8008d98:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3720      	adds	r7, #32
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	40015804 	.word	0x40015804
 8008dc0:	40015824 	.word	0x40015824
 8008dc4:	40015800 	.word	0x40015800
 8008dc8:	40015c00 	.word	0x40015c00
 8008dcc:	40015c04 	.word	0x40015c04
 8008dd0:	40015c24 	.word	0x40015c24
 8008dd4:	cccccccd 	.word	0xcccccccd
 8008dd8:	ff05c010 	.word	0xff05c010
 8008ddc:	ffff1ff0 	.word	0xffff1ff0
 8008de0:	fff88000 	.word	0xfff88000

08008de4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8008dec:	4b17      	ldr	r3, [pc, #92]	; (8008e4c <SAI_Disable+0x68>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a17      	ldr	r2, [pc, #92]	; (8008e50 <SAI_Disable+0x6c>)
 8008df2:	fba2 2303 	umull	r2, r3, r2, r3
 8008df6:	0b1b      	lsrs	r3, r3, #12
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008e0e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	1e5a      	subs	r2, r3, #1
 8008e14:	60fa      	str	r2, [r7, #12]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10a      	bne.n	8008e30 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	72fb      	strb	r3, [r7, #11]
      break;
 8008e2e:	e006      	b.n	8008e3e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1e8      	bne.n	8008e10 <SAI_Disable+0x2c>

  return status;
 8008e3e:	7afb      	ldrb	r3, [r7, #11]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3714      	adds	r7, #20
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr
 8008e4c:	20000000 	.word	0x20000000
 8008e50:	95cbec1b 	.word	0x95cbec1b

08008e54 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d101      	bne.n	8008e66 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e022      	b.n	8008eac <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d105      	bne.n	8008e7e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f7f9 fff1 	bl	8002e60 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2203      	movs	r2, #3
 8008e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f814 	bl	8008eb4 <HAL_SD_InitCard>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d001      	beq.n	8008e96 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e00a      	b.n	8008eac <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008eb4:	b5b0      	push	{r4, r5, r7, lr}
 8008eb6:	b08e      	sub	sp, #56	; 0x38
 8008eb8:	af04      	add	r7, sp, #16
 8008eba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008ed0:	2376      	movs	r3, #118	; 0x76
 8008ed2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681d      	ldr	r5, [r3, #0]
 8008ed8:	466c      	mov	r4, sp
 8008eda:	f107 0314 	add.w	r3, r7, #20
 8008ede:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008ee2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008ee6:	f107 0308 	add.w	r3, r7, #8
 8008eea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008eec:	4628      	mov	r0, r5
 8008eee:	f002 fefd 	bl	800bcec <SDMMC_Init>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d001      	beq.n	8008f04 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e056      	b.n	8008fb2 <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	685a      	ldr	r2, [r3, #4]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f12:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f002 ff31 	bl	800bd80 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	685a      	ldr	r2, [r3, #4]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f2c:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 ff00 	bl	8009d34 <SD_PowerON>
 8008f34:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f36:	6a3b      	ldr	r3, [r7, #32]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00b      	beq.n	8008f54 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f48:	6a3b      	ldr	r3, [r7, #32]
 8008f4a:	431a      	orrs	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	e02e      	b.n	8008fb2 <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 fe21 	bl	8009b9c <SD_InitCard>
 8008f5a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f5c:	6a3b      	ldr	r3, [r7, #32]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00b      	beq.n	8008f7a <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f6e:	6a3b      	ldr	r3, [r7, #32]
 8008f70:	431a      	orrs	r2, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	e01b      	b.n	8008fb2 <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f82:	4618      	mov	r0, r3
 8008f84:	f002 ff90 	bl	800bea8 <SDMMC_CmdBlockLength>
 8008f88:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f8a:	6a3b      	ldr	r3, [r7, #32]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00f      	beq.n	8008fb0 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a09      	ldr	r2, [pc, #36]	; (8008fbc <HAL_SD_InitCard+0x108>)
 8008f96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f9c:	6a3b      	ldr	r3, [r7, #32]
 8008f9e:	431a      	orrs	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	e000      	b.n	8008fb2 <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3728      	adds	r7, #40	; 0x28
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	004005ff 	.word	0x004005ff

08008fc0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b092      	sub	sp, #72	; 0x48
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
 8008fcc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008fce:	f7fa fbdb 	bl	8003788 <HAL_GetTick>
 8008fd2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d107      	bne.n	8008ff2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e1bd      	b.n	800936e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	f040 81b0 	bne.w	8009360 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2200      	movs	r2, #0
 8009004:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	441a      	add	r2, r3
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009010:	429a      	cmp	r2, r3
 8009012:	d907      	bls.n	8009024 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009018:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	e1a4      	b.n	800936e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2203      	movs	r2, #3
 8009028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2200      	movs	r2, #0
 8009032:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009038:	2b01      	cmp	r3, #1
 800903a:	d002      	beq.n	8009042 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800903c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903e:	025b      	lsls	r3, r3, #9
 8009040:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009046:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	025b      	lsls	r3, r3, #9
 800904c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800904e:	2390      	movs	r3, #144	; 0x90
 8009050:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009052:	2302      	movs	r3, #2
 8009054:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009056:	2300      	movs	r3, #0
 8009058:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800905a:	2301      	movs	r3, #1
 800905c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f107 0214 	add.w	r2, r7, #20
 8009066:	4611      	mov	r1, r2
 8009068:	4618      	mov	r0, r3
 800906a:	f002 fef1 	bl	800be50 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	2b01      	cmp	r3, #1
 8009072:	d90a      	bls.n	800908a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2202      	movs	r2, #2
 8009078:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009080:	4618      	mov	r0, r3
 8009082:	f002 ff55 	bl	800bf30 <SDMMC_CmdReadMultiBlock>
 8009086:	6478      	str	r0, [r7, #68]	; 0x44
 8009088:	e009      	b.n	800909e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2201      	movs	r2, #1
 800908e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009096:	4618      	mov	r0, r3
 8009098:	f002 ff28 	bl	800beec <SDMMC_CmdReadSingleBlock>
 800909c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800909e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d012      	beq.n	80090ca <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a7a      	ldr	r2, [pc, #488]	; (8009294 <HAL_SD_ReadBlocks+0x2d4>)
 80090aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090b2:	431a      	orrs	r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2200      	movs	r2, #0
 80090c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e151      	b.n	800936e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80090ce:	e061      	b.n	8009194 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d03c      	beq.n	8009158 <HAL_SD_ReadBlocks+0x198>
 80090de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d039      	beq.n	8009158 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80090e4:	2300      	movs	r3, #0
 80090e6:	643b      	str	r3, [r7, #64]	; 0x40
 80090e8:	e033      	b.n	8009152 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f002 fe28 	bl	800bd44 <SDMMC_ReadFIFO>
 80090f4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80090f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f8:	b2da      	uxtb	r2, r3
 80090fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090fc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80090fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009100:	3301      	adds	r3, #1
 8009102:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009106:	3b01      	subs	r3, #1
 8009108:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800910a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910c:	0a1b      	lsrs	r3, r3, #8
 800910e:	b2da      	uxtb	r2, r3
 8009110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009112:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009116:	3301      	adds	r3, #1
 8009118:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800911a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800911c:	3b01      	subs	r3, #1
 800911e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009122:	0c1b      	lsrs	r3, r3, #16
 8009124:	b2da      	uxtb	r2, r3
 8009126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009128:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800912a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800912c:	3301      	adds	r3, #1
 800912e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009132:	3b01      	subs	r3, #1
 8009134:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009138:	0e1b      	lsrs	r3, r3, #24
 800913a:	b2da      	uxtb	r2, r3
 800913c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800913e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009142:	3301      	adds	r3, #1
 8009144:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009148:	3b01      	subs	r3, #1
 800914a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800914c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800914e:	3301      	adds	r3, #1
 8009150:	643b      	str	r3, [r7, #64]	; 0x40
 8009152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009154:	2b07      	cmp	r3, #7
 8009156:	d9c8      	bls.n	80090ea <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009158:	f7fa fb16 	bl	8003788 <HAL_GetTick>
 800915c:	4602      	mov	r2, r0
 800915e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009164:	429a      	cmp	r2, r3
 8009166:	d902      	bls.n	800916e <HAL_SD_ReadBlocks+0x1ae>
 8009168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800916a:	2b00      	cmp	r3, #0
 800916c:	d112      	bne.n	8009194 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a48      	ldr	r2, [pc, #288]	; (8009294 <HAL_SD_ReadBlocks+0x2d4>)
 8009174:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2201      	movs	r2, #1
 8009186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2200      	movs	r2, #0
 800918e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009190:	2303      	movs	r3, #3
 8009192:	e0ec      	b.n	800936e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800919a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d096      	beq.n	80090d0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d022      	beq.n	80091f6 <HAL_SD_ReadBlocks+0x236>
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d91f      	bls.n	80091f6 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	d01b      	beq.n	80091f6 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4618      	mov	r0, r3
 80091c4:	f002 ff1a 	bl	800bffc <SDMMC_CmdStopTransfer>
 80091c8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80091ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d012      	beq.n	80091f6 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a2f      	ldr	r2, [pc, #188]	; (8009294 <HAL_SD_ReadBlocks+0x2d4>)
 80091d6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091de:	431a      	orrs	r2, r3
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2200      	movs	r2, #0
 80091f0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e0bb      	b.n	800936e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091fc:	f003 0308 	and.w	r3, r3, #8
 8009200:	2b00      	cmp	r3, #0
 8009202:	d012      	beq.n	800922a <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a22      	ldr	r2, [pc, #136]	; (8009294 <HAL_SD_ReadBlocks+0x2d4>)
 800920a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009210:	f043 0208 	orr.w	r2, r3, #8
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2200      	movs	r2, #0
 8009224:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	e0a1      	b.n	800936e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009230:	f003 0302 	and.w	r3, r3, #2
 8009234:	2b00      	cmp	r3, #0
 8009236:	d012      	beq.n	800925e <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a15      	ldr	r2, [pc, #84]	; (8009294 <HAL_SD_ReadBlocks+0x2d4>)
 800923e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009244:	f043 0202 	orr.w	r2, r3, #2
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2200      	movs	r2, #0
 8009258:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	e087      	b.n	800936e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009264:	f003 0320 	and.w	r3, r3, #32
 8009268:	2b00      	cmp	r3, #0
 800926a:	d064      	beq.n	8009336 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a08      	ldr	r2, [pc, #32]	; (8009294 <HAL_SD_ReadBlocks+0x2d4>)
 8009272:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009278:	f043 0220 	orr.w	r2, r3, #32
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e06d      	b.n	800936e <HAL_SD_ReadBlocks+0x3ae>
 8009292:	bf00      	nop
 8009294:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4618      	mov	r0, r3
 800929e:	f002 fd51 	bl	800bd44 <SDMMC_ReadFIFO>
 80092a2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80092a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a6:	b2da      	uxtb	r2, r3
 80092a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092aa:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80092ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ae:	3301      	adds	r3, #1
 80092b0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80092b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092b4:	3b01      	subs	r3, #1
 80092b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80092b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ba:	0a1b      	lsrs	r3, r3, #8
 80092bc:	b2da      	uxtb	r2, r3
 80092be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092c0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80092c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092c4:	3301      	adds	r3, #1
 80092c6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80092c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092ca:	3b01      	subs	r3, #1
 80092cc:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80092ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d0:	0c1b      	lsrs	r3, r3, #16
 80092d2:	b2da      	uxtb	r2, r3
 80092d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092d6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80092d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092da:	3301      	adds	r3, #1
 80092dc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80092de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092e0:	3b01      	subs	r3, #1
 80092e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80092e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e6:	0e1b      	lsrs	r3, r3, #24
 80092e8:	b2da      	uxtb	r2, r3
 80092ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ec:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80092ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092f0:	3301      	adds	r3, #1
 80092f2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80092f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092f6:	3b01      	subs	r3, #1
 80092f8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80092fa:	f7fa fa45 	bl	8003788 <HAL_GetTick>
 80092fe:	4602      	mov	r2, r0
 8009300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009302:	1ad3      	subs	r3, r2, r3
 8009304:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009306:	429a      	cmp	r2, r3
 8009308:	d902      	bls.n	8009310 <HAL_SD_ReadBlocks+0x350>
 800930a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800930c:	2b00      	cmp	r3, #0
 800930e:	d112      	bne.n	8009336 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a18      	ldr	r2, [pc, #96]	; (8009378 <HAL_SD_ReadBlocks+0x3b8>)
 8009316:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2200      	movs	r2, #0
 8009330:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009332:	2301      	movs	r3, #1
 8009334:	e01b      	b.n	800936e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800933c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009340:	2b00      	cmp	r3, #0
 8009342:	d002      	beq.n	800934a <HAL_SD_ReadBlocks+0x38a>
 8009344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1a6      	bne.n	8009298 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f240 523a 	movw	r2, #1338	; 0x53a
 8009352:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2201      	movs	r2, #1
 8009358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800935c:	2300      	movs	r3, #0
 800935e:	e006      	b.n	800936e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009364:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800936c:	2301      	movs	r3, #1
  }
}
 800936e:	4618      	mov	r0, r3
 8009370:	3748      	adds	r7, #72	; 0x48
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	004005ff 	.word	0x004005ff

0800937c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b092      	sub	sp, #72	; 0x48
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	607a      	str	r2, [r7, #4]
 8009388:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800938a:	f7fa f9fd 	bl	8003788 <HAL_GetTick>
 800938e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d107      	bne.n	80093ae <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e165      	b.n	800967a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	f040 8158 	bne.w	800966c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2200      	movs	r2, #0
 80093c0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80093c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	441a      	add	r2, r3
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d907      	bls.n	80093e0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	e14c      	b.n	800967a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2203      	movs	r2, #3
 80093e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2200      	movs	r2, #0
 80093ee:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d002      	beq.n	80093fe <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80093f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fa:	025b      	lsls	r3, r3, #9
 80093fc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80093fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009402:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	025b      	lsls	r3, r3, #9
 8009408:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800940a:	2390      	movs	r3, #144	; 0x90
 800940c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800940e:	2300      	movs	r3, #0
 8009410:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009412:	2300      	movs	r3, #0
 8009414:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8009416:	2301      	movs	r3, #1
 8009418:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f107 0218 	add.w	r2, r7, #24
 8009422:	4611      	mov	r1, r2
 8009424:	4618      	mov	r0, r3
 8009426:	f002 fd13 	bl	800be50 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	2b01      	cmp	r3, #1
 800942e:	d90a      	bls.n	8009446 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2220      	movs	r2, #32
 8009434:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800943c:	4618      	mov	r0, r3
 800943e:	f002 fdbb 	bl	800bfb8 <SDMMC_CmdWriteMultiBlock>
 8009442:	6478      	str	r0, [r7, #68]	; 0x44
 8009444:	e009      	b.n	800945a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2210      	movs	r2, #16
 800944a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009452:	4618      	mov	r0, r3
 8009454:	f002 fd8e 	bl	800bf74 <SDMMC_CmdWriteSingleBlock>
 8009458:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800945a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800945c:	2b00      	cmp	r3, #0
 800945e:	d012      	beq.n	8009486 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a87      	ldr	r2, [pc, #540]	; (8009684 <HAL_SD_WriteBlocks+0x308>)
 8009466:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800946c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800946e:	431a      	orrs	r2, r3
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2201      	movs	r2, #1
 8009478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	e0f9      	b.n	800967a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800948a:	e065      	b.n	8009558 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009496:	2b00      	cmp	r3, #0
 8009498:	d040      	beq.n	800951c <HAL_SD_WriteBlocks+0x1a0>
 800949a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800949c:	2b00      	cmp	r3, #0
 800949e:	d03d      	beq.n	800951c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80094a0:	2300      	movs	r3, #0
 80094a2:	643b      	str	r3, [r7, #64]	; 0x40
 80094a4:	e037      	b.n	8009516 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80094a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80094ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ae:	3301      	adds	r3, #1
 80094b0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80094b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094b4:	3b01      	subs	r3, #1
 80094b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80094b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	021a      	lsls	r2, r3, #8
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	4313      	orrs	r3, r2
 80094c2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80094c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c6:	3301      	adds	r3, #1
 80094c8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80094ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094cc:	3b01      	subs	r3, #1
 80094ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80094d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	041a      	lsls	r2, r3, #16
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	4313      	orrs	r3, r2
 80094da:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80094dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094de:	3301      	adds	r3, #1
 80094e0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80094e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e4:	3b01      	subs	r3, #1
 80094e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80094e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	061a      	lsls	r2, r3, #24
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	4313      	orrs	r3, r2
 80094f2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80094f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f6:	3301      	adds	r3, #1
 80094f8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80094fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094fc:	3b01      	subs	r3, #1
 80094fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f107 0214 	add.w	r2, r7, #20
 8009508:	4611      	mov	r1, r2
 800950a:	4618      	mov	r0, r3
 800950c:	f002 fc27 	bl	800bd5e <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009512:	3301      	adds	r3, #1
 8009514:	643b      	str	r3, [r7, #64]	; 0x40
 8009516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009518:	2b07      	cmp	r3, #7
 800951a:	d9c4      	bls.n	80094a6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800951c:	f7fa f934 	bl	8003788 <HAL_GetTick>
 8009520:	4602      	mov	r2, r0
 8009522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009524:	1ad3      	subs	r3, r2, r3
 8009526:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009528:	429a      	cmp	r2, r3
 800952a:	d902      	bls.n	8009532 <HAL_SD_WriteBlocks+0x1b6>
 800952c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800952e:	2b00      	cmp	r3, #0
 8009530:	d112      	bne.n	8009558 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a53      	ldr	r2, [pc, #332]	; (8009684 <HAL_SD_WriteBlocks+0x308>)
 8009538:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800953e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009540:	431a      	orrs	r2, r3
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2201      	movs	r2, #1
 800954a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009554:	2303      	movs	r3, #3
 8009556:	e090      	b.n	800967a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800955e:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8009562:	2b00      	cmp	r3, #0
 8009564:	d092      	beq.n	800948c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800956c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009570:	2b00      	cmp	r3, #0
 8009572:	d022      	beq.n	80095ba <HAL_SD_WriteBlocks+0x23e>
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	2b01      	cmp	r3, #1
 8009578:	d91f      	bls.n	80095ba <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800957e:	2b03      	cmp	r3, #3
 8009580:	d01b      	beq.n	80095ba <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4618      	mov	r0, r3
 8009588:	f002 fd38 	bl	800bffc <SDMMC_CmdStopTransfer>
 800958c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800958e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009590:	2b00      	cmp	r3, #0
 8009592:	d012      	beq.n	80095ba <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a3a      	ldr	r2, [pc, #232]	; (8009684 <HAL_SD_WriteBlocks+0x308>)
 800959a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095a2:	431a      	orrs	r2, r3
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2200      	movs	r2, #0
 80095b4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	e05f      	b.n	800967a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c0:	f003 0308 	and.w	r3, r3, #8
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d012      	beq.n	80095ee <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a2d      	ldr	r2, [pc, #180]	; (8009684 <HAL_SD_WriteBlocks+0x308>)
 80095ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d4:	f043 0208 	orr.w	r2, r3, #8
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2200      	movs	r2, #0
 80095e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	e045      	b.n	800967a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095f4:	f003 0302 	and.w	r3, r3, #2
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d012      	beq.n	8009622 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a20      	ldr	r2, [pc, #128]	; (8009684 <HAL_SD_WriteBlocks+0x308>)
 8009602:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009608:	f043 0202 	orr.w	r2, r3, #2
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2200      	movs	r2, #0
 800961c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e02b      	b.n	800967a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009628:	f003 0310 	and.w	r3, r3, #16
 800962c:	2b00      	cmp	r3, #0
 800962e:	d012      	beq.n	8009656 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a13      	ldr	r2, [pc, #76]	; (8009684 <HAL_SD_WriteBlocks+0x308>)
 8009636:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800963c:	f043 0210 	orr.w	r2, r3, #16
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2201      	movs	r2, #1
 8009648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2200      	movs	r2, #0
 8009650:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009652:	2301      	movs	r3, #1
 8009654:	e011      	b.n	800967a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f240 523a 	movw	r2, #1338	; 0x53a
 800965e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009668:	2300      	movs	r3, #0
 800966a:	e006      	b.n	800967a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009670:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009678:	2301      	movs	r3, #1
  }
}
 800967a:	4618      	mov	r0, r3
 800967c:	3748      	adds	r7, #72	; 0x48
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	004005ff 	.word	0x004005ff

08009688 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009696:	0f9b      	lsrs	r3, r3, #30
 8009698:	b2da      	uxtb	r2, r3
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096a2:	0e9b      	lsrs	r3, r3, #26
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	f003 030f 	and.w	r3, r3, #15
 80096aa:	b2da      	uxtb	r2, r3
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096b4:	0e1b      	lsrs	r3, r3, #24
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	f003 0303 	and.w	r3, r3, #3
 80096bc:	b2da      	uxtb	r2, r3
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096c6:	0c1b      	lsrs	r3, r3, #16
 80096c8:	b2da      	uxtb	r2, r3
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096d2:	0a1b      	lsrs	r3, r3, #8
 80096d4:	b2da      	uxtb	r2, r3
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096de:	b2da      	uxtb	r2, r3
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096e8:	0d1b      	lsrs	r3, r3, #20
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096f4:	0c1b      	lsrs	r3, r3, #16
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	f003 030f 	and.w	r3, r3, #15
 80096fc:	b2da      	uxtb	r2, r3
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009706:	0bdb      	lsrs	r3, r3, #15
 8009708:	b2db      	uxtb	r3, r3
 800970a:	f003 0301 	and.w	r3, r3, #1
 800970e:	b2da      	uxtb	r2, r3
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009718:	0b9b      	lsrs	r3, r3, #14
 800971a:	b2db      	uxtb	r3, r3
 800971c:	f003 0301 	and.w	r3, r3, #1
 8009720:	b2da      	uxtb	r2, r3
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800972a:	0b5b      	lsrs	r3, r3, #13
 800972c:	b2db      	uxtb	r3, r3
 800972e:	f003 0301 	and.w	r3, r3, #1
 8009732:	b2da      	uxtb	r2, r3
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800973c:	0b1b      	lsrs	r3, r3, #12
 800973e:	b2db      	uxtb	r3, r3
 8009740:	f003 0301 	and.w	r3, r3, #1
 8009744:	b2da      	uxtb	r2, r3
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	2200      	movs	r2, #0
 800974e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009754:	2b00      	cmp	r3, #0
 8009756:	d163      	bne.n	8009820 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800975c:	009a      	lsls	r2, r3, #2
 800975e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009762:	4013      	ands	r3, r2
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009768:	0f92      	lsrs	r2, r2, #30
 800976a:	431a      	orrs	r2, r3
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009774:	0edb      	lsrs	r3, r3, #27
 8009776:	b2db      	uxtb	r3, r3
 8009778:	f003 0307 	and.w	r3, r3, #7
 800977c:	b2da      	uxtb	r2, r3
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009786:	0e1b      	lsrs	r3, r3, #24
 8009788:	b2db      	uxtb	r3, r3
 800978a:	f003 0307 	and.w	r3, r3, #7
 800978e:	b2da      	uxtb	r2, r3
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009798:	0d5b      	lsrs	r3, r3, #21
 800979a:	b2db      	uxtb	r3, r3
 800979c:	f003 0307 	and.w	r3, r3, #7
 80097a0:	b2da      	uxtb	r2, r3
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097aa:	0c9b      	lsrs	r3, r3, #18
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	f003 0307 	and.w	r3, r3, #7
 80097b2:	b2da      	uxtb	r2, r3
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097bc:	0bdb      	lsrs	r3, r3, #15
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	f003 0307 	and.w	r3, r3, #7
 80097c4:	b2da      	uxtb	r2, r3
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	691b      	ldr	r3, [r3, #16]
 80097ce:	1c5a      	adds	r2, r3, #1
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	7e1b      	ldrb	r3, [r3, #24]
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	f003 0307 	and.w	r3, r3, #7
 80097de:	3302      	adds	r3, #2
 80097e0:	2201      	movs	r2, #1
 80097e2:	fa02 f303 	lsl.w	r3, r2, r3
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80097ea:	fb02 f203 	mul.w	r2, r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	7a1b      	ldrb	r3, [r3, #8]
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	f003 030f 	and.w	r3, r3, #15
 80097fc:	2201      	movs	r2, #1
 80097fe:	409a      	lsls	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800980c:	0a52      	lsrs	r2, r2, #9
 800980e:	fb02 f203 	mul.w	r2, r2, r3
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800981c:	661a      	str	r2, [r3, #96]	; 0x60
 800981e:	e031      	b.n	8009884 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009824:	2b01      	cmp	r3, #1
 8009826:	d11d      	bne.n	8009864 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800982c:	041b      	lsls	r3, r3, #16
 800982e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009836:	0c1b      	lsrs	r3, r3, #16
 8009838:	431a      	orrs	r2, r3
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	691b      	ldr	r3, [r3, #16]
 8009842:	3301      	adds	r3, #1
 8009844:	029a      	lsls	r2, r3, #10
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009858:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	661a      	str	r2, [r3, #96]	; 0x60
 8009862:	e00f      	b.n	8009884 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a58      	ldr	r2, [pc, #352]	; (80099cc <HAL_SD_GetCardCSD+0x344>)
 800986a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009870:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	e09d      	b.n	80099c0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009888:	0b9b      	lsrs	r3, r3, #14
 800988a:	b2db      	uxtb	r3, r3
 800988c:	f003 0301 	and.w	r3, r3, #1
 8009890:	b2da      	uxtb	r2, r3
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800989a:	09db      	lsrs	r3, r3, #7
 800989c:	b2db      	uxtb	r3, r3
 800989e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098a2:	b2da      	uxtb	r2, r3
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098b2:	b2da      	uxtb	r2, r3
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098bc:	0fdb      	lsrs	r3, r3, #31
 80098be:	b2da      	uxtb	r2, r3
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098c8:	0f5b      	lsrs	r3, r3, #29
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	f003 0303 	and.w	r3, r3, #3
 80098d0:	b2da      	uxtb	r2, r3
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098da:	0e9b      	lsrs	r3, r3, #26
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	f003 0307 	and.w	r3, r3, #7
 80098e2:	b2da      	uxtb	r2, r3
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ec:	0d9b      	lsrs	r3, r3, #22
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	f003 030f 	and.w	r3, r3, #15
 80098f4:	b2da      	uxtb	r2, r3
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098fe:	0d5b      	lsrs	r3, r3, #21
 8009900:	b2db      	uxtb	r3, r3
 8009902:	f003 0301 	and.w	r3, r3, #1
 8009906:	b2da      	uxtb	r2, r3
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	2200      	movs	r2, #0
 8009912:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800991a:	0c1b      	lsrs	r3, r3, #16
 800991c:	b2db      	uxtb	r3, r3
 800991e:	f003 0301 	and.w	r3, r3, #1
 8009922:	b2da      	uxtb	r2, r3
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800992e:	0bdb      	lsrs	r3, r3, #15
 8009930:	b2db      	uxtb	r3, r3
 8009932:	f003 0301 	and.w	r3, r3, #1
 8009936:	b2da      	uxtb	r2, r3
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009942:	0b9b      	lsrs	r3, r3, #14
 8009944:	b2db      	uxtb	r3, r3
 8009946:	f003 0301 	and.w	r3, r3, #1
 800994a:	b2da      	uxtb	r2, r3
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009956:	0b5b      	lsrs	r3, r3, #13
 8009958:	b2db      	uxtb	r3, r3
 800995a:	f003 0301 	and.w	r3, r3, #1
 800995e:	b2da      	uxtb	r2, r3
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800996a:	0b1b      	lsrs	r3, r3, #12
 800996c:	b2db      	uxtb	r3, r3
 800996e:	f003 0301 	and.w	r3, r3, #1
 8009972:	b2da      	uxtb	r2, r3
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800997e:	0a9b      	lsrs	r3, r3, #10
 8009980:	b2db      	uxtb	r3, r3
 8009982:	f003 0303 	and.w	r3, r3, #3
 8009986:	b2da      	uxtb	r2, r3
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009992:	0a1b      	lsrs	r3, r3, #8
 8009994:	b2db      	uxtb	r3, r3
 8009996:	f003 0303 	and.w	r3, r3, #3
 800999a:	b2da      	uxtb	r2, r3
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099a6:	085b      	lsrs	r3, r3, #1
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099ae:	b2da      	uxtb	r2, r3
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	2201      	movs	r2, #1
 80099ba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr
 80099cc:	004005ff 	.word	0x004005ff

080099d0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009a28:	b5b0      	push	{r4, r5, r7, lr}
 8009a2a:	b08e      	sub	sp, #56	; 0x38
 8009a2c:	af04      	add	r7, sp, #16
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2203      	movs	r2, #3
 8009a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a44:	2b03      	cmp	r3, #3
 8009a46:	d02e      	beq.n	8009aa6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a4e:	d106      	bne.n	8009a5e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	639a      	str	r2, [r3, #56]	; 0x38
 8009a5c:	e029      	b.n	8009ab2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a64:	d10a      	bne.n	8009a7c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fa1a 	bl	8009ea0 <SD_WideBus_Enable>
 8009a6c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a72:	6a3b      	ldr	r3, [r7, #32]
 8009a74:	431a      	orrs	r2, r3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	639a      	str	r2, [r3, #56]	; 0x38
 8009a7a:	e01a      	b.n	8009ab2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d10a      	bne.n	8009a98 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 fa57 	bl	8009f36 <SD_WideBus_Disable>
 8009a88:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a8e:	6a3b      	ldr	r3, [r7, #32]
 8009a90:	431a      	orrs	r2, r3
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	639a      	str	r2, [r3, #56]	; 0x38
 8009a96:	e00c      	b.n	8009ab2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	639a      	str	r2, [r3, #56]	; 0x38
 8009aa4:	e005      	b.n	8009ab2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aaa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d00b      	beq.n	8009ad2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a26      	ldr	r2, [pc, #152]	; (8009b58 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009ac0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ad0:	e01f      	b.n	8009b12 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	695b      	ldr	r3, [r3, #20]
 8009aec:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	699b      	ldr	r3, [r3, #24]
 8009af2:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681d      	ldr	r5, [r3, #0]
 8009af8:	466c      	mov	r4, sp
 8009afa:	f107 0314 	add.w	r3, r7, #20
 8009afe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009b02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009b06:	f107 0308 	add.w	r3, r7, #8
 8009b0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	f002 f8ed 	bl	800bcec <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f002 f9c4 	bl	800bea8 <SDMMC_CmdBlockLength>
 8009b20:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b22:	6a3b      	ldr	r3, [r7, #32]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d00c      	beq.n	8009b42 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a0a      	ldr	r2, [pc, #40]	; (8009b58 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009b2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b34:	6a3b      	ldr	r3, [r7, #32]
 8009b36:	431a      	orrs	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2201      	movs	r2, #1
 8009b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009b4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3728      	adds	r7, #40	; 0x28
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bdb0      	pop	{r4, r5, r7, pc}
 8009b56:	bf00      	nop
 8009b58:	004005ff 	.word	0x004005ff

08009b5c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b086      	sub	sp, #24
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009b64:	2300      	movs	r3, #0
 8009b66:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009b68:	f107 030c 	add.w	r3, r7, #12
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 f96e 	bl	8009e50 <SD_SendStatus>
 8009b74:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d005      	beq.n	8009b88 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	431a      	orrs	r2, r3
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	0a5b      	lsrs	r3, r3, #9
 8009b8c:	f003 030f 	and.w	r3, r3, #15
 8009b90:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009b92:	693b      	ldr	r3, [r7, #16]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3718      	adds	r7, #24
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009b9c:	b5b0      	push	{r4, r5, r7, lr}
 8009b9e:	b094      	sub	sp, #80	; 0x50
 8009ba0:	af04      	add	r7, sp, #16
 8009ba2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4618      	mov	r0, r3
 8009bae:	f002 f8f6 	bl	800bd9e <SDMMC_GetPowerState>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d102      	bne.n	8009bbe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009bb8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009bbc:	e0b6      	b.n	8009d2c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bc2:	2b03      	cmp	r3, #3
 8009bc4:	d02f      	beq.n	8009c26 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f002 fb21 	bl	800c212 <SDMMC_CmdSendCID>
 8009bd0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d001      	beq.n	8009bdc <SD_InitCard+0x40>
    {
      return errorstate;
 8009bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bda:	e0a7      	b.n	8009d2c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2100      	movs	r1, #0
 8009be2:	4618      	mov	r0, r3
 8009be4:	f002 f921 	bl	800be2a <SDMMC_GetResponse>
 8009be8:	4602      	mov	r2, r0
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	2104      	movs	r1, #4
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f002 f918 	bl	800be2a <SDMMC_GetResponse>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2108      	movs	r1, #8
 8009c06:	4618      	mov	r0, r3
 8009c08:	f002 f90f 	bl	800be2a <SDMMC_GetResponse>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	210c      	movs	r1, #12
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f002 f906 	bl	800be2a <SDMMC_GetResponse>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c2a:	2b03      	cmp	r3, #3
 8009c2c:	d00d      	beq.n	8009c4a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f107 020e 	add.w	r2, r7, #14
 8009c36:	4611      	mov	r1, r2
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f002 fb27 	bl	800c28c <SDMMC_CmdSetRelAdd>
 8009c3e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d001      	beq.n	8009c4a <SD_InitCard+0xae>
    {
      return errorstate;
 8009c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c48:	e070      	b.n	8009d2c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c4e:	2b03      	cmp	r3, #3
 8009c50:	d036      	beq.n	8009cc0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009c52:	89fb      	ldrh	r3, [r7, #14]
 8009c54:	461a      	mov	r2, r3
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c62:	041b      	lsls	r3, r3, #16
 8009c64:	4619      	mov	r1, r3
 8009c66:	4610      	mov	r0, r2
 8009c68:	f002 faf1 	bl	800c24e <SDMMC_CmdSendCSD>
 8009c6c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d001      	beq.n	8009c78 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c76:	e059      	b.n	8009d2c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2100      	movs	r1, #0
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f002 f8d3 	bl	800be2a <SDMMC_GetResponse>
 8009c84:	4602      	mov	r2, r0
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2104      	movs	r1, #4
 8009c90:	4618      	mov	r0, r3
 8009c92:	f002 f8ca 	bl	800be2a <SDMMC_GetResponse>
 8009c96:	4602      	mov	r2, r0
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2108      	movs	r1, #8
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f002 f8c1 	bl	800be2a <SDMMC_GetResponse>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	210c      	movs	r1, #12
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f002 f8b8 	bl	800be2a <SDMMC_GetResponse>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	2104      	movs	r1, #4
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f002 f8af 	bl	800be2a <SDMMC_GetResponse>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	0d1a      	lsrs	r2, r3, #20
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009cd4:	f107 0310 	add.w	r3, r7, #16
 8009cd8:	4619      	mov	r1, r3
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f7ff fcd4 	bl	8009688 <HAL_SD_GetCardCSD>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d002      	beq.n	8009cec <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ce6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009cea:	e01f      	b.n	8009d2c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6819      	ldr	r1, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cf4:	041b      	lsls	r3, r3, #16
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	f04f 0300 	mov.w	r3, #0
 8009cfc:	4608      	mov	r0, r1
 8009cfe:	f002 f99f 	bl	800c040 <SDMMC_CmdSelDesel>
 8009d02:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d001      	beq.n	8009d0e <SD_InitCard+0x172>
  {
    return errorstate;
 8009d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d0c:	e00e      	b.n	8009d2c <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681d      	ldr	r5, [r3, #0]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	466c      	mov	r4, sp
 8009d16:	f103 0210 	add.w	r2, r3, #16
 8009d1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8009d1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009d20:	3304      	adds	r3, #4
 8009d22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009d24:	4628      	mov	r0, r5
 8009d26:	f001 ffe1 	bl	800bcec <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3740      	adds	r7, #64	; 0x40
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bdb0      	pop	{r4, r5, r7, pc}

08009d34 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b086      	sub	sp, #24
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009d40:	2300      	movs	r3, #0
 8009d42:	617b      	str	r3, [r7, #20]
 8009d44:	2300      	movs	r3, #0
 8009d46:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f002 f99a 	bl	800c086 <SDMMC_CmdGoIdleState>
 8009d52:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d001      	beq.n	8009d5e <SD_PowerON+0x2a>
  {
    return errorstate;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	e072      	b.n	8009e44 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4618      	mov	r0, r3
 8009d64:	f002 f9ad 	bl	800c0c2 <SDMMC_CmdOperCond>
 8009d68:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d00d      	beq.n	8009d8c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f002 f983 	bl	800c086 <SDMMC_CmdGoIdleState>
 8009d80:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d004      	beq.n	8009d92 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	e05b      	b.n	8009e44 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d137      	bne.n	8009e0a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2100      	movs	r1, #0
 8009da0:	4618      	mov	r0, r3
 8009da2:	f002 f9ad 	bl	800c100 <SDMMC_CmdAppCommand>
 8009da6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d02d      	beq.n	8009e0a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009dae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009db2:	e047      	b.n	8009e44 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2100      	movs	r1, #0
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f002 f9a0 	bl	800c100 <SDMMC_CmdAppCommand>
 8009dc0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d001      	beq.n	8009dcc <SD_PowerON+0x98>
    {
      return errorstate;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	e03b      	b.n	8009e44 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	491e      	ldr	r1, [pc, #120]	; (8009e4c <SD_PowerON+0x118>)
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f002 f9b6 	bl	800c144 <SDMMC_CmdAppOperCommand>
 8009dd8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d002      	beq.n	8009de6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009de0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009de4:	e02e      	b.n	8009e44 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2100      	movs	r1, #0
 8009dec:	4618      	mov	r0, r3
 8009dee:	f002 f81c 	bl	800be2a <SDMMC_GetResponse>
 8009df2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	0fdb      	lsrs	r3, r3, #31
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d101      	bne.n	8009e00 <SD_PowerON+0xcc>
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	e000      	b.n	8009e02 <SD_PowerON+0xce>
 8009e00:	2300      	movs	r3, #0
 8009e02:	613b      	str	r3, [r7, #16]

    count++;
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	3301      	adds	r3, #1
 8009e08:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d802      	bhi.n	8009e1a <SD_PowerON+0xe6>
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d0cc      	beq.n	8009db4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d902      	bls.n	8009e2a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009e24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009e28:	e00c      	b.n	8009e44 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d003      	beq.n	8009e3c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	645a      	str	r2, [r3, #68]	; 0x44
 8009e3a:	e002      	b.n	8009e42 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3718      	adds	r7, #24
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	c1100000 	.word	0xc1100000

08009e50 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d102      	bne.n	8009e66 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009e60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009e64:	e018      	b.n	8009e98 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e6e:	041b      	lsls	r3, r3, #16
 8009e70:	4619      	mov	r1, r3
 8009e72:	4610      	mov	r0, r2
 8009e74:	f002 fa2b 	bl	800c2ce <SDMMC_CmdSendStatus>
 8009e78:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d001      	beq.n	8009e84 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	e009      	b.n	8009e98 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	2100      	movs	r1, #0
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f001 ffcd 	bl	800be2a <SDMMC_GetResponse>
 8009e90:	4602      	mov	r2, r0
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3710      	adds	r7, #16
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b086      	sub	sp, #24
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	60fb      	str	r3, [r7, #12]
 8009eac:	2300      	movs	r3, #0
 8009eae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f001 ffb7 	bl	800be2a <SDMMC_GetResponse>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ec2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ec6:	d102      	bne.n	8009ece <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009ec8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009ecc:	e02f      	b.n	8009f2e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009ece:	f107 030c 	add.w	r3, r7, #12
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 f879 	bl	8009fcc <SD_FindSCR>
 8009eda:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d001      	beq.n	8009ee6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	e023      	b.n	8009f2e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d01c      	beq.n	8009f2a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ef8:	041b      	lsls	r3, r3, #16
 8009efa:	4619      	mov	r1, r3
 8009efc:	4610      	mov	r0, r2
 8009efe:	f002 f8ff 	bl	800c100 <SDMMC_CmdAppCommand>
 8009f02:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d001      	beq.n	8009f0e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	e00f      	b.n	8009f2e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2102      	movs	r1, #2
 8009f14:	4618      	mov	r0, r3
 8009f16:	f002 f939 	bl	800c18c <SDMMC_CmdBusWidth>
 8009f1a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	e003      	b.n	8009f2e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009f26:	2300      	movs	r3, #0
 8009f28:	e001      	b.n	8009f2e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009f2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3718      	adds	r7, #24
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b086      	sub	sp, #24
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009f3e:	2300      	movs	r3, #0
 8009f40:	60fb      	str	r3, [r7, #12]
 8009f42:	2300      	movs	r3, #0
 8009f44:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f001 ff6c 	bl	800be2a <SDMMC_GetResponse>
 8009f52:	4603      	mov	r3, r0
 8009f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f5c:	d102      	bne.n	8009f64 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009f5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f62:	e02f      	b.n	8009fc4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009f64:	f107 030c 	add.w	r3, r7, #12
 8009f68:	4619      	mov	r1, r3
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 f82e 	bl	8009fcc <SD_FindSCR>
 8009f70:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d001      	beq.n	8009f7c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	e023      	b.n	8009fc4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d01c      	beq.n	8009fc0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f8e:	041b      	lsls	r3, r3, #16
 8009f90:	4619      	mov	r1, r3
 8009f92:	4610      	mov	r0, r2
 8009f94:	f002 f8b4 	bl	800c100 <SDMMC_CmdAppCommand>
 8009f98:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d001      	beq.n	8009fa4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	e00f      	b.n	8009fc4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2100      	movs	r1, #0
 8009faa:	4618      	mov	r0, r3
 8009fac:	f002 f8ee 	bl	800c18c <SDMMC_CmdBusWidth>
 8009fb0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d001      	beq.n	8009fbc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	e003      	b.n	8009fc4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	e001      	b.n	8009fc4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009fc0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3718      	adds	r7, #24
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009fcc:	b590      	push	{r4, r7, lr}
 8009fce:	b08f      	sub	sp, #60	; 0x3c
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009fd6:	f7f9 fbd7 	bl	8003788 <HAL_GetTick>
 8009fda:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	60bb      	str	r3, [r7, #8]
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2108      	movs	r1, #8
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f001 ff58 	bl	800bea8 <SDMMC_CmdBlockLength>
 8009ff8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d001      	beq.n	800a004 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a002:	e0b2      	b.n	800a16a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a00c:	041b      	lsls	r3, r3, #16
 800a00e:	4619      	mov	r1, r3
 800a010:	4610      	mov	r0, r2
 800a012:	f002 f875 	bl	800c100 <SDMMC_CmdAppCommand>
 800a016:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d001      	beq.n	800a022 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a020:	e0a3      	b.n	800a16a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a022:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a026:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a028:	2308      	movs	r3, #8
 800a02a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a02c:	2330      	movs	r3, #48	; 0x30
 800a02e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a030:	2302      	movs	r3, #2
 800a032:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a034:	2300      	movs	r3, #0
 800a036:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a038:	2301      	movs	r3, #1
 800a03a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f107 0210 	add.w	r2, r7, #16
 800a044:	4611      	mov	r1, r2
 800a046:	4618      	mov	r0, r3
 800a048:	f001 ff02 	bl	800be50 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4618      	mov	r0, r3
 800a052:	f002 f8bd 	bl	800c1d0 <SDMMC_CmdSendSCR>
 800a056:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d02a      	beq.n	800a0b4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800a05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a060:	e083      	b.n	800a16a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00f      	beq.n	800a090 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6819      	ldr	r1, [r3, #0]
 800a074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	f107 0208 	add.w	r2, r7, #8
 800a07c:	18d4      	adds	r4, r2, r3
 800a07e:	4608      	mov	r0, r1
 800a080:	f001 fe60 	bl	800bd44 <SDMMC_ReadFIFO>
 800a084:	4603      	mov	r3, r0
 800a086:	6023      	str	r3, [r4, #0]
      index++;
 800a088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a08a:	3301      	adds	r3, #1
 800a08c:	637b      	str	r3, [r7, #52]	; 0x34
 800a08e:	e006      	b.n	800a09e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d012      	beq.n	800a0c4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a09e:	f7f9 fb73 	bl	8003788 <HAL_GetTick>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0ac:	d102      	bne.n	800a0b4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a0ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0b2:	e05a      	b.n	800a16a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ba:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d0cf      	beq.n	800a062 <SD_FindSCR+0x96>
 800a0c2:	e000      	b.n	800a0c6 <SD_FindSCR+0xfa>
      break;
 800a0c4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0cc:	f003 0308 	and.w	r3, r3, #8
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d005      	beq.n	800a0e0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2208      	movs	r2, #8
 800a0da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a0dc:	2308      	movs	r3, #8
 800a0de:	e044      	b.n	800a16a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0e6:	f003 0302 	and.w	r3, r3, #2
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d005      	beq.n	800a0fa <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2202      	movs	r2, #2
 800a0f4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a0f6:	2302      	movs	r3, #2
 800a0f8:	e037      	b.n	800a16a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a100:	f003 0320 	and.w	r3, r3, #32
 800a104:	2b00      	cmp	r3, #0
 800a106:	d005      	beq.n	800a114 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2220      	movs	r2, #32
 800a10e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a110:	2320      	movs	r3, #32
 800a112:	e02a      	b.n	800a16a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f240 523a 	movw	r2, #1338	; 0x53a
 800a11c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	061a      	lsls	r2, r3, #24
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	021b      	lsls	r3, r3, #8
 800a126:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a12a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	0a1b      	lsrs	r3, r3, #8
 800a130:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a134:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	0e1b      	lsrs	r3, r3, #24
 800a13a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13e:	601a      	str	r2, [r3, #0]
    scr++;
 800a140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a142:	3304      	adds	r3, #4
 800a144:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	061a      	lsls	r2, r3, #24
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	021b      	lsls	r3, r3, #8
 800a14e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a152:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	0a1b      	lsrs	r3, r3, #8
 800a158:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a15c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	0e1b      	lsrs	r3, r3, #24
 800a162:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a166:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	373c      	adds	r7, #60	; 0x3c
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd90      	pop	{r4, r7, pc}

0800a172 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800a172:	b580      	push	{r7, lr}
 800a174:	b082      	sub	sp, #8
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
 800a17a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d101      	bne.n	800a186 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a182:	2301      	movs	r3, #1
 800a184:	e025      	b.n	800a1d2 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d106      	bne.n	800a1a0 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f7f9 f976 	bl	800348c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2202      	movs	r2, #2
 800a1a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	3304      	adds	r3, #4
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	4610      	mov	r0, r2
 800a1b4:	f001 fca8 	bl	800bb08 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6818      	ldr	r0, [r3, #0]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	6839      	ldr	r1, [r7, #0]
 800a1c4:	f001 fd12 	bl	800bbec <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
	...

0800a1dc <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d101      	bne.n	800a1ee <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e04c      	b.n	800a288 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d106      	bne.n	800a208 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f7f8 fe8e 	bl	8002f24 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2202      	movs	r2, #2
 800a20c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f022 0203 	bic.w	r2, r2, #3
 800a21e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	4b19      	ldr	r3, [pc, #100]	; (800a290 <HAL_SPDIFRX_Init+0xb4>)
 800a22c:	4013      	ands	r3, r2
 800a22e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800a238:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800a23e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800a244:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800a24a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800a250:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800a256:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800a25c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800a262:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800a268:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	4313      	orrs	r3, r2
 800a26e:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2201      	movs	r2, #1
 800a282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	fff88407 	.word	0xfff88407

0800a294 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d101      	bne.n	800a2a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e049      	b.n	800a33a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d106      	bne.n	800a2c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f7f8 fe74 	bl	8002fa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2202      	movs	r2, #2
 800a2c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	3304      	adds	r3, #4
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	4610      	mov	r0, r2
 800a2d4:	f000 fade 	bl	800a894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2201      	movs	r2, #1
 800a324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2201      	movs	r2, #1
 800a32c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2201      	movs	r2, #1
 800a334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3708      	adds	r7, #8
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
	...

0800a344 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a352:	b2db      	uxtb	r3, r3
 800a354:	2b01      	cmp	r3, #1
 800a356:	d001      	beq.n	800a35c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a358:	2301      	movs	r3, #1
 800a35a:	e04c      	b.n	800a3f6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2202      	movs	r2, #2
 800a360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a26      	ldr	r2, [pc, #152]	; (800a404 <HAL_TIM_Base_Start+0xc0>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d022      	beq.n	800a3b4 <HAL_TIM_Base_Start+0x70>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a376:	d01d      	beq.n	800a3b4 <HAL_TIM_Base_Start+0x70>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a22      	ldr	r2, [pc, #136]	; (800a408 <HAL_TIM_Base_Start+0xc4>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d018      	beq.n	800a3b4 <HAL_TIM_Base_Start+0x70>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a21      	ldr	r2, [pc, #132]	; (800a40c <HAL_TIM_Base_Start+0xc8>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d013      	beq.n	800a3b4 <HAL_TIM_Base_Start+0x70>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a1f      	ldr	r2, [pc, #124]	; (800a410 <HAL_TIM_Base_Start+0xcc>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d00e      	beq.n	800a3b4 <HAL_TIM_Base_Start+0x70>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a1e      	ldr	r2, [pc, #120]	; (800a414 <HAL_TIM_Base_Start+0xd0>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d009      	beq.n	800a3b4 <HAL_TIM_Base_Start+0x70>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a1c      	ldr	r2, [pc, #112]	; (800a418 <HAL_TIM_Base_Start+0xd4>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d004      	beq.n	800a3b4 <HAL_TIM_Base_Start+0x70>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a1b      	ldr	r2, [pc, #108]	; (800a41c <HAL_TIM_Base_Start+0xd8>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d115      	bne.n	800a3e0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	689a      	ldr	r2, [r3, #8]
 800a3ba:	4b19      	ldr	r3, [pc, #100]	; (800a420 <HAL_TIM_Base_Start+0xdc>)
 800a3bc:	4013      	ands	r3, r2
 800a3be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2b06      	cmp	r3, #6
 800a3c4:	d015      	beq.n	800a3f2 <HAL_TIM_Base_Start+0xae>
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3cc:	d011      	beq.n	800a3f2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f042 0201 	orr.w	r2, r2, #1
 800a3dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3de:	e008      	b.n	800a3f2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	681a      	ldr	r2, [r3, #0]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f042 0201 	orr.w	r2, r2, #1
 800a3ee:	601a      	str	r2, [r3, #0]
 800a3f0:	e000      	b.n	800a3f4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a3f4:	2300      	movs	r3, #0
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3714      	adds	r7, #20
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	40010000 	.word	0x40010000
 800a408:	40000400 	.word	0x40000400
 800a40c:	40000800 	.word	0x40000800
 800a410:	40000c00 	.word	0x40000c00
 800a414:	40010400 	.word	0x40010400
 800a418:	40014000 	.word	0x40014000
 800a41c:	40001800 	.word	0x40001800
 800a420:	00010007 	.word	0x00010007

0800a424 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d101      	bne.n	800a436 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a432:	2301      	movs	r3, #1
 800a434:	e049      	b.n	800a4ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d106      	bne.n	800a450 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 f841 	bl	800a4d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2202      	movs	r2, #2
 800a454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	3304      	adds	r3, #4
 800a460:	4619      	mov	r1, r3
 800a462:	4610      	mov	r0, r2
 800a464:	f000 fa16 	bl	800a894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2201      	movs	r2, #1
 800a46c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2201      	movs	r2, #1
 800a474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2201      	movs	r2, #1
 800a47c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2201      	movs	r2, #1
 800a484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2201      	movs	r2, #1
 800a494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3708      	adds	r7, #8
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a4d2:	b480      	push	{r7}
 800a4d4:	b083      	sub	sp, #12
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a4da:	bf00      	nop
 800a4dc:	370c      	adds	r7, #12
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr
	...

0800a4e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	60b9      	str	r1, [r7, #8]
 800a4f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d101      	bne.n	800a502 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a4fe:	2302      	movs	r3, #2
 800a500:	e0fd      	b.n	800a6fe <HAL_TIM_PWM_ConfigChannel+0x216>
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2201      	movs	r2, #1
 800a506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2b14      	cmp	r3, #20
 800a50e:	f200 80f0 	bhi.w	800a6f2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a512:	a201      	add	r2, pc, #4	; (adr r2, 800a518 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a518:	0800a56d 	.word	0x0800a56d
 800a51c:	0800a6f3 	.word	0x0800a6f3
 800a520:	0800a6f3 	.word	0x0800a6f3
 800a524:	0800a6f3 	.word	0x0800a6f3
 800a528:	0800a5ad 	.word	0x0800a5ad
 800a52c:	0800a6f3 	.word	0x0800a6f3
 800a530:	0800a6f3 	.word	0x0800a6f3
 800a534:	0800a6f3 	.word	0x0800a6f3
 800a538:	0800a5ef 	.word	0x0800a5ef
 800a53c:	0800a6f3 	.word	0x0800a6f3
 800a540:	0800a6f3 	.word	0x0800a6f3
 800a544:	0800a6f3 	.word	0x0800a6f3
 800a548:	0800a62f 	.word	0x0800a62f
 800a54c:	0800a6f3 	.word	0x0800a6f3
 800a550:	0800a6f3 	.word	0x0800a6f3
 800a554:	0800a6f3 	.word	0x0800a6f3
 800a558:	0800a671 	.word	0x0800a671
 800a55c:	0800a6f3 	.word	0x0800a6f3
 800a560:	0800a6f3 	.word	0x0800a6f3
 800a564:	0800a6f3 	.word	0x0800a6f3
 800a568:	0800a6b1 	.word	0x0800a6b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	68b9      	ldr	r1, [r7, #8]
 800a572:	4618      	mov	r0, r3
 800a574:	f000 fa2e 	bl	800a9d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	699a      	ldr	r2, [r3, #24]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f042 0208 	orr.w	r2, r2, #8
 800a586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	699a      	ldr	r2, [r3, #24]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f022 0204 	bic.w	r2, r2, #4
 800a596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	6999      	ldr	r1, [r3, #24]
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	691a      	ldr	r2, [r3, #16]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	430a      	orrs	r2, r1
 800a5a8:	619a      	str	r2, [r3, #24]
      break;
 800a5aa:	e0a3      	b.n	800a6f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	68b9      	ldr	r1, [r7, #8]
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f000 fa80 	bl	800aab8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	699a      	ldr	r2, [r3, #24]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	699a      	ldr	r2, [r3, #24]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	6999      	ldr	r1, [r3, #24]
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	691b      	ldr	r3, [r3, #16]
 800a5e2:	021a      	lsls	r2, r3, #8
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	430a      	orrs	r2, r1
 800a5ea:	619a      	str	r2, [r3, #24]
      break;
 800a5ec:	e082      	b.n	800a6f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	68b9      	ldr	r1, [r7, #8]
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f000 fad7 	bl	800aba8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	69da      	ldr	r2, [r3, #28]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f042 0208 	orr.w	r2, r2, #8
 800a608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	69da      	ldr	r2, [r3, #28]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f022 0204 	bic.w	r2, r2, #4
 800a618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	69d9      	ldr	r1, [r3, #28]
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	691a      	ldr	r2, [r3, #16]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	430a      	orrs	r2, r1
 800a62a:	61da      	str	r2, [r3, #28]
      break;
 800a62c:	e062      	b.n	800a6f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	68b9      	ldr	r1, [r7, #8]
 800a634:	4618      	mov	r0, r3
 800a636:	f000 fb2d 	bl	800ac94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	69da      	ldr	r2, [r3, #28]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	69da      	ldr	r2, [r3, #28]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	69d9      	ldr	r1, [r3, #28]
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	691b      	ldr	r3, [r3, #16]
 800a664:	021a      	lsls	r2, r3, #8
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	430a      	orrs	r2, r1
 800a66c:	61da      	str	r2, [r3, #28]
      break;
 800a66e:	e041      	b.n	800a6f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	68b9      	ldr	r1, [r7, #8]
 800a676:	4618      	mov	r0, r3
 800a678:	f000 fb64 	bl	800ad44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f042 0208 	orr.w	r2, r2, #8
 800a68a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f022 0204 	bic.w	r2, r2, #4
 800a69a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	691a      	ldr	r2, [r3, #16]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	430a      	orrs	r2, r1
 800a6ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a6ae:	e021      	b.n	800a6f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	68b9      	ldr	r1, [r7, #8]
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f000 fb96 	bl	800ade8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	021a      	lsls	r2, r3, #8
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	430a      	orrs	r2, r1
 800a6ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a6f0:	e000      	b.n	800a6f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a6f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop

0800a708 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d101      	bne.n	800a720 <HAL_TIM_ConfigClockSource+0x18>
 800a71c:	2302      	movs	r3, #2
 800a71e:	e0b3      	b.n	800a888 <HAL_TIM_ConfigClockSource+0x180>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2202      	movs	r2, #2
 800a72c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a738:	68fa      	ldr	r2, [r7, #12]
 800a73a:	4b55      	ldr	r3, [pc, #340]	; (800a890 <HAL_TIM_ConfigClockSource+0x188>)
 800a73c:	4013      	ands	r3, r2
 800a73e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a746:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a758:	d03e      	beq.n	800a7d8 <HAL_TIM_ConfigClockSource+0xd0>
 800a75a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a75e:	f200 8087 	bhi.w	800a870 <HAL_TIM_ConfigClockSource+0x168>
 800a762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a766:	f000 8085 	beq.w	800a874 <HAL_TIM_ConfigClockSource+0x16c>
 800a76a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a76e:	d87f      	bhi.n	800a870 <HAL_TIM_ConfigClockSource+0x168>
 800a770:	2b70      	cmp	r3, #112	; 0x70
 800a772:	d01a      	beq.n	800a7aa <HAL_TIM_ConfigClockSource+0xa2>
 800a774:	2b70      	cmp	r3, #112	; 0x70
 800a776:	d87b      	bhi.n	800a870 <HAL_TIM_ConfigClockSource+0x168>
 800a778:	2b60      	cmp	r3, #96	; 0x60
 800a77a:	d050      	beq.n	800a81e <HAL_TIM_ConfigClockSource+0x116>
 800a77c:	2b60      	cmp	r3, #96	; 0x60
 800a77e:	d877      	bhi.n	800a870 <HAL_TIM_ConfigClockSource+0x168>
 800a780:	2b50      	cmp	r3, #80	; 0x50
 800a782:	d03c      	beq.n	800a7fe <HAL_TIM_ConfigClockSource+0xf6>
 800a784:	2b50      	cmp	r3, #80	; 0x50
 800a786:	d873      	bhi.n	800a870 <HAL_TIM_ConfigClockSource+0x168>
 800a788:	2b40      	cmp	r3, #64	; 0x40
 800a78a:	d058      	beq.n	800a83e <HAL_TIM_ConfigClockSource+0x136>
 800a78c:	2b40      	cmp	r3, #64	; 0x40
 800a78e:	d86f      	bhi.n	800a870 <HAL_TIM_ConfigClockSource+0x168>
 800a790:	2b30      	cmp	r3, #48	; 0x30
 800a792:	d064      	beq.n	800a85e <HAL_TIM_ConfigClockSource+0x156>
 800a794:	2b30      	cmp	r3, #48	; 0x30
 800a796:	d86b      	bhi.n	800a870 <HAL_TIM_ConfigClockSource+0x168>
 800a798:	2b20      	cmp	r3, #32
 800a79a:	d060      	beq.n	800a85e <HAL_TIM_ConfigClockSource+0x156>
 800a79c:	2b20      	cmp	r3, #32
 800a79e:	d867      	bhi.n	800a870 <HAL_TIM_ConfigClockSource+0x168>
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d05c      	beq.n	800a85e <HAL_TIM_ConfigClockSource+0x156>
 800a7a4:	2b10      	cmp	r3, #16
 800a7a6:	d05a      	beq.n	800a85e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a7a8:	e062      	b.n	800a870 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6818      	ldr	r0, [r3, #0]
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	6899      	ldr	r1, [r3, #8]
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	685a      	ldr	r2, [r3, #4]
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	f000 fbe3 	bl	800af84 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a7cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	68fa      	ldr	r2, [r7, #12]
 800a7d4:	609a      	str	r2, [r3, #8]
      break;
 800a7d6:	e04e      	b.n	800a876 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6818      	ldr	r0, [r3, #0]
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	6899      	ldr	r1, [r3, #8]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	685a      	ldr	r2, [r3, #4]
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	f000 fbcc 	bl	800af84 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	689a      	ldr	r2, [r3, #8]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a7fa:	609a      	str	r2, [r3, #8]
      break;
 800a7fc:	e03b      	b.n	800a876 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6818      	ldr	r0, [r3, #0]
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	6859      	ldr	r1, [r3, #4]
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	461a      	mov	r2, r3
 800a80c:	f000 fb40 	bl	800ae90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2150      	movs	r1, #80	; 0x50
 800a816:	4618      	mov	r0, r3
 800a818:	f000 fb99 	bl	800af4e <TIM_ITRx_SetConfig>
      break;
 800a81c:	e02b      	b.n	800a876 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6818      	ldr	r0, [r3, #0]
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	6859      	ldr	r1, [r3, #4]
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	461a      	mov	r2, r3
 800a82c:	f000 fb5f 	bl	800aeee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	2160      	movs	r1, #96	; 0x60
 800a836:	4618      	mov	r0, r3
 800a838:	f000 fb89 	bl	800af4e <TIM_ITRx_SetConfig>
      break;
 800a83c:	e01b      	b.n	800a876 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6818      	ldr	r0, [r3, #0]
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	6859      	ldr	r1, [r3, #4]
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	461a      	mov	r2, r3
 800a84c:	f000 fb20 	bl	800ae90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2140      	movs	r1, #64	; 0x40
 800a856:	4618      	mov	r0, r3
 800a858:	f000 fb79 	bl	800af4e <TIM_ITRx_SetConfig>
      break;
 800a85c:	e00b      	b.n	800a876 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4619      	mov	r1, r3
 800a868:	4610      	mov	r0, r2
 800a86a:	f000 fb70 	bl	800af4e <TIM_ITRx_SetConfig>
        break;
 800a86e:	e002      	b.n	800a876 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a870:	bf00      	nop
 800a872:	e000      	b.n	800a876 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a874:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2201      	movs	r2, #1
 800a87a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3710      	adds	r7, #16
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	fffeff88 	.word	0xfffeff88

0800a894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a894:	b480      	push	{r7}
 800a896:	b085      	sub	sp, #20
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	4a40      	ldr	r2, [pc, #256]	; (800a9a8 <TIM_Base_SetConfig+0x114>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d013      	beq.n	800a8d4 <TIM_Base_SetConfig+0x40>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8b2:	d00f      	beq.n	800a8d4 <TIM_Base_SetConfig+0x40>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	4a3d      	ldr	r2, [pc, #244]	; (800a9ac <TIM_Base_SetConfig+0x118>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d00b      	beq.n	800a8d4 <TIM_Base_SetConfig+0x40>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4a3c      	ldr	r2, [pc, #240]	; (800a9b0 <TIM_Base_SetConfig+0x11c>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d007      	beq.n	800a8d4 <TIM_Base_SetConfig+0x40>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	4a3b      	ldr	r2, [pc, #236]	; (800a9b4 <TIM_Base_SetConfig+0x120>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d003      	beq.n	800a8d4 <TIM_Base_SetConfig+0x40>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4a3a      	ldr	r2, [pc, #232]	; (800a9b8 <TIM_Base_SetConfig+0x124>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d108      	bne.n	800a8e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	68fa      	ldr	r2, [r7, #12]
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	4a2f      	ldr	r2, [pc, #188]	; (800a9a8 <TIM_Base_SetConfig+0x114>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d02b      	beq.n	800a946 <TIM_Base_SetConfig+0xb2>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8f4:	d027      	beq.n	800a946 <TIM_Base_SetConfig+0xb2>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	4a2c      	ldr	r2, [pc, #176]	; (800a9ac <TIM_Base_SetConfig+0x118>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d023      	beq.n	800a946 <TIM_Base_SetConfig+0xb2>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	4a2b      	ldr	r2, [pc, #172]	; (800a9b0 <TIM_Base_SetConfig+0x11c>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d01f      	beq.n	800a946 <TIM_Base_SetConfig+0xb2>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4a2a      	ldr	r2, [pc, #168]	; (800a9b4 <TIM_Base_SetConfig+0x120>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d01b      	beq.n	800a946 <TIM_Base_SetConfig+0xb2>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4a29      	ldr	r2, [pc, #164]	; (800a9b8 <TIM_Base_SetConfig+0x124>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d017      	beq.n	800a946 <TIM_Base_SetConfig+0xb2>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4a28      	ldr	r2, [pc, #160]	; (800a9bc <TIM_Base_SetConfig+0x128>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d013      	beq.n	800a946 <TIM_Base_SetConfig+0xb2>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4a27      	ldr	r2, [pc, #156]	; (800a9c0 <TIM_Base_SetConfig+0x12c>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d00f      	beq.n	800a946 <TIM_Base_SetConfig+0xb2>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a26      	ldr	r2, [pc, #152]	; (800a9c4 <TIM_Base_SetConfig+0x130>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d00b      	beq.n	800a946 <TIM_Base_SetConfig+0xb2>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a25      	ldr	r2, [pc, #148]	; (800a9c8 <TIM_Base_SetConfig+0x134>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d007      	beq.n	800a946 <TIM_Base_SetConfig+0xb2>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4a24      	ldr	r2, [pc, #144]	; (800a9cc <TIM_Base_SetConfig+0x138>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d003      	beq.n	800a946 <TIM_Base_SetConfig+0xb2>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a23      	ldr	r2, [pc, #140]	; (800a9d0 <TIM_Base_SetConfig+0x13c>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d108      	bne.n	800a958 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a94c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	68db      	ldr	r3, [r3, #12]
 800a952:	68fa      	ldr	r2, [r7, #12]
 800a954:	4313      	orrs	r3, r2
 800a956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	695b      	ldr	r3, [r3, #20]
 800a962:	4313      	orrs	r3, r2
 800a964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	689a      	ldr	r2, [r3, #8]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4a0a      	ldr	r2, [pc, #40]	; (800a9a8 <TIM_Base_SetConfig+0x114>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d003      	beq.n	800a98c <TIM_Base_SetConfig+0xf8>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4a0c      	ldr	r2, [pc, #48]	; (800a9b8 <TIM_Base_SetConfig+0x124>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d103      	bne.n	800a994 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	691a      	ldr	r2, [r3, #16]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2201      	movs	r2, #1
 800a998:	615a      	str	r2, [r3, #20]
}
 800a99a:	bf00      	nop
 800a99c:	3714      	adds	r7, #20
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop
 800a9a8:	40010000 	.word	0x40010000
 800a9ac:	40000400 	.word	0x40000400
 800a9b0:	40000800 	.word	0x40000800
 800a9b4:	40000c00 	.word	0x40000c00
 800a9b8:	40010400 	.word	0x40010400
 800a9bc:	40014000 	.word	0x40014000
 800a9c0:	40014400 	.word	0x40014400
 800a9c4:	40014800 	.word	0x40014800
 800a9c8:	40001800 	.word	0x40001800
 800a9cc:	40001c00 	.word	0x40001c00
 800a9d0:	40002000 	.word	0x40002000

0800a9d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b087      	sub	sp, #28
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6a1b      	ldr	r3, [r3, #32]
 800a9e2:	f023 0201 	bic.w	r2, r3, #1
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a1b      	ldr	r3, [r3, #32]
 800a9ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	699b      	ldr	r3, [r3, #24]
 800a9fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a9fc:	68fa      	ldr	r2, [r7, #12]
 800a9fe:	4b2b      	ldr	r3, [pc, #172]	; (800aaac <TIM_OC1_SetConfig+0xd8>)
 800aa00:	4013      	ands	r3, r2
 800aa02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f023 0303 	bic.w	r3, r3, #3
 800aa0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	68fa      	ldr	r2, [r7, #12]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	f023 0302 	bic.w	r3, r3, #2
 800aa1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	697a      	ldr	r2, [r7, #20]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4a21      	ldr	r2, [pc, #132]	; (800aab0 <TIM_OC1_SetConfig+0xdc>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d003      	beq.n	800aa38 <TIM_OC1_SetConfig+0x64>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4a20      	ldr	r2, [pc, #128]	; (800aab4 <TIM_OC1_SetConfig+0xe0>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d10c      	bne.n	800aa52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	f023 0308 	bic.w	r3, r3, #8
 800aa3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	697a      	ldr	r2, [r7, #20]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	f023 0304 	bic.w	r3, r3, #4
 800aa50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	4a16      	ldr	r2, [pc, #88]	; (800aab0 <TIM_OC1_SetConfig+0xdc>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d003      	beq.n	800aa62 <TIM_OC1_SetConfig+0x8e>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4a15      	ldr	r2, [pc, #84]	; (800aab4 <TIM_OC1_SetConfig+0xe0>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d111      	bne.n	800aa86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	695b      	ldr	r3, [r3, #20]
 800aa76:	693a      	ldr	r2, [r7, #16]
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	699b      	ldr	r3, [r3, #24]
 800aa80:	693a      	ldr	r2, [r7, #16]
 800aa82:	4313      	orrs	r3, r2
 800aa84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	693a      	ldr	r2, [r7, #16]
 800aa8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	685a      	ldr	r2, [r3, #4]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	697a      	ldr	r2, [r7, #20]
 800aa9e:	621a      	str	r2, [r3, #32]
}
 800aaa0:	bf00      	nop
 800aaa2:	371c      	adds	r7, #28
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr
 800aaac:	fffeff8f 	.word	0xfffeff8f
 800aab0:	40010000 	.word	0x40010000
 800aab4:	40010400 	.word	0x40010400

0800aab8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b087      	sub	sp, #28
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6a1b      	ldr	r3, [r3, #32]
 800aac6:	f023 0210 	bic.w	r2, r3, #16
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6a1b      	ldr	r3, [r3, #32]
 800aad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	699b      	ldr	r3, [r3, #24]
 800aade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	4b2e      	ldr	r3, [pc, #184]	; (800ab9c <TIM_OC2_SetConfig+0xe4>)
 800aae4:	4013      	ands	r3, r2
 800aae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aaee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	021b      	lsls	r3, r3, #8
 800aaf6:	68fa      	ldr	r2, [r7, #12]
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	f023 0320 	bic.w	r3, r3, #32
 800ab02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	011b      	lsls	r3, r3, #4
 800ab0a:	697a      	ldr	r2, [r7, #20]
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4a23      	ldr	r2, [pc, #140]	; (800aba0 <TIM_OC2_SetConfig+0xe8>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d003      	beq.n	800ab20 <TIM_OC2_SetConfig+0x68>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	4a22      	ldr	r2, [pc, #136]	; (800aba4 <TIM_OC2_SetConfig+0xec>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d10d      	bne.n	800ab3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	011b      	lsls	r3, r3, #4
 800ab2e:	697a      	ldr	r2, [r7, #20]
 800ab30:	4313      	orrs	r3, r2
 800ab32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4a18      	ldr	r2, [pc, #96]	; (800aba0 <TIM_OC2_SetConfig+0xe8>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d003      	beq.n	800ab4c <TIM_OC2_SetConfig+0x94>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a17      	ldr	r2, [pc, #92]	; (800aba4 <TIM_OC2_SetConfig+0xec>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d113      	bne.n	800ab74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	695b      	ldr	r3, [r3, #20]
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	693a      	ldr	r2, [r7, #16]
 800ab64:	4313      	orrs	r3, r2
 800ab66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	699b      	ldr	r3, [r3, #24]
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	693a      	ldr	r2, [r7, #16]
 800ab70:	4313      	orrs	r3, r2
 800ab72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	693a      	ldr	r2, [r7, #16]
 800ab78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	685a      	ldr	r2, [r3, #4]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	697a      	ldr	r2, [r7, #20]
 800ab8c:	621a      	str	r2, [r3, #32]
}
 800ab8e:	bf00      	nop
 800ab90:	371c      	adds	r7, #28
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr
 800ab9a:	bf00      	nop
 800ab9c:	feff8fff 	.word	0xfeff8fff
 800aba0:	40010000 	.word	0x40010000
 800aba4:	40010400 	.word	0x40010400

0800aba8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b087      	sub	sp, #28
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6a1b      	ldr	r3, [r3, #32]
 800abb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6a1b      	ldr	r3, [r3, #32]
 800abc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	69db      	ldr	r3, [r3, #28]
 800abce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800abd0:	68fa      	ldr	r2, [r7, #12]
 800abd2:	4b2d      	ldr	r3, [pc, #180]	; (800ac88 <TIM_OC3_SetConfig+0xe0>)
 800abd4:	4013      	ands	r3, r2
 800abd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f023 0303 	bic.w	r3, r3, #3
 800abde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	68fa      	ldr	r2, [r7, #12]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800abf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	689b      	ldr	r3, [r3, #8]
 800abf6:	021b      	lsls	r3, r3, #8
 800abf8:	697a      	ldr	r2, [r7, #20]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	4a22      	ldr	r2, [pc, #136]	; (800ac8c <TIM_OC3_SetConfig+0xe4>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d003      	beq.n	800ac0e <TIM_OC3_SetConfig+0x66>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	4a21      	ldr	r2, [pc, #132]	; (800ac90 <TIM_OC3_SetConfig+0xe8>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d10d      	bne.n	800ac2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	021b      	lsls	r3, r3, #8
 800ac1c:	697a      	ldr	r2, [r7, #20]
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4a17      	ldr	r2, [pc, #92]	; (800ac8c <TIM_OC3_SetConfig+0xe4>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d003      	beq.n	800ac3a <TIM_OC3_SetConfig+0x92>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	4a16      	ldr	r2, [pc, #88]	; (800ac90 <TIM_OC3_SetConfig+0xe8>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d113      	bne.n	800ac62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	695b      	ldr	r3, [r3, #20]
 800ac4e:	011b      	lsls	r3, r3, #4
 800ac50:	693a      	ldr	r2, [r7, #16]
 800ac52:	4313      	orrs	r3, r2
 800ac54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	699b      	ldr	r3, [r3, #24]
 800ac5a:	011b      	lsls	r3, r3, #4
 800ac5c:	693a      	ldr	r2, [r7, #16]
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	693a      	ldr	r2, [r7, #16]
 800ac66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	68fa      	ldr	r2, [r7, #12]
 800ac6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	685a      	ldr	r2, [r3, #4]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	697a      	ldr	r2, [r7, #20]
 800ac7a:	621a      	str	r2, [r3, #32]
}
 800ac7c:	bf00      	nop
 800ac7e:	371c      	adds	r7, #28
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr
 800ac88:	fffeff8f 	.word	0xfffeff8f
 800ac8c:	40010000 	.word	0x40010000
 800ac90:	40010400 	.word	0x40010400

0800ac94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b087      	sub	sp, #28
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6a1b      	ldr	r3, [r3, #32]
 800aca2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a1b      	ldr	r3, [r3, #32]
 800acae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	69db      	ldr	r3, [r3, #28]
 800acba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800acbc:	68fa      	ldr	r2, [r7, #12]
 800acbe:	4b1e      	ldr	r3, [pc, #120]	; (800ad38 <TIM_OC4_SetConfig+0xa4>)
 800acc0:	4013      	ands	r3, r2
 800acc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	021b      	lsls	r3, r3, #8
 800acd2:	68fa      	ldr	r2, [r7, #12]
 800acd4:	4313      	orrs	r3, r2
 800acd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800acde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	031b      	lsls	r3, r3, #12
 800ace6:	693a      	ldr	r2, [r7, #16]
 800ace8:	4313      	orrs	r3, r2
 800acea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	4a13      	ldr	r2, [pc, #76]	; (800ad3c <TIM_OC4_SetConfig+0xa8>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d003      	beq.n	800acfc <TIM_OC4_SetConfig+0x68>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4a12      	ldr	r2, [pc, #72]	; (800ad40 <TIM_OC4_SetConfig+0xac>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d109      	bne.n	800ad10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	695b      	ldr	r3, [r3, #20]
 800ad08:	019b      	lsls	r3, r3, #6
 800ad0a:	697a      	ldr	r2, [r7, #20]
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	697a      	ldr	r2, [r7, #20]
 800ad14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	685a      	ldr	r2, [r3, #4]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	693a      	ldr	r2, [r7, #16]
 800ad28:	621a      	str	r2, [r3, #32]
}
 800ad2a:	bf00      	nop
 800ad2c:	371c      	adds	r7, #28
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr
 800ad36:	bf00      	nop
 800ad38:	feff8fff 	.word	0xfeff8fff
 800ad3c:	40010000 	.word	0x40010000
 800ad40:	40010400 	.word	0x40010400

0800ad44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b087      	sub	sp, #28
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6a1b      	ldr	r3, [r3, #32]
 800ad52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6a1b      	ldr	r3, [r3, #32]
 800ad5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ad6c:	68fa      	ldr	r2, [r7, #12]
 800ad6e:	4b1b      	ldr	r3, [pc, #108]	; (800addc <TIM_OC5_SetConfig+0x98>)
 800ad70:	4013      	ands	r3, r2
 800ad72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	68fa      	ldr	r2, [r7, #12]
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ad84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	689b      	ldr	r3, [r3, #8]
 800ad8a:	041b      	lsls	r3, r3, #16
 800ad8c:	693a      	ldr	r2, [r7, #16]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4a12      	ldr	r2, [pc, #72]	; (800ade0 <TIM_OC5_SetConfig+0x9c>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d003      	beq.n	800ada2 <TIM_OC5_SetConfig+0x5e>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4a11      	ldr	r2, [pc, #68]	; (800ade4 <TIM_OC5_SetConfig+0xa0>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d109      	bne.n	800adb6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ada8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	695b      	ldr	r3, [r3, #20]
 800adae:	021b      	lsls	r3, r3, #8
 800adb0:	697a      	ldr	r2, [r7, #20]
 800adb2:	4313      	orrs	r3, r2
 800adb4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	697a      	ldr	r2, [r7, #20]
 800adba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	68fa      	ldr	r2, [r7, #12]
 800adc0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	685a      	ldr	r2, [r3, #4]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	693a      	ldr	r2, [r7, #16]
 800adce:	621a      	str	r2, [r3, #32]
}
 800add0:	bf00      	nop
 800add2:	371c      	adds	r7, #28
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr
 800addc:	fffeff8f 	.word	0xfffeff8f
 800ade0:	40010000 	.word	0x40010000
 800ade4:	40010400 	.word	0x40010400

0800ade8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ade8:	b480      	push	{r7}
 800adea:	b087      	sub	sp, #28
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a1b      	ldr	r3, [r3, #32]
 800adf6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6a1b      	ldr	r3, [r3, #32]
 800ae02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	4b1c      	ldr	r3, [pc, #112]	; (800ae84 <TIM_OC6_SetConfig+0x9c>)
 800ae14:	4013      	ands	r3, r2
 800ae16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	021b      	lsls	r3, r3, #8
 800ae1e:	68fa      	ldr	r2, [r7, #12]
 800ae20:	4313      	orrs	r3, r2
 800ae22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ae2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	689b      	ldr	r3, [r3, #8]
 800ae30:	051b      	lsls	r3, r3, #20
 800ae32:	693a      	ldr	r2, [r7, #16]
 800ae34:	4313      	orrs	r3, r2
 800ae36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4a13      	ldr	r2, [pc, #76]	; (800ae88 <TIM_OC6_SetConfig+0xa0>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d003      	beq.n	800ae48 <TIM_OC6_SetConfig+0x60>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4a12      	ldr	r2, [pc, #72]	; (800ae8c <TIM_OC6_SetConfig+0xa4>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d109      	bne.n	800ae5c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	695b      	ldr	r3, [r3, #20]
 800ae54:	029b      	lsls	r3, r3, #10
 800ae56:	697a      	ldr	r2, [r7, #20]
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	697a      	ldr	r2, [r7, #20]
 800ae60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	68fa      	ldr	r2, [r7, #12]
 800ae66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	685a      	ldr	r2, [r3, #4]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	693a      	ldr	r2, [r7, #16]
 800ae74:	621a      	str	r2, [r3, #32]
}
 800ae76:	bf00      	nop
 800ae78:	371c      	adds	r7, #28
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr
 800ae82:	bf00      	nop
 800ae84:	feff8fff 	.word	0xfeff8fff
 800ae88:	40010000 	.word	0x40010000
 800ae8c:	40010400 	.word	0x40010400

0800ae90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b087      	sub	sp, #28
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	60f8      	str	r0, [r7, #12]
 800ae98:	60b9      	str	r1, [r7, #8]
 800ae9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	6a1b      	ldr	r3, [r3, #32]
 800aea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	6a1b      	ldr	r3, [r3, #32]
 800aea6:	f023 0201 	bic.w	r2, r3, #1
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	699b      	ldr	r3, [r3, #24]
 800aeb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aeba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	011b      	lsls	r3, r3, #4
 800aec0:	693a      	ldr	r2, [r7, #16]
 800aec2:	4313      	orrs	r3, r2
 800aec4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	f023 030a 	bic.w	r3, r3, #10
 800aecc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aece:	697a      	ldr	r2, [r7, #20]
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	4313      	orrs	r3, r2
 800aed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	693a      	ldr	r2, [r7, #16]
 800aeda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	697a      	ldr	r2, [r7, #20]
 800aee0:	621a      	str	r2, [r3, #32]
}
 800aee2:	bf00      	nop
 800aee4:	371c      	adds	r7, #28
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr

0800aeee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aeee:	b480      	push	{r7}
 800aef0:	b087      	sub	sp, #28
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	60f8      	str	r0, [r7, #12]
 800aef6:	60b9      	str	r1, [r7, #8]
 800aef8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	6a1b      	ldr	r3, [r3, #32]
 800aefe:	f023 0210 	bic.w	r2, r3, #16
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	699b      	ldr	r3, [r3, #24]
 800af0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	6a1b      	ldr	r3, [r3, #32]
 800af10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	031b      	lsls	r3, r3, #12
 800af1e:	697a      	ldr	r2, [r7, #20]
 800af20:	4313      	orrs	r3, r2
 800af22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	011b      	lsls	r3, r3, #4
 800af30:	693a      	ldr	r2, [r7, #16]
 800af32:	4313      	orrs	r3, r2
 800af34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	697a      	ldr	r2, [r7, #20]
 800af3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	693a      	ldr	r2, [r7, #16]
 800af40:	621a      	str	r2, [r3, #32]
}
 800af42:	bf00      	nop
 800af44:	371c      	adds	r7, #28
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr

0800af4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af4e:	b480      	push	{r7}
 800af50:	b085      	sub	sp, #20
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
 800af56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af66:	683a      	ldr	r2, [r7, #0]
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	4313      	orrs	r3, r2
 800af6c:	f043 0307 	orr.w	r3, r3, #7
 800af70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	68fa      	ldr	r2, [r7, #12]
 800af76:	609a      	str	r2, [r3, #8]
}
 800af78:	bf00      	nop
 800af7a:	3714      	adds	r7, #20
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af84:	b480      	push	{r7}
 800af86:	b087      	sub	sp, #28
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	607a      	str	r2, [r7, #4]
 800af90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	021a      	lsls	r2, r3, #8
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	431a      	orrs	r2, r3
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	4313      	orrs	r3, r2
 800afac:	697a      	ldr	r2, [r7, #20]
 800afae:	4313      	orrs	r3, r2
 800afb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	697a      	ldr	r2, [r7, #20]
 800afb6:	609a      	str	r2, [r3, #8]
}
 800afb8:	bf00      	nop
 800afba:	371c      	adds	r7, #28
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d101      	bne.n	800afdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800afd8:	2302      	movs	r3, #2
 800afda:	e06d      	b.n	800b0b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2201      	movs	r2, #1
 800afe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2202      	movs	r2, #2
 800afe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	689b      	ldr	r3, [r3, #8]
 800affa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4a30      	ldr	r2, [pc, #192]	; (800b0c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d004      	beq.n	800b010 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a2f      	ldr	r2, [pc, #188]	; (800b0c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d108      	bne.n	800b022 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b016:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	68fa      	ldr	r2, [r7, #12]
 800b01e:	4313      	orrs	r3, r2
 800b020:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b028:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	4313      	orrs	r3, r2
 800b032:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	68fa      	ldr	r2, [r7, #12]
 800b03a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4a20      	ldr	r2, [pc, #128]	; (800b0c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d022      	beq.n	800b08c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b04e:	d01d      	beq.n	800b08c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4a1d      	ldr	r2, [pc, #116]	; (800b0cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d018      	beq.n	800b08c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4a1c      	ldr	r2, [pc, #112]	; (800b0d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d013      	beq.n	800b08c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4a1a      	ldr	r2, [pc, #104]	; (800b0d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d00e      	beq.n	800b08c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	4a15      	ldr	r2, [pc, #84]	; (800b0c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d009      	beq.n	800b08c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a16      	ldr	r2, [pc, #88]	; (800b0d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d004      	beq.n	800b08c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4a15      	ldr	r2, [pc, #84]	; (800b0dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d10c      	bne.n	800b0a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b092:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	68ba      	ldr	r2, [r7, #8]
 800b09a:	4313      	orrs	r3, r2
 800b09c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	68ba      	ldr	r2, [r7, #8]
 800b0a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0b6:	2300      	movs	r3, #0
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3714      	adds	r7, #20
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr
 800b0c4:	40010000 	.word	0x40010000
 800b0c8:	40010400 	.word	0x40010400
 800b0cc:	40000400 	.word	0x40000400
 800b0d0:	40000800 	.word	0x40000800
 800b0d4:	40000c00 	.word	0x40000c00
 800b0d8:	40014000 	.word	0x40014000
 800b0dc:	40001800 	.word	0x40001800

0800b0e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b085      	sub	sp, #20
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d101      	bne.n	800b0fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b0f8:	2302      	movs	r3, #2
 800b0fa:	e065      	b.n	800b1c8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	4313      	orrs	r3, r2
 800b110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	4313      	orrs	r3, r2
 800b11e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	4313      	orrs	r3, r2
 800b12c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4313      	orrs	r3, r2
 800b13a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	691b      	ldr	r3, [r3, #16]
 800b146:	4313      	orrs	r3, r2
 800b148:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	695b      	ldr	r3, [r3, #20]
 800b154:	4313      	orrs	r3, r2
 800b156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b162:	4313      	orrs	r3, r2
 800b164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	699b      	ldr	r3, [r3, #24]
 800b170:	041b      	lsls	r3, r3, #16
 800b172:	4313      	orrs	r3, r2
 800b174:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4a16      	ldr	r2, [pc, #88]	; (800b1d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d004      	beq.n	800b18a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4a14      	ldr	r2, [pc, #80]	; (800b1d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d115      	bne.n	800b1b6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b194:	051b      	lsls	r3, r3, #20
 800b196:	4313      	orrs	r3, r2
 800b198:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	69db      	ldr	r3, [r3, #28]
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	6a1b      	ldr	r3, [r3, #32]
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	68fa      	ldr	r2, [r7, #12]
 800b1bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b1c6:	2300      	movs	r3, #0
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3714      	adds	r7, #20
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr
 800b1d4:	40010000 	.word	0x40010000
 800b1d8:	40010400 	.word	0x40010400

0800b1dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b082      	sub	sp, #8
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d101      	bne.n	800b1ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e040      	b.n	800b270 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d106      	bne.n	800b204 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f7f8 f820 	bl	8003244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2224      	movs	r2, #36	; 0x24
 800b208:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f022 0201 	bic.w	r2, r2, #1
 800b218:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 f8c0 	bl	800b3a0 <UART_SetConfig>
 800b220:	4603      	mov	r3, r0
 800b222:	2b01      	cmp	r3, #1
 800b224:	d101      	bne.n	800b22a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b226:	2301      	movs	r3, #1
 800b228:	e022      	b.n	800b270 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d002      	beq.n	800b238 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 fb16 	bl	800b864 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	685a      	ldr	r2, [r3, #4]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b246:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	689a      	ldr	r2, [r3, #8]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b256:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f042 0201 	orr.w	r2, r2, #1
 800b266:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 fb9d 	bl	800b9a8 <UART_CheckIdleState>
 800b26e:	4603      	mov	r3, r0
}
 800b270:	4618      	mov	r0, r3
 800b272:	3708      	adds	r7, #8
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b08a      	sub	sp, #40	; 0x28
 800b27c:	af02      	add	r7, sp, #8
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	603b      	str	r3, [r7, #0]
 800b284:	4613      	mov	r3, r2
 800b286:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b28c:	2b20      	cmp	r3, #32
 800b28e:	f040 8081 	bne.w	800b394 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d002      	beq.n	800b29e <HAL_UART_Transmit+0x26>
 800b298:	88fb      	ldrh	r3, [r7, #6]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d101      	bne.n	800b2a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b29e:	2301      	movs	r3, #1
 800b2a0:	e079      	b.n	800b396 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d101      	bne.n	800b2b0 <HAL_UART_Transmit+0x38>
 800b2ac:	2302      	movs	r3, #2
 800b2ae:	e072      	b.n	800b396 <HAL_UART_Transmit+0x11e>
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2221      	movs	r2, #33	; 0x21
 800b2c4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b2c6:	f7f8 fa5f 	bl	8003788 <HAL_GetTick>
 800b2ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	88fa      	ldrh	r2, [r7, #6]
 800b2d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	88fa      	ldrh	r2, [r7, #6]
 800b2d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2e4:	d108      	bne.n	800b2f8 <HAL_UART_Transmit+0x80>
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	691b      	ldr	r3, [r3, #16]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d104      	bne.n	800b2f8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	61bb      	str	r3, [r7, #24]
 800b2f6:	e003      	b.n	800b300 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2200      	movs	r2, #0
 800b304:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800b308:	e02c      	b.n	800b364 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	9300      	str	r3, [sp, #0]
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	2200      	movs	r2, #0
 800b312:	2180      	movs	r1, #128	; 0x80
 800b314:	68f8      	ldr	r0, [r7, #12]
 800b316:	f000 fb7a 	bl	800ba0e <UART_WaitOnFlagUntilTimeout>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d001      	beq.n	800b324 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800b320:	2303      	movs	r3, #3
 800b322:	e038      	b.n	800b396 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800b324:	69fb      	ldr	r3, [r7, #28]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d10b      	bne.n	800b342 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	881b      	ldrh	r3, [r3, #0]
 800b32e:	461a      	mov	r2, r3
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b338:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	3302      	adds	r3, #2
 800b33e:	61bb      	str	r3, [r7, #24]
 800b340:	e007      	b.n	800b352 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b342:	69fb      	ldr	r3, [r7, #28]
 800b344:	781a      	ldrb	r2, [r3, #0]
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b34c:	69fb      	ldr	r3, [r7, #28]
 800b34e:	3301      	adds	r3, #1
 800b350:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b358:	b29b      	uxth	r3, r3
 800b35a:	3b01      	subs	r3, #1
 800b35c:	b29a      	uxth	r2, r3
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d1cc      	bne.n	800b30a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	9300      	str	r3, [sp, #0]
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	2200      	movs	r2, #0
 800b378:	2140      	movs	r1, #64	; 0x40
 800b37a:	68f8      	ldr	r0, [r7, #12]
 800b37c:	f000 fb47 	bl	800ba0e <UART_WaitOnFlagUntilTimeout>
 800b380:	4603      	mov	r3, r0
 800b382:	2b00      	cmp	r3, #0
 800b384:	d001      	beq.n	800b38a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800b386:	2303      	movs	r3, #3
 800b388:	e005      	b.n	800b396 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2220      	movs	r2, #32
 800b38e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b390:	2300      	movs	r3, #0
 800b392:	e000      	b.n	800b396 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800b394:	2302      	movs	r3, #2
  }
}
 800b396:	4618      	mov	r0, r3
 800b398:	3720      	adds	r7, #32
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
	...

0800b3a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b088      	sub	sp, #32
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	689a      	ldr	r2, [r3, #8]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	691b      	ldr	r3, [r3, #16]
 800b3b4:	431a      	orrs	r2, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	695b      	ldr	r3, [r3, #20]
 800b3ba:	431a      	orrs	r2, r3
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	69db      	ldr	r3, [r3, #28]
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	4ba7      	ldr	r3, [pc, #668]	; (800b668 <UART_SetConfig+0x2c8>)
 800b3cc:	4013      	ands	r3, r2
 800b3ce:	687a      	ldr	r2, [r7, #4]
 800b3d0:	6812      	ldr	r2, [r2, #0]
 800b3d2:	6979      	ldr	r1, [r7, #20]
 800b3d4:	430b      	orrs	r3, r1
 800b3d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	68da      	ldr	r2, [r3, #12]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	430a      	orrs	r2, r1
 800b3ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	699b      	ldr	r3, [r3, #24]
 800b3f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6a1b      	ldr	r3, [r3, #32]
 800b3f8:	697a      	ldr	r2, [r7, #20]
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	697a      	ldr	r2, [r7, #20]
 800b40e:	430a      	orrs	r2, r1
 800b410:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a95      	ldr	r2, [pc, #596]	; (800b66c <UART_SetConfig+0x2cc>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d120      	bne.n	800b45e <UART_SetConfig+0xbe>
 800b41c:	4b94      	ldr	r3, [pc, #592]	; (800b670 <UART_SetConfig+0x2d0>)
 800b41e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b422:	f003 0303 	and.w	r3, r3, #3
 800b426:	2b03      	cmp	r3, #3
 800b428:	d816      	bhi.n	800b458 <UART_SetConfig+0xb8>
 800b42a:	a201      	add	r2, pc, #4	; (adr r2, 800b430 <UART_SetConfig+0x90>)
 800b42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b430:	0800b441 	.word	0x0800b441
 800b434:	0800b44d 	.word	0x0800b44d
 800b438:	0800b447 	.word	0x0800b447
 800b43c:	0800b453 	.word	0x0800b453
 800b440:	2301      	movs	r3, #1
 800b442:	77fb      	strb	r3, [r7, #31]
 800b444:	e14f      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b446:	2302      	movs	r3, #2
 800b448:	77fb      	strb	r3, [r7, #31]
 800b44a:	e14c      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b44c:	2304      	movs	r3, #4
 800b44e:	77fb      	strb	r3, [r7, #31]
 800b450:	e149      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b452:	2308      	movs	r3, #8
 800b454:	77fb      	strb	r3, [r7, #31]
 800b456:	e146      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b458:	2310      	movs	r3, #16
 800b45a:	77fb      	strb	r3, [r7, #31]
 800b45c:	e143      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a84      	ldr	r2, [pc, #528]	; (800b674 <UART_SetConfig+0x2d4>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d132      	bne.n	800b4ce <UART_SetConfig+0x12e>
 800b468:	4b81      	ldr	r3, [pc, #516]	; (800b670 <UART_SetConfig+0x2d0>)
 800b46a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b46e:	f003 030c 	and.w	r3, r3, #12
 800b472:	2b0c      	cmp	r3, #12
 800b474:	d828      	bhi.n	800b4c8 <UART_SetConfig+0x128>
 800b476:	a201      	add	r2, pc, #4	; (adr r2, 800b47c <UART_SetConfig+0xdc>)
 800b478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b47c:	0800b4b1 	.word	0x0800b4b1
 800b480:	0800b4c9 	.word	0x0800b4c9
 800b484:	0800b4c9 	.word	0x0800b4c9
 800b488:	0800b4c9 	.word	0x0800b4c9
 800b48c:	0800b4bd 	.word	0x0800b4bd
 800b490:	0800b4c9 	.word	0x0800b4c9
 800b494:	0800b4c9 	.word	0x0800b4c9
 800b498:	0800b4c9 	.word	0x0800b4c9
 800b49c:	0800b4b7 	.word	0x0800b4b7
 800b4a0:	0800b4c9 	.word	0x0800b4c9
 800b4a4:	0800b4c9 	.word	0x0800b4c9
 800b4a8:	0800b4c9 	.word	0x0800b4c9
 800b4ac:	0800b4c3 	.word	0x0800b4c3
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	77fb      	strb	r3, [r7, #31]
 800b4b4:	e117      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b4b6:	2302      	movs	r3, #2
 800b4b8:	77fb      	strb	r3, [r7, #31]
 800b4ba:	e114      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b4bc:	2304      	movs	r3, #4
 800b4be:	77fb      	strb	r3, [r7, #31]
 800b4c0:	e111      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b4c2:	2308      	movs	r3, #8
 800b4c4:	77fb      	strb	r3, [r7, #31]
 800b4c6:	e10e      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b4c8:	2310      	movs	r3, #16
 800b4ca:	77fb      	strb	r3, [r7, #31]
 800b4cc:	e10b      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4a69      	ldr	r2, [pc, #420]	; (800b678 <UART_SetConfig+0x2d8>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d120      	bne.n	800b51a <UART_SetConfig+0x17a>
 800b4d8:	4b65      	ldr	r3, [pc, #404]	; (800b670 <UART_SetConfig+0x2d0>)
 800b4da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b4e2:	2b30      	cmp	r3, #48	; 0x30
 800b4e4:	d013      	beq.n	800b50e <UART_SetConfig+0x16e>
 800b4e6:	2b30      	cmp	r3, #48	; 0x30
 800b4e8:	d814      	bhi.n	800b514 <UART_SetConfig+0x174>
 800b4ea:	2b20      	cmp	r3, #32
 800b4ec:	d009      	beq.n	800b502 <UART_SetConfig+0x162>
 800b4ee:	2b20      	cmp	r3, #32
 800b4f0:	d810      	bhi.n	800b514 <UART_SetConfig+0x174>
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d002      	beq.n	800b4fc <UART_SetConfig+0x15c>
 800b4f6:	2b10      	cmp	r3, #16
 800b4f8:	d006      	beq.n	800b508 <UART_SetConfig+0x168>
 800b4fa:	e00b      	b.n	800b514 <UART_SetConfig+0x174>
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	77fb      	strb	r3, [r7, #31]
 800b500:	e0f1      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b502:	2302      	movs	r3, #2
 800b504:	77fb      	strb	r3, [r7, #31]
 800b506:	e0ee      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b508:	2304      	movs	r3, #4
 800b50a:	77fb      	strb	r3, [r7, #31]
 800b50c:	e0eb      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b50e:	2308      	movs	r3, #8
 800b510:	77fb      	strb	r3, [r7, #31]
 800b512:	e0e8      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b514:	2310      	movs	r3, #16
 800b516:	77fb      	strb	r3, [r7, #31]
 800b518:	e0e5      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a57      	ldr	r2, [pc, #348]	; (800b67c <UART_SetConfig+0x2dc>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d120      	bne.n	800b566 <UART_SetConfig+0x1c6>
 800b524:	4b52      	ldr	r3, [pc, #328]	; (800b670 <UART_SetConfig+0x2d0>)
 800b526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b52a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b52e:	2bc0      	cmp	r3, #192	; 0xc0
 800b530:	d013      	beq.n	800b55a <UART_SetConfig+0x1ba>
 800b532:	2bc0      	cmp	r3, #192	; 0xc0
 800b534:	d814      	bhi.n	800b560 <UART_SetConfig+0x1c0>
 800b536:	2b80      	cmp	r3, #128	; 0x80
 800b538:	d009      	beq.n	800b54e <UART_SetConfig+0x1ae>
 800b53a:	2b80      	cmp	r3, #128	; 0x80
 800b53c:	d810      	bhi.n	800b560 <UART_SetConfig+0x1c0>
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d002      	beq.n	800b548 <UART_SetConfig+0x1a8>
 800b542:	2b40      	cmp	r3, #64	; 0x40
 800b544:	d006      	beq.n	800b554 <UART_SetConfig+0x1b4>
 800b546:	e00b      	b.n	800b560 <UART_SetConfig+0x1c0>
 800b548:	2300      	movs	r3, #0
 800b54a:	77fb      	strb	r3, [r7, #31]
 800b54c:	e0cb      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b54e:	2302      	movs	r3, #2
 800b550:	77fb      	strb	r3, [r7, #31]
 800b552:	e0c8      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b554:	2304      	movs	r3, #4
 800b556:	77fb      	strb	r3, [r7, #31]
 800b558:	e0c5      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b55a:	2308      	movs	r3, #8
 800b55c:	77fb      	strb	r3, [r7, #31]
 800b55e:	e0c2      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b560:	2310      	movs	r3, #16
 800b562:	77fb      	strb	r3, [r7, #31]
 800b564:	e0bf      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4a45      	ldr	r2, [pc, #276]	; (800b680 <UART_SetConfig+0x2e0>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d125      	bne.n	800b5bc <UART_SetConfig+0x21c>
 800b570:	4b3f      	ldr	r3, [pc, #252]	; (800b670 <UART_SetConfig+0x2d0>)
 800b572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b57a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b57e:	d017      	beq.n	800b5b0 <UART_SetConfig+0x210>
 800b580:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b584:	d817      	bhi.n	800b5b6 <UART_SetConfig+0x216>
 800b586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b58a:	d00b      	beq.n	800b5a4 <UART_SetConfig+0x204>
 800b58c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b590:	d811      	bhi.n	800b5b6 <UART_SetConfig+0x216>
 800b592:	2b00      	cmp	r3, #0
 800b594:	d003      	beq.n	800b59e <UART_SetConfig+0x1fe>
 800b596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b59a:	d006      	beq.n	800b5aa <UART_SetConfig+0x20a>
 800b59c:	e00b      	b.n	800b5b6 <UART_SetConfig+0x216>
 800b59e:	2300      	movs	r3, #0
 800b5a0:	77fb      	strb	r3, [r7, #31]
 800b5a2:	e0a0      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b5a4:	2302      	movs	r3, #2
 800b5a6:	77fb      	strb	r3, [r7, #31]
 800b5a8:	e09d      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b5aa:	2304      	movs	r3, #4
 800b5ac:	77fb      	strb	r3, [r7, #31]
 800b5ae:	e09a      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b5b0:	2308      	movs	r3, #8
 800b5b2:	77fb      	strb	r3, [r7, #31]
 800b5b4:	e097      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b5b6:	2310      	movs	r3, #16
 800b5b8:	77fb      	strb	r3, [r7, #31]
 800b5ba:	e094      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a30      	ldr	r2, [pc, #192]	; (800b684 <UART_SetConfig+0x2e4>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d125      	bne.n	800b612 <UART_SetConfig+0x272>
 800b5c6:	4b2a      	ldr	r3, [pc, #168]	; (800b670 <UART_SetConfig+0x2d0>)
 800b5c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b5d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b5d4:	d017      	beq.n	800b606 <UART_SetConfig+0x266>
 800b5d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b5da:	d817      	bhi.n	800b60c <UART_SetConfig+0x26c>
 800b5dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5e0:	d00b      	beq.n	800b5fa <UART_SetConfig+0x25a>
 800b5e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5e6:	d811      	bhi.n	800b60c <UART_SetConfig+0x26c>
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d003      	beq.n	800b5f4 <UART_SetConfig+0x254>
 800b5ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5f0:	d006      	beq.n	800b600 <UART_SetConfig+0x260>
 800b5f2:	e00b      	b.n	800b60c <UART_SetConfig+0x26c>
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	77fb      	strb	r3, [r7, #31]
 800b5f8:	e075      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b5fa:	2302      	movs	r3, #2
 800b5fc:	77fb      	strb	r3, [r7, #31]
 800b5fe:	e072      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b600:	2304      	movs	r3, #4
 800b602:	77fb      	strb	r3, [r7, #31]
 800b604:	e06f      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b606:	2308      	movs	r3, #8
 800b608:	77fb      	strb	r3, [r7, #31]
 800b60a:	e06c      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b60c:	2310      	movs	r3, #16
 800b60e:	77fb      	strb	r3, [r7, #31]
 800b610:	e069      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	4a1c      	ldr	r2, [pc, #112]	; (800b688 <UART_SetConfig+0x2e8>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d137      	bne.n	800b68c <UART_SetConfig+0x2ec>
 800b61c:	4b14      	ldr	r3, [pc, #80]	; (800b670 <UART_SetConfig+0x2d0>)
 800b61e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b622:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b626:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b62a:	d017      	beq.n	800b65c <UART_SetConfig+0x2bc>
 800b62c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b630:	d817      	bhi.n	800b662 <UART_SetConfig+0x2c2>
 800b632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b636:	d00b      	beq.n	800b650 <UART_SetConfig+0x2b0>
 800b638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b63c:	d811      	bhi.n	800b662 <UART_SetConfig+0x2c2>
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d003      	beq.n	800b64a <UART_SetConfig+0x2aa>
 800b642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b646:	d006      	beq.n	800b656 <UART_SetConfig+0x2b6>
 800b648:	e00b      	b.n	800b662 <UART_SetConfig+0x2c2>
 800b64a:	2300      	movs	r3, #0
 800b64c:	77fb      	strb	r3, [r7, #31]
 800b64e:	e04a      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b650:	2302      	movs	r3, #2
 800b652:	77fb      	strb	r3, [r7, #31]
 800b654:	e047      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b656:	2304      	movs	r3, #4
 800b658:	77fb      	strb	r3, [r7, #31]
 800b65a:	e044      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b65c:	2308      	movs	r3, #8
 800b65e:	77fb      	strb	r3, [r7, #31]
 800b660:	e041      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b662:	2310      	movs	r3, #16
 800b664:	77fb      	strb	r3, [r7, #31]
 800b666:	e03e      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b668:	efff69f3 	.word	0xefff69f3
 800b66c:	40011000 	.word	0x40011000
 800b670:	40023800 	.word	0x40023800
 800b674:	40004400 	.word	0x40004400
 800b678:	40004800 	.word	0x40004800
 800b67c:	40004c00 	.word	0x40004c00
 800b680:	40005000 	.word	0x40005000
 800b684:	40011400 	.word	0x40011400
 800b688:	40007800 	.word	0x40007800
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a71      	ldr	r2, [pc, #452]	; (800b858 <UART_SetConfig+0x4b8>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d125      	bne.n	800b6e2 <UART_SetConfig+0x342>
 800b696:	4b71      	ldr	r3, [pc, #452]	; (800b85c <UART_SetConfig+0x4bc>)
 800b698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b69c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b6a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b6a4:	d017      	beq.n	800b6d6 <UART_SetConfig+0x336>
 800b6a6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b6aa:	d817      	bhi.n	800b6dc <UART_SetConfig+0x33c>
 800b6ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6b0:	d00b      	beq.n	800b6ca <UART_SetConfig+0x32a>
 800b6b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6b6:	d811      	bhi.n	800b6dc <UART_SetConfig+0x33c>
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d003      	beq.n	800b6c4 <UART_SetConfig+0x324>
 800b6bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6c0:	d006      	beq.n	800b6d0 <UART_SetConfig+0x330>
 800b6c2:	e00b      	b.n	800b6dc <UART_SetConfig+0x33c>
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	77fb      	strb	r3, [r7, #31]
 800b6c8:	e00d      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b6ca:	2302      	movs	r3, #2
 800b6cc:	77fb      	strb	r3, [r7, #31]
 800b6ce:	e00a      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b6d0:	2304      	movs	r3, #4
 800b6d2:	77fb      	strb	r3, [r7, #31]
 800b6d4:	e007      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b6d6:	2308      	movs	r3, #8
 800b6d8:	77fb      	strb	r3, [r7, #31]
 800b6da:	e004      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b6dc:	2310      	movs	r3, #16
 800b6de:	77fb      	strb	r3, [r7, #31]
 800b6e0:	e001      	b.n	800b6e6 <UART_SetConfig+0x346>
 800b6e2:	2310      	movs	r3, #16
 800b6e4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	69db      	ldr	r3, [r3, #28]
 800b6ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6ee:	d15b      	bne.n	800b7a8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800b6f0:	7ffb      	ldrb	r3, [r7, #31]
 800b6f2:	2b08      	cmp	r3, #8
 800b6f4:	d827      	bhi.n	800b746 <UART_SetConfig+0x3a6>
 800b6f6:	a201      	add	r2, pc, #4	; (adr r2, 800b6fc <UART_SetConfig+0x35c>)
 800b6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6fc:	0800b721 	.word	0x0800b721
 800b700:	0800b729 	.word	0x0800b729
 800b704:	0800b731 	.word	0x0800b731
 800b708:	0800b747 	.word	0x0800b747
 800b70c:	0800b737 	.word	0x0800b737
 800b710:	0800b747 	.word	0x0800b747
 800b714:	0800b747 	.word	0x0800b747
 800b718:	0800b747 	.word	0x0800b747
 800b71c:	0800b73f 	.word	0x0800b73f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b720:	f7fc f8ae 	bl	8007880 <HAL_RCC_GetPCLK1Freq>
 800b724:	61b8      	str	r0, [r7, #24]
        break;
 800b726:	e013      	b.n	800b750 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b728:	f7fc f8be 	bl	80078a8 <HAL_RCC_GetPCLK2Freq>
 800b72c:	61b8      	str	r0, [r7, #24]
        break;
 800b72e:	e00f      	b.n	800b750 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b730:	4b4b      	ldr	r3, [pc, #300]	; (800b860 <UART_SetConfig+0x4c0>)
 800b732:	61bb      	str	r3, [r7, #24]
        break;
 800b734:	e00c      	b.n	800b750 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b736:	f7fb ffe1 	bl	80076fc <HAL_RCC_GetSysClockFreq>
 800b73a:	61b8      	str	r0, [r7, #24]
        break;
 800b73c:	e008      	b.n	800b750 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b73e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b742:	61bb      	str	r3, [r7, #24]
        break;
 800b744:	e004      	b.n	800b750 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800b746:	2300      	movs	r3, #0
 800b748:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b74a:	2301      	movs	r3, #1
 800b74c:	77bb      	strb	r3, [r7, #30]
        break;
 800b74e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d074      	beq.n	800b840 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b756:	69bb      	ldr	r3, [r7, #24]
 800b758:	005a      	lsls	r2, r3, #1
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	085b      	lsrs	r3, r3, #1
 800b760:	441a      	add	r2, r3
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	fbb2 f3f3 	udiv	r3, r2, r3
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	2b0f      	cmp	r3, #15
 800b772:	d916      	bls.n	800b7a2 <UART_SetConfig+0x402>
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b77a:	d212      	bcs.n	800b7a2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	b29b      	uxth	r3, r3
 800b780:	f023 030f 	bic.w	r3, r3, #15
 800b784:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	085b      	lsrs	r3, r3, #1
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	f003 0307 	and.w	r3, r3, #7
 800b790:	b29a      	uxth	r2, r3
 800b792:	89fb      	ldrh	r3, [r7, #14]
 800b794:	4313      	orrs	r3, r2
 800b796:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	89fa      	ldrh	r2, [r7, #14]
 800b79e:	60da      	str	r2, [r3, #12]
 800b7a0:	e04e      	b.n	800b840 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	77bb      	strb	r3, [r7, #30]
 800b7a6:	e04b      	b.n	800b840 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b7a8:	7ffb      	ldrb	r3, [r7, #31]
 800b7aa:	2b08      	cmp	r3, #8
 800b7ac:	d827      	bhi.n	800b7fe <UART_SetConfig+0x45e>
 800b7ae:	a201      	add	r2, pc, #4	; (adr r2, 800b7b4 <UART_SetConfig+0x414>)
 800b7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7b4:	0800b7d9 	.word	0x0800b7d9
 800b7b8:	0800b7e1 	.word	0x0800b7e1
 800b7bc:	0800b7e9 	.word	0x0800b7e9
 800b7c0:	0800b7ff 	.word	0x0800b7ff
 800b7c4:	0800b7ef 	.word	0x0800b7ef
 800b7c8:	0800b7ff 	.word	0x0800b7ff
 800b7cc:	0800b7ff 	.word	0x0800b7ff
 800b7d0:	0800b7ff 	.word	0x0800b7ff
 800b7d4:	0800b7f7 	.word	0x0800b7f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7d8:	f7fc f852 	bl	8007880 <HAL_RCC_GetPCLK1Freq>
 800b7dc:	61b8      	str	r0, [r7, #24]
        break;
 800b7de:	e013      	b.n	800b808 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7e0:	f7fc f862 	bl	80078a8 <HAL_RCC_GetPCLK2Freq>
 800b7e4:	61b8      	str	r0, [r7, #24]
        break;
 800b7e6:	e00f      	b.n	800b808 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b7e8:	4b1d      	ldr	r3, [pc, #116]	; (800b860 <UART_SetConfig+0x4c0>)
 800b7ea:	61bb      	str	r3, [r7, #24]
        break;
 800b7ec:	e00c      	b.n	800b808 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7ee:	f7fb ff85 	bl	80076fc <HAL_RCC_GetSysClockFreq>
 800b7f2:	61b8      	str	r0, [r7, #24]
        break;
 800b7f4:	e008      	b.n	800b808 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7fa:	61bb      	str	r3, [r7, #24]
        break;
 800b7fc:	e004      	b.n	800b808 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800b7fe:	2300      	movs	r3, #0
 800b800:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b802:	2301      	movs	r3, #1
 800b804:	77bb      	strb	r3, [r7, #30]
        break;
 800b806:	bf00      	nop
    }

    if (pclk != 0U)
 800b808:	69bb      	ldr	r3, [r7, #24]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d018      	beq.n	800b840 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	085a      	lsrs	r2, r3, #1
 800b814:	69bb      	ldr	r3, [r7, #24]
 800b816:	441a      	add	r2, r3
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b820:	b29b      	uxth	r3, r3
 800b822:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	2b0f      	cmp	r3, #15
 800b828:	d908      	bls.n	800b83c <UART_SetConfig+0x49c>
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b830:	d204      	bcs.n	800b83c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	693a      	ldr	r2, [r7, #16]
 800b838:	60da      	str	r2, [r3, #12]
 800b83a:	e001      	b.n	800b840 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b83c:	2301      	movs	r3, #1
 800b83e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2200      	movs	r2, #0
 800b844:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2200      	movs	r2, #0
 800b84a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b84c:	7fbb      	ldrb	r3, [r7, #30]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3720      	adds	r7, #32
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	40007c00 	.word	0x40007c00
 800b85c:	40023800 	.word	0x40023800
 800b860:	00f42400 	.word	0x00f42400

0800b864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b864:	b480      	push	{r7}
 800b866:	b083      	sub	sp, #12
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b870:	f003 0301 	and.w	r3, r3, #1
 800b874:	2b00      	cmp	r3, #0
 800b876:	d00a      	beq.n	800b88e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	430a      	orrs	r2, r1
 800b88c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b892:	f003 0302 	and.w	r3, r3, #2
 800b896:	2b00      	cmp	r3, #0
 800b898:	d00a      	beq.n	800b8b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	430a      	orrs	r2, r1
 800b8ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b4:	f003 0304 	and.w	r3, r3, #4
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d00a      	beq.n	800b8d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	430a      	orrs	r2, r1
 800b8d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d6:	f003 0308 	and.w	r3, r3, #8
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d00a      	beq.n	800b8f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	430a      	orrs	r2, r1
 800b8f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f8:	f003 0310 	and.w	r3, r3, #16
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d00a      	beq.n	800b916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	689b      	ldr	r3, [r3, #8]
 800b906:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	430a      	orrs	r2, r1
 800b914:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91a:	f003 0320 	and.w	r3, r3, #32
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d00a      	beq.n	800b938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	689b      	ldr	r3, [r3, #8]
 800b928:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	430a      	orrs	r2, r1
 800b936:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b93c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b940:	2b00      	cmp	r3, #0
 800b942:	d01a      	beq.n	800b97a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	430a      	orrs	r2, r1
 800b958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b95e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b962:	d10a      	bne.n	800b97a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	430a      	orrs	r2, r1
 800b978:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b982:	2b00      	cmp	r3, #0
 800b984:	d00a      	beq.n	800b99c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	430a      	orrs	r2, r1
 800b99a:	605a      	str	r2, [r3, #4]
  }
}
 800b99c:	bf00      	nop
 800b99e:	370c      	adds	r7, #12
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr

0800b9a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b086      	sub	sp, #24
 800b9ac:	af02      	add	r7, sp, #8
 800b9ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b9b8:	f7f7 fee6 	bl	8003788 <HAL_GetTick>
 800b9bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f003 0308 	and.w	r3, r3, #8
 800b9c8:	2b08      	cmp	r3, #8
 800b9ca:	d10e      	bne.n	800b9ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b9d0:	9300      	str	r3, [sp, #0]
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 f817 	bl	800ba0e <UART_WaitOnFlagUntilTimeout>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d001      	beq.n	800b9ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9e6:	2303      	movs	r3, #3
 800b9e8:	e00d      	b.n	800ba06 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2220      	movs	r2, #32
 800b9ee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2220      	movs	r2, #32
 800b9f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800ba04:	2300      	movs	r3, #0
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3710      	adds	r7, #16
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b084      	sub	sp, #16
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	60f8      	str	r0, [r7, #12]
 800ba16:	60b9      	str	r1, [r7, #8]
 800ba18:	603b      	str	r3, [r7, #0]
 800ba1a:	4613      	mov	r3, r2
 800ba1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba1e:	e05e      	b.n	800bade <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba20:	69bb      	ldr	r3, [r7, #24]
 800ba22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba26:	d05a      	beq.n	800bade <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba28:	f7f7 feae 	bl	8003788 <HAL_GetTick>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	69ba      	ldr	r2, [r7, #24]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d302      	bcc.n	800ba3e <UART_WaitOnFlagUntilTimeout+0x30>
 800ba38:	69bb      	ldr	r3, [r7, #24]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d11b      	bne.n	800ba76 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	681a      	ldr	r2, [r3, #0]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ba4c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	689a      	ldr	r2, [r3, #8]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f022 0201 	bic.w	r2, r2, #1
 800ba5c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	2220      	movs	r2, #32
 800ba62:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2220      	movs	r2, #32
 800ba68:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800ba72:	2303      	movs	r3, #3
 800ba74:	e043      	b.n	800bafe <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f003 0304 	and.w	r3, r3, #4
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d02c      	beq.n	800bade <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	69db      	ldr	r3, [r3, #28]
 800ba8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba92:	d124      	bne.n	800bade <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ba9c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800baac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	689a      	ldr	r2, [r3, #8]
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f022 0201 	bic.w	r2, r2, #1
 800babc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2220      	movs	r2, #32
 800bac2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2220      	movs	r2, #32
 800bac8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2220      	movs	r2, #32
 800bace:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2200      	movs	r2, #0
 800bad6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800bada:	2303      	movs	r3, #3
 800badc:	e00f      	b.n	800bafe <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	69da      	ldr	r2, [r3, #28]
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	4013      	ands	r3, r2
 800bae8:	68ba      	ldr	r2, [r7, #8]
 800baea:	429a      	cmp	r2, r3
 800baec:	bf0c      	ite	eq
 800baee:	2301      	moveq	r3, #1
 800baf0:	2300      	movne	r3, #0
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	461a      	mov	r2, r3
 800baf6:	79fb      	ldrb	r3, [r7, #7]
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d091      	beq.n	800ba20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bafc:	2300      	movs	r3, #0
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
	...

0800bb08 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b085      	sub	sp, #20
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800bb12:	2300      	movs	r3, #0
 800bb14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800bb16:	2300      	movs	r3, #0
 800bb18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2b01      	cmp	r3, #1
 800bb20:	d027      	beq.n	800bb72 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	4b2f      	ldr	r3, [pc, #188]	; (800bbe8 <FMC_SDRAM_Init+0xe0>)
 800bb2c:	4013      	ands	r3, r2
 800bb2e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bb38:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800bb3e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800bb44:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800bb4a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800bb50:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800bb56:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800bb5c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800bb62:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bb64:	68fa      	ldr	r2, [r7, #12]
 800bb66:	4313      	orrs	r3, r2
 800bb68:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	68fa      	ldr	r2, [r7, #12]
 800bb6e:	601a      	str	r2, [r3, #0]
 800bb70:	e032      	b.n	800bbd8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bb7e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bb88:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800bb8e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bb90:	68fa      	ldr	r2, [r7, #12]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800bb9c:	68ba      	ldr	r2, [r7, #8]
 800bb9e:	4b12      	ldr	r3, [pc, #72]	; (800bbe8 <FMC_SDRAM_Init+0xe0>)
 800bba0:	4013      	ands	r3, r2
 800bba2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bbac:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800bbb2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800bbb8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800bbbe:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800bbc4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bbc6:	68ba      	ldr	r2, [r7, #8]
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	68fa      	ldr	r2, [r7, #12]
 800bbd0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	68ba      	ldr	r2, [r7, #8]
 800bbd6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800bbd8:	2300      	movs	r3, #0
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3714      	adds	r7, #20
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr
 800bbe6:	bf00      	nop
 800bbe8:	ffff8000 	.word	0xffff8000

0800bbec <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b087      	sub	sp, #28
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	60b9      	str	r1, [r7, #8]
 800bbf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d02e      	beq.n	800bc64 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	689b      	ldr	r3, [r3, #8]
 800bc0a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bc12:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	3b01      	subs	r3, #1
 800bc20:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bc22:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	3b01      	subs	r3, #1
 800bc2a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bc2c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	3b01      	subs	r3, #1
 800bc34:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bc36:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	691b      	ldr	r3, [r3, #16]
 800bc3c:	3b01      	subs	r3, #1
 800bc3e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bc40:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	695b      	ldr	r3, [r3, #20]
 800bc46:	3b01      	subs	r3, #1
 800bc48:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bc4a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	699b      	ldr	r3, [r3, #24]
 800bc50:	3b01      	subs	r3, #1
 800bc52:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bc54:	4313      	orrs	r3, r2
 800bc56:	697a      	ldr	r2, [r7, #20]
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	697a      	ldr	r2, [r7, #20]
 800bc60:	609a      	str	r2, [r3, #8]
 800bc62:	e039      	b.n	800bcd8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	689b      	ldr	r3, [r3, #8]
 800bc68:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800bc6a:	697a      	ldr	r2, [r7, #20]
 800bc6c:	4b1e      	ldr	r3, [pc, #120]	; (800bce8 <FMC_SDRAM_Timing_Init+0xfc>)
 800bc6e:	4013      	ands	r3, r2
 800bc70:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	68db      	ldr	r3, [r3, #12]
 800bc76:	3b01      	subs	r3, #1
 800bc78:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	695b      	ldr	r3, [r3, #20]
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bc82:	4313      	orrs	r3, r2
 800bc84:	697a      	ldr	r2, [r7, #20]
 800bc86:	4313      	orrs	r3, r2
 800bc88:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	68db      	ldr	r3, [r3, #12]
 800bc8e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bc96:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	3b01      	subs	r3, #1
 800bca4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bca6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	689b      	ldr	r3, [r3, #8]
 800bcac:	3b01      	subs	r3, #1
 800bcae:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800bcb0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	691b      	ldr	r3, [r3, #16]
 800bcb6:	3b01      	subs	r3, #1
 800bcb8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bcba:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	699b      	ldr	r3, [r3, #24]
 800bcc0:	3b01      	subs	r3, #1
 800bcc2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	693a      	ldr	r2, [r7, #16]
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	697a      	ldr	r2, [r7, #20]
 800bcd0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	693a      	ldr	r2, [r7, #16]
 800bcd6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800bcd8:	2300      	movs	r3, #0
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	371c      	adds	r7, #28
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr
 800bce6:	bf00      	nop
 800bce8:	ff0f0fff 	.word	0xff0f0fff

0800bcec <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bcec:	b084      	sub	sp, #16
 800bcee:	b480      	push	{r7}
 800bcf0:	b085      	sub	sp, #20
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
 800bcf6:	f107 001c 	add.w	r0, r7, #28
 800bcfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bd02:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bd04:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bd06:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800bd0a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bd0e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800bd12:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bd14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bd16:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bd18:	68fa      	ldr	r2, [r7, #12]
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	685a      	ldr	r2, [r3, #4]
 800bd22:	4b07      	ldr	r3, [pc, #28]	; (800bd40 <SDMMC_Init+0x54>)
 800bd24:	4013      	ands	r3, r2
 800bd26:	68fa      	ldr	r2, [r7, #12]
 800bd28:	431a      	orrs	r2, r3
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bd2e:	2300      	movs	r3, #0
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3714      	adds	r7, #20
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	b004      	add	sp, #16
 800bd3c:	4770      	bx	lr
 800bd3e:	bf00      	nop
 800bd40:	ffff8100 	.word	0xffff8100

0800bd44 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b083      	sub	sp, #12
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	370c      	adds	r7, #12
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr

0800bd5e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800bd5e:	b480      	push	{r7}
 800bd60:	b083      	sub	sp, #12
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
 800bd66:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bd72:	2300      	movs	r3, #0
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	370c      	adds	r7, #12
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2203      	movs	r2, #3
 800bd8c:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800bd8e:	2002      	movs	r0, #2
 800bd90:	f7f7 fd06 	bl	80037a0 <HAL_Delay>
  
  return HAL_OK;
 800bd94:	2300      	movs	r3, #0
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3708      	adds	r7, #8
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800bd9e:	b480      	push	{r7}
 800bda0:	b083      	sub	sp, #12
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f003 0303 	and.w	r3, r3, #3
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	370c      	adds	r7, #12
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr
	...

0800bdbc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b085      	sub	sp, #20
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bdda:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bde0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bde6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bde8:	68fa      	ldr	r2, [r7, #12]
 800bdea:	4313      	orrs	r3, r2
 800bdec:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	68da      	ldr	r2, [r3, #12]
 800bdf2:	4b06      	ldr	r3, [pc, #24]	; (800be0c <SDMMC_SendCommand+0x50>)
 800bdf4:	4013      	ands	r3, r2
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	431a      	orrs	r2, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800bdfe:	2300      	movs	r3, #0
}
 800be00:	4618      	mov	r0, r3
 800be02:	3714      	adds	r7, #20
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr
 800be0c:	fffff000 	.word	0xfffff000

0800be10 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800be10:	b480      	push	{r7}
 800be12:	b083      	sub	sp, #12
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	691b      	ldr	r3, [r3, #16]
 800be1c:	b2db      	uxtb	r3, r3
}
 800be1e:	4618      	mov	r0, r3
 800be20:	370c      	adds	r7, #12
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr

0800be2a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800be2a:	b480      	push	{r7}
 800be2c:	b085      	sub	sp, #20
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
 800be32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	3314      	adds	r3, #20
 800be38:	461a      	mov	r2, r3
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	4413      	add	r3, r2
 800be3e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
}  
 800be44:	4618      	mov	r0, r3
 800be46:	3714      	adds	r7, #20
 800be48:	46bd      	mov	sp, r7
 800be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4e:	4770      	bx	lr

0800be50 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800be50:	b480      	push	{r7}
 800be52:	b085      	sub	sp, #20
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800be5a:	2300      	movs	r3, #0
 800be5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	681a      	ldr	r2, [r3, #0]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	685a      	ldr	r2, [r3, #4]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800be76:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800be7c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800be82:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	4313      	orrs	r3, r2
 800be88:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be8e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	431a      	orrs	r2, r3
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800be9a:	2300      	movs	r3, #0

}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3714      	adds	r7, #20
 800bea0:	46bd      	mov	sp, r7
 800bea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea6:	4770      	bx	lr

0800bea8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b088      	sub	sp, #32
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800beb6:	2310      	movs	r3, #16
 800beb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800beba:	2340      	movs	r3, #64	; 0x40
 800bebc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bebe:	2300      	movs	r3, #0
 800bec0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bec6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bec8:	f107 0308 	add.w	r3, r7, #8
 800becc:	4619      	mov	r1, r3
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f7ff ff74 	bl	800bdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bed4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bed8:	2110      	movs	r1, #16
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 fa46 	bl	800c36c <SDMMC_GetCmdResp1>
 800bee0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bee2:	69fb      	ldr	r3, [r7, #28]
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3720      	adds	r7, #32
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}

0800beec <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b088      	sub	sp, #32
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800befa:	2311      	movs	r3, #17
 800befc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800befe:	2340      	movs	r3, #64	; 0x40
 800bf00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf02:	2300      	movs	r3, #0
 800bf04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf0c:	f107 0308 	add.w	r3, r7, #8
 800bf10:	4619      	mov	r1, r3
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f7ff ff52 	bl	800bdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bf18:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf1c:	2111      	movs	r1, #17
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 fa24 	bl	800c36c <SDMMC_GetCmdResp1>
 800bf24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf26:	69fb      	ldr	r3, [r7, #28]
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3720      	adds	r7, #32
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b088      	sub	sp, #32
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bf3e:	2312      	movs	r3, #18
 800bf40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf42:	2340      	movs	r3, #64	; 0x40
 800bf44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf46:	2300      	movs	r3, #0
 800bf48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf50:	f107 0308 	add.w	r3, r7, #8
 800bf54:	4619      	mov	r1, r3
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f7ff ff30 	bl	800bdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bf5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf60:	2112      	movs	r1, #18
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 fa02 	bl	800c36c <SDMMC_GetCmdResp1>
 800bf68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf6a:	69fb      	ldr	r3, [r7, #28]
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3720      	adds	r7, #32
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b088      	sub	sp, #32
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bf82:	2318      	movs	r3, #24
 800bf84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf86:	2340      	movs	r3, #64	; 0x40
 800bf88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf94:	f107 0308 	add.w	r3, r7, #8
 800bf98:	4619      	mov	r1, r3
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f7ff ff0e 	bl	800bdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bfa0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfa4:	2118      	movs	r1, #24
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 f9e0 	bl	800c36c <SDMMC_GetCmdResp1>
 800bfac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfae:	69fb      	ldr	r3, [r7, #28]
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3720      	adds	r7, #32
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b088      	sub	sp, #32
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bfc6:	2319      	movs	r3, #25
 800bfc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfca:	2340      	movs	r3, #64	; 0x40
 800bfcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfd8:	f107 0308 	add.w	r3, r7, #8
 800bfdc:	4619      	mov	r1, r3
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f7ff feec 	bl	800bdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bfe4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfe8:	2119      	movs	r1, #25
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f000 f9be 	bl	800c36c <SDMMC_GetCmdResp1>
 800bff0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bff2:	69fb      	ldr	r3, [r7, #28]
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3720      	adds	r7, #32
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b088      	sub	sp, #32
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c004:	2300      	movs	r3, #0
 800c006:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c008:	230c      	movs	r3, #12
 800c00a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c00c:	2340      	movs	r3, #64	; 0x40
 800c00e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c010:	2300      	movs	r3, #0
 800c012:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c018:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c01a:	f107 0308 	add.w	r3, r7, #8
 800c01e:	4619      	mov	r1, r3
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f7ff fecb 	bl	800bdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c026:	4a05      	ldr	r2, [pc, #20]	; (800c03c <SDMMC_CmdStopTransfer+0x40>)
 800c028:	210c      	movs	r1, #12
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f000 f99e 	bl	800c36c <SDMMC_GetCmdResp1>
 800c030:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c032:	69fb      	ldr	r3, [r7, #28]
}
 800c034:	4618      	mov	r0, r3
 800c036:	3720      	adds	r7, #32
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	05f5e100 	.word	0x05f5e100

0800c040 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b08a      	sub	sp, #40	; 0x28
 800c044:	af00      	add	r7, sp, #0
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c050:	2307      	movs	r3, #7
 800c052:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c054:	2340      	movs	r3, #64	; 0x40
 800c056:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c058:	2300      	movs	r3, #0
 800c05a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c05c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c060:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c062:	f107 0310 	add.w	r3, r7, #16
 800c066:	4619      	mov	r1, r3
 800c068:	68f8      	ldr	r0, [r7, #12]
 800c06a:	f7ff fea7 	bl	800bdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c06e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c072:	2107      	movs	r1, #7
 800c074:	68f8      	ldr	r0, [r7, #12]
 800c076:	f000 f979 	bl	800c36c <SDMMC_GetCmdResp1>
 800c07a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3728      	adds	r7, #40	; 0x28
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}

0800c086 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c086:	b580      	push	{r7, lr}
 800c088:	b088      	sub	sp, #32
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c08e:	2300      	movs	r3, #0
 800c090:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c092:	2300      	movs	r3, #0
 800c094:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c096:	2300      	movs	r3, #0
 800c098:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c09a:	2300      	movs	r3, #0
 800c09c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c09e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0a4:	f107 0308 	add.w	r3, r7, #8
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f7ff fe86 	bl	800bdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 f92f 	bl	800c314 <SDMMC_GetCmdError>
 800c0b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0b8:	69fb      	ldr	r3, [r7, #28]
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3720      	adds	r7, #32
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}

0800c0c2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c0c2:	b580      	push	{r7, lr}
 800c0c4:	b088      	sub	sp, #32
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c0ca:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c0ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c0d0:	2308      	movs	r3, #8
 800c0d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0d4:	2340      	movs	r3, #64	; 0x40
 800c0d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0e2:	f107 0308 	add.w	r3, r7, #8
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f7ff fe67 	bl	800bdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f000 fb26 	bl	800c740 <SDMMC_GetCmdResp7>
 800c0f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0f6:	69fb      	ldr	r3, [r7, #28]
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3720      	adds	r7, #32
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b088      	sub	sp, #32
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c10e:	2337      	movs	r3, #55	; 0x37
 800c110:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c112:	2340      	movs	r3, #64	; 0x40
 800c114:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c116:	2300      	movs	r3, #0
 800c118:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c11a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c11e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c120:	f107 0308 	add.w	r3, r7, #8
 800c124:	4619      	mov	r1, r3
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f7ff fe48 	bl	800bdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c12c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c130:	2137      	movs	r1, #55	; 0x37
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 f91a 	bl	800c36c <SDMMC_GetCmdResp1>
 800c138:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c13a:	69fb      	ldr	r3, [r7, #28]
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3720      	adds	r7, #32
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b088      	sub	sp, #32
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c14e:	683a      	ldr	r2, [r7, #0]
 800c150:	4b0d      	ldr	r3, [pc, #52]	; (800c188 <SDMMC_CmdAppOperCommand+0x44>)
 800c152:	4313      	orrs	r3, r2
 800c154:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c156:	2329      	movs	r3, #41	; 0x29
 800c158:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c15a:	2340      	movs	r3, #64	; 0x40
 800c15c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c15e:	2300      	movs	r3, #0
 800c160:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c166:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c168:	f107 0308 	add.w	r3, r7, #8
 800c16c:	4619      	mov	r1, r3
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f7ff fe24 	bl	800bdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f000 fa2f 	bl	800c5d8 <SDMMC_GetCmdResp3>
 800c17a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c17c:	69fb      	ldr	r3, [r7, #28]
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3720      	adds	r7, #32
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop
 800c188:	80100000 	.word	0x80100000

0800c18c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b088      	sub	sp, #32
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c19a:	2306      	movs	r3, #6
 800c19c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c19e:	2340      	movs	r3, #64	; 0x40
 800c1a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1ac:	f107 0308 	add.w	r3, r7, #8
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f7ff fe02 	bl	800bdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c1b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1bc:	2106      	movs	r1, #6
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 f8d4 	bl	800c36c <SDMMC_GetCmdResp1>
 800c1c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1c6:	69fb      	ldr	r3, [r7, #28]
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3720      	adds	r7, #32
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b088      	sub	sp, #32
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c1dc:	2333      	movs	r3, #51	; 0x33
 800c1de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1e0:	2340      	movs	r3, #64	; 0x40
 800c1e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1ee:	f107 0308 	add.w	r3, r7, #8
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f7ff fde1 	bl	800bdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c1fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1fe:	2133      	movs	r1, #51	; 0x33
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 f8b3 	bl	800c36c <SDMMC_GetCmdResp1>
 800c206:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c208:	69fb      	ldr	r3, [r7, #28]
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3720      	adds	r7, #32
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}

0800c212 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c212:	b580      	push	{r7, lr}
 800c214:	b088      	sub	sp, #32
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c21a:	2300      	movs	r3, #0
 800c21c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c21e:	2302      	movs	r3, #2
 800c220:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c222:	23c0      	movs	r3, #192	; 0xc0
 800c224:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c226:	2300      	movs	r3, #0
 800c228:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c22a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c22e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c230:	f107 0308 	add.w	r3, r7, #8
 800c234:	4619      	mov	r1, r3
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f7ff fdc0 	bl	800bdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 f983 	bl	800c548 <SDMMC_GetCmdResp2>
 800c242:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c244:	69fb      	ldr	r3, [r7, #28]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3720      	adds	r7, #32
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}

0800c24e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c24e:	b580      	push	{r7, lr}
 800c250:	b088      	sub	sp, #32
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
 800c256:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c25c:	2309      	movs	r3, #9
 800c25e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c260:	23c0      	movs	r3, #192	; 0xc0
 800c262:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c264:	2300      	movs	r3, #0
 800c266:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c26c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c26e:	f107 0308 	add.w	r3, r7, #8
 800c272:	4619      	mov	r1, r3
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f7ff fda1 	bl	800bdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 f964 	bl	800c548 <SDMMC_GetCmdResp2>
 800c280:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c282:	69fb      	ldr	r3, [r7, #28]
}
 800c284:	4618      	mov	r0, r3
 800c286:	3720      	adds	r7, #32
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b088      	sub	sp, #32
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c296:	2300      	movs	r3, #0
 800c298:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c29a:	2303      	movs	r3, #3
 800c29c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c29e:	2340      	movs	r3, #64	; 0x40
 800c2a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2ac:	f107 0308 	add.w	r3, r7, #8
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f7ff fd82 	bl	800bdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c2b8:	683a      	ldr	r2, [r7, #0]
 800c2ba:	2103      	movs	r1, #3
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 f9c9 	bl	800c654 <SDMMC_GetCmdResp6>
 800c2c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2c4:	69fb      	ldr	r3, [r7, #28]
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3720      	adds	r7, #32
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}

0800c2ce <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b088      	sub	sp, #32
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
 800c2d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c2dc:	230d      	movs	r3, #13
 800c2de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2e0:	2340      	movs	r3, #64	; 0x40
 800c2e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2ee:	f107 0308 	add.w	r3, r7, #8
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f7ff fd61 	bl	800bdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c2fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2fe:	210d      	movs	r1, #13
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 f833 	bl	800c36c <SDMMC_GetCmdResp1>
 800c306:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c308:	69fb      	ldr	r3, [r7, #28]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3720      	adds	r7, #32
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
	...

0800c314 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c314:	b480      	push	{r7}
 800c316:	b085      	sub	sp, #20
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c31c:	4b11      	ldr	r3, [pc, #68]	; (800c364 <SDMMC_GetCmdError+0x50>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a11      	ldr	r2, [pc, #68]	; (800c368 <SDMMC_GetCmdError+0x54>)
 800c322:	fba2 2303 	umull	r2, r3, r2, r3
 800c326:	0a5b      	lsrs	r3, r3, #9
 800c328:	f241 3288 	movw	r2, #5000	; 0x1388
 800c32c:	fb02 f303 	mul.w	r3, r2, r3
 800c330:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	1e5a      	subs	r2, r3, #1
 800c336:	60fa      	str	r2, [r7, #12]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d102      	bne.n	800c342 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c33c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c340:	e009      	b.n	800c356 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d0f1      	beq.n	800c332 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	22c5      	movs	r2, #197	; 0xc5
 800c352:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c354:	2300      	movs	r3, #0
}
 800c356:	4618      	mov	r0, r3
 800c358:	3714      	adds	r7, #20
 800c35a:	46bd      	mov	sp, r7
 800c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c360:	4770      	bx	lr
 800c362:	bf00      	nop
 800c364:	20000000 	.word	0x20000000
 800c368:	10624dd3 	.word	0x10624dd3

0800c36c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b088      	sub	sp, #32
 800c370:	af00      	add	r7, sp, #0
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	460b      	mov	r3, r1
 800c376:	607a      	str	r2, [r7, #4]
 800c378:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c37a:	4b70      	ldr	r3, [pc, #448]	; (800c53c <SDMMC_GetCmdResp1+0x1d0>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4a70      	ldr	r2, [pc, #448]	; (800c540 <SDMMC_GetCmdResp1+0x1d4>)
 800c380:	fba2 2303 	umull	r2, r3, r2, r3
 800c384:	0a5a      	lsrs	r2, r3, #9
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	fb02 f303 	mul.w	r3, r2, r3
 800c38c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c38e:	69fb      	ldr	r3, [r7, #28]
 800c390:	1e5a      	subs	r2, r3, #1
 800c392:	61fa      	str	r2, [r7, #28]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d102      	bne.n	800c39e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c398:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c39c:	e0c9      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3a2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c3a4:	69bb      	ldr	r3, [r7, #24]
 800c3a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d0ef      	beq.n	800c38e <SDMMC_GetCmdResp1+0x22>
 800c3ae:	69bb      	ldr	r3, [r7, #24]
 800c3b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d1ea      	bne.n	800c38e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3bc:	f003 0304 	and.w	r3, r3, #4
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d004      	beq.n	800c3ce <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2204      	movs	r2, #4
 800c3c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c3ca:	2304      	movs	r3, #4
 800c3cc:	e0b1      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3d2:	f003 0301 	and.w	r3, r3, #1
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d004      	beq.n	800c3e4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2201      	movs	r2, #1
 800c3de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	e0a6      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	22c5      	movs	r2, #197	; 0xc5
 800c3e8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c3ea:	68f8      	ldr	r0, [r7, #12]
 800c3ec:	f7ff fd10 	bl	800be10 <SDMMC_GetCommandResponse>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	7afb      	ldrb	r3, [r7, #11]
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d001      	beq.n	800c3fe <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	e099      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c3fe:	2100      	movs	r1, #0
 800c400:	68f8      	ldr	r0, [r7, #12]
 800c402:	f7ff fd12 	bl	800be2a <SDMMC_GetResponse>
 800c406:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c408:	697a      	ldr	r2, [r7, #20]
 800c40a:	4b4e      	ldr	r3, [pc, #312]	; (800c544 <SDMMC_GetCmdResp1+0x1d8>)
 800c40c:	4013      	ands	r3, r2
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d101      	bne.n	800c416 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c412:	2300      	movs	r3, #0
 800c414:	e08d      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	da02      	bge.n	800c422 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c41c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c420:	e087      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d001      	beq.n	800c430 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c42c:	2340      	movs	r3, #64	; 0x40
 800c42e:	e080      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c436:	2b00      	cmp	r3, #0
 800c438:	d001      	beq.n	800c43e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c43a:	2380      	movs	r3, #128	; 0x80
 800c43c:	e079      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c444:	2b00      	cmp	r3, #0
 800c446:	d002      	beq.n	800c44e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c44c:	e071      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c454:	2b00      	cmp	r3, #0
 800c456:	d002      	beq.n	800c45e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c45c:	e069      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c464:	2b00      	cmp	r3, #0
 800c466:	d002      	beq.n	800c46e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c46c:	e061      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c474:	2b00      	cmp	r3, #0
 800c476:	d002      	beq.n	800c47e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c478:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c47c:	e059      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c484:	2b00      	cmp	r3, #0
 800c486:	d002      	beq.n	800c48e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c48c:	e051      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c494:	2b00      	cmp	r3, #0
 800c496:	d002      	beq.n	800c49e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c49c:	e049      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d002      	beq.n	800c4ae <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c4a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c4ac:	e041      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d002      	beq.n	800c4be <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c4b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4bc:	e039      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d002      	beq.n	800c4ce <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c4c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c4cc:	e031      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d002      	beq.n	800c4de <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c4d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c4dc:	e029      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d002      	beq.n	800c4ee <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c4e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c4ec:	e021      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d002      	beq.n	800c4fe <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c4f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c4fc:	e019      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c504:	2b00      	cmp	r3, #0
 800c506:	d002      	beq.n	800c50e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c508:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c50c:	e011      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c514:	2b00      	cmp	r3, #0
 800c516:	d002      	beq.n	800c51e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c518:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c51c:	e009      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	f003 0308 	and.w	r3, r3, #8
 800c524:	2b00      	cmp	r3, #0
 800c526:	d002      	beq.n	800c52e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c528:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c52c:	e001      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c52e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c532:	4618      	mov	r0, r3
 800c534:	3720      	adds	r7, #32
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	20000000 	.word	0x20000000
 800c540:	10624dd3 	.word	0x10624dd3
 800c544:	fdffe008 	.word	0xfdffe008

0800c548 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c548:	b480      	push	{r7}
 800c54a:	b085      	sub	sp, #20
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c550:	4b1f      	ldr	r3, [pc, #124]	; (800c5d0 <SDMMC_GetCmdResp2+0x88>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	4a1f      	ldr	r2, [pc, #124]	; (800c5d4 <SDMMC_GetCmdResp2+0x8c>)
 800c556:	fba2 2303 	umull	r2, r3, r2, r3
 800c55a:	0a5b      	lsrs	r3, r3, #9
 800c55c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c560:	fb02 f303 	mul.w	r3, r2, r3
 800c564:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	1e5a      	subs	r2, r3, #1
 800c56a:	60fa      	str	r2, [r7, #12]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d102      	bne.n	800c576 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c570:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c574:	e026      	b.n	800c5c4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c57a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c582:	2b00      	cmp	r3, #0
 800c584:	d0ef      	beq.n	800c566 <SDMMC_GetCmdResp2+0x1e>
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d1ea      	bne.n	800c566 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c594:	f003 0304 	and.w	r3, r3, #4
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d004      	beq.n	800c5a6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2204      	movs	r2, #4
 800c5a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5a2:	2304      	movs	r3, #4
 800c5a4:	e00e      	b.n	800c5c4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5aa:	f003 0301 	and.w	r3, r3, #1
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d004      	beq.n	800c5bc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	e003      	b.n	800c5c4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	22c5      	movs	r2, #197	; 0xc5
 800c5c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c5c2:	2300      	movs	r3, #0
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3714      	adds	r7, #20
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr
 800c5d0:	20000000 	.word	0x20000000
 800c5d4:	10624dd3 	.word	0x10624dd3

0800c5d8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b085      	sub	sp, #20
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c5e0:	4b1a      	ldr	r3, [pc, #104]	; (800c64c <SDMMC_GetCmdResp3+0x74>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	4a1a      	ldr	r2, [pc, #104]	; (800c650 <SDMMC_GetCmdResp3+0x78>)
 800c5e6:	fba2 2303 	umull	r2, r3, r2, r3
 800c5ea:	0a5b      	lsrs	r3, r3, #9
 800c5ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5f0:	fb02 f303 	mul.w	r3, r2, r3
 800c5f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	1e5a      	subs	r2, r3, #1
 800c5fa:	60fa      	str	r2, [r7, #12]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d102      	bne.n	800c606 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c600:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c604:	e01b      	b.n	800c63e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c60a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c612:	2b00      	cmp	r3, #0
 800c614:	d0ef      	beq.n	800c5f6 <SDMMC_GetCmdResp3+0x1e>
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d1ea      	bne.n	800c5f6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c624:	f003 0304 	and.w	r3, r3, #4
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d004      	beq.n	800c636 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2204      	movs	r2, #4
 800c630:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c632:	2304      	movs	r3, #4
 800c634:	e003      	b.n	800c63e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	22c5      	movs	r2, #197	; 0xc5
 800c63a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c63c:	2300      	movs	r3, #0
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3714      	adds	r7, #20
 800c642:	46bd      	mov	sp, r7
 800c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c648:	4770      	bx	lr
 800c64a:	bf00      	nop
 800c64c:	20000000 	.word	0x20000000
 800c650:	10624dd3 	.word	0x10624dd3

0800c654 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b088      	sub	sp, #32
 800c658:	af00      	add	r7, sp, #0
 800c65a:	60f8      	str	r0, [r7, #12]
 800c65c:	460b      	mov	r3, r1
 800c65e:	607a      	str	r2, [r7, #4]
 800c660:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c662:	4b35      	ldr	r3, [pc, #212]	; (800c738 <SDMMC_GetCmdResp6+0xe4>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	4a35      	ldr	r2, [pc, #212]	; (800c73c <SDMMC_GetCmdResp6+0xe8>)
 800c668:	fba2 2303 	umull	r2, r3, r2, r3
 800c66c:	0a5b      	lsrs	r3, r3, #9
 800c66e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c672:	fb02 f303 	mul.w	r3, r2, r3
 800c676:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c678:	69fb      	ldr	r3, [r7, #28]
 800c67a:	1e5a      	subs	r2, r3, #1
 800c67c:	61fa      	str	r2, [r7, #28]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d102      	bne.n	800c688 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c682:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c686:	e052      	b.n	800c72e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c68c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c68e:	69bb      	ldr	r3, [r7, #24]
 800c690:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c694:	2b00      	cmp	r3, #0
 800c696:	d0ef      	beq.n	800c678 <SDMMC_GetCmdResp6+0x24>
 800c698:	69bb      	ldr	r3, [r7, #24]
 800c69a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d1ea      	bne.n	800c678 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6a6:	f003 0304 	and.w	r3, r3, #4
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d004      	beq.n	800c6b8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2204      	movs	r2, #4
 800c6b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c6b4:	2304      	movs	r3, #4
 800c6b6:	e03a      	b.n	800c72e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6bc:	f003 0301 	and.w	r3, r3, #1
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d004      	beq.n	800c6ce <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	e02f      	b.n	800c72e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c6ce:	68f8      	ldr	r0, [r7, #12]
 800c6d0:	f7ff fb9e 	bl	800be10 <SDMMC_GetCommandResponse>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	7afb      	ldrb	r3, [r7, #11]
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d001      	beq.n	800c6e2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6de:	2301      	movs	r3, #1
 800c6e0:	e025      	b.n	800c72e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	22c5      	movs	r2, #197	; 0xc5
 800c6e6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c6e8:	2100      	movs	r1, #0
 800c6ea:	68f8      	ldr	r0, [r7, #12]
 800c6ec:	f7ff fb9d 	bl	800be2a <SDMMC_GetResponse>
 800c6f0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d106      	bne.n	800c70a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	0c1b      	lsrs	r3, r3, #16
 800c700:	b29a      	uxth	r2, r3
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c706:	2300      	movs	r3, #0
 800c708:	e011      	b.n	800c72e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c710:	2b00      	cmp	r3, #0
 800c712:	d002      	beq.n	800c71a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c718:	e009      	b.n	800c72e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c720:	2b00      	cmp	r3, #0
 800c722:	d002      	beq.n	800c72a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c728:	e001      	b.n	800c72e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c72a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3720      	adds	r7, #32
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
 800c736:	bf00      	nop
 800c738:	20000000 	.word	0x20000000
 800c73c:	10624dd3 	.word	0x10624dd3

0800c740 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c740:	b480      	push	{r7}
 800c742:	b085      	sub	sp, #20
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c748:	4b22      	ldr	r3, [pc, #136]	; (800c7d4 <SDMMC_GetCmdResp7+0x94>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4a22      	ldr	r2, [pc, #136]	; (800c7d8 <SDMMC_GetCmdResp7+0x98>)
 800c74e:	fba2 2303 	umull	r2, r3, r2, r3
 800c752:	0a5b      	lsrs	r3, r3, #9
 800c754:	f241 3288 	movw	r2, #5000	; 0x1388
 800c758:	fb02 f303 	mul.w	r3, r2, r3
 800c75c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	1e5a      	subs	r2, r3, #1
 800c762:	60fa      	str	r2, [r7, #12]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d102      	bne.n	800c76e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c768:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c76c:	e02c      	b.n	800c7c8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c772:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d0ef      	beq.n	800c75e <SDMMC_GetCmdResp7+0x1e>
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c784:	2b00      	cmp	r3, #0
 800c786:	d1ea      	bne.n	800c75e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c78c:	f003 0304 	and.w	r3, r3, #4
 800c790:	2b00      	cmp	r3, #0
 800c792:	d004      	beq.n	800c79e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2204      	movs	r2, #4
 800c798:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c79a:	2304      	movs	r3, #4
 800c79c:	e014      	b.n	800c7c8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7a2:	f003 0301 	and.w	r3, r3, #1
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d004      	beq.n	800c7b4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2201      	movs	r2, #1
 800c7ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	e009      	b.n	800c7c8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d002      	beq.n	800c7c6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2240      	movs	r2, #64	; 0x40
 800c7c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c7c6:	2300      	movs	r3, #0
  
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3714      	adds	r7, #20
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr
 800c7d4:	20000000 	.word	0x20000000
 800c7d8:	10624dd3 	.word	0x10624dd3

0800c7dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c7dc:	b084      	sub	sp, #16
 800c7de:	b580      	push	{r7, lr}
 800c7e0:	b084      	sub	sp, #16
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	6078      	str	r0, [r7, #4]
 800c7e6:	f107 001c 	add.w	r0, r7, #28
 800c7ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d120      	bne.n	800c836 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	68da      	ldr	r2, [r3, #12]
 800c804:	4b20      	ldr	r3, [pc, #128]	; (800c888 <USB_CoreInit+0xac>)
 800c806:	4013      	ands	r3, r2
 800c808:	687a      	ldr	r2, [r7, #4]
 800c80a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d105      	bne.n	800c82a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	68db      	ldr	r3, [r3, #12]
 800c822:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 f942 	bl	800cab4 <USB_CoreReset>
 800c830:	4603      	mov	r3, r0
 800c832:	73fb      	strb	r3, [r7, #15]
 800c834:	e010      	b.n	800c858 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 f936 	bl	800cab4 <USB_CoreReset>
 800c848:	4603      	mov	r3, r0
 800c84a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c850:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800c858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85a:	2b01      	cmp	r3, #1
 800c85c:	d10b      	bne.n	800c876 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	689b      	ldr	r3, [r3, #8]
 800c862:	f043 0206 	orr.w	r2, r3, #6
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	689b      	ldr	r3, [r3, #8]
 800c86e:	f043 0220 	orr.w	r2, r3, #32
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c876:	7bfb      	ldrb	r3, [r7, #15]
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3710      	adds	r7, #16
 800c87c:	46bd      	mov	sp, r7
 800c87e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c882:	b004      	add	sp, #16
 800c884:	4770      	bx	lr
 800c886:	bf00      	nop
 800c888:	ffbdffbf 	.word	0xffbdffbf

0800c88c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b083      	sub	sp, #12
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	689b      	ldr	r3, [r3, #8]
 800c898:	f043 0201 	orr.w	r2, r3, #1
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c8a0:	2300      	movs	r3, #0
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	370c      	adds	r7, #12
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ac:	4770      	bx	lr

0800c8ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c8ae:	b480      	push	{r7}
 800c8b0:	b083      	sub	sp, #12
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	689b      	ldr	r3, [r3, #8]
 800c8ba:	f023 0201 	bic.w	r2, r3, #1
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c8c2:	2300      	movs	r3, #0
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	370c      	adds	r7, #12
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr

0800c8d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	460b      	mov	r3, r1
 800c8da:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	68db      	ldr	r3, [r3, #12]
 800c8e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c8e8:	78fb      	ldrb	r3, [r7, #3]
 800c8ea:	2b01      	cmp	r3, #1
 800c8ec:	d106      	bne.n	800c8fc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	68db      	ldr	r3, [r3, #12]
 800c8f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	60da      	str	r2, [r3, #12]
 800c8fa:	e00b      	b.n	800c914 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c8fc:	78fb      	ldrb	r3, [r7, #3]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d106      	bne.n	800c910 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	68db      	ldr	r3, [r3, #12]
 800c906:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	60da      	str	r2, [r3, #12]
 800c90e:	e001      	b.n	800c914 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c910:	2301      	movs	r3, #1
 800c912:	e003      	b.n	800c91c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c914:	2032      	movs	r0, #50	; 0x32
 800c916:	f7f6 ff43 	bl	80037a0 <HAL_Delay>

  return HAL_OK;
 800c91a:	2300      	movs	r3, #0
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3708      	adds	r7, #8
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c924:	b480      	push	{r7}
 800c926:	b085      	sub	sp, #20
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c92e:	2300      	movs	r3, #0
 800c930:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	019b      	lsls	r3, r3, #6
 800c936:	f043 0220 	orr.w	r2, r3, #32
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	3301      	adds	r3, #1
 800c942:	60fb      	str	r3, [r7, #12]
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	4a09      	ldr	r2, [pc, #36]	; (800c96c <USB_FlushTxFifo+0x48>)
 800c948:	4293      	cmp	r3, r2
 800c94a:	d901      	bls.n	800c950 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c94c:	2303      	movs	r3, #3
 800c94e:	e006      	b.n	800c95e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	691b      	ldr	r3, [r3, #16]
 800c954:	f003 0320 	and.w	r3, r3, #32
 800c958:	2b20      	cmp	r3, #32
 800c95a:	d0f0      	beq.n	800c93e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c95c:	2300      	movs	r3, #0
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3714      	adds	r7, #20
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	00030d40 	.word	0x00030d40

0800c970 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c970:	b480      	push	{r7}
 800c972:	b085      	sub	sp, #20
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c978:	2300      	movs	r3, #0
 800c97a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2210      	movs	r2, #16
 800c980:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	3301      	adds	r3, #1
 800c986:	60fb      	str	r3, [r7, #12]
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	4a09      	ldr	r2, [pc, #36]	; (800c9b0 <USB_FlushRxFifo+0x40>)
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d901      	bls.n	800c994 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c990:	2303      	movs	r3, #3
 800c992:	e006      	b.n	800c9a2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	691b      	ldr	r3, [r3, #16]
 800c998:	f003 0310 	and.w	r3, r3, #16
 800c99c:	2b10      	cmp	r3, #16
 800c99e:	d0f0      	beq.n	800c982 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c9a0:	2300      	movs	r3, #0
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3714      	adds	r7, #20
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ac:	4770      	bx	lr
 800c9ae:	bf00      	nop
 800c9b0:	00030d40 	.word	0x00030d40

0800c9b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b089      	sub	sp, #36	; 0x24
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	4611      	mov	r1, r2
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	71fb      	strb	r3, [r7, #7]
 800c9c6:	4613      	mov	r3, r2
 800c9c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c9d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d11a      	bne.n	800ca10 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c9da:	88bb      	ldrh	r3, [r7, #4]
 800c9dc:	3303      	adds	r3, #3
 800c9de:	089b      	lsrs	r3, r3, #2
 800c9e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	61bb      	str	r3, [r7, #24]
 800c9e6:	e00f      	b.n	800ca08 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c9e8:	79fb      	ldrb	r3, [r7, #7]
 800c9ea:	031a      	lsls	r2, r3, #12
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	4413      	add	r3, r2
 800c9f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	69fb      	ldr	r3, [r7, #28]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c9fc:	69fb      	ldr	r3, [r7, #28]
 800c9fe:	3304      	adds	r3, #4
 800ca00:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ca02:	69bb      	ldr	r3, [r7, #24]
 800ca04:	3301      	adds	r3, #1
 800ca06:	61bb      	str	r3, [r7, #24]
 800ca08:	69ba      	ldr	r2, [r7, #24]
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d3eb      	bcc.n	800c9e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ca10:	2300      	movs	r3, #0
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3724      	adds	r7, #36	; 0x24
 800ca16:	46bd      	mov	sp, r7
 800ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1c:	4770      	bx	lr

0800ca1e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ca1e:	b480      	push	{r7}
 800ca20:	b089      	sub	sp, #36	; 0x24
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	60f8      	str	r0, [r7, #12]
 800ca26:	60b9      	str	r1, [r7, #8]
 800ca28:	4613      	mov	r3, r2
 800ca2a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ca34:	88fb      	ldrh	r3, [r7, #6]
 800ca36:	3303      	adds	r3, #3
 800ca38:	089b      	lsrs	r3, r3, #2
 800ca3a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	61bb      	str	r3, [r7, #24]
 800ca40:	e00b      	b.n	800ca5a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	69fb      	ldr	r3, [r7, #28]
 800ca4c:	601a      	str	r2, [r3, #0]
    pDest++;
 800ca4e:	69fb      	ldr	r3, [r7, #28]
 800ca50:	3304      	adds	r3, #4
 800ca52:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ca54:	69bb      	ldr	r3, [r7, #24]
 800ca56:	3301      	adds	r3, #1
 800ca58:	61bb      	str	r3, [r7, #24]
 800ca5a:	69ba      	ldr	r2, [r7, #24]
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d3ef      	bcc.n	800ca42 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ca62:	69fb      	ldr	r3, [r7, #28]
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3724      	adds	r7, #36	; 0x24
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr

0800ca70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b085      	sub	sp, #20
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	695b      	ldr	r3, [r3, #20]
 800ca7c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	699b      	ldr	r3, [r3, #24]
 800ca82:	68fa      	ldr	r2, [r7, #12]
 800ca84:	4013      	ands	r3, r2
 800ca86:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ca88:	68fb      	ldr	r3, [r7, #12]
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3714      	adds	r7, #20
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca94:	4770      	bx	lr

0800ca96 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ca96:	b480      	push	{r7}
 800ca98:	b083      	sub	sp, #12
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	695b      	ldr	r3, [r3, #20]
 800caa2:	f003 0301 	and.w	r3, r3, #1
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	370c      	adds	r7, #12
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr
	...

0800cab4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cab4:	b480      	push	{r7}
 800cab6:	b085      	sub	sp, #20
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800cabc:	2300      	movs	r3, #0
 800cabe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	3301      	adds	r3, #1
 800cac4:	60fb      	str	r3, [r7, #12]
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	4a13      	ldr	r2, [pc, #76]	; (800cb18 <USB_CoreReset+0x64>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d901      	bls.n	800cad2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cace:	2303      	movs	r3, #3
 800cad0:	e01b      	b.n	800cb0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	691b      	ldr	r3, [r3, #16]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	daf2      	bge.n	800cac0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cada:	2300      	movs	r3, #0
 800cadc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	691b      	ldr	r3, [r3, #16]
 800cae2:	f043 0201 	orr.w	r2, r3, #1
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	3301      	adds	r3, #1
 800caee:	60fb      	str	r3, [r7, #12]
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	4a09      	ldr	r2, [pc, #36]	; (800cb18 <USB_CoreReset+0x64>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d901      	bls.n	800cafc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800caf8:	2303      	movs	r3, #3
 800cafa:	e006      	b.n	800cb0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	691b      	ldr	r3, [r3, #16]
 800cb00:	f003 0301 	and.w	r3, r3, #1
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	d0f0      	beq.n	800caea <USB_CoreReset+0x36>

  return HAL_OK;
 800cb08:	2300      	movs	r3, #0
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3714      	adds	r7, #20
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb14:	4770      	bx	lr
 800cb16:	bf00      	nop
 800cb18:	00030d40 	.word	0x00030d40

0800cb1c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cb1c:	b084      	sub	sp, #16
 800cb1e:	b580      	push	{r7, lr}
 800cb20:	b084      	sub	sp, #16
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	6078      	str	r0, [r7, #4]
 800cb26:	f107 001c 	add.w	r0, r7, #28
 800cb2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cb38:	461a      	mov	r2, r3
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb42:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d018      	beq.n	800cb88 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800cb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb58:	2b01      	cmp	r3, #1
 800cb5a:	d10a      	bne.n	800cb72 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	68ba      	ldr	r2, [r7, #8]
 800cb66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cb6a:	f043 0304 	orr.w	r3, r3, #4
 800cb6e:	6013      	str	r3, [r2, #0]
 800cb70:	e014      	b.n	800cb9c <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	68ba      	ldr	r2, [r7, #8]
 800cb7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cb80:	f023 0304 	bic.w	r3, r3, #4
 800cb84:	6013      	str	r3, [r2, #0]
 800cb86:	e009      	b.n	800cb9c <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	68ba      	ldr	r2, [r7, #8]
 800cb92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cb96:	f023 0304 	bic.w	r3, r3, #4
 800cb9a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800cb9c:	2110      	movs	r1, #16
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f7ff fec0 	bl	800c924 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f7ff fee3 	bl	800c970 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800cbaa:	2300      	movs	r3, #0
 800cbac:	60fb      	str	r3, [r7, #12]
 800cbae:	e015      	b.n	800cbdc <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	015a      	lsls	r2, r3, #5
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	4413      	add	r3, r2
 800cbb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbc2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	015a      	lsls	r2, r3, #5
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	4413      	add	r3, r2
 800cbcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	60fb      	str	r3, [r7, #12]
 800cbdc:	6a3b      	ldr	r3, [r7, #32]
 800cbde:	68fa      	ldr	r2, [r7, #12]
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d3e5      	bcc.n	800cbb0 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800cbe4:	2101      	movs	r1, #1
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f000 f8ac 	bl	800cd44 <USB_DriveVbus>

  HAL_Delay(200U);
 800cbec:	20c8      	movs	r0, #200	; 0xc8
 800cbee:	f7f6 fdd7 	bl	80037a0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cbfe:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d00b      	beq.n	800cc24 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc12:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	4a14      	ldr	r2, [pc, #80]	; (800cc68 <USB_HostInit+0x14c>)
 800cc18:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4a13      	ldr	r2, [pc, #76]	; (800cc6c <USB_HostInit+0x150>)
 800cc1e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800cc22:	e009      	b.n	800cc38 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2280      	movs	r2, #128	; 0x80
 800cc28:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	4a10      	ldr	r2, [pc, #64]	; (800cc70 <USB_HostInit+0x154>)
 800cc2e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	4a10      	ldr	r2, [pc, #64]	; (800cc74 <USB_HostInit+0x158>)
 800cc34:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d105      	bne.n	800cc4a <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	699b      	ldr	r3, [r3, #24]
 800cc42:	f043 0210 	orr.w	r2, r3, #16
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	699a      	ldr	r2, [r3, #24]
 800cc4e:	4b0a      	ldr	r3, [pc, #40]	; (800cc78 <USB_HostInit+0x15c>)
 800cc50:	4313      	orrs	r3, r2
 800cc52:	687a      	ldr	r2, [r7, #4]
 800cc54:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800cc56:	2300      	movs	r3, #0
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3710      	adds	r7, #16
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cc62:	b004      	add	sp, #16
 800cc64:	4770      	bx	lr
 800cc66:	bf00      	nop
 800cc68:	01000200 	.word	0x01000200
 800cc6c:	00e00300 	.word	0x00e00300
 800cc70:	00600080 	.word	0x00600080
 800cc74:	004000e0 	.word	0x004000e0
 800cc78:	a3200008 	.word	0xa3200008

0800cc7c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b085      	sub	sp, #20
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	460b      	mov	r3, r1
 800cc86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	68fa      	ldr	r2, [r7, #12]
 800cc96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cc9a:	f023 0303 	bic.w	r3, r3, #3
 800cc9e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cca6:	681a      	ldr	r2, [r3, #0]
 800cca8:	78fb      	ldrb	r3, [r7, #3]
 800ccaa:	f003 0303 	and.w	r3, r3, #3
 800ccae:	68f9      	ldr	r1, [r7, #12]
 800ccb0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ccb4:	4313      	orrs	r3, r2
 800ccb6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ccb8:	78fb      	ldrb	r3, [r7, #3]
 800ccba:	2b01      	cmp	r3, #1
 800ccbc:	d107      	bne.n	800ccce <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ccca:	6053      	str	r3, [r2, #4]
 800cccc:	e009      	b.n	800cce2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ccce:	78fb      	ldrb	r3, [r7, #3]
 800ccd0:	2b02      	cmp	r3, #2
 800ccd2:	d106      	bne.n	800cce2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccda:	461a      	mov	r2, r3
 800ccdc:	f241 7370 	movw	r3, #6000	; 0x1770
 800cce0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800cce2:	2300      	movs	r3, #0
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3714      	adds	r7, #20
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr

0800ccf0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b084      	sub	sp, #16
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800cd10:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	68fa      	ldr	r2, [r7, #12]
 800cd16:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cd1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd1e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800cd20:	2064      	movs	r0, #100	; 0x64
 800cd22:	f7f6 fd3d 	bl	80037a0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	68fa      	ldr	r2, [r7, #12]
 800cd2a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cd2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd32:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800cd34:	200a      	movs	r0, #10
 800cd36:	f7f6 fd33 	bl	80037a0 <HAL_Delay>

  return HAL_OK;
 800cd3a:	2300      	movs	r3, #0
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3710      	adds	r7, #16
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b085      	sub	sp, #20
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800cd54:	2300      	movs	r3, #0
 800cd56:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800cd68:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d109      	bne.n	800cd88 <USB_DriveVbus+0x44>
 800cd74:	78fb      	ldrb	r3, [r7, #3]
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	d106      	bne.n	800cd88 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	68fa      	ldr	r2, [r7, #12]
 800cd7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cd82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cd86:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cd8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd92:	d109      	bne.n	800cda8 <USB_DriveVbus+0x64>
 800cd94:	78fb      	ldrb	r3, [r7, #3]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d106      	bne.n	800cda8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	68fa      	ldr	r2, [r7, #12]
 800cd9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cda2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cda6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800cda8:	2300      	movs	r3, #0
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3714      	adds	r7, #20
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb4:	4770      	bx	lr

0800cdb6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cdb6:	b480      	push	{r7}
 800cdb8:	b085      	sub	sp, #20
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	0c5b      	lsrs	r3, r3, #17
 800cdd4:	f003 0303 	and.w	r3, r3, #3
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3714      	adds	r7, #20
 800cddc:	46bd      	mov	sp, r7
 800cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde2:	4770      	bx	lr

0800cde4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b085      	sub	sp, #20
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cdf6:	689b      	ldr	r3, [r3, #8]
 800cdf8:	b29b      	uxth	r3, r3
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3714      	adds	r7, #20
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce04:	4770      	bx	lr
	...

0800ce08 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b088      	sub	sp, #32
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	4608      	mov	r0, r1
 800ce12:	4611      	mov	r1, r2
 800ce14:	461a      	mov	r2, r3
 800ce16:	4603      	mov	r3, r0
 800ce18:	70fb      	strb	r3, [r7, #3]
 800ce1a:	460b      	mov	r3, r1
 800ce1c:	70bb      	strb	r3, [r7, #2]
 800ce1e:	4613      	mov	r3, r2
 800ce20:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800ce22:	2300      	movs	r3, #0
 800ce24:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800ce2a:	78fb      	ldrb	r3, [r7, #3]
 800ce2c:	015a      	lsls	r2, r3, #5
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	4413      	add	r3, r2
 800ce32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce36:	461a      	mov	r2, r3
 800ce38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce3c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ce3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ce42:	2b03      	cmp	r3, #3
 800ce44:	d87e      	bhi.n	800cf44 <USB_HC_Init+0x13c>
 800ce46:	a201      	add	r2, pc, #4	; (adr r2, 800ce4c <USB_HC_Init+0x44>)
 800ce48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce4c:	0800ce5d 	.word	0x0800ce5d
 800ce50:	0800cf07 	.word	0x0800cf07
 800ce54:	0800ce5d 	.word	0x0800ce5d
 800ce58:	0800cec9 	.word	0x0800cec9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ce5c:	78fb      	ldrb	r3, [r7, #3]
 800ce5e:	015a      	lsls	r2, r3, #5
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	4413      	add	r3, r2
 800ce64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce68:	461a      	mov	r2, r3
 800ce6a:	f240 439d 	movw	r3, #1181	; 0x49d
 800ce6e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ce70:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	da10      	bge.n	800ce9a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ce78:	78fb      	ldrb	r3, [r7, #3]
 800ce7a:	015a      	lsls	r2, r3, #5
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	4413      	add	r3, r2
 800ce80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce84:	68db      	ldr	r3, [r3, #12]
 800ce86:	78fa      	ldrb	r2, [r7, #3]
 800ce88:	0151      	lsls	r1, r2, #5
 800ce8a:	693a      	ldr	r2, [r7, #16]
 800ce8c:	440a      	add	r2, r1
 800ce8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce96:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800ce98:	e057      	b.n	800cf4a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d051      	beq.n	800cf4a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800cea6:	78fb      	ldrb	r3, [r7, #3]
 800cea8:	015a      	lsls	r2, r3, #5
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	4413      	add	r3, r2
 800ceae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ceb2:	68db      	ldr	r3, [r3, #12]
 800ceb4:	78fa      	ldrb	r2, [r7, #3]
 800ceb6:	0151      	lsls	r1, r2, #5
 800ceb8:	693a      	ldr	r2, [r7, #16]
 800ceba:	440a      	add	r2, r1
 800cebc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cec0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800cec4:	60d3      	str	r3, [r2, #12]
      break;
 800cec6:	e040      	b.n	800cf4a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cec8:	78fb      	ldrb	r3, [r7, #3]
 800ceca:	015a      	lsls	r2, r3, #5
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	4413      	add	r3, r2
 800ced0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ced4:	461a      	mov	r2, r3
 800ced6:	f240 639d 	movw	r3, #1693	; 0x69d
 800ceda:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800cedc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	da34      	bge.n	800cf4e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800cee4:	78fb      	ldrb	r3, [r7, #3]
 800cee6:	015a      	lsls	r2, r3, #5
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	4413      	add	r3, r2
 800ceec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cef0:	68db      	ldr	r3, [r3, #12]
 800cef2:	78fa      	ldrb	r2, [r7, #3]
 800cef4:	0151      	lsls	r1, r2, #5
 800cef6:	693a      	ldr	r2, [r7, #16]
 800cef8:	440a      	add	r2, r1
 800cefa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cefe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf02:	60d3      	str	r3, [r2, #12]
      }

      break;
 800cf04:	e023      	b.n	800cf4e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cf06:	78fb      	ldrb	r3, [r7, #3]
 800cf08:	015a      	lsls	r2, r3, #5
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	4413      	add	r3, r2
 800cf0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf12:	461a      	mov	r2, r3
 800cf14:	f240 2325 	movw	r3, #549	; 0x225
 800cf18:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800cf1a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	da17      	bge.n	800cf52 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800cf22:	78fb      	ldrb	r3, [r7, #3]
 800cf24:	015a      	lsls	r2, r3, #5
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	4413      	add	r3, r2
 800cf2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf2e:	68db      	ldr	r3, [r3, #12]
 800cf30:	78fa      	ldrb	r2, [r7, #3]
 800cf32:	0151      	lsls	r1, r2, #5
 800cf34:	693a      	ldr	r2, [r7, #16]
 800cf36:	440a      	add	r2, r1
 800cf38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf3c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800cf40:	60d3      	str	r3, [r2, #12]
      }
      break;
 800cf42:	e006      	b.n	800cf52 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800cf44:	2301      	movs	r3, #1
 800cf46:	77fb      	strb	r3, [r7, #31]
      break;
 800cf48:	e004      	b.n	800cf54 <USB_HC_Init+0x14c>
      break;
 800cf4a:	bf00      	nop
 800cf4c:	e002      	b.n	800cf54 <USB_HC_Init+0x14c>
      break;
 800cf4e:	bf00      	nop
 800cf50:	e000      	b.n	800cf54 <USB_HC_Init+0x14c>
      break;
 800cf52:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf5a:	699a      	ldr	r2, [r3, #24]
 800cf5c:	78fb      	ldrb	r3, [r7, #3]
 800cf5e:	f003 030f 	and.w	r3, r3, #15
 800cf62:	2101      	movs	r1, #1
 800cf64:	fa01 f303 	lsl.w	r3, r1, r3
 800cf68:	6939      	ldr	r1, [r7, #16]
 800cf6a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	699b      	ldr	r3, [r3, #24]
 800cf76:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800cf7e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	da03      	bge.n	800cf8e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800cf86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf8a:	61bb      	str	r3, [r7, #24]
 800cf8c:	e001      	b.n	800cf92 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f7ff ff0f 	bl	800cdb6 <USB_GetHostSpeed>
 800cf98:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800cf9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cf9e:	2b02      	cmp	r3, #2
 800cfa0:	d106      	bne.n	800cfb0 <USB_HC_Init+0x1a8>
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	2b02      	cmp	r3, #2
 800cfa6:	d003      	beq.n	800cfb0 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800cfa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cfac:	617b      	str	r3, [r7, #20]
 800cfae:	e001      	b.n	800cfb4 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cfb4:	787b      	ldrb	r3, [r7, #1]
 800cfb6:	059b      	lsls	r3, r3, #22
 800cfb8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800cfbc:	78bb      	ldrb	r3, [r7, #2]
 800cfbe:	02db      	lsls	r3, r3, #11
 800cfc0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cfc4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800cfc6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cfca:	049b      	lsls	r3, r3, #18
 800cfcc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800cfd0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cfd2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cfd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800cfd8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cfda:	69bb      	ldr	r3, [r7, #24]
 800cfdc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cfde:	78fb      	ldrb	r3, [r7, #3]
 800cfe0:	0159      	lsls	r1, r3, #5
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	440b      	add	r3, r1
 800cfe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfea:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cff0:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800cff2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cff6:	2b03      	cmp	r3, #3
 800cff8:	d10f      	bne.n	800d01a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800cffa:	78fb      	ldrb	r3, [r7, #3]
 800cffc:	015a      	lsls	r2, r3, #5
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	4413      	add	r3, r2
 800d002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	78fa      	ldrb	r2, [r7, #3]
 800d00a:	0151      	lsls	r1, r2, #5
 800d00c:	693a      	ldr	r2, [r7, #16]
 800d00e:	440a      	add	r2, r1
 800d010:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d014:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d018:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d01a:	7ffb      	ldrb	r3, [r7, #31]
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3720      	adds	r7, #32
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b08c      	sub	sp, #48	; 0x30
 800d028:	af02      	add	r7, sp, #8
 800d02a:	60f8      	str	r0, [r7, #12]
 800d02c:	60b9      	str	r1, [r7, #8]
 800d02e:	4613      	mov	r3, r2
 800d030:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	785b      	ldrb	r3, [r3, #1]
 800d03a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800d03c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d040:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d02d      	beq.n	800d0aa <USB_HC_StartXfer+0x86>
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	791b      	ldrb	r3, [r3, #4]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d129      	bne.n	800d0aa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800d056:	79fb      	ldrb	r3, [r7, #7]
 800d058:	2b01      	cmp	r3, #1
 800d05a:	d117      	bne.n	800d08c <USB_HC_StartXfer+0x68>
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	79db      	ldrb	r3, [r3, #7]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d003      	beq.n	800d06c <USB_HC_StartXfer+0x48>
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	79db      	ldrb	r3, [r3, #7]
 800d068:	2b02      	cmp	r3, #2
 800d06a:	d10f      	bne.n	800d08c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800d06c:	69fb      	ldr	r3, [r7, #28]
 800d06e:	015a      	lsls	r2, r3, #5
 800d070:	6a3b      	ldr	r3, [r7, #32]
 800d072:	4413      	add	r3, r2
 800d074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d078:	68db      	ldr	r3, [r3, #12]
 800d07a:	69fa      	ldr	r2, [r7, #28]
 800d07c:	0151      	lsls	r1, r2, #5
 800d07e:	6a3a      	ldr	r2, [r7, #32]
 800d080:	440a      	add	r2, r1
 800d082:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d08a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800d08c:	79fb      	ldrb	r3, [r7, #7]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d10b      	bne.n	800d0aa <USB_HC_StartXfer+0x86>
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	795b      	ldrb	r3, [r3, #5]
 800d096:	2b01      	cmp	r3, #1
 800d098:	d107      	bne.n	800d0aa <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	785b      	ldrb	r3, [r3, #1]
 800d09e:	4619      	mov	r1, r3
 800d0a0:	68f8      	ldr	r0, [r7, #12]
 800d0a2:	f000 fa2f 	bl	800d504 <USB_DoPing>
      return HAL_OK;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	e0f8      	b.n	800d29c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	695b      	ldr	r3, [r3, #20]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d018      	beq.n	800d0e4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	695b      	ldr	r3, [r3, #20]
 800d0b6:	68ba      	ldr	r2, [r7, #8]
 800d0b8:	8912      	ldrh	r2, [r2, #8]
 800d0ba:	4413      	add	r3, r2
 800d0bc:	3b01      	subs	r3, #1
 800d0be:	68ba      	ldr	r2, [r7, #8]
 800d0c0:	8912      	ldrh	r2, [r2, #8]
 800d0c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0c6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800d0c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d0ca:	8b7b      	ldrh	r3, [r7, #26]
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d90b      	bls.n	800d0e8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800d0d0:	8b7b      	ldrh	r3, [r7, #26]
 800d0d2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d0d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d0d6:	68ba      	ldr	r2, [r7, #8]
 800d0d8:	8912      	ldrh	r2, [r2, #8]
 800d0da:	fb02 f203 	mul.w	r2, r2, r3
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	611a      	str	r2, [r3, #16]
 800d0e2:	e001      	b.n	800d0e8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	78db      	ldrb	r3, [r3, #3]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d007      	beq.n	800d100 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d0f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d0f2:	68ba      	ldr	r2, [r7, #8]
 800d0f4:	8912      	ldrh	r2, [r2, #8]
 800d0f6:	fb02 f203 	mul.w	r2, r2, r3
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	611a      	str	r2, [r3, #16]
 800d0fe:	e003      	b.n	800d108 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	695a      	ldr	r2, [r3, #20]
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	691b      	ldr	r3, [r3, #16]
 800d10c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d110:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d112:	04d9      	lsls	r1, r3, #19
 800d114:	4b63      	ldr	r3, [pc, #396]	; (800d2a4 <USB_HC_StartXfer+0x280>)
 800d116:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d118:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	7a9b      	ldrb	r3, [r3, #10]
 800d11e:	075b      	lsls	r3, r3, #29
 800d120:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d124:	69f9      	ldr	r1, [r7, #28]
 800d126:	0148      	lsls	r0, r1, #5
 800d128:	6a39      	ldr	r1, [r7, #32]
 800d12a:	4401      	add	r1, r0
 800d12c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d130:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d132:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d134:	79fb      	ldrb	r3, [r7, #7]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d009      	beq.n	800d14e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	68d9      	ldr	r1, [r3, #12]
 800d13e:	69fb      	ldr	r3, [r7, #28]
 800d140:	015a      	lsls	r2, r3, #5
 800d142:	6a3b      	ldr	r3, [r7, #32]
 800d144:	4413      	add	r3, r2
 800d146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d14a:	460a      	mov	r2, r1
 800d14c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d14e:	6a3b      	ldr	r3, [r7, #32]
 800d150:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d154:	689b      	ldr	r3, [r3, #8]
 800d156:	f003 0301 	and.w	r3, r3, #1
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	bf0c      	ite	eq
 800d15e:	2301      	moveq	r3, #1
 800d160:	2300      	movne	r3, #0
 800d162:	b2db      	uxtb	r3, r3
 800d164:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d166:	69fb      	ldr	r3, [r7, #28]
 800d168:	015a      	lsls	r2, r3, #5
 800d16a:	6a3b      	ldr	r3, [r7, #32]
 800d16c:	4413      	add	r3, r2
 800d16e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	69fa      	ldr	r2, [r7, #28]
 800d176:	0151      	lsls	r1, r2, #5
 800d178:	6a3a      	ldr	r2, [r7, #32]
 800d17a:	440a      	add	r2, r1
 800d17c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d180:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d184:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d186:	69fb      	ldr	r3, [r7, #28]
 800d188:	015a      	lsls	r2, r3, #5
 800d18a:	6a3b      	ldr	r3, [r7, #32]
 800d18c:	4413      	add	r3, r2
 800d18e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d192:	681a      	ldr	r2, [r3, #0]
 800d194:	7e7b      	ldrb	r3, [r7, #25]
 800d196:	075b      	lsls	r3, r3, #29
 800d198:	69f9      	ldr	r1, [r7, #28]
 800d19a:	0148      	lsls	r0, r1, #5
 800d19c:	6a39      	ldr	r1, [r7, #32]
 800d19e:	4401      	add	r1, r0
 800d1a0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800d1a4:	4313      	orrs	r3, r2
 800d1a6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d1a8:	69fb      	ldr	r3, [r7, #28]
 800d1aa:	015a      	lsls	r2, r3, #5
 800d1ac:	6a3b      	ldr	r3, [r7, #32]
 800d1ae:	4413      	add	r3, r2
 800d1b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d1be:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	78db      	ldrb	r3, [r3, #3]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d004      	beq.n	800d1d2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d1ce:	613b      	str	r3, [r7, #16]
 800d1d0:	e003      	b.n	800d1da <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d1d8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d1e0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d1e2:	69fb      	ldr	r3, [r7, #28]
 800d1e4:	015a      	lsls	r2, r3, #5
 800d1e6:	6a3b      	ldr	r3, [r7, #32]
 800d1e8:	4413      	add	r3, r2
 800d1ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800d1f4:	79fb      	ldrb	r3, [r7, #7]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d001      	beq.n	800d1fe <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	e04e      	b.n	800d29c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	78db      	ldrb	r3, [r3, #3]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d149      	bne.n	800d29a <USB_HC_StartXfer+0x276>
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	695b      	ldr	r3, [r3, #20]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d045      	beq.n	800d29a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	79db      	ldrb	r3, [r3, #7]
 800d212:	2b03      	cmp	r3, #3
 800d214:	d830      	bhi.n	800d278 <USB_HC_StartXfer+0x254>
 800d216:	a201      	add	r2, pc, #4	; (adr r2, 800d21c <USB_HC_StartXfer+0x1f8>)
 800d218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d21c:	0800d22d 	.word	0x0800d22d
 800d220:	0800d251 	.word	0x0800d251
 800d224:	0800d22d 	.word	0x0800d22d
 800d228:	0800d251 	.word	0x0800d251
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	695b      	ldr	r3, [r3, #20]
 800d230:	3303      	adds	r3, #3
 800d232:	089b      	lsrs	r3, r3, #2
 800d234:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d236:	8afa      	ldrh	r2, [r7, #22]
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d23c:	b29b      	uxth	r3, r3
 800d23e:	429a      	cmp	r2, r3
 800d240:	d91c      	bls.n	800d27c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	699b      	ldr	r3, [r3, #24]
 800d246:	f043 0220 	orr.w	r2, r3, #32
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	619a      	str	r2, [r3, #24]
        }
        break;
 800d24e:	e015      	b.n	800d27c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	695b      	ldr	r3, [r3, #20]
 800d254:	3303      	adds	r3, #3
 800d256:	089b      	lsrs	r3, r3, #2
 800d258:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d25a:	8afa      	ldrh	r2, [r7, #22]
 800d25c:	6a3b      	ldr	r3, [r7, #32]
 800d25e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d262:	691b      	ldr	r3, [r3, #16]
 800d264:	b29b      	uxth	r3, r3
 800d266:	429a      	cmp	r2, r3
 800d268:	d90a      	bls.n	800d280 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	699b      	ldr	r3, [r3, #24]
 800d26e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	619a      	str	r2, [r3, #24]
        }
        break;
 800d276:	e003      	b.n	800d280 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800d278:	bf00      	nop
 800d27a:	e002      	b.n	800d282 <USB_HC_StartXfer+0x25e>
        break;
 800d27c:	bf00      	nop
 800d27e:	e000      	b.n	800d282 <USB_HC_StartXfer+0x25e>
        break;
 800d280:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	68d9      	ldr	r1, [r3, #12]
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	785a      	ldrb	r2, [r3, #1]
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	695b      	ldr	r3, [r3, #20]
 800d28e:	b29b      	uxth	r3, r3
 800d290:	2000      	movs	r0, #0
 800d292:	9000      	str	r0, [sp, #0]
 800d294:	68f8      	ldr	r0, [r7, #12]
 800d296:	f7ff fb8d 	bl	800c9b4 <USB_WritePacket>
  }

  return HAL_OK;
 800d29a:	2300      	movs	r3, #0
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	3728      	adds	r7, #40	; 0x28
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}
 800d2a4:	1ff80000 	.word	0x1ff80000

0800d2a8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b085      	sub	sp, #20
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d2ba:	695b      	ldr	r3, [r3, #20]
 800d2bc:	b29b      	uxth	r3, r3
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3714      	adds	r7, #20
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr

0800d2ca <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800d2ca:	b480      	push	{r7}
 800d2cc:	b089      	sub	sp, #36	; 0x24
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
 800d2d2:	460b      	mov	r3, r1
 800d2d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800d2da:	78fb      	ldrb	r3, [r7, #3]
 800d2dc:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	015a      	lsls	r2, r3, #5
 800d2e6:	69bb      	ldr	r3, [r7, #24]
 800d2e8:	4413      	add	r3, r2
 800d2ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	0c9b      	lsrs	r3, r3, #18
 800d2f2:	f003 0303 	and.w	r3, r3, #3
 800d2f6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	015a      	lsls	r2, r3, #5
 800d2fc:	69bb      	ldr	r3, [r7, #24]
 800d2fe:	4413      	add	r3, r2
 800d300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	0fdb      	lsrs	r3, r3, #31
 800d308:	f003 0301 	and.w	r3, r3, #1
 800d30c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	689b      	ldr	r3, [r3, #8]
 800d312:	f003 0320 	and.w	r3, r3, #32
 800d316:	2b20      	cmp	r3, #32
 800d318:	d104      	bne.n	800d324 <USB_HC_Halt+0x5a>
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d101      	bne.n	800d324 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800d320:	2300      	movs	r3, #0
 800d322:	e0e8      	b.n	800d4f6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d002      	beq.n	800d330 <USB_HC_Halt+0x66>
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	2b02      	cmp	r3, #2
 800d32e:	d173      	bne.n	800d418 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	015a      	lsls	r2, r3, #5
 800d334:	69bb      	ldr	r3, [r7, #24]
 800d336:	4413      	add	r3, r2
 800d338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	697a      	ldr	r2, [r7, #20]
 800d340:	0151      	lsls	r1, r2, #5
 800d342:	69ba      	ldr	r2, [r7, #24]
 800d344:	440a      	add	r2, r1
 800d346:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d34a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d34e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	689b      	ldr	r3, [r3, #8]
 800d354:	f003 0320 	and.w	r3, r3, #32
 800d358:	2b00      	cmp	r3, #0
 800d35a:	f040 80cb 	bne.w	800d4f4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d362:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d366:	2b00      	cmp	r3, #0
 800d368:	d143      	bne.n	800d3f2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	015a      	lsls	r2, r3, #5
 800d36e:	69bb      	ldr	r3, [r7, #24]
 800d370:	4413      	add	r3, r2
 800d372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	697a      	ldr	r2, [r7, #20]
 800d37a:	0151      	lsls	r1, r2, #5
 800d37c:	69ba      	ldr	r2, [r7, #24]
 800d37e:	440a      	add	r2, r1
 800d380:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d384:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d388:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	015a      	lsls	r2, r3, #5
 800d38e:	69bb      	ldr	r3, [r7, #24]
 800d390:	4413      	add	r3, r2
 800d392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	697a      	ldr	r2, [r7, #20]
 800d39a:	0151      	lsls	r1, r2, #5
 800d39c:	69ba      	ldr	r2, [r7, #24]
 800d39e:	440a      	add	r2, r1
 800d3a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d3a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d3a8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	015a      	lsls	r2, r3, #5
 800d3ae:	69bb      	ldr	r3, [r7, #24]
 800d3b0:	4413      	add	r3, r2
 800d3b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	697a      	ldr	r2, [r7, #20]
 800d3ba:	0151      	lsls	r1, r2, #5
 800d3bc:	69ba      	ldr	r2, [r7, #24]
 800d3be:	440a      	add	r2, r1
 800d3c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d3c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d3c8:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800d3ca:	69fb      	ldr	r3, [r7, #28]
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	61fb      	str	r3, [r7, #28]
 800d3d0:	69fb      	ldr	r3, [r7, #28]
 800d3d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d3d6:	d81d      	bhi.n	800d414 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	015a      	lsls	r2, r3, #5
 800d3dc:	69bb      	ldr	r3, [r7, #24]
 800d3de:	4413      	add	r3, r2
 800d3e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d3ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d3ee:	d0ec      	beq.n	800d3ca <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d3f0:	e080      	b.n	800d4f4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	015a      	lsls	r2, r3, #5
 800d3f6:	69bb      	ldr	r3, [r7, #24]
 800d3f8:	4413      	add	r3, r2
 800d3fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	697a      	ldr	r2, [r7, #20]
 800d402:	0151      	lsls	r1, r2, #5
 800d404:	69ba      	ldr	r2, [r7, #24]
 800d406:	440a      	add	r2, r1
 800d408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d40c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d410:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d412:	e06f      	b.n	800d4f4 <USB_HC_Halt+0x22a>
            break;
 800d414:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d416:	e06d      	b.n	800d4f4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	015a      	lsls	r2, r3, #5
 800d41c:	69bb      	ldr	r3, [r7, #24]
 800d41e:	4413      	add	r3, r2
 800d420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	697a      	ldr	r2, [r7, #20]
 800d428:	0151      	lsls	r1, r2, #5
 800d42a:	69ba      	ldr	r2, [r7, #24]
 800d42c:	440a      	add	r2, r1
 800d42e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d432:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d436:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d438:	69bb      	ldr	r3, [r7, #24]
 800d43a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d43e:	691b      	ldr	r3, [r3, #16]
 800d440:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d444:	2b00      	cmp	r3, #0
 800d446:	d143      	bne.n	800d4d0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	015a      	lsls	r2, r3, #5
 800d44c:	69bb      	ldr	r3, [r7, #24]
 800d44e:	4413      	add	r3, r2
 800d450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	697a      	ldr	r2, [r7, #20]
 800d458:	0151      	lsls	r1, r2, #5
 800d45a:	69ba      	ldr	r2, [r7, #24]
 800d45c:	440a      	add	r2, r1
 800d45e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d462:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d466:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	015a      	lsls	r2, r3, #5
 800d46c:	69bb      	ldr	r3, [r7, #24]
 800d46e:	4413      	add	r3, r2
 800d470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	697a      	ldr	r2, [r7, #20]
 800d478:	0151      	lsls	r1, r2, #5
 800d47a:	69ba      	ldr	r2, [r7, #24]
 800d47c:	440a      	add	r2, r1
 800d47e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d482:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d486:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	015a      	lsls	r2, r3, #5
 800d48c:	69bb      	ldr	r3, [r7, #24]
 800d48e:	4413      	add	r3, r2
 800d490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	697a      	ldr	r2, [r7, #20]
 800d498:	0151      	lsls	r1, r2, #5
 800d49a:	69ba      	ldr	r2, [r7, #24]
 800d49c:	440a      	add	r2, r1
 800d49e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d4a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d4a6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800d4a8:	69fb      	ldr	r3, [r7, #28]
 800d4aa:	3301      	adds	r3, #1
 800d4ac:	61fb      	str	r3, [r7, #28]
 800d4ae:	69fb      	ldr	r3, [r7, #28]
 800d4b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d4b4:	d81d      	bhi.n	800d4f2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	015a      	lsls	r2, r3, #5
 800d4ba:	69bb      	ldr	r3, [r7, #24]
 800d4bc:	4413      	add	r3, r2
 800d4be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d4c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4cc:	d0ec      	beq.n	800d4a8 <USB_HC_Halt+0x1de>
 800d4ce:	e011      	b.n	800d4f4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	015a      	lsls	r2, r3, #5
 800d4d4:	69bb      	ldr	r3, [r7, #24]
 800d4d6:	4413      	add	r3, r2
 800d4d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	697a      	ldr	r2, [r7, #20]
 800d4e0:	0151      	lsls	r1, r2, #5
 800d4e2:	69ba      	ldr	r2, [r7, #24]
 800d4e4:	440a      	add	r2, r1
 800d4e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d4ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d4ee:	6013      	str	r3, [r2, #0]
 800d4f0:	e000      	b.n	800d4f4 <USB_HC_Halt+0x22a>
          break;
 800d4f2:	bf00      	nop
    }
  }

  return HAL_OK;
 800d4f4:	2300      	movs	r3, #0
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3724      	adds	r7, #36	; 0x24
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d500:	4770      	bx	lr
	...

0800d504 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800d504:	b480      	push	{r7}
 800d506:	b087      	sub	sp, #28
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	460b      	mov	r3, r1
 800d50e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800d514:	78fb      	ldrb	r3, [r7, #3]
 800d516:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800d518:	2301      	movs	r3, #1
 800d51a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	04da      	lsls	r2, r3, #19
 800d520:	4b15      	ldr	r3, [pc, #84]	; (800d578 <USB_DoPing+0x74>)
 800d522:	4013      	ands	r3, r2
 800d524:	693a      	ldr	r2, [r7, #16]
 800d526:	0151      	lsls	r1, r2, #5
 800d528:	697a      	ldr	r2, [r7, #20]
 800d52a:	440a      	add	r2, r1
 800d52c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d530:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d534:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	015a      	lsls	r2, r3, #5
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	4413      	add	r3, r2
 800d53e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d54c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d554:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	015a      	lsls	r2, r3, #5
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	4413      	add	r3, r2
 800d55e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d562:	461a      	mov	r2, r3
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800d568:	2300      	movs	r3, #0
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	371c      	adds	r7, #28
 800d56e:	46bd      	mov	sp, r7
 800d570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d574:	4770      	bx	lr
 800d576:	bf00      	nop
 800d578:	1ff80000 	.word	0x1ff80000

0800d57c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b086      	sub	sp, #24
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800d588:	2300      	movs	r3, #0
 800d58a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f7ff f98e 	bl	800c8ae <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800d592:	2110      	movs	r1, #16
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f7ff f9c5 	bl	800c924 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f7ff f9e8 	bl	800c970 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	613b      	str	r3, [r7, #16]
 800d5a4:	e01f      	b.n	800d5e6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800d5a6:	693b      	ldr	r3, [r7, #16]
 800d5a8:	015a      	lsls	r2, r3, #5
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	4413      	add	r3, r2
 800d5ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d5bc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5c4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d5cc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	015a      	lsls	r2, r3, #5
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	4413      	add	r3, r2
 800d5d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5da:	461a      	mov	r2, r3
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	613b      	str	r3, [r7, #16]
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	2b0f      	cmp	r3, #15
 800d5ea:	d9dc      	bls.n	800d5a6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	613b      	str	r3, [r7, #16]
 800d5f0:	e034      	b.n	800d65c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800d5f2:	693b      	ldr	r3, [r7, #16]
 800d5f4:	015a      	lsls	r2, r3, #5
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	4413      	add	r3, r2
 800d5fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d608:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d610:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d618:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d61a:	693b      	ldr	r3, [r7, #16]
 800d61c:	015a      	lsls	r2, r3, #5
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	4413      	add	r3, r2
 800d622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d626:	461a      	mov	r2, r3
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	3301      	adds	r3, #1
 800d630:	617b      	str	r3, [r7, #20]
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d638:	d80c      	bhi.n	800d654 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	015a      	lsls	r2, r3, #5
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	4413      	add	r3, r2
 800d642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d64c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d650:	d0ec      	beq.n	800d62c <USB_StopHost+0xb0>
 800d652:	e000      	b.n	800d656 <USB_StopHost+0xda>
        break;
 800d654:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	3301      	adds	r3, #1
 800d65a:	613b      	str	r3, [r7, #16]
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	2b0f      	cmp	r3, #15
 800d660:	d9c7      	bls.n	800d5f2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d668:	461a      	mov	r2, r3
 800d66a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d66e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d676:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f7ff f907 	bl	800c88c <USB_EnableGlobalInt>

  return HAL_OK;
 800d67e:	2300      	movs	r3, #0
}
 800d680:	4618      	mov	r0, r3
 800d682:	3718      	adds	r7, #24
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}

0800d688 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d68c:	4904      	ldr	r1, [pc, #16]	; (800d6a0 <MX_FATFS_Init+0x18>)
 800d68e:	4805      	ldr	r0, [pc, #20]	; (800d6a4 <MX_FATFS_Init+0x1c>)
 800d690:	f002 f8d8 	bl	800f844 <FATFS_LinkDriver>
 800d694:	4603      	mov	r3, r0
 800d696:	461a      	mov	r2, r3
 800d698:	4b03      	ldr	r3, [pc, #12]	; (800d6a8 <MX_FATFS_Init+0x20>)
 800d69a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d69c:	bf00      	nop
 800d69e:	bd80      	pop	{r7, pc}
 800d6a0:	20001110 	.word	0x20001110
 800d6a4:	08014dfc 	.word	0x08014dfc
 800d6a8:	2000110c 	.word	0x2000110c

0800d6ac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d6b6:	f000 f879 	bl	800d7ac <BSP_SD_IsDetected>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	d001      	beq.n	800d6c4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d6c0:	2302      	movs	r3, #2
 800d6c2:	e012      	b.n	800d6ea <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d6c4:	480b      	ldr	r0, [pc, #44]	; (800d6f4 <BSP_SD_Init+0x48>)
 800d6c6:	f7fb fbc5 	bl	8008e54 <HAL_SD_Init>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d6ce:	79fb      	ldrb	r3, [r7, #7]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d109      	bne.n	800d6e8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d6d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d6d8:	4806      	ldr	r0, [pc, #24]	; (800d6f4 <BSP_SD_Init+0x48>)
 800d6da:	f7fc f9a5 	bl	8009a28 <HAL_SD_ConfigWideBusOperation>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d001      	beq.n	800d6e8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d6e8:	79fb      	ldrb	r3, [r7, #7]
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3708      	adds	r7, #8
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	20000b98 	.word	0x20000b98

0800d6f8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b088      	sub	sp, #32
 800d6fc:	af02      	add	r7, sp, #8
 800d6fe:	60f8      	str	r0, [r7, #12]
 800d700:	60b9      	str	r1, [r7, #8]
 800d702:	607a      	str	r2, [r7, #4]
 800d704:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d706:	2300      	movs	r3, #0
 800d708:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	9300      	str	r3, [sp, #0]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	68ba      	ldr	r2, [r7, #8]
 800d712:	68f9      	ldr	r1, [r7, #12]
 800d714:	4806      	ldr	r0, [pc, #24]	; (800d730 <BSP_SD_ReadBlocks+0x38>)
 800d716:	f7fb fc53 	bl	8008fc0 <HAL_SD_ReadBlocks>
 800d71a:	4603      	mov	r3, r0
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d001      	beq.n	800d724 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d720:	2301      	movs	r3, #1
 800d722:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d724:	7dfb      	ldrb	r3, [r7, #23]
}
 800d726:	4618      	mov	r0, r3
 800d728:	3718      	adds	r7, #24
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
 800d72e:	bf00      	nop
 800d730:	20000b98 	.word	0x20000b98

0800d734 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b088      	sub	sp, #32
 800d738:	af02      	add	r7, sp, #8
 800d73a:	60f8      	str	r0, [r7, #12]
 800d73c:	60b9      	str	r1, [r7, #8]
 800d73e:	607a      	str	r2, [r7, #4]
 800d740:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d742:	2300      	movs	r3, #0
 800d744:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	9300      	str	r3, [sp, #0]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	68ba      	ldr	r2, [r7, #8]
 800d74e:	68f9      	ldr	r1, [r7, #12]
 800d750:	4806      	ldr	r0, [pc, #24]	; (800d76c <BSP_SD_WriteBlocks+0x38>)
 800d752:	f7fb fe13 	bl	800937c <HAL_SD_WriteBlocks>
 800d756:	4603      	mov	r3, r0
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d001      	beq.n	800d760 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d75c:	2301      	movs	r3, #1
 800d75e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d760:	7dfb      	ldrb	r3, [r7, #23]
}
 800d762:	4618      	mov	r0, r3
 800d764:	3718      	adds	r7, #24
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}
 800d76a:	bf00      	nop
 800d76c:	20000b98 	.word	0x20000b98

0800d770 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d774:	4805      	ldr	r0, [pc, #20]	; (800d78c <BSP_SD_GetCardState+0x1c>)
 800d776:	f7fc f9f1 	bl	8009b5c <HAL_SD_GetCardState>
 800d77a:	4603      	mov	r3, r0
 800d77c:	2b04      	cmp	r3, #4
 800d77e:	bf14      	ite	ne
 800d780:	2301      	movne	r3, #1
 800d782:	2300      	moveq	r3, #0
 800d784:	b2db      	uxtb	r3, r3
}
 800d786:	4618      	mov	r0, r3
 800d788:	bd80      	pop	{r7, pc}
 800d78a:	bf00      	nop
 800d78c:	20000b98 	.word	0x20000b98

0800d790 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d798:	6879      	ldr	r1, [r7, #4]
 800d79a:	4803      	ldr	r0, [pc, #12]	; (800d7a8 <BSP_SD_GetCardInfo+0x18>)
 800d79c:	f7fc f918 	bl	80099d0 <HAL_SD_GetCardInfo>
}
 800d7a0:	bf00      	nop
 800d7a2:	3708      	adds	r7, #8
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}
 800d7a8:	20000b98 	.word	0x20000b98

0800d7ac <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b082      	sub	sp, #8
 800d7b0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d7b6:	f000 f80b 	bl	800d7d0 <BSP_PlatformIsDetected>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d101      	bne.n	800d7c4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d7c4:	79fb      	ldrb	r3, [r7, #7]
 800d7c6:	b2db      	uxtb	r3, r3
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3708      	adds	r7, #8
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}

0800d7d0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b082      	sub	sp, #8
 800d7d4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d7da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d7de:	4806      	ldr	r0, [pc, #24]	; (800d7f8 <BSP_PlatformIsDetected+0x28>)
 800d7e0:	f7f7 f898 	bl	8004914 <HAL_GPIO_ReadPin>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d001      	beq.n	800d7ee <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d7ee:	79fb      	ldrb	r3, [r7, #7]
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3708      	adds	r7, #8
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}
 800d7f8:	40020800 	.word	0x40020800

0800d7fc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	4603      	mov	r3, r0
 800d804:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d806:	4b0b      	ldr	r3, [pc, #44]	; (800d834 <SD_CheckStatus+0x38>)
 800d808:	2201      	movs	r2, #1
 800d80a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d80c:	f7ff ffb0 	bl	800d770 <BSP_SD_GetCardState>
 800d810:	4603      	mov	r3, r0
 800d812:	2b00      	cmp	r3, #0
 800d814:	d107      	bne.n	800d826 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d816:	4b07      	ldr	r3, [pc, #28]	; (800d834 <SD_CheckStatus+0x38>)
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	f023 0301 	bic.w	r3, r3, #1
 800d820:	b2da      	uxtb	r2, r3
 800d822:	4b04      	ldr	r3, [pc, #16]	; (800d834 <SD_CheckStatus+0x38>)
 800d824:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d826:	4b03      	ldr	r3, [pc, #12]	; (800d834 <SD_CheckStatus+0x38>)
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	b2db      	uxtb	r3, r3
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3708      	adds	r7, #8
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}
 800d834:	20000009 	.word	0x20000009

0800d838 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	4603      	mov	r3, r0
 800d840:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d842:	4b0b      	ldr	r3, [pc, #44]	; (800d870 <SD_initialize+0x38>)
 800d844:	2201      	movs	r2, #1
 800d846:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d848:	f7ff ff30 	bl	800d6ac <BSP_SD_Init>
 800d84c:	4603      	mov	r3, r0
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d107      	bne.n	800d862 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800d852:	79fb      	ldrb	r3, [r7, #7]
 800d854:	4618      	mov	r0, r3
 800d856:	f7ff ffd1 	bl	800d7fc <SD_CheckStatus>
 800d85a:	4603      	mov	r3, r0
 800d85c:	461a      	mov	r2, r3
 800d85e:	4b04      	ldr	r3, [pc, #16]	; (800d870 <SD_initialize+0x38>)
 800d860:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d862:	4b03      	ldr	r3, [pc, #12]	; (800d870 <SD_initialize+0x38>)
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	b2db      	uxtb	r3, r3
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3708      	adds	r7, #8
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}
 800d870:	20000009 	.word	0x20000009

0800d874 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b082      	sub	sp, #8
 800d878:	af00      	add	r7, sp, #0
 800d87a:	4603      	mov	r3, r0
 800d87c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d87e:	79fb      	ldrb	r3, [r7, #7]
 800d880:	4618      	mov	r0, r3
 800d882:	f7ff ffbb 	bl	800d7fc <SD_CheckStatus>
 800d886:	4603      	mov	r3, r0
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3708      	adds	r7, #8
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b086      	sub	sp, #24
 800d894:	af00      	add	r7, sp, #0
 800d896:	60b9      	str	r1, [r7, #8]
 800d898:	607a      	str	r2, [r7, #4]
 800d89a:	603b      	str	r3, [r7, #0]
 800d89c:	4603      	mov	r3, r0
 800d89e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d8a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8a8:	683a      	ldr	r2, [r7, #0]
 800d8aa:	6879      	ldr	r1, [r7, #4]
 800d8ac:	68b8      	ldr	r0, [r7, #8]
 800d8ae:	f7ff ff23 	bl	800d6f8 <BSP_SD_ReadBlocks>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d107      	bne.n	800d8c8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d8b8:	bf00      	nop
 800d8ba:	f7ff ff59 	bl	800d770 <BSP_SD_GetCardState>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d1fa      	bne.n	800d8ba <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d8c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3718      	adds	r7, #24
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}

0800d8d2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d8d2:	b580      	push	{r7, lr}
 800d8d4:	b086      	sub	sp, #24
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	60b9      	str	r1, [r7, #8]
 800d8da:	607a      	str	r2, [r7, #4]
 800d8dc:	603b      	str	r3, [r7, #0]
 800d8de:	4603      	mov	r3, r0
 800d8e0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800d8e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8ea:	683a      	ldr	r2, [r7, #0]
 800d8ec:	6879      	ldr	r1, [r7, #4]
 800d8ee:	68b8      	ldr	r0, [r7, #8]
 800d8f0:	f7ff ff20 	bl	800d734 <BSP_SD_WriteBlocks>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d107      	bne.n	800d90a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800d8fa:	bf00      	nop
 800d8fc:	f7ff ff38 	bl	800d770 <BSP_SD_GetCardState>
 800d900:	4603      	mov	r3, r0
 800d902:	2b00      	cmp	r3, #0
 800d904:	d1fa      	bne.n	800d8fc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800d906:	2300      	movs	r3, #0
 800d908:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d90a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3718      	adds	r7, #24
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b08c      	sub	sp, #48	; 0x30
 800d918:	af00      	add	r7, sp, #0
 800d91a:	4603      	mov	r3, r0
 800d91c:	603a      	str	r2, [r7, #0]
 800d91e:	71fb      	strb	r3, [r7, #7]
 800d920:	460b      	mov	r3, r1
 800d922:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d924:	2301      	movs	r3, #1
 800d926:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d92a:	4b25      	ldr	r3, [pc, #148]	; (800d9c0 <SD_ioctl+0xac>)
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	f003 0301 	and.w	r3, r3, #1
 800d934:	2b00      	cmp	r3, #0
 800d936:	d001      	beq.n	800d93c <SD_ioctl+0x28>
 800d938:	2303      	movs	r3, #3
 800d93a:	e03c      	b.n	800d9b6 <SD_ioctl+0xa2>

  switch (cmd)
 800d93c:	79bb      	ldrb	r3, [r7, #6]
 800d93e:	2b03      	cmp	r3, #3
 800d940:	d834      	bhi.n	800d9ac <SD_ioctl+0x98>
 800d942:	a201      	add	r2, pc, #4	; (adr r2, 800d948 <SD_ioctl+0x34>)
 800d944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d948:	0800d959 	.word	0x0800d959
 800d94c:	0800d961 	.word	0x0800d961
 800d950:	0800d979 	.word	0x0800d979
 800d954:	0800d993 	.word	0x0800d993
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d958:	2300      	movs	r3, #0
 800d95a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d95e:	e028      	b.n	800d9b2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d960:	f107 030c 	add.w	r3, r7, #12
 800d964:	4618      	mov	r0, r3
 800d966:	f7ff ff13 	bl	800d790 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d96a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d970:	2300      	movs	r3, #0
 800d972:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d976:	e01c      	b.n	800d9b2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d978:	f107 030c 	add.w	r3, r7, #12
 800d97c:	4618      	mov	r0, r3
 800d97e:	f7ff ff07 	bl	800d790 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d984:	b29a      	uxth	r2, r3
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d98a:	2300      	movs	r3, #0
 800d98c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d990:	e00f      	b.n	800d9b2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d992:	f107 030c 	add.w	r3, r7, #12
 800d996:	4618      	mov	r0, r3
 800d998:	f7ff fefa 	bl	800d790 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d99e:	0a5a      	lsrs	r2, r3, #9
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d9aa:	e002      	b.n	800d9b2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d9ac:	2304      	movs	r3, #4
 800d9ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d9b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	3730      	adds	r7, #48	; 0x30
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}
 800d9be:	bf00      	nop
 800d9c0:	20000009 	.word	0x20000009

0800d9c4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800d9c4:	b590      	push	{r4, r7, lr}
 800d9c6:	b089      	sub	sp, #36	; 0x24
 800d9c8:	af04      	add	r7, sp, #16
 800d9ca:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	2202      	movs	r2, #2
 800d9d0:	2102      	movs	r1, #2
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f000 fc66 	bl	800e2a4 <USBH_FindInterface>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d9dc:	7bfb      	ldrb	r3, [r7, #15]
 800d9de:	2bff      	cmp	r3, #255	; 0xff
 800d9e0:	d002      	beq.n	800d9e8 <USBH_CDC_InterfaceInit+0x24>
 800d9e2:	7bfb      	ldrb	r3, [r7, #15]
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	d901      	bls.n	800d9ec <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d9e8:	2302      	movs	r3, #2
 800d9ea:	e13d      	b.n	800dc68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800d9ec:	7bfb      	ldrb	r3, [r7, #15]
 800d9ee:	4619      	mov	r1, r3
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f000 fc3b 	bl	800e26c <USBH_SelectInterface>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800d9fa:	7bbb      	ldrb	r3, [r7, #14]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d001      	beq.n	800da04 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800da00:	2302      	movs	r3, #2
 800da02:	e131      	b.n	800dc68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800da0a:	2050      	movs	r0, #80	; 0x50
 800da0c:	f003 ffde 	bl	80119cc <malloc>
 800da10:	4603      	mov	r3, r0
 800da12:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800da1a:	69db      	ldr	r3, [r3, #28]
 800da1c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d101      	bne.n	800da28 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800da24:	2302      	movs	r3, #2
 800da26:	e11f      	b.n	800dc68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800da28:	2250      	movs	r2, #80	; 0x50
 800da2a:	2100      	movs	r1, #0
 800da2c:	68b8      	ldr	r0, [r7, #8]
 800da2e:	f003 ffeb 	bl	8011a08 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800da32:	7bfb      	ldrb	r3, [r7, #15]
 800da34:	687a      	ldr	r2, [r7, #4]
 800da36:	211a      	movs	r1, #26
 800da38:	fb01 f303 	mul.w	r3, r1, r3
 800da3c:	4413      	add	r3, r2
 800da3e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800da42:	781b      	ldrb	r3, [r3, #0]
 800da44:	b25b      	sxtb	r3, r3
 800da46:	2b00      	cmp	r3, #0
 800da48:	da15      	bge.n	800da76 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800da4a:	7bfb      	ldrb	r3, [r7, #15]
 800da4c:	687a      	ldr	r2, [r7, #4]
 800da4e:	211a      	movs	r1, #26
 800da50:	fb01 f303 	mul.w	r3, r1, r3
 800da54:	4413      	add	r3, r2
 800da56:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800da5a:	781a      	ldrb	r2, [r3, #0]
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800da60:	7bfb      	ldrb	r3, [r7, #15]
 800da62:	687a      	ldr	r2, [r7, #4]
 800da64:	211a      	movs	r1, #26
 800da66:	fb01 f303 	mul.w	r3, r1, r3
 800da6a:	4413      	add	r3, r2
 800da6c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800da70:	881a      	ldrh	r2, [r3, #0]
 800da72:	68bb      	ldr	r3, [r7, #8]
 800da74:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	785b      	ldrb	r3, [r3, #1]
 800da7a:	4619      	mov	r1, r3
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f001 fe32 	bl	800f6e6 <USBH_AllocPipe>
 800da82:	4603      	mov	r3, r0
 800da84:	461a      	mov	r2, r3
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	7819      	ldrb	r1, [r3, #0]
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	7858      	ldrb	r0, [r3, #1]
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800da9e:	68ba      	ldr	r2, [r7, #8]
 800daa0:	8952      	ldrh	r2, [r2, #10]
 800daa2:	9202      	str	r2, [sp, #8]
 800daa4:	2203      	movs	r2, #3
 800daa6:	9201      	str	r2, [sp, #4]
 800daa8:	9300      	str	r3, [sp, #0]
 800daaa:	4623      	mov	r3, r4
 800daac:	4602      	mov	r2, r0
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f001 fdea 	bl	800f688 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	781b      	ldrb	r3, [r3, #0]
 800dab8:	2200      	movs	r2, #0
 800daba:	4619      	mov	r1, r3
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f002 f949 	bl	800fd54 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800dac2:	2300      	movs	r3, #0
 800dac4:	2200      	movs	r2, #0
 800dac6:	210a      	movs	r1, #10
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f000 fbeb 	bl	800e2a4 <USBH_FindInterface>
 800dace:	4603      	mov	r3, r0
 800dad0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800dad2:	7bfb      	ldrb	r3, [r7, #15]
 800dad4:	2bff      	cmp	r3, #255	; 0xff
 800dad6:	d002      	beq.n	800dade <USBH_CDC_InterfaceInit+0x11a>
 800dad8:	7bfb      	ldrb	r3, [r7, #15]
 800dada:	2b01      	cmp	r3, #1
 800dadc:	d901      	bls.n	800dae2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800dade:	2302      	movs	r3, #2
 800dae0:	e0c2      	b.n	800dc68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800dae2:	7bfb      	ldrb	r3, [r7, #15]
 800dae4:	687a      	ldr	r2, [r7, #4]
 800dae6:	211a      	movs	r1, #26
 800dae8:	fb01 f303 	mul.w	r3, r1, r3
 800daec:	4413      	add	r3, r2
 800daee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800daf2:	781b      	ldrb	r3, [r3, #0]
 800daf4:	b25b      	sxtb	r3, r3
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	da16      	bge.n	800db28 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800dafa:	7bfb      	ldrb	r3, [r7, #15]
 800dafc:	687a      	ldr	r2, [r7, #4]
 800dafe:	211a      	movs	r1, #26
 800db00:	fb01 f303 	mul.w	r3, r1, r3
 800db04:	4413      	add	r3, r2
 800db06:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800db0a:	781a      	ldrb	r2, [r3, #0]
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800db10:	7bfb      	ldrb	r3, [r7, #15]
 800db12:	687a      	ldr	r2, [r7, #4]
 800db14:	211a      	movs	r1, #26
 800db16:	fb01 f303 	mul.w	r3, r1, r3
 800db1a:	4413      	add	r3, r2
 800db1c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800db20:	881a      	ldrh	r2, [r3, #0]
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	835a      	strh	r2, [r3, #26]
 800db26:	e015      	b.n	800db54 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800db28:	7bfb      	ldrb	r3, [r7, #15]
 800db2a:	687a      	ldr	r2, [r7, #4]
 800db2c:	211a      	movs	r1, #26
 800db2e:	fb01 f303 	mul.w	r3, r1, r3
 800db32:	4413      	add	r3, r2
 800db34:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800db38:	781a      	ldrb	r2, [r3, #0]
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800db3e:	7bfb      	ldrb	r3, [r7, #15]
 800db40:	687a      	ldr	r2, [r7, #4]
 800db42:	211a      	movs	r1, #26
 800db44:	fb01 f303 	mul.w	r3, r1, r3
 800db48:	4413      	add	r3, r2
 800db4a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800db4e:	881a      	ldrh	r2, [r3, #0]
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800db54:	7bfb      	ldrb	r3, [r7, #15]
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	211a      	movs	r1, #26
 800db5a:	fb01 f303 	mul.w	r3, r1, r3
 800db5e:	4413      	add	r3, r2
 800db60:	f203 3356 	addw	r3, r3, #854	; 0x356
 800db64:	781b      	ldrb	r3, [r3, #0]
 800db66:	b25b      	sxtb	r3, r3
 800db68:	2b00      	cmp	r3, #0
 800db6a:	da16      	bge.n	800db9a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800db6c:	7bfb      	ldrb	r3, [r7, #15]
 800db6e:	687a      	ldr	r2, [r7, #4]
 800db70:	211a      	movs	r1, #26
 800db72:	fb01 f303 	mul.w	r3, r1, r3
 800db76:	4413      	add	r3, r2
 800db78:	f203 3356 	addw	r3, r3, #854	; 0x356
 800db7c:	781a      	ldrb	r2, [r3, #0]
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800db82:	7bfb      	ldrb	r3, [r7, #15]
 800db84:	687a      	ldr	r2, [r7, #4]
 800db86:	211a      	movs	r1, #26
 800db88:	fb01 f303 	mul.w	r3, r1, r3
 800db8c:	4413      	add	r3, r2
 800db8e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800db92:	881a      	ldrh	r2, [r3, #0]
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	835a      	strh	r2, [r3, #26]
 800db98:	e015      	b.n	800dbc6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800db9a:	7bfb      	ldrb	r3, [r7, #15]
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	211a      	movs	r1, #26
 800dba0:	fb01 f303 	mul.w	r3, r1, r3
 800dba4:	4413      	add	r3, r2
 800dba6:	f203 3356 	addw	r3, r3, #854	; 0x356
 800dbaa:	781a      	ldrb	r2, [r3, #0]
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800dbb0:	7bfb      	ldrb	r3, [r7, #15]
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	211a      	movs	r1, #26
 800dbb6:	fb01 f303 	mul.w	r3, r1, r3
 800dbba:	4413      	add	r3, r2
 800dbbc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800dbc0:	881a      	ldrh	r2, [r3, #0]
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	7b9b      	ldrb	r3, [r3, #14]
 800dbca:	4619      	mov	r1, r3
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f001 fd8a 	bl	800f6e6 <USBH_AllocPipe>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	461a      	mov	r2, r3
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	7bdb      	ldrb	r3, [r3, #15]
 800dbde:	4619      	mov	r1, r3
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f001 fd80 	bl	800f6e6 <USBH_AllocPipe>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	461a      	mov	r2, r3
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	7b59      	ldrb	r1, [r3, #13]
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	7b98      	ldrb	r0, [r3, #14]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dc02:	68ba      	ldr	r2, [r7, #8]
 800dc04:	8b12      	ldrh	r2, [r2, #24]
 800dc06:	9202      	str	r2, [sp, #8]
 800dc08:	2202      	movs	r2, #2
 800dc0a:	9201      	str	r2, [sp, #4]
 800dc0c:	9300      	str	r3, [sp, #0]
 800dc0e:	4623      	mov	r3, r4
 800dc10:	4602      	mov	r2, r0
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f001 fd38 	bl	800f688 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	7b19      	ldrb	r1, [r3, #12]
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	7bd8      	ldrb	r0, [r3, #15]
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dc2c:	68ba      	ldr	r2, [r7, #8]
 800dc2e:	8b52      	ldrh	r2, [r2, #26]
 800dc30:	9202      	str	r2, [sp, #8]
 800dc32:	2202      	movs	r2, #2
 800dc34:	9201      	str	r2, [sp, #4]
 800dc36:	9300      	str	r3, [sp, #0]
 800dc38:	4623      	mov	r3, r4
 800dc3a:	4602      	mov	r2, r0
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f001 fd23 	bl	800f688 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	2200      	movs	r2, #0
 800dc46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	7b5b      	ldrb	r3, [r3, #13]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	4619      	mov	r1, r3
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f002 f87e 	bl	800fd54 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	7b1b      	ldrb	r3, [r3, #12]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	4619      	mov	r1, r3
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f002 f877 	bl	800fd54 <USBH_LL_SetToggle>

  return USBH_OK;
 800dc66:	2300      	movs	r3, #0
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3714      	adds	r7, #20
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd90      	pop	{r4, r7, pc}

0800dc70 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b084      	sub	sp, #16
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc7e:	69db      	ldr	r3, [r3, #28]
 800dc80:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d00e      	beq.n	800dca8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	4619      	mov	r1, r3
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f001 fd18 	bl	800f6c6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	781b      	ldrb	r3, [r3, #0]
 800dc9a:	4619      	mov	r1, r3
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f001 fd43 	bl	800f728 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2200      	movs	r2, #0
 800dca6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	7b1b      	ldrb	r3, [r3, #12]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d00e      	beq.n	800dcce <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	7b1b      	ldrb	r3, [r3, #12]
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f001 fd05 	bl	800f6c6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	7b1b      	ldrb	r3, [r3, #12]
 800dcc0:	4619      	mov	r1, r3
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f001 fd30 	bl	800f728 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	2200      	movs	r2, #0
 800dccc:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	7b5b      	ldrb	r3, [r3, #13]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d00e      	beq.n	800dcf4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	7b5b      	ldrb	r3, [r3, #13]
 800dcda:	4619      	mov	r1, r3
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f001 fcf2 	bl	800f6c6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	7b5b      	ldrb	r3, [r3, #13]
 800dce6:	4619      	mov	r1, r3
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f001 fd1d 	bl	800f728 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dcfa:	69db      	ldr	r3, [r3, #28]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d00b      	beq.n	800dd18 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dd06:	69db      	ldr	r3, [r3, #28]
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f003 fe67 	bl	80119dc <free>
    phost->pActiveClass->pData = 0U;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dd14:	2200      	movs	r2, #0
 800dd16:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800dd18:	2300      	movs	r3, #0
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3710      	adds	r7, #16
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}

0800dd22 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b084      	sub	sp, #16
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dd30:	69db      	ldr	r3, [r3, #28]
 800dd32:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	3340      	adds	r3, #64	; 0x40
 800dd38:	4619      	mov	r1, r3
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f000 f8b1 	bl	800dea2 <GetLineCoding>
 800dd40:	4603      	mov	r3, r0
 800dd42:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800dd44:	7afb      	ldrb	r3, [r7, #11]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d105      	bne.n	800dd56 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dd50:	2102      	movs	r1, #2
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800dd56:	7afb      	ldrb	r3, [r7, #11]
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3710      	adds	r7, #16
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800dd68:	2301      	movs	r3, #1
 800dd6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dd76:	69db      	ldr	r3, [r3, #28]
 800dd78:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800dd80:	2b04      	cmp	r3, #4
 800dd82:	d877      	bhi.n	800de74 <USBH_CDC_Process+0x114>
 800dd84:	a201      	add	r2, pc, #4	; (adr r2, 800dd8c <USBH_CDC_Process+0x2c>)
 800dd86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd8a:	bf00      	nop
 800dd8c:	0800dda1 	.word	0x0800dda1
 800dd90:	0800dda7 	.word	0x0800dda7
 800dd94:	0800ddd7 	.word	0x0800ddd7
 800dd98:	0800de4b 	.word	0x0800de4b
 800dd9c:	0800de59 	.word	0x0800de59
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800dda0:	2300      	movs	r3, #0
 800dda2:	73fb      	strb	r3, [r7, #15]
      break;
 800dda4:	e06d      	b.n	800de82 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ddaa:	4619      	mov	r1, r3
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f000 f897 	bl	800dee0 <SetLineCoding>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ddb6:	7bbb      	ldrb	r3, [r7, #14]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d104      	bne.n	800ddc6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	2202      	movs	r2, #2
 800ddc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ddc4:	e058      	b.n	800de78 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800ddc6:	7bbb      	ldrb	r3, [r7, #14]
 800ddc8:	2b01      	cmp	r3, #1
 800ddca:	d055      	beq.n	800de78 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	2204      	movs	r2, #4
 800ddd0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ddd4:	e050      	b.n	800de78 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	3340      	adds	r3, #64	; 0x40
 800ddda:	4619      	mov	r1, r3
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f000 f860 	bl	800dea2 <GetLineCoding>
 800dde2:	4603      	mov	r3, r0
 800dde4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800dde6:	7bbb      	ldrb	r3, [r7, #14]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d126      	bne.n	800de3a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ddfe:	791b      	ldrb	r3, [r3, #4]
 800de00:	429a      	cmp	r2, r3
 800de02:	d13b      	bne.n	800de7c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de0e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800de10:	429a      	cmp	r2, r3
 800de12:	d133      	bne.n	800de7c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de1e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800de20:	429a      	cmp	r2, r3
 800de22:	d12b      	bne.n	800de7c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de2c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800de2e:	429a      	cmp	r2, r3
 800de30:	d124      	bne.n	800de7c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f000 f958 	bl	800e0e8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800de38:	e020      	b.n	800de7c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800de3a:	7bbb      	ldrb	r3, [r7, #14]
 800de3c:	2b01      	cmp	r3, #1
 800de3e:	d01d      	beq.n	800de7c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	2204      	movs	r2, #4
 800de44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800de48:	e018      	b.n	800de7c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f000 f867 	bl	800df1e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	f000 f8da 	bl	800e00a <CDC_ProcessReception>
      break;
 800de56:	e014      	b.n	800de82 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800de58:	2100      	movs	r1, #0
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f000 ffe3 	bl	800ee26 <USBH_ClrFeature>
 800de60:	4603      	mov	r3, r0
 800de62:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800de64:	7bbb      	ldrb	r3, [r7, #14]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d10a      	bne.n	800de80 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	2200      	movs	r2, #0
 800de6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800de72:	e005      	b.n	800de80 <USBH_CDC_Process+0x120>

    default:
      break;
 800de74:	bf00      	nop
 800de76:	e004      	b.n	800de82 <USBH_CDC_Process+0x122>
      break;
 800de78:	bf00      	nop
 800de7a:	e002      	b.n	800de82 <USBH_CDC_Process+0x122>
      break;
 800de7c:	bf00      	nop
 800de7e:	e000      	b.n	800de82 <USBH_CDC_Process+0x122>
      break;
 800de80:	bf00      	nop

  }

  return status;
 800de82:	7bfb      	ldrb	r3, [r7, #15]
}
 800de84:	4618      	mov	r0, r3
 800de86:	3710      	adds	r7, #16
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}

0800de8c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b083      	sub	sp, #12
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800de94:	2300      	movs	r3, #0
}
 800de96:	4618      	mov	r0, r3
 800de98:	370c      	adds	r7, #12
 800de9a:	46bd      	mov	sp, r7
 800de9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea0:	4770      	bx	lr

0800dea2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800dea2:	b580      	push	{r7, lr}
 800dea4:	b082      	sub	sp, #8
 800dea6:	af00      	add	r7, sp, #0
 800dea8:	6078      	str	r0, [r7, #4]
 800deaa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	22a1      	movs	r2, #161	; 0xa1
 800deb0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2221      	movs	r2, #33	; 0x21
 800deb6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2200      	movs	r2, #0
 800debc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2200      	movs	r2, #0
 800dec2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2207      	movs	r2, #7
 800dec8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	2207      	movs	r2, #7
 800dece:	4619      	mov	r1, r3
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f001 f988 	bl	800f1e6 <USBH_CtlReq>
 800ded6:	4603      	mov	r3, r0
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3708      	adds	r7, #8
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b082      	sub	sp, #8
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2221      	movs	r2, #33	; 0x21
 800deee:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2220      	movs	r2, #32
 800def4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2200      	movs	r2, #0
 800defa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2200      	movs	r2, #0
 800df00:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2207      	movs	r2, #7
 800df06:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	2207      	movs	r2, #7
 800df0c:	4619      	mov	r1, r3
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	f001 f969 	bl	800f1e6 <USBH_CtlReq>
 800df14:	4603      	mov	r3, r0
}
 800df16:	4618      	mov	r0, r3
 800df18:	3708      	adds	r7, #8
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}

0800df1e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800df1e:	b580      	push	{r7, lr}
 800df20:	b086      	sub	sp, #24
 800df22:	af02      	add	r7, sp, #8
 800df24:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800df2c:	69db      	ldr	r3, [r3, #28]
 800df2e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800df30:	2300      	movs	r3, #0
 800df32:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800df3a:	2b01      	cmp	r3, #1
 800df3c:	d002      	beq.n	800df44 <CDC_ProcessTransmission+0x26>
 800df3e:	2b02      	cmp	r3, #2
 800df40:	d023      	beq.n	800df8a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800df42:	e05e      	b.n	800e002 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df48:	68fa      	ldr	r2, [r7, #12]
 800df4a:	8b12      	ldrh	r2, [r2, #24]
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d90b      	bls.n	800df68 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	69d9      	ldr	r1, [r3, #28]
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	8b1a      	ldrh	r2, [r3, #24]
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	7b5b      	ldrb	r3, [r3, #13]
 800df5c:	2001      	movs	r0, #1
 800df5e:	9000      	str	r0, [sp, #0]
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f001 fb4e 	bl	800f602 <USBH_BulkSendData>
 800df66:	e00b      	b.n	800df80 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800df70:	b29a      	uxth	r2, r3
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	7b5b      	ldrb	r3, [r3, #13]
 800df76:	2001      	movs	r0, #1
 800df78:	9000      	str	r0, [sp, #0]
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f001 fb41 	bl	800f602 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	2202      	movs	r2, #2
 800df84:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800df88:	e03b      	b.n	800e002 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	7b5b      	ldrb	r3, [r3, #13]
 800df8e:	4619      	mov	r1, r3
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	f001 feb5 	bl	800fd00 <USBH_LL_GetURBState>
 800df96:	4603      	mov	r3, r0
 800df98:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800df9a:	7afb      	ldrb	r3, [r7, #11]
 800df9c:	2b01      	cmp	r3, #1
 800df9e:	d128      	bne.n	800dff2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfa4:	68fa      	ldr	r2, [r7, #12]
 800dfa6:	8b12      	ldrh	r2, [r2, #24]
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	d90e      	bls.n	800dfca <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb0:	68fa      	ldr	r2, [r7, #12]
 800dfb2:	8b12      	ldrh	r2, [r2, #24]
 800dfb4:	1a9a      	subs	r2, r3, r2
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	69db      	ldr	r3, [r3, #28]
 800dfbe:	68fa      	ldr	r2, [r7, #12]
 800dfc0:	8b12      	ldrh	r2, [r2, #24]
 800dfc2:	441a      	add	r2, r3
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	61da      	str	r2, [r3, #28]
 800dfc8:	e002      	b.n	800dfd0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	2200      	movs	r2, #0
 800dfce:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d004      	beq.n	800dfe2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	2201      	movs	r2, #1
 800dfdc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800dfe0:	e00e      	b.n	800e000 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f000 f868 	bl	800e0c0 <USBH_CDC_TransmitCallback>
      break;
 800dff0:	e006      	b.n	800e000 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800dff2:	7afb      	ldrb	r3, [r7, #11]
 800dff4:	2b02      	cmp	r3, #2
 800dff6:	d103      	bne.n	800e000 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	2201      	movs	r2, #1
 800dffc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e000:	bf00      	nop
  }
}
 800e002:	bf00      	nop
 800e004:	3710      	adds	r7, #16
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}

0800e00a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800e00a:	b580      	push	{r7, lr}
 800e00c:	b086      	sub	sp, #24
 800e00e:	af00      	add	r7, sp, #0
 800e010:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e018:	69db      	ldr	r3, [r3, #28]
 800e01a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e01c:	2300      	movs	r3, #0
 800e01e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800e026:	2b03      	cmp	r3, #3
 800e028:	d002      	beq.n	800e030 <CDC_ProcessReception+0x26>
 800e02a:	2b04      	cmp	r3, #4
 800e02c:	d00e      	beq.n	800e04c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800e02e:	e043      	b.n	800e0b8 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	6a19      	ldr	r1, [r3, #32]
 800e034:	697b      	ldr	r3, [r7, #20]
 800e036:	8b5a      	ldrh	r2, [r3, #26]
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	7b1b      	ldrb	r3, [r3, #12]
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f001 fb05 	bl	800f64c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	2204      	movs	r2, #4
 800e046:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e04a:	e035      	b.n	800e0b8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	7b1b      	ldrb	r3, [r3, #12]
 800e050:	4619      	mov	r1, r3
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f001 fe54 	bl	800fd00 <USBH_LL_GetURBState>
 800e058:	4603      	mov	r3, r0
 800e05a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800e05c:	7cfb      	ldrb	r3, [r7, #19]
 800e05e:	2b01      	cmp	r3, #1
 800e060:	d129      	bne.n	800e0b6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	7b1b      	ldrb	r3, [r3, #12]
 800e066:	4619      	mov	r1, r3
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f001 fdb7 	bl	800fbdc <USBH_LL_GetLastXferSize>
 800e06e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e074:	68fa      	ldr	r2, [r7, #12]
 800e076:	429a      	cmp	r2, r3
 800e078:	d016      	beq.n	800e0a8 <CDC_ProcessReception+0x9e>
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	8b5b      	ldrh	r3, [r3, #26]
 800e07e:	461a      	mov	r2, r3
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	4293      	cmp	r3, r2
 800e084:	d910      	bls.n	800e0a8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	1ad2      	subs	r2, r2, r3
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	6a1a      	ldr	r2, [r3, #32]
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	441a      	add	r2, r3
 800e09a:	697b      	ldr	r3, [r7, #20]
 800e09c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	2203      	movs	r2, #3
 800e0a2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e0a6:	e006      	b.n	800e0b6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f000 f80f 	bl	800e0d4 <USBH_CDC_ReceiveCallback>
      break;
 800e0b6:	bf00      	nop
  }
}
 800e0b8:	bf00      	nop
 800e0ba:	3718      	adds	r7, #24
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	b083      	sub	sp, #12
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e0c8:	bf00      	nop
 800e0ca:	370c      	adds	r7, #12
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr

0800e0d4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b083      	sub	sp, #12
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e0dc:	bf00      	nop
 800e0de:	370c      	adds	r7, #12
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr

0800e0e8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b083      	sub	sp, #12
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e0f0:	bf00      	nop
 800e0f2:	370c      	adds	r7, #12
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr

0800e0fc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	60b9      	str	r1, [r7, #8]
 800e106:	4613      	mov	r3, r2
 800e108:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d101      	bne.n	800e114 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e110:	2302      	movs	r3, #2
 800e112:	e029      	b.n	800e168 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	79fa      	ldrb	r2, [r7, #7]
 800e118:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	2200      	movs	r2, #0
 800e120:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	2200      	movs	r2, #0
 800e128:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800e12c:	68f8      	ldr	r0, [r7, #12]
 800e12e:	f000 f81f 	bl	800e170 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	2200      	movs	r2, #0
 800e136:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2200      	movs	r2, #0
 800e13e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2200      	movs	r2, #0
 800e146:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	2200      	movs	r2, #0
 800e14e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d003      	beq.n	800e160 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	68ba      	ldr	r2, [r7, #8]
 800e15c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800e160:	68f8      	ldr	r0, [r7, #12]
 800e162:	f001 fc87 	bl	800fa74 <USBH_LL_Init>

  return USBH_OK;
 800e166:	2300      	movs	r3, #0
}
 800e168:	4618      	mov	r0, r3
 800e16a:	3710      	adds	r7, #16
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}

0800e170 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e170:	b480      	push	{r7}
 800e172:	b085      	sub	sp, #20
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e178:	2300      	movs	r3, #0
 800e17a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e17c:	2300      	movs	r3, #0
 800e17e:	60fb      	str	r3, [r7, #12]
 800e180:	e009      	b.n	800e196 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800e182:	687a      	ldr	r2, [r7, #4]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	33e0      	adds	r3, #224	; 0xe0
 800e188:	009b      	lsls	r3, r3, #2
 800e18a:	4413      	add	r3, r2
 800e18c:	2200      	movs	r2, #0
 800e18e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	3301      	adds	r3, #1
 800e194:	60fb      	str	r3, [r7, #12]
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	2b0e      	cmp	r3, #14
 800e19a:	d9f2      	bls.n	800e182 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e19c:	2300      	movs	r3, #0
 800e19e:	60fb      	str	r3, [r7, #12]
 800e1a0:	e009      	b.n	800e1b6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	4413      	add	r3, r2
 800e1a8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	3301      	adds	r3, #1
 800e1b4:	60fb      	str	r3, [r7, #12]
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e1bc:	d3f1      	bcc.n	800e1a2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2201      	movs	r2, #1
 800e1ce:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2201      	movs	r2, #1
 800e1dc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2240      	movs	r2, #64	; 0x40
 800e1e2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2201      	movs	r2, #1
 800e1f6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2200      	movs	r2, #0
 800e206:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800e20a:	2300      	movs	r3, #0
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3714      	adds	r7, #20
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr

0800e218 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e218:	b480      	push	{r7}
 800e21a:	b085      	sub	sp, #20
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800e222:	2300      	movs	r3, #0
 800e224:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d016      	beq.n	800e25a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e232:	2b00      	cmp	r3, #0
 800e234:	d10e      	bne.n	800e254 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e23c:	1c59      	adds	r1, r3, #1
 800e23e:	687a      	ldr	r2, [r7, #4]
 800e240:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800e244:	687a      	ldr	r2, [r7, #4]
 800e246:	33de      	adds	r3, #222	; 0xde
 800e248:	6839      	ldr	r1, [r7, #0]
 800e24a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800e24e:	2300      	movs	r3, #0
 800e250:	73fb      	strb	r3, [r7, #15]
 800e252:	e004      	b.n	800e25e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800e254:	2302      	movs	r3, #2
 800e256:	73fb      	strb	r3, [r7, #15]
 800e258:	e001      	b.n	800e25e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800e25a:	2302      	movs	r3, #2
 800e25c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e25e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e260:	4618      	mov	r0, r3
 800e262:	3714      	adds	r7, #20
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr

0800e26c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e26c:	b480      	push	{r7}
 800e26e:	b085      	sub	sp, #20
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	460b      	mov	r3, r1
 800e276:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800e278:	2300      	movs	r3, #0
 800e27a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800e282:	78fa      	ldrb	r2, [r7, #3]
 800e284:	429a      	cmp	r2, r3
 800e286:	d204      	bcs.n	800e292 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	78fa      	ldrb	r2, [r7, #3]
 800e28c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800e290:	e001      	b.n	800e296 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800e292:	2302      	movs	r3, #2
 800e294:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e296:	7bfb      	ldrb	r3, [r7, #15]
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3714      	adds	r7, #20
 800e29c:	46bd      	mov	sp, r7
 800e29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a2:	4770      	bx	lr

0800e2a4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e2a4:	b480      	push	{r7}
 800e2a6:	b087      	sub	sp, #28
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	4608      	mov	r0, r1
 800e2ae:	4611      	mov	r1, r2
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	70fb      	strb	r3, [r7, #3]
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	70bb      	strb	r3, [r7, #2]
 800e2ba:	4613      	mov	r3, r2
 800e2bc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e2cc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e2ce:	e025      	b.n	800e31c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e2d0:	7dfb      	ldrb	r3, [r7, #23]
 800e2d2:	221a      	movs	r2, #26
 800e2d4:	fb02 f303 	mul.w	r3, r2, r3
 800e2d8:	3308      	adds	r3, #8
 800e2da:	68fa      	ldr	r2, [r7, #12]
 800e2dc:	4413      	add	r3, r2
 800e2de:	3302      	adds	r3, #2
 800e2e0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	795b      	ldrb	r3, [r3, #5]
 800e2e6:	78fa      	ldrb	r2, [r7, #3]
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d002      	beq.n	800e2f2 <USBH_FindInterface+0x4e>
 800e2ec:	78fb      	ldrb	r3, [r7, #3]
 800e2ee:	2bff      	cmp	r3, #255	; 0xff
 800e2f0:	d111      	bne.n	800e316 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e2f2:	693b      	ldr	r3, [r7, #16]
 800e2f4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e2f6:	78ba      	ldrb	r2, [r7, #2]
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	d002      	beq.n	800e302 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e2fc:	78bb      	ldrb	r3, [r7, #2]
 800e2fe:	2bff      	cmp	r3, #255	; 0xff
 800e300:	d109      	bne.n	800e316 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e306:	787a      	ldrb	r2, [r7, #1]
 800e308:	429a      	cmp	r2, r3
 800e30a:	d002      	beq.n	800e312 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e30c:	787b      	ldrb	r3, [r7, #1]
 800e30e:	2bff      	cmp	r3, #255	; 0xff
 800e310:	d101      	bne.n	800e316 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800e312:	7dfb      	ldrb	r3, [r7, #23]
 800e314:	e006      	b.n	800e324 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800e316:	7dfb      	ldrb	r3, [r7, #23]
 800e318:	3301      	adds	r3, #1
 800e31a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e31c:	7dfb      	ldrb	r3, [r7, #23]
 800e31e:	2b01      	cmp	r3, #1
 800e320:	d9d6      	bls.n	800e2d0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800e322:	23ff      	movs	r3, #255	; 0xff
}
 800e324:	4618      	mov	r0, r3
 800e326:	371c      	adds	r7, #28
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr

0800e330 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b082      	sub	sp, #8
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f001 fbd7 	bl	800faec <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800e33e:	2101      	movs	r1, #1
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f001 fcf0 	bl	800fd26 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e346:	2300      	movs	r3, #0
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3708      	adds	r7, #8
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}

0800e350 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b088      	sub	sp, #32
 800e354:	af04      	add	r7, sp, #16
 800e356:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800e358:	2302      	movs	r3, #2
 800e35a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800e35c:	2300      	movs	r3, #0
 800e35e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800e366:	b2db      	uxtb	r3, r3
 800e368:	2b01      	cmp	r3, #1
 800e36a:	d102      	bne.n	800e372 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2203      	movs	r2, #3
 800e370:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	781b      	ldrb	r3, [r3, #0]
 800e376:	b2db      	uxtb	r3, r3
 800e378:	2b0b      	cmp	r3, #11
 800e37a:	f200 81b3 	bhi.w	800e6e4 <USBH_Process+0x394>
 800e37e:	a201      	add	r2, pc, #4	; (adr r2, 800e384 <USBH_Process+0x34>)
 800e380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e384:	0800e3b5 	.word	0x0800e3b5
 800e388:	0800e3e7 	.word	0x0800e3e7
 800e38c:	0800e44f 	.word	0x0800e44f
 800e390:	0800e67f 	.word	0x0800e67f
 800e394:	0800e6e5 	.word	0x0800e6e5
 800e398:	0800e4f3 	.word	0x0800e4f3
 800e39c:	0800e625 	.word	0x0800e625
 800e3a0:	0800e529 	.word	0x0800e529
 800e3a4:	0800e549 	.word	0x0800e549
 800e3a8:	0800e569 	.word	0x0800e569
 800e3ac:	0800e597 	.word	0x0800e597
 800e3b0:	0800e667 	.word	0x0800e667
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e3ba:	b2db      	uxtb	r3, r3
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	f000 8193 	beq.w	800e6e8 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800e3c8:	20c8      	movs	r0, #200	; 0xc8
 800e3ca:	f001 fcf3 	bl	800fdb4 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	f001 fbe9 	bl	800fba6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e3e4:	e180      	b.n	800e6e8 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800e3ec:	2b01      	cmp	r3, #1
 800e3ee:	d107      	bne.n	800e400 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2202      	movs	r2, #2
 800e3fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e3fe:	e182      	b.n	800e706 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e406:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e40a:	d914      	bls.n	800e436 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e412:	3301      	adds	r3, #1
 800e414:	b2da      	uxtb	r2, r3
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e422:	2b03      	cmp	r3, #3
 800e424:	d903      	bls.n	800e42e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	220d      	movs	r2, #13
 800e42a:	701a      	strb	r2, [r3, #0]
      break;
 800e42c:	e16b      	b.n	800e706 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	2200      	movs	r2, #0
 800e432:	701a      	strb	r2, [r3, #0]
      break;
 800e434:	e167      	b.n	800e706 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e43c:	f103 020a 	add.w	r2, r3, #10
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800e446:	200a      	movs	r0, #10
 800e448:	f001 fcb4 	bl	800fdb4 <USBH_Delay>
      break;
 800e44c:	e15b      	b.n	800e706 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e454:	2b00      	cmp	r3, #0
 800e456:	d005      	beq.n	800e464 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e45e:	2104      	movs	r1, #4
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800e464:	2064      	movs	r0, #100	; 0x64
 800e466:	f001 fca5 	bl	800fdb4 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f001 fb74 	bl	800fb58 <USBH_LL_GetSpeed>
 800e470:	4603      	mov	r3, r0
 800e472:	461a      	mov	r2, r3
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2205      	movs	r2, #5
 800e47e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800e480:	2100      	movs	r1, #0
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f001 f92f 	bl	800f6e6 <USBH_AllocPipe>
 800e488:	4603      	mov	r3, r0
 800e48a:	461a      	mov	r2, r3
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800e490:	2180      	movs	r1, #128	; 0x80
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f001 f927 	bl	800f6e6 <USBH_AllocPipe>
 800e498:	4603      	mov	r3, r0
 800e49a:	461a      	mov	r2, r3
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	7919      	ldrb	r1, [r3, #4]
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e4b0:	687a      	ldr	r2, [r7, #4]
 800e4b2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e4b4:	b292      	uxth	r2, r2
 800e4b6:	9202      	str	r2, [sp, #8]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	9201      	str	r2, [sp, #4]
 800e4bc:	9300      	str	r3, [sp, #0]
 800e4be:	4603      	mov	r3, r0
 800e4c0:	2280      	movs	r2, #128	; 0x80
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f001 f8e0 	bl	800f688 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	7959      	ldrb	r1, [r3, #5]
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e4d8:	687a      	ldr	r2, [r7, #4]
 800e4da:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e4dc:	b292      	uxth	r2, r2
 800e4de:	9202      	str	r2, [sp, #8]
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	9201      	str	r2, [sp, #4]
 800e4e4:	9300      	str	r3, [sp, #0]
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f001 f8cc 	bl	800f688 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e4f0:	e109      	b.n	800e706 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f000 f90c 	bl	800e710 <USBH_HandleEnum>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800e4fc:	7bbb      	ldrb	r3, [r7, #14]
 800e4fe:	b2db      	uxtb	r3, r3
 800e500:	2b00      	cmp	r3, #0
 800e502:	f040 80f3 	bne.w	800e6ec <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2200      	movs	r2, #0
 800e50a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800e514:	2b01      	cmp	r3, #1
 800e516:	d103      	bne.n	800e520 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2208      	movs	r2, #8
 800e51c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e51e:	e0e5      	b.n	800e6ec <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2207      	movs	r2, #7
 800e524:	701a      	strb	r2, [r3, #0]
      break;
 800e526:	e0e1      	b.n	800e6ec <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e52e:	2b00      	cmp	r3, #0
 800e530:	f000 80de 	beq.w	800e6f0 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e53a:	2101      	movs	r1, #1
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2208      	movs	r2, #8
 800e544:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800e546:	e0d3      	b.n	800e6f0 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800e54e:	b29b      	uxth	r3, r3
 800e550:	4619      	mov	r1, r3
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f000 fc20 	bl	800ed98 <USBH_SetCfg>
 800e558:	4603      	mov	r3, r0
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	f040 80ca 	bne.w	800e6f4 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2209      	movs	r2, #9
 800e564:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e566:	e0c5      	b.n	800e6f4 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800e56e:	f003 0320 	and.w	r3, r3, #32
 800e572:	2b00      	cmp	r3, #0
 800e574:	d00b      	beq.n	800e58e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800e576:	2101      	movs	r1, #1
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f000 fc30 	bl	800edde <USBH_SetFeature>
 800e57e:	4603      	mov	r3, r0
 800e580:	2b00      	cmp	r3, #0
 800e582:	f040 80b9 	bne.w	800e6f8 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	220a      	movs	r2, #10
 800e58a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e58c:	e0b4      	b.n	800e6f8 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	220a      	movs	r2, #10
 800e592:	701a      	strb	r2, [r3, #0]
      break;
 800e594:	e0b0      	b.n	800e6f8 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	f000 80ad 	beq.w	800e6fc <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	73fb      	strb	r3, [r7, #15]
 800e5ae:	e016      	b.n	800e5de <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e5b0:	7bfa      	ldrb	r2, [r7, #15]
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	32de      	adds	r2, #222	; 0xde
 800e5b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5ba:	791a      	ldrb	r2, [r3, #4]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	d108      	bne.n	800e5d8 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800e5c6:	7bfa      	ldrb	r2, [r7, #15]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	32de      	adds	r2, #222	; 0xde
 800e5cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800e5d6:	e005      	b.n	800e5e4 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e5d8:	7bfb      	ldrb	r3, [r7, #15]
 800e5da:	3301      	adds	r3, #1
 800e5dc:	73fb      	strb	r3, [r7, #15]
 800e5de:	7bfb      	ldrb	r3, [r7, #15]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d0e5      	beq.n	800e5b0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d016      	beq.n	800e61c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e5f4:	689b      	ldr	r3, [r3, #8]
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	4798      	blx	r3
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d109      	bne.n	800e614 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2206      	movs	r2, #6
 800e604:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e60c:	2103      	movs	r1, #3
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e612:	e073      	b.n	800e6fc <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	220d      	movs	r2, #13
 800e618:	701a      	strb	r2, [r3, #0]
      break;
 800e61a:	e06f      	b.n	800e6fc <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	220d      	movs	r2, #13
 800e620:	701a      	strb	r2, [r3, #0]
      break;
 800e622:	e06b      	b.n	800e6fc <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d017      	beq.n	800e65e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e634:	691b      	ldr	r3, [r3, #16]
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	4798      	blx	r3
 800e63a:	4603      	mov	r3, r0
 800e63c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e63e:	7bbb      	ldrb	r3, [r7, #14]
 800e640:	b2db      	uxtb	r3, r3
 800e642:	2b00      	cmp	r3, #0
 800e644:	d103      	bne.n	800e64e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	220b      	movs	r2, #11
 800e64a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e64c:	e058      	b.n	800e700 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800e64e:	7bbb      	ldrb	r3, [r7, #14]
 800e650:	b2db      	uxtb	r3, r3
 800e652:	2b02      	cmp	r3, #2
 800e654:	d154      	bne.n	800e700 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	220d      	movs	r2, #13
 800e65a:	701a      	strb	r2, [r3, #0]
      break;
 800e65c:	e050      	b.n	800e700 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	220d      	movs	r2, #13
 800e662:	701a      	strb	r2, [r3, #0]
      break;
 800e664:	e04c      	b.n	800e700 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d049      	beq.n	800e704 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e676:	695b      	ldr	r3, [r3, #20]
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	4798      	blx	r3
      }
      break;
 800e67c:	e042      	b.n	800e704 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2200      	movs	r2, #0
 800e682:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f7ff fd72 	bl	800e170 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e692:	2b00      	cmp	r3, #0
 800e694:	d009      	beq.n	800e6aa <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e69c:	68db      	ldr	r3, [r3, #12]
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d005      	beq.n	800e6c0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e6ba:	2105      	movs	r1, #5
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800e6c6:	b2db      	uxtb	r3, r3
 800e6c8:	2b01      	cmp	r3, #1
 800e6ca:	d107      	bne.n	800e6dc <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f7ff fe2b 	bl	800e330 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e6da:	e014      	b.n	800e706 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	f001 fa05 	bl	800faec <USBH_LL_Start>
      break;
 800e6e2:	e010      	b.n	800e706 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800e6e4:	bf00      	nop
 800e6e6:	e00e      	b.n	800e706 <USBH_Process+0x3b6>
      break;
 800e6e8:	bf00      	nop
 800e6ea:	e00c      	b.n	800e706 <USBH_Process+0x3b6>
      break;
 800e6ec:	bf00      	nop
 800e6ee:	e00a      	b.n	800e706 <USBH_Process+0x3b6>
    break;
 800e6f0:	bf00      	nop
 800e6f2:	e008      	b.n	800e706 <USBH_Process+0x3b6>
      break;
 800e6f4:	bf00      	nop
 800e6f6:	e006      	b.n	800e706 <USBH_Process+0x3b6>
      break;
 800e6f8:	bf00      	nop
 800e6fa:	e004      	b.n	800e706 <USBH_Process+0x3b6>
      break;
 800e6fc:	bf00      	nop
 800e6fe:	e002      	b.n	800e706 <USBH_Process+0x3b6>
      break;
 800e700:	bf00      	nop
 800e702:	e000      	b.n	800e706 <USBH_Process+0x3b6>
      break;
 800e704:	bf00      	nop
  }
  return USBH_OK;
 800e706:	2300      	movs	r3, #0
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3710      	adds	r7, #16
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}

0800e710 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b088      	sub	sp, #32
 800e714:	af04      	add	r7, sp, #16
 800e716:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800e718:	2301      	movs	r3, #1
 800e71a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800e71c:	2301      	movs	r3, #1
 800e71e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	785b      	ldrb	r3, [r3, #1]
 800e724:	2b07      	cmp	r3, #7
 800e726:	f200 81c1 	bhi.w	800eaac <USBH_HandleEnum+0x39c>
 800e72a:	a201      	add	r2, pc, #4	; (adr r2, 800e730 <USBH_HandleEnum+0x20>)
 800e72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e730:	0800e751 	.word	0x0800e751
 800e734:	0800e80f 	.word	0x0800e80f
 800e738:	0800e879 	.word	0x0800e879
 800e73c:	0800e907 	.word	0x0800e907
 800e740:	0800e971 	.word	0x0800e971
 800e744:	0800e9e1 	.word	0x0800e9e1
 800e748:	0800ea27 	.word	0x0800ea27
 800e74c:	0800ea6d 	.word	0x0800ea6d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800e750:	2108      	movs	r1, #8
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f000 fa50 	bl	800ebf8 <USBH_Get_DevDesc>
 800e758:	4603      	mov	r3, r0
 800e75a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e75c:	7bbb      	ldrb	r3, [r7, #14]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d130      	bne.n	800e7c4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2201      	movs	r2, #1
 800e770:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	7919      	ldrb	r1, [r3, #4]
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e782:	687a      	ldr	r2, [r7, #4]
 800e784:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e786:	b292      	uxth	r2, r2
 800e788:	9202      	str	r2, [sp, #8]
 800e78a:	2200      	movs	r2, #0
 800e78c:	9201      	str	r2, [sp, #4]
 800e78e:	9300      	str	r3, [sp, #0]
 800e790:	4603      	mov	r3, r0
 800e792:	2280      	movs	r2, #128	; 0x80
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f000 ff77 	bl	800f688 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	7959      	ldrb	r1, [r3, #5]
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e7aa:	687a      	ldr	r2, [r7, #4]
 800e7ac:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e7ae:	b292      	uxth	r2, r2
 800e7b0:	9202      	str	r2, [sp, #8]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	9201      	str	r2, [sp, #4]
 800e7b6:	9300      	str	r3, [sp, #0]
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f000 ff63 	bl	800f688 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e7c2:	e175      	b.n	800eab0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e7c4:	7bbb      	ldrb	r3, [r7, #14]
 800e7c6:	2b03      	cmp	r3, #3
 800e7c8:	f040 8172 	bne.w	800eab0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e7d2:	3301      	adds	r3, #1
 800e7d4:	b2da      	uxtb	r2, r3
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e7e2:	2b03      	cmp	r3, #3
 800e7e4:	d903      	bls.n	800e7ee <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	220d      	movs	r2, #13
 800e7ea:	701a      	strb	r2, [r3, #0]
      break;
 800e7ec:	e160      	b.n	800eab0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	795b      	ldrb	r3, [r3, #5]
 800e7f2:	4619      	mov	r1, r3
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f000 ff97 	bl	800f728 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	791b      	ldrb	r3, [r3, #4]
 800e7fe:	4619      	mov	r1, r3
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f000 ff91 	bl	800f728 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	2200      	movs	r2, #0
 800e80a:	701a      	strb	r2, [r3, #0]
      break;
 800e80c:	e150      	b.n	800eab0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800e80e:	2112      	movs	r1, #18
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f000 f9f1 	bl	800ebf8 <USBH_Get_DevDesc>
 800e816:	4603      	mov	r3, r0
 800e818:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e81a:	7bbb      	ldrb	r3, [r7, #14]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d103      	bne.n	800e828 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2202      	movs	r2, #2
 800e824:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e826:	e145      	b.n	800eab4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e828:	7bbb      	ldrb	r3, [r7, #14]
 800e82a:	2b03      	cmp	r3, #3
 800e82c:	f040 8142 	bne.w	800eab4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e836:	3301      	adds	r3, #1
 800e838:	b2da      	uxtb	r2, r3
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e846:	2b03      	cmp	r3, #3
 800e848:	d903      	bls.n	800e852 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	220d      	movs	r2, #13
 800e84e:	701a      	strb	r2, [r3, #0]
      break;
 800e850:	e130      	b.n	800eab4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	795b      	ldrb	r3, [r3, #5]
 800e856:	4619      	mov	r1, r3
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	f000 ff65 	bl	800f728 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	791b      	ldrb	r3, [r3, #4]
 800e862:	4619      	mov	r1, r3
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	f000 ff5f 	bl	800f728 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2200      	movs	r2, #0
 800e86e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2200      	movs	r2, #0
 800e874:	701a      	strb	r2, [r3, #0]
      break;
 800e876:	e11d      	b.n	800eab4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800e878:	2101      	movs	r1, #1
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f000 fa68 	bl	800ed50 <USBH_SetAddress>
 800e880:	4603      	mov	r3, r0
 800e882:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e884:	7bbb      	ldrb	r3, [r7, #14]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d132      	bne.n	800e8f0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800e88a:	2002      	movs	r0, #2
 800e88c:	f001 fa92 	bl	800fdb4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2201      	movs	r2, #1
 800e894:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2203      	movs	r2, #3
 800e89c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	7919      	ldrb	r1, [r3, #4]
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e8ae:	687a      	ldr	r2, [r7, #4]
 800e8b0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e8b2:	b292      	uxth	r2, r2
 800e8b4:	9202      	str	r2, [sp, #8]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	9201      	str	r2, [sp, #4]
 800e8ba:	9300      	str	r3, [sp, #0]
 800e8bc:	4603      	mov	r3, r0
 800e8be:	2280      	movs	r2, #128	; 0x80
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f000 fee1 	bl	800f688 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	7959      	ldrb	r1, [r3, #5]
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e8d6:	687a      	ldr	r2, [r7, #4]
 800e8d8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e8da:	b292      	uxth	r2, r2
 800e8dc:	9202      	str	r2, [sp, #8]
 800e8de:	2200      	movs	r2, #0
 800e8e0:	9201      	str	r2, [sp, #4]
 800e8e2:	9300      	str	r3, [sp, #0]
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f000 fecd 	bl	800f688 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e8ee:	e0e3      	b.n	800eab8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e8f0:	7bbb      	ldrb	r3, [r7, #14]
 800e8f2:	2b03      	cmp	r3, #3
 800e8f4:	f040 80e0 	bne.w	800eab8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	220d      	movs	r2, #13
 800e8fc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2200      	movs	r2, #0
 800e902:	705a      	strb	r2, [r3, #1]
      break;
 800e904:	e0d8      	b.n	800eab8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800e906:	2109      	movs	r1, #9
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f000 f99d 	bl	800ec48 <USBH_Get_CfgDesc>
 800e90e:	4603      	mov	r3, r0
 800e910:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e912:	7bbb      	ldrb	r3, [r7, #14]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d103      	bne.n	800e920 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2204      	movs	r2, #4
 800e91c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e91e:	e0cd      	b.n	800eabc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e920:	7bbb      	ldrb	r3, [r7, #14]
 800e922:	2b03      	cmp	r3, #3
 800e924:	f040 80ca 	bne.w	800eabc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e92e:	3301      	adds	r3, #1
 800e930:	b2da      	uxtb	r2, r3
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e93e:	2b03      	cmp	r3, #3
 800e940:	d903      	bls.n	800e94a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	220d      	movs	r2, #13
 800e946:	701a      	strb	r2, [r3, #0]
      break;
 800e948:	e0b8      	b.n	800eabc <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	795b      	ldrb	r3, [r3, #5]
 800e94e:	4619      	mov	r1, r3
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f000 fee9 	bl	800f728 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	791b      	ldrb	r3, [r3, #4]
 800e95a:	4619      	mov	r1, r3
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f000 fee3 	bl	800f728 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2200      	movs	r2, #0
 800e966:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2200      	movs	r2, #0
 800e96c:	701a      	strb	r2, [r3, #0]
      break;
 800e96e:	e0a5      	b.n	800eabc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800e976:	4619      	mov	r1, r3
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f000 f965 	bl	800ec48 <USBH_Get_CfgDesc>
 800e97e:	4603      	mov	r3, r0
 800e980:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e982:	7bbb      	ldrb	r3, [r7, #14]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d103      	bne.n	800e990 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2205      	movs	r2, #5
 800e98c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e98e:	e097      	b.n	800eac0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e990:	7bbb      	ldrb	r3, [r7, #14]
 800e992:	2b03      	cmp	r3, #3
 800e994:	f040 8094 	bne.w	800eac0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e99e:	3301      	adds	r3, #1
 800e9a0:	b2da      	uxtb	r2, r3
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e9ae:	2b03      	cmp	r3, #3
 800e9b0:	d903      	bls.n	800e9ba <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	220d      	movs	r2, #13
 800e9b6:	701a      	strb	r2, [r3, #0]
      break;
 800e9b8:	e082      	b.n	800eac0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	795b      	ldrb	r3, [r3, #5]
 800e9be:	4619      	mov	r1, r3
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f000 feb1 	bl	800f728 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	791b      	ldrb	r3, [r3, #4]
 800e9ca:	4619      	mov	r1, r3
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f000 feab 	bl	800f728 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	701a      	strb	r2, [r3, #0]
      break;
 800e9de:	e06f      	b.n	800eac0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d019      	beq.n	800ea1e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e9f6:	23ff      	movs	r3, #255	; 0xff
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f000 f949 	bl	800ec90 <USBH_Get_StringDesc>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ea02:	7bbb      	ldrb	r3, [r7, #14]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d103      	bne.n	800ea10 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2206      	movs	r2, #6
 800ea0c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ea0e:	e059      	b.n	800eac4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ea10:	7bbb      	ldrb	r3, [r7, #14]
 800ea12:	2b03      	cmp	r3, #3
 800ea14:	d156      	bne.n	800eac4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2206      	movs	r2, #6
 800ea1a:	705a      	strb	r2, [r3, #1]
      break;
 800ea1c:	e052      	b.n	800eac4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2206      	movs	r2, #6
 800ea22:	705a      	strb	r2, [r3, #1]
      break;
 800ea24:	e04e      	b.n	800eac4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d019      	beq.n	800ea64 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ea3c:	23ff      	movs	r3, #255	; 0xff
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f000 f926 	bl	800ec90 <USBH_Get_StringDesc>
 800ea44:	4603      	mov	r3, r0
 800ea46:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ea48:	7bbb      	ldrb	r3, [r7, #14]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d103      	bne.n	800ea56 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2207      	movs	r2, #7
 800ea52:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ea54:	e038      	b.n	800eac8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ea56:	7bbb      	ldrb	r3, [r7, #14]
 800ea58:	2b03      	cmp	r3, #3
 800ea5a:	d135      	bne.n	800eac8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2207      	movs	r2, #7
 800ea60:	705a      	strb	r2, [r3, #1]
      break;
 800ea62:	e031      	b.n	800eac8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2207      	movs	r2, #7
 800ea68:	705a      	strb	r2, [r3, #1]
      break;
 800ea6a:	e02d      	b.n	800eac8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d017      	beq.n	800eaa6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ea82:	23ff      	movs	r3, #255	; 0xff
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f000 f903 	bl	800ec90 <USBH_Get_StringDesc>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ea8e:	7bbb      	ldrb	r3, [r7, #14]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d102      	bne.n	800ea9a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ea94:	2300      	movs	r3, #0
 800ea96:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ea98:	e018      	b.n	800eacc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ea9a:	7bbb      	ldrb	r3, [r7, #14]
 800ea9c:	2b03      	cmp	r3, #3
 800ea9e:	d115      	bne.n	800eacc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	73fb      	strb	r3, [r7, #15]
      break;
 800eaa4:	e012      	b.n	800eacc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	73fb      	strb	r3, [r7, #15]
      break;
 800eaaa:	e00f      	b.n	800eacc <USBH_HandleEnum+0x3bc>

    default:
      break;
 800eaac:	bf00      	nop
 800eaae:	e00e      	b.n	800eace <USBH_HandleEnum+0x3be>
      break;
 800eab0:	bf00      	nop
 800eab2:	e00c      	b.n	800eace <USBH_HandleEnum+0x3be>
      break;
 800eab4:	bf00      	nop
 800eab6:	e00a      	b.n	800eace <USBH_HandleEnum+0x3be>
      break;
 800eab8:	bf00      	nop
 800eaba:	e008      	b.n	800eace <USBH_HandleEnum+0x3be>
      break;
 800eabc:	bf00      	nop
 800eabe:	e006      	b.n	800eace <USBH_HandleEnum+0x3be>
      break;
 800eac0:	bf00      	nop
 800eac2:	e004      	b.n	800eace <USBH_HandleEnum+0x3be>
      break;
 800eac4:	bf00      	nop
 800eac6:	e002      	b.n	800eace <USBH_HandleEnum+0x3be>
      break;
 800eac8:	bf00      	nop
 800eaca:	e000      	b.n	800eace <USBH_HandleEnum+0x3be>
      break;
 800eacc:	bf00      	nop
  }
  return Status;
 800eace:	7bfb      	ldrb	r3, [r7, #15]
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3710      	adds	r7, #16
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}

0800ead8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ead8:	b480      	push	{r7}
 800eada:	b083      	sub	sp, #12
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
 800eae0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	683a      	ldr	r2, [r7, #0]
 800eae6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800eaea:	bf00      	nop
 800eaec:	370c      	adds	r7, #12
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf4:	4770      	bx	lr

0800eaf6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800eaf6:	b580      	push	{r7, lr}
 800eaf8:	b082      	sub	sp, #8
 800eafa:	af00      	add	r7, sp, #0
 800eafc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800eb04:	1c5a      	adds	r2, r3, #1
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f000 f804 	bl	800eb1a <USBH_HandleSof>
}
 800eb12:	bf00      	nop
 800eb14:	3708      	adds	r7, #8
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}

0800eb1a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800eb1a:	b580      	push	{r7, lr}
 800eb1c:	b082      	sub	sp, #8
 800eb1e:	af00      	add	r7, sp, #0
 800eb20:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	781b      	ldrb	r3, [r3, #0]
 800eb26:	b2db      	uxtb	r3, r3
 800eb28:	2b0b      	cmp	r3, #11
 800eb2a:	d10a      	bne.n	800eb42 <USBH_HandleSof+0x28>
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d005      	beq.n	800eb42 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eb3c:	699b      	ldr	r3, [r3, #24]
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	4798      	blx	r3
  }
}
 800eb42:	bf00      	nop
 800eb44:	3708      	adds	r7, #8
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}

0800eb4a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800eb4a:	b480      	push	{r7}
 800eb4c:	b083      	sub	sp, #12
 800eb4e:	af00      	add	r7, sp, #0
 800eb50:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2201      	movs	r2, #1
 800eb56:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800eb5a:	bf00      	nop
}
 800eb5c:	370c      	adds	r7, #12
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb64:	4770      	bx	lr

0800eb66 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800eb66:	b480      	push	{r7}
 800eb68:	b083      	sub	sp, #12
 800eb6a:	af00      	add	r7, sp, #0
 800eb6c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2200      	movs	r2, #0
 800eb72:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800eb76:	bf00      	nop
}
 800eb78:	370c      	adds	r7, #12
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr

0800eb82 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800eb82:	b480      	push	{r7}
 800eb84:	b083      	sub	sp, #12
 800eb86:	af00      	add	r7, sp, #0
 800eb88:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2201      	movs	r2, #1
 800eb8e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2200      	movs	r2, #0
 800eb96:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800eba2:	2300      	movs	r3, #0
}
 800eba4:	4618      	mov	r0, r3
 800eba6:	370c      	adds	r7, #12
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr

0800ebb0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b082      	sub	sp, #8
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2201      	movs	r2, #1
 800ebbc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f000 ffa6 	bl	800fb22 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	791b      	ldrb	r3, [r3, #4]
 800ebda:	4619      	mov	r1, r3
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f000 fda3 	bl	800f728 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	795b      	ldrb	r3, [r3, #5]
 800ebe6:	4619      	mov	r1, r3
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f000 fd9d 	bl	800f728 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ebee:	2300      	movs	r3, #0
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3708      	adds	r7, #8
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}

0800ebf8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b086      	sub	sp, #24
 800ebfc:	af02      	add	r7, sp, #8
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	460b      	mov	r3, r1
 800ec02:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ec0a:	78fb      	ldrb	r3, [r7, #3]
 800ec0c:	b29b      	uxth	r3, r3
 800ec0e:	9300      	str	r3, [sp, #0]
 800ec10:	4613      	mov	r3, r2
 800ec12:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ec16:	2100      	movs	r1, #0
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f000 f864 	bl	800ece6 <USBH_GetDescriptor>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	73fb      	strb	r3, [r7, #15]
 800ec22:	7bfb      	ldrb	r3, [r7, #15]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d10a      	bne.n	800ec3e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ec34:	78fa      	ldrb	r2, [r7, #3]
 800ec36:	b292      	uxth	r2, r2
 800ec38:	4619      	mov	r1, r3
 800ec3a:	f000 f918 	bl	800ee6e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ec3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3710      	adds	r7, #16
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}

0800ec48 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b086      	sub	sp, #24
 800ec4c:	af02      	add	r7, sp, #8
 800ec4e:	6078      	str	r0, [r7, #4]
 800ec50:	460b      	mov	r3, r1
 800ec52:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	331c      	adds	r3, #28
 800ec58:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ec5a:	887b      	ldrh	r3, [r7, #2]
 800ec5c:	9300      	str	r3, [sp, #0]
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ec64:	2100      	movs	r1, #0
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	f000 f83d 	bl	800ece6 <USBH_GetDescriptor>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	72fb      	strb	r3, [r7, #11]
 800ec70:	7afb      	ldrb	r3, [r7, #11]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d107      	bne.n	800ec86 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ec7c:	887a      	ldrh	r2, [r7, #2]
 800ec7e:	68f9      	ldr	r1, [r7, #12]
 800ec80:	4618      	mov	r0, r3
 800ec82:	f000 f964 	bl	800ef4e <USBH_ParseCfgDesc>
  }

  return status;
 800ec86:	7afb      	ldrb	r3, [r7, #11]
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3710      	adds	r7, #16
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b088      	sub	sp, #32
 800ec94:	af02      	add	r7, sp, #8
 800ec96:	60f8      	str	r0, [r7, #12]
 800ec98:	607a      	str	r2, [r7, #4]
 800ec9a:	461a      	mov	r2, r3
 800ec9c:	460b      	mov	r3, r1
 800ec9e:	72fb      	strb	r3, [r7, #11]
 800eca0:	4613      	mov	r3, r2
 800eca2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800eca4:	7afb      	ldrb	r3, [r7, #11]
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ecac:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ecb4:	893b      	ldrh	r3, [r7, #8]
 800ecb6:	9300      	str	r3, [sp, #0]
 800ecb8:	460b      	mov	r3, r1
 800ecba:	2100      	movs	r1, #0
 800ecbc:	68f8      	ldr	r0, [r7, #12]
 800ecbe:	f000 f812 	bl	800ece6 <USBH_GetDescriptor>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	75fb      	strb	r3, [r7, #23]
 800ecc6:	7dfb      	ldrb	r3, [r7, #23]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d107      	bne.n	800ecdc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ecd2:	893a      	ldrh	r2, [r7, #8]
 800ecd4:	6879      	ldr	r1, [r7, #4]
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f000 fa37 	bl	800f14a <USBH_ParseStringDesc>
  }

  return status;
 800ecdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3718      	adds	r7, #24
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}

0800ece6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ece6:	b580      	push	{r7, lr}
 800ece8:	b084      	sub	sp, #16
 800ecea:	af00      	add	r7, sp, #0
 800ecec:	60f8      	str	r0, [r7, #12]
 800ecee:	607b      	str	r3, [r7, #4]
 800ecf0:	460b      	mov	r3, r1
 800ecf2:	72fb      	strb	r3, [r7, #11]
 800ecf4:	4613      	mov	r3, r2
 800ecf6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	789b      	ldrb	r3, [r3, #2]
 800ecfc:	2b01      	cmp	r3, #1
 800ecfe:	d11c      	bne.n	800ed3a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ed00:	7afb      	ldrb	r3, [r7, #11]
 800ed02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ed06:	b2da      	uxtb	r2, r3
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	2206      	movs	r2, #6
 800ed10:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	893a      	ldrh	r2, [r7, #8]
 800ed16:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ed18:	893b      	ldrh	r3, [r7, #8]
 800ed1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ed1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ed22:	d104      	bne.n	800ed2e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	f240 4209 	movw	r2, #1033	; 0x409
 800ed2a:	829a      	strh	r2, [r3, #20]
 800ed2c:	e002      	b.n	800ed34 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	2200      	movs	r2, #0
 800ed32:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	8b3a      	ldrh	r2, [r7, #24]
 800ed38:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ed3a:	8b3b      	ldrh	r3, [r7, #24]
 800ed3c:	461a      	mov	r2, r3
 800ed3e:	6879      	ldr	r1, [r7, #4]
 800ed40:	68f8      	ldr	r0, [r7, #12]
 800ed42:	f000 fa50 	bl	800f1e6 <USBH_CtlReq>
 800ed46:	4603      	mov	r3, r0
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3710      	adds	r7, #16
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}

0800ed50 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b082      	sub	sp, #8
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	460b      	mov	r3, r1
 800ed5a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	789b      	ldrb	r3, [r3, #2]
 800ed60:	2b01      	cmp	r3, #1
 800ed62:	d10f      	bne.n	800ed84 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2200      	movs	r2, #0
 800ed68:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2205      	movs	r2, #5
 800ed6e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ed70:	78fb      	ldrb	r3, [r7, #3]
 800ed72:	b29a      	uxth	r2, r3
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2200      	movs	r2, #0
 800ed82:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ed84:	2200      	movs	r2, #0
 800ed86:	2100      	movs	r1, #0
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f000 fa2c 	bl	800f1e6 <USBH_CtlReq>
 800ed8e:	4603      	mov	r3, r0
}
 800ed90:	4618      	mov	r0, r3
 800ed92:	3708      	adds	r7, #8
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}

0800ed98 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b082      	sub	sp, #8
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
 800eda0:	460b      	mov	r3, r1
 800eda2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	789b      	ldrb	r3, [r3, #2]
 800eda8:	2b01      	cmp	r3, #1
 800edaa:	d10e      	bne.n	800edca <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2200      	movs	r2, #0
 800edb0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	2209      	movs	r2, #9
 800edb6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	887a      	ldrh	r2, [r7, #2]
 800edbc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	2200      	movs	r2, #0
 800edc2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2200      	movs	r2, #0
 800edc8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800edca:	2200      	movs	r2, #0
 800edcc:	2100      	movs	r1, #0
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f000 fa09 	bl	800f1e6 <USBH_CtlReq>
 800edd4:	4603      	mov	r3, r0
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3708      	adds	r7, #8
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}

0800edde <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800edde:	b580      	push	{r7, lr}
 800ede0:	b082      	sub	sp, #8
 800ede2:	af00      	add	r7, sp, #0
 800ede4:	6078      	str	r0, [r7, #4]
 800ede6:	460b      	mov	r3, r1
 800ede8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	789b      	ldrb	r3, [r3, #2]
 800edee:	2b01      	cmp	r3, #1
 800edf0:	d10f      	bne.n	800ee12 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2200      	movs	r2, #0
 800edf6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2203      	movs	r2, #3
 800edfc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800edfe:	78fb      	ldrb	r3, [r7, #3]
 800ee00:	b29a      	uxth	r2, r3
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2200      	movs	r2, #0
 800ee10:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ee12:	2200      	movs	r2, #0
 800ee14:	2100      	movs	r1, #0
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f000 f9e5 	bl	800f1e6 <USBH_CtlReq>
 800ee1c:	4603      	mov	r3, r0
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3708      	adds	r7, #8
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}

0800ee26 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ee26:	b580      	push	{r7, lr}
 800ee28:	b082      	sub	sp, #8
 800ee2a:	af00      	add	r7, sp, #0
 800ee2c:	6078      	str	r0, [r7, #4]
 800ee2e:	460b      	mov	r3, r1
 800ee30:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	789b      	ldrb	r3, [r3, #2]
 800ee36:	2b01      	cmp	r3, #1
 800ee38:	d10f      	bne.n	800ee5a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2202      	movs	r2, #2
 800ee3e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2201      	movs	r2, #1
 800ee44:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ee4c:	78fb      	ldrb	r3, [r7, #3]
 800ee4e:	b29a      	uxth	r2, r3
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2200      	movs	r2, #0
 800ee58:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	2100      	movs	r1, #0
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f000 f9c1 	bl	800f1e6 <USBH_CtlReq>
 800ee64:	4603      	mov	r3, r0
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3708      	adds	r7, #8
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}

0800ee6e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ee6e:	b480      	push	{r7}
 800ee70:	b085      	sub	sp, #20
 800ee72:	af00      	add	r7, sp, #0
 800ee74:	60f8      	str	r0, [r7, #12]
 800ee76:	60b9      	str	r1, [r7, #8]
 800ee78:	4613      	mov	r3, r2
 800ee7a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	781a      	ldrb	r2, [r3, #0]
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	785a      	ldrb	r2, [r3, #1]
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	3302      	adds	r3, #2
 800ee90:	781b      	ldrb	r3, [r3, #0]
 800ee92:	b29a      	uxth	r2, r3
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	3303      	adds	r3, #3
 800ee98:	781b      	ldrb	r3, [r3, #0]
 800ee9a:	b29b      	uxth	r3, r3
 800ee9c:	021b      	lsls	r3, r3, #8
 800ee9e:	b29b      	uxth	r3, r3
 800eea0:	4313      	orrs	r3, r2
 800eea2:	b29a      	uxth	r2, r3
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800eea8:	68bb      	ldr	r3, [r7, #8]
 800eeaa:	791a      	ldrb	r2, [r3, #4]
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	795a      	ldrb	r2, [r3, #5]
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	799a      	ldrb	r2, [r3, #6]
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	79da      	ldrb	r2, [r3, #7]
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800eec8:	88fb      	ldrh	r3, [r7, #6]
 800eeca:	2b08      	cmp	r3, #8
 800eecc:	d939      	bls.n	800ef42 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	3308      	adds	r3, #8
 800eed2:	781b      	ldrb	r3, [r3, #0]
 800eed4:	b29a      	uxth	r2, r3
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	3309      	adds	r3, #9
 800eeda:	781b      	ldrb	r3, [r3, #0]
 800eedc:	b29b      	uxth	r3, r3
 800eede:	021b      	lsls	r3, r3, #8
 800eee0:	b29b      	uxth	r3, r3
 800eee2:	4313      	orrs	r3, r2
 800eee4:	b29a      	uxth	r2, r3
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	330a      	adds	r3, #10
 800eeee:	781b      	ldrb	r3, [r3, #0]
 800eef0:	b29a      	uxth	r2, r3
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	330b      	adds	r3, #11
 800eef6:	781b      	ldrb	r3, [r3, #0]
 800eef8:	b29b      	uxth	r3, r3
 800eefa:	021b      	lsls	r3, r3, #8
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	4313      	orrs	r3, r2
 800ef00:	b29a      	uxth	r2, r3
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	330c      	adds	r3, #12
 800ef0a:	781b      	ldrb	r3, [r3, #0]
 800ef0c:	b29a      	uxth	r2, r3
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	330d      	adds	r3, #13
 800ef12:	781b      	ldrb	r3, [r3, #0]
 800ef14:	b29b      	uxth	r3, r3
 800ef16:	021b      	lsls	r3, r3, #8
 800ef18:	b29b      	uxth	r3, r3
 800ef1a:	4313      	orrs	r3, r2
 800ef1c:	b29a      	uxth	r2, r3
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	7b9a      	ldrb	r2, [r3, #14]
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	7bda      	ldrb	r2, [r3, #15]
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	7c1a      	ldrb	r2, [r3, #16]
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	7c5a      	ldrb	r2, [r3, #17]
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	745a      	strb	r2, [r3, #17]
  }
}
 800ef42:	bf00      	nop
 800ef44:	3714      	adds	r7, #20
 800ef46:	46bd      	mov	sp, r7
 800ef48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4c:	4770      	bx	lr

0800ef4e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800ef4e:	b580      	push	{r7, lr}
 800ef50:	b08a      	sub	sp, #40	; 0x28
 800ef52:	af00      	add	r7, sp, #0
 800ef54:	60f8      	str	r0, [r7, #12]
 800ef56:	60b9      	str	r1, [r7, #8]
 800ef58:	4613      	mov	r3, r2
 800ef5a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ef60:	2300      	movs	r3, #0
 800ef62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800ef66:	2300      	movs	r3, #0
 800ef68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	781a      	ldrb	r2, [r3, #0]
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	785a      	ldrb	r2, [r3, #1]
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	3302      	adds	r3, #2
 800ef84:	781b      	ldrb	r3, [r3, #0]
 800ef86:	b29a      	uxth	r2, r3
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	3303      	adds	r3, #3
 800ef8c:	781b      	ldrb	r3, [r3, #0]
 800ef8e:	b29b      	uxth	r3, r3
 800ef90:	021b      	lsls	r3, r3, #8
 800ef92:	b29b      	uxth	r3, r3
 800ef94:	4313      	orrs	r3, r2
 800ef96:	b29a      	uxth	r2, r3
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	791a      	ldrb	r2, [r3, #4]
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	795a      	ldrb	r2, [r3, #5]
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	799a      	ldrb	r2, [r3, #6]
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	79da      	ldrb	r2, [r3, #7]
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	7a1a      	ldrb	r2, [r3, #8]
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800efc4:	88fb      	ldrh	r3, [r7, #6]
 800efc6:	2b09      	cmp	r3, #9
 800efc8:	d95f      	bls.n	800f08a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800efca:	2309      	movs	r3, #9
 800efcc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800efce:	2300      	movs	r3, #0
 800efd0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800efd2:	e051      	b.n	800f078 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800efd4:	f107 0316 	add.w	r3, r7, #22
 800efd8:	4619      	mov	r1, r3
 800efda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800efdc:	f000 f8e8 	bl	800f1b0 <USBH_GetNextDesc>
 800efe0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800efe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe4:	785b      	ldrb	r3, [r3, #1]
 800efe6:	2b04      	cmp	r3, #4
 800efe8:	d146      	bne.n	800f078 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800efea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800efee:	221a      	movs	r2, #26
 800eff0:	fb02 f303 	mul.w	r3, r2, r3
 800eff4:	3308      	adds	r3, #8
 800eff6:	68fa      	ldr	r2, [r7, #12]
 800eff8:	4413      	add	r3, r2
 800effa:	3302      	adds	r3, #2
 800effc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800effe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f000:	69f8      	ldr	r0, [r7, #28]
 800f002:	f000 f846 	bl	800f092 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800f006:	2300      	movs	r3, #0
 800f008:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800f00c:	2300      	movs	r3, #0
 800f00e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f010:	e022      	b.n	800f058 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f012:	f107 0316 	add.w	r3, r7, #22
 800f016:	4619      	mov	r1, r3
 800f018:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f01a:	f000 f8c9 	bl	800f1b0 <USBH_GetNextDesc>
 800f01e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800f020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f022:	785b      	ldrb	r3, [r3, #1]
 800f024:	2b05      	cmp	r3, #5
 800f026:	d117      	bne.n	800f058 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800f028:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f02c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f030:	3201      	adds	r2, #1
 800f032:	00d2      	lsls	r2, r2, #3
 800f034:	211a      	movs	r1, #26
 800f036:	fb01 f303 	mul.w	r3, r1, r3
 800f03a:	4413      	add	r3, r2
 800f03c:	3308      	adds	r3, #8
 800f03e:	68fa      	ldr	r2, [r7, #12]
 800f040:	4413      	add	r3, r2
 800f042:	3304      	adds	r3, #4
 800f044:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800f046:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f048:	69b8      	ldr	r0, [r7, #24]
 800f04a:	f000 f851 	bl	800f0f0 <USBH_ParseEPDesc>
            ep_ix++;
 800f04e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f052:	3301      	adds	r3, #1
 800f054:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f058:	69fb      	ldr	r3, [r7, #28]
 800f05a:	791b      	ldrb	r3, [r3, #4]
 800f05c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f060:	429a      	cmp	r2, r3
 800f062:	d204      	bcs.n	800f06e <USBH_ParseCfgDesc+0x120>
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	885a      	ldrh	r2, [r3, #2]
 800f068:	8afb      	ldrh	r3, [r7, #22]
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d8d1      	bhi.n	800f012 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800f06e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f072:	3301      	adds	r3, #1
 800f074:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f078:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f07c:	2b01      	cmp	r3, #1
 800f07e:	d804      	bhi.n	800f08a <USBH_ParseCfgDesc+0x13c>
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	885a      	ldrh	r2, [r3, #2]
 800f084:	8afb      	ldrh	r3, [r7, #22]
 800f086:	429a      	cmp	r2, r3
 800f088:	d8a4      	bhi.n	800efd4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800f08a:	bf00      	nop
 800f08c:	3728      	adds	r7, #40	; 0x28
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}

0800f092 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800f092:	b480      	push	{r7}
 800f094:	b083      	sub	sp, #12
 800f096:	af00      	add	r7, sp, #0
 800f098:	6078      	str	r0, [r7, #4]
 800f09a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	781a      	ldrb	r2, [r3, #0]
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	785a      	ldrb	r2, [r3, #1]
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	789a      	ldrb	r2, [r3, #2]
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	78da      	ldrb	r2, [r3, #3]
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	791a      	ldrb	r2, [r3, #4]
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	795a      	ldrb	r2, [r3, #5]
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	799a      	ldrb	r2, [r3, #6]
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	79da      	ldrb	r2, [r3, #7]
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	7a1a      	ldrb	r2, [r3, #8]
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	721a      	strb	r2, [r3, #8]
}
 800f0e4:	bf00      	nop
 800f0e6:	370c      	adds	r7, #12
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ee:	4770      	bx	lr

0800f0f0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800f0f0:	b480      	push	{r7}
 800f0f2:	b083      	sub	sp, #12
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
 800f0f8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	781a      	ldrb	r2, [r3, #0]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	785a      	ldrb	r2, [r3, #1]
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	789a      	ldrb	r2, [r3, #2]
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	78da      	ldrb	r2, [r3, #3]
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	3304      	adds	r3, #4
 800f11e:	781b      	ldrb	r3, [r3, #0]
 800f120:	b29a      	uxth	r2, r3
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	3305      	adds	r3, #5
 800f126:	781b      	ldrb	r3, [r3, #0]
 800f128:	b29b      	uxth	r3, r3
 800f12a:	021b      	lsls	r3, r3, #8
 800f12c:	b29b      	uxth	r3, r3
 800f12e:	4313      	orrs	r3, r2
 800f130:	b29a      	uxth	r2, r3
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	799a      	ldrb	r2, [r3, #6]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	719a      	strb	r2, [r3, #6]
}
 800f13e:	bf00      	nop
 800f140:	370c      	adds	r7, #12
 800f142:	46bd      	mov	sp, r7
 800f144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f148:	4770      	bx	lr

0800f14a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f14a:	b480      	push	{r7}
 800f14c:	b087      	sub	sp, #28
 800f14e:	af00      	add	r7, sp, #0
 800f150:	60f8      	str	r0, [r7, #12]
 800f152:	60b9      	str	r1, [r7, #8]
 800f154:	4613      	mov	r3, r2
 800f156:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	3301      	adds	r3, #1
 800f15c:	781b      	ldrb	r3, [r3, #0]
 800f15e:	2b03      	cmp	r3, #3
 800f160:	d120      	bne.n	800f1a4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	781b      	ldrb	r3, [r3, #0]
 800f166:	1e9a      	subs	r2, r3, #2
 800f168:	88fb      	ldrh	r3, [r7, #6]
 800f16a:	4293      	cmp	r3, r2
 800f16c:	bf28      	it	cs
 800f16e:	4613      	movcs	r3, r2
 800f170:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	3302      	adds	r3, #2
 800f176:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f178:	2300      	movs	r3, #0
 800f17a:	82fb      	strh	r3, [r7, #22]
 800f17c:	e00b      	b.n	800f196 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f17e:	8afb      	ldrh	r3, [r7, #22]
 800f180:	68fa      	ldr	r2, [r7, #12]
 800f182:	4413      	add	r3, r2
 800f184:	781a      	ldrb	r2, [r3, #0]
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	3301      	adds	r3, #1
 800f18e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f190:	8afb      	ldrh	r3, [r7, #22]
 800f192:	3302      	adds	r3, #2
 800f194:	82fb      	strh	r3, [r7, #22]
 800f196:	8afa      	ldrh	r2, [r7, #22]
 800f198:	8abb      	ldrh	r3, [r7, #20]
 800f19a:	429a      	cmp	r2, r3
 800f19c:	d3ef      	bcc.n	800f17e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	701a      	strb	r2, [r3, #0]
  }
}
 800f1a4:	bf00      	nop
 800f1a6:	371c      	adds	r7, #28
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ae:	4770      	bx	lr

0800f1b0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800f1b0:	b480      	push	{r7}
 800f1b2:	b085      	sub	sp, #20
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
 800f1b8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	881a      	ldrh	r2, [r3, #0]
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	781b      	ldrb	r3, [r3, #0]
 800f1c2:	b29b      	uxth	r3, r3
 800f1c4:	4413      	add	r3, r2
 800f1c6:	b29a      	uxth	r2, r3
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	781b      	ldrb	r3, [r3, #0]
 800f1d0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	4413      	add	r3, r2
 800f1d6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f1d8:	68fb      	ldr	r3, [r7, #12]
}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3714      	adds	r7, #20
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e4:	4770      	bx	lr

0800f1e6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800f1e6:	b580      	push	{r7, lr}
 800f1e8:	b086      	sub	sp, #24
 800f1ea:	af00      	add	r7, sp, #0
 800f1ec:	60f8      	str	r0, [r7, #12]
 800f1ee:	60b9      	str	r1, [r7, #8]
 800f1f0:	4613      	mov	r3, r2
 800f1f2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	789b      	ldrb	r3, [r3, #2]
 800f1fc:	2b01      	cmp	r3, #1
 800f1fe:	d002      	beq.n	800f206 <USBH_CtlReq+0x20>
 800f200:	2b02      	cmp	r3, #2
 800f202:	d00f      	beq.n	800f224 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800f204:	e027      	b.n	800f256 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	68ba      	ldr	r2, [r7, #8]
 800f20a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	88fa      	ldrh	r2, [r7, #6]
 800f210:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	2201      	movs	r2, #1
 800f216:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	2202      	movs	r2, #2
 800f21c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800f21e:	2301      	movs	r3, #1
 800f220:	75fb      	strb	r3, [r7, #23]
      break;
 800f222:	e018      	b.n	800f256 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800f224:	68f8      	ldr	r0, [r7, #12]
 800f226:	f000 f81b 	bl	800f260 <USBH_HandleControl>
 800f22a:	4603      	mov	r3, r0
 800f22c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f22e:	7dfb      	ldrb	r3, [r7, #23]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d002      	beq.n	800f23a <USBH_CtlReq+0x54>
 800f234:	7dfb      	ldrb	r3, [r7, #23]
 800f236:	2b03      	cmp	r3, #3
 800f238:	d106      	bne.n	800f248 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	2201      	movs	r2, #1
 800f23e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	2200      	movs	r2, #0
 800f244:	761a      	strb	r2, [r3, #24]
      break;
 800f246:	e005      	b.n	800f254 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800f248:	7dfb      	ldrb	r3, [r7, #23]
 800f24a:	2b02      	cmp	r3, #2
 800f24c:	d102      	bne.n	800f254 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	2201      	movs	r2, #1
 800f252:	709a      	strb	r2, [r3, #2]
      break;
 800f254:	bf00      	nop
  }
  return status;
 800f256:	7dfb      	ldrb	r3, [r7, #23]
}
 800f258:	4618      	mov	r0, r3
 800f25a:	3718      	adds	r7, #24
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}

0800f260 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b086      	sub	sp, #24
 800f264:	af02      	add	r7, sp, #8
 800f266:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f268:	2301      	movs	r3, #1
 800f26a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f26c:	2300      	movs	r3, #0
 800f26e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	7e1b      	ldrb	r3, [r3, #24]
 800f274:	3b01      	subs	r3, #1
 800f276:	2b0a      	cmp	r3, #10
 800f278:	f200 8156 	bhi.w	800f528 <USBH_HandleControl+0x2c8>
 800f27c:	a201      	add	r2, pc, #4	; (adr r2, 800f284 <USBH_HandleControl+0x24>)
 800f27e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f282:	bf00      	nop
 800f284:	0800f2b1 	.word	0x0800f2b1
 800f288:	0800f2cb 	.word	0x0800f2cb
 800f28c:	0800f335 	.word	0x0800f335
 800f290:	0800f35b 	.word	0x0800f35b
 800f294:	0800f393 	.word	0x0800f393
 800f298:	0800f3bd 	.word	0x0800f3bd
 800f29c:	0800f40f 	.word	0x0800f40f
 800f2a0:	0800f431 	.word	0x0800f431
 800f2a4:	0800f46d 	.word	0x0800f46d
 800f2a8:	0800f493 	.word	0x0800f493
 800f2ac:	0800f4d1 	.word	0x0800f4d1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f103 0110 	add.w	r1, r3, #16
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	795b      	ldrb	r3, [r3, #5]
 800f2ba:	461a      	mov	r2, r3
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f000 f943 	bl	800f548 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2202      	movs	r2, #2
 800f2c6:	761a      	strb	r2, [r3, #24]
      break;
 800f2c8:	e139      	b.n	800f53e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	795b      	ldrb	r3, [r3, #5]
 800f2ce:	4619      	mov	r1, r3
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f000 fd15 	bl	800fd00 <USBH_LL_GetURBState>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800f2da:	7bbb      	ldrb	r3, [r7, #14]
 800f2dc:	2b01      	cmp	r3, #1
 800f2de:	d11e      	bne.n	800f31e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	7c1b      	ldrb	r3, [r3, #16]
 800f2e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f2e8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	8adb      	ldrh	r3, [r3, #22]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d00a      	beq.n	800f308 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800f2f2:	7b7b      	ldrb	r3, [r7, #13]
 800f2f4:	2b80      	cmp	r3, #128	; 0x80
 800f2f6:	d103      	bne.n	800f300 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	2203      	movs	r2, #3
 800f2fc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f2fe:	e115      	b.n	800f52c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2205      	movs	r2, #5
 800f304:	761a      	strb	r2, [r3, #24]
      break;
 800f306:	e111      	b.n	800f52c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800f308:	7b7b      	ldrb	r3, [r7, #13]
 800f30a:	2b80      	cmp	r3, #128	; 0x80
 800f30c:	d103      	bne.n	800f316 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2209      	movs	r2, #9
 800f312:	761a      	strb	r2, [r3, #24]
      break;
 800f314:	e10a      	b.n	800f52c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2207      	movs	r2, #7
 800f31a:	761a      	strb	r2, [r3, #24]
      break;
 800f31c:	e106      	b.n	800f52c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f31e:	7bbb      	ldrb	r3, [r7, #14]
 800f320:	2b04      	cmp	r3, #4
 800f322:	d003      	beq.n	800f32c <USBH_HandleControl+0xcc>
 800f324:	7bbb      	ldrb	r3, [r7, #14]
 800f326:	2b02      	cmp	r3, #2
 800f328:	f040 8100 	bne.w	800f52c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	220b      	movs	r2, #11
 800f330:	761a      	strb	r2, [r3, #24]
      break;
 800f332:	e0fb      	b.n	800f52c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f33a:	b29a      	uxth	r2, r3
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	6899      	ldr	r1, [r3, #8]
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	899a      	ldrh	r2, [r3, #12]
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	791b      	ldrb	r3, [r3, #4]
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	f000 f93a 	bl	800f5c6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	2204      	movs	r2, #4
 800f356:	761a      	strb	r2, [r3, #24]
      break;
 800f358:	e0f1      	b.n	800f53e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	791b      	ldrb	r3, [r3, #4]
 800f35e:	4619      	mov	r1, r3
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f000 fccd 	bl	800fd00 <USBH_LL_GetURBState>
 800f366:	4603      	mov	r3, r0
 800f368:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800f36a:	7bbb      	ldrb	r3, [r7, #14]
 800f36c:	2b01      	cmp	r3, #1
 800f36e:	d102      	bne.n	800f376 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2209      	movs	r2, #9
 800f374:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800f376:	7bbb      	ldrb	r3, [r7, #14]
 800f378:	2b05      	cmp	r3, #5
 800f37a:	d102      	bne.n	800f382 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800f37c:	2303      	movs	r3, #3
 800f37e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f380:	e0d6      	b.n	800f530 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800f382:	7bbb      	ldrb	r3, [r7, #14]
 800f384:	2b04      	cmp	r3, #4
 800f386:	f040 80d3 	bne.w	800f530 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	220b      	movs	r2, #11
 800f38e:	761a      	strb	r2, [r3, #24]
      break;
 800f390:	e0ce      	b.n	800f530 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	6899      	ldr	r1, [r3, #8]
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	899a      	ldrh	r2, [r3, #12]
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	795b      	ldrb	r3, [r3, #5]
 800f39e:	2001      	movs	r0, #1
 800f3a0:	9000      	str	r0, [sp, #0]
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f000 f8ea 	bl	800f57c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f3ae:	b29a      	uxth	r2, r3
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2206      	movs	r2, #6
 800f3b8:	761a      	strb	r2, [r3, #24]
      break;
 800f3ba:	e0c0      	b.n	800f53e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	795b      	ldrb	r3, [r3, #5]
 800f3c0:	4619      	mov	r1, r3
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f000 fc9c 	bl	800fd00 <USBH_LL_GetURBState>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f3cc:	7bbb      	ldrb	r3, [r7, #14]
 800f3ce:	2b01      	cmp	r3, #1
 800f3d0:	d103      	bne.n	800f3da <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2207      	movs	r2, #7
 800f3d6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f3d8:	e0ac      	b.n	800f534 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800f3da:	7bbb      	ldrb	r3, [r7, #14]
 800f3dc:	2b05      	cmp	r3, #5
 800f3de:	d105      	bne.n	800f3ec <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	220c      	movs	r2, #12
 800f3e4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f3e6:	2303      	movs	r3, #3
 800f3e8:	73fb      	strb	r3, [r7, #15]
      break;
 800f3ea:	e0a3      	b.n	800f534 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f3ec:	7bbb      	ldrb	r3, [r7, #14]
 800f3ee:	2b02      	cmp	r3, #2
 800f3f0:	d103      	bne.n	800f3fa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	2205      	movs	r2, #5
 800f3f6:	761a      	strb	r2, [r3, #24]
      break;
 800f3f8:	e09c      	b.n	800f534 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800f3fa:	7bbb      	ldrb	r3, [r7, #14]
 800f3fc:	2b04      	cmp	r3, #4
 800f3fe:	f040 8099 	bne.w	800f534 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	220b      	movs	r2, #11
 800f406:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f408:	2302      	movs	r3, #2
 800f40a:	73fb      	strb	r3, [r7, #15]
      break;
 800f40c:	e092      	b.n	800f534 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	791b      	ldrb	r3, [r3, #4]
 800f412:	2200      	movs	r2, #0
 800f414:	2100      	movs	r1, #0
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	f000 f8d5 	bl	800f5c6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f422:	b29a      	uxth	r2, r3
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2208      	movs	r2, #8
 800f42c:	761a      	strb	r2, [r3, #24]

      break;
 800f42e:	e086      	b.n	800f53e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	791b      	ldrb	r3, [r3, #4]
 800f434:	4619      	mov	r1, r3
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f000 fc62 	bl	800fd00 <USBH_LL_GetURBState>
 800f43c:	4603      	mov	r3, r0
 800f43e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f440:	7bbb      	ldrb	r3, [r7, #14]
 800f442:	2b01      	cmp	r3, #1
 800f444:	d105      	bne.n	800f452 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	220d      	movs	r2, #13
 800f44a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f44c:	2300      	movs	r3, #0
 800f44e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f450:	e072      	b.n	800f538 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800f452:	7bbb      	ldrb	r3, [r7, #14]
 800f454:	2b04      	cmp	r3, #4
 800f456:	d103      	bne.n	800f460 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	220b      	movs	r2, #11
 800f45c:	761a      	strb	r2, [r3, #24]
      break;
 800f45e:	e06b      	b.n	800f538 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800f460:	7bbb      	ldrb	r3, [r7, #14]
 800f462:	2b05      	cmp	r3, #5
 800f464:	d168      	bne.n	800f538 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800f466:	2303      	movs	r3, #3
 800f468:	73fb      	strb	r3, [r7, #15]
      break;
 800f46a:	e065      	b.n	800f538 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	795b      	ldrb	r3, [r3, #5]
 800f470:	2201      	movs	r2, #1
 800f472:	9200      	str	r2, [sp, #0]
 800f474:	2200      	movs	r2, #0
 800f476:	2100      	movs	r1, #0
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	f000 f87f 	bl	800f57c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f484:	b29a      	uxth	r2, r3
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	220a      	movs	r2, #10
 800f48e:	761a      	strb	r2, [r3, #24]
      break;
 800f490:	e055      	b.n	800f53e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	795b      	ldrb	r3, [r3, #5]
 800f496:	4619      	mov	r1, r3
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	f000 fc31 	bl	800fd00 <USBH_LL_GetURBState>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800f4a2:	7bbb      	ldrb	r3, [r7, #14]
 800f4a4:	2b01      	cmp	r3, #1
 800f4a6:	d105      	bne.n	800f4b4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	220d      	movs	r2, #13
 800f4b0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f4b2:	e043      	b.n	800f53c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f4b4:	7bbb      	ldrb	r3, [r7, #14]
 800f4b6:	2b02      	cmp	r3, #2
 800f4b8:	d103      	bne.n	800f4c2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2209      	movs	r2, #9
 800f4be:	761a      	strb	r2, [r3, #24]
      break;
 800f4c0:	e03c      	b.n	800f53c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800f4c2:	7bbb      	ldrb	r3, [r7, #14]
 800f4c4:	2b04      	cmp	r3, #4
 800f4c6:	d139      	bne.n	800f53c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	220b      	movs	r2, #11
 800f4cc:	761a      	strb	r2, [r3, #24]
      break;
 800f4ce:	e035      	b.n	800f53c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	7e5b      	ldrb	r3, [r3, #25]
 800f4d4:	3301      	adds	r3, #1
 800f4d6:	b2da      	uxtb	r2, r3
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	765a      	strb	r2, [r3, #25]
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	7e5b      	ldrb	r3, [r3, #25]
 800f4e0:	2b02      	cmp	r3, #2
 800f4e2:	d806      	bhi.n	800f4f2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2201      	movs	r2, #1
 800f4e8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2201      	movs	r2, #1
 800f4ee:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800f4f0:	e025      	b.n	800f53e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f4f8:	2106      	movs	r1, #6
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2200      	movs	r2, #0
 800f502:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	795b      	ldrb	r3, [r3, #5]
 800f508:	4619      	mov	r1, r3
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f000 f90c 	bl	800f728 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	791b      	ldrb	r3, [r3, #4]
 800f514:	4619      	mov	r1, r3
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f000 f906 	bl	800f728 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2200      	movs	r2, #0
 800f520:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800f522:	2302      	movs	r3, #2
 800f524:	73fb      	strb	r3, [r7, #15]
      break;
 800f526:	e00a      	b.n	800f53e <USBH_HandleControl+0x2de>

    default:
      break;
 800f528:	bf00      	nop
 800f52a:	e008      	b.n	800f53e <USBH_HandleControl+0x2de>
      break;
 800f52c:	bf00      	nop
 800f52e:	e006      	b.n	800f53e <USBH_HandleControl+0x2de>
      break;
 800f530:	bf00      	nop
 800f532:	e004      	b.n	800f53e <USBH_HandleControl+0x2de>
      break;
 800f534:	bf00      	nop
 800f536:	e002      	b.n	800f53e <USBH_HandleControl+0x2de>
      break;
 800f538:	bf00      	nop
 800f53a:	e000      	b.n	800f53e <USBH_HandleControl+0x2de>
      break;
 800f53c:	bf00      	nop
  }

  return status;
 800f53e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f540:	4618      	mov	r0, r3
 800f542:	3710      	adds	r7, #16
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}

0800f548 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b088      	sub	sp, #32
 800f54c:	af04      	add	r7, sp, #16
 800f54e:	60f8      	str	r0, [r7, #12]
 800f550:	60b9      	str	r1, [r7, #8]
 800f552:	4613      	mov	r3, r2
 800f554:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f556:	79f9      	ldrb	r1, [r7, #7]
 800f558:	2300      	movs	r3, #0
 800f55a:	9303      	str	r3, [sp, #12]
 800f55c:	2308      	movs	r3, #8
 800f55e:	9302      	str	r3, [sp, #8]
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	9301      	str	r3, [sp, #4]
 800f564:	2300      	movs	r3, #0
 800f566:	9300      	str	r3, [sp, #0]
 800f568:	2300      	movs	r3, #0
 800f56a:	2200      	movs	r2, #0
 800f56c:	68f8      	ldr	r0, [r7, #12]
 800f56e:	f000 fb96 	bl	800fc9e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800f572:	2300      	movs	r3, #0
}
 800f574:	4618      	mov	r0, r3
 800f576:	3710      	adds	r7, #16
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}

0800f57c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b088      	sub	sp, #32
 800f580:	af04      	add	r7, sp, #16
 800f582:	60f8      	str	r0, [r7, #12]
 800f584:	60b9      	str	r1, [r7, #8]
 800f586:	4611      	mov	r1, r2
 800f588:	461a      	mov	r2, r3
 800f58a:	460b      	mov	r3, r1
 800f58c:	80fb      	strh	r3, [r7, #6]
 800f58e:	4613      	mov	r3, r2
 800f590:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d001      	beq.n	800f5a0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800f59c:	2300      	movs	r3, #0
 800f59e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f5a0:	7979      	ldrb	r1, [r7, #5]
 800f5a2:	7e3b      	ldrb	r3, [r7, #24]
 800f5a4:	9303      	str	r3, [sp, #12]
 800f5a6:	88fb      	ldrh	r3, [r7, #6]
 800f5a8:	9302      	str	r3, [sp, #8]
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	9301      	str	r3, [sp, #4]
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	9300      	str	r3, [sp, #0]
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	68f8      	ldr	r0, [r7, #12]
 800f5b8:	f000 fb71 	bl	800fc9e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800f5bc:	2300      	movs	r3, #0
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3710      	adds	r7, #16
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}

0800f5c6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800f5c6:	b580      	push	{r7, lr}
 800f5c8:	b088      	sub	sp, #32
 800f5ca:	af04      	add	r7, sp, #16
 800f5cc:	60f8      	str	r0, [r7, #12]
 800f5ce:	60b9      	str	r1, [r7, #8]
 800f5d0:	4611      	mov	r1, r2
 800f5d2:	461a      	mov	r2, r3
 800f5d4:	460b      	mov	r3, r1
 800f5d6:	80fb      	strh	r3, [r7, #6]
 800f5d8:	4613      	mov	r3, r2
 800f5da:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f5dc:	7979      	ldrb	r1, [r7, #5]
 800f5de:	2300      	movs	r3, #0
 800f5e0:	9303      	str	r3, [sp, #12]
 800f5e2:	88fb      	ldrh	r3, [r7, #6]
 800f5e4:	9302      	str	r3, [sp, #8]
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	9301      	str	r3, [sp, #4]
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	9300      	str	r3, [sp, #0]
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	2201      	movs	r2, #1
 800f5f2:	68f8      	ldr	r0, [r7, #12]
 800f5f4:	f000 fb53 	bl	800fc9e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800f5f8:	2300      	movs	r3, #0

}
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	3710      	adds	r7, #16
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}

0800f602 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800f602:	b580      	push	{r7, lr}
 800f604:	b088      	sub	sp, #32
 800f606:	af04      	add	r7, sp, #16
 800f608:	60f8      	str	r0, [r7, #12]
 800f60a:	60b9      	str	r1, [r7, #8]
 800f60c:	4611      	mov	r1, r2
 800f60e:	461a      	mov	r2, r3
 800f610:	460b      	mov	r3, r1
 800f612:	80fb      	strh	r3, [r7, #6]
 800f614:	4613      	mov	r3, r2
 800f616:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d001      	beq.n	800f626 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800f622:	2300      	movs	r3, #0
 800f624:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f626:	7979      	ldrb	r1, [r7, #5]
 800f628:	7e3b      	ldrb	r3, [r7, #24]
 800f62a:	9303      	str	r3, [sp, #12]
 800f62c:	88fb      	ldrh	r3, [r7, #6]
 800f62e:	9302      	str	r3, [sp, #8]
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	9301      	str	r3, [sp, #4]
 800f634:	2301      	movs	r3, #1
 800f636:	9300      	str	r3, [sp, #0]
 800f638:	2302      	movs	r3, #2
 800f63a:	2200      	movs	r2, #0
 800f63c:	68f8      	ldr	r0, [r7, #12]
 800f63e:	f000 fb2e 	bl	800fc9e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800f642:	2300      	movs	r3, #0
}
 800f644:	4618      	mov	r0, r3
 800f646:	3710      	adds	r7, #16
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}

0800f64c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b088      	sub	sp, #32
 800f650:	af04      	add	r7, sp, #16
 800f652:	60f8      	str	r0, [r7, #12]
 800f654:	60b9      	str	r1, [r7, #8]
 800f656:	4611      	mov	r1, r2
 800f658:	461a      	mov	r2, r3
 800f65a:	460b      	mov	r3, r1
 800f65c:	80fb      	strh	r3, [r7, #6]
 800f65e:	4613      	mov	r3, r2
 800f660:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f662:	7979      	ldrb	r1, [r7, #5]
 800f664:	2300      	movs	r3, #0
 800f666:	9303      	str	r3, [sp, #12]
 800f668:	88fb      	ldrh	r3, [r7, #6]
 800f66a:	9302      	str	r3, [sp, #8]
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	9301      	str	r3, [sp, #4]
 800f670:	2301      	movs	r3, #1
 800f672:	9300      	str	r3, [sp, #0]
 800f674:	2302      	movs	r3, #2
 800f676:	2201      	movs	r2, #1
 800f678:	68f8      	ldr	r0, [r7, #12]
 800f67a:	f000 fb10 	bl	800fc9e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800f67e:	2300      	movs	r3, #0
}
 800f680:	4618      	mov	r0, r3
 800f682:	3710      	adds	r7, #16
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}

0800f688 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b086      	sub	sp, #24
 800f68c:	af04      	add	r7, sp, #16
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	4608      	mov	r0, r1
 800f692:	4611      	mov	r1, r2
 800f694:	461a      	mov	r2, r3
 800f696:	4603      	mov	r3, r0
 800f698:	70fb      	strb	r3, [r7, #3]
 800f69a:	460b      	mov	r3, r1
 800f69c:	70bb      	strb	r3, [r7, #2]
 800f69e:	4613      	mov	r3, r2
 800f6a0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800f6a2:	7878      	ldrb	r0, [r7, #1]
 800f6a4:	78ba      	ldrb	r2, [r7, #2]
 800f6a6:	78f9      	ldrb	r1, [r7, #3]
 800f6a8:	8b3b      	ldrh	r3, [r7, #24]
 800f6aa:	9302      	str	r3, [sp, #8]
 800f6ac:	7d3b      	ldrb	r3, [r7, #20]
 800f6ae:	9301      	str	r3, [sp, #4]
 800f6b0:	7c3b      	ldrb	r3, [r7, #16]
 800f6b2:	9300      	str	r3, [sp, #0]
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f000 faa3 	bl	800fc02 <USBH_LL_OpenPipe>

  return USBH_OK;
 800f6bc:	2300      	movs	r3, #0
}
 800f6be:	4618      	mov	r0, r3
 800f6c0:	3708      	adds	r7, #8
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bd80      	pop	{r7, pc}

0800f6c6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800f6c6:	b580      	push	{r7, lr}
 800f6c8:	b082      	sub	sp, #8
 800f6ca:	af00      	add	r7, sp, #0
 800f6cc:	6078      	str	r0, [r7, #4]
 800f6ce:	460b      	mov	r3, r1
 800f6d0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800f6d2:	78fb      	ldrb	r3, [r7, #3]
 800f6d4:	4619      	mov	r1, r3
 800f6d6:	6878      	ldr	r0, [r7, #4]
 800f6d8:	f000 fac2 	bl	800fc60 <USBH_LL_ClosePipe>

  return USBH_OK;
 800f6dc:	2300      	movs	r3, #0
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3708      	adds	r7, #8
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}

0800f6e6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800f6e6:	b580      	push	{r7, lr}
 800f6e8:	b084      	sub	sp, #16
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	6078      	str	r0, [r7, #4]
 800f6ee:	460b      	mov	r3, r1
 800f6f0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f000 f836 	bl	800f764 <USBH_GetFreePipe>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800f6fc:	89fb      	ldrh	r3, [r7, #14]
 800f6fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f702:	4293      	cmp	r3, r2
 800f704:	d00a      	beq.n	800f71c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800f706:	78fa      	ldrb	r2, [r7, #3]
 800f708:	89fb      	ldrh	r3, [r7, #14]
 800f70a:	f003 030f 	and.w	r3, r3, #15
 800f70e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f712:	6879      	ldr	r1, [r7, #4]
 800f714:	33e0      	adds	r3, #224	; 0xe0
 800f716:	009b      	lsls	r3, r3, #2
 800f718:	440b      	add	r3, r1
 800f71a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800f71c:	89fb      	ldrh	r3, [r7, #14]
 800f71e:	b2db      	uxtb	r3, r3
}
 800f720:	4618      	mov	r0, r3
 800f722:	3710      	adds	r7, #16
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}

0800f728 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800f728:	b480      	push	{r7}
 800f72a:	b083      	sub	sp, #12
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
 800f730:	460b      	mov	r3, r1
 800f732:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800f734:	78fb      	ldrb	r3, [r7, #3]
 800f736:	2b0a      	cmp	r3, #10
 800f738:	d80d      	bhi.n	800f756 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800f73a:	78fb      	ldrb	r3, [r7, #3]
 800f73c:	687a      	ldr	r2, [r7, #4]
 800f73e:	33e0      	adds	r3, #224	; 0xe0
 800f740:	009b      	lsls	r3, r3, #2
 800f742:	4413      	add	r3, r2
 800f744:	685a      	ldr	r2, [r3, #4]
 800f746:	78fb      	ldrb	r3, [r7, #3]
 800f748:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f74c:	6879      	ldr	r1, [r7, #4]
 800f74e:	33e0      	adds	r3, #224	; 0xe0
 800f750:	009b      	lsls	r3, r3, #2
 800f752:	440b      	add	r3, r1
 800f754:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800f756:	2300      	movs	r3, #0
}
 800f758:	4618      	mov	r0, r3
 800f75a:	370c      	adds	r7, #12
 800f75c:	46bd      	mov	sp, r7
 800f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f762:	4770      	bx	lr

0800f764 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800f764:	b480      	push	{r7}
 800f766:	b085      	sub	sp, #20
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800f76c:	2300      	movs	r3, #0
 800f76e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800f770:	2300      	movs	r3, #0
 800f772:	73fb      	strb	r3, [r7, #15]
 800f774:	e00f      	b.n	800f796 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800f776:	7bfb      	ldrb	r3, [r7, #15]
 800f778:	687a      	ldr	r2, [r7, #4]
 800f77a:	33e0      	adds	r3, #224	; 0xe0
 800f77c:	009b      	lsls	r3, r3, #2
 800f77e:	4413      	add	r3, r2
 800f780:	685b      	ldr	r3, [r3, #4]
 800f782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f786:	2b00      	cmp	r3, #0
 800f788:	d102      	bne.n	800f790 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800f78a:	7bfb      	ldrb	r3, [r7, #15]
 800f78c:	b29b      	uxth	r3, r3
 800f78e:	e007      	b.n	800f7a0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800f790:	7bfb      	ldrb	r3, [r7, #15]
 800f792:	3301      	adds	r3, #1
 800f794:	73fb      	strb	r3, [r7, #15]
 800f796:	7bfb      	ldrb	r3, [r7, #15]
 800f798:	2b0a      	cmp	r3, #10
 800f79a:	d9ec      	bls.n	800f776 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800f79c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	3714      	adds	r7, #20
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7aa:	4770      	bx	lr

0800f7ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f7ac:	b480      	push	{r7}
 800f7ae:	b087      	sub	sp, #28
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	60f8      	str	r0, [r7, #12]
 800f7b4:	60b9      	str	r1, [r7, #8]
 800f7b6:	4613      	mov	r3, r2
 800f7b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f7be:	2300      	movs	r3, #0
 800f7c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f7c2:	4b1f      	ldr	r3, [pc, #124]	; (800f840 <FATFS_LinkDriverEx+0x94>)
 800f7c4:	7a5b      	ldrb	r3, [r3, #9]
 800f7c6:	b2db      	uxtb	r3, r3
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d131      	bne.n	800f830 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f7cc:	4b1c      	ldr	r3, [pc, #112]	; (800f840 <FATFS_LinkDriverEx+0x94>)
 800f7ce:	7a5b      	ldrb	r3, [r3, #9]
 800f7d0:	b2db      	uxtb	r3, r3
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	4b1a      	ldr	r3, [pc, #104]	; (800f840 <FATFS_LinkDriverEx+0x94>)
 800f7d6:	2100      	movs	r1, #0
 800f7d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f7da:	4b19      	ldr	r3, [pc, #100]	; (800f840 <FATFS_LinkDriverEx+0x94>)
 800f7dc:	7a5b      	ldrb	r3, [r3, #9]
 800f7de:	b2db      	uxtb	r3, r3
 800f7e0:	4a17      	ldr	r2, [pc, #92]	; (800f840 <FATFS_LinkDriverEx+0x94>)
 800f7e2:	009b      	lsls	r3, r3, #2
 800f7e4:	4413      	add	r3, r2
 800f7e6:	68fa      	ldr	r2, [r7, #12]
 800f7e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f7ea:	4b15      	ldr	r3, [pc, #84]	; (800f840 <FATFS_LinkDriverEx+0x94>)
 800f7ec:	7a5b      	ldrb	r3, [r3, #9]
 800f7ee:	b2db      	uxtb	r3, r3
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	4b13      	ldr	r3, [pc, #76]	; (800f840 <FATFS_LinkDriverEx+0x94>)
 800f7f4:	4413      	add	r3, r2
 800f7f6:	79fa      	ldrb	r2, [r7, #7]
 800f7f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f7fa:	4b11      	ldr	r3, [pc, #68]	; (800f840 <FATFS_LinkDriverEx+0x94>)
 800f7fc:	7a5b      	ldrb	r3, [r3, #9]
 800f7fe:	b2db      	uxtb	r3, r3
 800f800:	1c5a      	adds	r2, r3, #1
 800f802:	b2d1      	uxtb	r1, r2
 800f804:	4a0e      	ldr	r2, [pc, #56]	; (800f840 <FATFS_LinkDriverEx+0x94>)
 800f806:	7251      	strb	r1, [r2, #9]
 800f808:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f80a:	7dbb      	ldrb	r3, [r7, #22]
 800f80c:	3330      	adds	r3, #48	; 0x30
 800f80e:	b2da      	uxtb	r2, r3
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	3301      	adds	r3, #1
 800f818:	223a      	movs	r2, #58	; 0x3a
 800f81a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	3302      	adds	r3, #2
 800f820:	222f      	movs	r2, #47	; 0x2f
 800f822:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	3303      	adds	r3, #3
 800f828:	2200      	movs	r2, #0
 800f82a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f82c:	2300      	movs	r3, #0
 800f82e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f830:	7dfb      	ldrb	r3, [r7, #23]
}
 800f832:	4618      	mov	r0, r3
 800f834:	371c      	adds	r7, #28
 800f836:	46bd      	mov	sp, r7
 800f838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83c:	4770      	bx	lr
 800f83e:	bf00      	nop
 800f840:	200008a0 	.word	0x200008a0

0800f844 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b082      	sub	sp, #8
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
 800f84c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f84e:	2200      	movs	r2, #0
 800f850:	6839      	ldr	r1, [r7, #0]
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	f7ff ffaa 	bl	800f7ac <FATFS_LinkDriverEx>
 800f858:	4603      	mov	r3, r0
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3708      	adds	r7, #8
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}
	...

0800f864 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800f868:	2201      	movs	r2, #1
 800f86a:	490e      	ldr	r1, [pc, #56]	; (800f8a4 <MX_USB_HOST_Init+0x40>)
 800f86c:	480e      	ldr	r0, [pc, #56]	; (800f8a8 <MX_USB_HOST_Init+0x44>)
 800f86e:	f7fe fc45 	bl	800e0fc <USBH_Init>
 800f872:	4603      	mov	r3, r0
 800f874:	2b00      	cmp	r3, #0
 800f876:	d001      	beq.n	800f87c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f878:	f7f2 ff80 	bl	800277c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800f87c:	490b      	ldr	r1, [pc, #44]	; (800f8ac <MX_USB_HOST_Init+0x48>)
 800f87e:	480a      	ldr	r0, [pc, #40]	; (800f8a8 <MX_USB_HOST_Init+0x44>)
 800f880:	f7fe fcca 	bl	800e218 <USBH_RegisterClass>
 800f884:	4603      	mov	r3, r0
 800f886:	2b00      	cmp	r3, #0
 800f888:	d001      	beq.n	800f88e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f88a:	f7f2 ff77 	bl	800277c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800f88e:	4806      	ldr	r0, [pc, #24]	; (800f8a8 <MX_USB_HOST_Init+0x44>)
 800f890:	f7fe fd4e 	bl	800e330 <USBH_Start>
 800f894:	4603      	mov	r3, r0
 800f896:	2b00      	cmp	r3, #0
 800f898:	d001      	beq.n	800f89e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f89a:	f7f2 ff6f 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f89e:	bf00      	nop
 800f8a0:	bd80      	pop	{r7, pc}
 800f8a2:	bf00      	nop
 800f8a4:	0800f8c5 	.word	0x0800f8c5
 800f8a8:	20001574 	.word	0x20001574
 800f8ac:	2000000c 	.word	0x2000000c

0800f8b0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800f8b4:	4802      	ldr	r0, [pc, #8]	; (800f8c0 <MX_USB_HOST_Process+0x10>)
 800f8b6:	f7fe fd4b 	bl	800e350 <USBH_Process>
}
 800f8ba:	bf00      	nop
 800f8bc:	bd80      	pop	{r7, pc}
 800f8be:	bf00      	nop
 800f8c0:	20001574 	.word	0x20001574

0800f8c4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f8c4:	b480      	push	{r7}
 800f8c6:	b083      	sub	sp, #12
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
 800f8cc:	460b      	mov	r3, r1
 800f8ce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f8d0:	78fb      	ldrb	r3, [r7, #3]
 800f8d2:	3b01      	subs	r3, #1
 800f8d4:	2b04      	cmp	r3, #4
 800f8d6:	d819      	bhi.n	800f90c <USBH_UserProcess+0x48>
 800f8d8:	a201      	add	r2, pc, #4	; (adr r2, 800f8e0 <USBH_UserProcess+0x1c>)
 800f8da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8de:	bf00      	nop
 800f8e0:	0800f90d 	.word	0x0800f90d
 800f8e4:	0800f8fd 	.word	0x0800f8fd
 800f8e8:	0800f90d 	.word	0x0800f90d
 800f8ec:	0800f905 	.word	0x0800f905
 800f8f0:	0800f8f5 	.word	0x0800f8f5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f8f4:	4b09      	ldr	r3, [pc, #36]	; (800f91c <USBH_UserProcess+0x58>)
 800f8f6:	2203      	movs	r2, #3
 800f8f8:	701a      	strb	r2, [r3, #0]
  break;
 800f8fa:	e008      	b.n	800f90e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f8fc:	4b07      	ldr	r3, [pc, #28]	; (800f91c <USBH_UserProcess+0x58>)
 800f8fe:	2202      	movs	r2, #2
 800f900:	701a      	strb	r2, [r3, #0]
  break;
 800f902:	e004      	b.n	800f90e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f904:	4b05      	ldr	r3, [pc, #20]	; (800f91c <USBH_UserProcess+0x58>)
 800f906:	2201      	movs	r2, #1
 800f908:	701a      	strb	r2, [r3, #0]
  break;
 800f90a:	e000      	b.n	800f90e <USBH_UserProcess+0x4a>

  default:
  break;
 800f90c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f90e:	bf00      	nop
 800f910:	370c      	adds	r7, #12
 800f912:	46bd      	mov	sp, r7
 800f914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f918:	4770      	bx	lr
 800f91a:	bf00      	nop
 800f91c:	200008ac 	.word	0x200008ac

0800f920 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b08a      	sub	sp, #40	; 0x28
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f928:	f107 0314 	add.w	r3, r7, #20
 800f92c:	2200      	movs	r2, #0
 800f92e:	601a      	str	r2, [r3, #0]
 800f930:	605a      	str	r2, [r3, #4]
 800f932:	609a      	str	r2, [r3, #8]
 800f934:	60da      	str	r2, [r3, #12]
 800f936:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f940:	d13c      	bne.n	800f9bc <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f942:	4b20      	ldr	r3, [pc, #128]	; (800f9c4 <HAL_HCD_MspInit+0xa4>)
 800f944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f946:	4a1f      	ldr	r2, [pc, #124]	; (800f9c4 <HAL_HCD_MspInit+0xa4>)
 800f948:	f043 0301 	orr.w	r3, r3, #1
 800f94c:	6313      	str	r3, [r2, #48]	; 0x30
 800f94e:	4b1d      	ldr	r3, [pc, #116]	; (800f9c4 <HAL_HCD_MspInit+0xa4>)
 800f950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f952:	f003 0301 	and.w	r3, r3, #1
 800f956:	613b      	str	r3, [r7, #16]
 800f958:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800f95a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800f95e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f960:	2302      	movs	r3, #2
 800f962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f964:	2300      	movs	r3, #0
 800f966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f968:	2303      	movs	r3, #3
 800f96a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f96c:	230a      	movs	r3, #10
 800f96e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f970:	f107 0314 	add.w	r3, r7, #20
 800f974:	4619      	mov	r1, r3
 800f976:	4814      	ldr	r0, [pc, #80]	; (800f9c8 <HAL_HCD_MspInit+0xa8>)
 800f978:	f7f4 fe20 	bl	80045bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f97c:	4b11      	ldr	r3, [pc, #68]	; (800f9c4 <HAL_HCD_MspInit+0xa4>)
 800f97e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f980:	4a10      	ldr	r2, [pc, #64]	; (800f9c4 <HAL_HCD_MspInit+0xa4>)
 800f982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f986:	6353      	str	r3, [r2, #52]	; 0x34
 800f988:	4b0e      	ldr	r3, [pc, #56]	; (800f9c4 <HAL_HCD_MspInit+0xa4>)
 800f98a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f98c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f990:	60fb      	str	r3, [r7, #12]
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	4b0b      	ldr	r3, [pc, #44]	; (800f9c4 <HAL_HCD_MspInit+0xa4>)
 800f996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f998:	4a0a      	ldr	r2, [pc, #40]	; (800f9c4 <HAL_HCD_MspInit+0xa4>)
 800f99a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f99e:	6453      	str	r3, [r2, #68]	; 0x44
 800f9a0:	4b08      	ldr	r3, [pc, #32]	; (800f9c4 <HAL_HCD_MspInit+0xa4>)
 800f9a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f9a8:	60bb      	str	r3, [r7, #8]
 800f9aa:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	2100      	movs	r1, #0
 800f9b0:	2043      	movs	r0, #67	; 0x43
 800f9b2:	f7f4 fa7c 	bl	8003eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f9b6:	2043      	movs	r0, #67	; 0x43
 800f9b8:	f7f4 fa95 	bl	8003ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f9bc:	bf00      	nop
 800f9be:	3728      	adds	r7, #40	; 0x28
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	40023800 	.word	0x40023800
 800f9c8:	40020000 	.word	0x40020000

0800f9cc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b082      	sub	sp, #8
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7ff f88b 	bl	800eaf6 <USBH_LL_IncTimer>
}
 800f9e0:	bf00      	nop
 800f9e2:	3708      	adds	r7, #8
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}

0800f9e8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7ff f8c3 	bl	800eb82 <USBH_LL_Connect>
}
 800f9fc:	bf00      	nop
 800f9fe:	3708      	adds	r7, #8
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}

0800fa04 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b082      	sub	sp, #8
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7ff f8cc 	bl	800ebb0 <USBH_LL_Disconnect>
}
 800fa18:	bf00      	nop
 800fa1a:	3708      	adds	r7, #8
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800fa20:	b480      	push	{r7}
 800fa22:	b083      	sub	sp, #12
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	460b      	mov	r3, r1
 800fa2a:	70fb      	strb	r3, [r7, #3]
 800fa2c:	4613      	mov	r3, r2
 800fa2e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800fa30:	bf00      	nop
 800fa32:	370c      	adds	r7, #12
 800fa34:	46bd      	mov	sp, r7
 800fa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3a:	4770      	bx	lr

0800fa3c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b082      	sub	sp, #8
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7ff f87d 	bl	800eb4a <USBH_LL_PortEnabled>
}
 800fa50:	bf00      	nop
 800fa52:	3708      	adds	r7, #8
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}

0800fa58 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b082      	sub	sp, #8
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fa66:	4618      	mov	r0, r3
 800fa68:	f7ff f87d 	bl	800eb66 <USBH_LL_PortDisabled>
}
 800fa6c:	bf00      	nop
 800fa6e:	3708      	adds	r7, #8
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}

0800fa74 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800fa82:	2b01      	cmp	r3, #1
 800fa84:	d12a      	bne.n	800fadc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800fa86:	4a18      	ldr	r2, [pc, #96]	; (800fae8 <USBH_LL_Init+0x74>)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	4a15      	ldr	r2, [pc, #84]	; (800fae8 <USBH_LL_Init+0x74>)
 800fa92:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fa96:	4b14      	ldr	r3, [pc, #80]	; (800fae8 <USBH_LL_Init+0x74>)
 800fa98:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fa9c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800fa9e:	4b12      	ldr	r3, [pc, #72]	; (800fae8 <USBH_LL_Init+0x74>)
 800faa0:	2208      	movs	r2, #8
 800faa2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800faa4:	4b10      	ldr	r3, [pc, #64]	; (800fae8 <USBH_LL_Init+0x74>)
 800faa6:	2201      	movs	r2, #1
 800faa8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800faaa:	4b0f      	ldr	r3, [pc, #60]	; (800fae8 <USBH_LL_Init+0x74>)
 800faac:	2200      	movs	r2, #0
 800faae:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800fab0:	4b0d      	ldr	r3, [pc, #52]	; (800fae8 <USBH_LL_Init+0x74>)
 800fab2:	2202      	movs	r2, #2
 800fab4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fab6:	4b0c      	ldr	r3, [pc, #48]	; (800fae8 <USBH_LL_Init+0x74>)
 800fab8:	2200      	movs	r2, #0
 800faba:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800fabc:	480a      	ldr	r0, [pc, #40]	; (800fae8 <USBH_LL_Init+0x74>)
 800fabe:	f7f4 ff74 	bl	80049aa <HAL_HCD_Init>
 800fac2:	4603      	mov	r3, r0
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d001      	beq.n	800facc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800fac8:	f7f2 fe58 	bl	800277c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800facc:	4806      	ldr	r0, [pc, #24]	; (800fae8 <USBH_LL_Init+0x74>)
 800face:	f7f5 fb51 	bl	8005174 <HAL_HCD_GetCurrentFrame>
 800fad2:	4603      	mov	r3, r0
 800fad4:	4619      	mov	r1, r3
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f7fe fffe 	bl	800ead8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800fadc:	2300      	movs	r3, #0
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3708      	adds	r7, #8
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}
 800fae6:	bf00      	nop
 800fae8:	2000194c 	.word	0x2000194c

0800faec <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b084      	sub	sp, #16
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800faf4:	2300      	movs	r3, #0
 800faf6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800faf8:	2300      	movs	r3, #0
 800fafa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7f5 fac0 	bl	8005088 <HAL_HCD_Start>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fb0c:	7bfb      	ldrb	r3, [r7, #15]
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f000 f95c 	bl	800fdcc <USBH_Get_USB_Status>
 800fb14:	4603      	mov	r3, r0
 800fb16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb18:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	3710      	adds	r7, #16
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}

0800fb22 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800fb22:	b580      	push	{r7, lr}
 800fb24:	b084      	sub	sp, #16
 800fb26:	af00      	add	r7, sp, #0
 800fb28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7f5 fac8 	bl	80050ce <HAL_HCD_Stop>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fb42:	7bfb      	ldrb	r3, [r7, #15]
 800fb44:	4618      	mov	r0, r3
 800fb46:	f000 f941 	bl	800fdcc <USBH_Get_USB_Status>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb50:	4618      	mov	r0, r3
 800fb52:	3710      	adds	r7, #16
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}

0800fb58 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b084      	sub	sp, #16
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800fb60:	2301      	movs	r3, #1
 800fb62:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f7f5 fb10 	bl	8005190 <HAL_HCD_GetCurrentSpeed>
 800fb70:	4603      	mov	r3, r0
 800fb72:	2b02      	cmp	r3, #2
 800fb74:	d00c      	beq.n	800fb90 <USBH_LL_GetSpeed+0x38>
 800fb76:	2b02      	cmp	r3, #2
 800fb78:	d80d      	bhi.n	800fb96 <USBH_LL_GetSpeed+0x3e>
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d002      	beq.n	800fb84 <USBH_LL_GetSpeed+0x2c>
 800fb7e:	2b01      	cmp	r3, #1
 800fb80:	d003      	beq.n	800fb8a <USBH_LL_GetSpeed+0x32>
 800fb82:	e008      	b.n	800fb96 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800fb84:	2300      	movs	r3, #0
 800fb86:	73fb      	strb	r3, [r7, #15]
    break;
 800fb88:	e008      	b.n	800fb9c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800fb8a:	2301      	movs	r3, #1
 800fb8c:	73fb      	strb	r3, [r7, #15]
    break;
 800fb8e:	e005      	b.n	800fb9c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800fb90:	2302      	movs	r3, #2
 800fb92:	73fb      	strb	r3, [r7, #15]
    break;
 800fb94:	e002      	b.n	800fb9c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800fb96:	2301      	movs	r3, #1
 800fb98:	73fb      	strb	r3, [r7, #15]
    break;
 800fb9a:	bf00      	nop
  }
  return  speed;
 800fb9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3710      	adds	r7, #16
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}

0800fba6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800fba6:	b580      	push	{r7, lr}
 800fba8:	b084      	sub	sp, #16
 800fbaa:	af00      	add	r7, sp, #0
 800fbac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	f7f5 faa3 	bl	8005108 <HAL_HCD_ResetPort>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fbc6:	7bfb      	ldrb	r3, [r7, #15]
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f000 f8ff 	bl	800fdcc <USBH_Get_USB_Status>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	3710      	adds	r7, #16
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}

0800fbdc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b082      	sub	sp, #8
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	460b      	mov	r3, r1
 800fbe6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fbee:	78fa      	ldrb	r2, [r7, #3]
 800fbf0:	4611      	mov	r1, r2
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f7f5 faaa 	bl	800514c <HAL_HCD_HC_GetXferCount>
 800fbf8:	4603      	mov	r3, r0
}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	3708      	adds	r7, #8
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}

0800fc02 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800fc02:	b590      	push	{r4, r7, lr}
 800fc04:	b089      	sub	sp, #36	; 0x24
 800fc06:	af04      	add	r7, sp, #16
 800fc08:	6078      	str	r0, [r7, #4]
 800fc0a:	4608      	mov	r0, r1
 800fc0c:	4611      	mov	r1, r2
 800fc0e:	461a      	mov	r2, r3
 800fc10:	4603      	mov	r3, r0
 800fc12:	70fb      	strb	r3, [r7, #3]
 800fc14:	460b      	mov	r3, r1
 800fc16:	70bb      	strb	r3, [r7, #2]
 800fc18:	4613      	mov	r3, r2
 800fc1a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fc20:	2300      	movs	r3, #0
 800fc22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800fc2a:	787c      	ldrb	r4, [r7, #1]
 800fc2c:	78ba      	ldrb	r2, [r7, #2]
 800fc2e:	78f9      	ldrb	r1, [r7, #3]
 800fc30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fc32:	9302      	str	r3, [sp, #8]
 800fc34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fc38:	9301      	str	r3, [sp, #4]
 800fc3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fc3e:	9300      	str	r3, [sp, #0]
 800fc40:	4623      	mov	r3, r4
 800fc42:	f7f4 ff14 	bl	8004a6e <HAL_HCD_HC_Init>
 800fc46:	4603      	mov	r3, r0
 800fc48:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800fc4a:	7bfb      	ldrb	r3, [r7, #15]
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f000 f8bd 	bl	800fdcc <USBH_Get_USB_Status>
 800fc52:	4603      	mov	r3, r0
 800fc54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc56:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc58:	4618      	mov	r0, r3
 800fc5a:	3714      	adds	r7, #20
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd90      	pop	{r4, r7, pc}

0800fc60 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b084      	sub	sp, #16
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	460b      	mov	r3, r1
 800fc6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fc70:	2300      	movs	r3, #0
 800fc72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fc7a:	78fa      	ldrb	r2, [r7, #3]
 800fc7c:	4611      	mov	r1, r2
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7f4 ff84 	bl	8004b8c <HAL_HCD_HC_Halt>
 800fc84:	4603      	mov	r3, r0
 800fc86:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fc88:	7bfb      	ldrb	r3, [r7, #15]
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f000 f89e 	bl	800fdcc <USBH_Get_USB_Status>
 800fc90:	4603      	mov	r3, r0
 800fc92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc94:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc96:	4618      	mov	r0, r3
 800fc98:	3710      	adds	r7, #16
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bd80      	pop	{r7, pc}

0800fc9e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800fc9e:	b590      	push	{r4, r7, lr}
 800fca0:	b089      	sub	sp, #36	; 0x24
 800fca2:	af04      	add	r7, sp, #16
 800fca4:	6078      	str	r0, [r7, #4]
 800fca6:	4608      	mov	r0, r1
 800fca8:	4611      	mov	r1, r2
 800fcaa:	461a      	mov	r2, r3
 800fcac:	4603      	mov	r3, r0
 800fcae:	70fb      	strb	r3, [r7, #3]
 800fcb0:	460b      	mov	r3, r1
 800fcb2:	70bb      	strb	r3, [r7, #2]
 800fcb4:	4613      	mov	r3, r2
 800fcb6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcb8:	2300      	movs	r3, #0
 800fcba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800fcc6:	787c      	ldrb	r4, [r7, #1]
 800fcc8:	78ba      	ldrb	r2, [r7, #2]
 800fcca:	78f9      	ldrb	r1, [r7, #3]
 800fccc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fcd0:	9303      	str	r3, [sp, #12]
 800fcd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fcd4:	9302      	str	r3, [sp, #8]
 800fcd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcd8:	9301      	str	r3, [sp, #4]
 800fcda:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fcde:	9300      	str	r3, [sp, #0]
 800fce0:	4623      	mov	r3, r4
 800fce2:	f7f4 ff77 	bl	8004bd4 <HAL_HCD_HC_SubmitRequest>
 800fce6:	4603      	mov	r3, r0
 800fce8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800fcea:	7bfb      	ldrb	r3, [r7, #15]
 800fcec:	4618      	mov	r0, r3
 800fcee:	f000 f86d 	bl	800fdcc <USBH_Get_USB_Status>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fcf6:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3714      	adds	r7, #20
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd90      	pop	{r4, r7, pc}

0800fd00 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b082      	sub	sp, #8
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
 800fd08:	460b      	mov	r3, r1
 800fd0a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fd12:	78fa      	ldrb	r2, [r7, #3]
 800fd14:	4611      	mov	r1, r2
 800fd16:	4618      	mov	r0, r3
 800fd18:	f7f5 fa04 	bl	8005124 <HAL_HCD_HC_GetURBState>
 800fd1c:	4603      	mov	r3, r0
}
 800fd1e:	4618      	mov	r0, r3
 800fd20:	3708      	adds	r7, #8
 800fd22:	46bd      	mov	sp, r7
 800fd24:	bd80      	pop	{r7, pc}

0800fd26 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800fd26:	b580      	push	{r7, lr}
 800fd28:	b082      	sub	sp, #8
 800fd2a:	af00      	add	r7, sp, #0
 800fd2c:	6078      	str	r0, [r7, #4]
 800fd2e:	460b      	mov	r3, r1
 800fd30:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800fd38:	2b01      	cmp	r3, #1
 800fd3a:	d103      	bne.n	800fd44 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800fd3c:	78fb      	ldrb	r3, [r7, #3]
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f000 f870 	bl	800fe24 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800fd44:	20c8      	movs	r0, #200	; 0xc8
 800fd46:	f7f3 fd2b 	bl	80037a0 <HAL_Delay>
  return USBH_OK;
 800fd4a:	2300      	movs	r3, #0
}
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	3708      	adds	r7, #8
 800fd50:	46bd      	mov	sp, r7
 800fd52:	bd80      	pop	{r7, pc}

0800fd54 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800fd54:	b480      	push	{r7}
 800fd56:	b085      	sub	sp, #20
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
 800fd5c:	460b      	mov	r3, r1
 800fd5e:	70fb      	strb	r3, [r7, #3]
 800fd60:	4613      	mov	r3, r2
 800fd62:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fd6a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800fd6c:	78fb      	ldrb	r3, [r7, #3]
 800fd6e:	68fa      	ldr	r2, [r7, #12]
 800fd70:	212c      	movs	r1, #44	; 0x2c
 800fd72:	fb01 f303 	mul.w	r3, r1, r3
 800fd76:	4413      	add	r3, r2
 800fd78:	333b      	adds	r3, #59	; 0x3b
 800fd7a:	781b      	ldrb	r3, [r3, #0]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d009      	beq.n	800fd94 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800fd80:	78fb      	ldrb	r3, [r7, #3]
 800fd82:	68fa      	ldr	r2, [r7, #12]
 800fd84:	212c      	movs	r1, #44	; 0x2c
 800fd86:	fb01 f303 	mul.w	r3, r1, r3
 800fd8a:	4413      	add	r3, r2
 800fd8c:	3354      	adds	r3, #84	; 0x54
 800fd8e:	78ba      	ldrb	r2, [r7, #2]
 800fd90:	701a      	strb	r2, [r3, #0]
 800fd92:	e008      	b.n	800fda6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800fd94:	78fb      	ldrb	r3, [r7, #3]
 800fd96:	68fa      	ldr	r2, [r7, #12]
 800fd98:	212c      	movs	r1, #44	; 0x2c
 800fd9a:	fb01 f303 	mul.w	r3, r1, r3
 800fd9e:	4413      	add	r3, r2
 800fda0:	3355      	adds	r3, #85	; 0x55
 800fda2:	78ba      	ldrb	r2, [r7, #2]
 800fda4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800fda6:	2300      	movs	r3, #0
}
 800fda8:	4618      	mov	r0, r3
 800fdaa:	3714      	adds	r7, #20
 800fdac:	46bd      	mov	sp, r7
 800fdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb2:	4770      	bx	lr

0800fdb4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b082      	sub	sp, #8
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800fdbc:	6878      	ldr	r0, [r7, #4]
 800fdbe:	f7f3 fcef 	bl	80037a0 <HAL_Delay>
}
 800fdc2:	bf00      	nop
 800fdc4:	3708      	adds	r7, #8
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}
	...

0800fdcc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fdcc:	b480      	push	{r7}
 800fdce:	b085      	sub	sp, #20
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fdda:	79fb      	ldrb	r3, [r7, #7]
 800fddc:	2b03      	cmp	r3, #3
 800fdde:	d817      	bhi.n	800fe10 <USBH_Get_USB_Status+0x44>
 800fde0:	a201      	add	r2, pc, #4	; (adr r2, 800fde8 <USBH_Get_USB_Status+0x1c>)
 800fde2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fde6:	bf00      	nop
 800fde8:	0800fdf9 	.word	0x0800fdf9
 800fdec:	0800fdff 	.word	0x0800fdff
 800fdf0:	0800fe05 	.word	0x0800fe05
 800fdf4:	0800fe0b 	.word	0x0800fe0b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	73fb      	strb	r3, [r7, #15]
    break;
 800fdfc:	e00b      	b.n	800fe16 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800fdfe:	2302      	movs	r3, #2
 800fe00:	73fb      	strb	r3, [r7, #15]
    break;
 800fe02:	e008      	b.n	800fe16 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800fe04:	2301      	movs	r3, #1
 800fe06:	73fb      	strb	r3, [r7, #15]
    break;
 800fe08:	e005      	b.n	800fe16 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800fe0a:	2302      	movs	r3, #2
 800fe0c:	73fb      	strb	r3, [r7, #15]
    break;
 800fe0e:	e002      	b.n	800fe16 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800fe10:	2302      	movs	r3, #2
 800fe12:	73fb      	strb	r3, [r7, #15]
    break;
 800fe14:	bf00      	nop
  }
  return usb_status;
 800fe16:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3714      	adds	r7, #20
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe22:	4770      	bx	lr

0800fe24 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b084      	sub	sp, #16
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800fe2e:	79fb      	ldrb	r3, [r7, #7]
 800fe30:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800fe32:	79fb      	ldrb	r3, [r7, #7]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d102      	bne.n	800fe3e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800fe38:	2301      	movs	r3, #1
 800fe3a:	73fb      	strb	r3, [r7, #15]
 800fe3c:	e001      	b.n	800fe42 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 800fe42:	7bfb      	ldrb	r3, [r7, #15]
 800fe44:	461a      	mov	r2, r3
 800fe46:	2120      	movs	r1, #32
 800fe48:	4803      	ldr	r0, [pc, #12]	; (800fe58 <MX_DriverVbusFS+0x34>)
 800fe4a:	f7f4 fd7b 	bl	8004944 <HAL_GPIO_WritePin>
}
 800fe4e:	bf00      	nop
 800fe50:	3710      	adds	r7, #16
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}
 800fe56:	bf00      	nop
 800fe58:	40020c00 	.word	0x40020c00

0800fe5c <chatbot_configure_activations>:


AI_DECLARE_STATIC
ai_bool chatbot_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	b085      	sub	sp, #20
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
 800fe64:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	691b      	ldr	r3, [r3, #16]
 800fe6a:	3303      	adds	r3, #3
 800fe6c:	f023 0303 	bic.w	r3, r3, #3
 800fe70:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 800fe72:	4b1c      	ldr	r3, [pc, #112]	; (800fee4 <chatbot_configure_activations+0x88>)
 800fe74:	2200      	movs	r2, #0
 800fe76:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 800fe78:	4b1a      	ldr	r3, [pc, #104]	; (800fee4 <chatbot_configure_activations+0x88>)
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	60da      	str	r2, [r3, #12]
    dense_output_array.data = AI_PTR(activations + 0);
 800fe7e:	4a1a      	ldr	r2, [pc, #104]	; (800fee8 <chatbot_configure_activations+0x8c>)
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(activations + 0);
 800fe84:	4a18      	ldr	r2, [pc, #96]	; (800fee8 <chatbot_configure_activations+0x8c>)
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	60d3      	str	r3, [r2, #12]
    dense_nl_output_array.data = AI_PTR(activations + 0);
 800fe8a:	4a18      	ldr	r2, [pc, #96]	; (800feec <chatbot_configure_activations+0x90>)
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	6093      	str	r3, [r2, #8]
    dense_nl_output_array.data_start = AI_PTR(activations + 0);
 800fe90:	4a16      	ldr	r2, [pc, #88]	; (800feec <chatbot_configure_activations+0x90>)
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 512);
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800fe9c:	4a14      	ldr	r2, [pc, #80]	; (800fef0 <chatbot_configure_activations+0x94>)
 800fe9e:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 512);
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800fea6:	4a12      	ldr	r2, [pc, #72]	; (800fef0 <chatbot_configure_activations+0x94>)
 800fea8:	60d3      	str	r3, [r2, #12]
    dense_1_nl_output_array.data = AI_PTR(activations + 0);
 800feaa:	4a12      	ldr	r2, [pc, #72]	; (800fef4 <chatbot_configure_activations+0x98>)
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	6093      	str	r3, [r2, #8]
    dense_1_nl_output_array.data_start = AI_PTR(activations + 0);
 800feb0:	4a10      	ldr	r2, [pc, #64]	; (800fef4 <chatbot_configure_activations+0x98>)
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 256);
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800febc:	4a0e      	ldr	r2, [pc, #56]	; (800fef8 <chatbot_configure_activations+0x9c>)
 800febe:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 256);
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800fec6:	4a0c      	ldr	r2, [pc, #48]	; (800fef8 <chatbot_configure_activations+0x9c>)
 800fec8:	60d3      	str	r3, [r2, #12]
    dense_2_nl_output_array.data = AI_PTR(NULL);
 800feca:	4b0c      	ldr	r3, [pc, #48]	; (800fefc <chatbot_configure_activations+0xa0>)
 800fecc:	2200      	movs	r2, #0
 800fece:	609a      	str	r2, [r3, #8]
    dense_2_nl_output_array.data_start = AI_PTR(NULL);
 800fed0:	4b0a      	ldr	r3, [pc, #40]	; (800fefc <chatbot_configure_activations+0xa0>)
 800fed2:	2200      	movs	r2, #0
 800fed4:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800fed6:	2301      	movs	r3, #1
}
 800fed8:	4618      	mov	r0, r3
 800feda:	3714      	adds	r7, #20
 800fedc:	46bd      	mov	sp, r7
 800fede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee2:	4770      	bx	lr
 800fee4:	200000ec 	.word	0x200000ec
 800fee8:	200000fc 	.word	0x200000fc
 800feec:	2000010c 	.word	0x2000010c
 800fef0:	2000011c 	.word	0x2000011c
 800fef4:	2000012c 	.word	0x2000012c
 800fef8:	2000013c 	.word	0x2000013c
 800fefc:	2000014c 	.word	0x2000014c

0800ff00 <chatbot_configure_weights>:


AI_DECLARE_STATIC
ai_bool chatbot_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800ff00:	b480      	push	{r7}
 800ff02:	b085      	sub	sp, #20
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
 800ff08:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	691b      	ldr	r3, [r3, #16]
 800ff0e:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800ff10:	4b31      	ldr	r3, [pc, #196]	; (800ffd8 <chatbot_configure_weights+0xd8>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ff18:	4a2f      	ldr	r2, [pc, #188]	; (800ffd8 <chatbot_configure_weights+0xd8>)
 800ff1a:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 61184);
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	f503 436f 	add.w	r3, r3, #61184	; 0xef00
 800ff22:	4a2d      	ldr	r2, [pc, #180]	; (800ffd8 <chatbot_configure_weights+0xd8>)
 800ff24:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 61184);
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	f503 436f 	add.w	r3, r3, #61184	; 0xef00
 800ff2c:	4a2a      	ldr	r2, [pc, #168]	; (800ffd8 <chatbot_configure_weights+0xd8>)
 800ff2e:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800ff30:	4b2a      	ldr	r3, [pc, #168]	; (800ffdc <chatbot_configure_weights+0xdc>)
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ff38:	4a28      	ldr	r2, [pc, #160]	; (800ffdc <chatbot_configure_weights+0xdc>)
 800ff3a:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 59648);
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	f503 4369 	add.w	r3, r3, #59648	; 0xe900
 800ff42:	4a26      	ldr	r2, [pc, #152]	; (800ffdc <chatbot_configure_weights+0xdc>)
 800ff44:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 59648);
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	f503 4369 	add.w	r3, r3, #59648	; 0xe900
 800ff4c:	4a23      	ldr	r2, [pc, #140]	; (800ffdc <chatbot_configure_weights+0xdc>)
 800ff4e:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800ff50:	4b23      	ldr	r3, [pc, #140]	; (800ffe0 <chatbot_configure_weights+0xe0>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ff58:	4a21      	ldr	r2, [pc, #132]	; (800ffe0 <chatbot_configure_weights+0xe0>)
 800ff5a:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 59392);
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 800ff62:	4a1f      	ldr	r2, [pc, #124]	; (800ffe0 <chatbot_configure_weights+0xe0>)
 800ff64:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 59392);
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 800ff6c:	4a1c      	ldr	r2, [pc, #112]	; (800ffe0 <chatbot_configure_weights+0xe0>)
 800ff6e:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800ff70:	4b1c      	ldr	r3, [pc, #112]	; (800ffe4 <chatbot_configure_weights+0xe4>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ff78:	4a1a      	ldr	r2, [pc, #104]	; (800ffe4 <chatbot_configure_weights+0xe4>)
 800ff7a:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 26624);
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	f503 43d0 	add.w	r3, r3, #26624	; 0x6800
 800ff82:	4a18      	ldr	r2, [pc, #96]	; (800ffe4 <chatbot_configure_weights+0xe4>)
 800ff84:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 26624);
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	f503 43d0 	add.w	r3, r3, #26624	; 0x6800
 800ff8c:	4a15      	ldr	r2, [pc, #84]	; (800ffe4 <chatbot_configure_weights+0xe4>)
 800ff8e:	60d3      	str	r3, [r2, #12]
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800ff90:	4b15      	ldr	r3, [pc, #84]	; (800ffe8 <chatbot_configure_weights+0xe8>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ff98:	4a13      	ldr	r2, [pc, #76]	; (800ffe8 <chatbot_configure_weights+0xe8>)
 800ff9a:	6013      	str	r3, [r2, #0]
    dense_bias_array.data = AI_PTR(weights + 26112);
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	f503 43cc 	add.w	r3, r3, #26112	; 0x6600
 800ffa2:	4a11      	ldr	r2, [pc, #68]	; (800ffe8 <chatbot_configure_weights+0xe8>)
 800ffa4:	6093      	str	r3, [r2, #8]
    dense_bias_array.data_start = AI_PTR(weights + 26112);
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	f503 43cc 	add.w	r3, r3, #26112	; 0x6600
 800ffac:	4a0e      	ldr	r2, [pc, #56]	; (800ffe8 <chatbot_configure_weights+0xe8>)
 800ffae:	60d3      	str	r3, [r2, #12]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800ffb0:	4b0e      	ldr	r3, [pc, #56]	; (800ffec <chatbot_configure_weights+0xec>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ffb8:	4a0c      	ldr	r2, [pc, #48]	; (800ffec <chatbot_configure_weights+0xec>)
 800ffba:	6013      	str	r3, [r2, #0]
    dense_weights_array.data = AI_PTR(weights + 0);
 800ffbc:	4a0b      	ldr	r2, [pc, #44]	; (800ffec <chatbot_configure_weights+0xec>)
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	6093      	str	r3, [r2, #8]
    dense_weights_array.data_start = AI_PTR(weights + 0);
 800ffc2:	4a0a      	ldr	r2, [pc, #40]	; (800ffec <chatbot_configure_weights+0xec>)
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	60d3      	str	r3, [r2, #12]
  }

  return true;
 800ffc8:	2301      	movs	r3, #1
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	3714      	adds	r7, #20
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd4:	4770      	bx	lr
 800ffd6:	bf00      	nop
 800ffd8:	2000008c 	.word	0x2000008c
 800ffdc:	2000009c 	.word	0x2000009c
 800ffe0:	200000ac 	.word	0x200000ac
 800ffe4:	200000bc 	.word	0x200000bc
 800ffe8:	200000cc 	.word	0x200000cc
 800ffec:	200000dc 	.word	0x200000dc

0800fff0 <ai_chatbot_create>:
}

AI_API_ENTRY
ai_error ai_chatbot_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b084      	sub	sp, #16
 800fff4:	af02      	add	r7, sp, #8
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800fffa:	2300      	movs	r3, #0
 800fffc:	9301      	str	r3, [sp, #4]
 800fffe:	2303      	movs	r3, #3
 8010000:	9300      	str	r3, [sp, #0]
 8010002:	2301      	movs	r3, #1
 8010004:	4a04      	ldr	r2, [pc, #16]	; (8010018 <ai_chatbot_create+0x28>)
 8010006:	6839      	ldr	r1, [r7, #0]
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f000 f861 	bl	80100d0 <ai_platform_network_create>
 801000e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8010010:	4618      	mov	r0, r3
 8010012:	3708      	adds	r7, #8
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}
 8010018:	2000002c 	.word	0x2000002c

0801001c <ai_chatbot_init>:
}

AI_API_ENTRY
ai_bool ai_chatbot_init(
  ai_handle network, const ai_network_params* params)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b084      	sub	sp, #16
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
 8010024:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8010026:	6839      	ldr	r1, [r7, #0]
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	f000 f8d5 	bl	80101d8 <ai_platform_network_init>
 801002e:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d101      	bne.n	801003a <ai_chatbot_init+0x1e>
 8010036:	2300      	movs	r3, #0
 8010038:	e02b      	b.n	8010092 <ai_chatbot_init+0x76>

  ai_bool ok = true;
 801003a:	2301      	movs	r3, #1
 801003c:	72fb      	strb	r3, [r7, #11]
  ok &= chatbot_configure_weights(net_ctx, &params->params);
 801003e:	683b      	ldr	r3, [r7, #0]
 8010040:	4619      	mov	r1, r3
 8010042:	68f8      	ldr	r0, [r7, #12]
 8010044:	f7ff ff5c 	bl	800ff00 <chatbot_configure_weights>
 8010048:	4603      	mov	r3, r0
 801004a:	461a      	mov	r2, r3
 801004c:	7afb      	ldrb	r3, [r7, #11]
 801004e:	4013      	ands	r3, r2
 8010050:	2b00      	cmp	r3, #0
 8010052:	bf14      	ite	ne
 8010054:	2301      	movne	r3, #1
 8010056:	2300      	moveq	r3, #0
 8010058:	72fb      	strb	r3, [r7, #11]
  ok &= chatbot_configure_activations(net_ctx, &params->activations);
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	3318      	adds	r3, #24
 801005e:	4619      	mov	r1, r3
 8010060:	68f8      	ldr	r0, [r7, #12]
 8010062:	f7ff fefb 	bl	800fe5c <chatbot_configure_activations>
 8010066:	4603      	mov	r3, r0
 8010068:	461a      	mov	r2, r3
 801006a:	7afb      	ldrb	r3, [r7, #11]
 801006c:	4013      	ands	r3, r2
 801006e:	2b00      	cmp	r3, #0
 8010070:	bf14      	ite	ne
 8010072:	2301      	movne	r3, #1
 8010074:	2300      	moveq	r3, #0
 8010076:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8010078:	6878      	ldr	r0, [r7, #4]
 801007a:	f000 f995 	bl	80103a8 <ai_platform_network_post_init>
 801007e:	4603      	mov	r3, r0
 8010080:	461a      	mov	r2, r3
 8010082:	7afb      	ldrb	r3, [r7, #11]
 8010084:	4013      	ands	r3, r2
 8010086:	2b00      	cmp	r3, #0
 8010088:	bf14      	ite	ne
 801008a:	2301      	movne	r3, #1
 801008c:	2300      	moveq	r3, #0
 801008e:	72fb      	strb	r3, [r7, #11]

  return ok;
 8010090:	7afb      	ldrb	r3, [r7, #11]
}
 8010092:	4618      	mov	r0, r3
 8010094:	3710      	adds	r7, #16
 8010096:	46bd      	mov	sp, r7
 8010098:	bd80      	pop	{r7, pc}

0801009a <ai_chatbot_run>:


AI_API_ENTRY
ai_i32 ai_chatbot_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 801009a:	b580      	push	{r7, lr}
 801009c:	b084      	sub	sp, #16
 801009e:	af00      	add	r7, sp, #0
 80100a0:	60f8      	str	r0, [r7, #12]
 80100a2:	60b9      	str	r1, [r7, #8]
 80100a4:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80100a6:	687a      	ldr	r2, [r7, #4]
 80100a8:	68b9      	ldr	r1, [r7, #8]
 80100aa:	68f8      	ldr	r0, [r7, #12]
 80100ac:	f000 fa28 	bl	8010500 <ai_platform_network_process>
 80100b0:	4603      	mov	r3, r0
}
 80100b2:	4618      	mov	r0, r3
 80100b4:	3710      	adds	r7, #16
 80100b6:	46bd      	mov	sp, r7
 80100b8:	bd80      	pop	{r7, pc}
	...

080100bc <ai_chatbot_data_weights_get>:
#include "chatbot_data.h"

ai_handle ai_chatbot_data_weights_get(void)
{
 80100bc:	b480      	push	{r7}
 80100be:	af00      	add	r7, sp, #0
    0xaa, 0xbc, 0x80, 0x3d, 0x8f, 0x8a, 0x3b, 0xbe, 0x18, 0x13,
    0x34, 0xbe, 0x81, 0xa7, 0x22, 0x3e, 0xfc, 0x82, 0x23,
    0x3e, 0xb1, 0x8a, 0x44, 0x3e, 0x71, 0xc0, 0x0b, 0xbe
  };

  return AI_HANDLE_PTR(s_chatbot_weights);
 80100c0:	4b02      	ldr	r3, [pc, #8]	; (80100cc <ai_chatbot_data_weights_get+0x10>)

}
 80100c2:	4618      	mov	r0, r3
 80100c4:	46bd      	mov	sp, r7
 80100c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ca:	4770      	bx	lr
 80100cc:	08014e40 	.word	0x08014e40

080100d0 <ai_platform_network_create>:
 80100d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100d2:	4d36      	ldr	r5, [pc, #216]	; (80101ac <ai_platform_network_create+0xdc>)
 80100d4:	b083      	sub	sp, #12
 80100d6:	4e36      	ldr	r6, [pc, #216]	; (80101b0 <ai_platform_network_create+0xe0>)
 80100d8:	6829      	ldr	r1, [r5, #0]
 80100da:	f89d 7020 	ldrb.w	r7, [sp, #32]
 80100de:	f021 0101 	bic.w	r1, r1, #1
 80100e2:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80100e6:	6029      	str	r1, [r5, #0]
 80100e8:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 80100ec:	6831      	ldr	r1, [r6, #0]
 80100ee:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80100f2:	194d      	adds	r5, r1, r5
 80100f4:	2d01      	cmp	r5, #1
 80100f6:	d92f      	bls.n	8010158 <ai_platform_network_create+0x88>
 80100f8:	f240 4549 	movw	r5, #1097	; 0x449
 80100fc:	42a9      	cmp	r1, r5
 80100fe:	d02b      	beq.n	8010158 <ai_platform_network_create+0x88>
 8010100:	492c      	ldr	r1, [pc, #176]	; (80101b4 <ai_platform_network_create+0xe4>)
 8010102:	6809      	ldr	r1, [r1, #0]
 8010104:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8010108:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 801010c:	d015      	beq.n	801013a <ai_platform_network_create+0x6a>
 801010e:	2800      	cmp	r0, #0
 8010110:	d031      	beq.n	8010176 <ai_platform_network_create+0xa6>
 8010112:	461e      	mov	r6, r3
 8010114:	4613      	mov	r3, r2
 8010116:	4a28      	ldr	r2, [pc, #160]	; (80101b8 <ai_platform_network_create+0xe8>)
 8010118:	4605      	mov	r5, r0
 801011a:	601a      	str	r2, [r3, #0]
 801011c:	6003      	str	r3, [r0, #0]
 801011e:	f000 fc9f 	bl	8010a60 <core_init>
 8010122:	2800      	cmp	r0, #0
 8010124:	d02b      	beq.n	801017e <ai_platform_network_create+0xae>
 8010126:	0223      	lsls	r3, r4, #8
 8010128:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801012c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8010130:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8010134:	d92e      	bls.n	8010194 <ai_platform_network_create+0xc4>
 8010136:	2301      	movs	r3, #1
 8010138:	e022      	b.n	8010180 <ai_platform_network_create+0xb0>
 801013a:	4920      	ldr	r1, [pc, #128]	; (80101bc <ai_platform_network_create+0xec>)
 801013c:	2501      	movs	r5, #1
 801013e:	460e      	mov	r6, r1
 8010140:	600d      	str	r5, [r1, #0]
 8010142:	6831      	ldr	r1, [r6, #0]
 8010144:	2900      	cmp	r1, #0
 8010146:	d1fc      	bne.n	8010142 <ai_platform_network_create+0x72>
 8010148:	491d      	ldr	r1, [pc, #116]	; (80101c0 <ai_platform_network_create+0xf0>)
 801014a:	4e1e      	ldr	r6, [pc, #120]	; (80101c4 <ai_platform_network_create+0xf4>)
 801014c:	4d1e      	ldr	r5, [pc, #120]	; (80101c8 <ai_platform_network_create+0xf8>)
 801014e:	600e      	str	r6, [r1, #0]
 8010150:	6809      	ldr	r1, [r1, #0]
 8010152:	42a9      	cmp	r1, r5
 8010154:	d0db      	beq.n	801010e <ai_platform_network_create+0x3e>
 8010156:	e7fe      	b.n	8010156 <ai_platform_network_create+0x86>
 8010158:	491c      	ldr	r1, [pc, #112]	; (80101cc <ai_platform_network_create+0xfc>)
 801015a:	2501      	movs	r5, #1
 801015c:	460e      	mov	r6, r1
 801015e:	600d      	str	r5, [r1, #0]
 8010160:	6831      	ldr	r1, [r6, #0]
 8010162:	2900      	cmp	r1, #0
 8010164:	d1fc      	bne.n	8010160 <ai_platform_network_create+0x90>
 8010166:	491a      	ldr	r1, [pc, #104]	; (80101d0 <ai_platform_network_create+0x100>)
 8010168:	4e16      	ldr	r6, [pc, #88]	; (80101c4 <ai_platform_network_create+0xf4>)
 801016a:	4d17      	ldr	r5, [pc, #92]	; (80101c8 <ai_platform_network_create+0xf8>)
 801016c:	600e      	str	r6, [r1, #0]
 801016e:	6809      	ldr	r1, [r1, #0]
 8010170:	42a9      	cmp	r1, r5
 8010172:	d0cc      	beq.n	801010e <ai_platform_network_create+0x3e>
 8010174:	e7fe      	b.n	8010174 <ai_platform_network_create+0xa4>
 8010176:	f241 0010 	movw	r0, #4112	; 0x1010
 801017a:	b003      	add	sp, #12
 801017c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801017e:	2330      	movs	r3, #48	; 0x30
 8010180:	2100      	movs	r1, #0
 8010182:	2210      	movs	r2, #16
 8010184:	6029      	str	r1, [r5, #0]
 8010186:	2000      	movs	r0, #0
 8010188:	f363 0007 	bfi	r0, r3, #0, #8
 801018c:	f362 201f 	bfi	r0, r2, #8, #24
 8010190:	b003      	add	sp, #12
 8010192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010194:	4b0f      	ldr	r3, [pc, #60]	; (80101d4 <ai_platform_network_create+0x104>)
 8010196:	a802      	add	r0, sp, #8
 8010198:	f840 3d04 	str.w	r3, [r0, #-4]!
 801019c:	f001 fb14 	bl	80117c8 <ai_check_custom_types>
 80101a0:	b110      	cbz	r0, 80101a8 <ai_platform_network_create+0xd8>
 80101a2:	2200      	movs	r2, #0
 80101a4:	4613      	mov	r3, r2
 80101a6:	e7ee      	b.n	8010186 <ai_platform_network_create+0xb6>
 80101a8:	2302      	movs	r3, #2
 80101aa:	e7e9      	b.n	8010180 <ai_platform_network_create+0xb0>
 80101ac:	e0002000 	.word	0xe0002000
 80101b0:	e0042000 	.word	0xe0042000
 80101b4:	5c001000 	.word	0x5c001000
 80101b8:	a1c00100 	.word	0xa1c00100
 80101bc:	58024c08 	.word	0x58024c08
 80101c0:	58024c00 	.word	0x58024c00
 80101c4:	f407a5c2 	.word	0xf407a5c2
 80101c8:	b5e8b5cd 	.word	0xb5e8b5cd
 80101cc:	40023008 	.word	0x40023008
 80101d0:	40023000 	.word	0x40023000
 80101d4:	84048403 	.word	0x84048403

080101d8 <ai_platform_network_init>:
 80101d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101da:	2800      	cmp	r0, #0
 80101dc:	d05e      	beq.n	801029c <ai_platform_network_init+0xc4>
 80101de:	4b68      	ldr	r3, [pc, #416]	; (8010380 <ai_platform_network_init+0x1a8>)
 80101e0:	6802      	ldr	r2, [r0, #0]
 80101e2:	429a      	cmp	r2, r3
 80101e4:	d15a      	bne.n	801029c <ai_platform_network_init+0xc4>
 80101e6:	4a67      	ldr	r2, [pc, #412]	; (8010384 <ai_platform_network_init+0x1ac>)
 80101e8:	4c67      	ldr	r4, [pc, #412]	; (8010388 <ai_platform_network_init+0x1b0>)
 80101ea:	6813      	ldr	r3, [r2, #0]
 80101ec:	f023 0301 	bic.w	r3, r3, #1
 80101f0:	6013      	str	r3, [r2, #0]
 80101f2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80101f6:	6823      	ldr	r3, [r4, #0]
 80101f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80101fc:	189a      	adds	r2, r3, r2
 80101fe:	2a01      	cmp	r2, #1
 8010200:	d93d      	bls.n	801027e <ai_platform_network_init+0xa6>
 8010202:	f240 4249 	movw	r2, #1097	; 0x449
 8010206:	4293      	cmp	r3, r2
 8010208:	d039      	beq.n	801027e <ai_platform_network_init+0xa6>
 801020a:	4b60      	ldr	r3, [pc, #384]	; (801038c <ai_platform_network_init+0x1b4>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010212:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010216:	d06b      	beq.n	80102f0 <ai_platform_network_init+0x118>
 8010218:	4605      	mov	r5, r0
 801021a:	460c      	mov	r4, r1
 801021c:	2900      	cmp	r1, #0
 801021e:	f000 80a8 	beq.w	8010372 <ai_platform_network_init+0x19a>
 8010222:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 8010224:	690e      	ldr	r6, [r1, #16]
 8010226:	2f00      	cmp	r7, #0
 8010228:	f000 8092 	beq.w	8010350 <ai_platform_network_init+0x178>
 801022c:	2e00      	cmp	r6, #0
 801022e:	d07d      	beq.n	801032c <ai_platform_network_init+0x154>
 8010230:	f104 0718 	add.w	r7, r4, #24
 8010234:	f105 0c18 	add.w	ip, r5, #24
 8010238:	f105 0630 	add.w	r6, r5, #48	; 0x30
 801023c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801023e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010242:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010246:	2403      	movs	r4, #3
 8010248:	e88c 0003 	stmia.w	ip, {r0, r1}
 801024c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801024e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010250:	e897 0003 	ldmia.w	r7, {r0, r1}
 8010254:	e886 0003 	stmia.w	r6, {r0, r1}
 8010258:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801025a:	60ec      	str	r4, [r5, #12]
 801025c:	b16a      	cbz	r2, 801027a <ai_platform_network_init+0xa2>
 801025e:	68d3      	ldr	r3, [r2, #12]
 8010260:	6095      	str	r5, [r2, #8]
 8010262:	b153      	cbz	r3, 801027a <ai_platform_network_init+0xa2>
 8010264:	429a      	cmp	r2, r3
 8010266:	d104      	bne.n	8010272 <ai_platform_network_init+0x9a>
 8010268:	e007      	b.n	801027a <ai_platform_network_init+0xa2>
 801026a:	429a      	cmp	r2, r3
 801026c:	4613      	mov	r3, r2
 801026e:	d004      	beq.n	801027a <ai_platform_network_init+0xa2>
 8010270:	b11a      	cbz	r2, 801027a <ai_platform_network_init+0xa2>
 8010272:	68da      	ldr	r2, [r3, #12]
 8010274:	609d      	str	r5, [r3, #8]
 8010276:	2a00      	cmp	r2, #0
 8010278:	d1f7      	bne.n	801026a <ai_platform_network_init+0x92>
 801027a:	4628      	mov	r0, r5
 801027c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801027e:	4b44      	ldr	r3, [pc, #272]	; (8010390 <ai_platform_network_init+0x1b8>)
 8010280:	2201      	movs	r2, #1
 8010282:	461c      	mov	r4, r3
 8010284:	601a      	str	r2, [r3, #0]
 8010286:	6823      	ldr	r3, [r4, #0]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d1fc      	bne.n	8010286 <ai_platform_network_init+0xae>
 801028c:	4b41      	ldr	r3, [pc, #260]	; (8010394 <ai_platform_network_init+0x1bc>)
 801028e:	4c42      	ldr	r4, [pc, #264]	; (8010398 <ai_platform_network_init+0x1c0>)
 8010290:	4a42      	ldr	r2, [pc, #264]	; (801039c <ai_platform_network_init+0x1c4>)
 8010292:	601c      	str	r4, [r3, #0]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	4293      	cmp	r3, r2
 8010298:	d0be      	beq.n	8010218 <ai_platform_network_init+0x40>
 801029a:	e7fe      	b.n	801029a <ai_platform_network_init+0xc2>
 801029c:	4a39      	ldr	r2, [pc, #228]	; (8010384 <ai_platform_network_init+0x1ac>)
 801029e:	493a      	ldr	r1, [pc, #232]	; (8010388 <ai_platform_network_init+0x1b0>)
 80102a0:	6813      	ldr	r3, [r2, #0]
 80102a2:	f023 0301 	bic.w	r3, r3, #1
 80102a6:	6013      	str	r3, [r2, #0]
 80102a8:	680b      	ldr	r3, [r1, #0]
 80102aa:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80102ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80102b2:	185a      	adds	r2, r3, r1
 80102b4:	2a01      	cmp	r2, #1
 80102b6:	d90c      	bls.n	80102d2 <ai_platform_network_init+0xfa>
 80102b8:	f240 4249 	movw	r2, #1097	; 0x449
 80102bc:	4293      	cmp	r3, r2
 80102be:	d008      	beq.n	80102d2 <ai_platform_network_init+0xfa>
 80102c0:	4b32      	ldr	r3, [pc, #200]	; (801038c <ai_platform_network_init+0x1b4>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80102c8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80102cc:	d01f      	beq.n	801030e <ai_platform_network_init+0x136>
 80102ce:	2000      	movs	r0, #0
 80102d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102d2:	4b2f      	ldr	r3, [pc, #188]	; (8010390 <ai_platform_network_init+0x1b8>)
 80102d4:	2201      	movs	r2, #1
 80102d6:	4619      	mov	r1, r3
 80102d8:	601a      	str	r2, [r3, #0]
 80102da:	680b      	ldr	r3, [r1, #0]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d1fc      	bne.n	80102da <ai_platform_network_init+0x102>
 80102e0:	4b2c      	ldr	r3, [pc, #176]	; (8010394 <ai_platform_network_init+0x1bc>)
 80102e2:	492d      	ldr	r1, [pc, #180]	; (8010398 <ai_platform_network_init+0x1c0>)
 80102e4:	4a2d      	ldr	r2, [pc, #180]	; (801039c <ai_platform_network_init+0x1c4>)
 80102e6:	6019      	str	r1, [r3, #0]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	4293      	cmp	r3, r2
 80102ec:	d0ef      	beq.n	80102ce <ai_platform_network_init+0xf6>
 80102ee:	e7fe      	b.n	80102ee <ai_platform_network_init+0x116>
 80102f0:	4b2b      	ldr	r3, [pc, #172]	; (80103a0 <ai_platform_network_init+0x1c8>)
 80102f2:	2201      	movs	r2, #1
 80102f4:	461c      	mov	r4, r3
 80102f6:	601a      	str	r2, [r3, #0]
 80102f8:	6823      	ldr	r3, [r4, #0]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d1fc      	bne.n	80102f8 <ai_platform_network_init+0x120>
 80102fe:	4b29      	ldr	r3, [pc, #164]	; (80103a4 <ai_platform_network_init+0x1cc>)
 8010300:	4c25      	ldr	r4, [pc, #148]	; (8010398 <ai_platform_network_init+0x1c0>)
 8010302:	4a26      	ldr	r2, [pc, #152]	; (801039c <ai_platform_network_init+0x1c4>)
 8010304:	601c      	str	r4, [r3, #0]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	4293      	cmp	r3, r2
 801030a:	d085      	beq.n	8010218 <ai_platform_network_init+0x40>
 801030c:	e7fe      	b.n	801030c <ai_platform_network_init+0x134>
 801030e:	4b24      	ldr	r3, [pc, #144]	; (80103a0 <ai_platform_network_init+0x1c8>)
 8010310:	2201      	movs	r2, #1
 8010312:	4619      	mov	r1, r3
 8010314:	601a      	str	r2, [r3, #0]
 8010316:	680b      	ldr	r3, [r1, #0]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d1fc      	bne.n	8010316 <ai_platform_network_init+0x13e>
 801031c:	4b21      	ldr	r3, [pc, #132]	; (80103a4 <ai_platform_network_init+0x1cc>)
 801031e:	491e      	ldr	r1, [pc, #120]	; (8010398 <ai_platform_network_init+0x1c0>)
 8010320:	4a1e      	ldr	r2, [pc, #120]	; (801039c <ai_platform_network_init+0x1c4>)
 8010322:	6019      	str	r1, [r3, #0]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	4293      	cmp	r3, r2
 8010328:	d0d1      	beq.n	80102ce <ai_platform_network_init+0xf6>
 801032a:	e7fe      	b.n	801032a <ai_platform_network_init+0x152>
 801032c:	8921      	ldrh	r1, [r4, #8]
 801032e:	88e2      	ldrh	r2, [r4, #6]
 8010330:	68e3      	ldr	r3, [r4, #12]
 8010332:	fb02 f201 	mul.w	r2, r2, r1
 8010336:	fb03 f302 	mul.w	r3, r3, r2
 801033a:	2b00      	cmp	r3, #0
 801033c:	f43f af78 	beq.w	8010230 <ai_platform_network_init+0x58>
 8010340:	f105 0010 	add.w	r0, r5, #16
 8010344:	2212      	movs	r2, #18
 8010346:	2110      	movs	r1, #16
 8010348:	f000 fb8c 	bl	8010a64 <core_set_error>
 801034c:	4630      	mov	r0, r6
 801034e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010350:	8c09      	ldrh	r1, [r1, #32]
 8010352:	8be2      	ldrh	r2, [r4, #30]
 8010354:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010356:	fb02 f201 	mul.w	r2, r2, r1
 801035a:	fb03 f302 	mul.w	r3, r3, r2
 801035e:	2b00      	cmp	r3, #0
 8010360:	f43f af64 	beq.w	801022c <ai_platform_network_init+0x54>
 8010364:	2213      	movs	r2, #19
 8010366:	2110      	movs	r1, #16
 8010368:	3010      	adds	r0, #16
 801036a:	f000 fb7b 	bl	8010a64 <core_set_error>
 801036e:	4638      	mov	r0, r7
 8010370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010372:	2211      	movs	r2, #17
 8010374:	2110      	movs	r1, #16
 8010376:	3010      	adds	r0, #16
 8010378:	f000 fb74 	bl	8010a64 <core_set_error>
 801037c:	4620      	mov	r0, r4
 801037e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010380:	a1c00100 	.word	0xa1c00100
 8010384:	e0002000 	.word	0xe0002000
 8010388:	e0042000 	.word	0xe0042000
 801038c:	5c001000 	.word	0x5c001000
 8010390:	40023008 	.word	0x40023008
 8010394:	40023000 	.word	0x40023000
 8010398:	f407a5c2 	.word	0xf407a5c2
 801039c:	b5e8b5cd 	.word	0xb5e8b5cd
 80103a0:	58024c08 	.word	0x58024c08
 80103a4:	58024c00 	.word	0x58024c00

080103a8 <ai_platform_network_post_init>:
 80103a8:	b538      	push	{r3, r4, r5, lr}
 80103aa:	b118      	cbz	r0, 80103b4 <ai_platform_network_post_init+0xc>
 80103ac:	4b4a      	ldr	r3, [pc, #296]	; (80104d8 <ai_platform_network_post_init+0x130>)
 80103ae:	6802      	ldr	r2, [r0, #0]
 80103b0:	429a      	cmp	r2, r3
 80103b2:	d029      	beq.n	8010408 <ai_platform_network_post_init+0x60>
 80103b4:	4a49      	ldr	r2, [pc, #292]	; (80104dc <ai_platform_network_post_init+0x134>)
 80103b6:	494a      	ldr	r1, [pc, #296]	; (80104e0 <ai_platform_network_post_init+0x138>)
 80103b8:	6813      	ldr	r3, [r2, #0]
 80103ba:	f023 0301 	bic.w	r3, r3, #1
 80103be:	6013      	str	r3, [r2, #0]
 80103c0:	680b      	ldr	r3, [r1, #0]
 80103c2:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80103c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80103ca:	185a      	adds	r2, r3, r1
 80103cc:	2a01      	cmp	r2, #1
 80103ce:	d90c      	bls.n	80103ea <ai_platform_network_post_init+0x42>
 80103d0:	f240 4249 	movw	r2, #1097	; 0x449
 80103d4:	4293      	cmp	r3, r2
 80103d6:	d008      	beq.n	80103ea <ai_platform_network_post_init+0x42>
 80103d8:	4b42      	ldr	r3, [pc, #264]	; (80104e4 <ai_platform_network_post_init+0x13c>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80103e0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80103e4:	d044      	beq.n	8010470 <ai_platform_network_post_init+0xc8>
 80103e6:	2000      	movs	r0, #0
 80103e8:	bd38      	pop	{r3, r4, r5, pc}
 80103ea:	4b3f      	ldr	r3, [pc, #252]	; (80104e8 <ai_platform_network_post_init+0x140>)
 80103ec:	2201      	movs	r2, #1
 80103ee:	4619      	mov	r1, r3
 80103f0:	601a      	str	r2, [r3, #0]
 80103f2:	680b      	ldr	r3, [r1, #0]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d1fc      	bne.n	80103f2 <ai_platform_network_post_init+0x4a>
 80103f8:	4b3c      	ldr	r3, [pc, #240]	; (80104ec <ai_platform_network_post_init+0x144>)
 80103fa:	493d      	ldr	r1, [pc, #244]	; (80104f0 <ai_platform_network_post_init+0x148>)
 80103fc:	4a3d      	ldr	r2, [pc, #244]	; (80104f4 <ai_platform_network_post_init+0x14c>)
 80103fe:	6019      	str	r1, [r3, #0]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	4293      	cmp	r3, r2
 8010404:	d0ef      	beq.n	80103e6 <ai_platform_network_post_init+0x3e>
 8010406:	e7fe      	b.n	8010406 <ai_platform_network_post_init+0x5e>
 8010408:	4a34      	ldr	r2, [pc, #208]	; (80104dc <ai_platform_network_post_init+0x134>)
 801040a:	4935      	ldr	r1, [pc, #212]	; (80104e0 <ai_platform_network_post_init+0x138>)
 801040c:	6813      	ldr	r3, [r2, #0]
 801040e:	f023 0301 	bic.w	r3, r3, #1
 8010412:	6013      	str	r3, [r2, #0]
 8010414:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8010418:	680b      	ldr	r3, [r1, #0]
 801041a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801041e:	189a      	adds	r2, r3, r2
 8010420:	2a01      	cmp	r2, #1
 8010422:	d94a      	bls.n	80104ba <ai_platform_network_post_init+0x112>
 8010424:	f240 4249 	movw	r2, #1097	; 0x449
 8010428:	4293      	cmp	r3, r2
 801042a:	d046      	beq.n	80104ba <ai_platform_network_post_init+0x112>
 801042c:	4b2d      	ldr	r3, [pc, #180]	; (80104e4 <ai_platform_network_post_init+0x13c>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010434:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010438:	d030      	beq.n	801049c <ai_platform_network_post_init+0xf4>
 801043a:	68c3      	ldr	r3, [r0, #12]
 801043c:	4604      	mov	r4, r0
 801043e:	f013 0502 	ands.w	r5, r3, #2
 8010442:	d024      	beq.n	801048e <ai_platform_network_post_init+0xe6>
 8010444:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8010446:	b18b      	cbz	r3, 801046c <ai_platform_network_post_init+0xc4>
 8010448:	6d05      	ldr	r5, [r0, #80]	; 0x50
 801044a:	b90d      	cbnz	r5, 8010450 <ai_platform_network_post_init+0xa8>
 801044c:	e00e      	b.n	801046c <ai_platform_network_post_init+0xc4>
 801044e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010450:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8010452:	4629      	mov	r1, r5
 8010454:	2000      	movs	r0, #0
 8010456:	4798      	blx	r3
 8010458:	68ea      	ldr	r2, [r5, #12]
 801045a:	1b53      	subs	r3, r2, r5
 801045c:	4615      	mov	r5, r2
 801045e:	bf18      	it	ne
 8010460:	2301      	movne	r3, #1
 8010462:	2a00      	cmp	r2, #0
 8010464:	bf08      	it	eq
 8010466:	2300      	moveq	r3, #0
 8010468:	2b00      	cmp	r3, #0
 801046a:	d1f0      	bne.n	801044e <ai_platform_network_post_init+0xa6>
 801046c:	2001      	movs	r0, #1
 801046e:	bd38      	pop	{r3, r4, r5, pc}
 8010470:	4b21      	ldr	r3, [pc, #132]	; (80104f8 <ai_platform_network_post_init+0x150>)
 8010472:	2201      	movs	r2, #1
 8010474:	4619      	mov	r1, r3
 8010476:	601a      	str	r2, [r3, #0]
 8010478:	680b      	ldr	r3, [r1, #0]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d1fc      	bne.n	8010478 <ai_platform_network_post_init+0xd0>
 801047e:	4b1f      	ldr	r3, [pc, #124]	; (80104fc <ai_platform_network_post_init+0x154>)
 8010480:	491b      	ldr	r1, [pc, #108]	; (80104f0 <ai_platform_network_post_init+0x148>)
 8010482:	4a1c      	ldr	r2, [pc, #112]	; (80104f4 <ai_platform_network_post_init+0x14c>)
 8010484:	6019      	str	r1, [r3, #0]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	4293      	cmp	r3, r2
 801048a:	d0ac      	beq.n	80103e6 <ai_platform_network_post_init+0x3e>
 801048c:	e7fe      	b.n	801048c <ai_platform_network_post_init+0xe4>
 801048e:	2210      	movs	r2, #16
 8010490:	2111      	movs	r1, #17
 8010492:	3010      	adds	r0, #16
 8010494:	f000 fae6 	bl	8010a64 <core_set_error>
 8010498:	4628      	mov	r0, r5
 801049a:	bd38      	pop	{r3, r4, r5, pc}
 801049c:	4b16      	ldr	r3, [pc, #88]	; (80104f8 <ai_platform_network_post_init+0x150>)
 801049e:	2201      	movs	r2, #1
 80104a0:	4619      	mov	r1, r3
 80104a2:	601a      	str	r2, [r3, #0]
 80104a4:	680b      	ldr	r3, [r1, #0]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d1fc      	bne.n	80104a4 <ai_platform_network_post_init+0xfc>
 80104aa:	4b14      	ldr	r3, [pc, #80]	; (80104fc <ai_platform_network_post_init+0x154>)
 80104ac:	4910      	ldr	r1, [pc, #64]	; (80104f0 <ai_platform_network_post_init+0x148>)
 80104ae:	4a11      	ldr	r2, [pc, #68]	; (80104f4 <ai_platform_network_post_init+0x14c>)
 80104b0:	6019      	str	r1, [r3, #0]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	4293      	cmp	r3, r2
 80104b6:	d0c0      	beq.n	801043a <ai_platform_network_post_init+0x92>
 80104b8:	e7fe      	b.n	80104b8 <ai_platform_network_post_init+0x110>
 80104ba:	4b0b      	ldr	r3, [pc, #44]	; (80104e8 <ai_platform_network_post_init+0x140>)
 80104bc:	2201      	movs	r2, #1
 80104be:	4619      	mov	r1, r3
 80104c0:	601a      	str	r2, [r3, #0]
 80104c2:	680b      	ldr	r3, [r1, #0]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d1fc      	bne.n	80104c2 <ai_platform_network_post_init+0x11a>
 80104c8:	4b08      	ldr	r3, [pc, #32]	; (80104ec <ai_platform_network_post_init+0x144>)
 80104ca:	4909      	ldr	r1, [pc, #36]	; (80104f0 <ai_platform_network_post_init+0x148>)
 80104cc:	4a09      	ldr	r2, [pc, #36]	; (80104f4 <ai_platform_network_post_init+0x14c>)
 80104ce:	6019      	str	r1, [r3, #0]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	4293      	cmp	r3, r2
 80104d4:	d0b1      	beq.n	801043a <ai_platform_network_post_init+0x92>
 80104d6:	e7fe      	b.n	80104d6 <ai_platform_network_post_init+0x12e>
 80104d8:	a1c00100 	.word	0xa1c00100
 80104dc:	e0002000 	.word	0xe0002000
 80104e0:	e0042000 	.word	0xe0042000
 80104e4:	5c001000 	.word	0x5c001000
 80104e8:	40023008 	.word	0x40023008
 80104ec:	40023000 	.word	0x40023000
 80104f0:	f407a5c2 	.word	0xf407a5c2
 80104f4:	b5e8b5cd 	.word	0xb5e8b5cd
 80104f8:	58024c08 	.word	0x58024c08
 80104fc:	58024c00 	.word	0x58024c00

08010500 <ai_platform_network_process>:
 8010500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010504:	4692      	mov	sl, r2
 8010506:	b083      	sub	sp, #12
 8010508:	4604      	mov	r4, r0
 801050a:	b120      	cbz	r0, 8010516 <ai_platform_network_process+0x16>
 801050c:	4b86      	ldr	r3, [pc, #536]	; (8010728 <ai_platform_network_process+0x228>)
 801050e:	6802      	ldr	r2, [r0, #0]
 8010510:	429a      	cmp	r2, r3
 8010512:	bf18      	it	ne
 8010514:	2400      	movne	r4, #0
 8010516:	4a85      	ldr	r2, [pc, #532]	; (801072c <ai_platform_network_process+0x22c>)
 8010518:	4885      	ldr	r0, [pc, #532]	; (8010730 <ai_platform_network_process+0x230>)
 801051a:	6813      	ldr	r3, [r2, #0]
 801051c:	f023 0301 	bic.w	r3, r3, #1
 8010520:	6013      	str	r3, [r2, #0]
 8010522:	6803      	ldr	r3, [r0, #0]
 8010524:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 8010528:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801052c:	181a      	adds	r2, r3, r0
 801052e:	2a01      	cmp	r2, #1
 8010530:	f240 80c6 	bls.w	80106c0 <ai_platform_network_process+0x1c0>
 8010534:	f240 4249 	movw	r2, #1097	; 0x449
 8010538:	4293      	cmp	r3, r2
 801053a:	f000 80c1 	beq.w	80106c0 <ai_platform_network_process+0x1c0>
 801053e:	4b7d      	ldr	r3, [pc, #500]	; (8010734 <ai_platform_network_process+0x234>)
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010546:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801054a:	f000 80a9 	beq.w	80106a0 <ai_platform_network_process+0x1a0>
 801054e:	2c00      	cmp	r4, #0
 8010550:	f000 80db 	beq.w	801070a <ai_platform_network_process+0x20a>
 8010554:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8010558:	68e0      	ldr	r0, [r4, #12]
 801055a:	461a      	mov	r2, r3
 801055c:	f000 0003 	and.w	r0, r0, #3
 8010560:	2b00      	cmp	r3, #0
 8010562:	f000 80bd 	beq.w	80106e0 <ai_platform_network_process+0x1e0>
 8010566:	2600      	movs	r6, #0
 8010568:	2803      	cmp	r0, #3
 801056a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 801056c:	6166      	str	r6, [r4, #20]
 801056e:	f040 80c6 	bne.w	80106fe <ai_platform_network_process+0x1fe>
 8010572:	2900      	cmp	r1, #0
 8010574:	f000 80b7 	beq.w	80106e6 <ai_platform_network_process+0x1e6>
 8010578:	fab5 f085 	clz	r0, r5
 801057c:	0940      	lsrs	r0, r0, #5
 801057e:	2800      	cmp	r0, #0
 8010580:	f040 80b1 	bne.w	80106e6 <ai_platform_network_process+0x1e6>
 8010584:	882e      	ldrh	r6, [r5, #0]
 8010586:	2e00      	cmp	r6, #0
 8010588:	f000 80ad 	beq.w	80106e6 <ai_platform_network_process+0x1e6>
 801058c:	888f      	ldrh	r7, [r1, #4]
 801058e:	686e      	ldr	r6, [r5, #4]
 8010590:	9701      	str	r7, [sp, #4]
 8010592:	2e00      	cmp	r6, #0
 8010594:	f000 825f 	beq.w	8010a56 <ai_platform_network_process+0x556>
 8010598:	6836      	ldr	r6, [r6, #0]
 801059a:	2e00      	cmp	r6, #0
 801059c:	f000 825b 	beq.w	8010a56 <ai_platform_network_process+0x556>
 80105a0:	68ab      	ldr	r3, [r5, #8]
 80105a2:	f8d3 9000 	ldr.w	r9, [r3]
 80105a6:	f1b9 0f00 	cmp.w	r9, #0
 80105aa:	f000 809c 	beq.w	80106e6 <ai_platform_network_process+0x1e6>
 80105ae:	460f      	mov	r7, r1
 80105b0:	4680      	mov	r8, r0
 80105b2:	e05e      	b.n	8010672 <ai_platform_network_process+0x172>
 80105b4:	68f3      	ldr	r3, [r6, #12]
 80105b6:	68da      	ldr	r2, [r3, #12]
 80105b8:	455a      	cmp	r2, fp
 80105ba:	d168      	bne.n	801068e <ai_platform_network_process+0x18e>
 80105bc:	689a      	ldr	r2, [r3, #8]
 80105be:	4572      	cmp	r2, lr
 80105c0:	d165      	bne.n	801068e <ai_platform_network_process+0x18e>
 80105c2:	685b      	ldr	r3, [r3, #4]
 80105c4:	459c      	cmp	ip, r3
 80105c6:	d162      	bne.n	801068e <ai_platform_network_process+0x18e>
 80105c8:	6800      	ldr	r0, [r0, #0]
 80105ca:	f001 f9ad 	bl	8011928 <ai_array_get_byte_size>
 80105ce:	68f2      	ldr	r2, [r6, #12]
 80105d0:	6973      	ldr	r3, [r6, #20]
 80105d2:	68d2      	ldr	r2, [r2, #12]
 80105d4:	68db      	ldr	r3, [r3, #12]
 80105d6:	fb03 f302 	mul.w	r3, r3, r2
 80105da:	4298      	cmp	r0, r3
 80105dc:	d357      	bcc.n	801068e <ai_platform_network_process+0x18e>
 80105de:	69b3      	ldr	r3, [r6, #24]
 80105e0:	6818      	ldr	r0, [r3, #0]
 80105e2:	f001 f955 	bl	8011890 <ai_array_to_buffer_fmt>
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	4043      	eors	r3, r0
 80105ea:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80105ee:	f040 8229 	bne.w	8010a44 <ai_platform_network_process+0x544>
 80105f2:	693b      	ldr	r3, [r7, #16]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	f000 821d 	beq.w	8010a34 <ai_platform_network_process+0x534>
 80105fa:	88bb      	ldrh	r3, [r7, #4]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	f000 808a 	beq.w	8010716 <ai_platform_network_process+0x216>
 8010602:	9a01      	ldr	r2, [sp, #4]
 8010604:	68f1      	ldr	r1, [r6, #12]
 8010606:	429a      	cmp	r2, r3
 8010608:	68c9      	ldr	r1, [r1, #12]
 801060a:	bf38      	it	cc
 801060c:	461a      	movcc	r2, r3
 801060e:	9201      	str	r2, [sp, #4]
 8010610:	6972      	ldr	r2, [r6, #20]
 8010612:	68d3      	ldr	r3, [r2, #12]
 8010614:	fb03 f301 	mul.w	r3, r3, r1
 8010618:	f8c9 3008 	str.w	r3, [r9, #8]
 801061c:	88ba      	ldrh	r2, [r7, #4]
 801061e:	fb03 f302 	mul.w	r3, r3, r2
 8010622:	f8c9 300c 	str.w	r3, [r9, #12]
 8010626:	6939      	ldr	r1, [r7, #16]
 8010628:	f8c9 1004 	str.w	r1, [r9, #4]
 801062c:	693a      	ldr	r2, [r7, #16]
 801062e:	4413      	add	r3, r2
 8010630:	f8c9 3000 	str.w	r3, [r9]
 8010634:	69b0      	ldr	r0, [r6, #24]
 8010636:	6803      	ldr	r3, [r0, #0]
 8010638:	009a      	lsls	r2, r3, #2
 801063a:	d408      	bmi.n	801064e <ai_platform_network_process+0x14e>
 801063c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8010640:	1a9b      	subs	r3, r3, r2
 8010642:	4419      	add	r1, r3
 8010644:	6081      	str	r1, [r0, #8]
 8010646:	69b3      	ldr	r3, [r6, #24]
 8010648:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801064c:	60da      	str	r2, [r3, #12]
 801064e:	f108 0801 	add.w	r8, r8, #1
 8010652:	882b      	ldrh	r3, [r5, #0]
 8010654:	4598      	cmp	r8, r3
 8010656:	d27b      	bcs.n	8010750 <ai_platform_network_process+0x250>
 8010658:	686b      	ldr	r3, [r5, #4]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d078      	beq.n	8010750 <ai_platform_network_process+0x250>
 801065e:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8010662:	2e00      	cmp	r6, #0
 8010664:	d074      	beq.n	8010750 <ai_platform_network_process+0x250>
 8010666:	68ab      	ldr	r3, [r5, #8]
 8010668:	3718      	adds	r7, #24
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 8010670:	d039      	beq.n	80106e6 <ai_platform_network_process+0x1e6>
 8010672:	f8b7 e008 	ldrh.w	lr, [r7, #8]
 8010676:	f8b7 b006 	ldrh.w	fp, [r7, #6]
 801067a:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 801067e:	fb0b f30e 	mul.w	r3, fp, lr
 8010682:	69b0      	ldr	r0, [r6, #24]
 8010684:	fb0c f303 	mul.w	r3, ip, r3
 8010688:	6841      	ldr	r1, [r0, #4]
 801068a:	4299      	cmp	r1, r3
 801068c:	d292      	bcs.n	80105b4 <ai_platform_network_process+0xb4>
 801068e:	f104 0010 	add.w	r0, r4, #16
 8010692:	2218      	movs	r2, #24
 8010694:	2112      	movs	r1, #18
 8010696:	f04f 0b00 	mov.w	fp, #0
 801069a:	f000 f9e3 	bl	8010a64 <core_set_error>
 801069e:	e02a      	b.n	80106f6 <ai_platform_network_process+0x1f6>
 80106a0:	4b25      	ldr	r3, [pc, #148]	; (8010738 <ai_platform_network_process+0x238>)
 80106a2:	2201      	movs	r2, #1
 80106a4:	4618      	mov	r0, r3
 80106a6:	601a      	str	r2, [r3, #0]
 80106a8:	6803      	ldr	r3, [r0, #0]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d1fc      	bne.n	80106a8 <ai_platform_network_process+0x1a8>
 80106ae:	4b23      	ldr	r3, [pc, #140]	; (801073c <ai_platform_network_process+0x23c>)
 80106b0:	4823      	ldr	r0, [pc, #140]	; (8010740 <ai_platform_network_process+0x240>)
 80106b2:	4a24      	ldr	r2, [pc, #144]	; (8010744 <ai_platform_network_process+0x244>)
 80106b4:	6018      	str	r0, [r3, #0]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	4293      	cmp	r3, r2
 80106ba:	f43f af48 	beq.w	801054e <ai_platform_network_process+0x4e>
 80106be:	e7fe      	b.n	80106be <ai_platform_network_process+0x1be>
 80106c0:	4b21      	ldr	r3, [pc, #132]	; (8010748 <ai_platform_network_process+0x248>)
 80106c2:	2201      	movs	r2, #1
 80106c4:	4618      	mov	r0, r3
 80106c6:	601a      	str	r2, [r3, #0]
 80106c8:	6803      	ldr	r3, [r0, #0]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d1fc      	bne.n	80106c8 <ai_platform_network_process+0x1c8>
 80106ce:	4b1f      	ldr	r3, [pc, #124]	; (801074c <ai_platform_network_process+0x24c>)
 80106d0:	481b      	ldr	r0, [pc, #108]	; (8010740 <ai_platform_network_process+0x240>)
 80106d2:	4a1c      	ldr	r2, [pc, #112]	; (8010744 <ai_platform_network_process+0x244>)
 80106d4:	6018      	str	r0, [r3, #0]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	4293      	cmp	r3, r2
 80106da:	f43f af38 	beq.w	801054e <ai_platform_network_process+0x4e>
 80106de:	e7fe      	b.n	80106de <ai_platform_network_process+0x1de>
 80106e0:	2803      	cmp	r0, #3
 80106e2:	6163      	str	r3, [r4, #20]
 80106e4:	d10b      	bne.n	80106fe <ai_platform_network_process+0x1fe>
 80106e6:	f04f 0b00 	mov.w	fp, #0
 80106ea:	f104 0010 	add.w	r0, r4, #16
 80106ee:	2217      	movs	r2, #23
 80106f0:	2112      	movs	r1, #18
 80106f2:	f000 f9b7 	bl	8010a64 <core_set_error>
 80106f6:	4658      	mov	r0, fp
 80106f8:	b003      	add	sp, #12
 80106fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106fe:	f104 0010 	add.w	r0, r4, #16
 8010702:	2230      	movs	r2, #48	; 0x30
 8010704:	2111      	movs	r1, #17
 8010706:	f000 f9ad 	bl	8010a64 <core_set_error>
 801070a:	f04f 0b00 	mov.w	fp, #0
 801070e:	4658      	mov	r0, fp
 8010710:	b003      	add	sp, #12
 8010712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010716:	f104 0010 	add.w	r0, r4, #16
 801071a:	2221      	movs	r2, #33	; 0x21
 801071c:	2112      	movs	r1, #18
 801071e:	469b      	mov	fp, r3
 8010720:	f000 f9a0 	bl	8010a64 <core_set_error>
 8010724:	e7e7      	b.n	80106f6 <ai_platform_network_process+0x1f6>
 8010726:	bf00      	nop
 8010728:	a1c00100 	.word	0xa1c00100
 801072c:	e0002000 	.word	0xe0002000
 8010730:	e0042000 	.word	0xe0042000
 8010734:	5c001000 	.word	0x5c001000
 8010738:	58024c08 	.word	0x58024c08
 801073c:	58024c00 	.word	0x58024c00
 8010740:	f407a5c2 	.word	0xf407a5c2
 8010744:	b5e8b5cd 	.word	0xb5e8b5cd
 8010748:	40023008 	.word	0x40023008
 801074c:	40023000 	.word	0x40023000
 8010750:	f1ba 0f00 	cmp.w	sl, #0
 8010754:	f000 808c 	beq.w	8010870 <ai_platform_network_process+0x370>
 8010758:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 801075c:	2b01      	cmp	r3, #1
 801075e:	f240 813b 	bls.w	80109d8 <ai_platform_network_process+0x4d8>
 8010762:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8010764:	f115 0f0c 	cmn.w	r5, #12
 8010768:	f000 8136 	beq.w	80109d8 <ai_platform_network_process+0x4d8>
 801076c:	89ab      	ldrh	r3, [r5, #12]
 801076e:	2b00      	cmp	r3, #0
 8010770:	f000 8132 	beq.w	80109d8 <ai_platform_network_process+0x4d8>
 8010774:	4656      	mov	r6, sl
 8010776:	f04f 0900 	mov.w	r9, #0
 801077a:	9400      	str	r4, [sp, #0]
 801077c:	4599      	cmp	r9, r3
 801077e:	d274      	bcs.n	801086a <ai_platform_network_process+0x36a>
 8010780:	692b      	ldr	r3, [r5, #16]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d071      	beq.n	801086a <ai_platform_network_process+0x36a>
 8010786:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
 801078a:	2f00      	cmp	r7, #0
 801078c:	d06d      	beq.n	801086a <ai_platform_network_process+0x36a>
 801078e:	696b      	ldr	r3, [r5, #20]
 8010790:	ea4f 1409 	mov.w	r4, r9, lsl #4
 8010794:	f8d3 8000 	ldr.w	r8, [r3]
 8010798:	eb18 0a04 	adds.w	sl, r8, r4
 801079c:	f000 8125 	beq.w	80109ea <ai_platform_network_process+0x4ea>
 80107a0:	f8b6 e008 	ldrh.w	lr, [r6, #8]
 80107a4:	f8b6 b006 	ldrh.w	fp, [r6, #6]
 80107a8:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 80107ac:	fb0b f30e 	mul.w	r3, fp, lr
 80107b0:	69b8      	ldr	r0, [r7, #24]
 80107b2:	fb0c f303 	mul.w	r3, ip, r3
 80107b6:	6841      	ldr	r1, [r0, #4]
 80107b8:	4299      	cmp	r1, r3
 80107ba:	f0c0 810c 	bcc.w	80109d6 <ai_platform_network_process+0x4d6>
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	68da      	ldr	r2, [r3, #12]
 80107c2:	455a      	cmp	r2, fp
 80107c4:	f040 8107 	bne.w	80109d6 <ai_platform_network_process+0x4d6>
 80107c8:	689a      	ldr	r2, [r3, #8]
 80107ca:	4572      	cmp	r2, lr
 80107cc:	f040 8103 	bne.w	80109d6 <ai_platform_network_process+0x4d6>
 80107d0:	685b      	ldr	r3, [r3, #4]
 80107d2:	459c      	cmp	ip, r3
 80107d4:	f040 80ff 	bne.w	80109d6 <ai_platform_network_process+0x4d6>
 80107d8:	6800      	ldr	r0, [r0, #0]
 80107da:	f001 f8a5 	bl	8011928 <ai_array_get_byte_size>
 80107de:	68fa      	ldr	r2, [r7, #12]
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	68d2      	ldr	r2, [r2, #12]
 80107e4:	68db      	ldr	r3, [r3, #12]
 80107e6:	fb03 f302 	mul.w	r3, r3, r2
 80107ea:	4298      	cmp	r0, r3
 80107ec:	f0c0 80f3 	bcc.w	80109d6 <ai_platform_network_process+0x4d6>
 80107f0:	69bb      	ldr	r3, [r7, #24]
 80107f2:	6818      	ldr	r0, [r3, #0]
 80107f4:	f001 f84c 	bl	8011890 <ai_array_to_buffer_fmt>
 80107f8:	6833      	ldr	r3, [r6, #0]
 80107fa:	4043      	eors	r3, r0
 80107fc:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8010800:	f040 810e 	bne.w	8010a20 <ai_platform_network_process+0x520>
 8010804:	6933      	ldr	r3, [r6, #16]
 8010806:	2b00      	cmp	r3, #0
 8010808:	f000 8101 	beq.w	8010a0e <ai_platform_network_process+0x50e>
 801080c:	88b3      	ldrh	r3, [r6, #4]
 801080e:	2b00      	cmp	r3, #0
 8010810:	f000 80f4 	beq.w	80109fc <ai_platform_network_process+0x4fc>
 8010814:	9a01      	ldr	r2, [sp, #4]
 8010816:	68f9      	ldr	r1, [r7, #12]
 8010818:	429a      	cmp	r2, r3
 801081a:	68c9      	ldr	r1, [r1, #12]
 801081c:	bf38      	it	cc
 801081e:	461a      	movcc	r2, r3
 8010820:	9201      	str	r2, [sp, #4]
 8010822:	697a      	ldr	r2, [r7, #20]
 8010824:	68d3      	ldr	r3, [r2, #12]
 8010826:	fb03 f301 	mul.w	r3, r3, r1
 801082a:	f8ca 3008 	str.w	r3, [sl, #8]
 801082e:	88b2      	ldrh	r2, [r6, #4]
 8010830:	fb03 f302 	mul.w	r3, r3, r2
 8010834:	f8ca 300c 	str.w	r3, [sl, #12]
 8010838:	6931      	ldr	r1, [r6, #16]
 801083a:	f8ca 1004 	str.w	r1, [sl, #4]
 801083e:	6932      	ldr	r2, [r6, #16]
 8010840:	4413      	add	r3, r2
 8010842:	f848 3004 	str.w	r3, [r8, r4]
 8010846:	69b8      	ldr	r0, [r7, #24]
 8010848:	6803      	ldr	r3, [r0, #0]
 801084a:	009b      	lsls	r3, r3, #2
 801084c:	d408      	bmi.n	8010860 <ai_platform_network_process+0x360>
 801084e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8010852:	1a9b      	subs	r3, r3, r2
 8010854:	4419      	add	r1, r3
 8010856:	6081      	str	r1, [r0, #8]
 8010858:	69bb      	ldr	r3, [r7, #24]
 801085a:	f8da 2004 	ldr.w	r2, [sl, #4]
 801085e:	60da      	str	r2, [r3, #12]
 8010860:	f109 0901 	add.w	r9, r9, #1
 8010864:	3618      	adds	r6, #24
 8010866:	89ab      	ldrh	r3, [r5, #12]
 8010868:	e788      	b.n	801077c <ai_platform_network_process+0x27c>
 801086a:	e9dd 4300 	ldrd	r4, r3, [sp]
 801086e:	82a3      	strh	r3, [r4, #20]
 8010870:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8010874:	2a00      	cmp	r2, #0
 8010876:	f000 80a9 	beq.w	80109cc <ai_platform_network_process+0x4cc>
 801087a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 801087c:	2a01      	cmp	r2, #1
 801087e:	f240 80a8 	bls.w	80109d2 <ai_platform_network_process+0x4d2>
 8010882:	f105 060c 	add.w	r6, r5, #12
 8010886:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 801088a:	8aa3      	ldrh	r3, [r4, #20]
 801088c:	455b      	cmp	r3, fp
 801088e:	f67f af32 	bls.w	80106f6 <ai_platform_network_process+0x1f6>
 8010892:	9400      	str	r4, [sp, #0]
 8010894:	2d00      	cmp	r5, #0
 8010896:	d037      	beq.n	8010908 <ai_platform_network_process+0x408>
 8010898:	882b      	ldrh	r3, [r5, #0]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d034      	beq.n	8010908 <ai_platform_network_process+0x408>
 801089e:	686b      	ldr	r3, [r5, #4]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d031      	beq.n	8010908 <ai_platform_network_process+0x408>
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d02e      	beq.n	8010908 <ai_platform_network_process+0x408>
 80108aa:	f04f 0800 	mov.w	r8, #0
 80108ae:	e01a      	b.n	80108e6 <ai_platform_network_process+0x3e6>
 80108b0:	68d4      	ldr	r4, [r2, #12]
 80108b2:	1b00      	subs	r0, r0, r4
 80108b4:	4401      	add	r1, r0
 80108b6:	6091      	str	r1, [r2, #8]
 80108b8:	687a      	ldr	r2, [r7, #4]
 80108ba:	699b      	ldr	r3, [r3, #24]
 80108bc:	60da      	str	r2, [r3, #12]
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	f108 0801 	add.w	r8, r8, #1
 80108c4:	68b9      	ldr	r1, [r7, #8]
 80108c6:	f85a 2009 	ldr.w	r2, [sl, r9]
 80108ca:	440b      	add	r3, r1
 80108cc:	4293      	cmp	r3, r2
 80108ce:	d301      	bcc.n	80108d4 <ai_platform_network_process+0x3d4>
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	1ad3      	subs	r3, r2, r3
 80108d4:	607b      	str	r3, [r7, #4]
 80108d6:	882b      	ldrh	r3, [r5, #0]
 80108d8:	4598      	cmp	r8, r3
 80108da:	d215      	bcs.n	8010908 <ai_platform_network_process+0x408>
 80108dc:	686b      	ldr	r3, [r5, #4]
 80108de:	b19b      	cbz	r3, 8010908 <ai_platform_network_process+0x408>
 80108e0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80108e4:	b183      	cbz	r3, 8010908 <ai_platform_network_process+0x408>
 80108e6:	68a9      	ldr	r1, [r5, #8]
 80108e8:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80108ec:	699a      	ldr	r2, [r3, #24]
 80108ee:	f8d1 a000 	ldr.w	sl, [r1]
 80108f2:	6814      	ldr	r4, [r2, #0]
 80108f4:	eb0a 0709 	add.w	r7, sl, r9
 80108f8:	6890      	ldr	r0, [r2, #8]
 80108fa:	00a4      	lsls	r4, r4, #2
 80108fc:	6879      	ldr	r1, [r7, #4]
 80108fe:	d5d7      	bpl.n	80108b0 <ai_platform_network_process+0x3b0>
 8010900:	68ba      	ldr	r2, [r7, #8]
 8010902:	f001 f873 	bl	80119ec <memcpy>
 8010906:	e7da      	b.n	80108be <ai_platform_network_process+0x3be>
 8010908:	9800      	ldr	r0, [sp, #0]
 801090a:	f000 ff87 	bl	801181c <ai_layers_forward_all>
 801090e:	2e00      	cmp	r6, #0
 8010910:	d04a      	beq.n	80109a8 <ai_platform_network_process+0x4a8>
 8010912:	8833      	ldrh	r3, [r6, #0]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d047      	beq.n	80109a8 <ai_platform_network_process+0x4a8>
 8010918:	6873      	ldr	r3, [r6, #4]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d044      	beq.n	80109a8 <ai_platform_network_process+0x4a8>
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d041      	beq.n	80109a8 <ai_platform_network_process+0x4a8>
 8010924:	f04f 0800 	mov.w	r8, #0
 8010928:	e019      	b.n	801095e <ai_platform_network_process+0x45e>
 801092a:	f85a 2009 	ldr.w	r2, [sl, r9]
 801092e:	4291      	cmp	r1, r2
 8010930:	d301      	bcc.n	8010936 <ai_platform_network_process+0x436>
 8010932:	68f9      	ldr	r1, [r7, #12]
 8010934:	1a51      	subs	r1, r2, r1
 8010936:	6079      	str	r1, [r7, #4]
 8010938:	f108 0801 	add.w	r8, r8, #1
 801093c:	6998      	ldr	r0, [r3, #24]
 801093e:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 8010942:	1b12      	subs	r2, r2, r4
 8010944:	440a      	add	r2, r1
 8010946:	6082      	str	r2, [r0, #8]
 8010948:	687a      	ldr	r2, [r7, #4]
 801094a:	699b      	ldr	r3, [r3, #24]
 801094c:	60da      	str	r2, [r3, #12]
 801094e:	8833      	ldrh	r3, [r6, #0]
 8010950:	4598      	cmp	r8, r3
 8010952:	d229      	bcs.n	80109a8 <ai_platform_network_process+0x4a8>
 8010954:	6873      	ldr	r3, [r6, #4]
 8010956:	b33b      	cbz	r3, 80109a8 <ai_platform_network_process+0x4a8>
 8010958:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801095c:	b323      	cbz	r3, 80109a8 <ai_platform_network_process+0x4a8>
 801095e:	68b2      	ldr	r2, [r6, #8]
 8010960:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8010964:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8010968:	f8d2 a000 	ldr.w	sl, [r2]
 801096c:	f8de 1000 	ldr.w	r1, [lr]
 8010970:	eb0a 0709 	add.w	r7, sl, r9
 8010974:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 8010978:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 801097c:	eb00 0102 	add.w	r1, r0, r2
 8010980:	d0d3      	beq.n	801092a <ai_platform_network_process+0x42a>
 8010982:	f8de 1008 	ldr.w	r1, [lr, #8]
 8010986:	f001 f831 	bl	80119ec <memcpy>
 801098a:	f85a 2009 	ldr.w	r2, [sl, r9]
 801098e:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 8010992:	440b      	add	r3, r1
 8010994:	4293      	cmp	r3, r2
 8010996:	d301      	bcc.n	801099c <ai_platform_network_process+0x49c>
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	1ad3      	subs	r3, r2, r3
 801099c:	607b      	str	r3, [r7, #4]
 801099e:	f108 0801 	add.w	r8, r8, #1
 80109a2:	8833      	ldrh	r3, [r6, #0]
 80109a4:	4598      	cmp	r8, r3
 80109a6:	d3d5      	bcc.n	8010954 <ai_platform_network_process+0x454>
 80109a8:	9b00      	ldr	r3, [sp, #0]
 80109aa:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 80109ae:	461a      	mov	r2, r3
 80109b0:	8a9b      	ldrh	r3, [r3, #20]
 80109b2:	f10b 0b01 	add.w	fp, fp, #1
 80109b6:	fa1f fb8b 	uxth.w	fp, fp
 80109ba:	455b      	cmp	r3, fp
 80109bc:	f8a2 b016 	strh.w	fp, [r2, #22]
 80109c0:	f63f af68 	bhi.w	8010894 <ai_platform_network_process+0x394>
 80109c4:	4658      	mov	r0, fp
 80109c6:	b003      	add	sp, #12
 80109c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109cc:	4615      	mov	r5, r2
 80109ce:	4616      	mov	r6, r2
 80109d0:	e759      	b.n	8010886 <ai_platform_network_process+0x386>
 80109d2:	2600      	movs	r6, #0
 80109d4:	e757      	b.n	8010886 <ai_platform_network_process+0x386>
 80109d6:	9c00      	ldr	r4, [sp, #0]
 80109d8:	f104 0010 	add.w	r0, r4, #16
 80109dc:	2218      	movs	r2, #24
 80109de:	2113      	movs	r1, #19
 80109e0:	f04f 0b00 	mov.w	fp, #0
 80109e4:	f000 f83e 	bl	8010a64 <core_set_error>
 80109e8:	e685      	b.n	80106f6 <ai_platform_network_process+0x1f6>
 80109ea:	9c00      	ldr	r4, [sp, #0]
 80109ec:	2217      	movs	r2, #23
 80109ee:	2113      	movs	r1, #19
 80109f0:	46d3      	mov	fp, sl
 80109f2:	f104 0010 	add.w	r0, r4, #16
 80109f6:	f000 f835 	bl	8010a64 <core_set_error>
 80109fa:	e67c      	b.n	80106f6 <ai_platform_network_process+0x1f6>
 80109fc:	9c00      	ldr	r4, [sp, #0]
 80109fe:	2221      	movs	r2, #33	; 0x21
 8010a00:	2113      	movs	r1, #19
 8010a02:	469b      	mov	fp, r3
 8010a04:	f104 0010 	add.w	r0, r4, #16
 8010a08:	f000 f82c 	bl	8010a64 <core_set_error>
 8010a0c:	e673      	b.n	80106f6 <ai_platform_network_process+0x1f6>
 8010a0e:	9c00      	ldr	r4, [sp, #0]
 8010a10:	2217      	movs	r2, #23
 8010a12:	2113      	movs	r1, #19
 8010a14:	469b      	mov	fp, r3
 8010a16:	f104 0010 	add.w	r0, r4, #16
 8010a1a:	f000 f823 	bl	8010a64 <core_set_error>
 8010a1e:	e66a      	b.n	80106f6 <ai_platform_network_process+0x1f6>
 8010a20:	9c00      	ldr	r4, [sp, #0]
 8010a22:	2219      	movs	r2, #25
 8010a24:	2113      	movs	r1, #19
 8010a26:	f04f 0b00 	mov.w	fp, #0
 8010a2a:	f104 0010 	add.w	r0, r4, #16
 8010a2e:	f000 f819 	bl	8010a64 <core_set_error>
 8010a32:	e660      	b.n	80106f6 <ai_platform_network_process+0x1f6>
 8010a34:	f104 0010 	add.w	r0, r4, #16
 8010a38:	2217      	movs	r2, #23
 8010a3a:	2112      	movs	r1, #18
 8010a3c:	469b      	mov	fp, r3
 8010a3e:	f000 f811 	bl	8010a64 <core_set_error>
 8010a42:	e658      	b.n	80106f6 <ai_platform_network_process+0x1f6>
 8010a44:	f104 0010 	add.w	r0, r4, #16
 8010a48:	2219      	movs	r2, #25
 8010a4a:	2112      	movs	r1, #18
 8010a4c:	f04f 0b00 	mov.w	fp, #0
 8010a50:	f000 f808 	bl	8010a64 <core_set_error>
 8010a54:	e64f      	b.n	80106f6 <ai_platform_network_process+0x1f6>
 8010a56:	f1ba 0f00 	cmp.w	sl, #0
 8010a5a:	f47f ae7f 	bne.w	801075c <ai_platform_network_process+0x25c>
 8010a5e:	e70d      	b.n	801087c <ai_platform_network_process+0x37c>

08010a60 <core_init>:
 8010a60:	2001      	movs	r0, #1
 8010a62:	4770      	bx	lr

08010a64 <core_set_error>:
 8010a64:	4603      	mov	r3, r0
 8010a66:	7800      	ldrb	r0, [r0, #0]
 8010a68:	b930      	cbnz	r0, 8010a78 <core_set_error+0x14>
 8010a6a:	7019      	strb	r1, [r3, #0]
 8010a6c:	2001      	movs	r0, #1
 8010a6e:	6819      	ldr	r1, [r3, #0]
 8010a70:	f362 211f 	bfi	r1, r2, #8, #24
 8010a74:	6019      	str	r1, [r3, #0]
 8010a76:	4770      	bx	lr
 8010a78:	2000      	movs	r0, #0
 8010a7a:	4770      	bx	lr

08010a7c <ai_dict8_dot_array_f32>:
 8010a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a80:	9d06      	ldr	r5, [sp, #24]
 8010a82:	4c88      	ldr	r4, [pc, #544]	; (8010ca4 <ai_dict8_dot_array_f32+0x228>)
 8010a84:	2d07      	cmp	r5, #7
 8010a86:	442c      	add	r4, r5
 8010a88:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010a8c:	f104 0620 	add.w	r6, r4, #32
 8010a90:	d817      	bhi.n	8010ac2 <ai_dict8_dot_array_f32+0x46>
 8010a92:	42b3      	cmp	r3, r6
 8010a94:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8010ca8 <ai_dict8_dot_array_f32+0x22c>
 8010a98:	d20b      	bcs.n	8010ab2 <ai_dict8_dot_array_f32+0x36>
 8010a9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a9e:	ecf3 7a01 	vldmia	r3!, {s15}
 8010aa2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010aa6:	42b3      	cmp	r3, r6
 8010aa8:	edd4 6a00 	vldr	s13, [r4]
 8010aac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010ab0:	d3f3      	bcc.n	8010a9a <ai_dict8_dot_array_f32+0x1e>
 8010ab2:	edd0 7a00 	vldr	s15, [r0]
 8010ab6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010aba:	ed80 7a00 	vstr	s14, [r0]
 8010abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ac2:	f001 0503 	and.w	r5, r1, #3
 8010ac6:	2d02      	cmp	r5, #2
 8010ac8:	f000 80f0 	beq.w	8010cac <ai_dict8_dot_array_f32+0x230>
 8010acc:	2d03      	cmp	r5, #3
 8010ace:	f000 81ff 	beq.w	8010ed0 <ai_dict8_dot_array_f32+0x454>
 8010ad2:	2d01      	cmp	r5, #1
 8010ad4:	f000 81f0 	beq.w	8010eb8 <ai_dict8_dot_array_f32+0x43c>
 8010ad8:	42a3      	cmp	r3, r4
 8010ada:	f200 81fc 	bhi.w	8010ed6 <ai_dict8_dot_array_f32+0x45a>
 8010ade:	1ae4      	subs	r4, r4, r3
 8010ae0:	f101 0810 	add.w	r8, r1, #16
 8010ae4:	f101 0508 	add.w	r5, r1, #8
 8010ae8:	f103 0720 	add.w	r7, r3, #32
 8010aec:	0964      	lsrs	r4, r4, #5
 8010aee:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8010ca8 <ai_dict8_dot_array_f32+0x22c>
 8010af2:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 8010af6:	f815 ec07 	ldrb.w	lr, [r5, #-7]
 8010afa:	3508      	adds	r5, #8
 8010afc:	f815 cc10 	ldrb.w	ip, [r5, #-16]
 8010b00:	3720      	adds	r7, #32
 8010b02:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8010b06:	ed57 5a0f 	vldr	s11, [r7, #-60]	; 0xffffffc4
 8010b0a:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8010b0e:	ed17 6a10 	vldr	s12, [r7, #-64]	; 0xffffffc0
 8010b12:	edde 7a00 	vldr	s15, [lr]
 8010b16:	ed57 6a0e 	vldr	s13, [r7, #-56]	; 0xffffffc8
 8010b1a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010b1e:	eddc 5a00 	vldr	s11, [ip]
 8010b22:	f815 cc0e 	ldrb.w	ip, [r5, #-14]
 8010b26:	ed17 5a0d 	vldr	s10, [r7, #-52]	; 0xffffffcc
 8010b2a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8010b2e:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8010b32:	f815 ec0c 	ldrb.w	lr, [r5, #-12]
 8010b36:	ed9c 4a00 	vldr	s8, [ip]
 8010b3a:	f815 cc0d 	ldrb.w	ip, [r5, #-13]
 8010b3e:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8010b42:	ed17 6a0c 	vldr	s12, [r7, #-48]	; 0xffffffd0
 8010b46:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8010b4a:	ed57 4a0b 	vldr	s9, [r7, #-44]	; 0xffffffd4
 8010b4e:	eee4 7a26 	vfma.f32	s15, s8, s13
 8010b52:	ed57 5a0a 	vldr	s11, [r7, #-40]	; 0xffffffd8
 8010b56:	ed9c 4a00 	vldr	s8, [ip]
 8010b5a:	f815 cc0b 	ldrb.w	ip, [r5, #-11]
 8010b5e:	ed57 6a09 	vldr	s13, [r7, #-36]	; 0xffffffdc
 8010b62:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8010b66:	eee4 7a05 	vfma.f32	s15, s8, s10
 8010b6a:	ed9e 5a00 	vldr	s10, [lr]
 8010b6e:	ed9c 4a00 	vldr	s8, [ip]
 8010b72:	f815 ec0a 	ldrb.w	lr, [r5, #-10]
 8010b76:	f815 cc09 	ldrb.w	ip, [r5, #-9]
 8010b7a:	4545      	cmp	r5, r8
 8010b7c:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8010b80:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8010b84:	eee5 7a06 	vfma.f32	s15, s10, s12
 8010b88:	ed9e 5a00 	vldr	s10, [lr]
 8010b8c:	ed9c 6a00 	vldr	s12, [ip]
 8010b90:	eee4 7a24 	vfma.f32	s15, s8, s9
 8010b94:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010b98:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010b9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010ba0:	d1a9      	bne.n	8010af6 <ai_dict8_dot_array_f32+0x7a>
 8010ba2:	3401      	adds	r4, #1
 8010ba4:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8010ba8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8010bac:	42b3      	cmp	r3, r6
 8010bae:	d280      	bcs.n	8010ab2 <ai_dict8_dot_array_f32+0x36>
 8010bb0:	461c      	mov	r4, r3
 8010bb2:	780d      	ldrb	r5, [r1, #0]
 8010bb4:	ecf4 6a01 	vldmia	r4!, {s13}
 8010bb8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010bbc:	42a6      	cmp	r6, r4
 8010bbe:	edd5 7a00 	vldr	s15, [r5]
 8010bc2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010bc6:	f67f af74 	bls.w	8010ab2 <ai_dict8_dot_array_f32+0x36>
 8010bca:	784d      	ldrb	r5, [r1, #1]
 8010bcc:	f103 0408 	add.w	r4, r3, #8
 8010bd0:	edd3 6a01 	vldr	s13, [r3, #4]
 8010bd4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010bd8:	42a6      	cmp	r6, r4
 8010bda:	edd5 7a00 	vldr	s15, [r5]
 8010bde:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010be2:	f67f af66 	bls.w	8010ab2 <ai_dict8_dot_array_f32+0x36>
 8010be6:	788d      	ldrb	r5, [r1, #2]
 8010be8:	f103 040c 	add.w	r4, r3, #12
 8010bec:	edd3 6a02 	vldr	s13, [r3, #8]
 8010bf0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010bf4:	42a6      	cmp	r6, r4
 8010bf6:	edd5 7a00 	vldr	s15, [r5]
 8010bfa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010bfe:	f67f af58 	bls.w	8010ab2 <ai_dict8_dot_array_f32+0x36>
 8010c02:	78cd      	ldrb	r5, [r1, #3]
 8010c04:	f103 0410 	add.w	r4, r3, #16
 8010c08:	edd3 6a03 	vldr	s13, [r3, #12]
 8010c0c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010c10:	42a6      	cmp	r6, r4
 8010c12:	edd5 7a00 	vldr	s15, [r5]
 8010c16:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010c1a:	f67f af4a 	bls.w	8010ab2 <ai_dict8_dot_array_f32+0x36>
 8010c1e:	790d      	ldrb	r5, [r1, #4]
 8010c20:	f103 0414 	add.w	r4, r3, #20
 8010c24:	edd3 6a04 	vldr	s13, [r3, #16]
 8010c28:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010c2c:	42a6      	cmp	r6, r4
 8010c2e:	edd5 7a00 	vldr	s15, [r5]
 8010c32:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010c36:	f67f af3c 	bls.w	8010ab2 <ai_dict8_dot_array_f32+0x36>
 8010c3a:	794d      	ldrb	r5, [r1, #5]
 8010c3c:	f103 0418 	add.w	r4, r3, #24
 8010c40:	edd3 6a05 	vldr	s13, [r3, #20]
 8010c44:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010c48:	42a6      	cmp	r6, r4
 8010c4a:	edd5 7a00 	vldr	s15, [r5]
 8010c4e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010c52:	f67f af2e 	bls.w	8010ab2 <ai_dict8_dot_array_f32+0x36>
 8010c56:	798d      	ldrb	r5, [r1, #6]
 8010c58:	f103 041c 	add.w	r4, r3, #28
 8010c5c:	edd3 6a06 	vldr	s13, [r3, #24]
 8010c60:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010c64:	42a6      	cmp	r6, r4
 8010c66:	edd5 7a00 	vldr	s15, [r5]
 8010c6a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010c6e:	f67f af20 	bls.w	8010ab2 <ai_dict8_dot_array_f32+0x36>
 8010c72:	79cd      	ldrb	r5, [r1, #7]
 8010c74:	f103 0420 	add.w	r4, r3, #32
 8010c78:	edd3 6a07 	vldr	s13, [r3, #28]
 8010c7c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010c80:	42a6      	cmp	r6, r4
 8010c82:	edd5 7a00 	vldr	s15, [r5]
 8010c86:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010c8a:	f67f af12 	bls.w	8010ab2 <ai_dict8_dot_array_f32+0x36>
 8010c8e:	7a09      	ldrb	r1, [r1, #8]
 8010c90:	edd3 7a08 	vldr	s15, [r3, #32]
 8010c94:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010c98:	edd2 6a00 	vldr	s13, [r2]
 8010c9c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010ca0:	e707      	b.n	8010ab2 <ai_dict8_dot_array_f32+0x36>
 8010ca2:	bf00      	nop
 8010ca4:	3ffffff8 	.word	0x3ffffff8
 8010ca8:	00000000 	.word	0x00000000
 8010cac:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8010ca8 <ai_dict8_dot_array_f32+0x22c>
 8010cb0:	780d      	ldrb	r5, [r1, #0]
 8010cb2:	3304      	adds	r3, #4
 8010cb4:	ed53 7a01 	vldr	s15, [r3, #-4]
 8010cb8:	3101      	adds	r1, #1
 8010cba:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010cbe:	edd5 6a00 	vldr	s13, [r5]
 8010cc2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010cc6:	780d      	ldrb	r5, [r1, #0]
 8010cc8:	1d1f      	adds	r7, r3, #4
 8010cca:	edd3 7a00 	vldr	s15, [r3]
 8010cce:	f101 0c01 	add.w	ip, r1, #1
 8010cd2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010cd6:	42bc      	cmp	r4, r7
 8010cd8:	edd5 6a00 	vldr	s13, [r5]
 8010cdc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010ce0:	d365      	bcc.n	8010dae <ai_dict8_dot_array_f32+0x332>
 8010ce2:	3324      	adds	r3, #36	; 0x24
 8010ce4:	f101 0e11 	add.w	lr, r1, #17
 8010ce8:	3109      	adds	r1, #9
 8010cea:	eba6 0803 	sub.w	r8, r6, r3
 8010cee:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8010cf2:	eb0e 0ec8 	add.w	lr, lr, r8, lsl #3
 8010cf6:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8010cfa:	3108      	adds	r1, #8
 8010cfc:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 8010d00:	3320      	adds	r3, #32
 8010d02:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010d06:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8010d0a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010d0e:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 8010d12:	edd5 7a00 	vldr	s15, [r5]
 8010d16:	ed53 6a0e 	vldr	s13, [r3, #-56]	; 0xffffffc8
 8010d1a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010d1e:	edd4 5a00 	vldr	s11, [r4]
 8010d22:	f811 4c0e 	ldrb.w	r4, [r1, #-14]
 8010d26:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 8010d2a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8010d2e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010d32:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8010d36:	ed94 4a00 	vldr	s8, [r4]
 8010d3a:	f811 4c0d 	ldrb.w	r4, [r1, #-13]
 8010d3e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010d42:	ed13 6a0c 	vldr	s12, [r3, #-48]	; 0xffffffd0
 8010d46:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010d4a:	ed53 4a0b 	vldr	s9, [r3, #-44]	; 0xffffffd4
 8010d4e:	eee4 7a26 	vfma.f32	s15, s8, s13
 8010d52:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 8010d56:	ed94 4a00 	vldr	s8, [r4]
 8010d5a:	f811 4c0b 	ldrb.w	r4, [r1, #-11]
 8010d5e:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 8010d62:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010d66:	eee4 7a05 	vfma.f32	s15, s8, s10
 8010d6a:	ed95 5a00 	vldr	s10, [r5]
 8010d6e:	ed94 4a00 	vldr	s8, [r4]
 8010d72:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8010d76:	f811 4c09 	ldrb.w	r4, [r1, #-9]
 8010d7a:	458e      	cmp	lr, r1
 8010d7c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010d80:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010d84:	eee5 7a06 	vfma.f32	s15, s10, s12
 8010d88:	ed95 5a00 	vldr	s10, [r5]
 8010d8c:	ed94 6a00 	vldr	s12, [r4]
 8010d90:	eee4 7a24 	vfma.f32	s15, s8, s9
 8010d94:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010d98:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010d9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010da0:	d1a9      	bne.n	8010cf6 <ai_dict8_dot_array_f32+0x27a>
 8010da2:	f108 0801 	add.w	r8, r8, #1
 8010da6:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 8010daa:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 8010dae:	42b7      	cmp	r7, r6
 8010db0:	f4bf ae7f 	bcs.w	8010ab2 <ai_dict8_dot_array_f32+0x36>
 8010db4:	463b      	mov	r3, r7
 8010db6:	f89c 1000 	ldrb.w	r1, [ip]
 8010dba:	ecf3 6a01 	vldmia	r3!, {s13}
 8010dbe:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010dc2:	429e      	cmp	r6, r3
 8010dc4:	edd1 7a00 	vldr	s15, [r1]
 8010dc8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010dcc:	f67f ae71 	bls.w	8010ab2 <ai_dict8_dot_array_f32+0x36>
 8010dd0:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8010dd4:	f107 0308 	add.w	r3, r7, #8
 8010dd8:	edd7 6a01 	vldr	s13, [r7, #4]
 8010ddc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010de0:	429e      	cmp	r6, r3
 8010de2:	edd1 7a00 	vldr	s15, [r1]
 8010de6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010dea:	f67f ae62 	bls.w	8010ab2 <ai_dict8_dot_array_f32+0x36>
 8010dee:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8010df2:	f107 030c 	add.w	r3, r7, #12
 8010df6:	edd7 6a02 	vldr	s13, [r7, #8]
 8010dfa:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010dfe:	429e      	cmp	r6, r3
 8010e00:	edd1 7a00 	vldr	s15, [r1]
 8010e04:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010e08:	f67f ae53 	bls.w	8010ab2 <ai_dict8_dot_array_f32+0x36>
 8010e0c:	f89c 1003 	ldrb.w	r1, [ip, #3]
 8010e10:	f107 0310 	add.w	r3, r7, #16
 8010e14:	edd7 6a03 	vldr	s13, [r7, #12]
 8010e18:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010e1c:	429e      	cmp	r6, r3
 8010e1e:	edd1 7a00 	vldr	s15, [r1]
 8010e22:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010e26:	f67f ae44 	bls.w	8010ab2 <ai_dict8_dot_array_f32+0x36>
 8010e2a:	f89c 1004 	ldrb.w	r1, [ip, #4]
 8010e2e:	f107 0314 	add.w	r3, r7, #20
 8010e32:	edd7 6a04 	vldr	s13, [r7, #16]
 8010e36:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010e3a:	429e      	cmp	r6, r3
 8010e3c:	edd1 7a00 	vldr	s15, [r1]
 8010e40:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010e44:	f67f ae35 	bls.w	8010ab2 <ai_dict8_dot_array_f32+0x36>
 8010e48:	f89c 1005 	ldrb.w	r1, [ip, #5]
 8010e4c:	f107 0318 	add.w	r3, r7, #24
 8010e50:	edd7 6a05 	vldr	s13, [r7, #20]
 8010e54:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010e58:	429e      	cmp	r6, r3
 8010e5a:	edd1 7a00 	vldr	s15, [r1]
 8010e5e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010e62:	f67f ae26 	bls.w	8010ab2 <ai_dict8_dot_array_f32+0x36>
 8010e66:	f89c 1006 	ldrb.w	r1, [ip, #6]
 8010e6a:	f107 031c 	add.w	r3, r7, #28
 8010e6e:	edd7 6a06 	vldr	s13, [r7, #24]
 8010e72:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010e76:	429e      	cmp	r6, r3
 8010e78:	edd1 7a00 	vldr	s15, [r1]
 8010e7c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010e80:	f67f ae17 	bls.w	8010ab2 <ai_dict8_dot_array_f32+0x36>
 8010e84:	f89c 1007 	ldrb.w	r1, [ip, #7]
 8010e88:	f107 0320 	add.w	r3, r7, #32
 8010e8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8010e90:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010e94:	429e      	cmp	r6, r3
 8010e96:	edd1 7a00 	vldr	s15, [r1]
 8010e9a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010e9e:	f67f ae08 	bls.w	8010ab2 <ai_dict8_dot_array_f32+0x36>
 8010ea2:	f89c 3008 	ldrb.w	r3, [ip, #8]
 8010ea6:	edd7 7a08 	vldr	s15, [r7, #32]
 8010eaa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010eae:	edd2 6a00 	vldr	s13, [r2]
 8010eb2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010eb6:	e5fc      	b.n	8010ab2 <ai_dict8_dot_array_f32+0x36>
 8010eb8:	780d      	ldrb	r5, [r1, #0]
 8010eba:	3304      	adds	r3, #4
 8010ebc:	ed53 7a01 	vldr	s15, [r3, #-4]
 8010ec0:	3101      	adds	r1, #1
 8010ec2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8010ec6:	ed95 7a00 	vldr	s14, [r5]
 8010eca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010ece:	e6ef      	b.n	8010cb0 <ai_dict8_dot_array_f32+0x234>
 8010ed0:	ed1f 7a8b 	vldr	s14, [pc, #-556]	; 8010ca8 <ai_dict8_dot_array_f32+0x22c>
 8010ed4:	e6f7      	b.n	8010cc6 <ai_dict8_dot_array_f32+0x24a>
 8010ed6:	ed1f 7a8c 	vldr	s14, [pc, #-560]	; 8010ca8 <ai_dict8_dot_array_f32+0x22c>
 8010eda:	e667      	b.n	8010bac <ai_dict8_dot_array_f32+0x130>

08010edc <ai_dict4_dot_array_f32>:
 8010edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ee0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010ee2:	f027 0c01 	bic.w	ip, r7, #1
 8010ee6:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8010eea:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8010eee:	f000 80ad 	beq.w	801104c <ai_dict4_dot_array_f32+0x170>
 8010ef2:	1d0d      	adds	r5, r1, #4
 8010ef4:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8010ef8:	f103 0420 	add.w	r4, r3, #32
 8010efc:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8011054 <ai_dict4_dot_array_f32+0x178>
 8010f00:	eb05 0e09 	add.w	lr, r5, r9
 8010f04:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8010f08:	3504      	adds	r5, #4
 8010f0a:	ed14 5a07 	vldr	s10, [r4, #-28]	; 0xffffffe4
 8010f0e:	3420      	adds	r4, #32
 8010f10:	f006 0a0f 	and.w	sl, r6, #15
 8010f14:	0936      	lsrs	r6, r6, #4
 8010f16:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8010f1a:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8010f1e:	ed14 4a0e 	vldr	s8, [r4, #-56]	; 0xffffffc8
 8010f22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010f26:	ed14 6a0d 	vldr	s12, [r4, #-52]	; 0xffffffcc
 8010f2a:	edda 7a00 	vldr	s15, [sl]
 8010f2e:	edd6 5a00 	vldr	s11, [r6]
 8010f32:	ee67 7a85 	vmul.f32	s15, s15, s10
 8010f36:	f815 6c07 	ldrb.w	r6, [r5, #-7]
 8010f3a:	ed54 3a0c 	vldr	s7, [r4, #-48]	; 0xffffffd0
 8010f3e:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8010f42:	f006 060f 	and.w	r6, r6, #15
 8010f46:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8010f4a:	ed54 4a0b 	vldr	s9, [r4, #-44]	; 0xffffffd4
 8010f4e:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8010f52:	ed54 5a0a 	vldr	s11, [r4, #-40]	; 0xffffffd8
 8010f56:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010f5a:	ed54 6a09 	vldr	s13, [r4, #-36]	; 0xffffffdc
 8010f5e:	ed9a 3a00 	vldr	s6, [sl]
 8010f62:	ed96 5a00 	vldr	s10, [r6]
 8010f66:	f815 ac06 	ldrb.w	sl, [r5, #-6]
 8010f6a:	eee3 7a04 	vfma.f32	s15, s6, s8
 8010f6e:	f815 6c05 	ldrb.w	r6, [r5, #-5]
 8010f72:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8010f76:	f00a 0a0f 	and.w	sl, sl, #15
 8010f7a:	45ae      	cmp	lr, r5
 8010f7c:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8010f80:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8010f84:	ed9b 3a00 	vldr	s6, [fp]
 8010f88:	ea4f 1b16 	mov.w	fp, r6, lsr #4
 8010f8c:	eee5 7a06 	vfma.f32	s15, s10, s12
 8010f90:	ed9a 4a00 	vldr	s8, [sl]
 8010f94:	eb02 0a8b 	add.w	sl, r2, fp, lsl #2
 8010f98:	f006 060f 	and.w	r6, r6, #15
 8010f9c:	ed9a 5a00 	vldr	s10, [sl]
 8010fa0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010fa4:	ed96 6a00 	vldr	s12, [r6]
 8010fa8:	eee3 7a23 	vfma.f32	s15, s6, s7
 8010fac:	eee4 7a24 	vfma.f32	s15, s8, s9
 8010fb0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010fb4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010fb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010fbc:	d1a2      	bne.n	8010f04 <ai_dict4_dot_array_f32+0x28>
 8010fbe:	4449      	add	r1, r9
 8010fc0:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8010fc4:	459c      	cmp	ip, r3
 8010fc6:	d92d      	bls.n	8011024 <ai_dict4_dot_array_f32+0x148>
 8010fc8:	f10c 0c07 	add.w	ip, ip, #7
 8010fcc:	f103 0508 	add.w	r5, r3, #8
 8010fd0:	f103 0810 	add.w	r8, r3, #16
 8010fd4:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8010fd8:	ebac 0c05 	sub.w	ip, ip, r5
 8010fdc:	f02c 0407 	bic.w	r4, ip, #7
 8010fe0:	44a0      	add	r8, r4
 8010fe2:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8010fe6:	3508      	adds	r5, #8
 8010fe8:	ed55 5a03 	vldr	s11, [r5, #-12]
 8010fec:	f004 060f 	and.w	r6, r4, #15
 8010ff0:	0924      	lsrs	r4, r4, #4
 8010ff2:	ed55 6a04 	vldr	s13, [r5, #-16]
 8010ff6:	45a8      	cmp	r8, r5
 8010ff8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010ffc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8011000:	edd6 7a00 	vldr	s15, [r6]
 8011004:	ed94 6a00 	vldr	s12, [r4]
 8011008:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801100c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011010:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011014:	d1e5      	bne.n	8010fe2 <ai_dict4_dot_array_f32+0x106>
 8011016:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 801101a:	f10c 0c01 	add.w	ip, ip, #1
 801101e:	4461      	add	r1, ip
 8011020:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8011024:	07fc      	lsls	r4, r7, #31
 8011026:	d509      	bpl.n	801103c <ai_dict4_dot_array_f32+0x160>
 8011028:	7809      	ldrb	r1, [r1, #0]
 801102a:	edd3 7a00 	vldr	s15, [r3]
 801102e:	090b      	lsrs	r3, r1, #4
 8011030:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011034:	edd2 6a00 	vldr	s13, [r2]
 8011038:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801103c:	edd0 7a00 	vldr	s15, [r0]
 8011040:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011044:	ed80 7a00 	vstr	s14, [r0]
 8011048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801104c:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8011054 <ai_dict4_dot_array_f32+0x178>
 8011050:	e7b8      	b.n	8010fc4 <ai_dict4_dot_array_f32+0xe8>
 8011052:	bf00      	nop
 8011054:	00000000 	.word	0x00000000

08011058 <forward_dense>:
 8011058:	6942      	ldr	r2, [r0, #20]
 801105a:	8813      	ldrh	r3, [r2, #0]
 801105c:	2b00      	cmp	r3, #0
 801105e:	f000 81c8 	beq.w	80113f2 <forward_dense+0x39a>
 8011062:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011066:	ed2d 8b08 	vpush	{d8-d11}
 801106a:	6851      	ldr	r1, [r2, #4]
 801106c:	b091      	sub	sp, #68	; 0x44
 801106e:	684d      	ldr	r5, [r1, #4]
 8011070:	b105      	cbz	r5, 8011074 <forward_dense+0x1c>
 8011072:	682d      	ldr	r5, [r5, #0]
 8011074:	2b01      	cmp	r3, #1
 8011076:	f240 81b9 	bls.w	80113ec <forward_dense+0x394>
 801107a:	690a      	ldr	r2, [r1, #16]
 801107c:	b102      	cbz	r2, 8011080 <forward_dense+0x28>
 801107e:	6812      	ldr	r2, [r2, #0]
 8011080:	2b02      	cmp	r3, #2
 8011082:	f000 81b8 	beq.w	80113f6 <forward_dense+0x39e>
 8011086:	69cb      	ldr	r3, [r1, #28]
 8011088:	2b00      	cmp	r3, #0
 801108a:	f000 8209 	beq.w	80114a0 <forward_dense+0x448>
 801108e:	6818      	ldr	r0, [r3, #0]
 8011090:	9008      	str	r0, [sp, #32]
 8011092:	f111 0018 	adds.w	r0, r1, #24
 8011096:	f000 81dc 	beq.w	8011452 <forward_dense+0x3fa>
 801109a:	8b09      	ldrh	r1, [r1, #24]
 801109c:	2901      	cmp	r1, #1
 801109e:	f240 81fc 	bls.w	801149a <forward_dense+0x442>
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	f000 81d7 	beq.w	8011456 <forward_dense+0x3fe>
 80110a8:	685b      	ldr	r3, [r3, #4]
 80110aa:	9306      	str	r3, [sp, #24]
 80110ac:	9b08      	ldr	r3, [sp, #32]
 80110ae:	68d6      	ldr	r6, [r2, #12]
 80110b0:	699b      	ldr	r3, [r3, #24]
 80110b2:	68b0      	ldr	r0, [r6, #8]
 80110b4:	681f      	ldr	r7, [r3, #0]
 80110b6:	68f4      	ldr	r4, [r6, #12]
 80110b8:	f3c7 1ec6 	ubfx	lr, r7, #7, #7
 80110bc:	f3c7 5c41 	ubfx	ip, r7, #21, #2
 80110c0:	f3c7 4743 	ubfx	r7, r7, #17, #4
 80110c4:	fb04 f000 	mul.w	r0, r4, r0
 80110c8:	fa4e f10c 	asr.w	r1, lr, ip
 80110cc:	2f04      	cmp	r7, #4
 80110ce:	9007      	str	r0, [sp, #28]
 80110d0:	910b      	str	r1, [sp, #44]	; 0x2c
 80110d2:	68e9      	ldr	r1, [r5, #12]
 80110d4:	6870      	ldr	r0, [r6, #4]
 80110d6:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80110da:	f000 81db 	beq.w	8011494 <forward_dense+0x43c>
 80110de:	2f08      	cmp	r7, #8
 80110e0:	f000 81d8 	beq.w	8011494 <forward_dense+0x43c>
 80110e4:	f04f 0a00 	mov.w	sl, #0
 80110e8:	6992      	ldr	r2, [r2, #24]
 80110ea:	0080      	lsls	r0, r0, #2
 80110ec:	69a9      	ldr	r1, [r5, #24]
 80110ee:	6894      	ldr	r4, [r2, #8]
 80110f0:	9a08      	ldr	r2, [sp, #32]
 80110f2:	9009      	str	r0, [sp, #36]	; 0x24
 80110f4:	1826      	adds	r6, r4, r0
 80110f6:	6952      	ldr	r2, [r2, #20]
 80110f8:	9404      	str	r4, [sp, #16]
 80110fa:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80110fe:	9a07      	ldr	r2, [sp, #28]
 8011100:	688f      	ldr	r7, [r1, #8]
 8011102:	2a00      	cmp	r2, #0
 8011104:	f000 81c1 	beq.w	801148a <forward_dense+0x432>
 8011108:	f1a8 0210 	sub.w	r2, r8, #16
 801110c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8011110:	689d      	ldr	r5, [r3, #8]
 8011112:	0912      	lsrs	r2, r2, #4
 8011114:	910a      	str	r1, [sp, #40]	; 0x28
 8011116:	2100      	movs	r1, #0
 8011118:	9b06      	ldr	r3, [sp, #24]
 801111a:	3201      	adds	r2, #1
 801111c:	eddf 2acf 	vldr	s5, [pc, #828]	; 801145c <forward_dense+0x404>
 8011120:	9105      	str	r1, [sp, #20]
 8011122:	f008 010f 	and.w	r1, r8, #15
 8011126:	0192      	lsls	r2, r2, #6
 8011128:	910d      	str	r1, [sp, #52]	; 0x34
 801112a:	920c      	str	r2, [sp, #48]	; 0x30
 801112c:	2b00      	cmp	r3, #0
 801112e:	d042      	beq.n	80111b6 <forward_dense+0x15e>
 8011130:	699b      	ldr	r3, [r3, #24]
 8011132:	689c      	ldr	r4, [r3, #8]
 8011134:	9b04      	ldr	r3, [sp, #16]
 8011136:	f1ba 0f00 	cmp.w	sl, #0
 801113a:	d041      	beq.n	80111c0 <forward_dense+0x168>
 801113c:	42b3      	cmp	r3, r6
 801113e:	d229      	bcs.n	8011194 <forward_dense+0x13c>
 8011140:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011142:	469b      	mov	fp, r3
 8011144:	ab0f      	add	r3, sp, #60	; 0x3c
 8011146:	2a04      	cmp	r2, #4
 8011148:	9303      	str	r3, [sp, #12]
 801114a:	4633      	mov	r3, r6
 801114c:	4646      	mov	r6, r8
 801114e:	4698      	mov	r8, r3
 8011150:	f000 8154 	beq.w	80113fc <forward_dense+0x3a4>
 8011154:	2c00      	cmp	r4, #0
 8011156:	f000 8183 	beq.w	8011460 <forward_dense+0x408>
 801115a:	f8d4 c000 	ldr.w	ip, [r4]
 801115e:	463b      	mov	r3, r7
 8011160:	4629      	mov	r1, r5
 8011162:	9600      	str	r6, [sp, #0]
 8011164:	4652      	mov	r2, sl
 8011166:	9803      	ldr	r0, [sp, #12]
 8011168:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 801116c:	f7ff fc86 	bl	8010a7c <ai_dict8_dot_array_f32>
 8011170:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011172:	3404      	adds	r4, #4
 8011174:	444d      	add	r5, r9
 8011176:	f84b 3b04 	str.w	r3, [fp], #4
 801117a:	45c3      	cmp	fp, r8
 801117c:	d3ea      	bcc.n	8011154 <forward_dense+0xfc>
 801117e:	4643      	mov	r3, r8
 8011180:	46b0      	mov	r8, r6
 8011182:	461e      	mov	r6, r3
 8011184:	9a04      	ldr	r2, [sp, #16]
 8011186:	43d3      	mvns	r3, r2
 8011188:	4433      	add	r3, r6
 801118a:	f023 0303 	bic.w	r3, r3, #3
 801118e:	3304      	adds	r3, #4
 8011190:	18d3      	adds	r3, r2, r3
 8011192:	9304      	str	r3, [sp, #16]
 8011194:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011196:	9b05      	ldr	r3, [sp, #20]
 8011198:	4417      	add	r7, r2
 801119a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801119c:	3301      	adds	r3, #1
 801119e:	4416      	add	r6, r2
 80111a0:	9a07      	ldr	r2, [sp, #28]
 80111a2:	9305      	str	r3, [sp, #20]
 80111a4:	4293      	cmp	r3, r2
 80111a6:	f000 8170 	beq.w	801148a <forward_dense+0x432>
 80111aa:	9b08      	ldr	r3, [sp, #32]
 80111ac:	699b      	ldr	r3, [r3, #24]
 80111ae:	689d      	ldr	r5, [r3, #8]
 80111b0:	9b06      	ldr	r3, [sp, #24]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d1bc      	bne.n	8011130 <forward_dense+0xd8>
 80111b6:	461c      	mov	r4, r3
 80111b8:	9b04      	ldr	r3, [sp, #16]
 80111ba:	f1ba 0f00 	cmp.w	sl, #0
 80111be:	d1bd      	bne.n	801113c <forward_dense+0xe4>
 80111c0:	42b3      	cmp	r3, r6
 80111c2:	d2e7      	bcs.n	8011194 <forward_dense+0x13c>
 80111c4:	4618      	mov	r0, r3
 80111c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80111c8:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80111cc:	eb07 0c03 	add.w	ip, r7, r3
 80111d0:	469e      	mov	lr, r3
 80111d2:	2c00      	cmp	r4, #0
 80111d4:	f000 80fe 	beq.w	80113d4 <forward_dense+0x37c>
 80111d8:	f1b8 0f0f 	cmp.w	r8, #15
 80111dc:	ed94 6a00 	vldr	s12, [r4]
 80111e0:	f104 0404 	add.w	r4, r4, #4
 80111e4:	f240 80fc 	bls.w	80113e0 <forward_dense+0x388>
 80111e8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80111ec:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80111f0:	4641      	mov	r1, r8
 80111f2:	eddf 6a9a 	vldr	s13, [pc, #616]	; 801145c <forward_dense+0x404>
 80111f6:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 80111fa:	3910      	subs	r1, #16
 80111fc:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8011200:	3240      	adds	r2, #64	; 0x40
 8011202:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 8011206:	290f      	cmp	r1, #15
 8011208:	ee67 7a27 	vmul.f32	s15, s14, s15
 801120c:	ed12 7a20 	vldr	s14, [r2, #-128]	; 0xffffff80
 8011210:	ed12 2a1e 	vldr	s4, [r2, #-120]	; 0xffffff88
 8011214:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8011218:	ed13 3a1e 	vldr	s6, [r3, #-120]	; 0xffffff88
 801121c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011220:	ed52 3a1d 	vldr	s7, [r2, #-116]	; 0xffffff8c
 8011224:	ed13 4a1d 	vldr	s8, [r3, #-116]	; 0xffffff8c
 8011228:	ed52 4a1c 	vldr	s9, [r2, #-112]	; 0xffffff90
 801122c:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 8011230:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8011234:	ed12 7a1b 	vldr	s14, [r2, #-108]	; 0xffffff94
 8011238:	eee2 7a03 	vfma.f32	s15, s4, s6
 801123c:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 8011240:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 8011244:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 8011248:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 801124c:	ed53 9a18 	vldr	s19, [r3, #-96]	; 0xffffffa0
 8011250:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 8011254:	eee3 7a84 	vfma.f32	s15, s7, s8
 8011258:	ed53 8a17 	vldr	s17, [r3, #-92]	; 0xffffffa4
 801125c:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 8011260:	ed13 0a16 	vldr	s0, [r3, #-88]	; 0xffffffa8
 8011264:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 8011268:	ed12 1a15 	vldr	s2, [r2, #-84]	; 0xffffffac
 801126c:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 8011270:	eee4 7a85 	vfma.f32	s15, s9, s10
 8011274:	ed13 2a14 	vldr	s4, [r3, #-80]	; 0xffffffb0
 8011278:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 801127c:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 8011280:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 8011284:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 8011288:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 801128c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011290:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 8011294:	ed12 7a11 	vldr	s14, [r2, #-68]	; 0xffffffbc
 8011298:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 801129c:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80112a0:	eee9 7a89 	vfma.f32	s15, s19, s18
 80112a4:	eee8 7a88 	vfma.f32	s15, s17, s16
 80112a8:	eee0 7a20 	vfma.f32	s15, s0, s1
 80112ac:	eee1 7a21 	vfma.f32	s15, s2, s3
 80112b0:	eee2 7a03 	vfma.f32	s15, s4, s6
 80112b4:	eee3 7a84 	vfma.f32	s15, s7, s8
 80112b8:	eee4 7a85 	vfma.f32	s15, s9, s10
 80112bc:	eee5 7a87 	vfma.f32	s15, s11, s14
 80112c0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80112c4:	d897      	bhi.n	80111f6 <forward_dense+0x19e>
 80112c6:	eb05 010e 	add.w	r1, r5, lr
 80112ca:	465b      	mov	r3, fp
 80112cc:	4662      	mov	r2, ip
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d075      	beq.n	80113be <forward_dense+0x366>
 80112d2:	ed91 7a00 	vldr	s14, [r1]
 80112d6:	2b01      	cmp	r3, #1
 80112d8:	edd2 7a00 	vldr	s15, [r2]
 80112dc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80112e0:	d06d      	beq.n	80113be <forward_dense+0x366>
 80112e2:	ed91 7a01 	vldr	s14, [r1, #4]
 80112e6:	2b02      	cmp	r3, #2
 80112e8:	edd2 7a01 	vldr	s15, [r2, #4]
 80112ec:	eee7 6a27 	vfma.f32	s13, s14, s15
 80112f0:	d065      	beq.n	80113be <forward_dense+0x366>
 80112f2:	ed91 7a02 	vldr	s14, [r1, #8]
 80112f6:	2b03      	cmp	r3, #3
 80112f8:	edd2 7a02 	vldr	s15, [r2, #8]
 80112fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011300:	d05d      	beq.n	80113be <forward_dense+0x366>
 8011302:	ed91 7a03 	vldr	s14, [r1, #12]
 8011306:	2b04      	cmp	r3, #4
 8011308:	edd2 7a03 	vldr	s15, [r2, #12]
 801130c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011310:	d055      	beq.n	80113be <forward_dense+0x366>
 8011312:	ed91 7a04 	vldr	s14, [r1, #16]
 8011316:	2b05      	cmp	r3, #5
 8011318:	edd2 7a04 	vldr	s15, [r2, #16]
 801131c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011320:	d04d      	beq.n	80113be <forward_dense+0x366>
 8011322:	ed91 7a05 	vldr	s14, [r1, #20]
 8011326:	2b06      	cmp	r3, #6
 8011328:	edd2 7a05 	vldr	s15, [r2, #20]
 801132c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011330:	d045      	beq.n	80113be <forward_dense+0x366>
 8011332:	ed91 7a06 	vldr	s14, [r1, #24]
 8011336:	2b07      	cmp	r3, #7
 8011338:	edd2 7a06 	vldr	s15, [r2, #24]
 801133c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011340:	d03d      	beq.n	80113be <forward_dense+0x366>
 8011342:	ed91 7a07 	vldr	s14, [r1, #28]
 8011346:	2b08      	cmp	r3, #8
 8011348:	edd2 7a07 	vldr	s15, [r2, #28]
 801134c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011350:	d035      	beq.n	80113be <forward_dense+0x366>
 8011352:	ed91 7a08 	vldr	s14, [r1, #32]
 8011356:	2b09      	cmp	r3, #9
 8011358:	edd2 7a08 	vldr	s15, [r2, #32]
 801135c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011360:	d02d      	beq.n	80113be <forward_dense+0x366>
 8011362:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8011366:	2b0a      	cmp	r3, #10
 8011368:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 801136c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011370:	d025      	beq.n	80113be <forward_dense+0x366>
 8011372:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8011376:	2b0b      	cmp	r3, #11
 8011378:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 801137c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011380:	d01d      	beq.n	80113be <forward_dense+0x366>
 8011382:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8011386:	2b0c      	cmp	r3, #12
 8011388:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 801138c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011390:	d015      	beq.n	80113be <forward_dense+0x366>
 8011392:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8011396:	2b0d      	cmp	r3, #13
 8011398:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 801139c:	eee7 6a27 	vfma.f32	s13, s14, s15
 80113a0:	d00d      	beq.n	80113be <forward_dense+0x366>
 80113a2:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 80113a6:	2b0e      	cmp	r3, #14
 80113a8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80113ac:	eee7 6a27 	vfma.f32	s13, s14, s15
 80113b0:	d005      	beq.n	80113be <forward_dense+0x366>
 80113b2:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 80113b6:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80113ba:	eee7 6a27 	vfma.f32	s13, s14, s15
 80113be:	ee76 6a26 	vadd.f32	s13, s12, s13
 80113c2:	444d      	add	r5, r9
 80113c4:	ece0 6a01 	vstmia	r0!, {s13}
 80113c8:	42b0      	cmp	r0, r6
 80113ca:	f4bf aedb 	bcs.w	8011184 <forward_dense+0x12c>
 80113ce:	2c00      	cmp	r4, #0
 80113d0:	f47f af02 	bne.w	80111d8 <forward_dense+0x180>
 80113d4:	f1b8 0f0f 	cmp.w	r8, #15
 80113d8:	eeb0 6a62 	vmov.f32	s12, s5
 80113dc:	f63f af04 	bhi.w	80111e8 <forward_dense+0x190>
 80113e0:	4643      	mov	r3, r8
 80113e2:	4629      	mov	r1, r5
 80113e4:	463a      	mov	r2, r7
 80113e6:	eddf 6a1d 	vldr	s13, [pc, #116]	; 801145c <forward_dense+0x404>
 80113ea:	e770      	b.n	80112ce <forward_dense+0x276>
 80113ec:	2300      	movs	r3, #0
 80113ee:	685b      	ldr	r3, [r3, #4]
 80113f0:	deff      	udf	#255	; 0xff
 80113f2:	685b      	ldr	r3, [r3, #4]
 80113f4:	deff      	udf	#255	; 0xff
 80113f6:	2300      	movs	r3, #0
 80113f8:	685b      	ldr	r3, [r3, #4]
 80113fa:	deff      	udf	#255	; 0xff
 80113fc:	b1a4      	cbz	r4, 8011428 <forward_dense+0x3d0>
 80113fe:	f8d4 c000 	ldr.w	ip, [r4]
 8011402:	463b      	mov	r3, r7
 8011404:	4629      	mov	r1, r5
 8011406:	9600      	str	r6, [sp, #0]
 8011408:	4652      	mov	r2, sl
 801140a:	9803      	ldr	r0, [sp, #12]
 801140c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8011410:	f7ff fd64 	bl	8010edc <ai_dict4_dot_array_f32>
 8011414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011416:	3404      	adds	r4, #4
 8011418:	444d      	add	r5, r9
 801141a:	f84b 3b04 	str.w	r3, [fp], #4
 801141e:	45c3      	cmp	fp, r8
 8011420:	f4bf aead 	bcs.w	801117e <forward_dense+0x126>
 8011424:	2c00      	cmp	r4, #0
 8011426:	d1ea      	bne.n	80113fe <forward_dense+0x3a6>
 8011428:	4634      	mov	r4, r6
 801142a:	4646      	mov	r6, r8
 801142c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011430:	463b      	mov	r3, r7
 8011432:	4629      	mov	r1, r5
 8011434:	9400      	str	r4, [sp, #0]
 8011436:	4652      	mov	r2, sl
 8011438:	4640      	mov	r0, r8
 801143a:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 801143e:	f7ff fd4d 	bl	8010edc <ai_dict4_dot_array_f32>
 8011442:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011444:	444d      	add	r5, r9
 8011446:	f84b 3b04 	str.w	r3, [fp], #4
 801144a:	45b3      	cmp	fp, r6
 801144c:	d3f0      	bcc.n	8011430 <forward_dense+0x3d8>
 801144e:	46a0      	mov	r8, r4
 8011450:	e698      	b.n	8011184 <forward_dense+0x12c>
 8011452:	9006      	str	r0, [sp, #24]
 8011454:	e62a      	b.n	80110ac <forward_dense+0x54>
 8011456:	9306      	str	r3, [sp, #24]
 8011458:	e628      	b.n	80110ac <forward_dense+0x54>
 801145a:	bf00      	nop
 801145c:	00000000 	.word	0x00000000
 8011460:	4634      	mov	r4, r6
 8011462:	4646      	mov	r6, r8
 8011464:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011468:	463b      	mov	r3, r7
 801146a:	4629      	mov	r1, r5
 801146c:	9400      	str	r4, [sp, #0]
 801146e:	4652      	mov	r2, sl
 8011470:	4640      	mov	r0, r8
 8011472:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 8011476:	f7ff fb01 	bl	8010a7c <ai_dict8_dot_array_f32>
 801147a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801147c:	444d      	add	r5, r9
 801147e:	f84b 3b04 	str.w	r3, [fp], #4
 8011482:	45b3      	cmp	fp, r6
 8011484:	d3f0      	bcc.n	8011468 <forward_dense+0x410>
 8011486:	46a0      	mov	r8, r4
 8011488:	e67c      	b.n	8011184 <forward_dense+0x12c>
 801148a:	b011      	add	sp, #68	; 0x44
 801148c:	ecbd 8b08 	vpop	{d8-d11}
 8011490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011494:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8011498:	e626      	b.n	80110e8 <forward_dense+0x90>
 801149a:	2300      	movs	r3, #0
 801149c:	9306      	str	r3, [sp, #24]
 801149e:	e605      	b.n	80110ac <forward_dense+0x54>
 80114a0:	9308      	str	r3, [sp, #32]
 80114a2:	e5f6      	b.n	8011092 <forward_dense+0x3a>

080114a4 <nl_func_relu_generic_array_f32>:
 80114a4:	b470      	push	{r4, r5, r6}
 80114a6:	edd3 6a02 	vldr	s13, [r3, #8]
 80114aa:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 80114ae:	6880      	ldr	r0, [r0, #8]
 80114b0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80114b4:	4414      	add	r4, r2
 80114b6:	688d      	ldr	r5, [r1, #8]
 80114b8:	00a4      	lsls	r4, r4, #2
 80114ba:	ed93 7a00 	vldr	s14, [r3]
 80114be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114c2:	ed93 6a01 	vldr	s12, [r3, #4]
 80114c6:	eb00 0204 	add.w	r2, r0, r4
 80114ca:	442c      	add	r4, r5
 80114cc:	d420      	bmi.n	8011510 <nl_func_relu_generic_array_f32+0x6c>
 80114ce:	42ac      	cmp	r4, r5
 80114d0:	d33b      	bcc.n	801154a <nl_func_relu_generic_array_f32+0xa6>
 80114d2:	1d23      	adds	r3, r4, #4
 80114d4:	3204      	adds	r2, #4
 80114d6:	e010      	b.n	80114fa <nl_func_relu_generic_array_f32+0x56>
 80114d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80114dc:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80114e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114e4:	dd01      	ble.n	80114ea <nl_func_relu_generic_array_f32+0x46>
 80114e6:	ee65 7a86 	vmul.f32	s15, s11, s12
 80114ea:	f1a3 0408 	sub.w	r4, r3, #8
 80114ee:	ed62 7a01 	vstmdb	r2!, {s15}
 80114f2:	4603      	mov	r3, r0
 80114f4:	6888      	ldr	r0, [r1, #8]
 80114f6:	4284      	cmp	r4, r0
 80114f8:	d327      	bcc.n	801154a <nl_func_relu_generic_array_f32+0xa6>
 80114fa:	ed53 7a01 	vldr	s15, [r3, #-4]
 80114fe:	1f18      	subs	r0, r3, #4
 8011500:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011508:	dce6      	bgt.n	80114d8 <nl_func_relu_generic_array_f32+0x34>
 801150a:	eef0 7a66 	vmov.f32	s15, s13
 801150e:	e7ec      	b.n	80114ea <nl_func_relu_generic_array_f32+0x46>
 8011510:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8011514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011518:	d019      	beq.n	801154e <nl_func_relu_generic_array_f32+0xaa>
 801151a:	42ac      	cmp	r4, r5
 801151c:	d315      	bcc.n	801154a <nl_func_relu_generic_array_f32+0xa6>
 801151e:	1d23      	adds	r3, r4, #4
 8011520:	3204      	adds	r2, #4
 8011522:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011526:	1f18      	subs	r0, r3, #4
 8011528:	f1a3 0508 	sub.w	r5, r3, #8
 801152c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011530:	4603      	mov	r3, r0
 8011532:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801153a:	ee66 6a86 	vmul.f32	s13, s13, s12
 801153e:	d51c      	bpl.n	801157a <nl_func_relu_generic_array_f32+0xd6>
 8011540:	ed62 6a01 	vstmdb	r2!, {s13}
 8011544:	6888      	ldr	r0, [r1, #8]
 8011546:	42a8      	cmp	r0, r5
 8011548:	d9eb      	bls.n	8011522 <nl_func_relu_generic_array_f32+0x7e>
 801154a:	bc70      	pop	{r4, r5, r6}
 801154c:	4770      	bx	lr
 801154e:	42ac      	cmp	r4, r5
 8011550:	d3fb      	bcc.n	801154a <nl_func_relu_generic_array_f32+0xa6>
 8011552:	1d23      	adds	r3, r4, #4
 8011554:	3204      	adds	r2, #4
 8011556:	2600      	movs	r6, #0
 8011558:	ed53 7a01 	vldr	s15, [r3, #-4]
 801155c:	1f18      	subs	r0, r3, #4
 801155e:	f1a3 0508 	sub.w	r5, r3, #8
 8011562:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011566:	4603      	mov	r3, r0
 8011568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801156c:	d80b      	bhi.n	8011586 <nl_func_relu_generic_array_f32+0xe2>
 801156e:	ed62 7a01 	vstmdb	r2!, {s15}
 8011572:	6888      	ldr	r0, [r1, #8]
 8011574:	42a8      	cmp	r0, r5
 8011576:	d9ef      	bls.n	8011558 <nl_func_relu_generic_array_f32+0xb4>
 8011578:	e7e7      	b.n	801154a <nl_func_relu_generic_array_f32+0xa6>
 801157a:	ed62 7a01 	vstmdb	r2!, {s15}
 801157e:	6888      	ldr	r0, [r1, #8]
 8011580:	42a8      	cmp	r0, r5
 8011582:	d9ce      	bls.n	8011522 <nl_func_relu_generic_array_f32+0x7e>
 8011584:	e7e1      	b.n	801154a <nl_func_relu_generic_array_f32+0xa6>
 8011586:	f842 6d04 	str.w	r6, [r2, #-4]!
 801158a:	6888      	ldr	r0, [r1, #8]
 801158c:	42a8      	cmp	r0, r5
 801158e:	d9e3      	bls.n	8011558 <nl_func_relu_generic_array_f32+0xb4>
 8011590:	e7db      	b.n	801154a <nl_func_relu_generic_array_f32+0xa6>
 8011592:	bf00      	nop

08011594 <forward_relu>:
 8011594:	6942      	ldr	r2, [r0, #20]
 8011596:	8813      	ldrh	r3, [r2, #0]
 8011598:	b33b      	cbz	r3, 80115ea <forward_relu+0x56>
 801159a:	b4f0      	push	{r4, r5, r6, r7}
 801159c:	6852      	ldr	r2, [r2, #4]
 801159e:	6855      	ldr	r5, [r2, #4]
 80115a0:	b105      	cbz	r5, 80115a4 <forward_relu+0x10>
 80115a2:	682d      	ldr	r5, [r5, #0]
 80115a4:	2b01      	cmp	r3, #1
 80115a6:	d91d      	bls.n	80115e4 <forward_relu+0x50>
 80115a8:	6913      	ldr	r3, [r2, #16]
 80115aa:	b103      	cbz	r3, 80115ae <forward_relu+0x1a>
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	6982      	ldr	r2, [r0, #24]
 80115b0:	68ac      	ldr	r4, [r5, #8]
 80115b2:	6998      	ldr	r0, [r3, #24]
 80115b4:	f3c4 2417 	ubfx	r4, r4, #8, #24
 80115b8:	69a9      	ldr	r1, [r5, #24]
 80115ba:	2a00      	cmp	r2, #0
 80115bc:	d040      	beq.n	8011640 <forward_relu+0xac>
 80115be:	e9d2 6301 	ldrd	r6, r3, [r2, #4]
 80115c2:	2e01      	cmp	r6, #1
 80115c4:	d013      	beq.n	80115ee <forward_relu+0x5a>
 80115c6:	2c00      	cmp	r4, #0
 80115c8:	d068      	beq.n	801169c <forward_relu+0x108>
 80115ca:	68ee      	ldr	r6, [r5, #12]
 80115cc:	2201      	movs	r2, #1
 80115ce:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80115d2:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80115d6:	42a6      	cmp	r6, r4
 80115d8:	fb05 f202 	mul.w	r2, r5, r2
 80115dc:	d1f9      	bne.n	80115d2 <forward_relu+0x3e>
 80115de:	bcf0      	pop	{r4, r5, r6, r7}
 80115e0:	f7ff bf60 	b.w	80114a4 <nl_func_relu_generic_array_f32>
 80115e4:	2300      	movs	r3, #0
 80115e6:	685b      	ldr	r3, [r3, #4]
 80115e8:	deff      	udf	#255	; 0xff
 80115ea:	685b      	ldr	r3, [r3, #4]
 80115ec:	deff      	udf	#255	; 0xff
 80115ee:	6887      	ldr	r7, [r0, #8]
 80115f0:	688a      	ldr	r2, [r1, #8]
 80115f2:	ed93 7a00 	vldr	s14, [r3]
 80115f6:	b184      	cbz	r4, 801161a <forward_relu+0x86>
 80115f8:	68ed      	ldr	r5, [r5, #12]
 80115fa:	4630      	mov	r0, r6
 80115fc:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8011600:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8011604:	42a5      	cmp	r5, r4
 8011606:	fb03 f000 	mul.w	r0, r3, r0
 801160a:	d1f9      	bne.n	8011600 <forward_relu+0x6c>
 801160c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011610:	4403      	add	r3, r0
 8011612:	009b      	lsls	r3, r3, #2
 8011614:	18d2      	adds	r2, r2, r3
 8011616:	441f      	add	r7, r3
 8011618:	d236      	bcs.n	8011688 <forward_relu+0xf4>
 801161a:	1d13      	adds	r3, r2, #4
 801161c:	2500      	movs	r5, #0
 801161e:	1d3a      	adds	r2, r7, #4
 8011620:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011624:	1f18      	subs	r0, r3, #4
 8011626:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801162a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801162e:	d82d      	bhi.n	801168c <forward_relu+0xf8>
 8011630:	ed62 7a01 	vstmdb	r2!, {s15}
 8011634:	3b08      	subs	r3, #8
 8011636:	688c      	ldr	r4, [r1, #8]
 8011638:	429c      	cmp	r4, r3
 801163a:	d825      	bhi.n	8011688 <forward_relu+0xf4>
 801163c:	4603      	mov	r3, r0
 801163e:	e7ef      	b.n	8011620 <forward_relu+0x8c>
 8011640:	6880      	ldr	r0, [r0, #8]
 8011642:	688b      	ldr	r3, [r1, #8]
 8011644:	b184      	cbz	r4, 8011668 <forward_relu+0xd4>
 8011646:	68ee      	ldr	r6, [r5, #12]
 8011648:	2201      	movs	r2, #1
 801164a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 801164e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011652:	42a6      	cmp	r6, r4
 8011654:	fb05 f202 	mul.w	r2, r5, r2
 8011658:	d1f9      	bne.n	801164e <forward_relu+0xba>
 801165a:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 801165e:	4414      	add	r4, r2
 8011660:	00a2      	lsls	r2, r4, #2
 8011662:	189b      	adds	r3, r3, r2
 8011664:	4410      	add	r0, r2
 8011666:	d20f      	bcs.n	8011688 <forward_relu+0xf4>
 8011668:	3304      	adds	r3, #4
 801166a:	3004      	adds	r0, #4
 801166c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80116a0 <forward_relu+0x10c>
 8011670:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011674:	f1a3 0208 	sub.w	r2, r3, #8
 8011678:	3b04      	subs	r3, #4
 801167a:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801167e:	ed60 7a01 	vstmdb	r0!, {s15}
 8011682:	688c      	ldr	r4, [r1, #8]
 8011684:	4294      	cmp	r4, r2
 8011686:	d9f3      	bls.n	8011670 <forward_relu+0xdc>
 8011688:	bcf0      	pop	{r4, r5, r6, r7}
 801168a:	4770      	bx	lr
 801168c:	f842 5d04 	str.w	r5, [r2, #-4]!
 8011690:	3b08      	subs	r3, #8
 8011692:	688c      	ldr	r4, [r1, #8]
 8011694:	429c      	cmp	r4, r3
 8011696:	d8f7      	bhi.n	8011688 <forward_relu+0xf4>
 8011698:	4603      	mov	r3, r0
 801169a:	e7c1      	b.n	8011620 <forward_relu+0x8c>
 801169c:	2201      	movs	r2, #1
 801169e:	e79e      	b.n	80115de <forward_relu+0x4a>
 80116a0:	00000000 	.word	0x00000000

080116a4 <forward_sm>:
 80116a4:	6942      	ldr	r2, [r0, #20]
 80116a6:	8813      	ldrh	r3, [r2, #0]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	f000 8085 	beq.w	80117b8 <forward_sm+0x114>
 80116ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116b2:	ed2d 8b04 	vpush	{d8-d9}
 80116b6:	6852      	ldr	r2, [r2, #4]
 80116b8:	b085      	sub	sp, #20
 80116ba:	6855      	ldr	r5, [r2, #4]
 80116bc:	b105      	cbz	r5, 80116c0 <forward_sm+0x1c>
 80116be:	682d      	ldr	r5, [r5, #0]
 80116c0:	2b01      	cmp	r3, #1
 80116c2:	d971      	bls.n	80117a8 <forward_sm+0x104>
 80116c4:	6913      	ldr	r3, [r2, #16]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d06c      	beq.n	80117a4 <forward_sm+0x100>
 80116ca:	681f      	ldr	r7, [r3, #0]
 80116cc:	68e9      	ldr	r1, [r5, #12]
 80116ce:	68fa      	ldr	r2, [r7, #12]
 80116d0:	68ab      	ldr	r3, [r5, #8]
 80116d2:	6850      	ldr	r0, [r2, #4]
 80116d4:	0a1b      	lsrs	r3, r3, #8
 80116d6:	684a      	ldr	r2, [r1, #4]
 80116d8:	9201      	str	r2, [sp, #4]
 80116da:	d06f      	beq.n	80117bc <forward_sm+0x118>
 80116dc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80116e0:	2401      	movs	r4, #1
 80116e2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80116e6:	4299      	cmp	r1, r3
 80116e8:	fb02 f404 	mul.w	r4, r2, r4
 80116ec:	d1f9      	bne.n	80116e2 <forward_sm+0x3e>
 80116ee:	9901      	ldr	r1, [sp, #4]
 80116f0:	69ae      	ldr	r6, [r5, #24]
 80116f2:	1a63      	subs	r3, r4, r1
 80116f4:	f8d7 9018 	ldr.w	r9, [r7, #24]
 80116f8:	1a24      	subs	r4, r4, r0
 80116fa:	68b5      	ldr	r5, [r6, #8]
 80116fc:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8011700:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8011704:	68f3      	ldr	r3, [r6, #12]
 8011706:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801170a:	429d      	cmp	r5, r3
 801170c:	d340      	bcc.n	8011790 <forward_sm+0xec>
 801170e:	008b      	lsls	r3, r1, #2
 8011710:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8011714:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8011718:	9300      	str	r3, [sp, #0]
 801171a:	425b      	negs	r3, r3
 801171c:	f1c8 0200 	rsb	r2, r8, #0
 8011720:	9302      	str	r3, [sp, #8]
 8011722:	9203      	str	r2, [sp, #12]
 8011724:	9b01      	ldr	r3, [sp, #4]
 8011726:	60b5      	str	r5, [r6, #8]
 8011728:	2b01      	cmp	r3, #1
 801172a:	f8c9 4008 	str.w	r4, [r9, #8]
 801172e:	68b2      	ldr	r2, [r6, #8]
 8011730:	ed92 8a00 	vldr	s16, [r2]
 8011734:	d93b      	bls.n	80117ae <forward_sm+0x10a>
 8011736:	9900      	ldr	r1, [sp, #0]
 8011738:	1d13      	adds	r3, r2, #4
 801173a:	1857      	adds	r7, r2, r1
 801173c:	ecf3 7a01 	vldmia	r3!, {s15}
 8011740:	429f      	cmp	r7, r3
 8011742:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 8011746:	d1f9      	bne.n	801173c <forward_sm+0x98>
 8011748:	4692      	mov	sl, r2
 801174a:	46a3      	mov	fp, r4
 801174c:	46a0      	mov	r8, r4
 801174e:	eddf 8a1d 	vldr	s17, [pc, #116]	; 80117c4 <forward_sm+0x120>
 8011752:	ecba 0a01 	vldmia	sl!, {s0}
 8011756:	ee30 0a48 	vsub.f32	s0, s0, s16
 801175a:	f002 ffd9 	bl	8014710 <expf>
 801175e:	4557      	cmp	r7, sl
 8011760:	eca8 0a01 	vstmia	r8!, {s0}
 8011764:	ee78 8a80 	vadd.f32	s17, s17, s0
 8011768:	d1f3      	bne.n	8011752 <forward_sm+0xae>
 801176a:	ee89 7a28 	vdiv.f32	s14, s18, s17
 801176e:	9b00      	ldr	r3, [sp, #0]
 8011770:	18e2      	adds	r2, r4, r3
 8011772:	eddb 7a00 	vldr	s15, [fp]
 8011776:	ee67 7a27 	vmul.f32	s15, s14, s15
 801177a:	eceb 7a01 	vstmia	fp!, {s15}
 801177e:	455a      	cmp	r2, fp
 8011780:	d1f7      	bne.n	8011772 <forward_sm+0xce>
 8011782:	9b02      	ldr	r3, [sp, #8]
 8011784:	9a03      	ldr	r2, [sp, #12]
 8011786:	441d      	add	r5, r3
 8011788:	68f3      	ldr	r3, [r6, #12]
 801178a:	4414      	add	r4, r2
 801178c:	429d      	cmp	r5, r3
 801178e:	d2c9      	bcs.n	8011724 <forward_sm+0x80>
 8011790:	60b3      	str	r3, [r6, #8]
 8011792:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8011796:	f8c9 3008 	str.w	r3, [r9, #8]
 801179a:	b005      	add	sp, #20
 801179c:	ecbd 8b04 	vpop	{d8-d9}
 80117a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117a4:	68db      	ldr	r3, [r3, #12]
 80117a6:	deff      	udf	#255	; 0xff
 80117a8:	2300      	movs	r3, #0
 80117aa:	685b      	ldr	r3, [r3, #4]
 80117ac:	deff      	udf	#255	; 0xff
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d0e7      	beq.n	8011782 <forward_sm+0xde>
 80117b2:	9b00      	ldr	r3, [sp, #0]
 80117b4:	18d7      	adds	r7, r2, r3
 80117b6:	e7c7      	b.n	8011748 <forward_sm+0xa4>
 80117b8:	685b      	ldr	r3, [r3, #4]
 80117ba:	deff      	udf	#255	; 0xff
 80117bc:	2401      	movs	r4, #1
 80117be:	4611      	mov	r1, r2
 80117c0:	e796      	b.n	80116f0 <forward_sm+0x4c>
 80117c2:	bf00      	nop
 80117c4:	00000000 	.word	0x00000000

080117c8 <ai_check_custom_types>:
 80117c8:	4b13      	ldr	r3, [pc, #76]	; (8011818 <ai_check_custom_types+0x50>)
 80117ca:	b082      	sub	sp, #8
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	9301      	str	r3, [sp, #4]
 80117d0:	b118      	cbz	r0, 80117da <ai_check_custom_types+0x12>
 80117d2:	7803      	ldrb	r3, [r0, #0]
 80117d4:	2b03      	cmp	r3, #3
 80117d6:	d002      	beq.n	80117de <ai_check_custom_types+0x16>
 80117d8:	2000      	movs	r0, #0
 80117da:	b002      	add	sp, #8
 80117dc:	4770      	bx	lr
 80117de:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80117e2:	4293      	cmp	r3, r2
 80117e4:	d004      	beq.n	80117f0 <ai_check_custom_types+0x28>
 80117e6:	2001      	movs	r0, #1
 80117e8:	f080 0001 	eor.w	r0, r0, #1
 80117ec:	b002      	add	sp, #8
 80117ee:	4770      	bx	lr
 80117f0:	7842      	ldrb	r2, [r0, #1]
 80117f2:	3001      	adds	r0, #1
 80117f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80117f8:	429a      	cmp	r2, r3
 80117fa:	d1f4      	bne.n	80117e6 <ai_check_custom_types+0x1e>
 80117fc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8011800:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011804:	429a      	cmp	r2, r3
 8011806:	d1ee      	bne.n	80117e6 <ai_check_custom_types+0x1e>
 8011808:	7842      	ldrb	r2, [r0, #1]
 801180a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801180e:	429a      	cmp	r2, r3
 8011810:	d1e9      	bne.n	80117e6 <ai_check_custom_types+0x1e>
 8011812:	2000      	movs	r0, #0
 8011814:	e7e8      	b.n	80117e8 <ai_check_custom_types+0x20>
 8011816:	bf00      	nop
 8011818:	08014de0 	.word	0x08014de0

0801181c <ai_layers_forward_all>:
 801181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801181e:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8011820:	4604      	mov	r4, r0
 8011822:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8011824:	b316      	cbz	r6, 801186c <ai_layers_forward_all+0x50>
 8011826:	b1c5      	cbz	r5, 801185a <ai_layers_forward_all+0x3e>
 8011828:	6545      	str	r5, [r0, #84]	; 0x54
 801182a:	4629      	mov	r1, r5
 801182c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 801182e:	2001      	movs	r0, #1
 8011830:	47b0      	blx	r6
 8011832:	2700      	movs	r7, #0
 8011834:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8011836:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8011838:	2002      	movs	r0, #2
 801183a:	47b0      	blx	r6
 801183c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 801183e:	692b      	ldr	r3, [r5, #16]
 8011840:	4628      	mov	r0, r5
 8011842:	4798      	blx	r3
 8011844:	68eb      	ldr	r3, [r5, #12]
 8011846:	2003      	movs	r0, #3
 8011848:	429d      	cmp	r5, r3
 801184a:	4619      	mov	r1, r3
 801184c:	d006      	beq.n	801185c <ai_layers_forward_all+0x40>
 801184e:	6563      	str	r3, [r4, #84]	; 0x54
 8011850:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8011852:	47b0      	blx	r6
 8011854:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8011856:	2900      	cmp	r1, #0
 8011858:	d1ed      	bne.n	8011836 <ai_layers_forward_all+0x1a>
 801185a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801185c:	2100      	movs	r1, #0
 801185e:	6567      	str	r7, [r4, #84]	; 0x54
 8011860:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8011862:	47b0      	blx	r6
 8011864:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8011866:	2900      	cmp	r1, #0
 8011868:	d1e5      	bne.n	8011836 <ai_layers_forward_all+0x1a>
 801186a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801186c:	2d00      	cmp	r5, #0
 801186e:	d0f4      	beq.n	801185a <ai_layers_forward_all+0x3e>
 8011870:	6545      	str	r5, [r0, #84]	; 0x54
 8011872:	692b      	ldr	r3, [r5, #16]
 8011874:	4628      	mov	r0, r5
 8011876:	4798      	blx	r3
 8011878:	68eb      	ldr	r3, [r5, #12]
 801187a:	42ab      	cmp	r3, r5
 801187c:	461d      	mov	r5, r3
 801187e:	d003      	beq.n	8011888 <ai_layers_forward_all+0x6c>
 8011880:	6563      	str	r3, [r4, #84]	; 0x54
 8011882:	2b00      	cmp	r3, #0
 8011884:	d1f5      	bne.n	8011872 <ai_layers_forward_all+0x56>
 8011886:	e7e8      	b.n	801185a <ai_layers_forward_all+0x3e>
 8011888:	2300      	movs	r3, #0
 801188a:	6563      	str	r3, [r4, #84]	; 0x54
 801188c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801188e:	bf00      	nop

08011890 <ai_array_to_buffer_fmt>:
 8011890:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8011894:	2b02      	cmp	r3, #2
 8011896:	d01f      	beq.n	80118d8 <ai_array_to_buffer_fmt+0x48>
 8011898:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 801189c:	4a1b      	ldr	r2, [pc, #108]	; (801190c <ai_array_to_buffer_fmt+0x7c>)
 801189e:	4293      	cmp	r3, r2
 80118a0:	d00a      	beq.n	80118b8 <ai_array_to_buffer_fmt+0x28>
 80118a2:	dc0d      	bgt.n	80118c0 <ai_array_to_buffer_fmt+0x30>
 80118a4:	4a1a      	ldr	r2, [pc, #104]	; (8011910 <ai_array_to_buffer_fmt+0x80>)
 80118a6:	4293      	cmp	r3, r2
 80118a8:	d006      	beq.n	80118b8 <ai_array_to_buffer_fmt+0x28>
 80118aa:	dd1d      	ble.n	80118e8 <ai_array_to_buffer_fmt+0x58>
 80118ac:	4a19      	ldr	r2, [pc, #100]	; (8011914 <ai_array_to_buffer_fmt+0x84>)
 80118ae:	4293      	cmp	r3, r2
 80118b0:	d002      	beq.n	80118b8 <ai_array_to_buffer_fmt+0x28>
 80118b2:	320f      	adds	r2, #15
 80118b4:	4293      	cmp	r3, r2
 80118b6:	d10d      	bne.n	80118d4 <ai_array_to_buffer_fmt+0x44>
 80118b8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80118bc:	4318      	orrs	r0, r3
 80118be:	4770      	bx	lr
 80118c0:	4a15      	ldr	r2, [pc, #84]	; (8011918 <ai_array_to_buffer_fmt+0x88>)
 80118c2:	4293      	cmp	r3, r2
 80118c4:	d0f8      	beq.n	80118b8 <ai_array_to_buffer_fmt+0x28>
 80118c6:	dd18      	ble.n	80118fa <ai_array_to_buffer_fmt+0x6a>
 80118c8:	4a14      	ldr	r2, [pc, #80]	; (801191c <ai_array_to_buffer_fmt+0x8c>)
 80118ca:	4293      	cmp	r3, r2
 80118cc:	d0f4      	beq.n	80118b8 <ai_array_to_buffer_fmt+0x28>
 80118ce:	4a14      	ldr	r2, [pc, #80]	; (8011920 <ai_array_to_buffer_fmt+0x90>)
 80118d0:	4293      	cmp	r3, r2
 80118d2:	d0f1      	beq.n	80118b8 <ai_array_to_buffer_fmt+0x28>
 80118d4:	2340      	movs	r3, #64	; 0x40
 80118d6:	e7ef      	b.n	80118b8 <ai_array_to_buffer_fmt+0x28>
 80118d8:	4b12      	ldr	r3, [pc, #72]	; (8011924 <ai_array_to_buffer_fmt+0x94>)
 80118da:	4003      	ands	r3, r0
 80118dc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80118e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80118e4:	4318      	orrs	r0, r3
 80118e6:	4770      	bx	lr
 80118e8:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 80118ec:	4293      	cmp	r3, r2
 80118ee:	d0e3      	beq.n	80118b8 <ai_array_to_buffer_fmt+0x28>
 80118f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80118f4:	4293      	cmp	r3, r2
 80118f6:	d0df      	beq.n	80118b8 <ai_array_to_buffer_fmt+0x28>
 80118f8:	e7ec      	b.n	80118d4 <ai_array_to_buffer_fmt+0x44>
 80118fa:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80118fe:	4293      	cmp	r3, r2
 8011900:	d0da      	beq.n	80118b8 <ai_array_to_buffer_fmt+0x28>
 8011902:	3207      	adds	r2, #7
 8011904:	4293      	cmp	r3, r2
 8011906:	d0d7      	beq.n	80118b8 <ai_array_to_buffer_fmt+0x28>
 8011908:	e7e4      	b.n	80118d4 <ai_array_to_buffer_fmt+0x44>
 801190a:	bf00      	nop
 801190c:	00840040 	.word	0x00840040
 8011910:	00040447 	.word	0x00040447
 8011914:	00040840 	.word	0x00040840
 8011918:	00840840 	.word	0x00840840
 801191c:	0084084f 	.word	0x0084084f
 8011920:	01821040 	.word	0x01821040
 8011924:	00803fff 	.word	0x00803fff

08011928 <ai_array_get_byte_size>:
 8011928:	b1e1      	cbz	r1, 8011964 <ai_array_get_byte_size+0x3c>
 801192a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801192e:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8011932:	b410      	push	{r4}
 8011934:	f3c0 3482 	ubfx	r4, r0, #14, #3
 8011938:	f3c0 4043 	ubfx	r0, r0, #17, #4
 801193c:	4423      	add	r3, r4
 801193e:	2804      	cmp	r0, #4
 8011940:	fb01 f103 	mul.w	r1, r1, r3
 8011944:	f101 0107 	add.w	r1, r1, #7
 8011948:	f021 0107 	bic.w	r1, r1, #7
 801194c:	fa21 f102 	lsr.w	r1, r1, r2
 8011950:	d00a      	beq.n	8011968 <ai_array_get_byte_size+0x40>
 8011952:	2808      	cmp	r0, #8
 8011954:	d101      	bne.n	801195a <ai_array_get_byte_size+0x32>
 8011956:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801195a:	3107      	adds	r1, #7
 801195c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011960:	08c8      	lsrs	r0, r1, #3
 8011962:	4770      	bx	lr
 8011964:	4608      	mov	r0, r1
 8011966:	4770      	bx	lr
 8011968:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 801196c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011970:	3107      	adds	r1, #7
 8011972:	08c8      	lsrs	r0, r1, #3
 8011974:	4770      	bx	lr
 8011976:	bf00      	nop

08011978 <__errno>:
 8011978:	4b01      	ldr	r3, [pc, #4]	; (8011980 <__errno+0x8>)
 801197a:	6818      	ldr	r0, [r3, #0]
 801197c:	4770      	bx	lr
 801197e:	bf00      	nop
 8011980:	200006a4 	.word	0x200006a4

08011984 <__libc_init_array>:
 8011984:	b570      	push	{r4, r5, r6, lr}
 8011986:	4d0d      	ldr	r5, [pc, #52]	; (80119bc <__libc_init_array+0x38>)
 8011988:	4c0d      	ldr	r4, [pc, #52]	; (80119c0 <__libc_init_array+0x3c>)
 801198a:	1b64      	subs	r4, r4, r5
 801198c:	10a4      	asrs	r4, r4, #2
 801198e:	2600      	movs	r6, #0
 8011990:	42a6      	cmp	r6, r4
 8011992:	d109      	bne.n	80119a8 <__libc_init_array+0x24>
 8011994:	4d0b      	ldr	r5, [pc, #44]	; (80119c4 <__libc_init_array+0x40>)
 8011996:	4c0c      	ldr	r4, [pc, #48]	; (80119c8 <__libc_init_array+0x44>)
 8011998:	f003 f81c 	bl	80149d4 <_init>
 801199c:	1b64      	subs	r4, r4, r5
 801199e:	10a4      	asrs	r4, r4, #2
 80119a0:	2600      	movs	r6, #0
 80119a2:	42a6      	cmp	r6, r4
 80119a4:	d105      	bne.n	80119b2 <__libc_init_array+0x2e>
 80119a6:	bd70      	pop	{r4, r5, r6, pc}
 80119a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80119ac:	4798      	blx	r3
 80119ae:	3601      	adds	r6, #1
 80119b0:	e7ee      	b.n	8011990 <__libc_init_array+0xc>
 80119b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80119b6:	4798      	blx	r3
 80119b8:	3601      	adds	r6, #1
 80119ba:	e7f2      	b.n	80119a2 <__libc_init_array+0x1e>
 80119bc:	0802415c 	.word	0x0802415c
 80119c0:	0802415c 	.word	0x0802415c
 80119c4:	0802415c 	.word	0x0802415c
 80119c8:	08024160 	.word	0x08024160

080119cc <malloc>:
 80119cc:	4b02      	ldr	r3, [pc, #8]	; (80119d8 <malloc+0xc>)
 80119ce:	4601      	mov	r1, r0
 80119d0:	6818      	ldr	r0, [r3, #0]
 80119d2:	f000 b871 	b.w	8011ab8 <_malloc_r>
 80119d6:	bf00      	nop
 80119d8:	200006a4 	.word	0x200006a4

080119dc <free>:
 80119dc:	4b02      	ldr	r3, [pc, #8]	; (80119e8 <free+0xc>)
 80119de:	4601      	mov	r1, r0
 80119e0:	6818      	ldr	r0, [r3, #0]
 80119e2:	f000 b819 	b.w	8011a18 <_free_r>
 80119e6:	bf00      	nop
 80119e8:	200006a4 	.word	0x200006a4

080119ec <memcpy>:
 80119ec:	440a      	add	r2, r1
 80119ee:	4291      	cmp	r1, r2
 80119f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80119f4:	d100      	bne.n	80119f8 <memcpy+0xc>
 80119f6:	4770      	bx	lr
 80119f8:	b510      	push	{r4, lr}
 80119fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80119fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011a02:	4291      	cmp	r1, r2
 8011a04:	d1f9      	bne.n	80119fa <memcpy+0xe>
 8011a06:	bd10      	pop	{r4, pc}

08011a08 <memset>:
 8011a08:	4402      	add	r2, r0
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	4293      	cmp	r3, r2
 8011a0e:	d100      	bne.n	8011a12 <memset+0xa>
 8011a10:	4770      	bx	lr
 8011a12:	f803 1b01 	strb.w	r1, [r3], #1
 8011a16:	e7f9      	b.n	8011a0c <memset+0x4>

08011a18 <_free_r>:
 8011a18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011a1a:	2900      	cmp	r1, #0
 8011a1c:	d048      	beq.n	8011ab0 <_free_r+0x98>
 8011a1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a22:	9001      	str	r0, [sp, #4]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	f1a1 0404 	sub.w	r4, r1, #4
 8011a2a:	bfb8      	it	lt
 8011a2c:	18e4      	addlt	r4, r4, r3
 8011a2e:	f001 fbb3 	bl	8013198 <__malloc_lock>
 8011a32:	4a20      	ldr	r2, [pc, #128]	; (8011ab4 <_free_r+0x9c>)
 8011a34:	9801      	ldr	r0, [sp, #4]
 8011a36:	6813      	ldr	r3, [r2, #0]
 8011a38:	4615      	mov	r5, r2
 8011a3a:	b933      	cbnz	r3, 8011a4a <_free_r+0x32>
 8011a3c:	6063      	str	r3, [r4, #4]
 8011a3e:	6014      	str	r4, [r2, #0]
 8011a40:	b003      	add	sp, #12
 8011a42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a46:	f001 bbad 	b.w	80131a4 <__malloc_unlock>
 8011a4a:	42a3      	cmp	r3, r4
 8011a4c:	d90b      	bls.n	8011a66 <_free_r+0x4e>
 8011a4e:	6821      	ldr	r1, [r4, #0]
 8011a50:	1862      	adds	r2, r4, r1
 8011a52:	4293      	cmp	r3, r2
 8011a54:	bf04      	itt	eq
 8011a56:	681a      	ldreq	r2, [r3, #0]
 8011a58:	685b      	ldreq	r3, [r3, #4]
 8011a5a:	6063      	str	r3, [r4, #4]
 8011a5c:	bf04      	itt	eq
 8011a5e:	1852      	addeq	r2, r2, r1
 8011a60:	6022      	streq	r2, [r4, #0]
 8011a62:	602c      	str	r4, [r5, #0]
 8011a64:	e7ec      	b.n	8011a40 <_free_r+0x28>
 8011a66:	461a      	mov	r2, r3
 8011a68:	685b      	ldr	r3, [r3, #4]
 8011a6a:	b10b      	cbz	r3, 8011a70 <_free_r+0x58>
 8011a6c:	42a3      	cmp	r3, r4
 8011a6e:	d9fa      	bls.n	8011a66 <_free_r+0x4e>
 8011a70:	6811      	ldr	r1, [r2, #0]
 8011a72:	1855      	adds	r5, r2, r1
 8011a74:	42a5      	cmp	r5, r4
 8011a76:	d10b      	bne.n	8011a90 <_free_r+0x78>
 8011a78:	6824      	ldr	r4, [r4, #0]
 8011a7a:	4421      	add	r1, r4
 8011a7c:	1854      	adds	r4, r2, r1
 8011a7e:	42a3      	cmp	r3, r4
 8011a80:	6011      	str	r1, [r2, #0]
 8011a82:	d1dd      	bne.n	8011a40 <_free_r+0x28>
 8011a84:	681c      	ldr	r4, [r3, #0]
 8011a86:	685b      	ldr	r3, [r3, #4]
 8011a88:	6053      	str	r3, [r2, #4]
 8011a8a:	4421      	add	r1, r4
 8011a8c:	6011      	str	r1, [r2, #0]
 8011a8e:	e7d7      	b.n	8011a40 <_free_r+0x28>
 8011a90:	d902      	bls.n	8011a98 <_free_r+0x80>
 8011a92:	230c      	movs	r3, #12
 8011a94:	6003      	str	r3, [r0, #0]
 8011a96:	e7d3      	b.n	8011a40 <_free_r+0x28>
 8011a98:	6825      	ldr	r5, [r4, #0]
 8011a9a:	1961      	adds	r1, r4, r5
 8011a9c:	428b      	cmp	r3, r1
 8011a9e:	bf04      	itt	eq
 8011aa0:	6819      	ldreq	r1, [r3, #0]
 8011aa2:	685b      	ldreq	r3, [r3, #4]
 8011aa4:	6063      	str	r3, [r4, #4]
 8011aa6:	bf04      	itt	eq
 8011aa8:	1949      	addeq	r1, r1, r5
 8011aaa:	6021      	streq	r1, [r4, #0]
 8011aac:	6054      	str	r4, [r2, #4]
 8011aae:	e7c7      	b.n	8011a40 <_free_r+0x28>
 8011ab0:	b003      	add	sp, #12
 8011ab2:	bd30      	pop	{r4, r5, pc}
 8011ab4:	20000934 	.word	0x20000934

08011ab8 <_malloc_r>:
 8011ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aba:	1ccd      	adds	r5, r1, #3
 8011abc:	f025 0503 	bic.w	r5, r5, #3
 8011ac0:	3508      	adds	r5, #8
 8011ac2:	2d0c      	cmp	r5, #12
 8011ac4:	bf38      	it	cc
 8011ac6:	250c      	movcc	r5, #12
 8011ac8:	2d00      	cmp	r5, #0
 8011aca:	4606      	mov	r6, r0
 8011acc:	db01      	blt.n	8011ad2 <_malloc_r+0x1a>
 8011ace:	42a9      	cmp	r1, r5
 8011ad0:	d903      	bls.n	8011ada <_malloc_r+0x22>
 8011ad2:	230c      	movs	r3, #12
 8011ad4:	6033      	str	r3, [r6, #0]
 8011ad6:	2000      	movs	r0, #0
 8011ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ada:	f001 fb5d 	bl	8013198 <__malloc_lock>
 8011ade:	4921      	ldr	r1, [pc, #132]	; (8011b64 <_malloc_r+0xac>)
 8011ae0:	680a      	ldr	r2, [r1, #0]
 8011ae2:	4614      	mov	r4, r2
 8011ae4:	b99c      	cbnz	r4, 8011b0e <_malloc_r+0x56>
 8011ae6:	4f20      	ldr	r7, [pc, #128]	; (8011b68 <_malloc_r+0xb0>)
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	b923      	cbnz	r3, 8011af6 <_malloc_r+0x3e>
 8011aec:	4621      	mov	r1, r4
 8011aee:	4630      	mov	r0, r6
 8011af0:	f000 fca6 	bl	8012440 <_sbrk_r>
 8011af4:	6038      	str	r0, [r7, #0]
 8011af6:	4629      	mov	r1, r5
 8011af8:	4630      	mov	r0, r6
 8011afa:	f000 fca1 	bl	8012440 <_sbrk_r>
 8011afe:	1c43      	adds	r3, r0, #1
 8011b00:	d123      	bne.n	8011b4a <_malloc_r+0x92>
 8011b02:	230c      	movs	r3, #12
 8011b04:	6033      	str	r3, [r6, #0]
 8011b06:	4630      	mov	r0, r6
 8011b08:	f001 fb4c 	bl	80131a4 <__malloc_unlock>
 8011b0c:	e7e3      	b.n	8011ad6 <_malloc_r+0x1e>
 8011b0e:	6823      	ldr	r3, [r4, #0]
 8011b10:	1b5b      	subs	r3, r3, r5
 8011b12:	d417      	bmi.n	8011b44 <_malloc_r+0x8c>
 8011b14:	2b0b      	cmp	r3, #11
 8011b16:	d903      	bls.n	8011b20 <_malloc_r+0x68>
 8011b18:	6023      	str	r3, [r4, #0]
 8011b1a:	441c      	add	r4, r3
 8011b1c:	6025      	str	r5, [r4, #0]
 8011b1e:	e004      	b.n	8011b2a <_malloc_r+0x72>
 8011b20:	6863      	ldr	r3, [r4, #4]
 8011b22:	42a2      	cmp	r2, r4
 8011b24:	bf0c      	ite	eq
 8011b26:	600b      	streq	r3, [r1, #0]
 8011b28:	6053      	strne	r3, [r2, #4]
 8011b2a:	4630      	mov	r0, r6
 8011b2c:	f001 fb3a 	bl	80131a4 <__malloc_unlock>
 8011b30:	f104 000b 	add.w	r0, r4, #11
 8011b34:	1d23      	adds	r3, r4, #4
 8011b36:	f020 0007 	bic.w	r0, r0, #7
 8011b3a:	1ac2      	subs	r2, r0, r3
 8011b3c:	d0cc      	beq.n	8011ad8 <_malloc_r+0x20>
 8011b3e:	1a1b      	subs	r3, r3, r0
 8011b40:	50a3      	str	r3, [r4, r2]
 8011b42:	e7c9      	b.n	8011ad8 <_malloc_r+0x20>
 8011b44:	4622      	mov	r2, r4
 8011b46:	6864      	ldr	r4, [r4, #4]
 8011b48:	e7cc      	b.n	8011ae4 <_malloc_r+0x2c>
 8011b4a:	1cc4      	adds	r4, r0, #3
 8011b4c:	f024 0403 	bic.w	r4, r4, #3
 8011b50:	42a0      	cmp	r0, r4
 8011b52:	d0e3      	beq.n	8011b1c <_malloc_r+0x64>
 8011b54:	1a21      	subs	r1, r4, r0
 8011b56:	4630      	mov	r0, r6
 8011b58:	f000 fc72 	bl	8012440 <_sbrk_r>
 8011b5c:	3001      	adds	r0, #1
 8011b5e:	d1dd      	bne.n	8011b1c <_malloc_r+0x64>
 8011b60:	e7cf      	b.n	8011b02 <_malloc_r+0x4a>
 8011b62:	bf00      	nop
 8011b64:	20000934 	.word	0x20000934
 8011b68:	20000938 	.word	0x20000938

08011b6c <__cvt>:
 8011b6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011b70:	ec55 4b10 	vmov	r4, r5, d0
 8011b74:	2d00      	cmp	r5, #0
 8011b76:	460e      	mov	r6, r1
 8011b78:	4619      	mov	r1, r3
 8011b7a:	462b      	mov	r3, r5
 8011b7c:	bfbb      	ittet	lt
 8011b7e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011b82:	461d      	movlt	r5, r3
 8011b84:	2300      	movge	r3, #0
 8011b86:	232d      	movlt	r3, #45	; 0x2d
 8011b88:	700b      	strb	r3, [r1, #0]
 8011b8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011b8c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011b90:	4691      	mov	r9, r2
 8011b92:	f023 0820 	bic.w	r8, r3, #32
 8011b96:	bfbc      	itt	lt
 8011b98:	4622      	movlt	r2, r4
 8011b9a:	4614      	movlt	r4, r2
 8011b9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011ba0:	d005      	beq.n	8011bae <__cvt+0x42>
 8011ba2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011ba6:	d100      	bne.n	8011baa <__cvt+0x3e>
 8011ba8:	3601      	adds	r6, #1
 8011baa:	2102      	movs	r1, #2
 8011bac:	e000      	b.n	8011bb0 <__cvt+0x44>
 8011bae:	2103      	movs	r1, #3
 8011bb0:	ab03      	add	r3, sp, #12
 8011bb2:	9301      	str	r3, [sp, #4]
 8011bb4:	ab02      	add	r3, sp, #8
 8011bb6:	9300      	str	r3, [sp, #0]
 8011bb8:	ec45 4b10 	vmov	d0, r4, r5
 8011bbc:	4653      	mov	r3, sl
 8011bbe:	4632      	mov	r2, r6
 8011bc0:	f000 fcfa 	bl	80125b8 <_dtoa_r>
 8011bc4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011bc8:	4607      	mov	r7, r0
 8011bca:	d102      	bne.n	8011bd2 <__cvt+0x66>
 8011bcc:	f019 0f01 	tst.w	r9, #1
 8011bd0:	d022      	beq.n	8011c18 <__cvt+0xac>
 8011bd2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011bd6:	eb07 0906 	add.w	r9, r7, r6
 8011bda:	d110      	bne.n	8011bfe <__cvt+0x92>
 8011bdc:	783b      	ldrb	r3, [r7, #0]
 8011bde:	2b30      	cmp	r3, #48	; 0x30
 8011be0:	d10a      	bne.n	8011bf8 <__cvt+0x8c>
 8011be2:	2200      	movs	r2, #0
 8011be4:	2300      	movs	r3, #0
 8011be6:	4620      	mov	r0, r4
 8011be8:	4629      	mov	r1, r5
 8011bea:	f7ee ff9d 	bl	8000b28 <__aeabi_dcmpeq>
 8011bee:	b918      	cbnz	r0, 8011bf8 <__cvt+0x8c>
 8011bf0:	f1c6 0601 	rsb	r6, r6, #1
 8011bf4:	f8ca 6000 	str.w	r6, [sl]
 8011bf8:	f8da 3000 	ldr.w	r3, [sl]
 8011bfc:	4499      	add	r9, r3
 8011bfe:	2200      	movs	r2, #0
 8011c00:	2300      	movs	r3, #0
 8011c02:	4620      	mov	r0, r4
 8011c04:	4629      	mov	r1, r5
 8011c06:	f7ee ff8f 	bl	8000b28 <__aeabi_dcmpeq>
 8011c0a:	b108      	cbz	r0, 8011c10 <__cvt+0xa4>
 8011c0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8011c10:	2230      	movs	r2, #48	; 0x30
 8011c12:	9b03      	ldr	r3, [sp, #12]
 8011c14:	454b      	cmp	r3, r9
 8011c16:	d307      	bcc.n	8011c28 <__cvt+0xbc>
 8011c18:	9b03      	ldr	r3, [sp, #12]
 8011c1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011c1c:	1bdb      	subs	r3, r3, r7
 8011c1e:	4638      	mov	r0, r7
 8011c20:	6013      	str	r3, [r2, #0]
 8011c22:	b004      	add	sp, #16
 8011c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c28:	1c59      	adds	r1, r3, #1
 8011c2a:	9103      	str	r1, [sp, #12]
 8011c2c:	701a      	strb	r2, [r3, #0]
 8011c2e:	e7f0      	b.n	8011c12 <__cvt+0xa6>

08011c30 <__exponent>:
 8011c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011c32:	4603      	mov	r3, r0
 8011c34:	2900      	cmp	r1, #0
 8011c36:	bfb8      	it	lt
 8011c38:	4249      	neglt	r1, r1
 8011c3a:	f803 2b02 	strb.w	r2, [r3], #2
 8011c3e:	bfb4      	ite	lt
 8011c40:	222d      	movlt	r2, #45	; 0x2d
 8011c42:	222b      	movge	r2, #43	; 0x2b
 8011c44:	2909      	cmp	r1, #9
 8011c46:	7042      	strb	r2, [r0, #1]
 8011c48:	dd2a      	ble.n	8011ca0 <__exponent+0x70>
 8011c4a:	f10d 0407 	add.w	r4, sp, #7
 8011c4e:	46a4      	mov	ip, r4
 8011c50:	270a      	movs	r7, #10
 8011c52:	46a6      	mov	lr, r4
 8011c54:	460a      	mov	r2, r1
 8011c56:	fb91 f6f7 	sdiv	r6, r1, r7
 8011c5a:	fb07 1516 	mls	r5, r7, r6, r1
 8011c5e:	3530      	adds	r5, #48	; 0x30
 8011c60:	2a63      	cmp	r2, #99	; 0x63
 8011c62:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011c66:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011c6a:	4631      	mov	r1, r6
 8011c6c:	dcf1      	bgt.n	8011c52 <__exponent+0x22>
 8011c6e:	3130      	adds	r1, #48	; 0x30
 8011c70:	f1ae 0502 	sub.w	r5, lr, #2
 8011c74:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011c78:	1c44      	adds	r4, r0, #1
 8011c7a:	4629      	mov	r1, r5
 8011c7c:	4561      	cmp	r1, ip
 8011c7e:	d30a      	bcc.n	8011c96 <__exponent+0x66>
 8011c80:	f10d 0209 	add.w	r2, sp, #9
 8011c84:	eba2 020e 	sub.w	r2, r2, lr
 8011c88:	4565      	cmp	r5, ip
 8011c8a:	bf88      	it	hi
 8011c8c:	2200      	movhi	r2, #0
 8011c8e:	4413      	add	r3, r2
 8011c90:	1a18      	subs	r0, r3, r0
 8011c92:	b003      	add	sp, #12
 8011c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c9a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011c9e:	e7ed      	b.n	8011c7c <__exponent+0x4c>
 8011ca0:	2330      	movs	r3, #48	; 0x30
 8011ca2:	3130      	adds	r1, #48	; 0x30
 8011ca4:	7083      	strb	r3, [r0, #2]
 8011ca6:	70c1      	strb	r1, [r0, #3]
 8011ca8:	1d03      	adds	r3, r0, #4
 8011caa:	e7f1      	b.n	8011c90 <__exponent+0x60>

08011cac <_printf_float>:
 8011cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cb0:	ed2d 8b02 	vpush	{d8}
 8011cb4:	b08d      	sub	sp, #52	; 0x34
 8011cb6:	460c      	mov	r4, r1
 8011cb8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011cbc:	4616      	mov	r6, r2
 8011cbe:	461f      	mov	r7, r3
 8011cc0:	4605      	mov	r5, r0
 8011cc2:	f001 fa65 	bl	8013190 <_localeconv_r>
 8011cc6:	f8d0 a000 	ldr.w	sl, [r0]
 8011cca:	4650      	mov	r0, sl
 8011ccc:	f7ee faaa 	bl	8000224 <strlen>
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	930a      	str	r3, [sp, #40]	; 0x28
 8011cd4:	6823      	ldr	r3, [r4, #0]
 8011cd6:	9305      	str	r3, [sp, #20]
 8011cd8:	f8d8 3000 	ldr.w	r3, [r8]
 8011cdc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011ce0:	3307      	adds	r3, #7
 8011ce2:	f023 0307 	bic.w	r3, r3, #7
 8011ce6:	f103 0208 	add.w	r2, r3, #8
 8011cea:	f8c8 2000 	str.w	r2, [r8]
 8011cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cf2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011cf6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011cfa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011cfe:	9307      	str	r3, [sp, #28]
 8011d00:	f8cd 8018 	str.w	r8, [sp, #24]
 8011d04:	ee08 0a10 	vmov	s16, r0
 8011d08:	4b9f      	ldr	r3, [pc, #636]	; (8011f88 <_printf_float+0x2dc>)
 8011d0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011d0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011d12:	f7ee ff3b 	bl	8000b8c <__aeabi_dcmpun>
 8011d16:	bb88      	cbnz	r0, 8011d7c <_printf_float+0xd0>
 8011d18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011d1c:	4b9a      	ldr	r3, [pc, #616]	; (8011f88 <_printf_float+0x2dc>)
 8011d1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011d22:	f7ee ff15 	bl	8000b50 <__aeabi_dcmple>
 8011d26:	bb48      	cbnz	r0, 8011d7c <_printf_float+0xd0>
 8011d28:	2200      	movs	r2, #0
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	4640      	mov	r0, r8
 8011d2e:	4649      	mov	r1, r9
 8011d30:	f7ee ff04 	bl	8000b3c <__aeabi_dcmplt>
 8011d34:	b110      	cbz	r0, 8011d3c <_printf_float+0x90>
 8011d36:	232d      	movs	r3, #45	; 0x2d
 8011d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d3c:	4b93      	ldr	r3, [pc, #588]	; (8011f8c <_printf_float+0x2e0>)
 8011d3e:	4894      	ldr	r0, [pc, #592]	; (8011f90 <_printf_float+0x2e4>)
 8011d40:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011d44:	bf94      	ite	ls
 8011d46:	4698      	movls	r8, r3
 8011d48:	4680      	movhi	r8, r0
 8011d4a:	2303      	movs	r3, #3
 8011d4c:	6123      	str	r3, [r4, #16]
 8011d4e:	9b05      	ldr	r3, [sp, #20]
 8011d50:	f023 0204 	bic.w	r2, r3, #4
 8011d54:	6022      	str	r2, [r4, #0]
 8011d56:	f04f 0900 	mov.w	r9, #0
 8011d5a:	9700      	str	r7, [sp, #0]
 8011d5c:	4633      	mov	r3, r6
 8011d5e:	aa0b      	add	r2, sp, #44	; 0x2c
 8011d60:	4621      	mov	r1, r4
 8011d62:	4628      	mov	r0, r5
 8011d64:	f000 f9d8 	bl	8012118 <_printf_common>
 8011d68:	3001      	adds	r0, #1
 8011d6a:	f040 8090 	bne.w	8011e8e <_printf_float+0x1e2>
 8011d6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d72:	b00d      	add	sp, #52	; 0x34
 8011d74:	ecbd 8b02 	vpop	{d8}
 8011d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d7c:	4642      	mov	r2, r8
 8011d7e:	464b      	mov	r3, r9
 8011d80:	4640      	mov	r0, r8
 8011d82:	4649      	mov	r1, r9
 8011d84:	f7ee ff02 	bl	8000b8c <__aeabi_dcmpun>
 8011d88:	b140      	cbz	r0, 8011d9c <_printf_float+0xf0>
 8011d8a:	464b      	mov	r3, r9
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	bfbc      	itt	lt
 8011d90:	232d      	movlt	r3, #45	; 0x2d
 8011d92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011d96:	487f      	ldr	r0, [pc, #508]	; (8011f94 <_printf_float+0x2e8>)
 8011d98:	4b7f      	ldr	r3, [pc, #508]	; (8011f98 <_printf_float+0x2ec>)
 8011d9a:	e7d1      	b.n	8011d40 <_printf_float+0x94>
 8011d9c:	6863      	ldr	r3, [r4, #4]
 8011d9e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011da2:	9206      	str	r2, [sp, #24]
 8011da4:	1c5a      	adds	r2, r3, #1
 8011da6:	d13f      	bne.n	8011e28 <_printf_float+0x17c>
 8011da8:	2306      	movs	r3, #6
 8011daa:	6063      	str	r3, [r4, #4]
 8011dac:	9b05      	ldr	r3, [sp, #20]
 8011dae:	6861      	ldr	r1, [r4, #4]
 8011db0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011db4:	2300      	movs	r3, #0
 8011db6:	9303      	str	r3, [sp, #12]
 8011db8:	ab0a      	add	r3, sp, #40	; 0x28
 8011dba:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011dbe:	ab09      	add	r3, sp, #36	; 0x24
 8011dc0:	ec49 8b10 	vmov	d0, r8, r9
 8011dc4:	9300      	str	r3, [sp, #0]
 8011dc6:	6022      	str	r2, [r4, #0]
 8011dc8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011dcc:	4628      	mov	r0, r5
 8011dce:	f7ff fecd 	bl	8011b6c <__cvt>
 8011dd2:	9b06      	ldr	r3, [sp, #24]
 8011dd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011dd6:	2b47      	cmp	r3, #71	; 0x47
 8011dd8:	4680      	mov	r8, r0
 8011dda:	d108      	bne.n	8011dee <_printf_float+0x142>
 8011ddc:	1cc8      	adds	r0, r1, #3
 8011dde:	db02      	blt.n	8011de6 <_printf_float+0x13a>
 8011de0:	6863      	ldr	r3, [r4, #4]
 8011de2:	4299      	cmp	r1, r3
 8011de4:	dd41      	ble.n	8011e6a <_printf_float+0x1be>
 8011de6:	f1ab 0b02 	sub.w	fp, fp, #2
 8011dea:	fa5f fb8b 	uxtb.w	fp, fp
 8011dee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011df2:	d820      	bhi.n	8011e36 <_printf_float+0x18a>
 8011df4:	3901      	subs	r1, #1
 8011df6:	465a      	mov	r2, fp
 8011df8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011dfc:	9109      	str	r1, [sp, #36]	; 0x24
 8011dfe:	f7ff ff17 	bl	8011c30 <__exponent>
 8011e02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e04:	1813      	adds	r3, r2, r0
 8011e06:	2a01      	cmp	r2, #1
 8011e08:	4681      	mov	r9, r0
 8011e0a:	6123      	str	r3, [r4, #16]
 8011e0c:	dc02      	bgt.n	8011e14 <_printf_float+0x168>
 8011e0e:	6822      	ldr	r2, [r4, #0]
 8011e10:	07d2      	lsls	r2, r2, #31
 8011e12:	d501      	bpl.n	8011e18 <_printf_float+0x16c>
 8011e14:	3301      	adds	r3, #1
 8011e16:	6123      	str	r3, [r4, #16]
 8011e18:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d09c      	beq.n	8011d5a <_printf_float+0xae>
 8011e20:	232d      	movs	r3, #45	; 0x2d
 8011e22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011e26:	e798      	b.n	8011d5a <_printf_float+0xae>
 8011e28:	9a06      	ldr	r2, [sp, #24]
 8011e2a:	2a47      	cmp	r2, #71	; 0x47
 8011e2c:	d1be      	bne.n	8011dac <_printf_float+0x100>
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d1bc      	bne.n	8011dac <_printf_float+0x100>
 8011e32:	2301      	movs	r3, #1
 8011e34:	e7b9      	b.n	8011daa <_printf_float+0xfe>
 8011e36:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011e3a:	d118      	bne.n	8011e6e <_printf_float+0x1c2>
 8011e3c:	2900      	cmp	r1, #0
 8011e3e:	6863      	ldr	r3, [r4, #4]
 8011e40:	dd0b      	ble.n	8011e5a <_printf_float+0x1ae>
 8011e42:	6121      	str	r1, [r4, #16]
 8011e44:	b913      	cbnz	r3, 8011e4c <_printf_float+0x1a0>
 8011e46:	6822      	ldr	r2, [r4, #0]
 8011e48:	07d0      	lsls	r0, r2, #31
 8011e4a:	d502      	bpl.n	8011e52 <_printf_float+0x1a6>
 8011e4c:	3301      	adds	r3, #1
 8011e4e:	440b      	add	r3, r1
 8011e50:	6123      	str	r3, [r4, #16]
 8011e52:	65a1      	str	r1, [r4, #88]	; 0x58
 8011e54:	f04f 0900 	mov.w	r9, #0
 8011e58:	e7de      	b.n	8011e18 <_printf_float+0x16c>
 8011e5a:	b913      	cbnz	r3, 8011e62 <_printf_float+0x1b6>
 8011e5c:	6822      	ldr	r2, [r4, #0]
 8011e5e:	07d2      	lsls	r2, r2, #31
 8011e60:	d501      	bpl.n	8011e66 <_printf_float+0x1ba>
 8011e62:	3302      	adds	r3, #2
 8011e64:	e7f4      	b.n	8011e50 <_printf_float+0x1a4>
 8011e66:	2301      	movs	r3, #1
 8011e68:	e7f2      	b.n	8011e50 <_printf_float+0x1a4>
 8011e6a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e70:	4299      	cmp	r1, r3
 8011e72:	db05      	blt.n	8011e80 <_printf_float+0x1d4>
 8011e74:	6823      	ldr	r3, [r4, #0]
 8011e76:	6121      	str	r1, [r4, #16]
 8011e78:	07d8      	lsls	r0, r3, #31
 8011e7a:	d5ea      	bpl.n	8011e52 <_printf_float+0x1a6>
 8011e7c:	1c4b      	adds	r3, r1, #1
 8011e7e:	e7e7      	b.n	8011e50 <_printf_float+0x1a4>
 8011e80:	2900      	cmp	r1, #0
 8011e82:	bfd4      	ite	le
 8011e84:	f1c1 0202 	rsble	r2, r1, #2
 8011e88:	2201      	movgt	r2, #1
 8011e8a:	4413      	add	r3, r2
 8011e8c:	e7e0      	b.n	8011e50 <_printf_float+0x1a4>
 8011e8e:	6823      	ldr	r3, [r4, #0]
 8011e90:	055a      	lsls	r2, r3, #21
 8011e92:	d407      	bmi.n	8011ea4 <_printf_float+0x1f8>
 8011e94:	6923      	ldr	r3, [r4, #16]
 8011e96:	4642      	mov	r2, r8
 8011e98:	4631      	mov	r1, r6
 8011e9a:	4628      	mov	r0, r5
 8011e9c:	47b8      	blx	r7
 8011e9e:	3001      	adds	r0, #1
 8011ea0:	d12c      	bne.n	8011efc <_printf_float+0x250>
 8011ea2:	e764      	b.n	8011d6e <_printf_float+0xc2>
 8011ea4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011ea8:	f240 80e0 	bls.w	801206c <_printf_float+0x3c0>
 8011eac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	f7ee fe38 	bl	8000b28 <__aeabi_dcmpeq>
 8011eb8:	2800      	cmp	r0, #0
 8011eba:	d034      	beq.n	8011f26 <_printf_float+0x27a>
 8011ebc:	4a37      	ldr	r2, [pc, #220]	; (8011f9c <_printf_float+0x2f0>)
 8011ebe:	2301      	movs	r3, #1
 8011ec0:	4631      	mov	r1, r6
 8011ec2:	4628      	mov	r0, r5
 8011ec4:	47b8      	blx	r7
 8011ec6:	3001      	adds	r0, #1
 8011ec8:	f43f af51 	beq.w	8011d6e <_printf_float+0xc2>
 8011ecc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011ed0:	429a      	cmp	r2, r3
 8011ed2:	db02      	blt.n	8011eda <_printf_float+0x22e>
 8011ed4:	6823      	ldr	r3, [r4, #0]
 8011ed6:	07d8      	lsls	r0, r3, #31
 8011ed8:	d510      	bpl.n	8011efc <_printf_float+0x250>
 8011eda:	ee18 3a10 	vmov	r3, s16
 8011ede:	4652      	mov	r2, sl
 8011ee0:	4631      	mov	r1, r6
 8011ee2:	4628      	mov	r0, r5
 8011ee4:	47b8      	blx	r7
 8011ee6:	3001      	adds	r0, #1
 8011ee8:	f43f af41 	beq.w	8011d6e <_printf_float+0xc2>
 8011eec:	f04f 0800 	mov.w	r8, #0
 8011ef0:	f104 091a 	add.w	r9, r4, #26
 8011ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ef6:	3b01      	subs	r3, #1
 8011ef8:	4543      	cmp	r3, r8
 8011efa:	dc09      	bgt.n	8011f10 <_printf_float+0x264>
 8011efc:	6823      	ldr	r3, [r4, #0]
 8011efe:	079b      	lsls	r3, r3, #30
 8011f00:	f100 8105 	bmi.w	801210e <_printf_float+0x462>
 8011f04:	68e0      	ldr	r0, [r4, #12]
 8011f06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f08:	4298      	cmp	r0, r3
 8011f0a:	bfb8      	it	lt
 8011f0c:	4618      	movlt	r0, r3
 8011f0e:	e730      	b.n	8011d72 <_printf_float+0xc6>
 8011f10:	2301      	movs	r3, #1
 8011f12:	464a      	mov	r2, r9
 8011f14:	4631      	mov	r1, r6
 8011f16:	4628      	mov	r0, r5
 8011f18:	47b8      	blx	r7
 8011f1a:	3001      	adds	r0, #1
 8011f1c:	f43f af27 	beq.w	8011d6e <_printf_float+0xc2>
 8011f20:	f108 0801 	add.w	r8, r8, #1
 8011f24:	e7e6      	b.n	8011ef4 <_printf_float+0x248>
 8011f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	dc39      	bgt.n	8011fa0 <_printf_float+0x2f4>
 8011f2c:	4a1b      	ldr	r2, [pc, #108]	; (8011f9c <_printf_float+0x2f0>)
 8011f2e:	2301      	movs	r3, #1
 8011f30:	4631      	mov	r1, r6
 8011f32:	4628      	mov	r0, r5
 8011f34:	47b8      	blx	r7
 8011f36:	3001      	adds	r0, #1
 8011f38:	f43f af19 	beq.w	8011d6e <_printf_float+0xc2>
 8011f3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011f40:	4313      	orrs	r3, r2
 8011f42:	d102      	bne.n	8011f4a <_printf_float+0x29e>
 8011f44:	6823      	ldr	r3, [r4, #0]
 8011f46:	07d9      	lsls	r1, r3, #31
 8011f48:	d5d8      	bpl.n	8011efc <_printf_float+0x250>
 8011f4a:	ee18 3a10 	vmov	r3, s16
 8011f4e:	4652      	mov	r2, sl
 8011f50:	4631      	mov	r1, r6
 8011f52:	4628      	mov	r0, r5
 8011f54:	47b8      	blx	r7
 8011f56:	3001      	adds	r0, #1
 8011f58:	f43f af09 	beq.w	8011d6e <_printf_float+0xc2>
 8011f5c:	f04f 0900 	mov.w	r9, #0
 8011f60:	f104 0a1a 	add.w	sl, r4, #26
 8011f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f66:	425b      	negs	r3, r3
 8011f68:	454b      	cmp	r3, r9
 8011f6a:	dc01      	bgt.n	8011f70 <_printf_float+0x2c4>
 8011f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f6e:	e792      	b.n	8011e96 <_printf_float+0x1ea>
 8011f70:	2301      	movs	r3, #1
 8011f72:	4652      	mov	r2, sl
 8011f74:	4631      	mov	r1, r6
 8011f76:	4628      	mov	r0, r5
 8011f78:	47b8      	blx	r7
 8011f7a:	3001      	adds	r0, #1
 8011f7c:	f43f aef7 	beq.w	8011d6e <_printf_float+0xc2>
 8011f80:	f109 0901 	add.w	r9, r9, #1
 8011f84:	e7ee      	b.n	8011f64 <_printf_float+0x2b8>
 8011f86:	bf00      	nop
 8011f88:	7fefffff 	.word	0x7fefffff
 8011f8c:	08023d5c 	.word	0x08023d5c
 8011f90:	08023d60 	.word	0x08023d60
 8011f94:	08023d68 	.word	0x08023d68
 8011f98:	08023d64 	.word	0x08023d64
 8011f9c:	08023d6c 	.word	0x08023d6c
 8011fa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011fa2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011fa4:	429a      	cmp	r2, r3
 8011fa6:	bfa8      	it	ge
 8011fa8:	461a      	movge	r2, r3
 8011faa:	2a00      	cmp	r2, #0
 8011fac:	4691      	mov	r9, r2
 8011fae:	dc37      	bgt.n	8012020 <_printf_float+0x374>
 8011fb0:	f04f 0b00 	mov.w	fp, #0
 8011fb4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011fb8:	f104 021a 	add.w	r2, r4, #26
 8011fbc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011fbe:	9305      	str	r3, [sp, #20]
 8011fc0:	eba3 0309 	sub.w	r3, r3, r9
 8011fc4:	455b      	cmp	r3, fp
 8011fc6:	dc33      	bgt.n	8012030 <_printf_float+0x384>
 8011fc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	db3b      	blt.n	8012048 <_printf_float+0x39c>
 8011fd0:	6823      	ldr	r3, [r4, #0]
 8011fd2:	07da      	lsls	r2, r3, #31
 8011fd4:	d438      	bmi.n	8012048 <_printf_float+0x39c>
 8011fd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011fd8:	9b05      	ldr	r3, [sp, #20]
 8011fda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011fdc:	1ad3      	subs	r3, r2, r3
 8011fde:	eba2 0901 	sub.w	r9, r2, r1
 8011fe2:	4599      	cmp	r9, r3
 8011fe4:	bfa8      	it	ge
 8011fe6:	4699      	movge	r9, r3
 8011fe8:	f1b9 0f00 	cmp.w	r9, #0
 8011fec:	dc35      	bgt.n	801205a <_printf_float+0x3ae>
 8011fee:	f04f 0800 	mov.w	r8, #0
 8011ff2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011ff6:	f104 0a1a 	add.w	sl, r4, #26
 8011ffa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011ffe:	1a9b      	subs	r3, r3, r2
 8012000:	eba3 0309 	sub.w	r3, r3, r9
 8012004:	4543      	cmp	r3, r8
 8012006:	f77f af79 	ble.w	8011efc <_printf_float+0x250>
 801200a:	2301      	movs	r3, #1
 801200c:	4652      	mov	r2, sl
 801200e:	4631      	mov	r1, r6
 8012010:	4628      	mov	r0, r5
 8012012:	47b8      	blx	r7
 8012014:	3001      	adds	r0, #1
 8012016:	f43f aeaa 	beq.w	8011d6e <_printf_float+0xc2>
 801201a:	f108 0801 	add.w	r8, r8, #1
 801201e:	e7ec      	b.n	8011ffa <_printf_float+0x34e>
 8012020:	4613      	mov	r3, r2
 8012022:	4631      	mov	r1, r6
 8012024:	4642      	mov	r2, r8
 8012026:	4628      	mov	r0, r5
 8012028:	47b8      	blx	r7
 801202a:	3001      	adds	r0, #1
 801202c:	d1c0      	bne.n	8011fb0 <_printf_float+0x304>
 801202e:	e69e      	b.n	8011d6e <_printf_float+0xc2>
 8012030:	2301      	movs	r3, #1
 8012032:	4631      	mov	r1, r6
 8012034:	4628      	mov	r0, r5
 8012036:	9205      	str	r2, [sp, #20]
 8012038:	47b8      	blx	r7
 801203a:	3001      	adds	r0, #1
 801203c:	f43f ae97 	beq.w	8011d6e <_printf_float+0xc2>
 8012040:	9a05      	ldr	r2, [sp, #20]
 8012042:	f10b 0b01 	add.w	fp, fp, #1
 8012046:	e7b9      	b.n	8011fbc <_printf_float+0x310>
 8012048:	ee18 3a10 	vmov	r3, s16
 801204c:	4652      	mov	r2, sl
 801204e:	4631      	mov	r1, r6
 8012050:	4628      	mov	r0, r5
 8012052:	47b8      	blx	r7
 8012054:	3001      	adds	r0, #1
 8012056:	d1be      	bne.n	8011fd6 <_printf_float+0x32a>
 8012058:	e689      	b.n	8011d6e <_printf_float+0xc2>
 801205a:	9a05      	ldr	r2, [sp, #20]
 801205c:	464b      	mov	r3, r9
 801205e:	4442      	add	r2, r8
 8012060:	4631      	mov	r1, r6
 8012062:	4628      	mov	r0, r5
 8012064:	47b8      	blx	r7
 8012066:	3001      	adds	r0, #1
 8012068:	d1c1      	bne.n	8011fee <_printf_float+0x342>
 801206a:	e680      	b.n	8011d6e <_printf_float+0xc2>
 801206c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801206e:	2a01      	cmp	r2, #1
 8012070:	dc01      	bgt.n	8012076 <_printf_float+0x3ca>
 8012072:	07db      	lsls	r3, r3, #31
 8012074:	d538      	bpl.n	80120e8 <_printf_float+0x43c>
 8012076:	2301      	movs	r3, #1
 8012078:	4642      	mov	r2, r8
 801207a:	4631      	mov	r1, r6
 801207c:	4628      	mov	r0, r5
 801207e:	47b8      	blx	r7
 8012080:	3001      	adds	r0, #1
 8012082:	f43f ae74 	beq.w	8011d6e <_printf_float+0xc2>
 8012086:	ee18 3a10 	vmov	r3, s16
 801208a:	4652      	mov	r2, sl
 801208c:	4631      	mov	r1, r6
 801208e:	4628      	mov	r0, r5
 8012090:	47b8      	blx	r7
 8012092:	3001      	adds	r0, #1
 8012094:	f43f ae6b 	beq.w	8011d6e <_printf_float+0xc2>
 8012098:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801209c:	2200      	movs	r2, #0
 801209e:	2300      	movs	r3, #0
 80120a0:	f7ee fd42 	bl	8000b28 <__aeabi_dcmpeq>
 80120a4:	b9d8      	cbnz	r0, 80120de <_printf_float+0x432>
 80120a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120a8:	f108 0201 	add.w	r2, r8, #1
 80120ac:	3b01      	subs	r3, #1
 80120ae:	4631      	mov	r1, r6
 80120b0:	4628      	mov	r0, r5
 80120b2:	47b8      	blx	r7
 80120b4:	3001      	adds	r0, #1
 80120b6:	d10e      	bne.n	80120d6 <_printf_float+0x42a>
 80120b8:	e659      	b.n	8011d6e <_printf_float+0xc2>
 80120ba:	2301      	movs	r3, #1
 80120bc:	4652      	mov	r2, sl
 80120be:	4631      	mov	r1, r6
 80120c0:	4628      	mov	r0, r5
 80120c2:	47b8      	blx	r7
 80120c4:	3001      	adds	r0, #1
 80120c6:	f43f ae52 	beq.w	8011d6e <_printf_float+0xc2>
 80120ca:	f108 0801 	add.w	r8, r8, #1
 80120ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120d0:	3b01      	subs	r3, #1
 80120d2:	4543      	cmp	r3, r8
 80120d4:	dcf1      	bgt.n	80120ba <_printf_float+0x40e>
 80120d6:	464b      	mov	r3, r9
 80120d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80120dc:	e6dc      	b.n	8011e98 <_printf_float+0x1ec>
 80120de:	f04f 0800 	mov.w	r8, #0
 80120e2:	f104 0a1a 	add.w	sl, r4, #26
 80120e6:	e7f2      	b.n	80120ce <_printf_float+0x422>
 80120e8:	2301      	movs	r3, #1
 80120ea:	4642      	mov	r2, r8
 80120ec:	e7df      	b.n	80120ae <_printf_float+0x402>
 80120ee:	2301      	movs	r3, #1
 80120f0:	464a      	mov	r2, r9
 80120f2:	4631      	mov	r1, r6
 80120f4:	4628      	mov	r0, r5
 80120f6:	47b8      	blx	r7
 80120f8:	3001      	adds	r0, #1
 80120fa:	f43f ae38 	beq.w	8011d6e <_printf_float+0xc2>
 80120fe:	f108 0801 	add.w	r8, r8, #1
 8012102:	68e3      	ldr	r3, [r4, #12]
 8012104:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012106:	1a5b      	subs	r3, r3, r1
 8012108:	4543      	cmp	r3, r8
 801210a:	dcf0      	bgt.n	80120ee <_printf_float+0x442>
 801210c:	e6fa      	b.n	8011f04 <_printf_float+0x258>
 801210e:	f04f 0800 	mov.w	r8, #0
 8012112:	f104 0919 	add.w	r9, r4, #25
 8012116:	e7f4      	b.n	8012102 <_printf_float+0x456>

08012118 <_printf_common>:
 8012118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801211c:	4616      	mov	r6, r2
 801211e:	4699      	mov	r9, r3
 8012120:	688a      	ldr	r2, [r1, #8]
 8012122:	690b      	ldr	r3, [r1, #16]
 8012124:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012128:	4293      	cmp	r3, r2
 801212a:	bfb8      	it	lt
 801212c:	4613      	movlt	r3, r2
 801212e:	6033      	str	r3, [r6, #0]
 8012130:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012134:	4607      	mov	r7, r0
 8012136:	460c      	mov	r4, r1
 8012138:	b10a      	cbz	r2, 801213e <_printf_common+0x26>
 801213a:	3301      	adds	r3, #1
 801213c:	6033      	str	r3, [r6, #0]
 801213e:	6823      	ldr	r3, [r4, #0]
 8012140:	0699      	lsls	r1, r3, #26
 8012142:	bf42      	ittt	mi
 8012144:	6833      	ldrmi	r3, [r6, #0]
 8012146:	3302      	addmi	r3, #2
 8012148:	6033      	strmi	r3, [r6, #0]
 801214a:	6825      	ldr	r5, [r4, #0]
 801214c:	f015 0506 	ands.w	r5, r5, #6
 8012150:	d106      	bne.n	8012160 <_printf_common+0x48>
 8012152:	f104 0a19 	add.w	sl, r4, #25
 8012156:	68e3      	ldr	r3, [r4, #12]
 8012158:	6832      	ldr	r2, [r6, #0]
 801215a:	1a9b      	subs	r3, r3, r2
 801215c:	42ab      	cmp	r3, r5
 801215e:	dc26      	bgt.n	80121ae <_printf_common+0x96>
 8012160:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012164:	1e13      	subs	r3, r2, #0
 8012166:	6822      	ldr	r2, [r4, #0]
 8012168:	bf18      	it	ne
 801216a:	2301      	movne	r3, #1
 801216c:	0692      	lsls	r2, r2, #26
 801216e:	d42b      	bmi.n	80121c8 <_printf_common+0xb0>
 8012170:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012174:	4649      	mov	r1, r9
 8012176:	4638      	mov	r0, r7
 8012178:	47c0      	blx	r8
 801217a:	3001      	adds	r0, #1
 801217c:	d01e      	beq.n	80121bc <_printf_common+0xa4>
 801217e:	6823      	ldr	r3, [r4, #0]
 8012180:	68e5      	ldr	r5, [r4, #12]
 8012182:	6832      	ldr	r2, [r6, #0]
 8012184:	f003 0306 	and.w	r3, r3, #6
 8012188:	2b04      	cmp	r3, #4
 801218a:	bf08      	it	eq
 801218c:	1aad      	subeq	r5, r5, r2
 801218e:	68a3      	ldr	r3, [r4, #8]
 8012190:	6922      	ldr	r2, [r4, #16]
 8012192:	bf0c      	ite	eq
 8012194:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012198:	2500      	movne	r5, #0
 801219a:	4293      	cmp	r3, r2
 801219c:	bfc4      	itt	gt
 801219e:	1a9b      	subgt	r3, r3, r2
 80121a0:	18ed      	addgt	r5, r5, r3
 80121a2:	2600      	movs	r6, #0
 80121a4:	341a      	adds	r4, #26
 80121a6:	42b5      	cmp	r5, r6
 80121a8:	d11a      	bne.n	80121e0 <_printf_common+0xc8>
 80121aa:	2000      	movs	r0, #0
 80121ac:	e008      	b.n	80121c0 <_printf_common+0xa8>
 80121ae:	2301      	movs	r3, #1
 80121b0:	4652      	mov	r2, sl
 80121b2:	4649      	mov	r1, r9
 80121b4:	4638      	mov	r0, r7
 80121b6:	47c0      	blx	r8
 80121b8:	3001      	adds	r0, #1
 80121ba:	d103      	bne.n	80121c4 <_printf_common+0xac>
 80121bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80121c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121c4:	3501      	adds	r5, #1
 80121c6:	e7c6      	b.n	8012156 <_printf_common+0x3e>
 80121c8:	18e1      	adds	r1, r4, r3
 80121ca:	1c5a      	adds	r2, r3, #1
 80121cc:	2030      	movs	r0, #48	; 0x30
 80121ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80121d2:	4422      	add	r2, r4
 80121d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80121d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80121dc:	3302      	adds	r3, #2
 80121de:	e7c7      	b.n	8012170 <_printf_common+0x58>
 80121e0:	2301      	movs	r3, #1
 80121e2:	4622      	mov	r2, r4
 80121e4:	4649      	mov	r1, r9
 80121e6:	4638      	mov	r0, r7
 80121e8:	47c0      	blx	r8
 80121ea:	3001      	adds	r0, #1
 80121ec:	d0e6      	beq.n	80121bc <_printf_common+0xa4>
 80121ee:	3601      	adds	r6, #1
 80121f0:	e7d9      	b.n	80121a6 <_printf_common+0x8e>
	...

080121f4 <_printf_i>:
 80121f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80121f8:	460c      	mov	r4, r1
 80121fa:	4691      	mov	r9, r2
 80121fc:	7e27      	ldrb	r7, [r4, #24]
 80121fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012200:	2f78      	cmp	r7, #120	; 0x78
 8012202:	4680      	mov	r8, r0
 8012204:	469a      	mov	sl, r3
 8012206:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801220a:	d807      	bhi.n	801221c <_printf_i+0x28>
 801220c:	2f62      	cmp	r7, #98	; 0x62
 801220e:	d80a      	bhi.n	8012226 <_printf_i+0x32>
 8012210:	2f00      	cmp	r7, #0
 8012212:	f000 80d8 	beq.w	80123c6 <_printf_i+0x1d2>
 8012216:	2f58      	cmp	r7, #88	; 0x58
 8012218:	f000 80a3 	beq.w	8012362 <_printf_i+0x16e>
 801221c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012220:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012224:	e03a      	b.n	801229c <_printf_i+0xa8>
 8012226:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801222a:	2b15      	cmp	r3, #21
 801222c:	d8f6      	bhi.n	801221c <_printf_i+0x28>
 801222e:	a001      	add	r0, pc, #4	; (adr r0, 8012234 <_printf_i+0x40>)
 8012230:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012234:	0801228d 	.word	0x0801228d
 8012238:	080122a1 	.word	0x080122a1
 801223c:	0801221d 	.word	0x0801221d
 8012240:	0801221d 	.word	0x0801221d
 8012244:	0801221d 	.word	0x0801221d
 8012248:	0801221d 	.word	0x0801221d
 801224c:	080122a1 	.word	0x080122a1
 8012250:	0801221d 	.word	0x0801221d
 8012254:	0801221d 	.word	0x0801221d
 8012258:	0801221d 	.word	0x0801221d
 801225c:	0801221d 	.word	0x0801221d
 8012260:	080123ad 	.word	0x080123ad
 8012264:	080122d1 	.word	0x080122d1
 8012268:	0801238f 	.word	0x0801238f
 801226c:	0801221d 	.word	0x0801221d
 8012270:	0801221d 	.word	0x0801221d
 8012274:	080123cf 	.word	0x080123cf
 8012278:	0801221d 	.word	0x0801221d
 801227c:	080122d1 	.word	0x080122d1
 8012280:	0801221d 	.word	0x0801221d
 8012284:	0801221d 	.word	0x0801221d
 8012288:	08012397 	.word	0x08012397
 801228c:	680b      	ldr	r3, [r1, #0]
 801228e:	1d1a      	adds	r2, r3, #4
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	600a      	str	r2, [r1, #0]
 8012294:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012298:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801229c:	2301      	movs	r3, #1
 801229e:	e0a3      	b.n	80123e8 <_printf_i+0x1f4>
 80122a0:	6825      	ldr	r5, [r4, #0]
 80122a2:	6808      	ldr	r0, [r1, #0]
 80122a4:	062e      	lsls	r6, r5, #24
 80122a6:	f100 0304 	add.w	r3, r0, #4
 80122aa:	d50a      	bpl.n	80122c2 <_printf_i+0xce>
 80122ac:	6805      	ldr	r5, [r0, #0]
 80122ae:	600b      	str	r3, [r1, #0]
 80122b0:	2d00      	cmp	r5, #0
 80122b2:	da03      	bge.n	80122bc <_printf_i+0xc8>
 80122b4:	232d      	movs	r3, #45	; 0x2d
 80122b6:	426d      	negs	r5, r5
 80122b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80122bc:	485e      	ldr	r0, [pc, #376]	; (8012438 <_printf_i+0x244>)
 80122be:	230a      	movs	r3, #10
 80122c0:	e019      	b.n	80122f6 <_printf_i+0x102>
 80122c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80122c6:	6805      	ldr	r5, [r0, #0]
 80122c8:	600b      	str	r3, [r1, #0]
 80122ca:	bf18      	it	ne
 80122cc:	b22d      	sxthne	r5, r5
 80122ce:	e7ef      	b.n	80122b0 <_printf_i+0xbc>
 80122d0:	680b      	ldr	r3, [r1, #0]
 80122d2:	6825      	ldr	r5, [r4, #0]
 80122d4:	1d18      	adds	r0, r3, #4
 80122d6:	6008      	str	r0, [r1, #0]
 80122d8:	0628      	lsls	r0, r5, #24
 80122da:	d501      	bpl.n	80122e0 <_printf_i+0xec>
 80122dc:	681d      	ldr	r5, [r3, #0]
 80122de:	e002      	b.n	80122e6 <_printf_i+0xf2>
 80122e0:	0669      	lsls	r1, r5, #25
 80122e2:	d5fb      	bpl.n	80122dc <_printf_i+0xe8>
 80122e4:	881d      	ldrh	r5, [r3, #0]
 80122e6:	4854      	ldr	r0, [pc, #336]	; (8012438 <_printf_i+0x244>)
 80122e8:	2f6f      	cmp	r7, #111	; 0x6f
 80122ea:	bf0c      	ite	eq
 80122ec:	2308      	moveq	r3, #8
 80122ee:	230a      	movne	r3, #10
 80122f0:	2100      	movs	r1, #0
 80122f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80122f6:	6866      	ldr	r6, [r4, #4]
 80122f8:	60a6      	str	r6, [r4, #8]
 80122fa:	2e00      	cmp	r6, #0
 80122fc:	bfa2      	ittt	ge
 80122fe:	6821      	ldrge	r1, [r4, #0]
 8012300:	f021 0104 	bicge.w	r1, r1, #4
 8012304:	6021      	strge	r1, [r4, #0]
 8012306:	b90d      	cbnz	r5, 801230c <_printf_i+0x118>
 8012308:	2e00      	cmp	r6, #0
 801230a:	d04d      	beq.n	80123a8 <_printf_i+0x1b4>
 801230c:	4616      	mov	r6, r2
 801230e:	fbb5 f1f3 	udiv	r1, r5, r3
 8012312:	fb03 5711 	mls	r7, r3, r1, r5
 8012316:	5dc7      	ldrb	r7, [r0, r7]
 8012318:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801231c:	462f      	mov	r7, r5
 801231e:	42bb      	cmp	r3, r7
 8012320:	460d      	mov	r5, r1
 8012322:	d9f4      	bls.n	801230e <_printf_i+0x11a>
 8012324:	2b08      	cmp	r3, #8
 8012326:	d10b      	bne.n	8012340 <_printf_i+0x14c>
 8012328:	6823      	ldr	r3, [r4, #0]
 801232a:	07df      	lsls	r7, r3, #31
 801232c:	d508      	bpl.n	8012340 <_printf_i+0x14c>
 801232e:	6923      	ldr	r3, [r4, #16]
 8012330:	6861      	ldr	r1, [r4, #4]
 8012332:	4299      	cmp	r1, r3
 8012334:	bfde      	ittt	le
 8012336:	2330      	movle	r3, #48	; 0x30
 8012338:	f806 3c01 	strble.w	r3, [r6, #-1]
 801233c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8012340:	1b92      	subs	r2, r2, r6
 8012342:	6122      	str	r2, [r4, #16]
 8012344:	f8cd a000 	str.w	sl, [sp]
 8012348:	464b      	mov	r3, r9
 801234a:	aa03      	add	r2, sp, #12
 801234c:	4621      	mov	r1, r4
 801234e:	4640      	mov	r0, r8
 8012350:	f7ff fee2 	bl	8012118 <_printf_common>
 8012354:	3001      	adds	r0, #1
 8012356:	d14c      	bne.n	80123f2 <_printf_i+0x1fe>
 8012358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801235c:	b004      	add	sp, #16
 801235e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012362:	4835      	ldr	r0, [pc, #212]	; (8012438 <_printf_i+0x244>)
 8012364:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012368:	6823      	ldr	r3, [r4, #0]
 801236a:	680e      	ldr	r6, [r1, #0]
 801236c:	061f      	lsls	r7, r3, #24
 801236e:	f856 5b04 	ldr.w	r5, [r6], #4
 8012372:	600e      	str	r6, [r1, #0]
 8012374:	d514      	bpl.n	80123a0 <_printf_i+0x1ac>
 8012376:	07d9      	lsls	r1, r3, #31
 8012378:	bf44      	itt	mi
 801237a:	f043 0320 	orrmi.w	r3, r3, #32
 801237e:	6023      	strmi	r3, [r4, #0]
 8012380:	b91d      	cbnz	r5, 801238a <_printf_i+0x196>
 8012382:	6823      	ldr	r3, [r4, #0]
 8012384:	f023 0320 	bic.w	r3, r3, #32
 8012388:	6023      	str	r3, [r4, #0]
 801238a:	2310      	movs	r3, #16
 801238c:	e7b0      	b.n	80122f0 <_printf_i+0xfc>
 801238e:	6823      	ldr	r3, [r4, #0]
 8012390:	f043 0320 	orr.w	r3, r3, #32
 8012394:	6023      	str	r3, [r4, #0]
 8012396:	2378      	movs	r3, #120	; 0x78
 8012398:	4828      	ldr	r0, [pc, #160]	; (801243c <_printf_i+0x248>)
 801239a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801239e:	e7e3      	b.n	8012368 <_printf_i+0x174>
 80123a0:	065e      	lsls	r6, r3, #25
 80123a2:	bf48      	it	mi
 80123a4:	b2ad      	uxthmi	r5, r5
 80123a6:	e7e6      	b.n	8012376 <_printf_i+0x182>
 80123a8:	4616      	mov	r6, r2
 80123aa:	e7bb      	b.n	8012324 <_printf_i+0x130>
 80123ac:	680b      	ldr	r3, [r1, #0]
 80123ae:	6826      	ldr	r6, [r4, #0]
 80123b0:	6960      	ldr	r0, [r4, #20]
 80123b2:	1d1d      	adds	r5, r3, #4
 80123b4:	600d      	str	r5, [r1, #0]
 80123b6:	0635      	lsls	r5, r6, #24
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	d501      	bpl.n	80123c0 <_printf_i+0x1cc>
 80123bc:	6018      	str	r0, [r3, #0]
 80123be:	e002      	b.n	80123c6 <_printf_i+0x1d2>
 80123c0:	0671      	lsls	r1, r6, #25
 80123c2:	d5fb      	bpl.n	80123bc <_printf_i+0x1c8>
 80123c4:	8018      	strh	r0, [r3, #0]
 80123c6:	2300      	movs	r3, #0
 80123c8:	6123      	str	r3, [r4, #16]
 80123ca:	4616      	mov	r6, r2
 80123cc:	e7ba      	b.n	8012344 <_printf_i+0x150>
 80123ce:	680b      	ldr	r3, [r1, #0]
 80123d0:	1d1a      	adds	r2, r3, #4
 80123d2:	600a      	str	r2, [r1, #0]
 80123d4:	681e      	ldr	r6, [r3, #0]
 80123d6:	6862      	ldr	r2, [r4, #4]
 80123d8:	2100      	movs	r1, #0
 80123da:	4630      	mov	r0, r6
 80123dc:	f7ed ff30 	bl	8000240 <memchr>
 80123e0:	b108      	cbz	r0, 80123e6 <_printf_i+0x1f2>
 80123e2:	1b80      	subs	r0, r0, r6
 80123e4:	6060      	str	r0, [r4, #4]
 80123e6:	6863      	ldr	r3, [r4, #4]
 80123e8:	6123      	str	r3, [r4, #16]
 80123ea:	2300      	movs	r3, #0
 80123ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80123f0:	e7a8      	b.n	8012344 <_printf_i+0x150>
 80123f2:	6923      	ldr	r3, [r4, #16]
 80123f4:	4632      	mov	r2, r6
 80123f6:	4649      	mov	r1, r9
 80123f8:	4640      	mov	r0, r8
 80123fa:	47d0      	blx	sl
 80123fc:	3001      	adds	r0, #1
 80123fe:	d0ab      	beq.n	8012358 <_printf_i+0x164>
 8012400:	6823      	ldr	r3, [r4, #0]
 8012402:	079b      	lsls	r3, r3, #30
 8012404:	d413      	bmi.n	801242e <_printf_i+0x23a>
 8012406:	68e0      	ldr	r0, [r4, #12]
 8012408:	9b03      	ldr	r3, [sp, #12]
 801240a:	4298      	cmp	r0, r3
 801240c:	bfb8      	it	lt
 801240e:	4618      	movlt	r0, r3
 8012410:	e7a4      	b.n	801235c <_printf_i+0x168>
 8012412:	2301      	movs	r3, #1
 8012414:	4632      	mov	r2, r6
 8012416:	4649      	mov	r1, r9
 8012418:	4640      	mov	r0, r8
 801241a:	47d0      	blx	sl
 801241c:	3001      	adds	r0, #1
 801241e:	d09b      	beq.n	8012358 <_printf_i+0x164>
 8012420:	3501      	adds	r5, #1
 8012422:	68e3      	ldr	r3, [r4, #12]
 8012424:	9903      	ldr	r1, [sp, #12]
 8012426:	1a5b      	subs	r3, r3, r1
 8012428:	42ab      	cmp	r3, r5
 801242a:	dcf2      	bgt.n	8012412 <_printf_i+0x21e>
 801242c:	e7eb      	b.n	8012406 <_printf_i+0x212>
 801242e:	2500      	movs	r5, #0
 8012430:	f104 0619 	add.w	r6, r4, #25
 8012434:	e7f5      	b.n	8012422 <_printf_i+0x22e>
 8012436:	bf00      	nop
 8012438:	08023d6e 	.word	0x08023d6e
 801243c:	08023d7f 	.word	0x08023d7f

08012440 <_sbrk_r>:
 8012440:	b538      	push	{r3, r4, r5, lr}
 8012442:	4d06      	ldr	r5, [pc, #24]	; (801245c <_sbrk_r+0x1c>)
 8012444:	2300      	movs	r3, #0
 8012446:	4604      	mov	r4, r0
 8012448:	4608      	mov	r0, r1
 801244a:	602b      	str	r3, [r5, #0]
 801244c:	f7f1 f8da 	bl	8003604 <_sbrk>
 8012450:	1c43      	adds	r3, r0, #1
 8012452:	d102      	bne.n	801245a <_sbrk_r+0x1a>
 8012454:	682b      	ldr	r3, [r5, #0]
 8012456:	b103      	cbz	r3, 801245a <_sbrk_r+0x1a>
 8012458:	6023      	str	r3, [r4, #0]
 801245a:	bd38      	pop	{r3, r4, r5, pc}
 801245c:	20001c50 	.word	0x20001c50

08012460 <siprintf>:
 8012460:	b40e      	push	{r1, r2, r3}
 8012462:	b500      	push	{lr}
 8012464:	b09c      	sub	sp, #112	; 0x70
 8012466:	ab1d      	add	r3, sp, #116	; 0x74
 8012468:	9002      	str	r0, [sp, #8]
 801246a:	9006      	str	r0, [sp, #24]
 801246c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012470:	4809      	ldr	r0, [pc, #36]	; (8012498 <siprintf+0x38>)
 8012472:	9107      	str	r1, [sp, #28]
 8012474:	9104      	str	r1, [sp, #16]
 8012476:	4909      	ldr	r1, [pc, #36]	; (801249c <siprintf+0x3c>)
 8012478:	f853 2b04 	ldr.w	r2, [r3], #4
 801247c:	9105      	str	r1, [sp, #20]
 801247e:	6800      	ldr	r0, [r0, #0]
 8012480:	9301      	str	r3, [sp, #4]
 8012482:	a902      	add	r1, sp, #8
 8012484:	f001 faa2 	bl	80139cc <_svfiprintf_r>
 8012488:	9b02      	ldr	r3, [sp, #8]
 801248a:	2200      	movs	r2, #0
 801248c:	701a      	strb	r2, [r3, #0]
 801248e:	b01c      	add	sp, #112	; 0x70
 8012490:	f85d eb04 	ldr.w	lr, [sp], #4
 8012494:	b003      	add	sp, #12
 8012496:	4770      	bx	lr
 8012498:	200006a4 	.word	0x200006a4
 801249c:	ffff0208 	.word	0xffff0208

080124a0 <quorem>:
 80124a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124a4:	6903      	ldr	r3, [r0, #16]
 80124a6:	690c      	ldr	r4, [r1, #16]
 80124a8:	42a3      	cmp	r3, r4
 80124aa:	4607      	mov	r7, r0
 80124ac:	f2c0 8081 	blt.w	80125b2 <quorem+0x112>
 80124b0:	3c01      	subs	r4, #1
 80124b2:	f101 0814 	add.w	r8, r1, #20
 80124b6:	f100 0514 	add.w	r5, r0, #20
 80124ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80124be:	9301      	str	r3, [sp, #4]
 80124c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80124c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80124c8:	3301      	adds	r3, #1
 80124ca:	429a      	cmp	r2, r3
 80124cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80124d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80124d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80124d8:	d331      	bcc.n	801253e <quorem+0x9e>
 80124da:	f04f 0e00 	mov.w	lr, #0
 80124de:	4640      	mov	r0, r8
 80124e0:	46ac      	mov	ip, r5
 80124e2:	46f2      	mov	sl, lr
 80124e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80124e8:	b293      	uxth	r3, r2
 80124ea:	fb06 e303 	mla	r3, r6, r3, lr
 80124ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80124f2:	b29b      	uxth	r3, r3
 80124f4:	ebaa 0303 	sub.w	r3, sl, r3
 80124f8:	0c12      	lsrs	r2, r2, #16
 80124fa:	f8dc a000 	ldr.w	sl, [ip]
 80124fe:	fb06 e202 	mla	r2, r6, r2, lr
 8012502:	fa13 f38a 	uxtah	r3, r3, sl
 8012506:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801250a:	fa1f fa82 	uxth.w	sl, r2
 801250e:	f8dc 2000 	ldr.w	r2, [ip]
 8012512:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8012516:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801251a:	b29b      	uxth	r3, r3
 801251c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012520:	4581      	cmp	r9, r0
 8012522:	f84c 3b04 	str.w	r3, [ip], #4
 8012526:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801252a:	d2db      	bcs.n	80124e4 <quorem+0x44>
 801252c:	f855 300b 	ldr.w	r3, [r5, fp]
 8012530:	b92b      	cbnz	r3, 801253e <quorem+0x9e>
 8012532:	9b01      	ldr	r3, [sp, #4]
 8012534:	3b04      	subs	r3, #4
 8012536:	429d      	cmp	r5, r3
 8012538:	461a      	mov	r2, r3
 801253a:	d32e      	bcc.n	801259a <quorem+0xfa>
 801253c:	613c      	str	r4, [r7, #16]
 801253e:	4638      	mov	r0, r7
 8012540:	f001 f8b4 	bl	80136ac <__mcmp>
 8012544:	2800      	cmp	r0, #0
 8012546:	db24      	blt.n	8012592 <quorem+0xf2>
 8012548:	3601      	adds	r6, #1
 801254a:	4628      	mov	r0, r5
 801254c:	f04f 0c00 	mov.w	ip, #0
 8012550:	f858 2b04 	ldr.w	r2, [r8], #4
 8012554:	f8d0 e000 	ldr.w	lr, [r0]
 8012558:	b293      	uxth	r3, r2
 801255a:	ebac 0303 	sub.w	r3, ip, r3
 801255e:	0c12      	lsrs	r2, r2, #16
 8012560:	fa13 f38e 	uxtah	r3, r3, lr
 8012564:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012568:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801256c:	b29b      	uxth	r3, r3
 801256e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012572:	45c1      	cmp	r9, r8
 8012574:	f840 3b04 	str.w	r3, [r0], #4
 8012578:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801257c:	d2e8      	bcs.n	8012550 <quorem+0xb0>
 801257e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012582:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012586:	b922      	cbnz	r2, 8012592 <quorem+0xf2>
 8012588:	3b04      	subs	r3, #4
 801258a:	429d      	cmp	r5, r3
 801258c:	461a      	mov	r2, r3
 801258e:	d30a      	bcc.n	80125a6 <quorem+0x106>
 8012590:	613c      	str	r4, [r7, #16]
 8012592:	4630      	mov	r0, r6
 8012594:	b003      	add	sp, #12
 8012596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801259a:	6812      	ldr	r2, [r2, #0]
 801259c:	3b04      	subs	r3, #4
 801259e:	2a00      	cmp	r2, #0
 80125a0:	d1cc      	bne.n	801253c <quorem+0x9c>
 80125a2:	3c01      	subs	r4, #1
 80125a4:	e7c7      	b.n	8012536 <quorem+0x96>
 80125a6:	6812      	ldr	r2, [r2, #0]
 80125a8:	3b04      	subs	r3, #4
 80125aa:	2a00      	cmp	r2, #0
 80125ac:	d1f0      	bne.n	8012590 <quorem+0xf0>
 80125ae:	3c01      	subs	r4, #1
 80125b0:	e7eb      	b.n	801258a <quorem+0xea>
 80125b2:	2000      	movs	r0, #0
 80125b4:	e7ee      	b.n	8012594 <quorem+0xf4>
	...

080125b8 <_dtoa_r>:
 80125b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125bc:	ed2d 8b02 	vpush	{d8}
 80125c0:	ec57 6b10 	vmov	r6, r7, d0
 80125c4:	b095      	sub	sp, #84	; 0x54
 80125c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80125c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80125cc:	9105      	str	r1, [sp, #20]
 80125ce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80125d2:	4604      	mov	r4, r0
 80125d4:	9209      	str	r2, [sp, #36]	; 0x24
 80125d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80125d8:	b975      	cbnz	r5, 80125f8 <_dtoa_r+0x40>
 80125da:	2010      	movs	r0, #16
 80125dc:	f7ff f9f6 	bl	80119cc <malloc>
 80125e0:	4602      	mov	r2, r0
 80125e2:	6260      	str	r0, [r4, #36]	; 0x24
 80125e4:	b920      	cbnz	r0, 80125f0 <_dtoa_r+0x38>
 80125e6:	4bb2      	ldr	r3, [pc, #712]	; (80128b0 <_dtoa_r+0x2f8>)
 80125e8:	21ea      	movs	r1, #234	; 0xea
 80125ea:	48b2      	ldr	r0, [pc, #712]	; (80128b4 <_dtoa_r+0x2fc>)
 80125ec:	f001 faee 	bl	8013bcc <__assert_func>
 80125f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80125f4:	6005      	str	r5, [r0, #0]
 80125f6:	60c5      	str	r5, [r0, #12]
 80125f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80125fa:	6819      	ldr	r1, [r3, #0]
 80125fc:	b151      	cbz	r1, 8012614 <_dtoa_r+0x5c>
 80125fe:	685a      	ldr	r2, [r3, #4]
 8012600:	604a      	str	r2, [r1, #4]
 8012602:	2301      	movs	r3, #1
 8012604:	4093      	lsls	r3, r2
 8012606:	608b      	str	r3, [r1, #8]
 8012608:	4620      	mov	r0, r4
 801260a:	f000 fe11 	bl	8013230 <_Bfree>
 801260e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012610:	2200      	movs	r2, #0
 8012612:	601a      	str	r2, [r3, #0]
 8012614:	1e3b      	subs	r3, r7, #0
 8012616:	bfb9      	ittee	lt
 8012618:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801261c:	9303      	strlt	r3, [sp, #12]
 801261e:	2300      	movge	r3, #0
 8012620:	f8c8 3000 	strge.w	r3, [r8]
 8012624:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012628:	4ba3      	ldr	r3, [pc, #652]	; (80128b8 <_dtoa_r+0x300>)
 801262a:	bfbc      	itt	lt
 801262c:	2201      	movlt	r2, #1
 801262e:	f8c8 2000 	strlt.w	r2, [r8]
 8012632:	ea33 0309 	bics.w	r3, r3, r9
 8012636:	d11b      	bne.n	8012670 <_dtoa_r+0xb8>
 8012638:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801263a:	f242 730f 	movw	r3, #9999	; 0x270f
 801263e:	6013      	str	r3, [r2, #0]
 8012640:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012644:	4333      	orrs	r3, r6
 8012646:	f000 857a 	beq.w	801313e <_dtoa_r+0xb86>
 801264a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801264c:	b963      	cbnz	r3, 8012668 <_dtoa_r+0xb0>
 801264e:	4b9b      	ldr	r3, [pc, #620]	; (80128bc <_dtoa_r+0x304>)
 8012650:	e024      	b.n	801269c <_dtoa_r+0xe4>
 8012652:	4b9b      	ldr	r3, [pc, #620]	; (80128c0 <_dtoa_r+0x308>)
 8012654:	9300      	str	r3, [sp, #0]
 8012656:	3308      	adds	r3, #8
 8012658:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801265a:	6013      	str	r3, [r2, #0]
 801265c:	9800      	ldr	r0, [sp, #0]
 801265e:	b015      	add	sp, #84	; 0x54
 8012660:	ecbd 8b02 	vpop	{d8}
 8012664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012668:	4b94      	ldr	r3, [pc, #592]	; (80128bc <_dtoa_r+0x304>)
 801266a:	9300      	str	r3, [sp, #0]
 801266c:	3303      	adds	r3, #3
 801266e:	e7f3      	b.n	8012658 <_dtoa_r+0xa0>
 8012670:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012674:	2200      	movs	r2, #0
 8012676:	ec51 0b17 	vmov	r0, r1, d7
 801267a:	2300      	movs	r3, #0
 801267c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012680:	f7ee fa52 	bl	8000b28 <__aeabi_dcmpeq>
 8012684:	4680      	mov	r8, r0
 8012686:	b158      	cbz	r0, 80126a0 <_dtoa_r+0xe8>
 8012688:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801268a:	2301      	movs	r3, #1
 801268c:	6013      	str	r3, [r2, #0]
 801268e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012690:	2b00      	cmp	r3, #0
 8012692:	f000 8551 	beq.w	8013138 <_dtoa_r+0xb80>
 8012696:	488b      	ldr	r0, [pc, #556]	; (80128c4 <_dtoa_r+0x30c>)
 8012698:	6018      	str	r0, [r3, #0]
 801269a:	1e43      	subs	r3, r0, #1
 801269c:	9300      	str	r3, [sp, #0]
 801269e:	e7dd      	b.n	801265c <_dtoa_r+0xa4>
 80126a0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80126a4:	aa12      	add	r2, sp, #72	; 0x48
 80126a6:	a913      	add	r1, sp, #76	; 0x4c
 80126a8:	4620      	mov	r0, r4
 80126aa:	f001 f8a3 	bl	80137f4 <__d2b>
 80126ae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80126b2:	4683      	mov	fp, r0
 80126b4:	2d00      	cmp	r5, #0
 80126b6:	d07c      	beq.n	80127b2 <_dtoa_r+0x1fa>
 80126b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126ba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80126be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80126c2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80126c6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80126ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80126ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80126d2:	4b7d      	ldr	r3, [pc, #500]	; (80128c8 <_dtoa_r+0x310>)
 80126d4:	2200      	movs	r2, #0
 80126d6:	4630      	mov	r0, r6
 80126d8:	4639      	mov	r1, r7
 80126da:	f7ed fe05 	bl	80002e8 <__aeabi_dsub>
 80126de:	a36e      	add	r3, pc, #440	; (adr r3, 8012898 <_dtoa_r+0x2e0>)
 80126e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126e4:	f7ed ffb8 	bl	8000658 <__aeabi_dmul>
 80126e8:	a36d      	add	r3, pc, #436	; (adr r3, 80128a0 <_dtoa_r+0x2e8>)
 80126ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ee:	f7ed fdfd 	bl	80002ec <__adddf3>
 80126f2:	4606      	mov	r6, r0
 80126f4:	4628      	mov	r0, r5
 80126f6:	460f      	mov	r7, r1
 80126f8:	f7ed ff44 	bl	8000584 <__aeabi_i2d>
 80126fc:	a36a      	add	r3, pc, #424	; (adr r3, 80128a8 <_dtoa_r+0x2f0>)
 80126fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012702:	f7ed ffa9 	bl	8000658 <__aeabi_dmul>
 8012706:	4602      	mov	r2, r0
 8012708:	460b      	mov	r3, r1
 801270a:	4630      	mov	r0, r6
 801270c:	4639      	mov	r1, r7
 801270e:	f7ed fded 	bl	80002ec <__adddf3>
 8012712:	4606      	mov	r6, r0
 8012714:	460f      	mov	r7, r1
 8012716:	f7ee fa4f 	bl	8000bb8 <__aeabi_d2iz>
 801271a:	2200      	movs	r2, #0
 801271c:	4682      	mov	sl, r0
 801271e:	2300      	movs	r3, #0
 8012720:	4630      	mov	r0, r6
 8012722:	4639      	mov	r1, r7
 8012724:	f7ee fa0a 	bl	8000b3c <__aeabi_dcmplt>
 8012728:	b148      	cbz	r0, 801273e <_dtoa_r+0x186>
 801272a:	4650      	mov	r0, sl
 801272c:	f7ed ff2a 	bl	8000584 <__aeabi_i2d>
 8012730:	4632      	mov	r2, r6
 8012732:	463b      	mov	r3, r7
 8012734:	f7ee f9f8 	bl	8000b28 <__aeabi_dcmpeq>
 8012738:	b908      	cbnz	r0, 801273e <_dtoa_r+0x186>
 801273a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801273e:	f1ba 0f16 	cmp.w	sl, #22
 8012742:	d854      	bhi.n	80127ee <_dtoa_r+0x236>
 8012744:	4b61      	ldr	r3, [pc, #388]	; (80128cc <_dtoa_r+0x314>)
 8012746:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801274e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012752:	f7ee f9f3 	bl	8000b3c <__aeabi_dcmplt>
 8012756:	2800      	cmp	r0, #0
 8012758:	d04b      	beq.n	80127f2 <_dtoa_r+0x23a>
 801275a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801275e:	2300      	movs	r3, #0
 8012760:	930e      	str	r3, [sp, #56]	; 0x38
 8012762:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012764:	1b5d      	subs	r5, r3, r5
 8012766:	1e6b      	subs	r3, r5, #1
 8012768:	9304      	str	r3, [sp, #16]
 801276a:	bf43      	ittte	mi
 801276c:	2300      	movmi	r3, #0
 801276e:	f1c5 0801 	rsbmi	r8, r5, #1
 8012772:	9304      	strmi	r3, [sp, #16]
 8012774:	f04f 0800 	movpl.w	r8, #0
 8012778:	f1ba 0f00 	cmp.w	sl, #0
 801277c:	db3b      	blt.n	80127f6 <_dtoa_r+0x23e>
 801277e:	9b04      	ldr	r3, [sp, #16]
 8012780:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8012784:	4453      	add	r3, sl
 8012786:	9304      	str	r3, [sp, #16]
 8012788:	2300      	movs	r3, #0
 801278a:	9306      	str	r3, [sp, #24]
 801278c:	9b05      	ldr	r3, [sp, #20]
 801278e:	2b09      	cmp	r3, #9
 8012790:	d869      	bhi.n	8012866 <_dtoa_r+0x2ae>
 8012792:	2b05      	cmp	r3, #5
 8012794:	bfc4      	itt	gt
 8012796:	3b04      	subgt	r3, #4
 8012798:	9305      	strgt	r3, [sp, #20]
 801279a:	9b05      	ldr	r3, [sp, #20]
 801279c:	f1a3 0302 	sub.w	r3, r3, #2
 80127a0:	bfcc      	ite	gt
 80127a2:	2500      	movgt	r5, #0
 80127a4:	2501      	movle	r5, #1
 80127a6:	2b03      	cmp	r3, #3
 80127a8:	d869      	bhi.n	801287e <_dtoa_r+0x2c6>
 80127aa:	e8df f003 	tbb	[pc, r3]
 80127ae:	4e2c      	.short	0x4e2c
 80127b0:	5a4c      	.short	0x5a4c
 80127b2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80127b6:	441d      	add	r5, r3
 80127b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80127bc:	2b20      	cmp	r3, #32
 80127be:	bfc1      	itttt	gt
 80127c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80127c4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80127c8:	fa09 f303 	lslgt.w	r3, r9, r3
 80127cc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80127d0:	bfda      	itte	le
 80127d2:	f1c3 0320 	rsble	r3, r3, #32
 80127d6:	fa06 f003 	lslle.w	r0, r6, r3
 80127da:	4318      	orrgt	r0, r3
 80127dc:	f7ed fec2 	bl	8000564 <__aeabi_ui2d>
 80127e0:	2301      	movs	r3, #1
 80127e2:	4606      	mov	r6, r0
 80127e4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80127e8:	3d01      	subs	r5, #1
 80127ea:	9310      	str	r3, [sp, #64]	; 0x40
 80127ec:	e771      	b.n	80126d2 <_dtoa_r+0x11a>
 80127ee:	2301      	movs	r3, #1
 80127f0:	e7b6      	b.n	8012760 <_dtoa_r+0x1a8>
 80127f2:	900e      	str	r0, [sp, #56]	; 0x38
 80127f4:	e7b5      	b.n	8012762 <_dtoa_r+0x1aa>
 80127f6:	f1ca 0300 	rsb	r3, sl, #0
 80127fa:	9306      	str	r3, [sp, #24]
 80127fc:	2300      	movs	r3, #0
 80127fe:	eba8 080a 	sub.w	r8, r8, sl
 8012802:	930d      	str	r3, [sp, #52]	; 0x34
 8012804:	e7c2      	b.n	801278c <_dtoa_r+0x1d4>
 8012806:	2300      	movs	r3, #0
 8012808:	9308      	str	r3, [sp, #32]
 801280a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801280c:	2b00      	cmp	r3, #0
 801280e:	dc39      	bgt.n	8012884 <_dtoa_r+0x2cc>
 8012810:	f04f 0901 	mov.w	r9, #1
 8012814:	f8cd 9004 	str.w	r9, [sp, #4]
 8012818:	464b      	mov	r3, r9
 801281a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801281e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012820:	2200      	movs	r2, #0
 8012822:	6042      	str	r2, [r0, #4]
 8012824:	2204      	movs	r2, #4
 8012826:	f102 0614 	add.w	r6, r2, #20
 801282a:	429e      	cmp	r6, r3
 801282c:	6841      	ldr	r1, [r0, #4]
 801282e:	d92f      	bls.n	8012890 <_dtoa_r+0x2d8>
 8012830:	4620      	mov	r0, r4
 8012832:	f000 fcbd 	bl	80131b0 <_Balloc>
 8012836:	9000      	str	r0, [sp, #0]
 8012838:	2800      	cmp	r0, #0
 801283a:	d14b      	bne.n	80128d4 <_dtoa_r+0x31c>
 801283c:	4b24      	ldr	r3, [pc, #144]	; (80128d0 <_dtoa_r+0x318>)
 801283e:	4602      	mov	r2, r0
 8012840:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012844:	e6d1      	b.n	80125ea <_dtoa_r+0x32>
 8012846:	2301      	movs	r3, #1
 8012848:	e7de      	b.n	8012808 <_dtoa_r+0x250>
 801284a:	2300      	movs	r3, #0
 801284c:	9308      	str	r3, [sp, #32]
 801284e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012850:	eb0a 0903 	add.w	r9, sl, r3
 8012854:	f109 0301 	add.w	r3, r9, #1
 8012858:	2b01      	cmp	r3, #1
 801285a:	9301      	str	r3, [sp, #4]
 801285c:	bfb8      	it	lt
 801285e:	2301      	movlt	r3, #1
 8012860:	e7dd      	b.n	801281e <_dtoa_r+0x266>
 8012862:	2301      	movs	r3, #1
 8012864:	e7f2      	b.n	801284c <_dtoa_r+0x294>
 8012866:	2501      	movs	r5, #1
 8012868:	2300      	movs	r3, #0
 801286a:	9305      	str	r3, [sp, #20]
 801286c:	9508      	str	r5, [sp, #32]
 801286e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8012872:	2200      	movs	r2, #0
 8012874:	f8cd 9004 	str.w	r9, [sp, #4]
 8012878:	2312      	movs	r3, #18
 801287a:	9209      	str	r2, [sp, #36]	; 0x24
 801287c:	e7cf      	b.n	801281e <_dtoa_r+0x266>
 801287e:	2301      	movs	r3, #1
 8012880:	9308      	str	r3, [sp, #32]
 8012882:	e7f4      	b.n	801286e <_dtoa_r+0x2b6>
 8012884:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012888:	f8cd 9004 	str.w	r9, [sp, #4]
 801288c:	464b      	mov	r3, r9
 801288e:	e7c6      	b.n	801281e <_dtoa_r+0x266>
 8012890:	3101      	adds	r1, #1
 8012892:	6041      	str	r1, [r0, #4]
 8012894:	0052      	lsls	r2, r2, #1
 8012896:	e7c6      	b.n	8012826 <_dtoa_r+0x26e>
 8012898:	636f4361 	.word	0x636f4361
 801289c:	3fd287a7 	.word	0x3fd287a7
 80128a0:	8b60c8b3 	.word	0x8b60c8b3
 80128a4:	3fc68a28 	.word	0x3fc68a28
 80128a8:	509f79fb 	.word	0x509f79fb
 80128ac:	3fd34413 	.word	0x3fd34413
 80128b0:	08023d9d 	.word	0x08023d9d
 80128b4:	08023db4 	.word	0x08023db4
 80128b8:	7ff00000 	.word	0x7ff00000
 80128bc:	08023d99 	.word	0x08023d99
 80128c0:	08023d90 	.word	0x08023d90
 80128c4:	08023d6d 	.word	0x08023d6d
 80128c8:	3ff80000 	.word	0x3ff80000
 80128cc:	08023eb0 	.word	0x08023eb0
 80128d0:	08023e13 	.word	0x08023e13
 80128d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80128d6:	9a00      	ldr	r2, [sp, #0]
 80128d8:	601a      	str	r2, [r3, #0]
 80128da:	9b01      	ldr	r3, [sp, #4]
 80128dc:	2b0e      	cmp	r3, #14
 80128de:	f200 80ad 	bhi.w	8012a3c <_dtoa_r+0x484>
 80128e2:	2d00      	cmp	r5, #0
 80128e4:	f000 80aa 	beq.w	8012a3c <_dtoa_r+0x484>
 80128e8:	f1ba 0f00 	cmp.w	sl, #0
 80128ec:	dd36      	ble.n	801295c <_dtoa_r+0x3a4>
 80128ee:	4ac3      	ldr	r2, [pc, #780]	; (8012bfc <_dtoa_r+0x644>)
 80128f0:	f00a 030f 	and.w	r3, sl, #15
 80128f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80128f8:	ed93 7b00 	vldr	d7, [r3]
 80128fc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8012900:	ea4f 172a 	mov.w	r7, sl, asr #4
 8012904:	eeb0 8a47 	vmov.f32	s16, s14
 8012908:	eef0 8a67 	vmov.f32	s17, s15
 801290c:	d016      	beq.n	801293c <_dtoa_r+0x384>
 801290e:	4bbc      	ldr	r3, [pc, #752]	; (8012c00 <_dtoa_r+0x648>)
 8012910:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012914:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012918:	f7ed ffc8 	bl	80008ac <__aeabi_ddiv>
 801291c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012920:	f007 070f 	and.w	r7, r7, #15
 8012924:	2503      	movs	r5, #3
 8012926:	4eb6      	ldr	r6, [pc, #728]	; (8012c00 <_dtoa_r+0x648>)
 8012928:	b957      	cbnz	r7, 8012940 <_dtoa_r+0x388>
 801292a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801292e:	ec53 2b18 	vmov	r2, r3, d8
 8012932:	f7ed ffbb 	bl	80008ac <__aeabi_ddiv>
 8012936:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801293a:	e029      	b.n	8012990 <_dtoa_r+0x3d8>
 801293c:	2502      	movs	r5, #2
 801293e:	e7f2      	b.n	8012926 <_dtoa_r+0x36e>
 8012940:	07f9      	lsls	r1, r7, #31
 8012942:	d508      	bpl.n	8012956 <_dtoa_r+0x39e>
 8012944:	ec51 0b18 	vmov	r0, r1, d8
 8012948:	e9d6 2300 	ldrd	r2, r3, [r6]
 801294c:	f7ed fe84 	bl	8000658 <__aeabi_dmul>
 8012950:	ec41 0b18 	vmov	d8, r0, r1
 8012954:	3501      	adds	r5, #1
 8012956:	107f      	asrs	r7, r7, #1
 8012958:	3608      	adds	r6, #8
 801295a:	e7e5      	b.n	8012928 <_dtoa_r+0x370>
 801295c:	f000 80a6 	beq.w	8012aac <_dtoa_r+0x4f4>
 8012960:	f1ca 0600 	rsb	r6, sl, #0
 8012964:	4ba5      	ldr	r3, [pc, #660]	; (8012bfc <_dtoa_r+0x644>)
 8012966:	4fa6      	ldr	r7, [pc, #664]	; (8012c00 <_dtoa_r+0x648>)
 8012968:	f006 020f 	and.w	r2, r6, #15
 801296c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012974:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012978:	f7ed fe6e 	bl	8000658 <__aeabi_dmul>
 801297c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012980:	1136      	asrs	r6, r6, #4
 8012982:	2300      	movs	r3, #0
 8012984:	2502      	movs	r5, #2
 8012986:	2e00      	cmp	r6, #0
 8012988:	f040 8085 	bne.w	8012a96 <_dtoa_r+0x4de>
 801298c:	2b00      	cmp	r3, #0
 801298e:	d1d2      	bne.n	8012936 <_dtoa_r+0x37e>
 8012990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012992:	2b00      	cmp	r3, #0
 8012994:	f000 808c 	beq.w	8012ab0 <_dtoa_r+0x4f8>
 8012998:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801299c:	4b99      	ldr	r3, [pc, #612]	; (8012c04 <_dtoa_r+0x64c>)
 801299e:	2200      	movs	r2, #0
 80129a0:	4630      	mov	r0, r6
 80129a2:	4639      	mov	r1, r7
 80129a4:	f7ee f8ca 	bl	8000b3c <__aeabi_dcmplt>
 80129a8:	2800      	cmp	r0, #0
 80129aa:	f000 8081 	beq.w	8012ab0 <_dtoa_r+0x4f8>
 80129ae:	9b01      	ldr	r3, [sp, #4]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d07d      	beq.n	8012ab0 <_dtoa_r+0x4f8>
 80129b4:	f1b9 0f00 	cmp.w	r9, #0
 80129b8:	dd3c      	ble.n	8012a34 <_dtoa_r+0x47c>
 80129ba:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80129be:	9307      	str	r3, [sp, #28]
 80129c0:	2200      	movs	r2, #0
 80129c2:	4b91      	ldr	r3, [pc, #580]	; (8012c08 <_dtoa_r+0x650>)
 80129c4:	4630      	mov	r0, r6
 80129c6:	4639      	mov	r1, r7
 80129c8:	f7ed fe46 	bl	8000658 <__aeabi_dmul>
 80129cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80129d0:	3501      	adds	r5, #1
 80129d2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80129d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80129da:	4628      	mov	r0, r5
 80129dc:	f7ed fdd2 	bl	8000584 <__aeabi_i2d>
 80129e0:	4632      	mov	r2, r6
 80129e2:	463b      	mov	r3, r7
 80129e4:	f7ed fe38 	bl	8000658 <__aeabi_dmul>
 80129e8:	4b88      	ldr	r3, [pc, #544]	; (8012c0c <_dtoa_r+0x654>)
 80129ea:	2200      	movs	r2, #0
 80129ec:	f7ed fc7e 	bl	80002ec <__adddf3>
 80129f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80129f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80129f8:	9303      	str	r3, [sp, #12]
 80129fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d15c      	bne.n	8012aba <_dtoa_r+0x502>
 8012a00:	4b83      	ldr	r3, [pc, #524]	; (8012c10 <_dtoa_r+0x658>)
 8012a02:	2200      	movs	r2, #0
 8012a04:	4630      	mov	r0, r6
 8012a06:	4639      	mov	r1, r7
 8012a08:	f7ed fc6e 	bl	80002e8 <__aeabi_dsub>
 8012a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012a10:	4606      	mov	r6, r0
 8012a12:	460f      	mov	r7, r1
 8012a14:	f7ee f8b0 	bl	8000b78 <__aeabi_dcmpgt>
 8012a18:	2800      	cmp	r0, #0
 8012a1a:	f040 8296 	bne.w	8012f4a <_dtoa_r+0x992>
 8012a1e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012a22:	4630      	mov	r0, r6
 8012a24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012a28:	4639      	mov	r1, r7
 8012a2a:	f7ee f887 	bl	8000b3c <__aeabi_dcmplt>
 8012a2e:	2800      	cmp	r0, #0
 8012a30:	f040 8288 	bne.w	8012f44 <_dtoa_r+0x98c>
 8012a34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012a38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012a3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	f2c0 8158 	blt.w	8012cf4 <_dtoa_r+0x73c>
 8012a44:	f1ba 0f0e 	cmp.w	sl, #14
 8012a48:	f300 8154 	bgt.w	8012cf4 <_dtoa_r+0x73c>
 8012a4c:	4b6b      	ldr	r3, [pc, #428]	; (8012bfc <_dtoa_r+0x644>)
 8012a4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012a52:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	f280 80e3 	bge.w	8012c24 <_dtoa_r+0x66c>
 8012a5e:	9b01      	ldr	r3, [sp, #4]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	f300 80df 	bgt.w	8012c24 <_dtoa_r+0x66c>
 8012a66:	f040 826d 	bne.w	8012f44 <_dtoa_r+0x98c>
 8012a6a:	4b69      	ldr	r3, [pc, #420]	; (8012c10 <_dtoa_r+0x658>)
 8012a6c:	2200      	movs	r2, #0
 8012a6e:	4640      	mov	r0, r8
 8012a70:	4649      	mov	r1, r9
 8012a72:	f7ed fdf1 	bl	8000658 <__aeabi_dmul>
 8012a76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012a7a:	f7ee f873 	bl	8000b64 <__aeabi_dcmpge>
 8012a7e:	9e01      	ldr	r6, [sp, #4]
 8012a80:	4637      	mov	r7, r6
 8012a82:	2800      	cmp	r0, #0
 8012a84:	f040 8243 	bne.w	8012f0e <_dtoa_r+0x956>
 8012a88:	9d00      	ldr	r5, [sp, #0]
 8012a8a:	2331      	movs	r3, #49	; 0x31
 8012a8c:	f805 3b01 	strb.w	r3, [r5], #1
 8012a90:	f10a 0a01 	add.w	sl, sl, #1
 8012a94:	e23f      	b.n	8012f16 <_dtoa_r+0x95e>
 8012a96:	07f2      	lsls	r2, r6, #31
 8012a98:	d505      	bpl.n	8012aa6 <_dtoa_r+0x4ee>
 8012a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012a9e:	f7ed fddb 	bl	8000658 <__aeabi_dmul>
 8012aa2:	3501      	adds	r5, #1
 8012aa4:	2301      	movs	r3, #1
 8012aa6:	1076      	asrs	r6, r6, #1
 8012aa8:	3708      	adds	r7, #8
 8012aaa:	e76c      	b.n	8012986 <_dtoa_r+0x3ce>
 8012aac:	2502      	movs	r5, #2
 8012aae:	e76f      	b.n	8012990 <_dtoa_r+0x3d8>
 8012ab0:	9b01      	ldr	r3, [sp, #4]
 8012ab2:	f8cd a01c 	str.w	sl, [sp, #28]
 8012ab6:	930c      	str	r3, [sp, #48]	; 0x30
 8012ab8:	e78d      	b.n	80129d6 <_dtoa_r+0x41e>
 8012aba:	9900      	ldr	r1, [sp, #0]
 8012abc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012abe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012ac0:	4b4e      	ldr	r3, [pc, #312]	; (8012bfc <_dtoa_r+0x644>)
 8012ac2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012ac6:	4401      	add	r1, r0
 8012ac8:	9102      	str	r1, [sp, #8]
 8012aca:	9908      	ldr	r1, [sp, #32]
 8012acc:	eeb0 8a47 	vmov.f32	s16, s14
 8012ad0:	eef0 8a67 	vmov.f32	s17, s15
 8012ad4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012ad8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012adc:	2900      	cmp	r1, #0
 8012ade:	d045      	beq.n	8012b6c <_dtoa_r+0x5b4>
 8012ae0:	494c      	ldr	r1, [pc, #304]	; (8012c14 <_dtoa_r+0x65c>)
 8012ae2:	2000      	movs	r0, #0
 8012ae4:	f7ed fee2 	bl	80008ac <__aeabi_ddiv>
 8012ae8:	ec53 2b18 	vmov	r2, r3, d8
 8012aec:	f7ed fbfc 	bl	80002e8 <__aeabi_dsub>
 8012af0:	9d00      	ldr	r5, [sp, #0]
 8012af2:	ec41 0b18 	vmov	d8, r0, r1
 8012af6:	4639      	mov	r1, r7
 8012af8:	4630      	mov	r0, r6
 8012afa:	f7ee f85d 	bl	8000bb8 <__aeabi_d2iz>
 8012afe:	900c      	str	r0, [sp, #48]	; 0x30
 8012b00:	f7ed fd40 	bl	8000584 <__aeabi_i2d>
 8012b04:	4602      	mov	r2, r0
 8012b06:	460b      	mov	r3, r1
 8012b08:	4630      	mov	r0, r6
 8012b0a:	4639      	mov	r1, r7
 8012b0c:	f7ed fbec 	bl	80002e8 <__aeabi_dsub>
 8012b10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012b12:	3330      	adds	r3, #48	; 0x30
 8012b14:	f805 3b01 	strb.w	r3, [r5], #1
 8012b18:	ec53 2b18 	vmov	r2, r3, d8
 8012b1c:	4606      	mov	r6, r0
 8012b1e:	460f      	mov	r7, r1
 8012b20:	f7ee f80c 	bl	8000b3c <__aeabi_dcmplt>
 8012b24:	2800      	cmp	r0, #0
 8012b26:	d165      	bne.n	8012bf4 <_dtoa_r+0x63c>
 8012b28:	4632      	mov	r2, r6
 8012b2a:	463b      	mov	r3, r7
 8012b2c:	4935      	ldr	r1, [pc, #212]	; (8012c04 <_dtoa_r+0x64c>)
 8012b2e:	2000      	movs	r0, #0
 8012b30:	f7ed fbda 	bl	80002e8 <__aeabi_dsub>
 8012b34:	ec53 2b18 	vmov	r2, r3, d8
 8012b38:	f7ee f800 	bl	8000b3c <__aeabi_dcmplt>
 8012b3c:	2800      	cmp	r0, #0
 8012b3e:	f040 80b9 	bne.w	8012cb4 <_dtoa_r+0x6fc>
 8012b42:	9b02      	ldr	r3, [sp, #8]
 8012b44:	429d      	cmp	r5, r3
 8012b46:	f43f af75 	beq.w	8012a34 <_dtoa_r+0x47c>
 8012b4a:	4b2f      	ldr	r3, [pc, #188]	; (8012c08 <_dtoa_r+0x650>)
 8012b4c:	ec51 0b18 	vmov	r0, r1, d8
 8012b50:	2200      	movs	r2, #0
 8012b52:	f7ed fd81 	bl	8000658 <__aeabi_dmul>
 8012b56:	4b2c      	ldr	r3, [pc, #176]	; (8012c08 <_dtoa_r+0x650>)
 8012b58:	ec41 0b18 	vmov	d8, r0, r1
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	4630      	mov	r0, r6
 8012b60:	4639      	mov	r1, r7
 8012b62:	f7ed fd79 	bl	8000658 <__aeabi_dmul>
 8012b66:	4606      	mov	r6, r0
 8012b68:	460f      	mov	r7, r1
 8012b6a:	e7c4      	b.n	8012af6 <_dtoa_r+0x53e>
 8012b6c:	ec51 0b17 	vmov	r0, r1, d7
 8012b70:	f7ed fd72 	bl	8000658 <__aeabi_dmul>
 8012b74:	9b02      	ldr	r3, [sp, #8]
 8012b76:	9d00      	ldr	r5, [sp, #0]
 8012b78:	930c      	str	r3, [sp, #48]	; 0x30
 8012b7a:	ec41 0b18 	vmov	d8, r0, r1
 8012b7e:	4639      	mov	r1, r7
 8012b80:	4630      	mov	r0, r6
 8012b82:	f7ee f819 	bl	8000bb8 <__aeabi_d2iz>
 8012b86:	9011      	str	r0, [sp, #68]	; 0x44
 8012b88:	f7ed fcfc 	bl	8000584 <__aeabi_i2d>
 8012b8c:	4602      	mov	r2, r0
 8012b8e:	460b      	mov	r3, r1
 8012b90:	4630      	mov	r0, r6
 8012b92:	4639      	mov	r1, r7
 8012b94:	f7ed fba8 	bl	80002e8 <__aeabi_dsub>
 8012b98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012b9a:	3330      	adds	r3, #48	; 0x30
 8012b9c:	f805 3b01 	strb.w	r3, [r5], #1
 8012ba0:	9b02      	ldr	r3, [sp, #8]
 8012ba2:	429d      	cmp	r5, r3
 8012ba4:	4606      	mov	r6, r0
 8012ba6:	460f      	mov	r7, r1
 8012ba8:	f04f 0200 	mov.w	r2, #0
 8012bac:	d134      	bne.n	8012c18 <_dtoa_r+0x660>
 8012bae:	4b19      	ldr	r3, [pc, #100]	; (8012c14 <_dtoa_r+0x65c>)
 8012bb0:	ec51 0b18 	vmov	r0, r1, d8
 8012bb4:	f7ed fb9a 	bl	80002ec <__adddf3>
 8012bb8:	4602      	mov	r2, r0
 8012bba:	460b      	mov	r3, r1
 8012bbc:	4630      	mov	r0, r6
 8012bbe:	4639      	mov	r1, r7
 8012bc0:	f7ed ffda 	bl	8000b78 <__aeabi_dcmpgt>
 8012bc4:	2800      	cmp	r0, #0
 8012bc6:	d175      	bne.n	8012cb4 <_dtoa_r+0x6fc>
 8012bc8:	ec53 2b18 	vmov	r2, r3, d8
 8012bcc:	4911      	ldr	r1, [pc, #68]	; (8012c14 <_dtoa_r+0x65c>)
 8012bce:	2000      	movs	r0, #0
 8012bd0:	f7ed fb8a 	bl	80002e8 <__aeabi_dsub>
 8012bd4:	4602      	mov	r2, r0
 8012bd6:	460b      	mov	r3, r1
 8012bd8:	4630      	mov	r0, r6
 8012bda:	4639      	mov	r1, r7
 8012bdc:	f7ed ffae 	bl	8000b3c <__aeabi_dcmplt>
 8012be0:	2800      	cmp	r0, #0
 8012be2:	f43f af27 	beq.w	8012a34 <_dtoa_r+0x47c>
 8012be6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012be8:	1e6b      	subs	r3, r5, #1
 8012bea:	930c      	str	r3, [sp, #48]	; 0x30
 8012bec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012bf0:	2b30      	cmp	r3, #48	; 0x30
 8012bf2:	d0f8      	beq.n	8012be6 <_dtoa_r+0x62e>
 8012bf4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012bf8:	e04a      	b.n	8012c90 <_dtoa_r+0x6d8>
 8012bfa:	bf00      	nop
 8012bfc:	08023eb0 	.word	0x08023eb0
 8012c00:	08023e88 	.word	0x08023e88
 8012c04:	3ff00000 	.word	0x3ff00000
 8012c08:	40240000 	.word	0x40240000
 8012c0c:	401c0000 	.word	0x401c0000
 8012c10:	40140000 	.word	0x40140000
 8012c14:	3fe00000 	.word	0x3fe00000
 8012c18:	4baf      	ldr	r3, [pc, #700]	; (8012ed8 <_dtoa_r+0x920>)
 8012c1a:	f7ed fd1d 	bl	8000658 <__aeabi_dmul>
 8012c1e:	4606      	mov	r6, r0
 8012c20:	460f      	mov	r7, r1
 8012c22:	e7ac      	b.n	8012b7e <_dtoa_r+0x5c6>
 8012c24:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012c28:	9d00      	ldr	r5, [sp, #0]
 8012c2a:	4642      	mov	r2, r8
 8012c2c:	464b      	mov	r3, r9
 8012c2e:	4630      	mov	r0, r6
 8012c30:	4639      	mov	r1, r7
 8012c32:	f7ed fe3b 	bl	80008ac <__aeabi_ddiv>
 8012c36:	f7ed ffbf 	bl	8000bb8 <__aeabi_d2iz>
 8012c3a:	9002      	str	r0, [sp, #8]
 8012c3c:	f7ed fca2 	bl	8000584 <__aeabi_i2d>
 8012c40:	4642      	mov	r2, r8
 8012c42:	464b      	mov	r3, r9
 8012c44:	f7ed fd08 	bl	8000658 <__aeabi_dmul>
 8012c48:	4602      	mov	r2, r0
 8012c4a:	460b      	mov	r3, r1
 8012c4c:	4630      	mov	r0, r6
 8012c4e:	4639      	mov	r1, r7
 8012c50:	f7ed fb4a 	bl	80002e8 <__aeabi_dsub>
 8012c54:	9e02      	ldr	r6, [sp, #8]
 8012c56:	9f01      	ldr	r7, [sp, #4]
 8012c58:	3630      	adds	r6, #48	; 0x30
 8012c5a:	f805 6b01 	strb.w	r6, [r5], #1
 8012c5e:	9e00      	ldr	r6, [sp, #0]
 8012c60:	1bae      	subs	r6, r5, r6
 8012c62:	42b7      	cmp	r7, r6
 8012c64:	4602      	mov	r2, r0
 8012c66:	460b      	mov	r3, r1
 8012c68:	d137      	bne.n	8012cda <_dtoa_r+0x722>
 8012c6a:	f7ed fb3f 	bl	80002ec <__adddf3>
 8012c6e:	4642      	mov	r2, r8
 8012c70:	464b      	mov	r3, r9
 8012c72:	4606      	mov	r6, r0
 8012c74:	460f      	mov	r7, r1
 8012c76:	f7ed ff7f 	bl	8000b78 <__aeabi_dcmpgt>
 8012c7a:	b9c8      	cbnz	r0, 8012cb0 <_dtoa_r+0x6f8>
 8012c7c:	4642      	mov	r2, r8
 8012c7e:	464b      	mov	r3, r9
 8012c80:	4630      	mov	r0, r6
 8012c82:	4639      	mov	r1, r7
 8012c84:	f7ed ff50 	bl	8000b28 <__aeabi_dcmpeq>
 8012c88:	b110      	cbz	r0, 8012c90 <_dtoa_r+0x6d8>
 8012c8a:	9b02      	ldr	r3, [sp, #8]
 8012c8c:	07d9      	lsls	r1, r3, #31
 8012c8e:	d40f      	bmi.n	8012cb0 <_dtoa_r+0x6f8>
 8012c90:	4620      	mov	r0, r4
 8012c92:	4659      	mov	r1, fp
 8012c94:	f000 facc 	bl	8013230 <_Bfree>
 8012c98:	2300      	movs	r3, #0
 8012c9a:	702b      	strb	r3, [r5, #0]
 8012c9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012c9e:	f10a 0001 	add.w	r0, sl, #1
 8012ca2:	6018      	str	r0, [r3, #0]
 8012ca4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	f43f acd8 	beq.w	801265c <_dtoa_r+0xa4>
 8012cac:	601d      	str	r5, [r3, #0]
 8012cae:	e4d5      	b.n	801265c <_dtoa_r+0xa4>
 8012cb0:	f8cd a01c 	str.w	sl, [sp, #28]
 8012cb4:	462b      	mov	r3, r5
 8012cb6:	461d      	mov	r5, r3
 8012cb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012cbc:	2a39      	cmp	r2, #57	; 0x39
 8012cbe:	d108      	bne.n	8012cd2 <_dtoa_r+0x71a>
 8012cc0:	9a00      	ldr	r2, [sp, #0]
 8012cc2:	429a      	cmp	r2, r3
 8012cc4:	d1f7      	bne.n	8012cb6 <_dtoa_r+0x6fe>
 8012cc6:	9a07      	ldr	r2, [sp, #28]
 8012cc8:	9900      	ldr	r1, [sp, #0]
 8012cca:	3201      	adds	r2, #1
 8012ccc:	9207      	str	r2, [sp, #28]
 8012cce:	2230      	movs	r2, #48	; 0x30
 8012cd0:	700a      	strb	r2, [r1, #0]
 8012cd2:	781a      	ldrb	r2, [r3, #0]
 8012cd4:	3201      	adds	r2, #1
 8012cd6:	701a      	strb	r2, [r3, #0]
 8012cd8:	e78c      	b.n	8012bf4 <_dtoa_r+0x63c>
 8012cda:	4b7f      	ldr	r3, [pc, #508]	; (8012ed8 <_dtoa_r+0x920>)
 8012cdc:	2200      	movs	r2, #0
 8012cde:	f7ed fcbb 	bl	8000658 <__aeabi_dmul>
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	4606      	mov	r6, r0
 8012ce8:	460f      	mov	r7, r1
 8012cea:	f7ed ff1d 	bl	8000b28 <__aeabi_dcmpeq>
 8012cee:	2800      	cmp	r0, #0
 8012cf0:	d09b      	beq.n	8012c2a <_dtoa_r+0x672>
 8012cf2:	e7cd      	b.n	8012c90 <_dtoa_r+0x6d8>
 8012cf4:	9a08      	ldr	r2, [sp, #32]
 8012cf6:	2a00      	cmp	r2, #0
 8012cf8:	f000 80c4 	beq.w	8012e84 <_dtoa_r+0x8cc>
 8012cfc:	9a05      	ldr	r2, [sp, #20]
 8012cfe:	2a01      	cmp	r2, #1
 8012d00:	f300 80a8 	bgt.w	8012e54 <_dtoa_r+0x89c>
 8012d04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012d06:	2a00      	cmp	r2, #0
 8012d08:	f000 80a0 	beq.w	8012e4c <_dtoa_r+0x894>
 8012d0c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012d10:	9e06      	ldr	r6, [sp, #24]
 8012d12:	4645      	mov	r5, r8
 8012d14:	9a04      	ldr	r2, [sp, #16]
 8012d16:	2101      	movs	r1, #1
 8012d18:	441a      	add	r2, r3
 8012d1a:	4620      	mov	r0, r4
 8012d1c:	4498      	add	r8, r3
 8012d1e:	9204      	str	r2, [sp, #16]
 8012d20:	f000 fb42 	bl	80133a8 <__i2b>
 8012d24:	4607      	mov	r7, r0
 8012d26:	2d00      	cmp	r5, #0
 8012d28:	dd0b      	ble.n	8012d42 <_dtoa_r+0x78a>
 8012d2a:	9b04      	ldr	r3, [sp, #16]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	dd08      	ble.n	8012d42 <_dtoa_r+0x78a>
 8012d30:	42ab      	cmp	r3, r5
 8012d32:	9a04      	ldr	r2, [sp, #16]
 8012d34:	bfa8      	it	ge
 8012d36:	462b      	movge	r3, r5
 8012d38:	eba8 0803 	sub.w	r8, r8, r3
 8012d3c:	1aed      	subs	r5, r5, r3
 8012d3e:	1ad3      	subs	r3, r2, r3
 8012d40:	9304      	str	r3, [sp, #16]
 8012d42:	9b06      	ldr	r3, [sp, #24]
 8012d44:	b1fb      	cbz	r3, 8012d86 <_dtoa_r+0x7ce>
 8012d46:	9b08      	ldr	r3, [sp, #32]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	f000 809f 	beq.w	8012e8c <_dtoa_r+0x8d4>
 8012d4e:	2e00      	cmp	r6, #0
 8012d50:	dd11      	ble.n	8012d76 <_dtoa_r+0x7be>
 8012d52:	4639      	mov	r1, r7
 8012d54:	4632      	mov	r2, r6
 8012d56:	4620      	mov	r0, r4
 8012d58:	f000 fbe2 	bl	8013520 <__pow5mult>
 8012d5c:	465a      	mov	r2, fp
 8012d5e:	4601      	mov	r1, r0
 8012d60:	4607      	mov	r7, r0
 8012d62:	4620      	mov	r0, r4
 8012d64:	f000 fb36 	bl	80133d4 <__multiply>
 8012d68:	4659      	mov	r1, fp
 8012d6a:	9007      	str	r0, [sp, #28]
 8012d6c:	4620      	mov	r0, r4
 8012d6e:	f000 fa5f 	bl	8013230 <_Bfree>
 8012d72:	9b07      	ldr	r3, [sp, #28]
 8012d74:	469b      	mov	fp, r3
 8012d76:	9b06      	ldr	r3, [sp, #24]
 8012d78:	1b9a      	subs	r2, r3, r6
 8012d7a:	d004      	beq.n	8012d86 <_dtoa_r+0x7ce>
 8012d7c:	4659      	mov	r1, fp
 8012d7e:	4620      	mov	r0, r4
 8012d80:	f000 fbce 	bl	8013520 <__pow5mult>
 8012d84:	4683      	mov	fp, r0
 8012d86:	2101      	movs	r1, #1
 8012d88:	4620      	mov	r0, r4
 8012d8a:	f000 fb0d 	bl	80133a8 <__i2b>
 8012d8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	4606      	mov	r6, r0
 8012d94:	dd7c      	ble.n	8012e90 <_dtoa_r+0x8d8>
 8012d96:	461a      	mov	r2, r3
 8012d98:	4601      	mov	r1, r0
 8012d9a:	4620      	mov	r0, r4
 8012d9c:	f000 fbc0 	bl	8013520 <__pow5mult>
 8012da0:	9b05      	ldr	r3, [sp, #20]
 8012da2:	2b01      	cmp	r3, #1
 8012da4:	4606      	mov	r6, r0
 8012da6:	dd76      	ble.n	8012e96 <_dtoa_r+0x8de>
 8012da8:	2300      	movs	r3, #0
 8012daa:	9306      	str	r3, [sp, #24]
 8012dac:	6933      	ldr	r3, [r6, #16]
 8012dae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012db2:	6918      	ldr	r0, [r3, #16]
 8012db4:	f000 faa8 	bl	8013308 <__hi0bits>
 8012db8:	f1c0 0020 	rsb	r0, r0, #32
 8012dbc:	9b04      	ldr	r3, [sp, #16]
 8012dbe:	4418      	add	r0, r3
 8012dc0:	f010 001f 	ands.w	r0, r0, #31
 8012dc4:	f000 8086 	beq.w	8012ed4 <_dtoa_r+0x91c>
 8012dc8:	f1c0 0320 	rsb	r3, r0, #32
 8012dcc:	2b04      	cmp	r3, #4
 8012dce:	dd7f      	ble.n	8012ed0 <_dtoa_r+0x918>
 8012dd0:	f1c0 001c 	rsb	r0, r0, #28
 8012dd4:	9b04      	ldr	r3, [sp, #16]
 8012dd6:	4403      	add	r3, r0
 8012dd8:	4480      	add	r8, r0
 8012dda:	4405      	add	r5, r0
 8012ddc:	9304      	str	r3, [sp, #16]
 8012dde:	f1b8 0f00 	cmp.w	r8, #0
 8012de2:	dd05      	ble.n	8012df0 <_dtoa_r+0x838>
 8012de4:	4659      	mov	r1, fp
 8012de6:	4642      	mov	r2, r8
 8012de8:	4620      	mov	r0, r4
 8012dea:	f000 fbf3 	bl	80135d4 <__lshift>
 8012dee:	4683      	mov	fp, r0
 8012df0:	9b04      	ldr	r3, [sp, #16]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	dd05      	ble.n	8012e02 <_dtoa_r+0x84a>
 8012df6:	4631      	mov	r1, r6
 8012df8:	461a      	mov	r2, r3
 8012dfa:	4620      	mov	r0, r4
 8012dfc:	f000 fbea 	bl	80135d4 <__lshift>
 8012e00:	4606      	mov	r6, r0
 8012e02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d069      	beq.n	8012edc <_dtoa_r+0x924>
 8012e08:	4631      	mov	r1, r6
 8012e0a:	4658      	mov	r0, fp
 8012e0c:	f000 fc4e 	bl	80136ac <__mcmp>
 8012e10:	2800      	cmp	r0, #0
 8012e12:	da63      	bge.n	8012edc <_dtoa_r+0x924>
 8012e14:	2300      	movs	r3, #0
 8012e16:	4659      	mov	r1, fp
 8012e18:	220a      	movs	r2, #10
 8012e1a:	4620      	mov	r0, r4
 8012e1c:	f000 fa2a 	bl	8013274 <__multadd>
 8012e20:	9b08      	ldr	r3, [sp, #32]
 8012e22:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012e26:	4683      	mov	fp, r0
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	f000 818f 	beq.w	801314c <_dtoa_r+0xb94>
 8012e2e:	4639      	mov	r1, r7
 8012e30:	2300      	movs	r3, #0
 8012e32:	220a      	movs	r2, #10
 8012e34:	4620      	mov	r0, r4
 8012e36:	f000 fa1d 	bl	8013274 <__multadd>
 8012e3a:	f1b9 0f00 	cmp.w	r9, #0
 8012e3e:	4607      	mov	r7, r0
 8012e40:	f300 808e 	bgt.w	8012f60 <_dtoa_r+0x9a8>
 8012e44:	9b05      	ldr	r3, [sp, #20]
 8012e46:	2b02      	cmp	r3, #2
 8012e48:	dc50      	bgt.n	8012eec <_dtoa_r+0x934>
 8012e4a:	e089      	b.n	8012f60 <_dtoa_r+0x9a8>
 8012e4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012e4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012e52:	e75d      	b.n	8012d10 <_dtoa_r+0x758>
 8012e54:	9b01      	ldr	r3, [sp, #4]
 8012e56:	1e5e      	subs	r6, r3, #1
 8012e58:	9b06      	ldr	r3, [sp, #24]
 8012e5a:	42b3      	cmp	r3, r6
 8012e5c:	bfbf      	itttt	lt
 8012e5e:	9b06      	ldrlt	r3, [sp, #24]
 8012e60:	9606      	strlt	r6, [sp, #24]
 8012e62:	1af2      	sublt	r2, r6, r3
 8012e64:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8012e66:	bfb6      	itet	lt
 8012e68:	189b      	addlt	r3, r3, r2
 8012e6a:	1b9e      	subge	r6, r3, r6
 8012e6c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8012e6e:	9b01      	ldr	r3, [sp, #4]
 8012e70:	bfb8      	it	lt
 8012e72:	2600      	movlt	r6, #0
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	bfb5      	itete	lt
 8012e78:	eba8 0503 	sublt.w	r5, r8, r3
 8012e7c:	9b01      	ldrge	r3, [sp, #4]
 8012e7e:	2300      	movlt	r3, #0
 8012e80:	4645      	movge	r5, r8
 8012e82:	e747      	b.n	8012d14 <_dtoa_r+0x75c>
 8012e84:	9e06      	ldr	r6, [sp, #24]
 8012e86:	9f08      	ldr	r7, [sp, #32]
 8012e88:	4645      	mov	r5, r8
 8012e8a:	e74c      	b.n	8012d26 <_dtoa_r+0x76e>
 8012e8c:	9a06      	ldr	r2, [sp, #24]
 8012e8e:	e775      	b.n	8012d7c <_dtoa_r+0x7c4>
 8012e90:	9b05      	ldr	r3, [sp, #20]
 8012e92:	2b01      	cmp	r3, #1
 8012e94:	dc18      	bgt.n	8012ec8 <_dtoa_r+0x910>
 8012e96:	9b02      	ldr	r3, [sp, #8]
 8012e98:	b9b3      	cbnz	r3, 8012ec8 <_dtoa_r+0x910>
 8012e9a:	9b03      	ldr	r3, [sp, #12]
 8012e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012ea0:	b9a3      	cbnz	r3, 8012ecc <_dtoa_r+0x914>
 8012ea2:	9b03      	ldr	r3, [sp, #12]
 8012ea4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012ea8:	0d1b      	lsrs	r3, r3, #20
 8012eaa:	051b      	lsls	r3, r3, #20
 8012eac:	b12b      	cbz	r3, 8012eba <_dtoa_r+0x902>
 8012eae:	9b04      	ldr	r3, [sp, #16]
 8012eb0:	3301      	adds	r3, #1
 8012eb2:	9304      	str	r3, [sp, #16]
 8012eb4:	f108 0801 	add.w	r8, r8, #1
 8012eb8:	2301      	movs	r3, #1
 8012eba:	9306      	str	r3, [sp, #24]
 8012ebc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	f47f af74 	bne.w	8012dac <_dtoa_r+0x7f4>
 8012ec4:	2001      	movs	r0, #1
 8012ec6:	e779      	b.n	8012dbc <_dtoa_r+0x804>
 8012ec8:	2300      	movs	r3, #0
 8012eca:	e7f6      	b.n	8012eba <_dtoa_r+0x902>
 8012ecc:	9b02      	ldr	r3, [sp, #8]
 8012ece:	e7f4      	b.n	8012eba <_dtoa_r+0x902>
 8012ed0:	d085      	beq.n	8012dde <_dtoa_r+0x826>
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	301c      	adds	r0, #28
 8012ed6:	e77d      	b.n	8012dd4 <_dtoa_r+0x81c>
 8012ed8:	40240000 	.word	0x40240000
 8012edc:	9b01      	ldr	r3, [sp, #4]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	dc38      	bgt.n	8012f54 <_dtoa_r+0x99c>
 8012ee2:	9b05      	ldr	r3, [sp, #20]
 8012ee4:	2b02      	cmp	r3, #2
 8012ee6:	dd35      	ble.n	8012f54 <_dtoa_r+0x99c>
 8012ee8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012eec:	f1b9 0f00 	cmp.w	r9, #0
 8012ef0:	d10d      	bne.n	8012f0e <_dtoa_r+0x956>
 8012ef2:	4631      	mov	r1, r6
 8012ef4:	464b      	mov	r3, r9
 8012ef6:	2205      	movs	r2, #5
 8012ef8:	4620      	mov	r0, r4
 8012efa:	f000 f9bb 	bl	8013274 <__multadd>
 8012efe:	4601      	mov	r1, r0
 8012f00:	4606      	mov	r6, r0
 8012f02:	4658      	mov	r0, fp
 8012f04:	f000 fbd2 	bl	80136ac <__mcmp>
 8012f08:	2800      	cmp	r0, #0
 8012f0a:	f73f adbd 	bgt.w	8012a88 <_dtoa_r+0x4d0>
 8012f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f10:	9d00      	ldr	r5, [sp, #0]
 8012f12:	ea6f 0a03 	mvn.w	sl, r3
 8012f16:	f04f 0800 	mov.w	r8, #0
 8012f1a:	4631      	mov	r1, r6
 8012f1c:	4620      	mov	r0, r4
 8012f1e:	f000 f987 	bl	8013230 <_Bfree>
 8012f22:	2f00      	cmp	r7, #0
 8012f24:	f43f aeb4 	beq.w	8012c90 <_dtoa_r+0x6d8>
 8012f28:	f1b8 0f00 	cmp.w	r8, #0
 8012f2c:	d005      	beq.n	8012f3a <_dtoa_r+0x982>
 8012f2e:	45b8      	cmp	r8, r7
 8012f30:	d003      	beq.n	8012f3a <_dtoa_r+0x982>
 8012f32:	4641      	mov	r1, r8
 8012f34:	4620      	mov	r0, r4
 8012f36:	f000 f97b 	bl	8013230 <_Bfree>
 8012f3a:	4639      	mov	r1, r7
 8012f3c:	4620      	mov	r0, r4
 8012f3e:	f000 f977 	bl	8013230 <_Bfree>
 8012f42:	e6a5      	b.n	8012c90 <_dtoa_r+0x6d8>
 8012f44:	2600      	movs	r6, #0
 8012f46:	4637      	mov	r7, r6
 8012f48:	e7e1      	b.n	8012f0e <_dtoa_r+0x956>
 8012f4a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012f4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012f50:	4637      	mov	r7, r6
 8012f52:	e599      	b.n	8012a88 <_dtoa_r+0x4d0>
 8012f54:	9b08      	ldr	r3, [sp, #32]
 8012f56:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	f000 80fd 	beq.w	801315a <_dtoa_r+0xba2>
 8012f60:	2d00      	cmp	r5, #0
 8012f62:	dd05      	ble.n	8012f70 <_dtoa_r+0x9b8>
 8012f64:	4639      	mov	r1, r7
 8012f66:	462a      	mov	r2, r5
 8012f68:	4620      	mov	r0, r4
 8012f6a:	f000 fb33 	bl	80135d4 <__lshift>
 8012f6e:	4607      	mov	r7, r0
 8012f70:	9b06      	ldr	r3, [sp, #24]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d05c      	beq.n	8013030 <_dtoa_r+0xa78>
 8012f76:	6879      	ldr	r1, [r7, #4]
 8012f78:	4620      	mov	r0, r4
 8012f7a:	f000 f919 	bl	80131b0 <_Balloc>
 8012f7e:	4605      	mov	r5, r0
 8012f80:	b928      	cbnz	r0, 8012f8e <_dtoa_r+0x9d6>
 8012f82:	4b80      	ldr	r3, [pc, #512]	; (8013184 <_dtoa_r+0xbcc>)
 8012f84:	4602      	mov	r2, r0
 8012f86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012f8a:	f7ff bb2e 	b.w	80125ea <_dtoa_r+0x32>
 8012f8e:	693a      	ldr	r2, [r7, #16]
 8012f90:	3202      	adds	r2, #2
 8012f92:	0092      	lsls	r2, r2, #2
 8012f94:	f107 010c 	add.w	r1, r7, #12
 8012f98:	300c      	adds	r0, #12
 8012f9a:	f7fe fd27 	bl	80119ec <memcpy>
 8012f9e:	2201      	movs	r2, #1
 8012fa0:	4629      	mov	r1, r5
 8012fa2:	4620      	mov	r0, r4
 8012fa4:	f000 fb16 	bl	80135d4 <__lshift>
 8012fa8:	9b00      	ldr	r3, [sp, #0]
 8012faa:	3301      	adds	r3, #1
 8012fac:	9301      	str	r3, [sp, #4]
 8012fae:	9b00      	ldr	r3, [sp, #0]
 8012fb0:	444b      	add	r3, r9
 8012fb2:	9307      	str	r3, [sp, #28]
 8012fb4:	9b02      	ldr	r3, [sp, #8]
 8012fb6:	f003 0301 	and.w	r3, r3, #1
 8012fba:	46b8      	mov	r8, r7
 8012fbc:	9306      	str	r3, [sp, #24]
 8012fbe:	4607      	mov	r7, r0
 8012fc0:	9b01      	ldr	r3, [sp, #4]
 8012fc2:	4631      	mov	r1, r6
 8012fc4:	3b01      	subs	r3, #1
 8012fc6:	4658      	mov	r0, fp
 8012fc8:	9302      	str	r3, [sp, #8]
 8012fca:	f7ff fa69 	bl	80124a0 <quorem>
 8012fce:	4603      	mov	r3, r0
 8012fd0:	3330      	adds	r3, #48	; 0x30
 8012fd2:	9004      	str	r0, [sp, #16]
 8012fd4:	4641      	mov	r1, r8
 8012fd6:	4658      	mov	r0, fp
 8012fd8:	9308      	str	r3, [sp, #32]
 8012fda:	f000 fb67 	bl	80136ac <__mcmp>
 8012fde:	463a      	mov	r2, r7
 8012fe0:	4681      	mov	r9, r0
 8012fe2:	4631      	mov	r1, r6
 8012fe4:	4620      	mov	r0, r4
 8012fe6:	f000 fb7d 	bl	80136e4 <__mdiff>
 8012fea:	68c2      	ldr	r2, [r0, #12]
 8012fec:	9b08      	ldr	r3, [sp, #32]
 8012fee:	4605      	mov	r5, r0
 8012ff0:	bb02      	cbnz	r2, 8013034 <_dtoa_r+0xa7c>
 8012ff2:	4601      	mov	r1, r0
 8012ff4:	4658      	mov	r0, fp
 8012ff6:	f000 fb59 	bl	80136ac <__mcmp>
 8012ffa:	9b08      	ldr	r3, [sp, #32]
 8012ffc:	4602      	mov	r2, r0
 8012ffe:	4629      	mov	r1, r5
 8013000:	4620      	mov	r0, r4
 8013002:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8013006:	f000 f913 	bl	8013230 <_Bfree>
 801300a:	9b05      	ldr	r3, [sp, #20]
 801300c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801300e:	9d01      	ldr	r5, [sp, #4]
 8013010:	ea43 0102 	orr.w	r1, r3, r2
 8013014:	9b06      	ldr	r3, [sp, #24]
 8013016:	430b      	orrs	r3, r1
 8013018:	9b08      	ldr	r3, [sp, #32]
 801301a:	d10d      	bne.n	8013038 <_dtoa_r+0xa80>
 801301c:	2b39      	cmp	r3, #57	; 0x39
 801301e:	d029      	beq.n	8013074 <_dtoa_r+0xabc>
 8013020:	f1b9 0f00 	cmp.w	r9, #0
 8013024:	dd01      	ble.n	801302a <_dtoa_r+0xa72>
 8013026:	9b04      	ldr	r3, [sp, #16]
 8013028:	3331      	adds	r3, #49	; 0x31
 801302a:	9a02      	ldr	r2, [sp, #8]
 801302c:	7013      	strb	r3, [r2, #0]
 801302e:	e774      	b.n	8012f1a <_dtoa_r+0x962>
 8013030:	4638      	mov	r0, r7
 8013032:	e7b9      	b.n	8012fa8 <_dtoa_r+0x9f0>
 8013034:	2201      	movs	r2, #1
 8013036:	e7e2      	b.n	8012ffe <_dtoa_r+0xa46>
 8013038:	f1b9 0f00 	cmp.w	r9, #0
 801303c:	db06      	blt.n	801304c <_dtoa_r+0xa94>
 801303e:	9905      	ldr	r1, [sp, #20]
 8013040:	ea41 0909 	orr.w	r9, r1, r9
 8013044:	9906      	ldr	r1, [sp, #24]
 8013046:	ea59 0101 	orrs.w	r1, r9, r1
 801304a:	d120      	bne.n	801308e <_dtoa_r+0xad6>
 801304c:	2a00      	cmp	r2, #0
 801304e:	ddec      	ble.n	801302a <_dtoa_r+0xa72>
 8013050:	4659      	mov	r1, fp
 8013052:	2201      	movs	r2, #1
 8013054:	4620      	mov	r0, r4
 8013056:	9301      	str	r3, [sp, #4]
 8013058:	f000 fabc 	bl	80135d4 <__lshift>
 801305c:	4631      	mov	r1, r6
 801305e:	4683      	mov	fp, r0
 8013060:	f000 fb24 	bl	80136ac <__mcmp>
 8013064:	2800      	cmp	r0, #0
 8013066:	9b01      	ldr	r3, [sp, #4]
 8013068:	dc02      	bgt.n	8013070 <_dtoa_r+0xab8>
 801306a:	d1de      	bne.n	801302a <_dtoa_r+0xa72>
 801306c:	07da      	lsls	r2, r3, #31
 801306e:	d5dc      	bpl.n	801302a <_dtoa_r+0xa72>
 8013070:	2b39      	cmp	r3, #57	; 0x39
 8013072:	d1d8      	bne.n	8013026 <_dtoa_r+0xa6e>
 8013074:	9a02      	ldr	r2, [sp, #8]
 8013076:	2339      	movs	r3, #57	; 0x39
 8013078:	7013      	strb	r3, [r2, #0]
 801307a:	462b      	mov	r3, r5
 801307c:	461d      	mov	r5, r3
 801307e:	3b01      	subs	r3, #1
 8013080:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013084:	2a39      	cmp	r2, #57	; 0x39
 8013086:	d050      	beq.n	801312a <_dtoa_r+0xb72>
 8013088:	3201      	adds	r2, #1
 801308a:	701a      	strb	r2, [r3, #0]
 801308c:	e745      	b.n	8012f1a <_dtoa_r+0x962>
 801308e:	2a00      	cmp	r2, #0
 8013090:	dd03      	ble.n	801309a <_dtoa_r+0xae2>
 8013092:	2b39      	cmp	r3, #57	; 0x39
 8013094:	d0ee      	beq.n	8013074 <_dtoa_r+0xabc>
 8013096:	3301      	adds	r3, #1
 8013098:	e7c7      	b.n	801302a <_dtoa_r+0xa72>
 801309a:	9a01      	ldr	r2, [sp, #4]
 801309c:	9907      	ldr	r1, [sp, #28]
 801309e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80130a2:	428a      	cmp	r2, r1
 80130a4:	d02a      	beq.n	80130fc <_dtoa_r+0xb44>
 80130a6:	4659      	mov	r1, fp
 80130a8:	2300      	movs	r3, #0
 80130aa:	220a      	movs	r2, #10
 80130ac:	4620      	mov	r0, r4
 80130ae:	f000 f8e1 	bl	8013274 <__multadd>
 80130b2:	45b8      	cmp	r8, r7
 80130b4:	4683      	mov	fp, r0
 80130b6:	f04f 0300 	mov.w	r3, #0
 80130ba:	f04f 020a 	mov.w	r2, #10
 80130be:	4641      	mov	r1, r8
 80130c0:	4620      	mov	r0, r4
 80130c2:	d107      	bne.n	80130d4 <_dtoa_r+0xb1c>
 80130c4:	f000 f8d6 	bl	8013274 <__multadd>
 80130c8:	4680      	mov	r8, r0
 80130ca:	4607      	mov	r7, r0
 80130cc:	9b01      	ldr	r3, [sp, #4]
 80130ce:	3301      	adds	r3, #1
 80130d0:	9301      	str	r3, [sp, #4]
 80130d2:	e775      	b.n	8012fc0 <_dtoa_r+0xa08>
 80130d4:	f000 f8ce 	bl	8013274 <__multadd>
 80130d8:	4639      	mov	r1, r7
 80130da:	4680      	mov	r8, r0
 80130dc:	2300      	movs	r3, #0
 80130de:	220a      	movs	r2, #10
 80130e0:	4620      	mov	r0, r4
 80130e2:	f000 f8c7 	bl	8013274 <__multadd>
 80130e6:	4607      	mov	r7, r0
 80130e8:	e7f0      	b.n	80130cc <_dtoa_r+0xb14>
 80130ea:	f1b9 0f00 	cmp.w	r9, #0
 80130ee:	9a00      	ldr	r2, [sp, #0]
 80130f0:	bfcc      	ite	gt
 80130f2:	464d      	movgt	r5, r9
 80130f4:	2501      	movle	r5, #1
 80130f6:	4415      	add	r5, r2
 80130f8:	f04f 0800 	mov.w	r8, #0
 80130fc:	4659      	mov	r1, fp
 80130fe:	2201      	movs	r2, #1
 8013100:	4620      	mov	r0, r4
 8013102:	9301      	str	r3, [sp, #4]
 8013104:	f000 fa66 	bl	80135d4 <__lshift>
 8013108:	4631      	mov	r1, r6
 801310a:	4683      	mov	fp, r0
 801310c:	f000 face 	bl	80136ac <__mcmp>
 8013110:	2800      	cmp	r0, #0
 8013112:	dcb2      	bgt.n	801307a <_dtoa_r+0xac2>
 8013114:	d102      	bne.n	801311c <_dtoa_r+0xb64>
 8013116:	9b01      	ldr	r3, [sp, #4]
 8013118:	07db      	lsls	r3, r3, #31
 801311a:	d4ae      	bmi.n	801307a <_dtoa_r+0xac2>
 801311c:	462b      	mov	r3, r5
 801311e:	461d      	mov	r5, r3
 8013120:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013124:	2a30      	cmp	r2, #48	; 0x30
 8013126:	d0fa      	beq.n	801311e <_dtoa_r+0xb66>
 8013128:	e6f7      	b.n	8012f1a <_dtoa_r+0x962>
 801312a:	9a00      	ldr	r2, [sp, #0]
 801312c:	429a      	cmp	r2, r3
 801312e:	d1a5      	bne.n	801307c <_dtoa_r+0xac4>
 8013130:	f10a 0a01 	add.w	sl, sl, #1
 8013134:	2331      	movs	r3, #49	; 0x31
 8013136:	e779      	b.n	801302c <_dtoa_r+0xa74>
 8013138:	4b13      	ldr	r3, [pc, #76]	; (8013188 <_dtoa_r+0xbd0>)
 801313a:	f7ff baaf 	b.w	801269c <_dtoa_r+0xe4>
 801313e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013140:	2b00      	cmp	r3, #0
 8013142:	f47f aa86 	bne.w	8012652 <_dtoa_r+0x9a>
 8013146:	4b11      	ldr	r3, [pc, #68]	; (801318c <_dtoa_r+0xbd4>)
 8013148:	f7ff baa8 	b.w	801269c <_dtoa_r+0xe4>
 801314c:	f1b9 0f00 	cmp.w	r9, #0
 8013150:	dc03      	bgt.n	801315a <_dtoa_r+0xba2>
 8013152:	9b05      	ldr	r3, [sp, #20]
 8013154:	2b02      	cmp	r3, #2
 8013156:	f73f aec9 	bgt.w	8012eec <_dtoa_r+0x934>
 801315a:	9d00      	ldr	r5, [sp, #0]
 801315c:	4631      	mov	r1, r6
 801315e:	4658      	mov	r0, fp
 8013160:	f7ff f99e 	bl	80124a0 <quorem>
 8013164:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013168:	f805 3b01 	strb.w	r3, [r5], #1
 801316c:	9a00      	ldr	r2, [sp, #0]
 801316e:	1aaa      	subs	r2, r5, r2
 8013170:	4591      	cmp	r9, r2
 8013172:	ddba      	ble.n	80130ea <_dtoa_r+0xb32>
 8013174:	4659      	mov	r1, fp
 8013176:	2300      	movs	r3, #0
 8013178:	220a      	movs	r2, #10
 801317a:	4620      	mov	r0, r4
 801317c:	f000 f87a 	bl	8013274 <__multadd>
 8013180:	4683      	mov	fp, r0
 8013182:	e7eb      	b.n	801315c <_dtoa_r+0xba4>
 8013184:	08023e13 	.word	0x08023e13
 8013188:	08023d6c 	.word	0x08023d6c
 801318c:	08023d90 	.word	0x08023d90

08013190 <_localeconv_r>:
 8013190:	4800      	ldr	r0, [pc, #0]	; (8013194 <_localeconv_r+0x4>)
 8013192:	4770      	bx	lr
 8013194:	200007f8 	.word	0x200007f8

08013198 <__malloc_lock>:
 8013198:	4801      	ldr	r0, [pc, #4]	; (80131a0 <__malloc_lock+0x8>)
 801319a:	f000 bd48 	b.w	8013c2e <__retarget_lock_acquire_recursive>
 801319e:	bf00      	nop
 80131a0:	20001c58 	.word	0x20001c58

080131a4 <__malloc_unlock>:
 80131a4:	4801      	ldr	r0, [pc, #4]	; (80131ac <__malloc_unlock+0x8>)
 80131a6:	f000 bd43 	b.w	8013c30 <__retarget_lock_release_recursive>
 80131aa:	bf00      	nop
 80131ac:	20001c58 	.word	0x20001c58

080131b0 <_Balloc>:
 80131b0:	b570      	push	{r4, r5, r6, lr}
 80131b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80131b4:	4604      	mov	r4, r0
 80131b6:	460d      	mov	r5, r1
 80131b8:	b976      	cbnz	r6, 80131d8 <_Balloc+0x28>
 80131ba:	2010      	movs	r0, #16
 80131bc:	f7fe fc06 	bl	80119cc <malloc>
 80131c0:	4602      	mov	r2, r0
 80131c2:	6260      	str	r0, [r4, #36]	; 0x24
 80131c4:	b920      	cbnz	r0, 80131d0 <_Balloc+0x20>
 80131c6:	4b18      	ldr	r3, [pc, #96]	; (8013228 <_Balloc+0x78>)
 80131c8:	4818      	ldr	r0, [pc, #96]	; (801322c <_Balloc+0x7c>)
 80131ca:	2166      	movs	r1, #102	; 0x66
 80131cc:	f000 fcfe 	bl	8013bcc <__assert_func>
 80131d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80131d4:	6006      	str	r6, [r0, #0]
 80131d6:	60c6      	str	r6, [r0, #12]
 80131d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80131da:	68f3      	ldr	r3, [r6, #12]
 80131dc:	b183      	cbz	r3, 8013200 <_Balloc+0x50>
 80131de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80131e0:	68db      	ldr	r3, [r3, #12]
 80131e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80131e6:	b9b8      	cbnz	r0, 8013218 <_Balloc+0x68>
 80131e8:	2101      	movs	r1, #1
 80131ea:	fa01 f605 	lsl.w	r6, r1, r5
 80131ee:	1d72      	adds	r2, r6, #5
 80131f0:	0092      	lsls	r2, r2, #2
 80131f2:	4620      	mov	r0, r4
 80131f4:	f000 fb5a 	bl	80138ac <_calloc_r>
 80131f8:	b160      	cbz	r0, 8013214 <_Balloc+0x64>
 80131fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80131fe:	e00e      	b.n	801321e <_Balloc+0x6e>
 8013200:	2221      	movs	r2, #33	; 0x21
 8013202:	2104      	movs	r1, #4
 8013204:	4620      	mov	r0, r4
 8013206:	f000 fb51 	bl	80138ac <_calloc_r>
 801320a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801320c:	60f0      	str	r0, [r6, #12]
 801320e:	68db      	ldr	r3, [r3, #12]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d1e4      	bne.n	80131de <_Balloc+0x2e>
 8013214:	2000      	movs	r0, #0
 8013216:	bd70      	pop	{r4, r5, r6, pc}
 8013218:	6802      	ldr	r2, [r0, #0]
 801321a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801321e:	2300      	movs	r3, #0
 8013220:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013224:	e7f7      	b.n	8013216 <_Balloc+0x66>
 8013226:	bf00      	nop
 8013228:	08023d9d 	.word	0x08023d9d
 801322c:	08023e24 	.word	0x08023e24

08013230 <_Bfree>:
 8013230:	b570      	push	{r4, r5, r6, lr}
 8013232:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013234:	4605      	mov	r5, r0
 8013236:	460c      	mov	r4, r1
 8013238:	b976      	cbnz	r6, 8013258 <_Bfree+0x28>
 801323a:	2010      	movs	r0, #16
 801323c:	f7fe fbc6 	bl	80119cc <malloc>
 8013240:	4602      	mov	r2, r0
 8013242:	6268      	str	r0, [r5, #36]	; 0x24
 8013244:	b920      	cbnz	r0, 8013250 <_Bfree+0x20>
 8013246:	4b09      	ldr	r3, [pc, #36]	; (801326c <_Bfree+0x3c>)
 8013248:	4809      	ldr	r0, [pc, #36]	; (8013270 <_Bfree+0x40>)
 801324a:	218a      	movs	r1, #138	; 0x8a
 801324c:	f000 fcbe 	bl	8013bcc <__assert_func>
 8013250:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013254:	6006      	str	r6, [r0, #0]
 8013256:	60c6      	str	r6, [r0, #12]
 8013258:	b13c      	cbz	r4, 801326a <_Bfree+0x3a>
 801325a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801325c:	6862      	ldr	r2, [r4, #4]
 801325e:	68db      	ldr	r3, [r3, #12]
 8013260:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013264:	6021      	str	r1, [r4, #0]
 8013266:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801326a:	bd70      	pop	{r4, r5, r6, pc}
 801326c:	08023d9d 	.word	0x08023d9d
 8013270:	08023e24 	.word	0x08023e24

08013274 <__multadd>:
 8013274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013278:	690e      	ldr	r6, [r1, #16]
 801327a:	4607      	mov	r7, r0
 801327c:	4698      	mov	r8, r3
 801327e:	460c      	mov	r4, r1
 8013280:	f101 0014 	add.w	r0, r1, #20
 8013284:	2300      	movs	r3, #0
 8013286:	6805      	ldr	r5, [r0, #0]
 8013288:	b2a9      	uxth	r1, r5
 801328a:	fb02 8101 	mla	r1, r2, r1, r8
 801328e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8013292:	0c2d      	lsrs	r5, r5, #16
 8013294:	fb02 c505 	mla	r5, r2, r5, ip
 8013298:	b289      	uxth	r1, r1
 801329a:	3301      	adds	r3, #1
 801329c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80132a0:	429e      	cmp	r6, r3
 80132a2:	f840 1b04 	str.w	r1, [r0], #4
 80132a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80132aa:	dcec      	bgt.n	8013286 <__multadd+0x12>
 80132ac:	f1b8 0f00 	cmp.w	r8, #0
 80132b0:	d022      	beq.n	80132f8 <__multadd+0x84>
 80132b2:	68a3      	ldr	r3, [r4, #8]
 80132b4:	42b3      	cmp	r3, r6
 80132b6:	dc19      	bgt.n	80132ec <__multadd+0x78>
 80132b8:	6861      	ldr	r1, [r4, #4]
 80132ba:	4638      	mov	r0, r7
 80132bc:	3101      	adds	r1, #1
 80132be:	f7ff ff77 	bl	80131b0 <_Balloc>
 80132c2:	4605      	mov	r5, r0
 80132c4:	b928      	cbnz	r0, 80132d2 <__multadd+0x5e>
 80132c6:	4602      	mov	r2, r0
 80132c8:	4b0d      	ldr	r3, [pc, #52]	; (8013300 <__multadd+0x8c>)
 80132ca:	480e      	ldr	r0, [pc, #56]	; (8013304 <__multadd+0x90>)
 80132cc:	21b5      	movs	r1, #181	; 0xb5
 80132ce:	f000 fc7d 	bl	8013bcc <__assert_func>
 80132d2:	6922      	ldr	r2, [r4, #16]
 80132d4:	3202      	adds	r2, #2
 80132d6:	f104 010c 	add.w	r1, r4, #12
 80132da:	0092      	lsls	r2, r2, #2
 80132dc:	300c      	adds	r0, #12
 80132de:	f7fe fb85 	bl	80119ec <memcpy>
 80132e2:	4621      	mov	r1, r4
 80132e4:	4638      	mov	r0, r7
 80132e6:	f7ff ffa3 	bl	8013230 <_Bfree>
 80132ea:	462c      	mov	r4, r5
 80132ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80132f0:	3601      	adds	r6, #1
 80132f2:	f8c3 8014 	str.w	r8, [r3, #20]
 80132f6:	6126      	str	r6, [r4, #16]
 80132f8:	4620      	mov	r0, r4
 80132fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132fe:	bf00      	nop
 8013300:	08023e13 	.word	0x08023e13
 8013304:	08023e24 	.word	0x08023e24

08013308 <__hi0bits>:
 8013308:	0c03      	lsrs	r3, r0, #16
 801330a:	041b      	lsls	r3, r3, #16
 801330c:	b9d3      	cbnz	r3, 8013344 <__hi0bits+0x3c>
 801330e:	0400      	lsls	r0, r0, #16
 8013310:	2310      	movs	r3, #16
 8013312:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013316:	bf04      	itt	eq
 8013318:	0200      	lsleq	r0, r0, #8
 801331a:	3308      	addeq	r3, #8
 801331c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013320:	bf04      	itt	eq
 8013322:	0100      	lsleq	r0, r0, #4
 8013324:	3304      	addeq	r3, #4
 8013326:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801332a:	bf04      	itt	eq
 801332c:	0080      	lsleq	r0, r0, #2
 801332e:	3302      	addeq	r3, #2
 8013330:	2800      	cmp	r0, #0
 8013332:	db05      	blt.n	8013340 <__hi0bits+0x38>
 8013334:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013338:	f103 0301 	add.w	r3, r3, #1
 801333c:	bf08      	it	eq
 801333e:	2320      	moveq	r3, #32
 8013340:	4618      	mov	r0, r3
 8013342:	4770      	bx	lr
 8013344:	2300      	movs	r3, #0
 8013346:	e7e4      	b.n	8013312 <__hi0bits+0xa>

08013348 <__lo0bits>:
 8013348:	6803      	ldr	r3, [r0, #0]
 801334a:	f013 0207 	ands.w	r2, r3, #7
 801334e:	4601      	mov	r1, r0
 8013350:	d00b      	beq.n	801336a <__lo0bits+0x22>
 8013352:	07da      	lsls	r2, r3, #31
 8013354:	d424      	bmi.n	80133a0 <__lo0bits+0x58>
 8013356:	0798      	lsls	r0, r3, #30
 8013358:	bf49      	itett	mi
 801335a:	085b      	lsrmi	r3, r3, #1
 801335c:	089b      	lsrpl	r3, r3, #2
 801335e:	2001      	movmi	r0, #1
 8013360:	600b      	strmi	r3, [r1, #0]
 8013362:	bf5c      	itt	pl
 8013364:	600b      	strpl	r3, [r1, #0]
 8013366:	2002      	movpl	r0, #2
 8013368:	4770      	bx	lr
 801336a:	b298      	uxth	r0, r3
 801336c:	b9b0      	cbnz	r0, 801339c <__lo0bits+0x54>
 801336e:	0c1b      	lsrs	r3, r3, #16
 8013370:	2010      	movs	r0, #16
 8013372:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013376:	bf04      	itt	eq
 8013378:	0a1b      	lsreq	r3, r3, #8
 801337a:	3008      	addeq	r0, #8
 801337c:	071a      	lsls	r2, r3, #28
 801337e:	bf04      	itt	eq
 8013380:	091b      	lsreq	r3, r3, #4
 8013382:	3004      	addeq	r0, #4
 8013384:	079a      	lsls	r2, r3, #30
 8013386:	bf04      	itt	eq
 8013388:	089b      	lsreq	r3, r3, #2
 801338a:	3002      	addeq	r0, #2
 801338c:	07da      	lsls	r2, r3, #31
 801338e:	d403      	bmi.n	8013398 <__lo0bits+0x50>
 8013390:	085b      	lsrs	r3, r3, #1
 8013392:	f100 0001 	add.w	r0, r0, #1
 8013396:	d005      	beq.n	80133a4 <__lo0bits+0x5c>
 8013398:	600b      	str	r3, [r1, #0]
 801339a:	4770      	bx	lr
 801339c:	4610      	mov	r0, r2
 801339e:	e7e8      	b.n	8013372 <__lo0bits+0x2a>
 80133a0:	2000      	movs	r0, #0
 80133a2:	4770      	bx	lr
 80133a4:	2020      	movs	r0, #32
 80133a6:	4770      	bx	lr

080133a8 <__i2b>:
 80133a8:	b510      	push	{r4, lr}
 80133aa:	460c      	mov	r4, r1
 80133ac:	2101      	movs	r1, #1
 80133ae:	f7ff feff 	bl	80131b0 <_Balloc>
 80133b2:	4602      	mov	r2, r0
 80133b4:	b928      	cbnz	r0, 80133c2 <__i2b+0x1a>
 80133b6:	4b05      	ldr	r3, [pc, #20]	; (80133cc <__i2b+0x24>)
 80133b8:	4805      	ldr	r0, [pc, #20]	; (80133d0 <__i2b+0x28>)
 80133ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80133be:	f000 fc05 	bl	8013bcc <__assert_func>
 80133c2:	2301      	movs	r3, #1
 80133c4:	6144      	str	r4, [r0, #20]
 80133c6:	6103      	str	r3, [r0, #16]
 80133c8:	bd10      	pop	{r4, pc}
 80133ca:	bf00      	nop
 80133cc:	08023e13 	.word	0x08023e13
 80133d0:	08023e24 	.word	0x08023e24

080133d4 <__multiply>:
 80133d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133d8:	4614      	mov	r4, r2
 80133da:	690a      	ldr	r2, [r1, #16]
 80133dc:	6923      	ldr	r3, [r4, #16]
 80133de:	429a      	cmp	r2, r3
 80133e0:	bfb8      	it	lt
 80133e2:	460b      	movlt	r3, r1
 80133e4:	460d      	mov	r5, r1
 80133e6:	bfbc      	itt	lt
 80133e8:	4625      	movlt	r5, r4
 80133ea:	461c      	movlt	r4, r3
 80133ec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80133f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80133f4:	68ab      	ldr	r3, [r5, #8]
 80133f6:	6869      	ldr	r1, [r5, #4]
 80133f8:	eb0a 0709 	add.w	r7, sl, r9
 80133fc:	42bb      	cmp	r3, r7
 80133fe:	b085      	sub	sp, #20
 8013400:	bfb8      	it	lt
 8013402:	3101      	addlt	r1, #1
 8013404:	f7ff fed4 	bl	80131b0 <_Balloc>
 8013408:	b930      	cbnz	r0, 8013418 <__multiply+0x44>
 801340a:	4602      	mov	r2, r0
 801340c:	4b42      	ldr	r3, [pc, #264]	; (8013518 <__multiply+0x144>)
 801340e:	4843      	ldr	r0, [pc, #268]	; (801351c <__multiply+0x148>)
 8013410:	f240 115d 	movw	r1, #349	; 0x15d
 8013414:	f000 fbda 	bl	8013bcc <__assert_func>
 8013418:	f100 0614 	add.w	r6, r0, #20
 801341c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013420:	4633      	mov	r3, r6
 8013422:	2200      	movs	r2, #0
 8013424:	4543      	cmp	r3, r8
 8013426:	d31e      	bcc.n	8013466 <__multiply+0x92>
 8013428:	f105 0c14 	add.w	ip, r5, #20
 801342c:	f104 0314 	add.w	r3, r4, #20
 8013430:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013434:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013438:	9202      	str	r2, [sp, #8]
 801343a:	ebac 0205 	sub.w	r2, ip, r5
 801343e:	3a15      	subs	r2, #21
 8013440:	f022 0203 	bic.w	r2, r2, #3
 8013444:	3204      	adds	r2, #4
 8013446:	f105 0115 	add.w	r1, r5, #21
 801344a:	458c      	cmp	ip, r1
 801344c:	bf38      	it	cc
 801344e:	2204      	movcc	r2, #4
 8013450:	9201      	str	r2, [sp, #4]
 8013452:	9a02      	ldr	r2, [sp, #8]
 8013454:	9303      	str	r3, [sp, #12]
 8013456:	429a      	cmp	r2, r3
 8013458:	d808      	bhi.n	801346c <__multiply+0x98>
 801345a:	2f00      	cmp	r7, #0
 801345c:	dc55      	bgt.n	801350a <__multiply+0x136>
 801345e:	6107      	str	r7, [r0, #16]
 8013460:	b005      	add	sp, #20
 8013462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013466:	f843 2b04 	str.w	r2, [r3], #4
 801346a:	e7db      	b.n	8013424 <__multiply+0x50>
 801346c:	f8b3 a000 	ldrh.w	sl, [r3]
 8013470:	f1ba 0f00 	cmp.w	sl, #0
 8013474:	d020      	beq.n	80134b8 <__multiply+0xe4>
 8013476:	f105 0e14 	add.w	lr, r5, #20
 801347a:	46b1      	mov	r9, r6
 801347c:	2200      	movs	r2, #0
 801347e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8013482:	f8d9 b000 	ldr.w	fp, [r9]
 8013486:	b2a1      	uxth	r1, r4
 8013488:	fa1f fb8b 	uxth.w	fp, fp
 801348c:	fb0a b101 	mla	r1, sl, r1, fp
 8013490:	4411      	add	r1, r2
 8013492:	f8d9 2000 	ldr.w	r2, [r9]
 8013496:	0c24      	lsrs	r4, r4, #16
 8013498:	0c12      	lsrs	r2, r2, #16
 801349a:	fb0a 2404 	mla	r4, sl, r4, r2
 801349e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80134a2:	b289      	uxth	r1, r1
 80134a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80134a8:	45f4      	cmp	ip, lr
 80134aa:	f849 1b04 	str.w	r1, [r9], #4
 80134ae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80134b2:	d8e4      	bhi.n	801347e <__multiply+0xaa>
 80134b4:	9901      	ldr	r1, [sp, #4]
 80134b6:	5072      	str	r2, [r6, r1]
 80134b8:	9a03      	ldr	r2, [sp, #12]
 80134ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80134be:	3304      	adds	r3, #4
 80134c0:	f1b9 0f00 	cmp.w	r9, #0
 80134c4:	d01f      	beq.n	8013506 <__multiply+0x132>
 80134c6:	6834      	ldr	r4, [r6, #0]
 80134c8:	f105 0114 	add.w	r1, r5, #20
 80134cc:	46b6      	mov	lr, r6
 80134ce:	f04f 0a00 	mov.w	sl, #0
 80134d2:	880a      	ldrh	r2, [r1, #0]
 80134d4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80134d8:	fb09 b202 	mla	r2, r9, r2, fp
 80134dc:	4492      	add	sl, r2
 80134de:	b2a4      	uxth	r4, r4
 80134e0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80134e4:	f84e 4b04 	str.w	r4, [lr], #4
 80134e8:	f851 4b04 	ldr.w	r4, [r1], #4
 80134ec:	f8be 2000 	ldrh.w	r2, [lr]
 80134f0:	0c24      	lsrs	r4, r4, #16
 80134f2:	fb09 2404 	mla	r4, r9, r4, r2
 80134f6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80134fa:	458c      	cmp	ip, r1
 80134fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013500:	d8e7      	bhi.n	80134d2 <__multiply+0xfe>
 8013502:	9a01      	ldr	r2, [sp, #4]
 8013504:	50b4      	str	r4, [r6, r2]
 8013506:	3604      	adds	r6, #4
 8013508:	e7a3      	b.n	8013452 <__multiply+0x7e>
 801350a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801350e:	2b00      	cmp	r3, #0
 8013510:	d1a5      	bne.n	801345e <__multiply+0x8a>
 8013512:	3f01      	subs	r7, #1
 8013514:	e7a1      	b.n	801345a <__multiply+0x86>
 8013516:	bf00      	nop
 8013518:	08023e13 	.word	0x08023e13
 801351c:	08023e24 	.word	0x08023e24

08013520 <__pow5mult>:
 8013520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013524:	4615      	mov	r5, r2
 8013526:	f012 0203 	ands.w	r2, r2, #3
 801352a:	4606      	mov	r6, r0
 801352c:	460f      	mov	r7, r1
 801352e:	d007      	beq.n	8013540 <__pow5mult+0x20>
 8013530:	4c25      	ldr	r4, [pc, #148]	; (80135c8 <__pow5mult+0xa8>)
 8013532:	3a01      	subs	r2, #1
 8013534:	2300      	movs	r3, #0
 8013536:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801353a:	f7ff fe9b 	bl	8013274 <__multadd>
 801353e:	4607      	mov	r7, r0
 8013540:	10ad      	asrs	r5, r5, #2
 8013542:	d03d      	beq.n	80135c0 <__pow5mult+0xa0>
 8013544:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013546:	b97c      	cbnz	r4, 8013568 <__pow5mult+0x48>
 8013548:	2010      	movs	r0, #16
 801354a:	f7fe fa3f 	bl	80119cc <malloc>
 801354e:	4602      	mov	r2, r0
 8013550:	6270      	str	r0, [r6, #36]	; 0x24
 8013552:	b928      	cbnz	r0, 8013560 <__pow5mult+0x40>
 8013554:	4b1d      	ldr	r3, [pc, #116]	; (80135cc <__pow5mult+0xac>)
 8013556:	481e      	ldr	r0, [pc, #120]	; (80135d0 <__pow5mult+0xb0>)
 8013558:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801355c:	f000 fb36 	bl	8013bcc <__assert_func>
 8013560:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013564:	6004      	str	r4, [r0, #0]
 8013566:	60c4      	str	r4, [r0, #12]
 8013568:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801356c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013570:	b94c      	cbnz	r4, 8013586 <__pow5mult+0x66>
 8013572:	f240 2171 	movw	r1, #625	; 0x271
 8013576:	4630      	mov	r0, r6
 8013578:	f7ff ff16 	bl	80133a8 <__i2b>
 801357c:	2300      	movs	r3, #0
 801357e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013582:	4604      	mov	r4, r0
 8013584:	6003      	str	r3, [r0, #0]
 8013586:	f04f 0900 	mov.w	r9, #0
 801358a:	07eb      	lsls	r3, r5, #31
 801358c:	d50a      	bpl.n	80135a4 <__pow5mult+0x84>
 801358e:	4639      	mov	r1, r7
 8013590:	4622      	mov	r2, r4
 8013592:	4630      	mov	r0, r6
 8013594:	f7ff ff1e 	bl	80133d4 <__multiply>
 8013598:	4639      	mov	r1, r7
 801359a:	4680      	mov	r8, r0
 801359c:	4630      	mov	r0, r6
 801359e:	f7ff fe47 	bl	8013230 <_Bfree>
 80135a2:	4647      	mov	r7, r8
 80135a4:	106d      	asrs	r5, r5, #1
 80135a6:	d00b      	beq.n	80135c0 <__pow5mult+0xa0>
 80135a8:	6820      	ldr	r0, [r4, #0]
 80135aa:	b938      	cbnz	r0, 80135bc <__pow5mult+0x9c>
 80135ac:	4622      	mov	r2, r4
 80135ae:	4621      	mov	r1, r4
 80135b0:	4630      	mov	r0, r6
 80135b2:	f7ff ff0f 	bl	80133d4 <__multiply>
 80135b6:	6020      	str	r0, [r4, #0]
 80135b8:	f8c0 9000 	str.w	r9, [r0]
 80135bc:	4604      	mov	r4, r0
 80135be:	e7e4      	b.n	801358a <__pow5mult+0x6a>
 80135c0:	4638      	mov	r0, r7
 80135c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135c6:	bf00      	nop
 80135c8:	08023f78 	.word	0x08023f78
 80135cc:	08023d9d 	.word	0x08023d9d
 80135d0:	08023e24 	.word	0x08023e24

080135d4 <__lshift>:
 80135d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135d8:	460c      	mov	r4, r1
 80135da:	6849      	ldr	r1, [r1, #4]
 80135dc:	6923      	ldr	r3, [r4, #16]
 80135de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80135e2:	68a3      	ldr	r3, [r4, #8]
 80135e4:	4607      	mov	r7, r0
 80135e6:	4691      	mov	r9, r2
 80135e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80135ec:	f108 0601 	add.w	r6, r8, #1
 80135f0:	42b3      	cmp	r3, r6
 80135f2:	db0b      	blt.n	801360c <__lshift+0x38>
 80135f4:	4638      	mov	r0, r7
 80135f6:	f7ff fddb 	bl	80131b0 <_Balloc>
 80135fa:	4605      	mov	r5, r0
 80135fc:	b948      	cbnz	r0, 8013612 <__lshift+0x3e>
 80135fe:	4602      	mov	r2, r0
 8013600:	4b28      	ldr	r3, [pc, #160]	; (80136a4 <__lshift+0xd0>)
 8013602:	4829      	ldr	r0, [pc, #164]	; (80136a8 <__lshift+0xd4>)
 8013604:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013608:	f000 fae0 	bl	8013bcc <__assert_func>
 801360c:	3101      	adds	r1, #1
 801360e:	005b      	lsls	r3, r3, #1
 8013610:	e7ee      	b.n	80135f0 <__lshift+0x1c>
 8013612:	2300      	movs	r3, #0
 8013614:	f100 0114 	add.w	r1, r0, #20
 8013618:	f100 0210 	add.w	r2, r0, #16
 801361c:	4618      	mov	r0, r3
 801361e:	4553      	cmp	r3, sl
 8013620:	db33      	blt.n	801368a <__lshift+0xb6>
 8013622:	6920      	ldr	r0, [r4, #16]
 8013624:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013628:	f104 0314 	add.w	r3, r4, #20
 801362c:	f019 091f 	ands.w	r9, r9, #31
 8013630:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013634:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013638:	d02b      	beq.n	8013692 <__lshift+0xbe>
 801363a:	f1c9 0e20 	rsb	lr, r9, #32
 801363e:	468a      	mov	sl, r1
 8013640:	2200      	movs	r2, #0
 8013642:	6818      	ldr	r0, [r3, #0]
 8013644:	fa00 f009 	lsl.w	r0, r0, r9
 8013648:	4302      	orrs	r2, r0
 801364a:	f84a 2b04 	str.w	r2, [sl], #4
 801364e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013652:	459c      	cmp	ip, r3
 8013654:	fa22 f20e 	lsr.w	r2, r2, lr
 8013658:	d8f3      	bhi.n	8013642 <__lshift+0x6e>
 801365a:	ebac 0304 	sub.w	r3, ip, r4
 801365e:	3b15      	subs	r3, #21
 8013660:	f023 0303 	bic.w	r3, r3, #3
 8013664:	3304      	adds	r3, #4
 8013666:	f104 0015 	add.w	r0, r4, #21
 801366a:	4584      	cmp	ip, r0
 801366c:	bf38      	it	cc
 801366e:	2304      	movcc	r3, #4
 8013670:	50ca      	str	r2, [r1, r3]
 8013672:	b10a      	cbz	r2, 8013678 <__lshift+0xa4>
 8013674:	f108 0602 	add.w	r6, r8, #2
 8013678:	3e01      	subs	r6, #1
 801367a:	4638      	mov	r0, r7
 801367c:	612e      	str	r6, [r5, #16]
 801367e:	4621      	mov	r1, r4
 8013680:	f7ff fdd6 	bl	8013230 <_Bfree>
 8013684:	4628      	mov	r0, r5
 8013686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801368a:	f842 0f04 	str.w	r0, [r2, #4]!
 801368e:	3301      	adds	r3, #1
 8013690:	e7c5      	b.n	801361e <__lshift+0x4a>
 8013692:	3904      	subs	r1, #4
 8013694:	f853 2b04 	ldr.w	r2, [r3], #4
 8013698:	f841 2f04 	str.w	r2, [r1, #4]!
 801369c:	459c      	cmp	ip, r3
 801369e:	d8f9      	bhi.n	8013694 <__lshift+0xc0>
 80136a0:	e7ea      	b.n	8013678 <__lshift+0xa4>
 80136a2:	bf00      	nop
 80136a4:	08023e13 	.word	0x08023e13
 80136a8:	08023e24 	.word	0x08023e24

080136ac <__mcmp>:
 80136ac:	b530      	push	{r4, r5, lr}
 80136ae:	6902      	ldr	r2, [r0, #16]
 80136b0:	690c      	ldr	r4, [r1, #16]
 80136b2:	1b12      	subs	r2, r2, r4
 80136b4:	d10e      	bne.n	80136d4 <__mcmp+0x28>
 80136b6:	f100 0314 	add.w	r3, r0, #20
 80136ba:	3114      	adds	r1, #20
 80136bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80136c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80136c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80136c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80136cc:	42a5      	cmp	r5, r4
 80136ce:	d003      	beq.n	80136d8 <__mcmp+0x2c>
 80136d0:	d305      	bcc.n	80136de <__mcmp+0x32>
 80136d2:	2201      	movs	r2, #1
 80136d4:	4610      	mov	r0, r2
 80136d6:	bd30      	pop	{r4, r5, pc}
 80136d8:	4283      	cmp	r3, r0
 80136da:	d3f3      	bcc.n	80136c4 <__mcmp+0x18>
 80136dc:	e7fa      	b.n	80136d4 <__mcmp+0x28>
 80136de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80136e2:	e7f7      	b.n	80136d4 <__mcmp+0x28>

080136e4 <__mdiff>:
 80136e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136e8:	460c      	mov	r4, r1
 80136ea:	4606      	mov	r6, r0
 80136ec:	4611      	mov	r1, r2
 80136ee:	4620      	mov	r0, r4
 80136f0:	4617      	mov	r7, r2
 80136f2:	f7ff ffdb 	bl	80136ac <__mcmp>
 80136f6:	1e05      	subs	r5, r0, #0
 80136f8:	d110      	bne.n	801371c <__mdiff+0x38>
 80136fa:	4629      	mov	r1, r5
 80136fc:	4630      	mov	r0, r6
 80136fe:	f7ff fd57 	bl	80131b0 <_Balloc>
 8013702:	b930      	cbnz	r0, 8013712 <__mdiff+0x2e>
 8013704:	4b39      	ldr	r3, [pc, #228]	; (80137ec <__mdiff+0x108>)
 8013706:	4602      	mov	r2, r0
 8013708:	f240 2132 	movw	r1, #562	; 0x232
 801370c:	4838      	ldr	r0, [pc, #224]	; (80137f0 <__mdiff+0x10c>)
 801370e:	f000 fa5d 	bl	8013bcc <__assert_func>
 8013712:	2301      	movs	r3, #1
 8013714:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013718:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801371c:	bfa4      	itt	ge
 801371e:	463b      	movge	r3, r7
 8013720:	4627      	movge	r7, r4
 8013722:	4630      	mov	r0, r6
 8013724:	6879      	ldr	r1, [r7, #4]
 8013726:	bfa6      	itte	ge
 8013728:	461c      	movge	r4, r3
 801372a:	2500      	movge	r5, #0
 801372c:	2501      	movlt	r5, #1
 801372e:	f7ff fd3f 	bl	80131b0 <_Balloc>
 8013732:	b920      	cbnz	r0, 801373e <__mdiff+0x5a>
 8013734:	4b2d      	ldr	r3, [pc, #180]	; (80137ec <__mdiff+0x108>)
 8013736:	4602      	mov	r2, r0
 8013738:	f44f 7110 	mov.w	r1, #576	; 0x240
 801373c:	e7e6      	b.n	801370c <__mdiff+0x28>
 801373e:	693e      	ldr	r6, [r7, #16]
 8013740:	60c5      	str	r5, [r0, #12]
 8013742:	6925      	ldr	r5, [r4, #16]
 8013744:	f107 0114 	add.w	r1, r7, #20
 8013748:	f104 0914 	add.w	r9, r4, #20
 801374c:	f100 0e14 	add.w	lr, r0, #20
 8013750:	f107 0210 	add.w	r2, r7, #16
 8013754:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013758:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801375c:	46f2      	mov	sl, lr
 801375e:	2700      	movs	r7, #0
 8013760:	f859 3b04 	ldr.w	r3, [r9], #4
 8013764:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013768:	fa1f f883 	uxth.w	r8, r3
 801376c:	fa17 f78b 	uxtah	r7, r7, fp
 8013770:	0c1b      	lsrs	r3, r3, #16
 8013772:	eba7 0808 	sub.w	r8, r7, r8
 8013776:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801377a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801377e:	fa1f f888 	uxth.w	r8, r8
 8013782:	141f      	asrs	r7, r3, #16
 8013784:	454d      	cmp	r5, r9
 8013786:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801378a:	f84a 3b04 	str.w	r3, [sl], #4
 801378e:	d8e7      	bhi.n	8013760 <__mdiff+0x7c>
 8013790:	1b2b      	subs	r3, r5, r4
 8013792:	3b15      	subs	r3, #21
 8013794:	f023 0303 	bic.w	r3, r3, #3
 8013798:	3304      	adds	r3, #4
 801379a:	3415      	adds	r4, #21
 801379c:	42a5      	cmp	r5, r4
 801379e:	bf38      	it	cc
 80137a0:	2304      	movcc	r3, #4
 80137a2:	4419      	add	r1, r3
 80137a4:	4473      	add	r3, lr
 80137a6:	469e      	mov	lr, r3
 80137a8:	460d      	mov	r5, r1
 80137aa:	4565      	cmp	r5, ip
 80137ac:	d30e      	bcc.n	80137cc <__mdiff+0xe8>
 80137ae:	f10c 0203 	add.w	r2, ip, #3
 80137b2:	1a52      	subs	r2, r2, r1
 80137b4:	f022 0203 	bic.w	r2, r2, #3
 80137b8:	3903      	subs	r1, #3
 80137ba:	458c      	cmp	ip, r1
 80137bc:	bf38      	it	cc
 80137be:	2200      	movcc	r2, #0
 80137c0:	441a      	add	r2, r3
 80137c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80137c6:	b17b      	cbz	r3, 80137e8 <__mdiff+0x104>
 80137c8:	6106      	str	r6, [r0, #16]
 80137ca:	e7a5      	b.n	8013718 <__mdiff+0x34>
 80137cc:	f855 8b04 	ldr.w	r8, [r5], #4
 80137d0:	fa17 f488 	uxtah	r4, r7, r8
 80137d4:	1422      	asrs	r2, r4, #16
 80137d6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80137da:	b2a4      	uxth	r4, r4
 80137dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80137e0:	f84e 4b04 	str.w	r4, [lr], #4
 80137e4:	1417      	asrs	r7, r2, #16
 80137e6:	e7e0      	b.n	80137aa <__mdiff+0xc6>
 80137e8:	3e01      	subs	r6, #1
 80137ea:	e7ea      	b.n	80137c2 <__mdiff+0xde>
 80137ec:	08023e13 	.word	0x08023e13
 80137f0:	08023e24 	.word	0x08023e24

080137f4 <__d2b>:
 80137f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80137f8:	4689      	mov	r9, r1
 80137fa:	2101      	movs	r1, #1
 80137fc:	ec57 6b10 	vmov	r6, r7, d0
 8013800:	4690      	mov	r8, r2
 8013802:	f7ff fcd5 	bl	80131b0 <_Balloc>
 8013806:	4604      	mov	r4, r0
 8013808:	b930      	cbnz	r0, 8013818 <__d2b+0x24>
 801380a:	4602      	mov	r2, r0
 801380c:	4b25      	ldr	r3, [pc, #148]	; (80138a4 <__d2b+0xb0>)
 801380e:	4826      	ldr	r0, [pc, #152]	; (80138a8 <__d2b+0xb4>)
 8013810:	f240 310a 	movw	r1, #778	; 0x30a
 8013814:	f000 f9da 	bl	8013bcc <__assert_func>
 8013818:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801381c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013820:	bb35      	cbnz	r5, 8013870 <__d2b+0x7c>
 8013822:	2e00      	cmp	r6, #0
 8013824:	9301      	str	r3, [sp, #4]
 8013826:	d028      	beq.n	801387a <__d2b+0x86>
 8013828:	4668      	mov	r0, sp
 801382a:	9600      	str	r6, [sp, #0]
 801382c:	f7ff fd8c 	bl	8013348 <__lo0bits>
 8013830:	9900      	ldr	r1, [sp, #0]
 8013832:	b300      	cbz	r0, 8013876 <__d2b+0x82>
 8013834:	9a01      	ldr	r2, [sp, #4]
 8013836:	f1c0 0320 	rsb	r3, r0, #32
 801383a:	fa02 f303 	lsl.w	r3, r2, r3
 801383e:	430b      	orrs	r3, r1
 8013840:	40c2      	lsrs	r2, r0
 8013842:	6163      	str	r3, [r4, #20]
 8013844:	9201      	str	r2, [sp, #4]
 8013846:	9b01      	ldr	r3, [sp, #4]
 8013848:	61a3      	str	r3, [r4, #24]
 801384a:	2b00      	cmp	r3, #0
 801384c:	bf14      	ite	ne
 801384e:	2202      	movne	r2, #2
 8013850:	2201      	moveq	r2, #1
 8013852:	6122      	str	r2, [r4, #16]
 8013854:	b1d5      	cbz	r5, 801388c <__d2b+0x98>
 8013856:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801385a:	4405      	add	r5, r0
 801385c:	f8c9 5000 	str.w	r5, [r9]
 8013860:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013864:	f8c8 0000 	str.w	r0, [r8]
 8013868:	4620      	mov	r0, r4
 801386a:	b003      	add	sp, #12
 801386c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013870:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013874:	e7d5      	b.n	8013822 <__d2b+0x2e>
 8013876:	6161      	str	r1, [r4, #20]
 8013878:	e7e5      	b.n	8013846 <__d2b+0x52>
 801387a:	a801      	add	r0, sp, #4
 801387c:	f7ff fd64 	bl	8013348 <__lo0bits>
 8013880:	9b01      	ldr	r3, [sp, #4]
 8013882:	6163      	str	r3, [r4, #20]
 8013884:	2201      	movs	r2, #1
 8013886:	6122      	str	r2, [r4, #16]
 8013888:	3020      	adds	r0, #32
 801388a:	e7e3      	b.n	8013854 <__d2b+0x60>
 801388c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013890:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013894:	f8c9 0000 	str.w	r0, [r9]
 8013898:	6918      	ldr	r0, [r3, #16]
 801389a:	f7ff fd35 	bl	8013308 <__hi0bits>
 801389e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80138a2:	e7df      	b.n	8013864 <__d2b+0x70>
 80138a4:	08023e13 	.word	0x08023e13
 80138a8:	08023e24 	.word	0x08023e24

080138ac <_calloc_r>:
 80138ac:	b513      	push	{r0, r1, r4, lr}
 80138ae:	434a      	muls	r2, r1
 80138b0:	4611      	mov	r1, r2
 80138b2:	9201      	str	r2, [sp, #4]
 80138b4:	f7fe f900 	bl	8011ab8 <_malloc_r>
 80138b8:	4604      	mov	r4, r0
 80138ba:	b118      	cbz	r0, 80138c4 <_calloc_r+0x18>
 80138bc:	9a01      	ldr	r2, [sp, #4]
 80138be:	2100      	movs	r1, #0
 80138c0:	f7fe f8a2 	bl	8011a08 <memset>
 80138c4:	4620      	mov	r0, r4
 80138c6:	b002      	add	sp, #8
 80138c8:	bd10      	pop	{r4, pc}

080138ca <_realloc_r>:
 80138ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138cc:	4607      	mov	r7, r0
 80138ce:	4614      	mov	r4, r2
 80138d0:	460e      	mov	r6, r1
 80138d2:	b921      	cbnz	r1, 80138de <_realloc_r+0x14>
 80138d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80138d8:	4611      	mov	r1, r2
 80138da:	f7fe b8ed 	b.w	8011ab8 <_malloc_r>
 80138de:	b922      	cbnz	r2, 80138ea <_realloc_r+0x20>
 80138e0:	f7fe f89a 	bl	8011a18 <_free_r>
 80138e4:	4625      	mov	r5, r4
 80138e6:	4628      	mov	r0, r5
 80138e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138ea:	f000 f9ce 	bl	8013c8a <_malloc_usable_size_r>
 80138ee:	42a0      	cmp	r0, r4
 80138f0:	d20f      	bcs.n	8013912 <_realloc_r+0x48>
 80138f2:	4621      	mov	r1, r4
 80138f4:	4638      	mov	r0, r7
 80138f6:	f7fe f8df 	bl	8011ab8 <_malloc_r>
 80138fa:	4605      	mov	r5, r0
 80138fc:	2800      	cmp	r0, #0
 80138fe:	d0f2      	beq.n	80138e6 <_realloc_r+0x1c>
 8013900:	4631      	mov	r1, r6
 8013902:	4622      	mov	r2, r4
 8013904:	f7fe f872 	bl	80119ec <memcpy>
 8013908:	4631      	mov	r1, r6
 801390a:	4638      	mov	r0, r7
 801390c:	f7fe f884 	bl	8011a18 <_free_r>
 8013910:	e7e9      	b.n	80138e6 <_realloc_r+0x1c>
 8013912:	4635      	mov	r5, r6
 8013914:	e7e7      	b.n	80138e6 <_realloc_r+0x1c>

08013916 <__ssputs_r>:
 8013916:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801391a:	688e      	ldr	r6, [r1, #8]
 801391c:	429e      	cmp	r6, r3
 801391e:	4682      	mov	sl, r0
 8013920:	460c      	mov	r4, r1
 8013922:	4690      	mov	r8, r2
 8013924:	461f      	mov	r7, r3
 8013926:	d838      	bhi.n	801399a <__ssputs_r+0x84>
 8013928:	898a      	ldrh	r2, [r1, #12]
 801392a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801392e:	d032      	beq.n	8013996 <__ssputs_r+0x80>
 8013930:	6825      	ldr	r5, [r4, #0]
 8013932:	6909      	ldr	r1, [r1, #16]
 8013934:	eba5 0901 	sub.w	r9, r5, r1
 8013938:	6965      	ldr	r5, [r4, #20]
 801393a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801393e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013942:	3301      	adds	r3, #1
 8013944:	444b      	add	r3, r9
 8013946:	106d      	asrs	r5, r5, #1
 8013948:	429d      	cmp	r5, r3
 801394a:	bf38      	it	cc
 801394c:	461d      	movcc	r5, r3
 801394e:	0553      	lsls	r3, r2, #21
 8013950:	d531      	bpl.n	80139b6 <__ssputs_r+0xa0>
 8013952:	4629      	mov	r1, r5
 8013954:	f7fe f8b0 	bl	8011ab8 <_malloc_r>
 8013958:	4606      	mov	r6, r0
 801395a:	b950      	cbnz	r0, 8013972 <__ssputs_r+0x5c>
 801395c:	230c      	movs	r3, #12
 801395e:	f8ca 3000 	str.w	r3, [sl]
 8013962:	89a3      	ldrh	r3, [r4, #12]
 8013964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013968:	81a3      	strh	r3, [r4, #12]
 801396a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801396e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013972:	6921      	ldr	r1, [r4, #16]
 8013974:	464a      	mov	r2, r9
 8013976:	f7fe f839 	bl	80119ec <memcpy>
 801397a:	89a3      	ldrh	r3, [r4, #12]
 801397c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013984:	81a3      	strh	r3, [r4, #12]
 8013986:	6126      	str	r6, [r4, #16]
 8013988:	6165      	str	r5, [r4, #20]
 801398a:	444e      	add	r6, r9
 801398c:	eba5 0509 	sub.w	r5, r5, r9
 8013990:	6026      	str	r6, [r4, #0]
 8013992:	60a5      	str	r5, [r4, #8]
 8013994:	463e      	mov	r6, r7
 8013996:	42be      	cmp	r6, r7
 8013998:	d900      	bls.n	801399c <__ssputs_r+0x86>
 801399a:	463e      	mov	r6, r7
 801399c:	4632      	mov	r2, r6
 801399e:	6820      	ldr	r0, [r4, #0]
 80139a0:	4641      	mov	r1, r8
 80139a2:	f000 f958 	bl	8013c56 <memmove>
 80139a6:	68a3      	ldr	r3, [r4, #8]
 80139a8:	6822      	ldr	r2, [r4, #0]
 80139aa:	1b9b      	subs	r3, r3, r6
 80139ac:	4432      	add	r2, r6
 80139ae:	60a3      	str	r3, [r4, #8]
 80139b0:	6022      	str	r2, [r4, #0]
 80139b2:	2000      	movs	r0, #0
 80139b4:	e7db      	b.n	801396e <__ssputs_r+0x58>
 80139b6:	462a      	mov	r2, r5
 80139b8:	f7ff ff87 	bl	80138ca <_realloc_r>
 80139bc:	4606      	mov	r6, r0
 80139be:	2800      	cmp	r0, #0
 80139c0:	d1e1      	bne.n	8013986 <__ssputs_r+0x70>
 80139c2:	6921      	ldr	r1, [r4, #16]
 80139c4:	4650      	mov	r0, sl
 80139c6:	f7fe f827 	bl	8011a18 <_free_r>
 80139ca:	e7c7      	b.n	801395c <__ssputs_r+0x46>

080139cc <_svfiprintf_r>:
 80139cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139d0:	4698      	mov	r8, r3
 80139d2:	898b      	ldrh	r3, [r1, #12]
 80139d4:	061b      	lsls	r3, r3, #24
 80139d6:	b09d      	sub	sp, #116	; 0x74
 80139d8:	4607      	mov	r7, r0
 80139da:	460d      	mov	r5, r1
 80139dc:	4614      	mov	r4, r2
 80139de:	d50e      	bpl.n	80139fe <_svfiprintf_r+0x32>
 80139e0:	690b      	ldr	r3, [r1, #16]
 80139e2:	b963      	cbnz	r3, 80139fe <_svfiprintf_r+0x32>
 80139e4:	2140      	movs	r1, #64	; 0x40
 80139e6:	f7fe f867 	bl	8011ab8 <_malloc_r>
 80139ea:	6028      	str	r0, [r5, #0]
 80139ec:	6128      	str	r0, [r5, #16]
 80139ee:	b920      	cbnz	r0, 80139fa <_svfiprintf_r+0x2e>
 80139f0:	230c      	movs	r3, #12
 80139f2:	603b      	str	r3, [r7, #0]
 80139f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80139f8:	e0d1      	b.n	8013b9e <_svfiprintf_r+0x1d2>
 80139fa:	2340      	movs	r3, #64	; 0x40
 80139fc:	616b      	str	r3, [r5, #20]
 80139fe:	2300      	movs	r3, #0
 8013a00:	9309      	str	r3, [sp, #36]	; 0x24
 8013a02:	2320      	movs	r3, #32
 8013a04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013a08:	f8cd 800c 	str.w	r8, [sp, #12]
 8013a0c:	2330      	movs	r3, #48	; 0x30
 8013a0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013bb8 <_svfiprintf_r+0x1ec>
 8013a12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013a16:	f04f 0901 	mov.w	r9, #1
 8013a1a:	4623      	mov	r3, r4
 8013a1c:	469a      	mov	sl, r3
 8013a1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a22:	b10a      	cbz	r2, 8013a28 <_svfiprintf_r+0x5c>
 8013a24:	2a25      	cmp	r2, #37	; 0x25
 8013a26:	d1f9      	bne.n	8013a1c <_svfiprintf_r+0x50>
 8013a28:	ebba 0b04 	subs.w	fp, sl, r4
 8013a2c:	d00b      	beq.n	8013a46 <_svfiprintf_r+0x7a>
 8013a2e:	465b      	mov	r3, fp
 8013a30:	4622      	mov	r2, r4
 8013a32:	4629      	mov	r1, r5
 8013a34:	4638      	mov	r0, r7
 8013a36:	f7ff ff6e 	bl	8013916 <__ssputs_r>
 8013a3a:	3001      	adds	r0, #1
 8013a3c:	f000 80aa 	beq.w	8013b94 <_svfiprintf_r+0x1c8>
 8013a40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a42:	445a      	add	r2, fp
 8013a44:	9209      	str	r2, [sp, #36]	; 0x24
 8013a46:	f89a 3000 	ldrb.w	r3, [sl]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	f000 80a2 	beq.w	8013b94 <_svfiprintf_r+0x1c8>
 8013a50:	2300      	movs	r3, #0
 8013a52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013a56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013a5a:	f10a 0a01 	add.w	sl, sl, #1
 8013a5e:	9304      	str	r3, [sp, #16]
 8013a60:	9307      	str	r3, [sp, #28]
 8013a62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013a66:	931a      	str	r3, [sp, #104]	; 0x68
 8013a68:	4654      	mov	r4, sl
 8013a6a:	2205      	movs	r2, #5
 8013a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a70:	4851      	ldr	r0, [pc, #324]	; (8013bb8 <_svfiprintf_r+0x1ec>)
 8013a72:	f7ec fbe5 	bl	8000240 <memchr>
 8013a76:	9a04      	ldr	r2, [sp, #16]
 8013a78:	b9d8      	cbnz	r0, 8013ab2 <_svfiprintf_r+0xe6>
 8013a7a:	06d0      	lsls	r0, r2, #27
 8013a7c:	bf44      	itt	mi
 8013a7e:	2320      	movmi	r3, #32
 8013a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a84:	0711      	lsls	r1, r2, #28
 8013a86:	bf44      	itt	mi
 8013a88:	232b      	movmi	r3, #43	; 0x2b
 8013a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8013a92:	2b2a      	cmp	r3, #42	; 0x2a
 8013a94:	d015      	beq.n	8013ac2 <_svfiprintf_r+0xf6>
 8013a96:	9a07      	ldr	r2, [sp, #28]
 8013a98:	4654      	mov	r4, sl
 8013a9a:	2000      	movs	r0, #0
 8013a9c:	f04f 0c0a 	mov.w	ip, #10
 8013aa0:	4621      	mov	r1, r4
 8013aa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013aa6:	3b30      	subs	r3, #48	; 0x30
 8013aa8:	2b09      	cmp	r3, #9
 8013aaa:	d94e      	bls.n	8013b4a <_svfiprintf_r+0x17e>
 8013aac:	b1b0      	cbz	r0, 8013adc <_svfiprintf_r+0x110>
 8013aae:	9207      	str	r2, [sp, #28]
 8013ab0:	e014      	b.n	8013adc <_svfiprintf_r+0x110>
 8013ab2:	eba0 0308 	sub.w	r3, r0, r8
 8013ab6:	fa09 f303 	lsl.w	r3, r9, r3
 8013aba:	4313      	orrs	r3, r2
 8013abc:	9304      	str	r3, [sp, #16]
 8013abe:	46a2      	mov	sl, r4
 8013ac0:	e7d2      	b.n	8013a68 <_svfiprintf_r+0x9c>
 8013ac2:	9b03      	ldr	r3, [sp, #12]
 8013ac4:	1d19      	adds	r1, r3, #4
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	9103      	str	r1, [sp, #12]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	bfbb      	ittet	lt
 8013ace:	425b      	neglt	r3, r3
 8013ad0:	f042 0202 	orrlt.w	r2, r2, #2
 8013ad4:	9307      	strge	r3, [sp, #28]
 8013ad6:	9307      	strlt	r3, [sp, #28]
 8013ad8:	bfb8      	it	lt
 8013ada:	9204      	strlt	r2, [sp, #16]
 8013adc:	7823      	ldrb	r3, [r4, #0]
 8013ade:	2b2e      	cmp	r3, #46	; 0x2e
 8013ae0:	d10c      	bne.n	8013afc <_svfiprintf_r+0x130>
 8013ae2:	7863      	ldrb	r3, [r4, #1]
 8013ae4:	2b2a      	cmp	r3, #42	; 0x2a
 8013ae6:	d135      	bne.n	8013b54 <_svfiprintf_r+0x188>
 8013ae8:	9b03      	ldr	r3, [sp, #12]
 8013aea:	1d1a      	adds	r2, r3, #4
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	9203      	str	r2, [sp, #12]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	bfb8      	it	lt
 8013af4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013af8:	3402      	adds	r4, #2
 8013afa:	9305      	str	r3, [sp, #20]
 8013afc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013bc8 <_svfiprintf_r+0x1fc>
 8013b00:	7821      	ldrb	r1, [r4, #0]
 8013b02:	2203      	movs	r2, #3
 8013b04:	4650      	mov	r0, sl
 8013b06:	f7ec fb9b 	bl	8000240 <memchr>
 8013b0a:	b140      	cbz	r0, 8013b1e <_svfiprintf_r+0x152>
 8013b0c:	2340      	movs	r3, #64	; 0x40
 8013b0e:	eba0 000a 	sub.w	r0, r0, sl
 8013b12:	fa03 f000 	lsl.w	r0, r3, r0
 8013b16:	9b04      	ldr	r3, [sp, #16]
 8013b18:	4303      	orrs	r3, r0
 8013b1a:	3401      	adds	r4, #1
 8013b1c:	9304      	str	r3, [sp, #16]
 8013b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b22:	4826      	ldr	r0, [pc, #152]	; (8013bbc <_svfiprintf_r+0x1f0>)
 8013b24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013b28:	2206      	movs	r2, #6
 8013b2a:	f7ec fb89 	bl	8000240 <memchr>
 8013b2e:	2800      	cmp	r0, #0
 8013b30:	d038      	beq.n	8013ba4 <_svfiprintf_r+0x1d8>
 8013b32:	4b23      	ldr	r3, [pc, #140]	; (8013bc0 <_svfiprintf_r+0x1f4>)
 8013b34:	bb1b      	cbnz	r3, 8013b7e <_svfiprintf_r+0x1b2>
 8013b36:	9b03      	ldr	r3, [sp, #12]
 8013b38:	3307      	adds	r3, #7
 8013b3a:	f023 0307 	bic.w	r3, r3, #7
 8013b3e:	3308      	adds	r3, #8
 8013b40:	9303      	str	r3, [sp, #12]
 8013b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b44:	4433      	add	r3, r6
 8013b46:	9309      	str	r3, [sp, #36]	; 0x24
 8013b48:	e767      	b.n	8013a1a <_svfiprintf_r+0x4e>
 8013b4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8013b4e:	460c      	mov	r4, r1
 8013b50:	2001      	movs	r0, #1
 8013b52:	e7a5      	b.n	8013aa0 <_svfiprintf_r+0xd4>
 8013b54:	2300      	movs	r3, #0
 8013b56:	3401      	adds	r4, #1
 8013b58:	9305      	str	r3, [sp, #20]
 8013b5a:	4619      	mov	r1, r3
 8013b5c:	f04f 0c0a 	mov.w	ip, #10
 8013b60:	4620      	mov	r0, r4
 8013b62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b66:	3a30      	subs	r2, #48	; 0x30
 8013b68:	2a09      	cmp	r2, #9
 8013b6a:	d903      	bls.n	8013b74 <_svfiprintf_r+0x1a8>
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d0c5      	beq.n	8013afc <_svfiprintf_r+0x130>
 8013b70:	9105      	str	r1, [sp, #20]
 8013b72:	e7c3      	b.n	8013afc <_svfiprintf_r+0x130>
 8013b74:	fb0c 2101 	mla	r1, ip, r1, r2
 8013b78:	4604      	mov	r4, r0
 8013b7a:	2301      	movs	r3, #1
 8013b7c:	e7f0      	b.n	8013b60 <_svfiprintf_r+0x194>
 8013b7e:	ab03      	add	r3, sp, #12
 8013b80:	9300      	str	r3, [sp, #0]
 8013b82:	462a      	mov	r2, r5
 8013b84:	4b0f      	ldr	r3, [pc, #60]	; (8013bc4 <_svfiprintf_r+0x1f8>)
 8013b86:	a904      	add	r1, sp, #16
 8013b88:	4638      	mov	r0, r7
 8013b8a:	f7fe f88f 	bl	8011cac <_printf_float>
 8013b8e:	1c42      	adds	r2, r0, #1
 8013b90:	4606      	mov	r6, r0
 8013b92:	d1d6      	bne.n	8013b42 <_svfiprintf_r+0x176>
 8013b94:	89ab      	ldrh	r3, [r5, #12]
 8013b96:	065b      	lsls	r3, r3, #25
 8013b98:	f53f af2c 	bmi.w	80139f4 <_svfiprintf_r+0x28>
 8013b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013b9e:	b01d      	add	sp, #116	; 0x74
 8013ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ba4:	ab03      	add	r3, sp, #12
 8013ba6:	9300      	str	r3, [sp, #0]
 8013ba8:	462a      	mov	r2, r5
 8013baa:	4b06      	ldr	r3, [pc, #24]	; (8013bc4 <_svfiprintf_r+0x1f8>)
 8013bac:	a904      	add	r1, sp, #16
 8013bae:	4638      	mov	r0, r7
 8013bb0:	f7fe fb20 	bl	80121f4 <_printf_i>
 8013bb4:	e7eb      	b.n	8013b8e <_svfiprintf_r+0x1c2>
 8013bb6:	bf00      	nop
 8013bb8:	08023f84 	.word	0x08023f84
 8013bbc:	08023f8e 	.word	0x08023f8e
 8013bc0:	08011cad 	.word	0x08011cad
 8013bc4:	08013917 	.word	0x08013917
 8013bc8:	08023f8a 	.word	0x08023f8a

08013bcc <__assert_func>:
 8013bcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013bce:	4614      	mov	r4, r2
 8013bd0:	461a      	mov	r2, r3
 8013bd2:	4b09      	ldr	r3, [pc, #36]	; (8013bf8 <__assert_func+0x2c>)
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	4605      	mov	r5, r0
 8013bd8:	68d8      	ldr	r0, [r3, #12]
 8013bda:	b14c      	cbz	r4, 8013bf0 <__assert_func+0x24>
 8013bdc:	4b07      	ldr	r3, [pc, #28]	; (8013bfc <__assert_func+0x30>)
 8013bde:	9100      	str	r1, [sp, #0]
 8013be0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013be4:	4906      	ldr	r1, [pc, #24]	; (8013c00 <__assert_func+0x34>)
 8013be6:	462b      	mov	r3, r5
 8013be8:	f000 f80e 	bl	8013c08 <fiprintf>
 8013bec:	f000 fa7c 	bl	80140e8 <abort>
 8013bf0:	4b04      	ldr	r3, [pc, #16]	; (8013c04 <__assert_func+0x38>)
 8013bf2:	461c      	mov	r4, r3
 8013bf4:	e7f3      	b.n	8013bde <__assert_func+0x12>
 8013bf6:	bf00      	nop
 8013bf8:	200006a4 	.word	0x200006a4
 8013bfc:	08023f95 	.word	0x08023f95
 8013c00:	08023fa2 	.word	0x08023fa2
 8013c04:	08023fd0 	.word	0x08023fd0

08013c08 <fiprintf>:
 8013c08:	b40e      	push	{r1, r2, r3}
 8013c0a:	b503      	push	{r0, r1, lr}
 8013c0c:	4601      	mov	r1, r0
 8013c0e:	ab03      	add	r3, sp, #12
 8013c10:	4805      	ldr	r0, [pc, #20]	; (8013c28 <fiprintf+0x20>)
 8013c12:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c16:	6800      	ldr	r0, [r0, #0]
 8013c18:	9301      	str	r3, [sp, #4]
 8013c1a:	f000 f867 	bl	8013cec <_vfiprintf_r>
 8013c1e:	b002      	add	sp, #8
 8013c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8013c24:	b003      	add	sp, #12
 8013c26:	4770      	bx	lr
 8013c28:	200006a4 	.word	0x200006a4

08013c2c <__retarget_lock_init_recursive>:
 8013c2c:	4770      	bx	lr

08013c2e <__retarget_lock_acquire_recursive>:
 8013c2e:	4770      	bx	lr

08013c30 <__retarget_lock_release_recursive>:
 8013c30:	4770      	bx	lr

08013c32 <__ascii_mbtowc>:
 8013c32:	b082      	sub	sp, #8
 8013c34:	b901      	cbnz	r1, 8013c38 <__ascii_mbtowc+0x6>
 8013c36:	a901      	add	r1, sp, #4
 8013c38:	b142      	cbz	r2, 8013c4c <__ascii_mbtowc+0x1a>
 8013c3a:	b14b      	cbz	r3, 8013c50 <__ascii_mbtowc+0x1e>
 8013c3c:	7813      	ldrb	r3, [r2, #0]
 8013c3e:	600b      	str	r3, [r1, #0]
 8013c40:	7812      	ldrb	r2, [r2, #0]
 8013c42:	1e10      	subs	r0, r2, #0
 8013c44:	bf18      	it	ne
 8013c46:	2001      	movne	r0, #1
 8013c48:	b002      	add	sp, #8
 8013c4a:	4770      	bx	lr
 8013c4c:	4610      	mov	r0, r2
 8013c4e:	e7fb      	b.n	8013c48 <__ascii_mbtowc+0x16>
 8013c50:	f06f 0001 	mvn.w	r0, #1
 8013c54:	e7f8      	b.n	8013c48 <__ascii_mbtowc+0x16>

08013c56 <memmove>:
 8013c56:	4288      	cmp	r0, r1
 8013c58:	b510      	push	{r4, lr}
 8013c5a:	eb01 0402 	add.w	r4, r1, r2
 8013c5e:	d902      	bls.n	8013c66 <memmove+0x10>
 8013c60:	4284      	cmp	r4, r0
 8013c62:	4623      	mov	r3, r4
 8013c64:	d807      	bhi.n	8013c76 <memmove+0x20>
 8013c66:	1e43      	subs	r3, r0, #1
 8013c68:	42a1      	cmp	r1, r4
 8013c6a:	d008      	beq.n	8013c7e <memmove+0x28>
 8013c6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013c70:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013c74:	e7f8      	b.n	8013c68 <memmove+0x12>
 8013c76:	4402      	add	r2, r0
 8013c78:	4601      	mov	r1, r0
 8013c7a:	428a      	cmp	r2, r1
 8013c7c:	d100      	bne.n	8013c80 <memmove+0x2a>
 8013c7e:	bd10      	pop	{r4, pc}
 8013c80:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013c84:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013c88:	e7f7      	b.n	8013c7a <memmove+0x24>

08013c8a <_malloc_usable_size_r>:
 8013c8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c8e:	1f18      	subs	r0, r3, #4
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	bfbc      	itt	lt
 8013c94:	580b      	ldrlt	r3, [r1, r0]
 8013c96:	18c0      	addlt	r0, r0, r3
 8013c98:	4770      	bx	lr

08013c9a <__sfputc_r>:
 8013c9a:	6893      	ldr	r3, [r2, #8]
 8013c9c:	3b01      	subs	r3, #1
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	b410      	push	{r4}
 8013ca2:	6093      	str	r3, [r2, #8]
 8013ca4:	da08      	bge.n	8013cb8 <__sfputc_r+0x1e>
 8013ca6:	6994      	ldr	r4, [r2, #24]
 8013ca8:	42a3      	cmp	r3, r4
 8013caa:	db01      	blt.n	8013cb0 <__sfputc_r+0x16>
 8013cac:	290a      	cmp	r1, #10
 8013cae:	d103      	bne.n	8013cb8 <__sfputc_r+0x1e>
 8013cb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013cb4:	f000 b94a 	b.w	8013f4c <__swbuf_r>
 8013cb8:	6813      	ldr	r3, [r2, #0]
 8013cba:	1c58      	adds	r0, r3, #1
 8013cbc:	6010      	str	r0, [r2, #0]
 8013cbe:	7019      	strb	r1, [r3, #0]
 8013cc0:	4608      	mov	r0, r1
 8013cc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013cc6:	4770      	bx	lr

08013cc8 <__sfputs_r>:
 8013cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cca:	4606      	mov	r6, r0
 8013ccc:	460f      	mov	r7, r1
 8013cce:	4614      	mov	r4, r2
 8013cd0:	18d5      	adds	r5, r2, r3
 8013cd2:	42ac      	cmp	r4, r5
 8013cd4:	d101      	bne.n	8013cda <__sfputs_r+0x12>
 8013cd6:	2000      	movs	r0, #0
 8013cd8:	e007      	b.n	8013cea <__sfputs_r+0x22>
 8013cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013cde:	463a      	mov	r2, r7
 8013ce0:	4630      	mov	r0, r6
 8013ce2:	f7ff ffda 	bl	8013c9a <__sfputc_r>
 8013ce6:	1c43      	adds	r3, r0, #1
 8013ce8:	d1f3      	bne.n	8013cd2 <__sfputs_r+0xa>
 8013cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013cec <_vfiprintf_r>:
 8013cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cf0:	460d      	mov	r5, r1
 8013cf2:	b09d      	sub	sp, #116	; 0x74
 8013cf4:	4614      	mov	r4, r2
 8013cf6:	4698      	mov	r8, r3
 8013cf8:	4606      	mov	r6, r0
 8013cfa:	b118      	cbz	r0, 8013d04 <_vfiprintf_r+0x18>
 8013cfc:	6983      	ldr	r3, [r0, #24]
 8013cfe:	b90b      	cbnz	r3, 8013d04 <_vfiprintf_r+0x18>
 8013d00:	f000 fb14 	bl	801432c <__sinit>
 8013d04:	4b89      	ldr	r3, [pc, #548]	; (8013f2c <_vfiprintf_r+0x240>)
 8013d06:	429d      	cmp	r5, r3
 8013d08:	d11b      	bne.n	8013d42 <_vfiprintf_r+0x56>
 8013d0a:	6875      	ldr	r5, [r6, #4]
 8013d0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d0e:	07d9      	lsls	r1, r3, #31
 8013d10:	d405      	bmi.n	8013d1e <_vfiprintf_r+0x32>
 8013d12:	89ab      	ldrh	r3, [r5, #12]
 8013d14:	059a      	lsls	r2, r3, #22
 8013d16:	d402      	bmi.n	8013d1e <_vfiprintf_r+0x32>
 8013d18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013d1a:	f7ff ff88 	bl	8013c2e <__retarget_lock_acquire_recursive>
 8013d1e:	89ab      	ldrh	r3, [r5, #12]
 8013d20:	071b      	lsls	r3, r3, #28
 8013d22:	d501      	bpl.n	8013d28 <_vfiprintf_r+0x3c>
 8013d24:	692b      	ldr	r3, [r5, #16]
 8013d26:	b9eb      	cbnz	r3, 8013d64 <_vfiprintf_r+0x78>
 8013d28:	4629      	mov	r1, r5
 8013d2a:	4630      	mov	r0, r6
 8013d2c:	f000 f96e 	bl	801400c <__swsetup_r>
 8013d30:	b1c0      	cbz	r0, 8013d64 <_vfiprintf_r+0x78>
 8013d32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d34:	07dc      	lsls	r4, r3, #31
 8013d36:	d50e      	bpl.n	8013d56 <_vfiprintf_r+0x6a>
 8013d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013d3c:	b01d      	add	sp, #116	; 0x74
 8013d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d42:	4b7b      	ldr	r3, [pc, #492]	; (8013f30 <_vfiprintf_r+0x244>)
 8013d44:	429d      	cmp	r5, r3
 8013d46:	d101      	bne.n	8013d4c <_vfiprintf_r+0x60>
 8013d48:	68b5      	ldr	r5, [r6, #8]
 8013d4a:	e7df      	b.n	8013d0c <_vfiprintf_r+0x20>
 8013d4c:	4b79      	ldr	r3, [pc, #484]	; (8013f34 <_vfiprintf_r+0x248>)
 8013d4e:	429d      	cmp	r5, r3
 8013d50:	bf08      	it	eq
 8013d52:	68f5      	ldreq	r5, [r6, #12]
 8013d54:	e7da      	b.n	8013d0c <_vfiprintf_r+0x20>
 8013d56:	89ab      	ldrh	r3, [r5, #12]
 8013d58:	0598      	lsls	r0, r3, #22
 8013d5a:	d4ed      	bmi.n	8013d38 <_vfiprintf_r+0x4c>
 8013d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013d5e:	f7ff ff67 	bl	8013c30 <__retarget_lock_release_recursive>
 8013d62:	e7e9      	b.n	8013d38 <_vfiprintf_r+0x4c>
 8013d64:	2300      	movs	r3, #0
 8013d66:	9309      	str	r3, [sp, #36]	; 0x24
 8013d68:	2320      	movs	r3, #32
 8013d6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013d6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013d72:	2330      	movs	r3, #48	; 0x30
 8013d74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013f38 <_vfiprintf_r+0x24c>
 8013d78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013d7c:	f04f 0901 	mov.w	r9, #1
 8013d80:	4623      	mov	r3, r4
 8013d82:	469a      	mov	sl, r3
 8013d84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d88:	b10a      	cbz	r2, 8013d8e <_vfiprintf_r+0xa2>
 8013d8a:	2a25      	cmp	r2, #37	; 0x25
 8013d8c:	d1f9      	bne.n	8013d82 <_vfiprintf_r+0x96>
 8013d8e:	ebba 0b04 	subs.w	fp, sl, r4
 8013d92:	d00b      	beq.n	8013dac <_vfiprintf_r+0xc0>
 8013d94:	465b      	mov	r3, fp
 8013d96:	4622      	mov	r2, r4
 8013d98:	4629      	mov	r1, r5
 8013d9a:	4630      	mov	r0, r6
 8013d9c:	f7ff ff94 	bl	8013cc8 <__sfputs_r>
 8013da0:	3001      	adds	r0, #1
 8013da2:	f000 80aa 	beq.w	8013efa <_vfiprintf_r+0x20e>
 8013da6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013da8:	445a      	add	r2, fp
 8013daa:	9209      	str	r2, [sp, #36]	; 0x24
 8013dac:	f89a 3000 	ldrb.w	r3, [sl]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	f000 80a2 	beq.w	8013efa <_vfiprintf_r+0x20e>
 8013db6:	2300      	movs	r3, #0
 8013db8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013dbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013dc0:	f10a 0a01 	add.w	sl, sl, #1
 8013dc4:	9304      	str	r3, [sp, #16]
 8013dc6:	9307      	str	r3, [sp, #28]
 8013dc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013dcc:	931a      	str	r3, [sp, #104]	; 0x68
 8013dce:	4654      	mov	r4, sl
 8013dd0:	2205      	movs	r2, #5
 8013dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013dd6:	4858      	ldr	r0, [pc, #352]	; (8013f38 <_vfiprintf_r+0x24c>)
 8013dd8:	f7ec fa32 	bl	8000240 <memchr>
 8013ddc:	9a04      	ldr	r2, [sp, #16]
 8013dde:	b9d8      	cbnz	r0, 8013e18 <_vfiprintf_r+0x12c>
 8013de0:	06d1      	lsls	r1, r2, #27
 8013de2:	bf44      	itt	mi
 8013de4:	2320      	movmi	r3, #32
 8013de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013dea:	0713      	lsls	r3, r2, #28
 8013dec:	bf44      	itt	mi
 8013dee:	232b      	movmi	r3, #43	; 0x2b
 8013df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013df4:	f89a 3000 	ldrb.w	r3, [sl]
 8013df8:	2b2a      	cmp	r3, #42	; 0x2a
 8013dfa:	d015      	beq.n	8013e28 <_vfiprintf_r+0x13c>
 8013dfc:	9a07      	ldr	r2, [sp, #28]
 8013dfe:	4654      	mov	r4, sl
 8013e00:	2000      	movs	r0, #0
 8013e02:	f04f 0c0a 	mov.w	ip, #10
 8013e06:	4621      	mov	r1, r4
 8013e08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013e0c:	3b30      	subs	r3, #48	; 0x30
 8013e0e:	2b09      	cmp	r3, #9
 8013e10:	d94e      	bls.n	8013eb0 <_vfiprintf_r+0x1c4>
 8013e12:	b1b0      	cbz	r0, 8013e42 <_vfiprintf_r+0x156>
 8013e14:	9207      	str	r2, [sp, #28]
 8013e16:	e014      	b.n	8013e42 <_vfiprintf_r+0x156>
 8013e18:	eba0 0308 	sub.w	r3, r0, r8
 8013e1c:	fa09 f303 	lsl.w	r3, r9, r3
 8013e20:	4313      	orrs	r3, r2
 8013e22:	9304      	str	r3, [sp, #16]
 8013e24:	46a2      	mov	sl, r4
 8013e26:	e7d2      	b.n	8013dce <_vfiprintf_r+0xe2>
 8013e28:	9b03      	ldr	r3, [sp, #12]
 8013e2a:	1d19      	adds	r1, r3, #4
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	9103      	str	r1, [sp, #12]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	bfbb      	ittet	lt
 8013e34:	425b      	neglt	r3, r3
 8013e36:	f042 0202 	orrlt.w	r2, r2, #2
 8013e3a:	9307      	strge	r3, [sp, #28]
 8013e3c:	9307      	strlt	r3, [sp, #28]
 8013e3e:	bfb8      	it	lt
 8013e40:	9204      	strlt	r2, [sp, #16]
 8013e42:	7823      	ldrb	r3, [r4, #0]
 8013e44:	2b2e      	cmp	r3, #46	; 0x2e
 8013e46:	d10c      	bne.n	8013e62 <_vfiprintf_r+0x176>
 8013e48:	7863      	ldrb	r3, [r4, #1]
 8013e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8013e4c:	d135      	bne.n	8013eba <_vfiprintf_r+0x1ce>
 8013e4e:	9b03      	ldr	r3, [sp, #12]
 8013e50:	1d1a      	adds	r2, r3, #4
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	9203      	str	r2, [sp, #12]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	bfb8      	it	lt
 8013e5a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013e5e:	3402      	adds	r4, #2
 8013e60:	9305      	str	r3, [sp, #20]
 8013e62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013f48 <_vfiprintf_r+0x25c>
 8013e66:	7821      	ldrb	r1, [r4, #0]
 8013e68:	2203      	movs	r2, #3
 8013e6a:	4650      	mov	r0, sl
 8013e6c:	f7ec f9e8 	bl	8000240 <memchr>
 8013e70:	b140      	cbz	r0, 8013e84 <_vfiprintf_r+0x198>
 8013e72:	2340      	movs	r3, #64	; 0x40
 8013e74:	eba0 000a 	sub.w	r0, r0, sl
 8013e78:	fa03 f000 	lsl.w	r0, r3, r0
 8013e7c:	9b04      	ldr	r3, [sp, #16]
 8013e7e:	4303      	orrs	r3, r0
 8013e80:	3401      	adds	r4, #1
 8013e82:	9304      	str	r3, [sp, #16]
 8013e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e88:	482c      	ldr	r0, [pc, #176]	; (8013f3c <_vfiprintf_r+0x250>)
 8013e8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013e8e:	2206      	movs	r2, #6
 8013e90:	f7ec f9d6 	bl	8000240 <memchr>
 8013e94:	2800      	cmp	r0, #0
 8013e96:	d03f      	beq.n	8013f18 <_vfiprintf_r+0x22c>
 8013e98:	4b29      	ldr	r3, [pc, #164]	; (8013f40 <_vfiprintf_r+0x254>)
 8013e9a:	bb1b      	cbnz	r3, 8013ee4 <_vfiprintf_r+0x1f8>
 8013e9c:	9b03      	ldr	r3, [sp, #12]
 8013e9e:	3307      	adds	r3, #7
 8013ea0:	f023 0307 	bic.w	r3, r3, #7
 8013ea4:	3308      	adds	r3, #8
 8013ea6:	9303      	str	r3, [sp, #12]
 8013ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013eaa:	443b      	add	r3, r7
 8013eac:	9309      	str	r3, [sp, #36]	; 0x24
 8013eae:	e767      	b.n	8013d80 <_vfiprintf_r+0x94>
 8013eb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8013eb4:	460c      	mov	r4, r1
 8013eb6:	2001      	movs	r0, #1
 8013eb8:	e7a5      	b.n	8013e06 <_vfiprintf_r+0x11a>
 8013eba:	2300      	movs	r3, #0
 8013ebc:	3401      	adds	r4, #1
 8013ebe:	9305      	str	r3, [sp, #20]
 8013ec0:	4619      	mov	r1, r3
 8013ec2:	f04f 0c0a 	mov.w	ip, #10
 8013ec6:	4620      	mov	r0, r4
 8013ec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013ecc:	3a30      	subs	r2, #48	; 0x30
 8013ece:	2a09      	cmp	r2, #9
 8013ed0:	d903      	bls.n	8013eda <_vfiprintf_r+0x1ee>
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d0c5      	beq.n	8013e62 <_vfiprintf_r+0x176>
 8013ed6:	9105      	str	r1, [sp, #20]
 8013ed8:	e7c3      	b.n	8013e62 <_vfiprintf_r+0x176>
 8013eda:	fb0c 2101 	mla	r1, ip, r1, r2
 8013ede:	4604      	mov	r4, r0
 8013ee0:	2301      	movs	r3, #1
 8013ee2:	e7f0      	b.n	8013ec6 <_vfiprintf_r+0x1da>
 8013ee4:	ab03      	add	r3, sp, #12
 8013ee6:	9300      	str	r3, [sp, #0]
 8013ee8:	462a      	mov	r2, r5
 8013eea:	4b16      	ldr	r3, [pc, #88]	; (8013f44 <_vfiprintf_r+0x258>)
 8013eec:	a904      	add	r1, sp, #16
 8013eee:	4630      	mov	r0, r6
 8013ef0:	f7fd fedc 	bl	8011cac <_printf_float>
 8013ef4:	4607      	mov	r7, r0
 8013ef6:	1c78      	adds	r0, r7, #1
 8013ef8:	d1d6      	bne.n	8013ea8 <_vfiprintf_r+0x1bc>
 8013efa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013efc:	07d9      	lsls	r1, r3, #31
 8013efe:	d405      	bmi.n	8013f0c <_vfiprintf_r+0x220>
 8013f00:	89ab      	ldrh	r3, [r5, #12]
 8013f02:	059a      	lsls	r2, r3, #22
 8013f04:	d402      	bmi.n	8013f0c <_vfiprintf_r+0x220>
 8013f06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013f08:	f7ff fe92 	bl	8013c30 <__retarget_lock_release_recursive>
 8013f0c:	89ab      	ldrh	r3, [r5, #12]
 8013f0e:	065b      	lsls	r3, r3, #25
 8013f10:	f53f af12 	bmi.w	8013d38 <_vfiprintf_r+0x4c>
 8013f14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f16:	e711      	b.n	8013d3c <_vfiprintf_r+0x50>
 8013f18:	ab03      	add	r3, sp, #12
 8013f1a:	9300      	str	r3, [sp, #0]
 8013f1c:	462a      	mov	r2, r5
 8013f1e:	4b09      	ldr	r3, [pc, #36]	; (8013f44 <_vfiprintf_r+0x258>)
 8013f20:	a904      	add	r1, sp, #16
 8013f22:	4630      	mov	r0, r6
 8013f24:	f7fe f966 	bl	80121f4 <_printf_i>
 8013f28:	e7e4      	b.n	8013ef4 <_vfiprintf_r+0x208>
 8013f2a:	bf00      	nop
 8013f2c:	080240fc 	.word	0x080240fc
 8013f30:	0802411c 	.word	0x0802411c
 8013f34:	080240dc 	.word	0x080240dc
 8013f38:	08023f84 	.word	0x08023f84
 8013f3c:	08023f8e 	.word	0x08023f8e
 8013f40:	08011cad 	.word	0x08011cad
 8013f44:	08013cc9 	.word	0x08013cc9
 8013f48:	08023f8a 	.word	0x08023f8a

08013f4c <__swbuf_r>:
 8013f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f4e:	460e      	mov	r6, r1
 8013f50:	4614      	mov	r4, r2
 8013f52:	4605      	mov	r5, r0
 8013f54:	b118      	cbz	r0, 8013f5e <__swbuf_r+0x12>
 8013f56:	6983      	ldr	r3, [r0, #24]
 8013f58:	b90b      	cbnz	r3, 8013f5e <__swbuf_r+0x12>
 8013f5a:	f000 f9e7 	bl	801432c <__sinit>
 8013f5e:	4b21      	ldr	r3, [pc, #132]	; (8013fe4 <__swbuf_r+0x98>)
 8013f60:	429c      	cmp	r4, r3
 8013f62:	d12b      	bne.n	8013fbc <__swbuf_r+0x70>
 8013f64:	686c      	ldr	r4, [r5, #4]
 8013f66:	69a3      	ldr	r3, [r4, #24]
 8013f68:	60a3      	str	r3, [r4, #8]
 8013f6a:	89a3      	ldrh	r3, [r4, #12]
 8013f6c:	071a      	lsls	r2, r3, #28
 8013f6e:	d52f      	bpl.n	8013fd0 <__swbuf_r+0x84>
 8013f70:	6923      	ldr	r3, [r4, #16]
 8013f72:	b36b      	cbz	r3, 8013fd0 <__swbuf_r+0x84>
 8013f74:	6923      	ldr	r3, [r4, #16]
 8013f76:	6820      	ldr	r0, [r4, #0]
 8013f78:	1ac0      	subs	r0, r0, r3
 8013f7a:	6963      	ldr	r3, [r4, #20]
 8013f7c:	b2f6      	uxtb	r6, r6
 8013f7e:	4283      	cmp	r3, r0
 8013f80:	4637      	mov	r7, r6
 8013f82:	dc04      	bgt.n	8013f8e <__swbuf_r+0x42>
 8013f84:	4621      	mov	r1, r4
 8013f86:	4628      	mov	r0, r5
 8013f88:	f000 f93c 	bl	8014204 <_fflush_r>
 8013f8c:	bb30      	cbnz	r0, 8013fdc <__swbuf_r+0x90>
 8013f8e:	68a3      	ldr	r3, [r4, #8]
 8013f90:	3b01      	subs	r3, #1
 8013f92:	60a3      	str	r3, [r4, #8]
 8013f94:	6823      	ldr	r3, [r4, #0]
 8013f96:	1c5a      	adds	r2, r3, #1
 8013f98:	6022      	str	r2, [r4, #0]
 8013f9a:	701e      	strb	r6, [r3, #0]
 8013f9c:	6963      	ldr	r3, [r4, #20]
 8013f9e:	3001      	adds	r0, #1
 8013fa0:	4283      	cmp	r3, r0
 8013fa2:	d004      	beq.n	8013fae <__swbuf_r+0x62>
 8013fa4:	89a3      	ldrh	r3, [r4, #12]
 8013fa6:	07db      	lsls	r3, r3, #31
 8013fa8:	d506      	bpl.n	8013fb8 <__swbuf_r+0x6c>
 8013faa:	2e0a      	cmp	r6, #10
 8013fac:	d104      	bne.n	8013fb8 <__swbuf_r+0x6c>
 8013fae:	4621      	mov	r1, r4
 8013fb0:	4628      	mov	r0, r5
 8013fb2:	f000 f927 	bl	8014204 <_fflush_r>
 8013fb6:	b988      	cbnz	r0, 8013fdc <__swbuf_r+0x90>
 8013fb8:	4638      	mov	r0, r7
 8013fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fbc:	4b0a      	ldr	r3, [pc, #40]	; (8013fe8 <__swbuf_r+0x9c>)
 8013fbe:	429c      	cmp	r4, r3
 8013fc0:	d101      	bne.n	8013fc6 <__swbuf_r+0x7a>
 8013fc2:	68ac      	ldr	r4, [r5, #8]
 8013fc4:	e7cf      	b.n	8013f66 <__swbuf_r+0x1a>
 8013fc6:	4b09      	ldr	r3, [pc, #36]	; (8013fec <__swbuf_r+0xa0>)
 8013fc8:	429c      	cmp	r4, r3
 8013fca:	bf08      	it	eq
 8013fcc:	68ec      	ldreq	r4, [r5, #12]
 8013fce:	e7ca      	b.n	8013f66 <__swbuf_r+0x1a>
 8013fd0:	4621      	mov	r1, r4
 8013fd2:	4628      	mov	r0, r5
 8013fd4:	f000 f81a 	bl	801400c <__swsetup_r>
 8013fd8:	2800      	cmp	r0, #0
 8013fda:	d0cb      	beq.n	8013f74 <__swbuf_r+0x28>
 8013fdc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013fe0:	e7ea      	b.n	8013fb8 <__swbuf_r+0x6c>
 8013fe2:	bf00      	nop
 8013fe4:	080240fc 	.word	0x080240fc
 8013fe8:	0802411c 	.word	0x0802411c
 8013fec:	080240dc 	.word	0x080240dc

08013ff0 <__ascii_wctomb>:
 8013ff0:	b149      	cbz	r1, 8014006 <__ascii_wctomb+0x16>
 8013ff2:	2aff      	cmp	r2, #255	; 0xff
 8013ff4:	bf85      	ittet	hi
 8013ff6:	238a      	movhi	r3, #138	; 0x8a
 8013ff8:	6003      	strhi	r3, [r0, #0]
 8013ffa:	700a      	strbls	r2, [r1, #0]
 8013ffc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8014000:	bf98      	it	ls
 8014002:	2001      	movls	r0, #1
 8014004:	4770      	bx	lr
 8014006:	4608      	mov	r0, r1
 8014008:	4770      	bx	lr
	...

0801400c <__swsetup_r>:
 801400c:	4b32      	ldr	r3, [pc, #200]	; (80140d8 <__swsetup_r+0xcc>)
 801400e:	b570      	push	{r4, r5, r6, lr}
 8014010:	681d      	ldr	r5, [r3, #0]
 8014012:	4606      	mov	r6, r0
 8014014:	460c      	mov	r4, r1
 8014016:	b125      	cbz	r5, 8014022 <__swsetup_r+0x16>
 8014018:	69ab      	ldr	r3, [r5, #24]
 801401a:	b913      	cbnz	r3, 8014022 <__swsetup_r+0x16>
 801401c:	4628      	mov	r0, r5
 801401e:	f000 f985 	bl	801432c <__sinit>
 8014022:	4b2e      	ldr	r3, [pc, #184]	; (80140dc <__swsetup_r+0xd0>)
 8014024:	429c      	cmp	r4, r3
 8014026:	d10f      	bne.n	8014048 <__swsetup_r+0x3c>
 8014028:	686c      	ldr	r4, [r5, #4]
 801402a:	89a3      	ldrh	r3, [r4, #12]
 801402c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014030:	0719      	lsls	r1, r3, #28
 8014032:	d42c      	bmi.n	801408e <__swsetup_r+0x82>
 8014034:	06dd      	lsls	r5, r3, #27
 8014036:	d411      	bmi.n	801405c <__swsetup_r+0x50>
 8014038:	2309      	movs	r3, #9
 801403a:	6033      	str	r3, [r6, #0]
 801403c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014040:	81a3      	strh	r3, [r4, #12]
 8014042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014046:	e03e      	b.n	80140c6 <__swsetup_r+0xba>
 8014048:	4b25      	ldr	r3, [pc, #148]	; (80140e0 <__swsetup_r+0xd4>)
 801404a:	429c      	cmp	r4, r3
 801404c:	d101      	bne.n	8014052 <__swsetup_r+0x46>
 801404e:	68ac      	ldr	r4, [r5, #8]
 8014050:	e7eb      	b.n	801402a <__swsetup_r+0x1e>
 8014052:	4b24      	ldr	r3, [pc, #144]	; (80140e4 <__swsetup_r+0xd8>)
 8014054:	429c      	cmp	r4, r3
 8014056:	bf08      	it	eq
 8014058:	68ec      	ldreq	r4, [r5, #12]
 801405a:	e7e6      	b.n	801402a <__swsetup_r+0x1e>
 801405c:	0758      	lsls	r0, r3, #29
 801405e:	d512      	bpl.n	8014086 <__swsetup_r+0x7a>
 8014060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014062:	b141      	cbz	r1, 8014076 <__swsetup_r+0x6a>
 8014064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014068:	4299      	cmp	r1, r3
 801406a:	d002      	beq.n	8014072 <__swsetup_r+0x66>
 801406c:	4630      	mov	r0, r6
 801406e:	f7fd fcd3 	bl	8011a18 <_free_r>
 8014072:	2300      	movs	r3, #0
 8014074:	6363      	str	r3, [r4, #52]	; 0x34
 8014076:	89a3      	ldrh	r3, [r4, #12]
 8014078:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801407c:	81a3      	strh	r3, [r4, #12]
 801407e:	2300      	movs	r3, #0
 8014080:	6063      	str	r3, [r4, #4]
 8014082:	6923      	ldr	r3, [r4, #16]
 8014084:	6023      	str	r3, [r4, #0]
 8014086:	89a3      	ldrh	r3, [r4, #12]
 8014088:	f043 0308 	orr.w	r3, r3, #8
 801408c:	81a3      	strh	r3, [r4, #12]
 801408e:	6923      	ldr	r3, [r4, #16]
 8014090:	b94b      	cbnz	r3, 80140a6 <__swsetup_r+0x9a>
 8014092:	89a3      	ldrh	r3, [r4, #12]
 8014094:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801409c:	d003      	beq.n	80140a6 <__swsetup_r+0x9a>
 801409e:	4621      	mov	r1, r4
 80140a0:	4630      	mov	r0, r6
 80140a2:	f000 fa05 	bl	80144b0 <__smakebuf_r>
 80140a6:	89a0      	ldrh	r0, [r4, #12]
 80140a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80140ac:	f010 0301 	ands.w	r3, r0, #1
 80140b0:	d00a      	beq.n	80140c8 <__swsetup_r+0xbc>
 80140b2:	2300      	movs	r3, #0
 80140b4:	60a3      	str	r3, [r4, #8]
 80140b6:	6963      	ldr	r3, [r4, #20]
 80140b8:	425b      	negs	r3, r3
 80140ba:	61a3      	str	r3, [r4, #24]
 80140bc:	6923      	ldr	r3, [r4, #16]
 80140be:	b943      	cbnz	r3, 80140d2 <__swsetup_r+0xc6>
 80140c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80140c4:	d1ba      	bne.n	801403c <__swsetup_r+0x30>
 80140c6:	bd70      	pop	{r4, r5, r6, pc}
 80140c8:	0781      	lsls	r1, r0, #30
 80140ca:	bf58      	it	pl
 80140cc:	6963      	ldrpl	r3, [r4, #20]
 80140ce:	60a3      	str	r3, [r4, #8]
 80140d0:	e7f4      	b.n	80140bc <__swsetup_r+0xb0>
 80140d2:	2000      	movs	r0, #0
 80140d4:	e7f7      	b.n	80140c6 <__swsetup_r+0xba>
 80140d6:	bf00      	nop
 80140d8:	200006a4 	.word	0x200006a4
 80140dc:	080240fc 	.word	0x080240fc
 80140e0:	0802411c 	.word	0x0802411c
 80140e4:	080240dc 	.word	0x080240dc

080140e8 <abort>:
 80140e8:	b508      	push	{r3, lr}
 80140ea:	2006      	movs	r0, #6
 80140ec:	f000 fa48 	bl	8014580 <raise>
 80140f0:	2001      	movs	r0, #1
 80140f2:	f000 fc6d 	bl	80149d0 <_exit>
	...

080140f8 <__sflush_r>:
 80140f8:	898a      	ldrh	r2, [r1, #12]
 80140fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140fe:	4605      	mov	r5, r0
 8014100:	0710      	lsls	r0, r2, #28
 8014102:	460c      	mov	r4, r1
 8014104:	d458      	bmi.n	80141b8 <__sflush_r+0xc0>
 8014106:	684b      	ldr	r3, [r1, #4]
 8014108:	2b00      	cmp	r3, #0
 801410a:	dc05      	bgt.n	8014118 <__sflush_r+0x20>
 801410c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801410e:	2b00      	cmp	r3, #0
 8014110:	dc02      	bgt.n	8014118 <__sflush_r+0x20>
 8014112:	2000      	movs	r0, #0
 8014114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014118:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801411a:	2e00      	cmp	r6, #0
 801411c:	d0f9      	beq.n	8014112 <__sflush_r+0x1a>
 801411e:	2300      	movs	r3, #0
 8014120:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014124:	682f      	ldr	r7, [r5, #0]
 8014126:	602b      	str	r3, [r5, #0]
 8014128:	d032      	beq.n	8014190 <__sflush_r+0x98>
 801412a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801412c:	89a3      	ldrh	r3, [r4, #12]
 801412e:	075a      	lsls	r2, r3, #29
 8014130:	d505      	bpl.n	801413e <__sflush_r+0x46>
 8014132:	6863      	ldr	r3, [r4, #4]
 8014134:	1ac0      	subs	r0, r0, r3
 8014136:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014138:	b10b      	cbz	r3, 801413e <__sflush_r+0x46>
 801413a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801413c:	1ac0      	subs	r0, r0, r3
 801413e:	2300      	movs	r3, #0
 8014140:	4602      	mov	r2, r0
 8014142:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014144:	6a21      	ldr	r1, [r4, #32]
 8014146:	4628      	mov	r0, r5
 8014148:	47b0      	blx	r6
 801414a:	1c43      	adds	r3, r0, #1
 801414c:	89a3      	ldrh	r3, [r4, #12]
 801414e:	d106      	bne.n	801415e <__sflush_r+0x66>
 8014150:	6829      	ldr	r1, [r5, #0]
 8014152:	291d      	cmp	r1, #29
 8014154:	d82c      	bhi.n	80141b0 <__sflush_r+0xb8>
 8014156:	4a2a      	ldr	r2, [pc, #168]	; (8014200 <__sflush_r+0x108>)
 8014158:	40ca      	lsrs	r2, r1
 801415a:	07d6      	lsls	r6, r2, #31
 801415c:	d528      	bpl.n	80141b0 <__sflush_r+0xb8>
 801415e:	2200      	movs	r2, #0
 8014160:	6062      	str	r2, [r4, #4]
 8014162:	04d9      	lsls	r1, r3, #19
 8014164:	6922      	ldr	r2, [r4, #16]
 8014166:	6022      	str	r2, [r4, #0]
 8014168:	d504      	bpl.n	8014174 <__sflush_r+0x7c>
 801416a:	1c42      	adds	r2, r0, #1
 801416c:	d101      	bne.n	8014172 <__sflush_r+0x7a>
 801416e:	682b      	ldr	r3, [r5, #0]
 8014170:	b903      	cbnz	r3, 8014174 <__sflush_r+0x7c>
 8014172:	6560      	str	r0, [r4, #84]	; 0x54
 8014174:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014176:	602f      	str	r7, [r5, #0]
 8014178:	2900      	cmp	r1, #0
 801417a:	d0ca      	beq.n	8014112 <__sflush_r+0x1a>
 801417c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014180:	4299      	cmp	r1, r3
 8014182:	d002      	beq.n	801418a <__sflush_r+0x92>
 8014184:	4628      	mov	r0, r5
 8014186:	f7fd fc47 	bl	8011a18 <_free_r>
 801418a:	2000      	movs	r0, #0
 801418c:	6360      	str	r0, [r4, #52]	; 0x34
 801418e:	e7c1      	b.n	8014114 <__sflush_r+0x1c>
 8014190:	6a21      	ldr	r1, [r4, #32]
 8014192:	2301      	movs	r3, #1
 8014194:	4628      	mov	r0, r5
 8014196:	47b0      	blx	r6
 8014198:	1c41      	adds	r1, r0, #1
 801419a:	d1c7      	bne.n	801412c <__sflush_r+0x34>
 801419c:	682b      	ldr	r3, [r5, #0]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d0c4      	beq.n	801412c <__sflush_r+0x34>
 80141a2:	2b1d      	cmp	r3, #29
 80141a4:	d001      	beq.n	80141aa <__sflush_r+0xb2>
 80141a6:	2b16      	cmp	r3, #22
 80141a8:	d101      	bne.n	80141ae <__sflush_r+0xb6>
 80141aa:	602f      	str	r7, [r5, #0]
 80141ac:	e7b1      	b.n	8014112 <__sflush_r+0x1a>
 80141ae:	89a3      	ldrh	r3, [r4, #12]
 80141b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80141b4:	81a3      	strh	r3, [r4, #12]
 80141b6:	e7ad      	b.n	8014114 <__sflush_r+0x1c>
 80141b8:	690f      	ldr	r7, [r1, #16]
 80141ba:	2f00      	cmp	r7, #0
 80141bc:	d0a9      	beq.n	8014112 <__sflush_r+0x1a>
 80141be:	0793      	lsls	r3, r2, #30
 80141c0:	680e      	ldr	r6, [r1, #0]
 80141c2:	bf08      	it	eq
 80141c4:	694b      	ldreq	r3, [r1, #20]
 80141c6:	600f      	str	r7, [r1, #0]
 80141c8:	bf18      	it	ne
 80141ca:	2300      	movne	r3, #0
 80141cc:	eba6 0807 	sub.w	r8, r6, r7
 80141d0:	608b      	str	r3, [r1, #8]
 80141d2:	f1b8 0f00 	cmp.w	r8, #0
 80141d6:	dd9c      	ble.n	8014112 <__sflush_r+0x1a>
 80141d8:	6a21      	ldr	r1, [r4, #32]
 80141da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80141dc:	4643      	mov	r3, r8
 80141de:	463a      	mov	r2, r7
 80141e0:	4628      	mov	r0, r5
 80141e2:	47b0      	blx	r6
 80141e4:	2800      	cmp	r0, #0
 80141e6:	dc06      	bgt.n	80141f6 <__sflush_r+0xfe>
 80141e8:	89a3      	ldrh	r3, [r4, #12]
 80141ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80141ee:	81a3      	strh	r3, [r4, #12]
 80141f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80141f4:	e78e      	b.n	8014114 <__sflush_r+0x1c>
 80141f6:	4407      	add	r7, r0
 80141f8:	eba8 0800 	sub.w	r8, r8, r0
 80141fc:	e7e9      	b.n	80141d2 <__sflush_r+0xda>
 80141fe:	bf00      	nop
 8014200:	20400001 	.word	0x20400001

08014204 <_fflush_r>:
 8014204:	b538      	push	{r3, r4, r5, lr}
 8014206:	690b      	ldr	r3, [r1, #16]
 8014208:	4605      	mov	r5, r0
 801420a:	460c      	mov	r4, r1
 801420c:	b913      	cbnz	r3, 8014214 <_fflush_r+0x10>
 801420e:	2500      	movs	r5, #0
 8014210:	4628      	mov	r0, r5
 8014212:	bd38      	pop	{r3, r4, r5, pc}
 8014214:	b118      	cbz	r0, 801421e <_fflush_r+0x1a>
 8014216:	6983      	ldr	r3, [r0, #24]
 8014218:	b90b      	cbnz	r3, 801421e <_fflush_r+0x1a>
 801421a:	f000 f887 	bl	801432c <__sinit>
 801421e:	4b14      	ldr	r3, [pc, #80]	; (8014270 <_fflush_r+0x6c>)
 8014220:	429c      	cmp	r4, r3
 8014222:	d11b      	bne.n	801425c <_fflush_r+0x58>
 8014224:	686c      	ldr	r4, [r5, #4]
 8014226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801422a:	2b00      	cmp	r3, #0
 801422c:	d0ef      	beq.n	801420e <_fflush_r+0xa>
 801422e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014230:	07d0      	lsls	r0, r2, #31
 8014232:	d404      	bmi.n	801423e <_fflush_r+0x3a>
 8014234:	0599      	lsls	r1, r3, #22
 8014236:	d402      	bmi.n	801423e <_fflush_r+0x3a>
 8014238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801423a:	f7ff fcf8 	bl	8013c2e <__retarget_lock_acquire_recursive>
 801423e:	4628      	mov	r0, r5
 8014240:	4621      	mov	r1, r4
 8014242:	f7ff ff59 	bl	80140f8 <__sflush_r>
 8014246:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014248:	07da      	lsls	r2, r3, #31
 801424a:	4605      	mov	r5, r0
 801424c:	d4e0      	bmi.n	8014210 <_fflush_r+0xc>
 801424e:	89a3      	ldrh	r3, [r4, #12]
 8014250:	059b      	lsls	r3, r3, #22
 8014252:	d4dd      	bmi.n	8014210 <_fflush_r+0xc>
 8014254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014256:	f7ff fceb 	bl	8013c30 <__retarget_lock_release_recursive>
 801425a:	e7d9      	b.n	8014210 <_fflush_r+0xc>
 801425c:	4b05      	ldr	r3, [pc, #20]	; (8014274 <_fflush_r+0x70>)
 801425e:	429c      	cmp	r4, r3
 8014260:	d101      	bne.n	8014266 <_fflush_r+0x62>
 8014262:	68ac      	ldr	r4, [r5, #8]
 8014264:	e7df      	b.n	8014226 <_fflush_r+0x22>
 8014266:	4b04      	ldr	r3, [pc, #16]	; (8014278 <_fflush_r+0x74>)
 8014268:	429c      	cmp	r4, r3
 801426a:	bf08      	it	eq
 801426c:	68ec      	ldreq	r4, [r5, #12]
 801426e:	e7da      	b.n	8014226 <_fflush_r+0x22>
 8014270:	080240fc 	.word	0x080240fc
 8014274:	0802411c 	.word	0x0802411c
 8014278:	080240dc 	.word	0x080240dc

0801427c <std>:
 801427c:	2300      	movs	r3, #0
 801427e:	b510      	push	{r4, lr}
 8014280:	4604      	mov	r4, r0
 8014282:	e9c0 3300 	strd	r3, r3, [r0]
 8014286:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801428a:	6083      	str	r3, [r0, #8]
 801428c:	8181      	strh	r1, [r0, #12]
 801428e:	6643      	str	r3, [r0, #100]	; 0x64
 8014290:	81c2      	strh	r2, [r0, #14]
 8014292:	6183      	str	r3, [r0, #24]
 8014294:	4619      	mov	r1, r3
 8014296:	2208      	movs	r2, #8
 8014298:	305c      	adds	r0, #92	; 0x5c
 801429a:	f7fd fbb5 	bl	8011a08 <memset>
 801429e:	4b05      	ldr	r3, [pc, #20]	; (80142b4 <std+0x38>)
 80142a0:	6263      	str	r3, [r4, #36]	; 0x24
 80142a2:	4b05      	ldr	r3, [pc, #20]	; (80142b8 <std+0x3c>)
 80142a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80142a6:	4b05      	ldr	r3, [pc, #20]	; (80142bc <std+0x40>)
 80142a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80142aa:	4b05      	ldr	r3, [pc, #20]	; (80142c0 <std+0x44>)
 80142ac:	6224      	str	r4, [r4, #32]
 80142ae:	6323      	str	r3, [r4, #48]	; 0x30
 80142b0:	bd10      	pop	{r4, pc}
 80142b2:	bf00      	nop
 80142b4:	080145b9 	.word	0x080145b9
 80142b8:	080145db 	.word	0x080145db
 80142bc:	08014613 	.word	0x08014613
 80142c0:	08014637 	.word	0x08014637

080142c4 <_cleanup_r>:
 80142c4:	4901      	ldr	r1, [pc, #4]	; (80142cc <_cleanup_r+0x8>)
 80142c6:	f000 b8af 	b.w	8014428 <_fwalk_reent>
 80142ca:	bf00      	nop
 80142cc:	08014205 	.word	0x08014205

080142d0 <__sfmoreglue>:
 80142d0:	b570      	push	{r4, r5, r6, lr}
 80142d2:	1e4a      	subs	r2, r1, #1
 80142d4:	2568      	movs	r5, #104	; 0x68
 80142d6:	4355      	muls	r5, r2
 80142d8:	460e      	mov	r6, r1
 80142da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80142de:	f7fd fbeb 	bl	8011ab8 <_malloc_r>
 80142e2:	4604      	mov	r4, r0
 80142e4:	b140      	cbz	r0, 80142f8 <__sfmoreglue+0x28>
 80142e6:	2100      	movs	r1, #0
 80142e8:	e9c0 1600 	strd	r1, r6, [r0]
 80142ec:	300c      	adds	r0, #12
 80142ee:	60a0      	str	r0, [r4, #8]
 80142f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80142f4:	f7fd fb88 	bl	8011a08 <memset>
 80142f8:	4620      	mov	r0, r4
 80142fa:	bd70      	pop	{r4, r5, r6, pc}

080142fc <__sfp_lock_acquire>:
 80142fc:	4801      	ldr	r0, [pc, #4]	; (8014304 <__sfp_lock_acquire+0x8>)
 80142fe:	f7ff bc96 	b.w	8013c2e <__retarget_lock_acquire_recursive>
 8014302:	bf00      	nop
 8014304:	20001c5c 	.word	0x20001c5c

08014308 <__sfp_lock_release>:
 8014308:	4801      	ldr	r0, [pc, #4]	; (8014310 <__sfp_lock_release+0x8>)
 801430a:	f7ff bc91 	b.w	8013c30 <__retarget_lock_release_recursive>
 801430e:	bf00      	nop
 8014310:	20001c5c 	.word	0x20001c5c

08014314 <__sinit_lock_acquire>:
 8014314:	4801      	ldr	r0, [pc, #4]	; (801431c <__sinit_lock_acquire+0x8>)
 8014316:	f7ff bc8a 	b.w	8013c2e <__retarget_lock_acquire_recursive>
 801431a:	bf00      	nop
 801431c:	20001c57 	.word	0x20001c57

08014320 <__sinit_lock_release>:
 8014320:	4801      	ldr	r0, [pc, #4]	; (8014328 <__sinit_lock_release+0x8>)
 8014322:	f7ff bc85 	b.w	8013c30 <__retarget_lock_release_recursive>
 8014326:	bf00      	nop
 8014328:	20001c57 	.word	0x20001c57

0801432c <__sinit>:
 801432c:	b510      	push	{r4, lr}
 801432e:	4604      	mov	r4, r0
 8014330:	f7ff fff0 	bl	8014314 <__sinit_lock_acquire>
 8014334:	69a3      	ldr	r3, [r4, #24]
 8014336:	b11b      	cbz	r3, 8014340 <__sinit+0x14>
 8014338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801433c:	f7ff bff0 	b.w	8014320 <__sinit_lock_release>
 8014340:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014344:	6523      	str	r3, [r4, #80]	; 0x50
 8014346:	4b13      	ldr	r3, [pc, #76]	; (8014394 <__sinit+0x68>)
 8014348:	4a13      	ldr	r2, [pc, #76]	; (8014398 <__sinit+0x6c>)
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	62a2      	str	r2, [r4, #40]	; 0x28
 801434e:	42a3      	cmp	r3, r4
 8014350:	bf04      	itt	eq
 8014352:	2301      	moveq	r3, #1
 8014354:	61a3      	streq	r3, [r4, #24]
 8014356:	4620      	mov	r0, r4
 8014358:	f000 f820 	bl	801439c <__sfp>
 801435c:	6060      	str	r0, [r4, #4]
 801435e:	4620      	mov	r0, r4
 8014360:	f000 f81c 	bl	801439c <__sfp>
 8014364:	60a0      	str	r0, [r4, #8]
 8014366:	4620      	mov	r0, r4
 8014368:	f000 f818 	bl	801439c <__sfp>
 801436c:	2200      	movs	r2, #0
 801436e:	60e0      	str	r0, [r4, #12]
 8014370:	2104      	movs	r1, #4
 8014372:	6860      	ldr	r0, [r4, #4]
 8014374:	f7ff ff82 	bl	801427c <std>
 8014378:	68a0      	ldr	r0, [r4, #8]
 801437a:	2201      	movs	r2, #1
 801437c:	2109      	movs	r1, #9
 801437e:	f7ff ff7d 	bl	801427c <std>
 8014382:	68e0      	ldr	r0, [r4, #12]
 8014384:	2202      	movs	r2, #2
 8014386:	2112      	movs	r1, #18
 8014388:	f7ff ff78 	bl	801427c <std>
 801438c:	2301      	movs	r3, #1
 801438e:	61a3      	str	r3, [r4, #24]
 8014390:	e7d2      	b.n	8014338 <__sinit+0xc>
 8014392:	bf00      	nop
 8014394:	08023d58 	.word	0x08023d58
 8014398:	080142c5 	.word	0x080142c5

0801439c <__sfp>:
 801439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801439e:	4607      	mov	r7, r0
 80143a0:	f7ff ffac 	bl	80142fc <__sfp_lock_acquire>
 80143a4:	4b1e      	ldr	r3, [pc, #120]	; (8014420 <__sfp+0x84>)
 80143a6:	681e      	ldr	r6, [r3, #0]
 80143a8:	69b3      	ldr	r3, [r6, #24]
 80143aa:	b913      	cbnz	r3, 80143b2 <__sfp+0x16>
 80143ac:	4630      	mov	r0, r6
 80143ae:	f7ff ffbd 	bl	801432c <__sinit>
 80143b2:	3648      	adds	r6, #72	; 0x48
 80143b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80143b8:	3b01      	subs	r3, #1
 80143ba:	d503      	bpl.n	80143c4 <__sfp+0x28>
 80143bc:	6833      	ldr	r3, [r6, #0]
 80143be:	b30b      	cbz	r3, 8014404 <__sfp+0x68>
 80143c0:	6836      	ldr	r6, [r6, #0]
 80143c2:	e7f7      	b.n	80143b4 <__sfp+0x18>
 80143c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80143c8:	b9d5      	cbnz	r5, 8014400 <__sfp+0x64>
 80143ca:	4b16      	ldr	r3, [pc, #88]	; (8014424 <__sfp+0x88>)
 80143cc:	60e3      	str	r3, [r4, #12]
 80143ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80143d2:	6665      	str	r5, [r4, #100]	; 0x64
 80143d4:	f7ff fc2a 	bl	8013c2c <__retarget_lock_init_recursive>
 80143d8:	f7ff ff96 	bl	8014308 <__sfp_lock_release>
 80143dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80143e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80143e4:	6025      	str	r5, [r4, #0]
 80143e6:	61a5      	str	r5, [r4, #24]
 80143e8:	2208      	movs	r2, #8
 80143ea:	4629      	mov	r1, r5
 80143ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80143f0:	f7fd fb0a 	bl	8011a08 <memset>
 80143f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80143f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80143fc:	4620      	mov	r0, r4
 80143fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014400:	3468      	adds	r4, #104	; 0x68
 8014402:	e7d9      	b.n	80143b8 <__sfp+0x1c>
 8014404:	2104      	movs	r1, #4
 8014406:	4638      	mov	r0, r7
 8014408:	f7ff ff62 	bl	80142d0 <__sfmoreglue>
 801440c:	4604      	mov	r4, r0
 801440e:	6030      	str	r0, [r6, #0]
 8014410:	2800      	cmp	r0, #0
 8014412:	d1d5      	bne.n	80143c0 <__sfp+0x24>
 8014414:	f7ff ff78 	bl	8014308 <__sfp_lock_release>
 8014418:	230c      	movs	r3, #12
 801441a:	603b      	str	r3, [r7, #0]
 801441c:	e7ee      	b.n	80143fc <__sfp+0x60>
 801441e:	bf00      	nop
 8014420:	08023d58 	.word	0x08023d58
 8014424:	ffff0001 	.word	0xffff0001

08014428 <_fwalk_reent>:
 8014428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801442c:	4606      	mov	r6, r0
 801442e:	4688      	mov	r8, r1
 8014430:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014434:	2700      	movs	r7, #0
 8014436:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801443a:	f1b9 0901 	subs.w	r9, r9, #1
 801443e:	d505      	bpl.n	801444c <_fwalk_reent+0x24>
 8014440:	6824      	ldr	r4, [r4, #0]
 8014442:	2c00      	cmp	r4, #0
 8014444:	d1f7      	bne.n	8014436 <_fwalk_reent+0xe>
 8014446:	4638      	mov	r0, r7
 8014448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801444c:	89ab      	ldrh	r3, [r5, #12]
 801444e:	2b01      	cmp	r3, #1
 8014450:	d907      	bls.n	8014462 <_fwalk_reent+0x3a>
 8014452:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014456:	3301      	adds	r3, #1
 8014458:	d003      	beq.n	8014462 <_fwalk_reent+0x3a>
 801445a:	4629      	mov	r1, r5
 801445c:	4630      	mov	r0, r6
 801445e:	47c0      	blx	r8
 8014460:	4307      	orrs	r7, r0
 8014462:	3568      	adds	r5, #104	; 0x68
 8014464:	e7e9      	b.n	801443a <_fwalk_reent+0x12>

08014466 <__swhatbuf_r>:
 8014466:	b570      	push	{r4, r5, r6, lr}
 8014468:	460e      	mov	r6, r1
 801446a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801446e:	2900      	cmp	r1, #0
 8014470:	b096      	sub	sp, #88	; 0x58
 8014472:	4614      	mov	r4, r2
 8014474:	461d      	mov	r5, r3
 8014476:	da07      	bge.n	8014488 <__swhatbuf_r+0x22>
 8014478:	2300      	movs	r3, #0
 801447a:	602b      	str	r3, [r5, #0]
 801447c:	89b3      	ldrh	r3, [r6, #12]
 801447e:	061a      	lsls	r2, r3, #24
 8014480:	d410      	bmi.n	80144a4 <__swhatbuf_r+0x3e>
 8014482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014486:	e00e      	b.n	80144a6 <__swhatbuf_r+0x40>
 8014488:	466a      	mov	r2, sp
 801448a:	f000 f8fb 	bl	8014684 <_fstat_r>
 801448e:	2800      	cmp	r0, #0
 8014490:	dbf2      	blt.n	8014478 <__swhatbuf_r+0x12>
 8014492:	9a01      	ldr	r2, [sp, #4]
 8014494:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014498:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801449c:	425a      	negs	r2, r3
 801449e:	415a      	adcs	r2, r3
 80144a0:	602a      	str	r2, [r5, #0]
 80144a2:	e7ee      	b.n	8014482 <__swhatbuf_r+0x1c>
 80144a4:	2340      	movs	r3, #64	; 0x40
 80144a6:	2000      	movs	r0, #0
 80144a8:	6023      	str	r3, [r4, #0]
 80144aa:	b016      	add	sp, #88	; 0x58
 80144ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080144b0 <__smakebuf_r>:
 80144b0:	898b      	ldrh	r3, [r1, #12]
 80144b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80144b4:	079d      	lsls	r5, r3, #30
 80144b6:	4606      	mov	r6, r0
 80144b8:	460c      	mov	r4, r1
 80144ba:	d507      	bpl.n	80144cc <__smakebuf_r+0x1c>
 80144bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80144c0:	6023      	str	r3, [r4, #0]
 80144c2:	6123      	str	r3, [r4, #16]
 80144c4:	2301      	movs	r3, #1
 80144c6:	6163      	str	r3, [r4, #20]
 80144c8:	b002      	add	sp, #8
 80144ca:	bd70      	pop	{r4, r5, r6, pc}
 80144cc:	ab01      	add	r3, sp, #4
 80144ce:	466a      	mov	r2, sp
 80144d0:	f7ff ffc9 	bl	8014466 <__swhatbuf_r>
 80144d4:	9900      	ldr	r1, [sp, #0]
 80144d6:	4605      	mov	r5, r0
 80144d8:	4630      	mov	r0, r6
 80144da:	f7fd faed 	bl	8011ab8 <_malloc_r>
 80144de:	b948      	cbnz	r0, 80144f4 <__smakebuf_r+0x44>
 80144e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80144e4:	059a      	lsls	r2, r3, #22
 80144e6:	d4ef      	bmi.n	80144c8 <__smakebuf_r+0x18>
 80144e8:	f023 0303 	bic.w	r3, r3, #3
 80144ec:	f043 0302 	orr.w	r3, r3, #2
 80144f0:	81a3      	strh	r3, [r4, #12]
 80144f2:	e7e3      	b.n	80144bc <__smakebuf_r+0xc>
 80144f4:	4b0d      	ldr	r3, [pc, #52]	; (801452c <__smakebuf_r+0x7c>)
 80144f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80144f8:	89a3      	ldrh	r3, [r4, #12]
 80144fa:	6020      	str	r0, [r4, #0]
 80144fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014500:	81a3      	strh	r3, [r4, #12]
 8014502:	9b00      	ldr	r3, [sp, #0]
 8014504:	6163      	str	r3, [r4, #20]
 8014506:	9b01      	ldr	r3, [sp, #4]
 8014508:	6120      	str	r0, [r4, #16]
 801450a:	b15b      	cbz	r3, 8014524 <__smakebuf_r+0x74>
 801450c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014510:	4630      	mov	r0, r6
 8014512:	f000 f8c9 	bl	80146a8 <_isatty_r>
 8014516:	b128      	cbz	r0, 8014524 <__smakebuf_r+0x74>
 8014518:	89a3      	ldrh	r3, [r4, #12]
 801451a:	f023 0303 	bic.w	r3, r3, #3
 801451e:	f043 0301 	orr.w	r3, r3, #1
 8014522:	81a3      	strh	r3, [r4, #12]
 8014524:	89a0      	ldrh	r0, [r4, #12]
 8014526:	4305      	orrs	r5, r0
 8014528:	81a5      	strh	r5, [r4, #12]
 801452a:	e7cd      	b.n	80144c8 <__smakebuf_r+0x18>
 801452c:	080142c5 	.word	0x080142c5

08014530 <_raise_r>:
 8014530:	291f      	cmp	r1, #31
 8014532:	b538      	push	{r3, r4, r5, lr}
 8014534:	4604      	mov	r4, r0
 8014536:	460d      	mov	r5, r1
 8014538:	d904      	bls.n	8014544 <_raise_r+0x14>
 801453a:	2316      	movs	r3, #22
 801453c:	6003      	str	r3, [r0, #0]
 801453e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014542:	bd38      	pop	{r3, r4, r5, pc}
 8014544:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014546:	b112      	cbz	r2, 801454e <_raise_r+0x1e>
 8014548:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801454c:	b94b      	cbnz	r3, 8014562 <_raise_r+0x32>
 801454e:	4620      	mov	r0, r4
 8014550:	f000 f830 	bl	80145b4 <_getpid_r>
 8014554:	462a      	mov	r2, r5
 8014556:	4601      	mov	r1, r0
 8014558:	4620      	mov	r0, r4
 801455a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801455e:	f000 b817 	b.w	8014590 <_kill_r>
 8014562:	2b01      	cmp	r3, #1
 8014564:	d00a      	beq.n	801457c <_raise_r+0x4c>
 8014566:	1c59      	adds	r1, r3, #1
 8014568:	d103      	bne.n	8014572 <_raise_r+0x42>
 801456a:	2316      	movs	r3, #22
 801456c:	6003      	str	r3, [r0, #0]
 801456e:	2001      	movs	r0, #1
 8014570:	e7e7      	b.n	8014542 <_raise_r+0x12>
 8014572:	2400      	movs	r4, #0
 8014574:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014578:	4628      	mov	r0, r5
 801457a:	4798      	blx	r3
 801457c:	2000      	movs	r0, #0
 801457e:	e7e0      	b.n	8014542 <_raise_r+0x12>

08014580 <raise>:
 8014580:	4b02      	ldr	r3, [pc, #8]	; (801458c <raise+0xc>)
 8014582:	4601      	mov	r1, r0
 8014584:	6818      	ldr	r0, [r3, #0]
 8014586:	f7ff bfd3 	b.w	8014530 <_raise_r>
 801458a:	bf00      	nop
 801458c:	200006a4 	.word	0x200006a4

08014590 <_kill_r>:
 8014590:	b538      	push	{r3, r4, r5, lr}
 8014592:	4d07      	ldr	r5, [pc, #28]	; (80145b0 <_kill_r+0x20>)
 8014594:	2300      	movs	r3, #0
 8014596:	4604      	mov	r4, r0
 8014598:	4608      	mov	r0, r1
 801459a:	4611      	mov	r1, r2
 801459c:	602b      	str	r3, [r5, #0]
 801459e:	f000 f9f7 	bl	8014990 <_kill>
 80145a2:	1c43      	adds	r3, r0, #1
 80145a4:	d102      	bne.n	80145ac <_kill_r+0x1c>
 80145a6:	682b      	ldr	r3, [r5, #0]
 80145a8:	b103      	cbz	r3, 80145ac <_kill_r+0x1c>
 80145aa:	6023      	str	r3, [r4, #0]
 80145ac:	bd38      	pop	{r3, r4, r5, pc}
 80145ae:	bf00      	nop
 80145b0:	20001c50 	.word	0x20001c50

080145b4 <_getpid_r>:
 80145b4:	f000 b9dc 	b.w	8014970 <_getpid>

080145b8 <__sread>:
 80145b8:	b510      	push	{r4, lr}
 80145ba:	460c      	mov	r4, r1
 80145bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145c0:	f000 f894 	bl	80146ec <_read_r>
 80145c4:	2800      	cmp	r0, #0
 80145c6:	bfab      	itete	ge
 80145c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80145ca:	89a3      	ldrhlt	r3, [r4, #12]
 80145cc:	181b      	addge	r3, r3, r0
 80145ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80145d2:	bfac      	ite	ge
 80145d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80145d6:	81a3      	strhlt	r3, [r4, #12]
 80145d8:	bd10      	pop	{r4, pc}

080145da <__swrite>:
 80145da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145de:	461f      	mov	r7, r3
 80145e0:	898b      	ldrh	r3, [r1, #12]
 80145e2:	05db      	lsls	r3, r3, #23
 80145e4:	4605      	mov	r5, r0
 80145e6:	460c      	mov	r4, r1
 80145e8:	4616      	mov	r6, r2
 80145ea:	d505      	bpl.n	80145f8 <__swrite+0x1e>
 80145ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145f0:	2302      	movs	r3, #2
 80145f2:	2200      	movs	r2, #0
 80145f4:	f000 f868 	bl	80146c8 <_lseek_r>
 80145f8:	89a3      	ldrh	r3, [r4, #12]
 80145fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80145fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014602:	81a3      	strh	r3, [r4, #12]
 8014604:	4632      	mov	r2, r6
 8014606:	463b      	mov	r3, r7
 8014608:	4628      	mov	r0, r5
 801460a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801460e:	f000 b817 	b.w	8014640 <_write_r>

08014612 <__sseek>:
 8014612:	b510      	push	{r4, lr}
 8014614:	460c      	mov	r4, r1
 8014616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801461a:	f000 f855 	bl	80146c8 <_lseek_r>
 801461e:	1c43      	adds	r3, r0, #1
 8014620:	89a3      	ldrh	r3, [r4, #12]
 8014622:	bf15      	itete	ne
 8014624:	6560      	strne	r0, [r4, #84]	; 0x54
 8014626:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801462a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801462e:	81a3      	strheq	r3, [r4, #12]
 8014630:	bf18      	it	ne
 8014632:	81a3      	strhne	r3, [r4, #12]
 8014634:	bd10      	pop	{r4, pc}

08014636 <__sclose>:
 8014636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801463a:	f000 b813 	b.w	8014664 <_close_r>
	...

08014640 <_write_r>:
 8014640:	b538      	push	{r3, r4, r5, lr}
 8014642:	4d07      	ldr	r5, [pc, #28]	; (8014660 <_write_r+0x20>)
 8014644:	4604      	mov	r4, r0
 8014646:	4608      	mov	r0, r1
 8014648:	4611      	mov	r1, r2
 801464a:	2200      	movs	r2, #0
 801464c:	602a      	str	r2, [r5, #0]
 801464e:	461a      	mov	r2, r3
 8014650:	f000 f9b6 	bl	80149c0 <_write>
 8014654:	1c43      	adds	r3, r0, #1
 8014656:	d102      	bne.n	801465e <_write_r+0x1e>
 8014658:	682b      	ldr	r3, [r5, #0]
 801465a:	b103      	cbz	r3, 801465e <_write_r+0x1e>
 801465c:	6023      	str	r3, [r4, #0]
 801465e:	bd38      	pop	{r3, r4, r5, pc}
 8014660:	20001c50 	.word	0x20001c50

08014664 <_close_r>:
 8014664:	b538      	push	{r3, r4, r5, lr}
 8014666:	4d06      	ldr	r5, [pc, #24]	; (8014680 <_close_r+0x1c>)
 8014668:	2300      	movs	r3, #0
 801466a:	4604      	mov	r4, r0
 801466c:	4608      	mov	r0, r1
 801466e:	602b      	str	r3, [r5, #0]
 8014670:	f000 f96e 	bl	8014950 <_close>
 8014674:	1c43      	adds	r3, r0, #1
 8014676:	d102      	bne.n	801467e <_close_r+0x1a>
 8014678:	682b      	ldr	r3, [r5, #0]
 801467a:	b103      	cbz	r3, 801467e <_close_r+0x1a>
 801467c:	6023      	str	r3, [r4, #0]
 801467e:	bd38      	pop	{r3, r4, r5, pc}
 8014680:	20001c50 	.word	0x20001c50

08014684 <_fstat_r>:
 8014684:	b538      	push	{r3, r4, r5, lr}
 8014686:	4d07      	ldr	r5, [pc, #28]	; (80146a4 <_fstat_r+0x20>)
 8014688:	2300      	movs	r3, #0
 801468a:	4604      	mov	r4, r0
 801468c:	4608      	mov	r0, r1
 801468e:	4611      	mov	r1, r2
 8014690:	602b      	str	r3, [r5, #0]
 8014692:	f000 f965 	bl	8014960 <_fstat>
 8014696:	1c43      	adds	r3, r0, #1
 8014698:	d102      	bne.n	80146a0 <_fstat_r+0x1c>
 801469a:	682b      	ldr	r3, [r5, #0]
 801469c:	b103      	cbz	r3, 80146a0 <_fstat_r+0x1c>
 801469e:	6023      	str	r3, [r4, #0]
 80146a0:	bd38      	pop	{r3, r4, r5, pc}
 80146a2:	bf00      	nop
 80146a4:	20001c50 	.word	0x20001c50

080146a8 <_isatty_r>:
 80146a8:	b538      	push	{r3, r4, r5, lr}
 80146aa:	4d06      	ldr	r5, [pc, #24]	; (80146c4 <_isatty_r+0x1c>)
 80146ac:	2300      	movs	r3, #0
 80146ae:	4604      	mov	r4, r0
 80146b0:	4608      	mov	r0, r1
 80146b2:	602b      	str	r3, [r5, #0]
 80146b4:	f000 f964 	bl	8014980 <_isatty>
 80146b8:	1c43      	adds	r3, r0, #1
 80146ba:	d102      	bne.n	80146c2 <_isatty_r+0x1a>
 80146bc:	682b      	ldr	r3, [r5, #0]
 80146be:	b103      	cbz	r3, 80146c2 <_isatty_r+0x1a>
 80146c0:	6023      	str	r3, [r4, #0]
 80146c2:	bd38      	pop	{r3, r4, r5, pc}
 80146c4:	20001c50 	.word	0x20001c50

080146c8 <_lseek_r>:
 80146c8:	b538      	push	{r3, r4, r5, lr}
 80146ca:	4d07      	ldr	r5, [pc, #28]	; (80146e8 <_lseek_r+0x20>)
 80146cc:	4604      	mov	r4, r0
 80146ce:	4608      	mov	r0, r1
 80146d0:	4611      	mov	r1, r2
 80146d2:	2200      	movs	r2, #0
 80146d4:	602a      	str	r2, [r5, #0]
 80146d6:	461a      	mov	r2, r3
 80146d8:	f000 f962 	bl	80149a0 <_lseek>
 80146dc:	1c43      	adds	r3, r0, #1
 80146de:	d102      	bne.n	80146e6 <_lseek_r+0x1e>
 80146e0:	682b      	ldr	r3, [r5, #0]
 80146e2:	b103      	cbz	r3, 80146e6 <_lseek_r+0x1e>
 80146e4:	6023      	str	r3, [r4, #0]
 80146e6:	bd38      	pop	{r3, r4, r5, pc}
 80146e8:	20001c50 	.word	0x20001c50

080146ec <_read_r>:
 80146ec:	b538      	push	{r3, r4, r5, lr}
 80146ee:	4d07      	ldr	r5, [pc, #28]	; (801470c <_read_r+0x20>)
 80146f0:	4604      	mov	r4, r0
 80146f2:	4608      	mov	r0, r1
 80146f4:	4611      	mov	r1, r2
 80146f6:	2200      	movs	r2, #0
 80146f8:	602a      	str	r2, [r5, #0]
 80146fa:	461a      	mov	r2, r3
 80146fc:	f000 f958 	bl	80149b0 <_read>
 8014700:	1c43      	adds	r3, r0, #1
 8014702:	d102      	bne.n	801470a <_read_r+0x1e>
 8014704:	682b      	ldr	r3, [r5, #0]
 8014706:	b103      	cbz	r3, 801470a <_read_r+0x1e>
 8014708:	6023      	str	r3, [r4, #0]
 801470a:	bd38      	pop	{r3, r4, r5, pc}
 801470c:	20001c50 	.word	0x20001c50

08014710 <expf>:
 8014710:	b508      	push	{r3, lr}
 8014712:	ed2d 8b02 	vpush	{d8}
 8014716:	eef0 8a40 	vmov.f32	s17, s0
 801471a:	f000 f837 	bl	801478c <__ieee754_expf>
 801471e:	4b16      	ldr	r3, [pc, #88]	; (8014778 <expf+0x68>)
 8014720:	f993 3000 	ldrsb.w	r3, [r3]
 8014724:	3301      	adds	r3, #1
 8014726:	eeb0 8a40 	vmov.f32	s16, s0
 801472a:	d011      	beq.n	8014750 <expf+0x40>
 801472c:	eeb0 0a68 	vmov.f32	s0, s17
 8014730:	f000 f900 	bl	8014934 <finitef>
 8014734:	b160      	cbz	r0, 8014750 <expf+0x40>
 8014736:	eddf 7a11 	vldr	s15, [pc, #68]	; 801477c <expf+0x6c>
 801473a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801473e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014742:	dd0a      	ble.n	801475a <expf+0x4a>
 8014744:	f7fd f918 	bl	8011978 <__errno>
 8014748:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8014780 <expf+0x70>
 801474c:	2322      	movs	r3, #34	; 0x22
 801474e:	6003      	str	r3, [r0, #0]
 8014750:	eeb0 0a48 	vmov.f32	s0, s16
 8014754:	ecbd 8b02 	vpop	{d8}
 8014758:	bd08      	pop	{r3, pc}
 801475a:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8014784 <expf+0x74>
 801475e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014766:	d5f3      	bpl.n	8014750 <expf+0x40>
 8014768:	f7fd f906 	bl	8011978 <__errno>
 801476c:	2322      	movs	r3, #34	; 0x22
 801476e:	ed9f 8a06 	vldr	s16, [pc, #24]	; 8014788 <expf+0x78>
 8014772:	6003      	str	r3, [r0, #0]
 8014774:	e7ec      	b.n	8014750 <expf+0x40>
 8014776:	bf00      	nop
 8014778:	20000874 	.word	0x20000874
 801477c:	42b17180 	.word	0x42b17180
 8014780:	7f800000 	.word	0x7f800000
 8014784:	c2cff1b5 	.word	0xc2cff1b5
 8014788:	00000000 	.word	0x00000000

0801478c <__ieee754_expf>:
 801478c:	ee10 2a10 	vmov	r2, s0
 8014790:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8014794:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014798:	d902      	bls.n	80147a0 <__ieee754_expf+0x14>
 801479a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801479e:	4770      	bx	lr
 80147a0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80147a4:	d106      	bne.n	80147b4 <__ieee754_expf+0x28>
 80147a6:	eddf 7a51 	vldr	s15, [pc, #324]	; 80148ec <__ieee754_expf+0x160>
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	bf18      	it	ne
 80147ae:	eeb0 0a67 	vmovne.f32	s0, s15
 80147b2:	4770      	bx	lr
 80147b4:	484e      	ldr	r0, [pc, #312]	; (80148f0 <__ieee754_expf+0x164>)
 80147b6:	4282      	cmp	r2, r0
 80147b8:	dd04      	ble.n	80147c4 <__ieee754_expf+0x38>
 80147ba:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80148f4 <__ieee754_expf+0x168>
 80147be:	ee20 0a00 	vmul.f32	s0, s0, s0
 80147c2:	4770      	bx	lr
 80147c4:	2a00      	cmp	r2, #0
 80147c6:	da03      	bge.n	80147d0 <__ieee754_expf+0x44>
 80147c8:	4a4b      	ldr	r2, [pc, #300]	; (80148f8 <__ieee754_expf+0x16c>)
 80147ca:	4291      	cmp	r1, r2
 80147cc:	f200 808a 	bhi.w	80148e4 <__ieee754_expf+0x158>
 80147d0:	4a4a      	ldr	r2, [pc, #296]	; (80148fc <__ieee754_expf+0x170>)
 80147d2:	4291      	cmp	r1, r2
 80147d4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80147d8:	d954      	bls.n	8014884 <__ieee754_expf+0xf8>
 80147da:	4a49      	ldr	r2, [pc, #292]	; (8014900 <__ieee754_expf+0x174>)
 80147dc:	4291      	cmp	r1, r2
 80147de:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80147e2:	d836      	bhi.n	8014852 <__ieee754_expf+0xc6>
 80147e4:	4947      	ldr	r1, [pc, #284]	; (8014904 <__ieee754_expf+0x178>)
 80147e6:	4411      	add	r1, r2
 80147e8:	ed91 7a00 	vldr	s14, [r1]
 80147ec:	4946      	ldr	r1, [pc, #280]	; (8014908 <__ieee754_expf+0x17c>)
 80147ee:	440a      	add	r2, r1
 80147f0:	edd2 7a00 	vldr	s15, [r2]
 80147f4:	ee30 7a47 	vsub.f32	s14, s0, s14
 80147f8:	f1c3 0201 	rsb	r2, r3, #1
 80147fc:	1ad2      	subs	r2, r2, r3
 80147fe:	ee37 0a67 	vsub.f32	s0, s14, s15
 8014802:	ee60 6a00 	vmul.f32	s13, s0, s0
 8014806:	eddf 5a41 	vldr	s11, [pc, #260]	; 801490c <__ieee754_expf+0x180>
 801480a:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8014910 <__ieee754_expf+0x184>
 801480e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8014812:	eddf 5a40 	vldr	s11, [pc, #256]	; 8014914 <__ieee754_expf+0x188>
 8014816:	eee5 5a26 	vfma.f32	s11, s10, s13
 801481a:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8014918 <__ieee754_expf+0x18c>
 801481e:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8014822:	eddf 5a3e 	vldr	s11, [pc, #248]	; 801491c <__ieee754_expf+0x190>
 8014826:	eee5 5a26 	vfma.f32	s11, s10, s13
 801482a:	eeb0 5a40 	vmov.f32	s10, s0
 801482e:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8014832:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8014836:	eef0 6a45 	vmov.f32	s13, s10
 801483a:	ee20 5a05 	vmul.f32	s10, s0, s10
 801483e:	bb92      	cbnz	r2, 80148a6 <__ieee754_expf+0x11a>
 8014840:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8014844:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8014848:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801484c:	ee36 0a40 	vsub.f32	s0, s12, s0
 8014850:	4770      	bx	lr
 8014852:	4b33      	ldr	r3, [pc, #204]	; (8014920 <__ieee754_expf+0x194>)
 8014854:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8014924 <__ieee754_expf+0x198>
 8014858:	4413      	add	r3, r2
 801485a:	edd3 7a00 	vldr	s15, [r3]
 801485e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014862:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8014928 <__ieee754_expf+0x19c>
 8014866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801486a:	ee17 2a90 	vmov	r2, s15
 801486e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014872:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014876:	eeb0 7a40 	vmov.f32	s14, s0
 801487a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801492c <__ieee754_expf+0x1a0>
 801487e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014882:	e7bc      	b.n	80147fe <__ieee754_expf+0x72>
 8014884:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8014888:	d20b      	bcs.n	80148a2 <__ieee754_expf+0x116>
 801488a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80148f4 <__ieee754_expf+0x168>
 801488e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8014892:	eef4 6ac6 	vcmpe.f32	s13, s12
 8014896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801489a:	dd02      	ble.n	80148a2 <__ieee754_expf+0x116>
 801489c:	ee30 0a06 	vadd.f32	s0, s0, s12
 80148a0:	4770      	bx	lr
 80148a2:	2200      	movs	r2, #0
 80148a4:	e7ad      	b.n	8014802 <__ieee754_expf+0x76>
 80148a6:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80148aa:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80148ae:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80148b2:	bfb8      	it	lt
 80148b4:	3264      	addlt	r2, #100	; 0x64
 80148b6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80148ba:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80148be:	ee76 7a40 	vsub.f32	s15, s12, s0
 80148c2:	ee17 3a90 	vmov	r3, s15
 80148c6:	bfab      	itete	ge
 80148c8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80148cc:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80148d0:	ee00 3a10 	vmovge	s0, r3
 80148d4:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8014930 <__ieee754_expf+0x1a4>
 80148d8:	bfbc      	itt	lt
 80148da:	ee00 3a10 	vmovlt	s0, r3
 80148de:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80148e2:	4770      	bx	lr
 80148e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80148ec <__ieee754_expf+0x160>
 80148e8:	4770      	bx	lr
 80148ea:	bf00      	nop
 80148ec:	00000000 	.word	0x00000000
 80148f0:	42b17217 	.word	0x42b17217
 80148f4:	7149f2ca 	.word	0x7149f2ca
 80148f8:	42cff1b5 	.word	0x42cff1b5
 80148fc:	3eb17218 	.word	0x3eb17218
 8014900:	3f851591 	.word	0x3f851591
 8014904:	08024144 	.word	0x08024144
 8014908:	0802414c 	.word	0x0802414c
 801490c:	3331bb4c 	.word	0x3331bb4c
 8014910:	b5ddea0e 	.word	0xb5ddea0e
 8014914:	388ab355 	.word	0x388ab355
 8014918:	bb360b61 	.word	0xbb360b61
 801491c:	3e2aaaab 	.word	0x3e2aaaab
 8014920:	0802413c 	.word	0x0802413c
 8014924:	3fb8aa3b 	.word	0x3fb8aa3b
 8014928:	3f317180 	.word	0x3f317180
 801492c:	3717f7d1 	.word	0x3717f7d1
 8014930:	0d800000 	.word	0x0d800000

08014934 <finitef>:
 8014934:	b082      	sub	sp, #8
 8014936:	ed8d 0a01 	vstr	s0, [sp, #4]
 801493a:	9801      	ldr	r0, [sp, #4]
 801493c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014940:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8014944:	bfac      	ite	ge
 8014946:	2000      	movge	r0, #0
 8014948:	2001      	movlt	r0, #1
 801494a:	b002      	add	sp, #8
 801494c:	4770      	bx	lr
	...

08014950 <_close>:
 8014950:	4b02      	ldr	r3, [pc, #8]	; (801495c <_close+0xc>)
 8014952:	2258      	movs	r2, #88	; 0x58
 8014954:	601a      	str	r2, [r3, #0]
 8014956:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801495a:	4770      	bx	lr
 801495c:	20001c50 	.word	0x20001c50

08014960 <_fstat>:
 8014960:	4b02      	ldr	r3, [pc, #8]	; (801496c <_fstat+0xc>)
 8014962:	2258      	movs	r2, #88	; 0x58
 8014964:	601a      	str	r2, [r3, #0]
 8014966:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801496a:	4770      	bx	lr
 801496c:	20001c50 	.word	0x20001c50

08014970 <_getpid>:
 8014970:	4b02      	ldr	r3, [pc, #8]	; (801497c <_getpid+0xc>)
 8014972:	2258      	movs	r2, #88	; 0x58
 8014974:	601a      	str	r2, [r3, #0]
 8014976:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801497a:	4770      	bx	lr
 801497c:	20001c50 	.word	0x20001c50

08014980 <_isatty>:
 8014980:	4b02      	ldr	r3, [pc, #8]	; (801498c <_isatty+0xc>)
 8014982:	2258      	movs	r2, #88	; 0x58
 8014984:	601a      	str	r2, [r3, #0]
 8014986:	2000      	movs	r0, #0
 8014988:	4770      	bx	lr
 801498a:	bf00      	nop
 801498c:	20001c50 	.word	0x20001c50

08014990 <_kill>:
 8014990:	4b02      	ldr	r3, [pc, #8]	; (801499c <_kill+0xc>)
 8014992:	2258      	movs	r2, #88	; 0x58
 8014994:	601a      	str	r2, [r3, #0]
 8014996:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801499a:	4770      	bx	lr
 801499c:	20001c50 	.word	0x20001c50

080149a0 <_lseek>:
 80149a0:	4b02      	ldr	r3, [pc, #8]	; (80149ac <_lseek+0xc>)
 80149a2:	2258      	movs	r2, #88	; 0x58
 80149a4:	601a      	str	r2, [r3, #0]
 80149a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80149aa:	4770      	bx	lr
 80149ac:	20001c50 	.word	0x20001c50

080149b0 <_read>:
 80149b0:	4b02      	ldr	r3, [pc, #8]	; (80149bc <_read+0xc>)
 80149b2:	2258      	movs	r2, #88	; 0x58
 80149b4:	601a      	str	r2, [r3, #0]
 80149b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80149ba:	4770      	bx	lr
 80149bc:	20001c50 	.word	0x20001c50

080149c0 <_write>:
 80149c0:	4b02      	ldr	r3, [pc, #8]	; (80149cc <_write+0xc>)
 80149c2:	2258      	movs	r2, #88	; 0x58
 80149c4:	601a      	str	r2, [r3, #0]
 80149c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80149ca:	4770      	bx	lr
 80149cc:	20001c50 	.word	0x20001c50

080149d0 <_exit>:
 80149d0:	e7fe      	b.n	80149d0 <_exit>
	...

080149d4 <_init>:
 80149d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149d6:	bf00      	nop
 80149d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80149da:	bc08      	pop	{r3}
 80149dc:	469e      	mov	lr, r3
 80149de:	4770      	bx	lr

080149e0 <_fini>:
 80149e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149e2:	bf00      	nop
 80149e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80149e6:	bc08      	pop	{r3}
 80149e8:	469e      	mov	lr, r3
 80149ea:	4770      	bx	lr
